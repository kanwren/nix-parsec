#hash(("1d6" . #hasheq((author . "jesse@serverracket.com jesse@lisp.sh") (authors . ("jesse@serverracket.com" "jesse@lisp.sh")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/1d6.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/1d6.txt"))) (checksum . "ae3bf1fc265bd1815dc8f9d6bbb153afdbf3a53d") (checksum-error . #f) (collection . "1d6") (conflicts . ()) (date-added . 1553839150) (dependencies . ("base" "brag" "beautiful-racket-lib" "scribble-lib" "rackunit-lib" "racket-doc" "beautiful-racket-lib")) (description . "A partial implementation of the Troll dice-rolling language in Racket.") (implies . ()) (last-checked . 1632906418) (last-edit . 1607664580) (last-updated . 1570135391) (modules . ((lib "1d6/expander.rkt") (lib "1d6/tokenizer.rkt") (lib "1d6/reader.rkt") (lib "1d6/main.rkt") (lib "1d6/parser.rkt") (lib "1d6/grammar.rkt"))) (name . "1d6") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jesse@lisp.sh . #t) (author:jesse@serverracket.com . #t) (game . #t) (lang . #t) (random . #t) (ring:1 . #t))) (source . "https://github.com/jessealama/1d6.git") (tags . ("game" "lang" "random")) (versions . #hash((default . #hasheq((checksum . "ae3bf1fc265bd1815dc8f9d6bbb153afdbf3a53d") (source . "https://github.com/jessealama/1d6.git") (source_url . "https://github.com/jessealama/1d6.git"))))))) ("2048" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "2048" "doc/2048@2048/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/2048.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/2048.txt"))) (checksum . "ef07f6f91d58f00c50aafb239926596477e56e50") (checksum-error . #f) (collection . "2048") (conflicts . ()) (date-added . 1582818247) (dependencies . (("base" #:version "7.6") "draw-lib" "gui-lib" "icns" "pict-lib" "string-constants-lib" "typed-racket-lib" "typed-racket-more" "racket-doc" "scribble-lib" "rackunit-lib" "rackunit-typed")) (description . "The game of 2048 in Racket") (implies . ()) (last-checked . 1632906419) (last-edit . 1582818247) (last-updated . 1622159918) (modules . ((lib "2048/kernel.rkt") (lib "2048/multicast.rkt") (lib "2048/pict/file-icon.rkt") (lib "2048/gui/preferences-redirect.rkt") (lib "2048/state.rkt") (lib "2048/include-agpl.rkt") (lib "2048/scribblings/2048.scrbl") (lib "2048/write-icons.rkt") (lib "2048/pict/stx.rkt") (lib "2048/gui/utils.rkt") (lib "2048/pict.rkt") (lib "2048/kernel/board.rkt") (lib "2048/kernel/saved.rkt") (lib "2048/pict/utils.rkt") (lib "2048/kernel/tree.rkt") (lib "2048/gui/scratch/all-bookmarks.rkt") (lib "2048/main/gui/2048.rkt") (lib "2048/gui.rkt") (lib "2048/kernel/game.rkt") (lib "2048/pict/color.rkt"))) (name . "2048") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (app . #t) (application . #t) (author:philip@philipmcgrath.com . #t) (game . #t) (games . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/LiberalArtist/2048.git") (tags . ("app" "application" "game" "games" "gui")) (versions . #hash((default . #hasheq((checksum . "ef07f6f91d58f00c50aafb239926596477e56e50") (source . "https://github.com/LiberalArtist/2048.git") (source_url . "https://github.com/LiberalArtist/2048.git"))))))) ("2d" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "3f319d170269e8d60483c22eaf9c5eb262bde30b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("2d-lib" "2d-doc")) (description . "2d syntax") (implies . ("2d-lib" "2d-doc")) (last-checked . 1632906419) (last-edit . 1441670926) (last-updated . 1571879687) (modules . ()) (name . "2d") (ring . 0) (search-terms . #hasheq((author:robby@racket-lang.org . #t) (lang-extension . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/2d?path=2d") (tags . ("lang-extension" "main-distribution")) (versions . #hash((default . #hasheq((checksum . "3f319d170269e8d60483c22eaf9c5eb262bde30b") (source . "git://github.com/racket/2d?path=2d") (source_url . "http://github.com/racket/2d/tree/master?path=2d"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("6.2.1" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("2d-doc" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "2d" "doc/2d@2d-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "3f319d170269e8d60483c22eaf9c5eb262bde30b") (checksum-error . #f) (collection . "2d") (conflicts . ()) (dependencies . ("base" "2d-lib" "scribble-lib" "racket-doc" "syntax-color-doc" "syntax-color-lib")) (description . "Documentation for 2d") (implies . ()) (last-checked . 1632906419) (last-edit . 1441670926) (last-updated . 1571879687) (modules . ((lib "2d/scribblings/2d.scrbl"))) (name . "2d-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/2d?path=2d-doc") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "3f319d170269e8d60483c22eaf9c5eb262bde30b") (source . "git://github.com/racket/2d?path=2d-doc") (source_url . "http://github.com/racket/2d/tree/master?path=2d-doc"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("6.2.1" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("2d-lib" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "3f319d170269e8d60483c22eaf9c5eb262bde30b") (checksum-error . #f) (collection . "2d") (conflicts . ()) (dependencies . (("base" #:version "6.90.0.19") "scribble-lib" "syntax-color-lib")) (description . "Implementation (no documentation) for 2d") (implies . ()) (last-checked . 1632906419) (last-edit . 1441670926) (last-updated . 1571879688) (modules . ((lib "2d/private/read-util.rkt") (lib "2d/dir-chars.rkt") (lib "2d/lang/reader.rkt") (lib "2d/tabular.rkt") (lib "2d/cond.rkt") (lib "2d/private/lexer.rkt") (lib "2d/lexer.rkt") (lib "2d/match.rkt") (lib "2d/readtable.rkt") (lib "2d/private/readtable.rkt"))) (name . "2d-lib") (ring . 0) (search-terms . #hasheq((author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/2d?path=2d-lib") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "3f319d170269e8d60483c22eaf9c5eb262bde30b") (source . "git://github.com/racket/2d?path=2d-lib") (source_url . "http://github.com/racket/2d/tree/master?path=2d-lib"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("6.2.1" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("2d-test" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "3f319d170269e8d60483c22eaf9c5eb262bde30b") (checksum-error . #f) (collection . "2d") (conflicts . ()) (dependencies . ("base" "2d-lib" "racket-index" "rackunit-lib" "option-contract-lib" "at-exp-lib" "gui-lib" "syntax-color-lib")) (description . "Tests for 2d") (implies . ()) (last-checked . 1632906420) (last-edit . 1441670926) (last-updated . 1571879688) (modules . ((lib "2d/tests/lexer-stress-test.rkt") (lib "2d/tests/match-test.rkt") (lib "2d/tests/readtable-test.rkt") (lib "2d/tests/docs-complete.rkt") (lib "2d/tests/cond-test.rkt") (lib "2d/tests/lexer-test.rkt"))) (name . "2d-test") (ring . 0) (search-terms . #hasheq((author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/2d?path=2d-test") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "3f319d170269e8d60483c22eaf9c5eb262bde30b") (source . "git://github.com/racket/2d?path=2d-test") (source_url . "http://github.com/racket/2d/tree/master?path=2d-test"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("6.2.1" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("2htdp-typed" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "2htdp-typed" "doc/2htdp-typed@2htdp-typed/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/2htdp-typed.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/2htdp-typed.txt"))) (checksum . "b46c957f0ad7490bc7b0f01da0e80380f34cac2d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "htdp-lib" "typed-racket-lib" "typed-racket-more" "unstable-list-lib" "unstable-contract-lib" "scribble-lib" "racket-doc" "htdp-doc" "typed-racket-doc")) (description . "A partial version of 2htdp for Typed Racket") (implies . ()) (last-checked . 1632906420) (last-edit . 1493076385) (last-updated . 1502815863) (modules . ((lib "typed/scribblings/2htdp-typed.scrbl") (lib "typed/2htdp/image.rkt") (lib "typed/2htdp/private/big-bang-wrapper.rkt") (lib "typed/2htdp/batch-io.rkt") (lib "typed/lang/posn.rkt") (lib "typed/2htdp/universe.rkt"))) (name . "2htdp-typed") (ring . 1) (search-terms . #hasheq((2htdp . #t) (:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (big-bang . #t) (gui . #t) (ring:1 . #t) (typed-racket . #t))) (source . "git://github.com/lexi-lambda/racket-2htdp-typed") (tags . ("2htdp" "big-bang" "gui" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "b46c957f0ad7490bc7b0f01da0e80380f34cac2d") (source . "git://github.com/lexi-lambda/racket-2htdp-typed") (source_url . "http://github.com/lexi-lambda/racket-2htdp-typed/tree/master"))) ("6.1.1" . #hasheq((checksum . "4f3d46b80f59f5a4dd47d3384c68f6c07c923329") (source . "git://github.com/lexi-lambda/racket-2htdp-typed#v6.1.1") (source_url . "http://github.com/lexi-lambda/racket-2htdp-typed/tree/master#v6.1.1"))))))) ("3d-model" . #hasheq((author . "code_man@cybnet.ch") (authors . ("code_man@cybnet.ch")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/3d-model.txt") (docs . (("main" "3d-model" "doc/3d-model@3d-model/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/3d-model.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/3d-model.txt"))) (checksum . "078e2dcd4a62eb026dedbdf3fdeaef3efc8e9925") (checksum-error . #f) (collection . "3d-model") (conflicts . ()) (dependencies . ()) (description . "3d-model vertex/tri representaion library") (implies . ()) (last-checked . 1632906420) (last-edit . 1396428048) (last-updated . 1632223206) (modules . ((lib "3d-model/3d-model.rkt") (lib "3d-model/3d-model.scrbl"))) (name . "3d-model") (ring . 1) (search-terms . #hasheq((3d . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:code_man@cybnet.ch . #t) (model . #t) (ring:1 . #t))) (source . "http://code_man.cybnet.ch/racket/3d-model.zip") (tags . ("3d" "model")) (versions . #hash((default . #hasheq((checksum . "078e2dcd4a62eb026dedbdf3fdeaef3efc8e9925") (source . "http://code_man.cybnet.ch/racket/3d-model.zip") (source_url . "http://code_man.cybnet.ch/racket/3d-model.zip"))))))) ("3s" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "3s" "doc/3s@3s/index.html"))) (failure-log . "server/built/fail/3s.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "b84991a59ced42303420c58d71702ed9db6a2644") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("lux" "base" "openal" "racket-doc" "scribble-lib")) (description . "positional sound and mixing for lux and other programs") (implies . ()) (last-checked . 1632906421) (last-edit . 1447778167) (last-updated . 1527813719) (modules . ((lib "3s/tests/example.rkt") (lib "3s/main.rkt") (lib "3s/3s.scrbl") (lib "lux/chaos/3s.rkt"))) (name . "3s") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (audio . #t) (author:jay.mccarthy@gmail.com . #t) (games . #t) (k . #t) (ring:1 . #t) (s . #t))) (source . "git://github.com/jeapostrophe/3s") (tags . ("audio" "games" "k" "s")) (versions . #hash((default . #hasheq((checksum . "b84991a59ced42303420c58d71702ed9db6a2644") (source . "git://github.com/jeapostrophe/3s") (source_url . "http://github.com/jeapostrophe/3s/tree/master"))))))) ("ANU-Web-Quantum-RNG" . #hasheq((author . "tetsumi@protonmail.com") (authors . ("tetsumi@protonmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "awqrng" "doc/awqrng@ANU-Web-Quantum-RNG/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ANU-Web-Quantum-RNG.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ANU-Web-Quantum-RNG.txt"))) (checksum . "e8de6a730ecdf8665dfa0e01540b199d51d2667a") (checksum-error . #f) (collection . "ANU-Web-Quantum-RNG") (conflicts . ()) (date-added . 1560204951) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "To fetch true random numbers from the quantum random number generator of the Australian National University (QRNG@ANU).") (implies . ()) (last-checked . 1632902839) (last-edit . 1560204951) (last-updated . 1621108682) (modules . ((lib "ANU-Web-Quantum-RNG/scribblings/awqrng.scrbl") (lib "ANU-Web-Quantum-RNG/main.rkt"))) (name . "ANU-Web-Quantum-RNG") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (Quantum . #t) (RNG . #t) (Random . #t) (author:tetsumi@protonmail.com . #t) (ring:1 . #t))) (source . "https://bitbucket.org/Tetsumi/anu-web-quantum-rng.git") (tags . ("Quantum" "Random" "RNG")) (versions . #hash((default . #hasheq((checksum . "e8de6a730ecdf8665dfa0e01540b199d51d2667a") (source . "https://bitbucket.org/Tetsumi/anu-web-quantum-rng.git") (source_url . "https://bitbucket.org/Tetsumi/anu-web-quantum-rng.git"))))))) ("Adapton" . #hasheq((author . "cwolfmentzer@gmail.com hammer@cs.umd.edu") (authors . ("cwolfmentzer@gmail.com" "hammer@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "adapton" "doc/adapton@Adapton/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Adapton.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/Adapton.txt"))) (checksum . "9ddfec8a22809cfb37fbbd8871a088fc3bd51787") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Adapton: Composable, Demand-Driven Incremental Computation") (implies . ()) (last-checked . 1632902824) (last-edit . 1440430256) (last-updated . 1513628061) (modules . ((lib "adapton/tests.rkt") (lib "adapton/adapton.rkt") (lib "adapton/merge-sort.rkt") (lib "adapton/graphing.rkt") (lib "adapton/tools-for-testing.rkt") (lib "adapton/data-structures.rkt") (lib "adapton/main.rkt") (lib "adapton/adapton.scrbl") (lib "adapton/memo-table-modification-tools.rkt"))) (name . "Adapton") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:cwolfmentzer@gmail.com . #t) (author:hammer@cs.umd.edu . #t) (memoization . #t) (ring:1 . #t))) (source . "git://github.com/plum-umd/adapton.racket") (tags . ("memoization")) (versions . #hash((default . #hasheq((checksum . "9ddfec8a22809cfb37fbbd8871a088fc3bd51787") (source . "git://github.com/plum-umd/adapton.racket") (source_url . "http://github.com/plum-umd/adapton.racket/tree/master"))))))) ("Agatha" . #hasheq((author . "filhojoseildo@gmail.com") (authors . ("filhojoseildo@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "agatha" "doc/agatha@Agatha/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Agatha.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/Agatha.txt"))) (checksum . "de9e340b97dbb22677dc3ba74d6ec8826bf9af90") (checksum-error . #f) (collection . "agatha") (conflicts . ()) (date-added . 1577480524) (dependencies . ("base" "beautiful-racket-lib" "brag-lib" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Uma linguagem para Logica de primeira ordem") (implies . ()) (last-checked . 1632902830) (last-edit . 1579030577) (last-updated . 1586729119) (modules . ((lib "agatha/main.rkt") (lib "agatha/parser-test.rkt") (lib "agatha/agatha-test4.rkt") (lib "agatha/boolean-evaluator.rkt") (lib "agatha/agatha-test3.rkt") (lib "agatha/scribblings/agatha.scrbl") (lib "agatha/parser-boolean-prefix.rkt") (lib "agatha/parser.rkt") (lib "agatha/reader.rkt") (lib "agatha/symbolize.rkt") (lib "agatha/utils.rkt") (lib "agatha/tokenizer.rkt") (lib "agatha/agatha-test2.rkt") (lib "agatha/expander.rkt") (lib "agatha/agatha-test1.rkt") (lib "agatha/parser-boolean-parentesis.rkt"))) (name . "Agatha") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (Logic . #t) (author:filhojoseildo@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/joseildofilho/Agatha-Lang.git") (tags . ("Logic")) (versions . #hash((default . #hasheq((checksum . "de9e340b97dbb22677dc3ba74d6ec8826bf9af90") (source . "https://github.com/joseildofilho/Agatha-Lang.git") (source_url . "https://github.com/joseildofilho/Agatha-Lang.git"))))))) ("BSA-drracket-teachpacks" . #hasheq((author . "matthias@ccs.neu.edu") (authors . ("matthias@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/BSA-drracket-teachpacks.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/.git?path=bootstrapworld%2FBSA-drracket-teachpacks.git\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (date-added . 1609093465) (dependencies . ()) (description . "The DrRacket teach packs for the Bootstrap plus the files used for Fall 2020. ") (implies . ()) (last-checked . 1632902869) (last-edit . 1609093465) (last-updated . 1621808089) (modules . ()) (name . "BSA-drracket-teachpacks") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:matthias@ccs.neu.edu . #t) (education . #t) (ring:1 . #t))) (source . "https://github.com/.git?path=bootstrapworld%2FBSA-drracket-teachpacks.git") (tags . ("education")) (versions . #hash((default . #hasheq((checksum . "") (source . "https://github.com/.git?path=bootstrapworld%2FBSA-drracket-teachpacks.git") (source_url . "https://github.com/.git?path=bootstrapworld%2FBSA-drracket-teachpacks.git"))))))) ("Chinese-4-Stratego" . #hasheq((author . "lolisa@marisa.moe") (authors . ("lolisa@marisa.moe")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/Chinese-4-Stratego.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "2df6d4ca0b402e6387413d34f49c54cc3c86c610") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: git://github.com/lolisa/Chinese-4-Stratego\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ("gls" "base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Chinese Stratego") (implies . ()) (last-checked . 1632902879) (last-edit . 1450708697) (last-updated . 1621808098) (modules . ((lib "Chinese-4-Stratego/main.rkt") (lib "Chinese-4-Stratego/scribblings/Chinese-4-Stratego.scrbl"))) (name . "Chinese-4-Stratego") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:lolisa@marisa.moe . #t) (games . #t) (ring:1 . #t))) (source . "git://github.com/lolisa/Chinese-4-Stratego") (tags . ("games")) (versions . #hash((default . #hasheq((checksum . "2df6d4ca0b402e6387413d34f49c54cc3c86c610") (source . "git://github.com/lolisa/Chinese-4-Stratego") (source_url . "http://github.com/lolisa/Chinese-4-Stratego/tree/master"))))))) ("DrRacketTheme" . #hasheq((author . "1227847322@qq.com") (authors . ("1227847322@qq.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/DrRacketTheme.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/DrRacketTheme.txt"))) (checksum . "6ee86a2b2824f755bdaf771c788559d9cab7639c") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "drracket" "gui-lib" "pict-lib" "draw-lib")) (description . "set the background image for DrRacket\r\nView -> Set Background") (implies . ()) (last-checked . 1632902974) (last-edit . 1530784261) (last-updated . 1530841362) (modules . ((lib "DrRacketTheme/theme.rkt"))) (name . "DrRacketTheme") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:1227847322@qq.com . #t) (plugin . #t) (ring:1 . #t))) (source . "https://github.com/Syntacticlosure/DrRacketTheme.git") (tags . ("plugin")) (versions . #hash((default . #hasheq((checksum . "6ee86a2b2824f755bdaf771c788559d9cab7639c") (source . "https://github.com/Syntacticlosure/DrRacketTheme.git") (source_url . "https://github.com/Syntacticlosure/DrRacketTheme.git"))))))) ("Drrackgit" . #hasheq((author . "bradley.busching@gmail.com") (authors . ("bradley.busching@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/Drrackgit.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Drrackgit.txt") (test-failure-log . "server/built/test-fail/Drrackgit.txt") (test-success-log . #f))) (checksum . "7c2836bf5a08858eca7d32959d8ae3fd90a5defe") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("libgit2")) (description . "A git plugin for DrRacket.") (implies . ()) (last-checked . 1632902974) (last-edit . 1497302902) (last-updated . 1513894499) (modules . ((lib "Drrackgit/drrackgit.rkt"))) (name . "Drrackgit") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:bradley.busching@gmail.com . #t) (git . #t) (github . #t) (ring:1 . #t))) (source . "git://github.com/bbusching/drrackgit") (tags . ("git" "github")) (versions . #hash((default . #hasheq((checksum . "7c2836bf5a08858eca7d32959d8ae3fd90a5defe") (source . "git://github.com/bbusching/drrackgit") (source_url . "http://github.com/bbusching/drrackgit/tree/master"))))))) ("Fairylog" . #hasheq((author . "pezi_pink@pinksquirrellabs.com") (authors . ("pezi_pink@pinksquirrellabs.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fairylog" "doc/fairylog@Fairylog/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Fairylog.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/Fairylog.txt"))) (checksum . "f0c1d0d82e2ed9ff02486ddd91a0ede5c5483ef7") (checksum-error . #f) (collection . "fairylog") (conflicts . ()) (date-added . 1549919081) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "A Verilog dialect and source-to-source compiler, with various compile time features and macros.") (implies . ()) (last-checked . 1632902995) (last-edit . 1549919081) (last-updated . 1556553954) (modules . ((lib "fairylog/lang/language-info.rkt") (lib "fairylog/reader.rkt") (lib "fairylog/lang/reader.rkt") (lib "fairylog/main.rkt") (lib "fairylog/expander.rkt") (lib "fairylog/scribblings/fairylog.scrbl") (lib "fairylog/lang/runtime-config.rkt"))) (name . "Fairylog") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pezi_pink@pinksquirrellabs.com . #t) (fpga . #t) (ring:1 . #t) (verilog . #t))) (source . "https://github.com/pezipink/fairylog.git") (tags . ("fpga" "verilog")) (versions . #hash((default . #hasheq((checksum . "f0c1d0d82e2ed9ff02486ddd91a0ede5c5483ef7") (source . "https://github.com/pezipink/fairylog.git") (source_url . "https://github.com/pezipink/fairylog.git"))))))) ("Funktionuckelt" . #hasheq((author . "coluckenbach@adct.com") (authors . ("coluckenbach@adct.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Funktionuckelt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/Funktionuckelt.txt"))) (checksum . "c465bd2afced654c4bf08b70740cd2be6a383a62") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "A dark eye-friendly color scheme for Racket") (implies . ()) (last-checked . 1632903337) (last-edit . 1544213076) (last-updated . 1596547947) (modules . ()) (name . "Funktionuckelt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:coluckenbach@adct.com . #t) (colorscheme . #t) (ring:1 . #t))) (source . "https://github.com/DondiBronson/Funktionuckelt.git") (tags . ("colorscheme")) (versions . #hash((default . #hasheq((checksum . "c465bd2afced654c4bf08b70740cd2be6a383a62") (source . "https://github.com/DondiBronson/Funktionuckelt.git") (source_url . "https://github.com/DondiBronson/Funktionuckelt.git"))))))) ("GLPK" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "glpk" "doc/glpk@GLPK/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/GLPK.txt") (test-failure-log . "server/built/test-fail/GLPK.txt") (test-success-log . #f))) (checksum . "ff20adf1ea0f6792b6a858aa421c79ce22a8fd5d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "racket-doc" "scribble-lib" "scribble-math" "typed-racket-more")) (description . "An interface to the Gnu Linear Programming Kit (GLPK)") (implies . ()) (last-checked . 1632903365) (last-edit . 1498178980) (last-updated . 1579824335) (modules . ((lib "glpk/lp-solve.rkt") (lib "glpk/chicken-example.rkt") (lib "glpk/tests/use-lib.rkt") (lib "glpk/tests/tests.rkt") (lib "glpk/glpk.scrbl") (lib "glpk/main.rkt") (lib "glpk/lib.rkt"))) (name . "GLPK") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (linear-programming . #t) (math . #t) (ring:1 . #t))) (source . "git://github.com/jbclements/glpk") (tags . ("linear-programming" "math")) (versions . #hash((default . #hasheq((checksum . "ff20adf1ea0f6792b6a858aa421c79ce22a8fd5d") (source . "git://github.com/jbclements/glpk") (source_url . "http://github.com/jbclements/glpk/tree/master"))))))) ("GUI-helpers" . #hasheq((author . "james3@plattjt.com") (authors . ("james3@plattjt.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/GUI-helpers.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "d8bb2d12ca5278508d9018813eafa5064dcd1bd3") (checksum-error . #f) (collection . "GUI-helpers") (conflicts . ()) (date-added . 1550773212) (dependencies . ("base" "gui-lib" "handy" "racket/gui")) (description . "This package provides functions to help make GUI creation easy.   It sets defaults wherever possible,  for example, standard keyboard shortcuts in menus.") (implies . ()) (last-checked . 1632903378) (last-edit . 1550858379) (last-updated . 1620468841) (modules . ((lib "GUI-helpers/tests/GUI_helpers_t.rkt") (lib "GUI-helpers/GUI_helpers.rkt") (lib "GUI-helpers/scribblings/GUI-helpers.scrbl") (lib "GUI-helpers/tests/checklist-test.rkt") (lib "GUI-helpers/main.rkt") (lib "GUI-helpers/menu-actions.rkt") (lib "GUI-helpers/list-box-table-actions.rkt") (lib "GUI-helpers/table-row-edit-menu.rkt") (lib "GUI-helpers/data_manipulation.rkt"))) (name . "GUI-helpers") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:james3@plattjt.com . #t) (gui . #t) (ring:1 . #t))) (source . "https://gitlab.com/james_platt/GUI-helpers.git") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "d8bb2d12ca5278508d9018813eafa5064dcd1bd3") (source . "https://gitlab.com/james_platt/GUI-helpers.git") (source_url . "https://gitlab.com/james_platt/GUI-helpers.git"))))))) ("HoLy" . #hasheq((author . "anihirash@gmail.com") (authors . ("anihirash@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/HoLy.txt") (docs . (("main" "HoLy" "doc/HoLy@HoLy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/HoLy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/HoLy.txt"))) (checksum . "e6574beb88937357cb73e834dacf10ceb1805495") (checksum-error . #f) (collection . "HoLy") (conflicts . ()) (dependencies . ("web-server" "scribble-lib" "racket-doc")) (description . "HoLy is simple http library for creating your web-applications and rest api's easier.\r\n\r\nThis library covers only http-server layer(url-dispatching, cookies, parameters). \r\n\r\nLibrary in aplha state - api unstable. \r\nPull requests are welcome!") (implies . ()) (last-checked . 1632903394) (last-edit . 1510304428) (last-updated . 1509616900) (modules . ((lib "HoLy/main.rkt") (lib "HoLy/scribblings/HoLy.scrbl"))) (name . "HoLy") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (api . #t) (author:anihirash@gmail.com . #t) (framework . #t) (http . #t) (rest . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/nihirash/holy.git") (tags . ("api" "framework" "http" "rest" "web")) (versions . #hash((default . #hasheq((checksum . "e6574beb88937357cb73e834dacf10ceb1805495") (source . "https://github.com/nihirash/holy.git") (source_url . "https://github.com/nihirash/holy.git"))))))) ("Ibkre" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/Ibkre.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9874511b6c5b920ffdbe4e40c6ac2cdeec4a9b8c") (checksum-error . #f) (collection . "ibkre") (conflicts . ()) (date-added . 1623958586) (dependencies . ("base" "opt" "bitsyntax" "syndicate" "rackunit-lib" "typed-racket-more" "typed-racket-lib" "scribble-lib" "racket-doc" "rackunit-lib" "rackunit-typed" "sandbox-lib")) (description . "IBK Actor/Syndicate Library") (implies . ()) (last-checked . 1632903411) (last-edit . 1623969832) (last-updated . 1627521228) (modules . ((lib "ibkre/logging.rkt") (lib "ibkre/data/contract.rkt") (lib "ibkre/util.rkt") (lib "ibkre/coding/msg.rkt") (lib "ibkre/data/tick-attribute.rkt") (lib "ibkre/data/order.rkt") (lib "ibkre/data/msgids.rkt") (lib "ibkre/api/rsp/tws-ready-sig.rkt") (lib "ibkre/api/req/scanner-parameters.rkt") (lib "ibkre/data/bar-size.rkt") (lib "ibkre/api/rsp/tws-inbound-dispatch-sig.rkt") (lib "ibkre/inbound.rkt") (lib "ibkre/api/rsp/dispatch-ground-unit.rkt") (lib "ibkre/txid/gen-tx-rand.rkt") (lib "ibkre/api/msg.rkt") (lib "ibkre/ready-unit.rkt") (lib "ibkre/coding/tick.rkt") (lib "ibkre/coding/primitive.rkt") (lib "ibkre/communicate.rkt") (lib "ibkre/comm/types.rkt") (lib "ibkre/api/req/request.rkt") (lib "ibkre/coding/field.rkt") (lib "ibkre/comm/msgs.rkt") (lib "ibkre/coding/parse.rkt") (lib "ibkre/data/field.rkt") (lib "ibkre/txid/gen-tx-id-sig.rkt") (lib "ibkre/txid/gen-tx-rand-unit.rkt") (lib "ibkre/api/req/tws-msg.rkt") (lib "ibkre/comm/encode.rkt") (lib "ibkre/comm/logging.rkt") (lib "ibkre/api/rsp/tws-inbound-handler-sig.rkt") (lib "ibkre/api/rsp/tws-inbound-handler-unit.rkt") (lib "ibkre/api/rsp/tws-inbound-sig.rkt") (lib "ibkre/scribblings/manual.scrbl") (lib "ibkre/session.rkt") (lib "ibkre/coding/order.rkt") (lib "ibkre/api/req/account.rkt") (lib "ibkre/data/tick.rkt") (lib "ibkre/coding/contract.rkt") (lib "ibkre/coding/decode.rkt") (lib "ibkre/comm/connection.rkt"))) (name . "Ibkre") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (IBK . #t) (author:ray.racine@gmail.com . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/ibkre.git") (tags . ("IBK")) (versions . #hash((default . #hasheq((checksum . "9874511b6c5b920ffdbe4e40c6ac2cdeec4a9b8c") (source . "https://gitlab.com/RayRacine/ibkre.git") (source_url . "https://gitlab.com/RayRacine/ibkre.git"))))))) ("Packrat" . #hasheq((author . "simon.haines@scalardata.com") (authors . ("simon.haines@scalardata.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "packrat" "doc/packrat@Packrat/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Packrat.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/Packrat.txt"))) (checksum . "b439a1d997df7bc6cf5d5c4f349355d84cb89e03") (checksum-error . #f) (collection . "packrat") (conflicts . ()) (date-added . 1561599393) (dependencies . ("base" "rackunit-lib" "srfi-lite-lib" "scribble-lib" "racket-doc")) (description . "A small library of parsing combinators and a syntax for defining parsers based on the portable packrat parsing library by Tony Garnock-Jones.") (implies . ()) (last-checked . 1632904284) (last-edit . 1561599393) (last-updated . 1561684441) (modules . ((lib "packrat/parse.rkt") (lib "packrat/combinator.rkt") (lib "packrat/main.rkt") (lib "packrat/test.rkt") (lib "packrat/scribblings/packrat.scrbl") (lib "packrat/parser-struct.rkt"))) (name . "Packrat") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:simon.haines@scalardata.com . #t) (combinator . #t) (parser . #t) (ring:1 . #t))) (source . "https://github.com/simonhaines/packrat.git") (tags . ("combinator" "parser")) (versions . #hash((default . #hasheq((checksum . "b439a1d997df7bc6cf5d5c4f349355d84cb89e03") (source . "https://github.com/simonhaines/packrat.git") (source_url . "https://github.com/simonhaines/packrat.git"))))))) ("Quaternion" . #hasheq((author . "andreas8001@hotmail.com") (authors . ("andreas8001@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "quaternion" "doc/quaternion@Quaternion/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/Quaternion.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/Quaternion.txt"))) (checksum . "96591d338f423f741f712150d0e20da93500f1e8") (checksum-error . #f) (collection . "quaternion") (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "typed-racket-more" "math-lib" "typed-racket-doc" "racket-doc" "math-doc")) (description . "Quaternion procedures for rotation of vectors and koordinates, avoids gimbal-lock.") (implies . ()) (last-checked . 1632904405) (last-edit . 1507668291) (last-updated . 1507879815) (modules . ((lib "quaternion/quaternion.scrbl") (lib "quaternion/quaternion.rkt") (lib "quaternion/main.rkt"))) (name . "Quaternion") (ring . 1) (search-terms . #hasheq((3D . #t) (:build-success: . #t) (:docs: . #t) (author:andreas8001@hotmail.com . #t) (math . #t) (pict3d . #t) (quaternion . #t) (ring:1 . #t))) (source . "git://github.com/APOS80/Quaternion") (tags . ("3D" "math" "pict3d" "quaternion")) (versions . #hash((default . #hasheq((checksum . "96591d338f423f741f712150d0e20da93500f1e8") (source . "git://github.com/APOS80/Quaternion") (source_url . "http://github.com/APOS80/Quaternion/tree/master"))))))) ("SAT" . #hasheq((author . "guannanwei@outlook.com") (authors . ("guannanwei@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "SAT" "doc/SAT@SAT/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/SAT.txt") (test-failure-log . "server/built/test-fail/SAT.txt") (test-success-log . #f))) (checksum . "f7d02e94bea4e5d2e1efcdf5678fc297b23957f5") (checksum-error . #f) (collection . "SAT") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "A simple SAT solver based on DPLL.") (implies . ()) (last-checked . 1632904553) (last-edit . 1507859818) (last-updated . 1537477173) (modules . ((lib "SAT/test.rkt") (lib "SAT/main.rkt") (lib "SAT/lib/dpll.rkt") (lib "SAT/lib/parser.rkt") (lib "SAT/scribblings/SAT.scrbl"))) (name . "SAT") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:guannanwei@outlook.com . #t) (ring:1 . #t))) (source . "git://github.com/Kraks/SAT.rkt") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f7d02e94bea4e5d2e1efcdf5678fc297b23957f5") (source . "git://github.com/Kraks/SAT.rkt") (source_url . "http://github.com/Kraks/SAT.rkt/tree/master"))))))) ("SSE" . #hasheq((author . "qxacur@use.startmail.com") (authors . ("qxacur@use.startmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "SSE" "doc/SSE@SSE/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/SSE.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/SSE.txt"))) (checksum . "a6858b7ca41a6ab482c170e6223dc8ac4c7f4eb2") (checksum-error . #f) (collection . "SSE") (conflicts . ()) (date-added . 1592455260) (dependencies . ("base" "web-server-lib" "web-server-doc" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Server Sent Events for Racket") (implies . ()) (last-checked . 1632904611) (last-edit . 1592455760) (last-updated . 1620470162) (modules . ((lib "SSE/scribblings/SSE.scrbl") (lib "SSE/sse.rkt") (lib "SSE/main.rkt") (lib "SSE/legacy.rkt"))) (name . "SSE") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:qxacur@use.startmail.com . #t) (html . #t) (http . #t) (ring:1 . #t) (web-server . #t))) (source . "https://gitlab.com/oquijano/sse.git") (tags . ("html" "http" "web-server")) (versions . #hash((default . #hasheq((checksum . "a6858b7ca41a6ab482c170e6223dc8ac4c7f4eb2") (source . "https://gitlab.com/oquijano/sse.git") (source_url . "https://gitlab.com/oquijano/sse.git"))))))) ("_" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "_" "doc/_@_/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/_.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/_.txt"))) (checksum . "e687a8eaf4ef62b97ad5d37f6fd09cb684c7d101") (checksum-error . #f) (collection . "_") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1632902822) (last-edit . 1469570302) (last-updated . 1502812264) (modules . ((lib "_/scribblings/_.scrbl") (lib "_/main.rkt"))) (name . "_") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "git://github.com/LeifAndersen/racket-_") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e687a8eaf4ef62b97ad5d37f6fd09cb684c7d101") (source . "git://github.com/LeifAndersen/racket-_") (source_url . "http://github.com/LeifAndersen/racket-_/tree/master"))))))) ("_-exp" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "_-exp" "doc/_-exp@_-exp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/_-exp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/_-exp.txt"))) (checksum . "7bc80bb0137c92effc29f5d01bbc6a14034712eb") (checksum-error . #f) (collection . "_-exp") (conflicts . ()) (dependencies . (("base" #:version "6.12") "at-exp-lib" "syntax-color-lib" "scribble-lib" "racket-doc" "scribble-doc" "adjutor")) (description . "A  metalanguage similar to #lang at-exp, but with a configurable command character") (implies . ()) (last-checked . 1632902822) (last-edit . 1513066025) (last-updated . 1622174321) (modules . ((lib "_-exp/current-command-char.rkt") (lib "_-exp/language-info.rkt") (lib "_-exp/runtime-config.rkt") (lib "_-exp/main.rkt") (lib "_-exp/scribblings/_-exp.scrbl"))) (name . "_-exp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (lang . #t) (lang-extension . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/LiberalArtist/_-exp.git") (tags . ("lang" "lang-extension" "language")) (versions . #hash((default . #hasheq((checksum . "7bc80bb0137c92effc29f5d01bbc6a14034712eb") (source . "https://github.com/LiberalArtist/_-exp.git") (source_url . "https://github.com/LiberalArtist/_-exp.git"))))))) ("abnf" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/abnf.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/abnf.txt"))) (checksum . "71bc4739a0b2aa22aa42ad905ba7de5c3e2c7f79") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib")) (description . "Attributed BNFs for Scribble") (implies . ()) (last-checked . 1632902823) (last-edit . 1380725571) (last-updated . 1502812264) (modules . ((lib "scribble/abnf.rkt"))) (name . "abnf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (bnf . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/samth/abnf") (tags . ("bnf" "scribble")) (versions . #hash((default . #hasheq((checksum . "71bc4739a0b2aa22aa42ad905ba7de5c3e2c7f79") (source . "git://github.com/samth/abnf") (source_url . "http://github.com/samth/abnf/tree/master"))))))) ("acl2s-scribblings" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "acl2s" "doc/acl2s@acl2s-scribblings/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/acl2s-scribblings.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/acl2s-scribblings.txt"))) (checksum . "5df28624fe8dcf2286ae7e9896ab59b9e4fb7400") (checksum-error . #f) (collection . "acl2s-scribblings") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "syntax-classes-lib" "syntax-class-or" "racket-doc" "scribble-lib")) (description . "a scribble document for beginner mode of ACL2s") (implies . ()) (last-checked . 1632902823) (last-edit . 1516894228) (last-updated . 1568072985) (modules . ((lib "acl2s-scribblings/util/stx.rkt") (lib "acl2s-scribblings/util/branch-conditions.rkt") (lib "acl2s-scribblings/scribblings/acl2s.scrbl") (lib "acl2s-scribblings/acl2s-placeholder.rkt") (lib "acl2s-scribblings/util/check-generator-predicate.rkt") (lib "acl2s-scribblings/acl2s-printer.rkt"))) (name . "acl2s-scribblings") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t))) (source . "https://github.com/AlexKnauth/acl2s-scribblings.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5df28624fe8dcf2286ae7e9896ab59b9e4fb7400") (source . "https://github.com/AlexKnauth/acl2s-scribblings.git") (source_url . "https://github.com/AlexKnauth/acl2s-scribblings.git"))))))) ("acmart" . #hasheq((author . "leif@leifandersen.net Fare") (authors . ("leif@leifandersen.net" "Fare")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/acmart.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "cc9f747564d0f8311ee62001c1faa2ef564a5214") (checksum-error . #f) (collection . (multi)) (conflicts . ("scribble-lib")) (dependencies . ("scheme-lib" "base" "compatibility-lib" "scribble-text-lib" "scribble-html-lib" "planet-lib" "net-lib" "at-exp-lib" "draw-lib" "syntax-color-lib" "sandbox-lib" "typed-racket-lib" "rackunit-lib")) (description . "#lang for the acmart paper format") (implies . ("scribble-html-lib")) (last-checked . 1632902823) (last-edit . 1493908591) (last-updated . 1632323223) (modules . ((lib "scribble/eval.rkt") (lib "scribble/private/manual-form.rkt") (lib "scribble/private/lang-parameters.rkt") (lib "scribble/private/provide-structs.rkt") (lib "scribble/private/run-pdflatex.rkt") (lib "scribble/private/serialize.rkt") (lib "scribble/lncs/lang/reader.rkt") (lib "scribble/scheme.rkt") (lib "scribble/pdf-render.rkt") (lib "scribble/html-render.rkt") (lib "scribble/provide-doc-transform.rkt") (lib "scribble/lp/lang/reader.rkt") (lib "scribble/private/render-utils.rkt") (lib "scribble/private/manual-style.rkt") (lib "scribble/private/on-demand.rkt") (lib "scribble/manual-struct.rkt") (lib "help/search.rkt") (lib "scribble/blueboxes.rkt") (lib "help/help.rkt") (lib "scribble/private/lp.rkt") (lib "scribble/report/lang.rkt") (lib "scribble/jfp/lang.rkt") (lib "scribble/book/lang/reader.rkt") (lib "scribble/doc/reader.rkt") (lib "scribble/private/manual-defaults.rkt") (lib "scribble/private/defaults.rkt") (lib "scribble/lp.rkt") (lib "scribble/doc/lang/reader.rkt") (lib "scribble/html-properties.rkt") (lib "scribble/elsarticle/lang.rkt") (lib "scribble/private/manual-bind.rkt") (lib "scribble/latex-properties.rkt") (lib "scribble/manual/lang.rkt") (lib "scribble/lp/lang/lang2.rkt") (lib "scriblib/figure.rkt") (lib "scribble/private/qsloc.rkt") (lib "scribble/decode-struct.rkt") (lib "scribble/manual.rkt") (lib "scribble/urls.rkt") (lib "scribble/elsarticle/lang/reader.rkt") (lib "scribble/private/manual-sprop.rkt") (lib "scribble/contract-render.rkt") (lib "scribble/core.rkt") (lib "scriblib/footnote.rkt") (lib "scribble/private/manual-unit.rkt") (lib "scribble/private/manual-code.rkt") (lib "scribble/base/lang.rkt") (lib "scribble/private/manual-history.rkt") (lib "scribble/valid-blueboxes-info.rkt") (lib "scribble/private/manual-tech.rkt") (lib "scribble/base-render.rkt") (lib "scribble/private/manual-class-struct.rkt") (lib "scribble/text-render.rkt") (lib "scribble/private/manual-vars.rkt") (lib "scriblib/gui-eval.rkt") (lib "scriblib/bibtex.rkt") (lib "scribble/xref.rkt") (lib "scribble/book/lang.rkt") (lib "scribble/sigplan/lang/reader.rkt") (lib "scribble/jfp.rkt") (lib "scribble/base/lang/reader.rkt") (lib "scribble/private/manual-proc.rkt") (lib "scribble/racket.rkt") (lib "scribble/private/manual-class.rkt") (lib "scribble/private/manual-ex.rkt") (lib "scribble/latex-render.rkt") (lib "scriblib/autobib.rkt") (lib "scribble/srcdoc.rkt") (lib "scribble/acmart.rkt") (lib "scribble/acmart/lang/reader.rkt") (lib "scribble/lp-include.rkt") (lib "scriblib/render-cond.rkt") (lib "scribble/lp/lang/lang.rkt") (lib "scribble/doc/main.rkt") (lib "scribble/search.rkt") (lib "scribble/sigplan.rkt") (lib "scribble/acmart/lang.rkt") (lib "scribble/doclang2.rkt") (lib "scribble/private/tag.rkt") (lib "scribble/private/literal-anchor.rkt") (lib "scribble/basic.rkt") (lib "scribble/tag.rkt") (lib "scribble/lp/lang/common.rkt") (lib "scribble/bnf.rkt") (lib "scribble/doclang.rkt") (lib "scribble/extract.rkt") (lib "scribble/private/manual-scheme.rkt") (lib "scribble/sigplan/lang.rkt") (lib "scribble/examples.rkt") (lib "scribble/private/latex-index.rkt") (lib "scriblib/private/counter.rkt") (lib "scribble/jfp/lang/reader.rkt") (lib "scribble/decode.rkt") (lib "scribble/private/manual-mod.rkt") (lib "scribble/manual/lang/reader.rkt") (lib "scriblib/private/gui-eval-exn.rkt") (lib "scribble/example.rkt") (lib "scribble/lncs/lang.rkt") (lib "scribble/private/manual-bib.rkt") (lib "scribble/struct.rkt") (lib "scribble/render.rkt") (lib "scribble/private/indirect-renderer.rkt") (lib "scribble/report/lang/reader.rkt") (lib "scribble/base.rkt") (lib "scribble/private/manual-utils.rkt") (lib "scribble/lp2.rkt") (lib "scribble/config.rkt") (lib "scribble/private/manual-method.rkt") (lib "scribble/run.rkt") (lib "scribble/markdown-render.rkt") (lib "scribble/render-struct.rkt") (lib "scribble/latex-prefix.rkt") (lib "scribble/comment-reader.rkt") (lib "scriblib/book-index.rkt"))) (name . "acmart") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (:no-tag: . #t) (author:Fare . #t) (author:leif@leifandersen.net . #t) (ring:2 . #t))) (source . "git://github.com/racket/scribble?path=scribble-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "cc9f747564d0f8311ee62001c1faa2ef564a5214") (source . "git://github.com/racket/scribble?path=scribble-lib") (source_url . "http://github.com/racket/scribble/tree/master?path=scribble-lib"))) ("6.8" . #hasheq((checksum . "ce6738818e79515e57e2d554b801806b8b2833ae") (source . "git://github.com/fare/acmart") (source_url . "http://github.com/fare/acmart/tree/master"))))))) ("acmsmall" . #hasheq((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "acmsmall" "doc/acmsmall@acmsmall/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/acmsmall.txt") (test-failure-log . "server/built/test-fail/acmsmall.txt") (test-success-log . #f))) (checksum . "15a951e4dff06856862d2a87afd032b983a705be") (checksum-error . #f) (collection . "scribble") (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib" "racket-doc" "scribble-doc")) (description . "Port of the acmsmall style to Scribble") (implies . ()) (last-checked . 1632902824) (last-edit . 1454101079) (last-updated . 1504309903) (modules . ((lib "scribble/example.scrbl") (lib "scribble/acmsmall.scrbl") (lib "scribble/download.rkt") (lib "scribble/acmsmall.rkt") (lib "scribble/example-bib.rkt"))) (name . "acmsmall") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stamourv@racket-lang.org . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/stamourv/acmsmall-scribble") (tags . ("scribble")) (versions . #hash((default . #hasheq((checksum . "15a951e4dff06856862d2a87afd032b983a705be") (source . "git://github.com/stamourv/acmsmall-scribble") (source_url . "http://github.com/stamourv/acmsmall-scribble/tree/master"))))))) ("adjutor" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "adjutor" "doc/adjutor@adjutor/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/adjutor.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/adjutor.txt"))) (checksum . "5a9ae8570213cfffde644ecf405df500490de05c") (checksum-error . #f) (collection . "adjutor") (conflicts . ()) (dependencies . (("base" #:version "7.0") "static-rename-lib" "scribble-lib" "racket-doc" "rackunit-lib" "rackunit-spec" "scribble-doc")) (description . "A helper library") (implies . ()) (last-checked . 1632902824) (last-edit . 1509151638) (last-updated . 1622181521) (modules . ((lib "adjutor/unstable/link-change-evt.rkt") (lib "adjutor/scribblings/unstable/todo.scrbl") (lib "adjutor/stable/in-value-star.rkt") (lib "adjutor/scribblings/stable.scrbl") (lib "adjutor/stable/when-unless.rkt") (lib "adjutor/stable/environment-variables.rkt") (lib "adjutor/stable/rx.rkt") (lib "adjutor/stable/serialize.rkt") (lib "adjutor/scribblings/adjutor.scrbl") (lib "adjutor/unstable/test.rkt") (lib "adjutor/unstable/check-args.rkt") (lib "adjutor/unstable.rkt") (lib "adjutor/unstable/test-link-change-evt.rkt") (lib "adjutor/stable/for.rkt") (lib "adjutor/scribblings/unstable/link-change-evt.scrbl") (lib "adjutor/unstable/find-executable-path.rkt") (lib "adjutor/stable/misc.rkt") (lib "adjutor/stable/define-star.rkt") (lib "adjutor/scribblings/unstable.scrbl") (lib "adjutor/scribblings/unstable/find-executable-path.scrbl") (lib "adjutor/unstable/structure.rkt") (lib "adjutor/racket/base/minus.rkt") (lib "adjutor/main.rkt") (lib "adjutor/stable/require-provide.rkt") (lib "adjutor/scribblings/utils.rkt") (lib "adjutor/unstable/todo.rkt"))) (name . "adjutor") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (ring:1 . #t) (sugar . #t) (util . #t) (utility . #t))) (source . "https://github.com/LiberalArtist/adjutor.git") (tags . ("sugar" "util" "utility")) (versions . #hash((default . #hasheq((checksum . "5a9ae8570213cfffde644ecf405df500490de05c") (source . "https://github.com/LiberalArtist/adjutor.git") (source_url . "https://github.com/LiberalArtist/adjutor.git"))))))) ("admiral-edu-server" . #hasheq((author . "clements@racket-lang.org josephmcollard@gmail.com") (authors . ("clements@racket-lang.org" "josephmcollard@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/admiral-edu-server.txt") (test-failure-log . "server/built/test-fail/admiral-edu-server.txt") (test-success-log . #f))) (checksum . "79c2778dd43d07e92ab02fb75955ec6060ed6861") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("aws" "base" "db-lib" "net-lib" "typed-racket-lib" "web-server-lib" "yaml" "rackunit-lib" "typed-racket-more")) (description . "The Racket code associated with the Captain Teach server") (implies . ()) (last-checked . 1632902825) (last-edit . 1466969603) (last-updated . 1502812266) (modules . ((lib "admiral-edu/pages/assignments.rkt") (lib "admiral-edu/pages/typed-xml.rkt") (lib "admiral-edu/pages/submit.rkt") (lib "admiral-edu/pages/dependencies.rkt") (lib "admiral-edu/pages/assignments/list.rkt") (lib "admiral-edu/authoring/next-action.rkt") (lib "admiral-edu/ct-session.rkt") (lib "admiral-edu/util/failure.rkt") (lib "admiral-edu/pages/feedback.rkt") (lib "admiral-edu/pages/assignments/student-view.rkt") (lib "admiral-edu/pages/author.rkt") (lib "admiral-edu/database/mysql/migrate-0-1.rkt") (lib "admiral-edu/temporary-hacks.rkt") (lib "admiral-edu/pages/next.rkt") (lib "admiral-edu/auth/google-openidc.rkt") (lib "admiral-edu/storage/cloud-storage.rkt") (lib "admiral-edu/authoring/hold-for-review-handler.rkt") (lib "admiral-edu/pages/index.rkt") (lib "admiral-edu/database/mysql/typed-db.rkt") (lib "admiral-edu/database/mysql/review.rkt") (lib "admiral-edu/database/mysql.rkt") (lib "admiral-edu/util/roster.rkt") (lib "admiral-edu/configuration.rkt") (lib "admiral-edu/captain-teach.rkt") (lib "admiral-edu/database/mysql/submission.rkt") (lib "admiral-edu/database/mysql/assignment.rkt") (lib "admiral-edu/paths.rkt") (lib "admiral-edu/pages/review.rkt") (lib "admiral-edu/logging.rkt") (lib "admiral-edu/pages/export.rkt") (lib "admiral-edu/database/mysql/migrate.rkt") (lib "admiral-edu/authoring/three-condition-study.rkt") (lib "admiral-edu/pages/errors.rkt") (lib "admiral-edu/pages/browse.rkt") (lib "admiral-edu/pages/assignments/status.rkt") (lib "admiral-edu/storage/storage.rkt") (lib "admiral-edu/util/common.rkt") (lib "admiral-edu/authoring/util.rkt") (lib "admiral-edu/pages/file-container-helpers.rkt") (lib "admiral-edu/database/mysql/class.rkt") (lib "admiral-edu/database/mysql/user.rkt") (lib "admiral-edu/util/file-extension-type.rkt") (lib "admiral-edu/pages/assignments/action.rkt") (lib "admiral-edu/pages/assignments/dashboard.rkt") (lib "admiral-edu/database/mysql/common.rkt") (lib "admiral-edu/authoring/typed-yaml.rkt") (lib "admiral-edu/pages/roster.rkt") (lib "admiral-edu/util/basic-types.rkt") (lib "admiral-edu/email/email.rkt") (lib "admiral-edu/authoring/assignment-parser.rkt") (lib "admiral-edu/database/mysql/migrate-2-3.rkt") (lib "admiral-edu/dispatch-typed.rkt") (lib "admiral-edu/database/mysql/system.rkt") (lib "admiral-edu/pages/path-xexprs.rkt") (lib "admiral-edu/authoring/assignment.rkt") (lib "admiral-edu/base.rkt") (lib "admiral-edu/authoring/assignment-structs.rkt") (lib "admiral-edu/database/mysql/role.rkt") (lib "admiral-edu/pages/templates.rkt") (lib "admiral-edu/database/mysql/migrate-1-2.rkt") (lib "admiral-edu/pages/responses.rkt") (lib "admiral-edu/util/failure-untyped.rkt") (lib "admiral-edu/dispatch.rkt") (lib "admiral-edu/storage/local-storage.rkt") (lib "admiral-edu/storage/storage-basic-tr.rkt") (lib "admiral-edu/database/mysql/untyped-db.rkt") (lib "admiral-edu/util/authorized.rkt") (lib "admiral-edu/pages/download.rkt") (lib "admiral-edu/database/mysql/roles.rkt") (lib "admiral-edu/util/config-file-reader.rkt") (lib "admiral-edu/tests/test-configuration.rkt"))) (name . "admiral-edu-server") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:clements@racket-lang.org . #t) (author:josephmcollard@gmail.com . #t) (captain-teach . #t) (ring:1 . #t))) (source . "git://github.com/jbclements/admiral-edu-server") (tags . ("captain-teach")) (versions . #hash((default . #hasheq((checksum . "79c2778dd43d07e92ab02fb75955ec6060ed6861") (source . "git://github.com/jbclements/admiral-edu-server") (source_url . "http://github.com/jbclements/admiral-edu-server/tree/master"))))))) ("adventure" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/adventure.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1559072248) (dependencies . ("https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-kata-util" "https://github.com/thoughtstem/game-engine.git" "https://github.com/thoughtstem/game-engine-demos.git?path=game-engine-demos-common")) (description . "A teaching language for making simple adventure games -- i.e. with NPCs and quests. ") (implies . ()) (last-checked . 1632902825) (last-edit . 1570121646) (last-updated . 1580770976) (modules . ((lib "adventure/lang/main.rkt") (lib "adventure/examples.rkt") (lib "adventure/scribblings/assets-library.rkt") (lib "adventure/main.rkt") (lib "adventure/scribblings/manual.scrbl") (lib "adventure/lang.rkt"))) (name . "adventure") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/TS-Languages.git?path=adventure") (tags . ()) (versions . #hash((default . #hasheq((checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (source . "https://github.com/thoughtstem/TS-Languages.git?path=adventure") (source_url . "https://github.com/thoughtstem/TS-Languages.git?path=adventure"))))))) ("adventure-harrypotter" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/adventure-harrypotter.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1559072336) (dependencies . ("https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-kata-util" "https://github.com/thoughtstem/TS-Languages.git?path=adventure" "https://github.com/thoughtstem/fandom-sprites-ge.git")) (description . "A teaching language for making adventure games -- i.e. with NPCs and quests.  Provides identifiers for wizard and magic assets inspired by Harry Potter.") (implies . ()) (last-checked . 1632902826) (last-edit . 1559072348) (last-updated . 1580770976) (modules . ((lib "adventure-harrypotter/examples.rkt") (lib "adventure-harrypotter/scribblings/manual.scrbl") (lib "adventure-harrypotter/lang.rkt") (lib "adventure-harrypotter/lang/main.rkt") (lib "adventure-harrypotter/main.rkt") (lib "adventure-harrypotter/scribblings/assets-library.rkt"))) (name . "adventure-harrypotter") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/TS-Languages.git?path=adventure-harrypotter") (tags . ()) (versions . #hash((default . #hasheq((checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (source . "https://github.com/thoughtstem/TS-Languages.git?path=adventure-harrypotter") (source_url . "https://github.com/thoughtstem/TS-Languages.git?path=adventure-harrypotter"))))))) ("adventure-mario" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/adventure-mario.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1559072565) (dependencies . ("https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-kata-util" "https://github.com/thoughtstem/TS-Languages.git?path=adventure" "https://github.com/thoughtstem/fandom-sprites-ge.git")) (description . "A teaching language for making adventure games -- i.e. with NPCs and quests.  Provides identifiers for platformer-game-inspired assets (e.g. Mario).") (implies . ()) (last-checked . 1632902827) (last-edit . 1559072565) (last-updated . 1580770977) (modules . ((lib "adventure-mario/scribblings/manual.scrbl") (lib "adventure-mario/lang.rkt") (lib "adventure-mario/scribblings/assets-library.rkt") (lib "adventure-mario/lang/main.rkt") (lib "adventure-mario/main.rkt") (lib "adventure-mario/examples.rkt"))) (name . "adventure-mario") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/TS-Languages.git?path=adventure-mario") (tags . ()) (versions . #hash((default . #hasheq((checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (source . "https://github.com/thoughtstem/TS-Languages.git?path=adventure-mario") (source_url . "https://github.com/thoughtstem/TS-Languages.git?path=adventure-mario"))))))) ("affix" . #hasheq((author . "hello@morcmarc.com") (authors . ("hello@morcmarc.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "affix" "doc/affix@affix/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/affix.txt") (test-failure-log . "server/built/test-fail/affix.txt") (test-success-log . #f))) (checksum . "32a8e88e8547227d473013d8f90f41f6b5665b69") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" ("racket" "6.0") "rackunit-lib" "scribble-lib")) (description . "Managing Racket application state") (implies . ()) (last-checked . 1632902828) (last-edit . 1540830421) (last-updated . 1540830421) (modules . ((lib "affix/base.rkt") (lib "affix/affix.scrbl") (lib "example/server.rkt") (lib "affix/main.rkt") (lib "example/config.rkt") (lib "example/main.rkt") (lib "affix/state.rkt"))) (name . "affix") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:hello@morcmarc.com . #t) (components . #t) (lifecycle . #t) (mount . #t) (ring:1 . #t) (state . #t))) (source . "https://github.com/morcmarc/affix.git") (tags . ("components" "lifecycle" "mount" "state")) (versions . #hash((default . #hasheq((checksum . "32a8e88e8547227d473013d8f90f41f6b5665b69") (source . "https://github.com/morcmarc/affix.git") (source_url . "https://github.com/morcmarc/affix.git"))))))) ("afl" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "afl" "doc/afl@afl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/afl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/afl.txt"))) (checksum . "13b5f8c6c71f0eb66a4f1e71f295bfda88f526bb") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1622133243) (dependencies . ("base" "hygienic-reader-extension" "at-exp-lib" "rackjure" "rackunit-lib" "scribble-lib" "racket-doc" "scribble-doc" "scribble-code-examples")) (description . "a lang-extension that provides rackjure-like anonymous function literals") (implies . ()) (last-checked . 1632902828) (last-edit . 1622133243) (last-updated . 1539411147) (modules . ((lib "afl/lang/language-info.rkt") (lib "afl/lang/reader.rkt") (lib "afl/tests/test-afl-at-exp-racket.rkt") (lib "afl/reader.rkt") (lib "afl/tests/test-afl-scribble.rkt") (lib "afl/tests/test-afl-racket.rkt") (lib "afl/docs/afl.scrbl") (lib "afl/lang/runtime-config.rkt"))) (name . "afl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lambda . #t) (lang-extension . #t) (ring:1 . #t) (sugar . #t) (syntax . #t))) (source . "https://github.com/AlexKnauth/afl.git#master") (tags . ("lambda" "lang-extension" "sugar" "syntax")) (versions . #hash(("6.0.1" . #hasheq((checksum . "40cf274d9274456f3059cc8275f77982c61710bd") (source . "https://github.com/AlexKnauth/afl.git#for-v-up-to-6.1") (source_url . "https://github.com/AlexKnauth/afl.git#for-v-up-to-6.1"))) (default . #hasheq((checksum . "13b5f8c6c71f0eb66a4f1e71f295bfda88f526bb") (source . "https://github.com/AlexKnauth/afl.git#master") (source_url . "https://github.com/AlexKnauth/afl.git#master"))) ("6.0" . #hasheq((checksum . "40cf274d9274456f3059cc8275f77982c61710bd") (source . "https://github.com/AlexKnauth/afl.git#for-v-up-to-6.1") (source_url . "https://github.com/AlexKnauth/afl.git#for-v-up-to-6.1"))) ("6.1" . #hasheq((checksum . "40cf274d9274456f3059cc8275f77982c61710bd") (source . "https://github.com/AlexKnauth/afl.git#for-v-up-to-6.1") (source_url . "https://github.com/AlexKnauth/afl.git#for-v-up-to-6.1"))))))) ("aful" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "aful" "doc/aful@aful/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/aful.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/aful.txt"))) (checksum . "e7f7270bdb70708f58bbda27ffad07509085e5fe") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614799357) (dependencies . ("base" "hygienic-reader-extension" "at-exp-lib" "rackjure" "rackunit-lib" "phc-toolkit" "scribble-enhanced" "scribble-lib" "scribble-lib" "racket-doc" "scribble-doc" "scribble-code-examples" "scribble-doc")) (description . "A fork of #lang afl which also supports #lang aflu/unhygienic.") (implies . ()) (last-checked . 1632902829) (last-edit . 1614888698) (last-updated . 1614955997) (modules . ((lib "aful/reader.rkt") (lib "aful/tests/test-aful-scribble.rkt") (lib "aful/lang/language-info.rkt") (lib "aful/tests/test-aful-at-exp-racket.rkt") (lib "aful/unhygienic/lang/language-info.rkt") (lib "aful/unhygienic/lang/reader.rkt") (lib "aful/lang/runtime-config.rkt") (lib "aful/tests/test-aful-racket.rkt") (lib "aful/unhygienic/lang/runtime-config.rkt") (lib "aful/unhygienic/hygienic-reader-extension--extend-reader--unhygienic.rkt") (lib "aful/lang/reader.rkt") (lib "aful/docs/aful.scrbl") (lib "aful/scribble-enhanced.rkt"))) (name . "aful") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (lambda . #t) (lang-extension . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/aful.git#unhygienic") (tags . ("lambda" "lang-extension" "syntax")) (versions . #hash((default . #hasheq((checksum . "e7f7270bdb70708f58bbda27ffad07509085e5fe") (source . "https://github.com/jsmaniac/aful.git#unhygienic") (source_url . "https://github.com/jsmaniac/aful.git#unhygienic"))) ("6.2" . #hasheq((checksum . "78b507dd1d02efad8196bcdeb855fce568e575dc") (source . "https://github.com/jsmaniac/aful.git#before-6.3") (source_url . "https://github.com/jsmaniac/aful.git#before-6.3"))) ("6.3" . #hasheq((checksum . "78b507dd1d02efad8196bcdeb855fce568e575dc") (source . "https://github.com/jsmaniac/aful.git#before-6.3") (source_url . "https://github.com/jsmaniac/aful.git#before-6.3"))) ("6.0" . #hasheq((checksum . "78b507dd1d02efad8196bcdeb855fce568e575dc") (source . "https://github.com/jsmaniac/aful.git#before-6.3") (source_url . "https://github.com/jsmaniac/aful.git#before-6.3"))) ("6.1" . #hasheq((checksum . "78b507dd1d02efad8196bcdeb855fce568e575dc") (source . "https://github.com/jsmaniac/aful.git#before-6.3") (source_url . "https://github.com/jsmaniac/aful.git#before-6.3"))) ("6.1.1" . #hasheq((checksum . "78b507dd1d02efad8196bcdeb855fce568e575dc") (source . "https://github.com/jsmaniac/aful.git#before-6.3") (source_url . "https://github.com/jsmaniac/aful.git#before-6.3"))))))) ("agile" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "agile" "doc/agile@agile/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/agile.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/agile.txt"))) (checksum . "fdd3b7388d5485cee179cdbc172c9752b7a0cf73") (checksum-error . #f) (collection . "agile") (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "#lang agile ;; == (require (for-syntax racket/base syntax/parse))") (implies . ()) (last-checked . 1632902830) (last-edit . 1461953087) (last-updated . 1578974578) (modules . ((lib "agile/main.rkt") (lib "agile/scribblings/agile.scrbl") (lib "agile/lang/reader.rkt"))) (name . "agile") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (agile . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t))) (source . "https://github.com/bennn/agile.git") (tags . ("agile")) (versions . #hash((default . #hasheq((checksum . "fdd3b7388d5485cee179cdbc172c9752b7a0cf73") (source . "https://github.com/bennn/agile.git") (source_url . "https://github.com/bennn/agile.git"))))))) ("al2-test-runner" . #hasheq((author . "alexharsanyi@gmail.com") (authors . ("alexharsanyi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "al2-test-runner" "doc/al2-test-runner@al2-test-runner/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/al2-test-runner.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/al2-test-runner.txt"))) (checksum . "b6757271932151dff6507ee6f1b690d0268da808") (checksum-error . #f) (collection . "al2-test-runner") (conflicts . ()) (date-added . 1598053618) (dependencies . ("base" "rackunit-lib" "sandbox-lib" "racket-doc" "rackunit-doc" "scribble-lib")) (description . "Alternative way of running rackunit tests") (implies . ()) (last-checked . 1632902830) (last-edit . 1598066400) (last-updated . 1598585075) (modules . ((lib "al2-test-runner/main.rkt") (lib "al2-test-runner/scribblings/al2-test-runner.scrbl"))) (name . "al2-test-runner") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexharsanyi@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "https://github.com/alex-hhh/al2-test-runner.git") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "b6757271932151dff6507ee6f1b690d0268da808") (source . "https://github.com/alex-hhh/al2-test-runner.git") (source_url . "https://github.com/alex-hhh/al2-test-runner.git"))))))) ("alexis-collection-lens" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/alexis-collection-lens.txt") (docs . (("main" "alexis-collection-lens" "doc/alexis-collection-lens@alexis-collection-lens/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexis-collection-lens.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/alexis-collection-lens.txt"))) (checksum . "4f91587e8a5728b02c1ea9af9ac7476baf39b928") (checksum-error . #f) (collection . "alexis") (conflicts . ()) (dependencies . ("alexis-collections" "base" "curly-fn" "lens" "scribble-lib" "at-exp-lib" "cover" "cover-coveralls" "doc-coverage" "rackunit-lib" "racket-doc")) (description . "Deprecated. Use the collections-lens package instead.") (implies . ()) (last-checked . 1632902831) (last-edit . 1451874470) (last-updated . 1502812267) (modules . ((lib "alexis/collection/lens/private/sandbox.rkt") (lib "alexis/scribblings/main.scrbl") (lib "alexis/collection/lens/private/test/doc-coverage.rkt") (lib "alexis/collection/lens.rkt"))) (name . "alexis-collection-lens") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (deprecated . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/alexis-collection-lens.git") (tags . ("deprecated")) (versions . #hash((default . #hasheq((checksum . "4f91587e8a5728b02c1ea9af9ac7476baf39b928") (source . "git://github.com/lexi-lambda/alexis-collection-lens.git") (source_url . "http://github.com/lexi-lambda/alexis-collection-lens.git/tree/master"))) ("6.2" . #hasheq((checksum . "42544c413a1b6c0d6b0c5cbeac93502d5f5e4857") (source . "git://github.com/lexi-lambda/alexis-collection-lens.git#v6.2") (source_url . "http://github.com/lexi-lambda/alexis-collection-lens.git/tree/master#v6.2"))))))) ("alexis-collections" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "alexis-collections" "doc/alexis-collections@alexis-collections/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexis-collections.txt") (test-failure-log . "server/built/test-fail/alexis-collections.txt") (test-success-log . #f))) (checksum . "997c8642d9b2adb28728d609202618bc8ffbd750") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("alexis-util" "base" "collections" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Deprecated. Use the collections package instead.") (implies . ("collections")) (last-checked . 1632902831) (last-edit . 1449345408) (last-updated . 1502812268) (modules . ((lib "alexis/collection/private/test/dict.rkt") (lib "alexis/collection/private/test/collection.rkt") (lib "alexis/scribblings/alexis-collections.scrbl") (lib "alexis/collection/private/test/contract.rkt") (lib "alexis/collection.rkt") (lib "alexis/collection/private/test/sequence-lib.rkt") (lib "alexis/collection/private/test/sequence.rkt") (lib "alexis/collection/private/test/match.rkt"))) (name . "alexis-collections") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (deprecated . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-alexis-collections") (tags . ("deprecated")) (versions . #hash((default . #hasheq((checksum . "997c8642d9b2adb28728d609202618bc8ffbd750") (source . "git://github.com/lexi-lambda/racket-alexis-collections") (source_url . "http://github.com/lexi-lambda/racket-alexis-collections/tree/master"))) ("6.2.1" . #hasheq((checksum . "6ad999385c1251e727baa667d3fbba601d924c8b") (source . "git://github.com/lexi-lambda/racket-alexis-collections#v6.2") (source_url . "http://github.com/lexi-lambda/racket-alexis-collections/tree/master#v6.2"))) ("6.2" . #hasheq((checksum . "6ad999385c1251e727baa667d3fbba601d924c8b") (source . "git://github.com/lexi-lambda/racket-alexis-collections#v6.2") (source_url . "http://github.com/lexi-lambda/racket-alexis-collections/tree/master#v6.2"))) ("6.1.1" . #hasheq((checksum . "7f1f4283abfb728ba2e53b37badef8c678711665") (source . "git://github.com/lexi-lambda/racket-alexis-collections#v6.1.1") (source_url . "http://github.com/lexi-lambda/racket-alexis-collections/tree/master#v6.1.1"))))))) ("alexis-multicast" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "alexis-multicast" "doc/alexis-multicast@alexis-multicast/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexis-multicast.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/alexis-multicast.txt"))) (checksum . "0268afb688231e0d6d76ded3291538dd5d3db37c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "alexis-util" "rackunit-lib" "cover" "cover-coveralls" "racket-doc" "scribble-lib")) (description . "One-to-many buffered  asynchronous channels") (implies . ()) (last-checked . 1632902832) (last-edit . 1462746919) (last-updated . 1502812268) (modules . ((lib "alexis/private/test/multicast.rkt") (lib "alexis/scribblings/alexis-multicast.scrbl") (lib "alexis/multicast.rkt"))) (name . "alexis-multicast") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-multicast") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0268afb688231e0d6d76ded3291538dd5d3db37c") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-multicast") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-multicast"))) ("6.2" . #hasheq((checksum . "f5e3cbad14ba951a302bc45d1b0e1c554a13b523") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-multicast#v6.2") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-multicast#v6.2"))) ("6.1.1" . #hasheq((checksum . "947a07993c7927376e858bb6e573795aa5633007") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-multicast#multicast-v6.1.1") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-multicast#multicast-v6.1.1"))))))) ("alexis-pvector" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "alexis-pvector" "doc/alexis-pvector@alexis-pvector/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexis-pvector.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/alexis-pvector.txt"))) (checksum . "f03b60714a0fd35ca61dd41307701074a2253d87") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("alexis-collections" "base" "pvector" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Deprecated. Use the pvector package instead.") (implies . ("pvector")) (last-checked . 1632902833) (last-edit . 1449355974) (last-updated . 1502812268) (modules . ((lib "alexis/private/test/main.rkt") (lib "alexis/scribblings/alexis-pvector.scrbl") (lib "alexis/pvector.rkt"))) (name . "alexis-pvector") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (deprecated . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-alexis-pvector") (tags . ("deprecated")) (versions . #hash((default . #hasheq((checksum . "f03b60714a0fd35ca61dd41307701074a2253d87") (source . "git://github.com/lexi-lambda/racket-alexis-pvector") (source_url . "http://github.com/lexi-lambda/racket-alexis-pvector/tree/master"))) ("6.1.1" . #hasheq((checksum . "10301802ae13956a1163b4b3ee5436680d796dc8") (source . "git://github.com/lexi-lambda/racket-alexis-pvector#v6.1.1") (source_url . "http://github.com/lexi-lambda/racket-alexis-pvector/tree/master#v6.1.1"))))))) ("alexis-util" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "alexis-util" "doc/alexis-util@alexis-util/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexis-util.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/alexis-util.txt"))) (checksum . "0268afb688231e0d6d76ded3291538dd5d3db37c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "match-plus" "scribble-lib" "static-rename" "threading" "typed-racket-lib" "rackunit-lib" "at-exp-lib" "racket-doc" "typed-racket-doc" "sandbox-lib")) (description . "Various utilities and helper functions I've found useful") (implies . ()) (last-checked . 1632902833) (last-edit . 1423075905) (last-updated . 1502812269) (modules . ((lib "alexis/util/renamed.rkt") (lib "alexis/private/test/struct.rkt") (lib "alexis/util/threading.rkt") (lib "alexis/scribblings/alexis-util-untyped.scrbl") (lib "alexis/scribblings/alexis-util-extras.scrbl") (lib "alexis/scribblings/alexis-util.scrbl") (lib "alexis/util/struct.rkt") (lib "alexis/util/comparator.rkt") (lib "alexis/util/match.rkt") (lib "alexis/util/abbreviations.rkt") (lib "alexis/scribblings/alexis-util-typed.scrbl") (lib "typed/alexis/bool.rkt") (lib "typed/alexis/util/comparator.rkt") (lib "alexis/util/wrap.rkt") (lib "alexis/private/test/comparator.rkt") (lib "alexis/bool.rkt"))) (name . "alexis-util") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (typed-racket . #t))) (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-util") (tags . ("typed-racket")) (versions . #hash(("6.0.1" . #hasheq((checksum . "c6baadb3668067eefc1b16eaf4cf97b0180aa13c") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-util#util-v6.1.1") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-util#util-v6.1.1"))) (default . #hasheq((checksum . "0268afb688231e0d6d76ded3291538dd5d3db37c") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-util") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-util"))) ("6.2.1" . #hasheq((checksum . "f5e3cbad14ba951a302bc45d1b0e1c554a13b523") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-util#v6.2") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-util#v6.2"))) ("6.2" . #hasheq((checksum . "f5e3cbad14ba951a302bc45d1b0e1c554a13b523") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-util#v6.2") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-util#v6.2"))) ("6.0" . #hasheq((checksum . "c6baadb3668067eefc1b16eaf4cf97b0180aa13c") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-util#util-v6.1.1") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-util#util-v6.1.1"))) ("6.1" . #hasheq((checksum . "c6baadb3668067eefc1b16eaf4cf97b0180aa13c") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-util#util-v6.1.1") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-util#util-v6.1.1"))) ("6.1.1" . #hasheq((checksum . "c6baadb3668067eefc1b16eaf4cf97b0180aa13c") (source . "git://github.com/lexi-lambda/racket-alexis.git?path=alexis-util#util-v6.1.1") (source_url . "http://github.com/lexi-lambda/racket-alexis.git/tree/master?path=alexis-util#util-v6.1.1"))))))) ("alexknauth-music" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexknauth-music.txt") (test-failure-log . "server/built/test-fail/alexknauth-music.txt") (test-success-log . #f))) (checksum . "b4489c27d7c0f7116d769344c787fa76b479e5fa") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "agile" "collections-lib" "htdp-lib" "math-lib" "graph" "txexpr" "reprovide-lang" "rsound" "unstable-lib" "at-exp-lib" "rackunit-lib")) (description . "Some stuff for representing music and music theory") (implies . ()) (last-checked . 1632902835) (last-edit . 1522445270) (last-updated . 1522592073) (modules . ((lib "music/data/score/key-signature.rkt") (lib "music/data/chord/infer-chord.rkt") (lib "music/notation/rsound/scale-tuning.rkt") (lib "music/notation/musicxml/musicxml-file.rkt") (lib "music/util/filter-maximal.rkt") (lib "music/data/time/position.rkt") (lib "music/data/score/clef.rkt") (lib "music/data/instrument/string-spec.rkt") (lib "music/data/musical-set-theory/forte-number.rkt") (lib "music/util/define-product-combinations.rkt") (lib "music/data/instrument/chord-fingering.rkt") (lib "music/notation/musicxml/harmony-element.rkt") (lib "music/notation/musicxml/score.rkt") (lib "music/notation/musicxml/metadata.rkt") (lib "music/data/time/time-signature.rkt") (lib "music/data/chord/partition-point.rkt") (lib "music/notation/lilypond/lilypond-file.rkt") (lib "music/data/note/note-class.rkt") (lib "music/data/score/score.rkt") (lib "music/example/Bach-Goldberg-Canone-alla-Quarta.rkt") (lib "music/data/scale/main.rkt") (lib "music/notation/musicxml/read/score.rkt") (lib "music/data/score/main.rkt") (lib "music/data/chord/infer-segment-chord.rkt") (lib "music/data/time/main.rkt") (lib "music/data/time/measures.rkt") (lib "music/data/musical-set-theory/pitch-class-set.rkt") (lib "music/data/score/metadata.rkt") (lib "music/util/defs.rkt") (lib "music/data/chord/main.rkt") (lib "music/data/scale/scale.rkt") (lib "music/data/time/tempo.rkt") (lib "music/notation/musicxml/voice-assign.rkt") (lib "music/data/instrument/add-guitar-part.rkt") (lib "music/data/time/duration.rkt") (lib "music/notation/musicxml/clef.rkt") (lib "music/util/txexpr.rkt") (lib "music/data/scale/scale-note-held.rkt") (lib "music/notation/image/chord-chart.rkt") (lib "music/notation/musicxml/read/musicxml-file.rkt") (lib "music/data/note/note-held.rkt") (lib "music/data/instrument/fingering.rkt") (lib "music/data/chord/infer-segmentation.rkt") (lib "music/data/note/note-there.rkt") (lib "music/data/time/time-period.rkt") (lib "music/notation/musicxml/read/metadata.rkt") (lib "music/demo/Bach-Goldberg-Canone-alla-Quarta.rkt") (lib "music/notation/rsound/frequency.rkt") (lib "music/data/musical-set-theory/pitch-class.rkt") (lib "music/data/instrument/main.rkt") (lib "music/data/note/note.rkt") (lib "music/data/chord/chord.rkt") (lib "music/data/chord/chord-symbol.rkt") (lib "music/data/scale/scale-note.rkt") (lib "music/data/tuning/scale-tuning.rkt") (lib "music/data/note/main.rkt"))) (name . "alexknauth-music") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t))) (source . "https://github.com/AlexKnauth/music.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b4489c27d7c0f7116d769344c787fa76b479e5fa") (source . "https://github.com/AlexKnauth/music.git") (source_url . "https://github.com/AlexKnauth/music.git"))))))) ("alexknauth-my-object" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "my-object" "doc/my-object@alexknauth-my-object/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/alexknauth-my-object.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/alexknauth-my-object.txt"))) (checksum . "5a6ee970bad2ab86d2d69e1dbf2f7bb158e88963") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "lens" "hash-lambda" "kw-utils" "unstable-lib" "rackunit-lib" "scribble-lib" "racket-doc" "heresy")) (description . "my version of objects, inspired by things from heresy") (implies . ()) (last-checked . 1632902835) (last-edit . 1498356339) (last-updated . 1502812269) (modules . ((lib "my-object/stuff.rkt") (lib "my-object/docs/my-object.scrbl") (lib "my-object/my-object.rkt") (lib "my-object/main.rkt"))) (name . "alexknauth-my-object") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (deprecated . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/my-object") (tags . ("deprecated")) (versions . #hash((default . #hasheq((checksum . "5a6ee970bad2ab86d2d69e1dbf2f7bb158e88963") (source . "git://github.com/AlexKnauth/my-object") (source_url . "http://github.com/AlexKnauth/my-object/tree/master"))))))) ("algebraic" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "algebraic" "doc/algebraic@algebraic/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/algebraic.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/algebraic.txt"))) (checksum . "706b2d01ab735a01e372c33da49995339194e024") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1549106222) (dependencies . ("base" "draw-lib" "pict-lib" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib" "texmath")) (description . "Algebraic Racket") (implies . ()) (last-checked . 1632902835) (last-edit . 1558854622) (last-updated . 1565401786) (modules . ((lib "algebraic/scribblings/algebraic-function.scrbl") (lib "algebraic/racket/base.rkt") (lib "algebraic/data/monoid.rkt") (lib "algebraic/scribblings/algebraic-tutorial-core.scrbl") (lib "algebraic/racket/base/forms.rkt") (lib "algebraic/data/truthy.rkt") (lib "algebraic/scribblings/algebraic-includes.rkt") (lib "algebraic/control/monad.rkt") (lib "algebraic/data.rkt") (lib "algebraic/product.rkt") (lib "algebraic/scribblings/algebraic-class-base.scrbl") (lib "algebraic/data/values.rkt") (lib "algebraic/scribblings/algebraic-class-core.scrbl") (lib "algebraic/scribblings/algebraic-tutorial-host.scrbl") (lib "algebraic/linter.rkt") (lib "algebraic/scribblings/algebraic-racket.scrbl") (lib "algebraic/data/functor.rkt") (lib "algebraic/data/maybe.rkt") (lib "algebraic/control/applicative.rkt") (lib "algebraic/macro-tests.rkt") (lib "algebraic/model/ext.rkt") (lib "algebraic/data/box.rkt") (lib "algebraic/data/list.rkt") (lib "algebraic/syntax-list.rkt") (lib "algebraic/class.rkt") (lib "algebraic/base.rkt") (lib "algebraic/data/event.rkt") (lib "algebraic/model/core.rkt") (lib "algebraic/racket/base/linted.rkt") (lib "algebraic/racket/base/forms-tests.rkt") (lib "algebraic/model/host.rkt") (lib "algebraic/scribblings/algebraic-syntax-list.scrbl") (lib "algebraic/sum.rkt") (lib "algebraic/syntax.rkt") (lib "algebraic/class-tests.rkt") (lib "algebraic/macro.rkt") (lib "algebraic/scribblings/algebraic-class.scrbl") (lib "algebraic/scribblings/algebraic-forms.scrbl") (lib "algebraic/scribblings/algebraic-data.scrbl") (lib "algebraic/scribblings/algebraic-tutorial-ext.scrbl") (lib "algebraic/function.rkt") (lib "algebraic/scribblings/algebraic-tutorial.scrbl") (lib "algebraic/scribblings/algebraic.scrbl") (lib "algebraic/scribblings/algebraic-linter.scrbl") (lib "algebraic/scribblings/algebraic-prelude.scrbl") (lib "algebraic/private.rkt") (lib "algebraic/scribblings/algebraic-macro.scrbl") (lib "algebraic/scribblings/algebraic-class-data.scrbl") (lib "algebraic/prelude.rkt") (lib "algebraic/data/semigroup.rkt") (lib "algebraic/pretty.rkt"))) (name . "algebraic") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dedbox@gmail.com . #t) (data-structures . #t) (functional . #t) (programming-languages . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-algebraic.git") (tags . ("data-structures" "functional" "programming-languages")) (versions . #hash((default . #hasheq((checksum . "706b2d01ab735a01e372c33da49995339194e024") (source . "https://github.com/dedbox/racket-algebraic.git") (source_url . "https://github.com/dedbox/racket-algebraic.git"))))))) ("algebraic-app" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "algebraic-app" "doc/algebraic-app@algebraic-app/index.html"))) (failure-log . "server/built/fail/algebraic-app.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "60355507f5dc713df68ab962d17b64015be9b06e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1558854737) (dependencies . ("algebraic" "base" "k-infix" "rackunit-lib" "scribble-lib")) (description . "Inline operator syntax for Algebraic Racket") (implies . ()) (last-checked . 1632902835) (last-edit . 1558854737) (last-updated . 1558854737) (modules . ((lib "algebraic/app.rkt") (lib "algebraic/app-tests.rkt") (lib "algebraic/scribblings/algebraic-app.scrbl") (lib "algebraic/scribblings/algebraic-app-includes.rkt"))) (name . "algebraic-app") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (app-syntax . #t) (application . #t) (author:dedbox@gmail.com . #t) (function . #t) (inline . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-algebraic-app.git") (tags . ("app-syntax" "application" "function" "inline")) (versions . #hash((default . #hasheq((checksum . "60355507f5dc713df68ab962d17b64015be9b06e") (source . "https://github.com/dedbox/racket-algebraic-app.git") (source_url . "https://github.com/dedbox/racket-algebraic-app.git"))))))) ("algol60" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "algol60" "doc/algol60@algol60/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "algol60") (conflicts . ()) (dependencies . ("base" "compatibility-lib" "drracket-plugin-lib" "errortrace-lib" "gui-lib" "parser-tools-lib" "string-constants-lib" "at-exp-lib" "rackunit-lib" "racket-doc" "scribble-doc" "scribble-lib" "drracket-tool-lib" "drracket-plugin-lib")) (description . "An implementation of the Algol60 language") (implies . ()) (last-checked . 1632902835) (last-edit . 1417659583) (last-updated . 1604942415) (modules . ((lib "algol60/tests/test.rkt") (lib "algol60/algol60.scrbl") (lib "algol60/cfg-parser.rkt") (lib "algol60/parse.rkt") (lib "algol60/tool.rkt") (lib "algol60/lang/reader.rkt") (lib "algol60/prims.rkt") (lib "algol60/tests/export.rkt") (lib "algol60/compile.rkt") (lib "algol60/simplify.rkt") (lib "algol60/lang/algol60.rkt") (lib "algol60/algol60.rkt") (lib "algol60/tests/syncheck-test.rkt") (lib "algol60/base.rkt") (lib "algol60/runtime.rkt"))) (name . "algol60") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "e4aebcaff66f121cf52a1f58f4f7bd285eded728") (source . "git://github.com/racket/algol60") (source_url . "http://github.com/racket/algol60/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("algorithms" . #hasheq((author . "codereport@outlook.com") (authors . ("codereport@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "algorithms" "doc/algorithms@algorithms/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/algorithms.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/algorithms.txt"))) (checksum . "b114ca74b632cd112d51509e79d2cf4f7aa55d2f") (checksum-error . #f) (collection . "algorithms") (conflicts . ()) (date-added . 1589682444) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A package containing many useful algorithms (borrowed from many other programming languages).") (implies . ()) (last-checked . 1632902836) (last-edit . 1589828181) (last-updated . 1595625665) (modules . ((lib "algorithms/main.rkt") (lib "algorithms/scribblings/algorithms.scrbl"))) (name . "algorithms") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (algorithms . #t) (author:codereport@outlook.com . #t) (lists . #t) (ring:1 . #t))) (source . "https://github.com/codereport/racket-algorithms.git") (tags . ("algorithms" "lists")) (versions . #hash((default . #hasheq((checksum . "b114ca74b632cd112d51509e79d2cf4f7aa55d2f") (source . "https://github.com/codereport/racket-algorithms.git") (source_url . "https://github.com/codereport/racket-algorithms.git"))))))) ("amap" . #hasheq((author . "yanyingwang1@gmail.com") (authors . ("yanyingwang1@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "amap" "doc/amap@amap/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/amap.txt") (test-failure-log . "server/built/test-fail/amap.txt") (test-success-log . #f))) (checksum . "15a49b88386a453ef2ed07b694cf0d62a42211d2") (checksum-error . #f) (collection . "amap") (conflicts . ()) (date-added . 1571985145) (dependencies . ("base" "request" "scribble-lib" "racket-doc" "rackunit-lib" "scribble-rainbow-delimiters")) (description . "Gaode Amap web service API") (implies . ()) (last-checked . 1632902836) (last-edit . 1595915407) (last-updated . 1622008733) (modules . ((lib "amap/main.rkt") (lib "amap/scribblings/amap.scrbl"))) (name . "amap") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (amap . #t) (author:yanyingwang1@gmail.com . #t) (gaode . #t) (ring:1 . #t))) (source . "https://github.com/yanyingwang/amap.git") (tags . ("amap" "gaode")) (versions . #hash((default . #hasheq((checksum . "15a49b88386a453ef2ed07b694cf0d62a42211d2") (source . "https://github.com/yanyingwang/amap.git") (source_url . "https://github.com/yanyingwang/amap.git"))))))) ("anaphoric" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "anaphoric" "doc/anaphoric@anaphoric/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/anaphoric.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/anaphoric.txt"))) (checksum . "c648ec2aad6d2b2ec72acc729143454d1e855cf6") (checksum-error . #f) (collection . "anaphoric") (conflicts . ()) (date-added . 1614453033) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Anaphoric versions of `if`, `when` and `cond`. They bind the value of the condition expression to `it`.") (implies . ()) (last-checked . 1632902836) (last-edit . 1614617403) (last-updated . 1627524427) (modules . ((lib "anaphoric/test/and-let-test.rkt") (lib "anaphoric/amap.rkt") (lib "anaphoric/test/if-let-test.rkt") (lib "anaphoric/aand.rkt") (lib "anaphoric/test/awhen-test.rkt") (lib "anaphoric/scribblings/anaphoric.scrbl") (lib "anaphoric/aif.rkt") (lib "anaphoric/cond-let.rkt") (lib "anaphoric/if-let.rkt") (lib "anaphoric/acond.rkt") (lib "anaphoric/test/amap-test.rkt") (lib "anaphoric/test/aif-test.rkt") (lib "anaphoric/afilter.rkt") (lib "anaphoric/test/acond-test.rkt") (lib "anaphoric/it.rkt") (lib "anaphoric/and-let.rkt") (lib "anaphoric/main.rkt") (lib "anaphoric/test/aand-test.rkt") (lib "anaphoric/test/when-let-test.rkt") (lib "anaphoric/awhen.rkt") (lib "anaphoric/test/afilter-test.rkt") (lib "anaphoric/test/it-test.rkt") (lib "anaphoric/when-let.rkt") (lib "anaphoric/test/cond-let-test.rkt"))) (name . "anaphoric") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (ring:1 . #t) (utility . #t))) (source . "https://github.com/jsmaniac/anaphoric.git#main") (tags . ("utility")) (versions . #hash((default . #hasheq((checksum . "c648ec2aad6d2b2ec72acc729143454d1e855cf6") (source . "https://github.com/jsmaniac/anaphoric.git#main") (source_url . "https://github.com/jsmaniac/anaphoric.git#main"))))))) ("anarki" . #hasheq((author . "rokitna@hotmail.com arc.racket@akkartik.com zkanfer@gmail.com") (authors . ("rokitna@hotmail.com" "arc.racket@akkartik.com" "zkanfer@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "anarki" "doc/anarki@anarki/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/anarki.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/anarki.txt"))) (checksum . "ffa6a0963baf6d1c80e5ebbda1b8b3258c8fbacc") (checksum-error . #f) (collection . "anarki") (conflicts . ()) (dependencies . ("base" "sha" "racket-doc" "scribble-lib")) (description . "Community-managed variant of the Arc dialect of Lisp") (implies . ()) (last-checked . 1632902836) (last-edit . 1457860748) (last-updated . 1631329634) (modules . ((lib "anarki/ac.rkt") (lib "anarki/boot.rkt") (lib "anarki/lang/module-begin.rkt") (lib "anarki/lib/racket-lang-demo/lang-anarki-library.rkt") (lib "anarki/brackets.rkt") (lib "anarki/lib/racket-lang-demo/racket-application.rkt") (lib "anarki/main.rkt") (lib "anarki/scribblings/anarki.scrbl") (lib "anarki/lib/racket-lang-demo/racket-deep-dependency.rkt") (lib "anarki/lib/racket-lang-demo/lang-anarki-deep-dependency.rkt") (lib "anarki/lib/ns.rkt") (lib "anarki/lang/reader.rkt") (lib "anarki/lib/racket-lang-demo/lang-anarki-application.rkt") (lib "anarki/lib/uuid.rkt"))) (name . "anarki") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:arc.racket@akkartik.com . #t) (author:rokitna@hotmail.com . #t) (author:zkanfer@gmail.com . #t) (language . #t) (ring:1 . #t) (unstable . #t) (web . #t))) (source . "git://github.com/arclanguage/anarki") (tags . ("language" "unstable" "web")) (versions . #hash((default . #hasheq((checksum . "ffa6a0963baf6d1c80e5ebbda1b8b3258c8fbacc") (source . "git://github.com/arclanguage/anarki") (source_url . "http://github.com/arclanguage/anarki/tree/master"))))))) ("andlet" . #hasheq((author . "deren.dohoda@gmail.com") (authors . ("deren.dohoda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "andlet-manual" "doc/andlet-manual@andlet/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/andlet.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/andlet.txt"))) (checksum . "2da90e6a47c2f87c57d05d9bd7bc221677d4b9d5") (checksum-error . #f) (collection . "andlet") (conflicts . ()) (date-added . 1597017052) (dependencies . ("base" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "Coupling and logic to let and let* forms.") (implies . ()) (last-checked . 1632902837) (last-edit . 1597017052) (last-updated . 1621108680) (modules . ((lib "andlet/private/andlet.rkt") (lib "andlet/andlet-manual.scrbl") (lib "andlet/main.rkt"))) (name . "andlet") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:deren.dohoda@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "https://bitbucket.org/derend/andlet.git") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "2da90e6a47c2f87c57d05d9bd7bc221677d4b9d5") (source . "https://bitbucket.org/derend/andlet.git") (source_url . "https://bitbucket.org/derend/andlet.git"))))))) ("animal-assets" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/animal-assets.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "7053186f2aa5f60edb3c64531b574e047a02f8bd") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1569966649) (dependencies . ("game-engine" "define-assets-from")) (description . "Various openly licensed images") (implies . ()) (last-checked . 1632902837) (last-edit . 1569966649) (last-updated . 1578420186) (modules . ((lib "animal-assets/scribblings/animal-assets.scrbl") (lib "animal-assets/animal-asset-friendly-names.rkt") (lib "animal-assets/assets/all.rkt") (lib "animal-assets/assets.rkt") (lib "animal-assets/main.rkt"))) (name . "animal-assets") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/animal-assets.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7053186f2aa5f60edb3c64531b574e047a02f8bd") (source . "https://github.com/thoughtstem/animal-assets.git") (source_url . "https://github.com/thoughtstem/animal-assets.git"))))))) ("animated-canvas" . #hasheq((author . "spdegabrielle@gmail.com m.douglas.williams@gmail.com") (authors . ("spdegabrielle@gmail.com" "m.douglas.williams@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "animated-canvas" "doc/animated-canvas@animated-canvas/index.html"))) (failure-log . "server/built/fail/animated-canvas.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "30df78c403f3ff90c6395cd8eb782140a4f1cc77") (checksum-error . #f) (collection . "animated-canvas") (conflicts . ()) (date-added . 1576854867) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Package converted from PLaneT. No code changes. Still in testing.") (implies . ()) (last-checked . 1632902838) (last-edit . 1576854903) (last-updated . 1576854903) (modules . ((lib "animated-canvas/private/histogram-widget.rkt") (lib "animated-canvas/private/examples/histogram-test.rkt") (lib "animated-canvas/scribblings/animated-canvas.scrbl") (lib "animated-canvas/private/examples/anim.rkt") (lib "animated-canvas/private/examples/animated-bubble-sort.rkt") (lib "animated-canvas/private/examples/animated-insertion-sort.rkt") (lib "animated-canvas/private/lines.rkt") (lib "animated-canvas/private/animated-canvas.rkt") (lib "animated-canvas/main.rkt"))) (name . "animated-canvas") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:m.douglas.williams@gmail.com . #t) (author:spdegabrielle@gmail.com . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/spdegabrielle/animated-canvas.git") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "30df78c403f3ff90c6395cd8eb782140a4f1cc77") (source . "https://github.com/spdegabrielle/animated-canvas.git") (source_url . "https://github.com/spdegabrielle/animated-canvas.git"))))))) ("ansi" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/ansi.txt") (success-log . "server/built/install/ansi.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ansi.txt"))) (checksum . "c14081de59bc7273f1f9088a51d6d9c202b2b9d0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "dynext-lib")) (description . "ANSI and VT10x escape sequences for Racket.") (implies . ()) (last-checked . 1632902838) (last-edit . 1443044744) (last-updated . 1613686877) (modules . ((lib "ansi/ansi.rkt") (lib "ansi/test-screen-size.rkt") (lib "ansi/private/install.rkt") (lib "ansi/private/tty-raw-extension.rkt") (lib "ansi/main.rkt") (lib "ansi/test-ansi.rkt") (lib "ansi/test-raw.rkt") (lib "ansi/lcd-terminal.rkt") (lib "ansi/test-modes.rkt"))) (name . "ansi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t) (terminal . #t))) (source . "github://github.com/tonyg/racket-ansi/master") (tags . ("terminal")) (versions . #hash((default . #hasheq((checksum . "c14081de59bc7273f1f9088a51d6d9c202b2b9d0") (source . "github://github.com/tonyg/racket-ansi/master") (source_url . "http://github.com/tonyg/racket-ansi/tree/master"))))))) ("ansi-color" . #hasheq((author . "renato@athaydes.com") (authors . ("renato@athaydes.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ansi-color" "doc/ansi-color@ansi-color/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ansi-color.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ansi-color.txt"))) (checksum . "20363d90fcef9219580ec0d6a78eea834df39d21") (checksum-error . #f) (collection . "ansi-color") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A library to make it easy to write colorized and styled output in terminals that support ANSI escape codes (most command lines).") (implies . ()) (last-checked . 1632902838) (last-edit . 1542614558) (last-updated . 1574285100) (modules . ((lib "ansi-color/scribblings/ansi-color.scrbl") (lib "ansi-color/display.rkt") (lib "ansi-color/main.rkt") (lib "ansi-color/demo.rkt"))) (name . "ansi-color") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (ansi . #t) (author:renato@athaydes.com . #t) (cli . #t) (ring:1 . #t) (terminal . #t))) (source . "https://github.com/renatoathaydes/ansi-color.git") (tags . ("ansi" "cli" "terminal")) (versions . #hash((default . #hasheq((checksum . "20363d90fcef9219580ec0d6a78eea834df39d21") (source . "https://github.com/renatoathaydes/ansi-color.git") (source_url . "https://github.com/renatoathaydes/ansi-color.git"))))))) ("aoc-racket" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "aoc-racket" "doc/aoc-racket@aoc-racket/index.html"))) (failure-log . "server/built/fail/aoc-racket.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "4d5f19b410ccb23230d3c1dbae58bceffff8adc6") (checksum-error . #f) (collection . "aoc-racket") (conflicts . ()) (date-added . 1556661319) (dependencies . ("graph" "base" "scribble-lib" ("sugar" #:version "0.3") "rackunit-lib" "math-lib" "beautiful-racket-lib" "gregor" "debug" "draw-lib" "gui-lib" "rackunit-lib" "racket-doc" "scribble-doc" "rackunit-doc" "at-exp-lib" "math-doc")) (description . "Solutions & explanations — in Racket, of course — for the Advent of Code puzzles") (implies . ()) (last-checked . 1632902839) (last-edit . 1556661319) (last-updated . 1621360685) (modules . ((lib "aoc-racket/2017/d20/main.rkt") (lib "aoc-racket/2019/10.rkt") (lib "aoc-racket/2018/06.rkt") (lib "aoc-racket/2017/d05/star1.rkt") (lib "aoc-racket/2016/day21/test.rkt") (lib "aoc-racket/2016/day20/test.rkt") (lib "aoc-racket/day15.rkt") (lib "aoc-racket/2017/d12/star2.rkt") (lib "aoc-racket/day22.rkt") (lib "aoc-racket/day12.rkt") (lib "aoc-racket/day24.rkt") (lib "aoc-racket/2016/day02/lang.rkt") (lib "aoc-racket/2016/day13/test.rkt") (lib "aoc-racket/2016/day24/test.rkt") (lib "aoc-racket/2016/day12/test.rkt") (lib "aoc-racket/2017/d19/test2.rkt") (lib "aoc-racket/2016/day24/input.rkt") (lib "aoc-racket/2017/d11/test2.rkt") (lib "aoc-racket/2016/day01/lang.rkt") (lib "aoc-racket/2020/06.rkt") (lib "aoc-racket/2016/day07/input.rkt") (lib "aoc-racket/2017/d17/star2.rkt") (lib "aoc-racket/2016/day02/test.rkt") (lib "aoc-racket/2017/d11/star1.rkt") (lib "aoc-racket/2019/20.rkt") (lib "aoc-racket/2017/d09/test1.rkt") (lib "aoc-racket/2017/d13/star1.rkt") (lib "aoc-racket/2016/day13/input.rkt") (lib "aoc-racket/day03.rkt") (lib "aoc-racket/2016/day15/test.rkt") (lib "aoc-racket/2016/day05/input.rkt") (lib "aoc-racket/2017/d10/test1.rkt") (lib "aoc-racket/2017/d16/star2.rkt") (lib "aoc-racket/2016/day12/input.rkt") (lib "aoc-racket/2016/day14/test.rkt") (lib "aoc-racket/2019/01.rkt") (lib "aoc-racket/2018/03.rkt") (lib "aoc-racket/2016/day15/lang.rkt") (lib "aoc-racket/day17.rkt") (lib "aoc-racket/2017/d19/star2.rkt") (lib "aoc-racket/2019/17.rkt") (lib "aoc-racket/day06.rkt") (lib "aoc-racket/2016/day23/lang.rkt") (lib "aoc-racket/2016/day21/input.rkt") (lib "aoc-racket/day18.rkt") (lib "aoc-racket/2020/25.rkt") (lib "aoc-racket/2017/d13/test1.rkt") (lib "aoc-racket/2016/day18/test.rkt") (lib "aoc-racket/2017/d16/test2.rkt") (lib "aoc-racket/2016/day16/input.rkt") (lib "aoc-racket/2020/02.rkt") (lib "aoc-racket/2016/day07/test.rkt") (lib "aoc-racket/2020/21.rkt") (lib "aoc-racket/2017/d03/main.rkt") (lib "aoc-racket/2017/d24/test2.rkt") (lib "aoc-racket/2020/13.rkt") (lib "aoc-racket/2017/d12/test1.rkt") (lib "aoc-racket/day10.rkt") (lib "aoc-racket/2016/day17/input.rkt") (lib "aoc-racket/2016/day06/test.rkt") (lib "aoc-racket/2017/d20/star2.rkt") (lib "aoc-racket/2017/d09/main.rkt") (lib "aoc-racket/2019/15.rkt") (lib "aoc-racket/2017/d24/test1.rkt") (lib "aoc-racket/aoc-racket.scrbl") (lib "aoc-racket/2017/d06/test2.rkt") (lib "aoc-racket/2019/02.rkt") (lib "aoc-racket/2016/day04/test.rkt") (lib "aoc-racket/2016/day20/input.rkt") (lib "aoc-racket/2016/day17/lang.rkt") (lib "aoc-racket/day02.rkt") (lib "aoc-racket/2016/day10/lang.rkt") (lib "aoc-racket/2017/d12/test2.rkt") (lib "aoc-racket/2017/d02/test1.rkt") (lib "aoc-racket/2017/d08/star1.rkt") (lib "aoc-racket/2017/d16/test1.rkt") (lib "aoc-racket/2017/d24/star1.rkt") (lib "aoc-racket/2017/d22/star1.rkt") (lib "aoc-racket/2017/d24/star2.rkt") (lib "aoc-racket/2016/day05/lang.rkt") (lib "aoc-racket/2017/d22/main.rkt") (lib "aoc-racket/day08.rkt") (lib "aoc-racket/2017/d15/test2.rkt") (lib "aoc-racket/2020/15.rkt") (lib "aoc-racket/day19.rkt") (lib "aoc-racket/2017/d01/star1.rkt") (lib "aoc-racket/2017/d05/test1.rkt") (lib "aoc-racket/2017/d10/star2.rkt") (lib "aoc-racket/2017/d12/star1.rkt") (lib "aoc-racket/2016/day12/lang.rkt") (lib "aoc-racket/2017/d07/star1.rkt") (lib "aoc-racket/2017/d13/star2.rkt") (lib "aoc-racket/2019/25.rkt") (lib "aoc-racket/2017/d05/test2.rkt") (lib "aoc-racket/2017/d09/test2.rkt") (lib "aoc-racket/2019/04.rkt") (lib "aoc-racket/2016/day20/lang.rkt") (lib "aoc-racket/2017/d10/test2.rkt") (lib "aoc-racket/2017/d01/test2.rkt") (lib "aoc-racket/2017/d13/test2.rkt") (lib "aoc-racket/2016/day13/lang.rkt") (lib "aoc-racket/2017/d18/test2.rkt") (lib "aoc-racket/2019/05.rkt") (lib "aoc-racket/2019/16.rkt") (lib "aoc-racket/2017/d03/test1.rkt") (lib "aoc-racket/2017/d20/test2.rkt") (lib "aoc-racket/2018/08.rkt") (lib "aoc-racket/2020/20.rkt") (lib "aoc-racket/2017/d12/main.rkt") (lib "aoc-racket/2019/14.rkt") (lib "aoc-racket/2017/d01/star2.rkt") (lib "aoc-racket/2017/d06/test1.rkt") (lib "aoc-racket/day23.rkt") (lib "aoc-racket/2016/day06/input.rkt") (lib "aoc-racket/2017/d15/main.rkt") (lib "aoc-racket/2017/d05/star2.rkt") (lib "aoc-racket/2019/06.rkt") (lib "aoc-racket/2016/day22/input.rkt") (lib "aoc-racket/2016/day19/input.rkt") (lib "aoc-racket/2016/day24/lang.rkt") (lib "aoc-racket/2016/day03/test-b.rkt") (lib "aoc-racket/2020/11.rkt") (lib "aoc-racket/2017/d22/test1.rkt") (lib "aoc-racket/2016/day08/lang.rkt") (lib "aoc-racket/2017/d05/main.rkt") (lib "aoc-racket/2017/d09/star1.rkt") (lib "aoc-racket/2016/day08/input.rkt") (lib "aoc-racket/2017/d15/star2.rkt") (lib "aoc-racket/2016/day19/test.rkt") (lib "aoc-racket/2017/d11/star2.rkt") (lib "aoc-racket/2016/day08/test.rkt") (lib "aoc-racket/2017/d19/test1.rkt") (lib "aoc-racket/2020/10.rkt") (lib "aoc-racket/2020/01.rkt") (lib "aoc-racket/2019/24.rkt") (lib "aoc-racket/2017/d21/star1.rkt") (lib "aoc-racket/2017/d13/main.rkt") (lib "aoc-racket/2017/d15/test1.rkt") (lib "aoc-racket/helper.rkt") (lib "aoc-racket/2019/12.rkt") (lib "aoc-racket/2017/d21/test1.rkt") (lib "aoc-racket/day07.rkt") (lib "aoc-racket/2017/d04/star1.rkt") (lib "aoc-racket/2017/d23/star2.rkt") (lib "aoc-racket/day05.rkt") (lib "aoc-racket/2019/22.rkt") (lib "aoc-racket/2017/d03/star2.rkt") (lib "aoc-racket/2017/d15/star1.rkt") (lib "aoc-racket/2017/d07/test1.rkt") (lib "aoc-racket/2016/day22/lang.rkt") (lib "aoc-racket/2017/d02/star1.rkt") (lib "aoc-racket/2017/d17/star1.rkt") (lib "aoc-racket/2016/day06/lang.rkt") (lib "aoc-racket/2017/d22/star2.rkt") (lib "aoc-racket/2020/12.rkt") (lib "aoc-racket/2017/d20/test1.rkt") (lib "aoc-racket/day13.rkt") (lib "aoc-racket/2019/14input.rkt") (lib "aoc-racket/day04.rkt") (lib "aoc-racket/2017/d21/star2.rkt") (lib "aoc-racket/2018/05.rkt") (lib "aoc-racket/2020/07.rkt") (lib "aoc-racket/2016/day04/input.rkt") (lib "aoc-racket/day25.rkt") (lib "aoc-racket/day21.rkt") (lib "aoc-racket/2019/08.rkt") (lib "aoc-racket/2020/17.rkt") (lib "aoc-racket/day20.rkt") (lib "aoc-racket/2018/10.rkt") (lib "aoc-racket/2017/d16/main.rkt") (lib "aoc-racket/2019/07.rkt") (lib "aoc-racket/2016/day07/lang.rkt") (lib "aoc-racket/2017/d02/test2.rkt") (lib "aoc-racket/2017/d14/star1.rkt") (lib "aoc-racket/2017/d18/star2.rkt") (lib "aoc-racket/2017/d22/test2.rkt") (lib "aoc-racket/2020/04.rkt") (lib "aoc-racket/2018/11.rkt") (lib "aoc-racket/2020/24.rkt") (lib "aoc-racket/2020/18.rkt") (lib "aoc-racket/2016/day09/input.rkt") (lib "aoc-racket/2020/14.rkt") (lib "aoc-racket/2020/19.rkt") (lib "aoc-racket/2016/day16/lang.rkt") (lib "aoc-racket/2017/d04/test2.rkt") (lib "aoc-racket/2017/d17/main.rkt") (lib "aoc-racket/2017/d07/star2.rkt") (lib "aoc-racket/2017/d14/test1.rkt") (lib "aoc-racket/2017/d25/star1.rkt") (lib "aoc-racket/2017/d18/main.rkt") (lib "aoc-racket/2017/d01/main.rkt") (lib "aoc-racket/2017/helper.rkt") (lib "aoc-racket/2016/day02/test-b.rkt") (lib "aoc-racket/2017/d24/main.rkt") (lib "aoc-racket/2017/d19/star1.rkt") (lib "aoc-racket/2017/d07/main.rkt") (lib "aoc-racket/2017/d06/main.rkt") (lib "aoc-racket/day14.rkt") (lib "aoc-racket/day09.rkt") (lib "aoc-racket/2020/23.rkt") (lib "aoc-racket/2018/04.rkt") (lib "aoc-racket/2017/d04/test1.rkt") (lib "aoc-racket/2020/08.rkt") (lib "aoc-racket/2017/d03/star1.rkt") (lib "aoc-racket/2018/02.rkt") (lib "aoc-racket/2019/09.rkt") (lib "aoc-racket/2018/01.rkt") (lib "aoc-racket/2017/aoc-lang.rkt") (lib "aoc-racket/2016/day19/lang.rkt") (lib "aoc-racket/2016/day14/input.rkt") (lib "aoc-racket/2017/d17/test1.rkt") (lib "aoc-racket/2019/13.rkt") (lib "aoc-racket/2016/day21/lang.rkt") (lib "aoc-racket/2017/d03/test2.rkt") (lib "aoc-racket/2017/d18/star1.rkt") (lib "aoc-racket/2017/d18/main2.rkt") (lib "aoc-racket/2017/d06/star1.rkt") (lib "aoc-racket/2017/d06/star2.rkt") (lib "aoc-racket/2016/day02/lang-b.rkt") (lib "aoc-racket/2017/d16/star1.rkt") (lib "aoc-racket/2019/19.rkt") (lib "aoc-racket/2016/day10/test.rkt") (lib "aoc-racket/2016/day22/test.rkt") (lib "aoc-racket/2017/d11/test1.rkt") (lib "aoc-racket/2016/day09/lang.rkt") (lib "aoc-racket/2017/d23/main.rkt") (lib "aoc-racket/2017/d04/main.rkt") (lib "aoc-racket/2020/22.rkt") (lib "aoc-racket/2016/day16/test.rkt") (lib "aoc-racket/2016/day16/test-b.rkt") (lib "aoc-racket/2017/d08/star2.rkt") (lib "aoc-racket/2016/day14/lang.rkt") (lib "aoc-racket/2016/day17/test.rkt") (lib "aoc-racket/2016/day18/lang.rkt") (lib "aoc-racket/day11.rkt") (lib "aoc-racket/2016/day03/lang.rkt") (lib "aoc-racket/2017/d19/main.rkt") (lib "aoc-racket/2019/23.rkt") (lib "aoc-racket/2020/05.rkt") (lib "aoc-racket/2019/07-gen.rkt") (lib "aoc-racket/2017/d20/star1.rkt") (lib "aoc-racket/2019/11.rkt") (lib "aoc-racket/2017/d25/test1.rkt") (lib "aoc-racket/2019/03.rkt") (lib "aoc-racket/2017/d25/main.rkt") (lib "aoc-racket/2016/day23/test.rkt") (lib "aoc-racket/2017/d11/main.rkt") (lib "aoc-racket/2017/d10/star1.rkt") (lib "aoc-racket/2017/d07/test2.rkt") (lib "aoc-racket/2016/day25/input.rkt") (lib "aoc-racket/2018/07.rkt") (lib "aoc-racket/2020/03.rkt") (lib "aoc-racket/2016/day25/lang.rkt") (lib "aoc-racket/2016/day09/test.rkt") (lib "aoc-racket/2017/d01/test1.rkt") (lib "aoc-racket/2017/d08/test2.rkt") (lib "aoc-racket/2017/d04/star2.rkt") (lib "aoc-racket/2017/d14/test2.rkt") (lib "aoc-racket/day01.rkt") (lib "aoc-racket/day16.rkt") (lib "aoc-racket/2016/day15/input.rkt") (lib "aoc-racket/2017/d14/star2.rkt") (lib "aoc-racket/2020/09.rkt") (lib "aoc-racket/2016/day01/test.rkt") (lib "aoc-racket/2017/d02/main.rkt") (lib "aoc-racket/main.rkt") (lib "aoc-racket/2019/14test.rkt") (lib "aoc-racket/2017/d08/test1.rkt") (lib "aoc-racket/2016/day10/input.rkt") (lib "aoc-racket/2016/day03/test.rkt") (lib "aoc-racket/2017/d18/test1.rkt") (lib "aoc-racket/2016/day23/input.rkt") (lib "aoc-racket/2017/d09/star2.rkt") (lib "aoc-racket/2016/day04/lang.rkt") (lib "aoc-racket/2018/09.rkt") (lib "aoc-racket/2016/day03/lang-b.rkt") (lib "aoc-racket/2018/stub.rkt") (lib "aoc-racket/2017/d10/main.rkt") (lib "aoc-racket/2016/day16/input-b.rkt") (lib "aoc-racket/2016/day15/input-b.rkt") (lib "aoc-racket/2017/d02/star2.rkt") (lib "aoc-racket/2017/d21/main.rkt") (lib "aoc-racket/2020/16.rkt") (lib "aoc-racket/2017/d23/star1.rkt") (lib "aoc-racket/2017/d14/main.rkt") (lib "aoc-racket/2017/d08/main.rkt") (lib "aoc-racket/2016/day18/input.rkt"))) (name . "aoc-racket") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (puzzles . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/aoc-racket.git") (tags . ("puzzles")) (versions . #hash((default . #hasheq((checksum . "4d5f19b410ccb23230d3c1dbae58bceffff8adc6") (source . "https://github.com/mbutterick/aoc-racket.git") (source_url . "https://github.com/mbutterick/aoc-racket.git"))))))) ("aosd" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/aosd.txt") (test-failure-log . "server/built/test-fail/aosd.txt") (test-success-log . #f))) (checksum . "7ab51262a256a324b062d7b407cb5341d1f41f69") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "x11")) (description . "FFI bindings to the Atheme Project's libaosd") (implies . ()) (last-checked . 1632902839) (last-edit . 1418738230) (last-updated . 1502812271) (modules . ((lib "aosd/aosd-dc.rkt") (lib "aosd/aosd.rkt") (lib "aosd/main.rkt"))) (name . "aosd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:asumu@ccs.neu.edu . #t) (ffi . #t) (graphics . #t) (ring:1 . #t))) (source . "github://github.com/takikawa/racket-aosd/master") (tags . ("ffi" "graphics")) (versions . #hash((default . #hasheq((checksum . "7ab51262a256a324b062d7b407cb5341d1f41f69") (source . "github://github.com/takikawa/racket-aosd/master") (source_url . "http://github.com/takikawa/racket-aosd/tree/master"))))))) ("apply" . #hasheq((author . "zaomir@outlook.com") (authors . ("zaomir@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/apply.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/apply.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/apply.txt"))) (checksum . "1d7d138179cd02e2b10eab29748d08b76d91c69d") (checksum-error . #f) (collection . "apply") (conflicts . ()) (dependencies . ("racket")) (description . "應用序語言") (implies . ()) (last-checked . 1632902840) (last-edit . 1516523856) (last-updated . 1516544174) (modules . ((lib "apply/lang/reader.rkt") (lib "apply/main.rkt"))) (name . "apply") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:zaomir@outlook.com . #t) (chinese . #t) (compiler . #t) (lang . #t) (language . #t) (programming-languages . #t) (ring:1 . #t))) (source . "https://github.com/zaoqil/apply.git?path=apply") (tags . ("chinese" "compiler" "lang" "language" "programming-languages")) (versions . #hash((default . #hasheq((checksum . "1d7d138179cd02e2b10eab29748d08b76d91c69d") (source . "https://github.com/zaoqil/apply.git?path=apply") (source_url . "https://github.com/zaoqil/apply.git?path=apply"))))))) ("appveyor-racket" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "appveyor-racket" "doc/appveyor-racket@appveyor-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/appveyor-racket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/appveyor-racket.txt"))) (checksum . "21f21d99160a0edefd7ceeb001210c88a8af1099") (checksum-error . #f) (collection . "appveyor-racket") (conflicts . ()) (dependencies . ("base" "scribble-lib" "rackunit-lib")) (description . "Help for using AppVeyor with Racket projects") (implies . ()) (last-checked . 1632902840) (last-edit . 1543378719) (last-updated . 1549985931) (modules . ((lib "appveyor-racket/main.rkt") (lib "appveyor-racket/scribblings/appveyor-racket.scrbl"))) (name . "appveyor-racket") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (ring:1 . #t) (testing . #t))) (source . "https://github.com/liberalartist/appveyor-racket.git") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "21f21d99160a0edefd7ceeb001210c88a8af1099") (source . "https://github.com/liberalartist/appveyor-racket.git") (source_url . "https://github.com/liberalartist/appveyor-racket.git"))))))) ("apse" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/apse.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/apse.txt"))) (checksum . "b02dfe2de3f7ae1a1edf931c9555408e6354a5bc") (checksum-error . #f) (collection . "apse") (conflicts . ()) (dependencies . ("base" "lux" "mode-lambda")) (description . "a pixel-based sprite editor (good with mode-lambda)") (implies . ()) (last-checked . 1632902840) (last-edit . 1504535462) (last-updated . 1502895067) (modules . ((lib "apse/main.rkt") (lib "apse/core.rkt") (lib "apse/tool.rkt"))) (name . "apse") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app . #t) (author:jay.mccarthy@gmail.com . #t) (games . #t) (graphics . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/apse") (tags . ("app" "games" "graphics")) (versions . #hash((default . #hasheq((checksum . "b02dfe2de3f7ae1a1edf931c9555408e6354a5bc") (source . "git://github.com/jeapostrophe/apse") (source_url . "http://github.com/jeapostrophe/apse/tree/master"))))))) ("argo" . #hasheq((author . "jesse@serverracket.com jesse@lisp.sh") (authors . ("jesse@serverracket.com" "jesse@lisp.sh")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "argo" "doc/argo@argo/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/argo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/argo.txt"))) (checksum . "ee49d60a8d73b32e8323a1324503f1d9c1022e5f") (checksum-error . #f) (collection . "argo") (conflicts . ()) (date-added . 1607664613) (dependencies . ("base" "rackunit-lib" "http" "sugar" "beautiful-racket-lib" "web-server-lib" "json-pointer" "uri-template" "ejs" "brag" "scribble-lib" "racket-doc" "rackunit-lib" "beautiful-racket-lib")) (description . "Validate JSON data using JSON Schema.") (implies . ()) (last-checked . 1632902840) (last-edit . 1607664613) (last-updated . 1620115087) (modules . ((lib "argo/pp.rkt") (lib "argo/oneline.rkt") (lib "argo/scribblings/command-point.scrbl") (lib "argo/reader.rkt") (lib "argo/format.rkt") (lib "argo/scribblings/command-schema.scrbl") (lib "argo/parameters.rkt") (lib "argo/test.rkt") (lib "argo/util.rkt") (lib "argo/scribblings/running.scrbl") (lib "argo/tests/schema/negative/test.rkt") (lib "argo/tokenizer.rkt") (lib "argo/evaluator.rkt") (lib "argo/equal.rkt") (lib "argo/parse.rkt") (lib "argo/scribblings/command-oneline.scrbl") (lib "argo/main.rkt") (lib "argo/ip.rkt") (lib "argo/scribblings/command-equal.scrbl") (lib "argo/schema.rkt") (lib "argo/scribblings/command-validate.scrbl") (lib "argo/scribblings/command-pp.scrbl") (lib "argo/resolve.rkt") (lib "argo/command.rkt") (lib "argo/scribblings/references.scrbl") (lib "argo/validate.rkt") (lib "argo/scribblings/technical.scrbl") (lib "argo/json.rkt") (lib "argo/scribblings/interface.scrbl") (lib "argo/expander.rkt") (lib "argo/grammar.rkt") (lib "argo/scribblings/argo.scrbl") (lib "argo/scribblings/limitations.scrbl") (lib "argo/scribblings/installation.scrbl") (lib "argo/regexp.rkt"))) (name . "argo") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse@lisp.sh . #t) (author:jesse@serverracket.com . #t) (data . #t) (json . #t) (ring:1 . #t) (validation . #t))) (source . "https://github.com/jessealama/argo.git") (tags . ("data" "json" "validation")) (versions . #hash((default . #hasheq((checksum . "ee49d60a8d73b32e8323a1324503f1d9c1022e5f") (source . "https://github.com/jessealama/argo.git") (source_url . "https://github.com/jessealama/argo.git"))))))) ("arguments" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "arguments" "doc/arguments@arguments/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/arguments.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/arguments.txt"))) (checksum . "5e8e2a1dd125e5e437510c87dabf903d0ec25749") (checksum-error . #f) (collection . "arguments") (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A simple data structure for a group of function arguments. Used by the mock package.") (implies . ()) (last-checked . 1632902840) (last-edit . 1500074225) (last-updated . 1603441209) (modules . ((lib "arguments/main.scrbl") (lib "arguments/main.rkt") (lib "arguments/tests/syntax.rkt"))) (name . "arguments") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (reflection . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/racket-mock?path=arguments") (tags . ("data" "reflection")) (versions . #hash((default . #hasheq((checksum . "5e8e2a1dd125e5e437510c87dabf903d0ec25749") (source . "git://github.com/jackfirth/racket-mock?path=arguments") (source_url . "http://github.com/jackfirth/racket-mock/tree/master?path=arguments"))))))) ("arroy" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/arroy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/arroy.txt"))) (checksum . "487b8cbacc5f1f9a4600f55b8c0f7f148f7c2747") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "web-server-lib")) (description . "A little library for modeling labeled transition systems with a collaborative Web stepper.") (implies . ()) (last-checked . 1632902841) (last-edit . 1385589159) (last-updated . 1502812272) (modules . ((lib "arroy/games/guess.rkt") (lib "arroy/lts.rkt") (lib "arroy/games/ghost.rkt") (lib "arroy/main.rkt") (lib "arroy/games/ttt.rkt"))) (name . "arroy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app . #t) (author:jay.mccarthy@gmail.com . #t) (games . #t) (ring:1 . #t) (web . #t))) (source . "github://github.com/jeapostrophe/arroy/master") (tags . ("app" "games" "web")) (versions . #hash((default . #hasheq((checksum . "487b8cbacc5f1f9a4600f55b8c0f7f148f7c2747") (source . "github://github.com/jeapostrophe/arroy/master") (source_url . "http://github.com/jeapostrophe/arroy/tree/master"))))))) ("asi64" . #hasheq((author . "pezi_pink@pinksquirrellabs.com") (authors . ("pezi_pink@pinksquirrellabs.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "asi64" "doc/asi64@asi64/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asi64.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/asi64.txt"))) (checksum . "81e61a25a6f35e137df6326353b9c54f50f2d829") (checksum-error . #f) (collection . "asi64") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "The Racket based 6502 assembler") (implies . ()) (last-checked . 1632902841) (last-edit . 1540895098) (last-updated . 1546435213) (modules . ((lib "asi64/expander.rkt") (lib "asi64/lang/language-info.rkt") (lib "asi64/samples/starfield.rkt") (lib "asi64/lang/reader.rkt") (lib "asi64/main.rkt") (lib "asi64/reader.rkt") (lib "asi64/lang/runtime-config.rkt") (lib "asi64/scribblings/asi64.scrbl"))) (name . "asi64") (ring . 1) (search-terms . #hasheq((|6502| . #t) (:build-success: . #t) (:docs: . #t) (C64 . #t) (author:pezi_pink@pinksquirrellabs.com . #t) (ring:1 . #t))) (source . "https://github.com/pezipink/asi64.git") (tags . ("6502" "C64")) (versions . #hash((default . #hasheq((checksum . "81e61a25a6f35e137df6326353b9c54f50f2d829") (source . "https://github.com/pezipink/asi64.git") (source_url . "https://github.com/pezipink/asi64.git"))))))) ("asm" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "asm" "doc/asm@asm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asm.txt") (test-failure-log . "server/built/test-fail/asm.txt") (test-success-log . #f))) (checksum . "57abd235fcb8c7505990f8e9731c01c716324ee5") (checksum-error . #f) (collection . "asm") (conflicts . ()) (dependencies . ("base" "binutils" "data-lib" "racklog" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A multi-platform assembler for Racket (supports x64 and generic instruction sets)") (implies . ()) (last-checked . 1632902841) (last-edit . 1466498787) (last-updated . 1614496886) (modules . ((lib "asm/example/ifib.rkt") (lib "asm/x86/private/mode.rkt") (lib "asm/generic/generic-x86-unit.rkt") (lib "asm/example/incr.rkt") (lib "asm/x86.rkt") (lib "asm/x86/private/decode.rkt") (lib "asm/example/hello.rkt") (lib "asm/scribblings/ffi.scrbl") (lib "asm/scribblings/generic.scrbl") (lib "asm/example/rpn.rkt") (lib "asm/x86/private/x86.rkt") (lib "asm/x86/kernel.rkt") (lib "asm/x86/register.rkt") (lib "asm/x86/disasm.rkt") (lib "asm/x86/private/opcode-map.rkt") (lib "asm/x86/private/instruction.rkt") (lib "asm/example/fibonacci.rkt") (lib "asm/main.rkt") (lib "asm/private/assembler.rkt") (lib "asm/x86/private/racklog-lib.rkt") (lib "asm/ffi.rkt") (lib "asm/x86/private/encode.rkt") (lib "asm/x86/private/operand.rkt") (lib "asm/scribblings/asm.scrbl") (lib "asm/x86/ndisasm.rkt") (lib "asm/x86/private/register.rkt") (lib "asm/x86/op.rkt") (lib "asm/generic/generic-asm-sig.rkt") (lib "asm/scribblings/assembler.scrbl") (lib "asm/scribblings/x86.scrbl") (lib "asm/x86/test.rkt") (lib "asm/base.rkt") (lib "asm/example/rfib.rkt") (lib "asm/generic.rkt"))) (name . "asm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (assembler . #t) (author:leo@lwh.jp . #t) (ffi . #t) (ring:1 . #t) (unstable . #t))) (source . "git://github.com/lwhjp/racket-asm") (tags . ("assembler" "ffi" "unstable")) (versions . #hash((default . #hasheq((checksum . "57abd235fcb8c7505990f8e9731c01c716324ee5") (source . "git://github.com/lwhjp/racket-asm") (source_url . "http://github.com/lwhjp/racket-asm/tree/master"))))))) ("asn1" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asn1.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/asn1.txt"))) (checksum . "dc47c3e5ea41f025a2644b1aa4151ed1f88e524f") (checksum-error . #f) (collection . "asn1") (conflicts . ()) (dependencies . ("base" "asn1-lib" "asn1-doc")) (description . "ASN.1 library") (implies . ("asn1-lib" "asn1-doc")) (last-checked . 1632902841) (last-edit . 1518435156) (last-updated . 1626988038) (modules . ()) (name . "asn1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (io . #t) (net . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/asn1.git?path=asn1") (tags . ("io" "net" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "dc47c3e5ea41f025a2644b1aa4151ed1f88e524f") (source . "https://github.com/rmculpepper/asn1.git?path=asn1") (source_url . "https://github.com/rmculpepper/asn1.git?path=asn1"))))))) ("asn1-doc" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "asn1" "doc/asn1@asn1-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asn1-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/asn1-doc.txt"))) (checksum . "dc47c3e5ea41f025a2644b1aa4151ed1f88e524f") (checksum-error . #f) (collection . "asn1") (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "asn1-lib")) (description . "ASN.1 library") (implies . ()) (last-checked . 1632902841) (last-edit . 1518435052) (last-updated . 1626988039) (modules . ((lib "asn1/scribblings/asn1.scrbl") (lib "asn1/scribblings/codec.scrbl") (lib "asn1/scribblings/misc.scrbl") (lib "asn1/scribblings/types.scrbl") (lib "asn1/scribblings/intro.scrbl") (lib "asn1/scribblings/translating.scrbl"))) (name . "asn1-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (io . #t) (net . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/asn1.git?path=asn1-doc") (tags . ("io" "net" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "dc47c3e5ea41f025a2644b1aa4151ed1f88e524f") (source . "https://github.com/rmculpepper/asn1.git?path=asn1-doc") (source_url . "https://github.com/rmculpepper/asn1.git?path=asn1-doc"))))))) ("asn1-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asn1-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/asn1-lib.txt"))) (checksum . "dc47c3e5ea41f025a2644b1aa4151ed1f88e524f") (checksum-error . #f) (collection . "asn1") (conflicts . ()) (dependencies . ("base" ("binaryio-lib" #:version "1.1"))) (description . "ASN.1 library") (implies . ()) (last-checked . 1632902842) (last-edit . 1518435001) (last-updated . 1626988039) (modules . ((lib "asn1/private/types.rkt") (lib "asn1/private/base256.rkt") (lib "asn1/main.rkt") (lib "asn1/util/bit-string.rkt") (lib "asn1/util/time.rkt") (lib "asn1/private/ber.rkt") (lib "asn1/ber.rkt") (lib "asn1/private/base.rkt") (lib "asn1/private/ber-frame.rkt") (lib "asn1/util/names.rkt"))) (name . "asn1-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (io . #t) (net . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/asn1.git?path=asn1-lib") (tags . ("io" "net" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "dc47c3e5ea41f025a2644b1aa4151ed1f88e524f") (source . "https://github.com/rmculpepper/asn1.git?path=asn1-lib") (source_url . "https://github.com/rmculpepper/asn1.git?path=asn1-lib"))))))) ("asn1-test" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asn1-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/asn1-test.txt"))) (checksum . "dc47c3e5ea41f025a2644b1aa4151ed1f88e524f") (checksum-error . #f) (collection . "asn1") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "asn1-lib")) (description . "ASN.1 library") (implies . ()) (last-checked . 1632902842) (last-edit . 1518435118) (last-updated . 1626988040) (modules . ((lib "asn1/fuzz.rkt") (lib "asn1/examples/crypto.rkt") (lib "asn1/examples/pkcs1.rkt") (lib "asn1/write-benchmark.rkt") (lib "asn1/examples/crypto-test.rkt") (lib "asn1/read-benchmark.rkt") (lib "asn1/examples/sec1.rkt") (lib "asn1/basic.rkt"))) (name . "asn1-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (io . #t) (net . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/asn1.git?path=asn1-test") (tags . ("io" "net" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "dc47c3e5ea41f025a2644b1aa4151ed1f88e524f") (source . "https://github.com/rmculpepper/asn1.git?path=asn1-test") (source_url . "https://github.com/rmculpepper/asn1.git?path=asn1-test"))))))) ("asyncunit" . #hasheq((author . "schuster@ccs.neu.edu") (authors . ("schuster@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "asyncunit" "doc/asyncunit@asyncunit/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/asyncunit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/asyncunit.txt"))) (checksum . "ef9e5c45e83a6f44539d45c8ac52935a463a9659") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib")) (description . "RackUnit helper functions for asynchronous channels") (implies . ()) (last-checked . 1632902842) (last-edit . 1418836111) (last-updated . 1502812273) (modules . ((lib "asyncunit/asyncunit.scrbl") (lib "asyncunit/tests.rkt") (lib "asyncunit/main.rkt"))) (name . "asyncunit") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:schuster@ccs.neu.edu . #t) (concurrency . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/schuster/asyncunit") (tags . ("concurrency" "testing")) (versions . #hash((default . #hasheq((checksum . "ef9e5c45e83a6f44539d45c8ac52935a463a9659") (source . "git://github.com/schuster/asyncunit") (source_url . "http://github.com/schuster/asyncunit/tree/master"))))))) ("at-exp-lib" . #hasheq((author . "eli@racket-lang.org mflatt@racket-lang.org") (authors . ("eli@racket-lang.org" "mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Libraries for @-expressions") (implies . ()) (last-checked . 1632902843) (last-edit . 1460066358) (last-updated . 1632665241) (modules . ((lib "scribble/reader.rkt") (lib "at-exp/lang/reader.rkt") (lib "scribble/base/reader.rkt") (lib "at-exp/lang/runtime-config.rkt") (lib "at-exp/lang/language-info.rkt"))) (name . "at-exp-lib") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (lang-extension . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("lang-extension" "main-distribution")) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "git://github.com/racket/racket/?path=pkgs/at-exp-lib") (source_url . "git://github.com/racket/racket/?path=pkgs/at-exp-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("atomichron" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "atomichron" "doc/atomichron@atomichron/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/atomichron.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/atomichron.txt"))) (checksum . "77dddb12241a8d7ca8f1520a1862a79cad91a6c6") (checksum-error . #f) (collection . "atomichron") (conflicts . ()) (date-added . 1576126101) (dependencies . ("base" "rebellion" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A microbenchmarking library") (implies . ()) (last-checked . 1632902843) (last-edit . 1576126101) (last-updated . 1590882322) (modules . ((lib "atomichron/main.scrbl") (lib "atomichron/private/scribble-evaluator-factory.rkt") (lib "atomichron/main.rkt"))) (name . "atomichron") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (benchmarking . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/atomichron.git") (tags . ("benchmarking")) (versions . #hash((default . #hasheq((checksum . "77dddb12241a8d7ca8f1520a1862a79cad91a6c6") (source . "https://github.com/jackfirth/atomichron.git") (source_url . "https://github.com/jackfirth/atomichron.git"))))))) ("auto-syntax-e" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "auto-syntax-e" "doc/auto-syntax-e@auto-syntax-e/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/auto-syntax-e.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/auto-syntax-e.txt"))) (checksum . "5488c6902ec6189f69f950ab4d5616e9d6718d34") (checksum-error . #f) (collection . "auto-syntax-e") (conflicts . ()) (date-added . 1614799361) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "For syntax pattern variables: instead of raising an error, x is roughly equivalent to (syntax->datum #'x).") (implies . ()) (last-checked . 1632902843) (last-edit . 1614957215) (last-updated . 1620698315) (modules . ((lib "auto-syntax-e/utils.rkt") (lib "auto-syntax-e/scribblings/auto-syntax-e.scrbl") (lib "auto-syntax-e/test/test-meta.rkt") (lib "auto-syntax-e/test/test-auto-syntax-e.rkt") (lib "auto-syntax-e/main.rkt"))) (name . "auto-syntax-e") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/auto-syntax-e.git#main") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "5488c6902ec6189f69f950ab4d5616e9d6718d34") (source . "https://github.com/jsmaniac/auto-syntax-e.git#main") (source_url . "https://github.com/jsmaniac/auto-syntax-e.git#main"))))))) ("autoffi" . #hasheq((author . "vervaeck.sam@skynet.be") (authors . ("vervaeck.sam@skynet.be")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/autoffi.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "c324b3b0d2b4e848782fc509856ddc82eaee9e36") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: git://github.com/AutoFFI/racket-autoffi\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . (("ddict" "0.1"))) (description . "Automatically generating FFI bindings for Racket") (implies . ()) (last-checked . 1632902844) (last-edit . 1488374430) (last-updated . 1621809956) (modules . ((lib "autoffi/util.rkt") (lib "autoffi/runtime.rkt") (lib "autoffi/main.rkt") (lib "autoffi/parse.rkt") (lib "autoffi/syntax.rkt"))) (name . "autoffi") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:vervaeck.sam@skynet.be . #t) (code-generator . #t) (ffi . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/AutoFFI/racket-autoffi") (tags . ("code-generator" "ffi" "syntax")) (versions . #hash((default . #hasheq((checksum . "c324b3b0d2b4e848782fc509856ddc82eaee9e36") (source . "git://github.com/AutoFFI/racket-autoffi") (source_url . "http://github.com/AutoFFI/racket-autoffi/tree/master"))))))) ("automata" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/automata.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/automata.txt"))) (checksum . "6abe851b83b18fcdcb8f2b19ab87cdabc90c71ce") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("automata-lib" "automata-doc")) (description . "a library for defining efficient automata using match patterns") (implies . ("automata-lib" "automata-doc")) (last-checked . 1632902844) (last-edit . 1438288079) (last-updated . 1611673725) (modules . ()) (name . "automata") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (automata . #t) (match . #t) (regex . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/automata/?path=automata") (tags . ("automata" "match" "regex")) (versions . #hash((default . #hasheq((checksum . "6abe851b83b18fcdcb8f2b19ab87cdabc90c71ce") (source . "git://github.com/jeapostrophe/automata/?path=automata") (source_url . "git://github.com/jeapostrophe/automata/?path=automata"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("automata-doc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "automata" "doc/automata@automata-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/automata-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/automata-doc.txt"))) (checksum . "6abe851b83b18fcdcb8f2b19ab87cdabc90c71ce") (checksum-error . #f) (collection . "automata") (conflicts . ()) (dependencies . (("base" #:version "6.2.900.4") "automata-lib" "scribble-lib" "racket-doc")) (description . "a library for defining efficient automata using match patterns") (implies . ()) (last-checked . 1632902844) (last-edit . 1504535586) (last-updated . 1611673726) (modules . ((lib "automata/scribblings/re.scrbl") (lib "automata/scribblings/automata.scrbl"))) (name . "automata-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (automata . #t) (match . #t) (regex . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/automata?path=automata-doc") (tags . ("automata" "match" "regex")) (versions . #hash((default . #hasheq((checksum . "6abe851b83b18fcdcb8f2b19ab87cdabc90c71ce") (source . "git://github.com/jeapostrophe/automata?path=automata-doc") (source_url . "http://github.com/jeapostrophe/automata/tree/master?path=automata-doc"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("automata-lib" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/automata-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/automata-lib.txt"))) (checksum . "6abe851b83b18fcdcb8f2b19ab87cdabc90c71ce") (checksum-error . #f) (collection . "automata") (conflicts . ()) (dependencies . (("base" #:version "6.2.900.6"))) (description . "a library for defining efficient automata using match patterns") (implies . ()) (last-checked . 1632902844) (last-edit . 1504535500) (last-updated . 1611673727) (modules . ((lib "automata/dfa.rkt") (lib "automata/re-ext.rkt") (lib "automata/nfa.rkt") (lib "automata/re.rkt") (lib "automata/re-compile.rkt") (lib "automata/nfa-ep.rkt") (lib "automata/machine.rkt") (lib "automata/nfa-star.rkt") (lib "automata/re-help.rkt"))) (name . "automata-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (automata . #t) (match . #t) (regex . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/automata?path=automata-lib") (tags . ("automata" "match" "regex")) (versions . #hash((default . #hasheq((checksum . "6abe851b83b18fcdcb8f2b19ab87cdabc90c71ce") (source . "git://github.com/jeapostrophe/automata?path=automata-lib") (source_url . "http://github.com/jeapostrophe/automata/tree/master?path=automata-lib"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("automata-test" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/automata-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/automata-test.txt"))) (checksum . "6abe851b83b18fcdcb8f2b19ab87cdabc90c71ce") (checksum-error . #f) (collection . "automata") (conflicts . ()) (dependencies . (("base" #:version "6.2.900.4") "automata-lib" "eli-tester")) (description . "a library for defining efficient automata using match patterns") (implies . ()) (last-checked . 1632902845) (last-edit . 1504535506) (last-updated . 1611673728) (modules . ((lib "automata/tests/nfa-ep-test.rkt") (lib "automata/tests/dfa-test.rkt") (lib "automata/tests/nfa-star-test.rkt") (lib "automata/tests/nfa-test.rkt") (lib "automata/tests/re-test.rkt") (lib "automata/tests/explain.rkt"))) (name . "automata-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (automata . #t) (match . #t) (regex . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/automata?path=automata-test") (tags . ("automata" "match" "regex")) (versions . #hash((default . #hasheq((checksum . "6abe851b83b18fcdcb8f2b19ab87cdabc90c71ce") (source . "git://github.com/jeapostrophe/automata?path=automata-test") (source_url . "http://github.com/jeapostrophe/automata/tree/master?path=automata-test"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("auxiliary-macro-context" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/auxiliary-macro-context.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/auxiliary-macro-context.txt"))) (checksum . "52d3df7f937700bcea5b4d200903cfb6575afdc6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Match-expander-style syntactic extensibility outside expressions.") (implies . ()) (last-checked . 1632902845) (last-edit . 1469297561) (last-updated . 1502812275) (modules . ((lib "auxiliary-macro-context/test/test-auxiliary-macro-context2.rkt") (lib "auxiliary-macro-context/test/test-auxiliary-macro-context.rkt") (lib "auxiliary-macro-context/main.rkt"))) (name . "auxiliary-macro-context") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/racket-auxiliary-macro-context") (tags . ()) (versions . #hash((default . #hasheq((checksum . "52d3df7f937700bcea5b4d200903cfb6575afdc6") (source . "git://github.com/tonyg/racket-auxiliary-macro-context") (source_url . "http://github.com/tonyg/racket-auxiliary-macro-context/tree/master"))))))) ("avl" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "avl" "doc/avl@avl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/avl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/avl.txt"))) (checksum . "e981880a7d4c202368cdd74c94cf11cbac42a29e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "AVL Trees for Racket") (implies . ()) (last-checked . 1632902845) (last-edit . 1409755055) (last-updated . 1515366974) (modules . ((lib "avl/main.rkt") (lib "avl/avl.scrbl"))) (name . "avl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-avl/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e981880a7d4c202368cdd74c94cf11cbac42a29e") (source . "github://github.com/mordae/racket-avl/master") (source_url . "http://github.com/mordae/racket-avl/tree/master"))))))) ("aws" . #hasheq((author . "racket@greghendershott.com") (authors . ("racket@greghendershott.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "aws" "doc/aws@aws/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/aws.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/aws.txt"))) (checksum . "94a16a6875ac585a10fc488b1bf48052172d5668") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.3") ("http" #:version "0.3") "sha" "at-exp-lib" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Amazon Web Services including S3, SDB, SES, SNS, SQS, CloudWatch, Glacier, Dynamo, and Route 53.") (implies . ()) (last-checked . 1632902845) (last-edit . 1396443660) (last-updated . 1613490927) (modules . ((lib "aws/main.rkt") (lib "aws/s3.rkt") (lib "aws/glacier.rkt") (lib "aws/post.rkt") (lib "aws/sigv4.rkt") (lib "aws/dynamo.rkt") (lib "aws/xml-path.rkt") (lib "aws/util.rkt") (lib "examples/backup.rkt") (lib "aws/aws.scrbl") (lib "aws/sqs.rkt") (lib "aws/take.rkt") (lib "aws/r53.rkt") (lib "aws/exn.rkt") (lib "aws/tests/data.rkt") (lib "aws/pool.rkt") (lib "aws/keys.rkt") (lib "examples/examples.rkt") (lib "aws/sdb.rkt") (lib "aws/cw.rkt") (lib "aws/ses.rkt") (lib "aws/sns.rkt"))) (name . "aws") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (AWS . #t) (author:racket@greghendershott.com . #t) (ring:1 . #t) (web . #t))) (source . "github://github.com/greghendershott/aws/master") (tags . ("AWS" "web")) (versions . #hash((default . #hasheq((checksum . "94a16a6875ac585a10fc488b1bf48052172d5668") (source . "github://github.com/greghendershott/aws/master") (source_url . "http://github.com/greghendershott/aws/tree/master"))))))) ("aws-cloudformation-deploy" . #hasheq((author . "michaelaarnold@gmail.com") (authors . ("michaelaarnold@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/aws-cloudformation-deploy.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "00d1107fe8c08712d9011c9bb46d3f4ab9d0cc70") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "core AWS Cloudformation deployment scripting library") (implies . ()) (last-checked . 1632902845) (last-edit . 1496699628) (last-updated . 1497036810) (modules . ((lib "aws-cloudformation-deploy/src/core.rkt") (lib "aws-cloudformation-deploy/main.rkt") (lib "aws-cloudformation-deploy/test/test-core.rkt"))) (name . "aws-cloudformation-deploy") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:michaelaarnold@gmail.com . #t) (aws . #t) (cloudformation . #t) (deploy . #t) (ring:1 . #t) (script . #t))) (source . "git://github.com/cjdev/aws-cloudformation-deploy") (tags . ("aws" "cloudformation" "deploy" "script")) (versions . #hash((default . #hasheq((checksum . "00d1107fe8c08712d9011c9bb46d3f4ab9d0cc70") (source . "git://github.com/cjdev/aws-cloudformation-deploy") (source_url . "http://github.com/cjdev/aws-cloudformation-deploy/tree/master"))))))) ("aws-cloudformation-template" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/aws-cloudformation-template.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "00f52274a5bfc03f23c9dd511db0c87e35cf80e5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("aws-cloudformation-template-doc" "aws-cloudformation-template-lib")) (description . "statically typed DSL for writing AWS CloudFormation templates") (implies . ("aws-cloudformation-template-doc" "aws-cloudformation-template-lib")) (last-checked . 1632902846) (last-edit . 1485193291) (last-updated . 1502812276) (modules . ()) (name . "aws-cloudformation-template") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/aws-cloudformation-template?path=aws-cloudformation-template") (tags . ()) (versions . #hash((default . #hasheq((checksum . "00f52274a5bfc03f23c9dd511db0c87e35cf80e5") (source . "git://github.com/lexi-lambda/aws-cloudformation-template?path=aws-cloudformation-template") (source_url . "http://github.com/lexi-lambda/aws-cloudformation-template/tree/master?path=aws-cloudformation-template"))))))) ("aws-cloudformation-template-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "aws-cloudformation-template"))) (failure-log . "server/built/fail/aws-cloudformation-template-doc.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "00f52274a5bfc03f23c9dd511db0c87e35cf80e5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("aws-cloudformation-template-lib" "base" "racket-doc" ("scribble-lib" #:version "1.16") "threading-lib" "turnstile")) (description . "documentation (no implementation) for “aws-cloudformation-template”") (implies . ()) (last-checked . 1632902846) (last-edit . 1485193282) (last-updated . 1502812276) (modules . ((lib "scribblings/aws/cloudformation/template.scrbl"))) (name . "aws-cloudformation-template-doc") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/aws-cloudformation-template?path=aws-cloudformation-template-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "00f52274a5bfc03f23c9dd511db0c87e35cf80e5") (source . "git://github.com/lexi-lambda/aws-cloudformation-template?path=aws-cloudformation-template-doc") (source_url . "http://github.com/lexi-lambda/aws-cloudformation-template/tree/master?path=aws-cloudformation-template-doc"))))))) ("aws-cloudformation-template-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/aws-cloudformation-template-lib.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "00f52274a5bfc03f23c9dd511db0c87e35cf80e5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "curly-fn-lib" "syntax-classes-lib" "threading-lib" "turnstile")) (description . "implementation (no documentation) for “aws-cloudformation-template”") (implies . ()) (last-checked . 1632902846) (last-edit . 1485193257) (last-updated . 1502812276) (modules . ((lib "aws/cloudformation/template/base.rkt") (lib "aws/cloudformation/template.rkt") (lib "aws/cloudformation/template/resources.rkt"))) (name . "aws-cloudformation-template-lib") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/aws-cloudformation-template?path=aws-cloudformation-template-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "00f52274a5bfc03f23c9dd511db0c87e35cf80e5") (source . "git://github.com/lexi-lambda/aws-cloudformation-template?path=aws-cloudformation-template-lib") (source_url . "http://github.com/lexi-lambda/aws-cloudformation-template/tree/master?path=aws-cloudformation-template-lib"))))))) ("axe" . #hasheq((author . "lotabout@gmail.com") (authors . ("lotabout@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "axe" "doc/axe@axe/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/axe.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/axe.txt"))) (checksum . "234c2d1f6849f3719c3fc3c2354a4d257e53943b") (checksum-error . #f) (collection . "axe") (conflicts . ()) (dependencies . ("base" "collections" "rackunit-lib" "scribble-lib" "racket-doc" "scribble-code-examples" "scribble-doc")) (description . "Handy utilities(macros/functions) for racket") (implies . ()) (last-checked . 1632902847) (last-edit . 1493200577) (last-updated . 1502812277) (modules . ((lib "axe/threading.rkt") (lib "axe/base/lang/reader-no-wrap.rkt") (lib "axe/base.rkt") (lib "axe/scribblings/axe.scrbl") (lib "axe/base/lang/runtime-config.rkt") (lib "axe/escape.rkt") (lib "axe/test.rkt") (lib "axe/dict.rkt") (lib "axe/base/lang/reader.rkt") (lib "axe/main.rkt") (lib "axe/base/axe-reader.rkt") (lib "axe/lang/reader-no-wrap.rkt") (lib "axe/base/lang/language-info.rkt") (lib "axe/conditionals.rkt") (lib "axe/app.rkt") (lib "axe/lang/reader.rkt"))) (name . "axe") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lotabout@gmail.com . #t) (ring:1 . #t) (utility . #t))) (source . "git://github.com/lotabout/axe") (tags . ("utility")) (versions . #hash((default . #hasheq((checksum . "234c2d1f6849f3719c3fc3c2354a4d257e53943b") (source . "git://github.com/lotabout/axe") (source_url . "http://github.com/lotabout/axe/tree/master"))))))) ("azelf" . #hasheq((author . "kalxd@126.com") (authors . ("kalxd@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "azelf" "doc/azelf@azelf/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/azelf.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/azelf.txt"))) (checksum . "368389c48d905863970eaad22404efcaa3eb0788") (checksum-error . #f) (collection . "azelf") (conflicts . ()) (date-added . 1611808486) (dependencies . (("base" #:version "8.1") "scribble-lib" "racket-doc" "rackunit-lib")) (description . "超能力工具箱") (implies . ()) (last-checked . 1632902847) (last-edit . 1632189655) (last-updated . 1632409646) (modules . ((lib "azelf/internal/keyword.rkt") (lib "azelf/scribblings/data/maybe.scrbl") (lib "azelf/syntax/curry.rkt") (lib "azelf/scribblings/syntax/maybe-do.scrbl") (lib "azelf/scribblings/syntax/curry.scrbl") (lib "azelf/syntax/mod.rkt") (lib "azelf/main.rkt") (lib "azelf/scribblings/syntax/keyword.scrbl") (lib "azelf/scribblings/data/json.scrbl") (lib "azelf/data/maybe-syntax.rkt") (lib "azelf/ext/list.rkt") (lib "azelf/syntax/match.rkt") (lib "azelf/data/maybe.rkt") (lib "azelf/scribblings/azelf.scrbl") (lib "azelf/scribblings/syntax/intro.scrbl") (lib "azelf/scribblings/syntax/mod.scrbl") (lib "azelf/internal/error.rkt") (lib "azelf/syntax/pipeline.rkt") (lib "azelf/scribblings/syntax/pipeline.scrbl") (lib "azelf/scribblings/data/intro.scrbl") (lib "azelf/scribblings/data/list.scrbl") (lib "azelf/ext/function.rkt") (lib "azelf/scribblings/run.rkt") (lib "azelf/type/json.rkt") (lib "azelf/lang/reader.rkt") (lib "azelf/scribblings/intro.scrbl"))) (name . "azelf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalxd@126.com . #t) (functional . #t) (monad . #t) (ring:1 . #t) (tools . #t))) (source . "https://github.com/kalxd/azelf.git") (tags . ("functional" "monad" "tools")) (versions . #hash((default . #hasheq((checksum . "368389c48d905863970eaad22404efcaa3eb0788") (source . "https://github.com/kalxd/azelf.git") (source_url . "https://github.com/kalxd/azelf.git"))))))) ("backport-template-pr1514" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "backport-template-pr1514" "doc/backport-template-pr1514@backport-template-pr1514/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/backport-template-pr1514.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/backport-template-pr1514.txt"))) (checksum . "a6c3611fcddb8d8a67531694c9b8c2c4f89bbb0f") (checksum-error . #f) (collection . "backport-template-pr1514") (conflicts . ()) (date-added . 1614799367) (dependencies . ("base" "rackunit-lib" "version-case" "scribble-lib" "racket-doc")) (description . "Backports syntax-local-template-metafunction-introduce as a package, so that it can be used in older versions. Require backport-template-pr1514/experimental/template instead of syntax/parse/experimental/template to use it.") (implies . ()) (last-checked . 1632902847) (last-edit . 1614889007) (last-updated . 1614921681) (modules . ((lib "backport-template-pr1514/scribblings/backport-template-pr1514.scrbl") (lib "backport-template-pr1514/experimental/template.rkt") (lib "backport-template-pr1514/main.rkt") (lib "backport-template-pr1514/experimental/private/substitute.rkt") (lib "backport-template-pr1514/experimental/dset.rkt"))) (name . "backport-template-pr1514") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (backport . #t) (ring:1 . #t) (syntax-parse . #t))) (source . "https://github.com/jsmaniac/backport-template-pr1514.git#main") (tags . ("backport" "syntax-parse")) (versions . #hash((default . #hasheq((checksum . "a6c3611fcddb8d8a67531694c9b8c2c4f89bbb0f") (source . "https://github.com/jsmaniac/backport-template-pr1514.git#main") (source_url . "https://github.com/jsmaniac/backport-template-pr1514.git#main"))))))) ("basalt" . #hasheq((author . "me@anishathalye.com") (authors . ("me@anishathalye.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/basalt.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/anishathalye/basalt.git\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (date-added . 1563370905) (dependencies . ()) (description . "A constraint-based programming language for designing figures and diagrams") (implies . ()) (last-checked . 1632902847) (last-edit . 1563370943) (last-updated . 1621809960) (modules . ()) (name . "basalt") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:me@anishathalye.com . #t) (design . #t) (drawing . #t) (figure . #t) (graphics . #t) (images . #t) (pict . #t) (ring:1 . #t))) (source . "https://github.com/anishathalye/basalt.git") (tags . ("design" "drawing" "figure" "graphics" "images" "pict")) (versions . #hash((default . #hasheq((checksum . "") (source . "https://github.com/anishathalye/basalt.git") (source_url . "https://github.com/anishathalye/basalt.git"))))))) ("base" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("racket-lib" ("racket" #:version "8.2.0.8"))) (description . "Racket libraries that are currently always available") (implies . (core)) (last-checked . 1632902847) (last-edit . 1460066358) (last-updated . 1632665270) (modules . ()) (name . "base") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "git://github.com/racket/racket/?path=pkgs/base") (source_url . "git://github.com/racket/racket/?path=pkgs/base"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("base32" . #hasheq((author . "alex@fldcr.com") (authors . ("alex@fldcr.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "base32-manual" "doc/base32-manual@base32/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/base32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/base32.txt"))) (checksum . "ea130f84dbac547d40f5bd27d1be53df811b4fd7") (checksum-error . #f) (collection . "base32") (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit" "sandbox-lib" "scribble-lib")) (description . "Provides encoding to and from Crockford's Base32 encoding.") (implies . ()) (last-checked . 1632902848) (last-edit . 1546369301) (last-updated . 1547859410) (modules . ((lib "base32/main.rkt") (lib "base32/base32-manual.scrbl"))) (name . "base32") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alex@fldcr.com . #t) (codec . #t) (ring:1 . #t))) (source . "https://github.com/afldcr/racket-base32.git") (tags . ("codec")) (versions . #hash(("0.3" . #hasheq((checksum . "e941d3abaa9904ac2d13902e6e99845c89f7f7df") (source . "https://github.com/afldcr/racket-base32.git#0.3") (source_url . "https://github.com/afldcr/racket-base32.git#0.3"))) (default . #hasheq((checksum . "ea130f84dbac547d40f5bd27d1be53df811b4fd7") (source . "https://github.com/afldcr/racket-base32.git") (source_url . "https://github.com/afldcr/racket-base32.git"))))))) ("base58" . #hasheq((author . "m4burns@uwaterloo.ca marc@kn0x.io") (authors . ("m4burns@uwaterloo.ca" "marc@kn0x.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "base58" "doc/base58@base58/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/base58.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/base58.txt"))) (checksum . "125186f659f29a9f7275540c6211885784a68edd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1597688325) (dependencies . ("base" "binaryio" "sha" "typed-racket-lib" "racket-doc" "rackunit-lib" "scribble-lib" "rackunit-typed")) (description . "Provides Base58Check encoding and decoding functions.") (implies . ()) (last-checked . 1632902848) (last-edit . 1597688325) (last-updated . 1597857890) (modules . ((lib "base58/base58.scrbl") (lib "base58/main.rkt"))) (name . "base58") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:m4burns@uwaterloo.ca . #t) (author:marc@kn0x.io . #t) (bitcoin . #t) (format . #t) (ring:1 . #t) (text . #t))) (source . "https://github.com/marckn0x/base58.git") (tags . ("bitcoin" "format" "text")) (versions . #hash((default . #hasheq((checksum . "125186f659f29a9f7275540c6211885784a68edd") (source . "https://github.com/marckn0x/base58.git") (source_url . "https://github.com/marckn0x/base58.git"))))))) ("base64" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "base64" "doc/base64@base64/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/base64.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/base64.txt"))) (checksum . "f3ff606785a553651d79c2e846b35fe84be9b2b0") (checksum-error . #f) (collection . "base64") (conflicts . ()) (date-added . 1609701893) (dependencies . ("base" "net-lib" "rackunit-lib" "base64-lib" "racket-doc" "scribble-lib" "net-doc")) (description . "") (implies . ()) (last-checked . 1632902848) (last-edit . 1609701893) (last-updated . 1615681282) (modules . ((lib "base64/tests/base64.rkt") (lib "base64/base64.scrbl"))) (name . "base64") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-base64.git?path=base64") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f3ff606785a553651d79c2e846b35fe84be9b2b0") (source . "https://github.com/rmculpepper/racket-base64.git?path=base64") (source_url . "https://github.com/rmculpepper/racket-base64.git?path=base64"))))))) ("base64-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/base64-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/base64-lib.txt"))) (checksum . "f3ff606785a553651d79c2e846b35fe84be9b2b0") (checksum-error . #f) (collection . "base64") (conflicts . ()) (date-added . 1609701824) (dependencies . (("base" #:version "7.4"))) (description . "") (implies . ()) (last-checked . 1632902849) (last-edit . 1609701824) (last-updated . 1615681283) (modules . ((lib "base64/main.rkt"))) (name . "base64-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-base64.git?path=base64-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f3ff606785a553651d79c2e846b35fe84be9b2b0") (source . "https://github.com/rmculpepper/racket-base64.git?path=base64-lib") (source_url . "https://github.com/rmculpepper/racket-base64.git?path=base64-lib"))))))) ("basedir" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "basedir" "doc/basedir@basedir/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/basedir.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/basedir.txt"))) (checksum . "ef95b1eeb9b4e0df491680e5caa98eeadf64dfa1") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1608151734) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "XDG Basedir Spec library") (implies . ()) (last-checked . 1632902849) (last-edit . 1608151734) (last-updated . 1615314148) (modules . ((lib "basedir/basedir.scrbl") (lib "basedir/main.rkt"))) (name . "basedir") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (configuration . #t) (ring:1 . #t))) (source . "https://github.com/willghatch/racket-basedir.git") (tags . ("configuration")) (versions . #hash((default . #hasheq((checksum . "ef95b1eeb9b4e0df491680e5caa98eeadf64dfa1") (source . "https://github.com/willghatch/racket-basedir.git") (source_url . "https://github.com/willghatch/racket-basedir.git"))))))) ("basm" . #hasheq((author . "me@gisch.dev") (authors . ("me@gisch.dev")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "basm" "doc/basm@basm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/basm.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/basm.txt"))) (checksum . "02b7d75eaddda765729820f79a13b54da6e1db14") (checksum-error . #f) (collection . "basm") (conflicts . ()) (date-added . 1618872381) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "") (implies . ()) (last-checked . 1632902849) (last-edit . 1618872381) (last-updated . 1620468281) (modules . ((lib "basm/main.rkt") (lib "basm/codegen.rkt") (lib "basm/parser.rkt") (lib "basm/error.rkt") (lib "basm/scribblings/basm.scrbl"))) (name . "basm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:me@gisch.dev . #t) (ring:1 . #t))) (source . "https://gitlab.com/pythondude325/basm.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "02b7d75eaddda765729820f79a13b54da6e1db14") (source . "https://gitlab.com/pythondude325/basm.git") (source_url . "https://gitlab.com/pythondude325/basm.git"))))))) ("battle-arena" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/battle-arena.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1550602358) (dependencies . ("https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-kata-util" "https://github.com/thoughtstem/game-engine.git" "https://github.com/thoughtstem/game-engine-demos.git?path=game-engine-demos-common")) (description . "A teaching language for creating battle arena style RPG games.  Built on #lang game-engine.          ") (implies . ()) (last-checked . 1632902850) (last-edit . 1552421851) (last-updated . 1580770992) (modules . ((lib "battle-arena/scribblings/manual.scrbl") (lib "battle-arena/lang/main.rkt") (lib "battle-arena/main.rkt") (lib "battle-arena/scribblings/assets-library.rkt") (lib "battle-arena/lang.rkt") (lib "battle-arena/examples.rkt"))) (name . "battle-arena") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:stephen@thoughtstem.com . #t) (education . #t) (games . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/TS-Languages.git?path=battlearena") (tags . ("education" "games")) (versions . #hash((default . #hasheq((checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (source . "https://github.com/thoughtstem/TS-Languages.git?path=battlearena") (source_url . "https://github.com/thoughtstem/TS-Languages.git?path=battlearena"))))))) ("battle-arena-avengers" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/battle-arena-avengers.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1550852414) (dependencies . ("https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-kata-util" "https://github.com/thoughtstem/TS-Languages.git?path=battlearena" "https://github.com/thoughtstem/fandom-sprites-ge.git")) (description . "Teaching language for creating battle royal games with Creative Commons licensed super hero assets, e.g. avengers.") (implies . ()) (last-checked . 1632902851) (last-edit . 1552421844) (last-updated . 1580770993) (modules . ((lib "battle-arena-avengers/lang/main.rkt") (lib "battle-arena-avengers/main.rkt") (lib "battle-arena-avengers/examples.rkt") (lib "battle-arena-avengers/scribblings/manual.scrbl") (lib "battle-arena-avengers/scribblings/assets-library.rkt") (lib "battle-arena-avengers/lang.rkt"))) (name . "battle-arena-avengers") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/TS-Languages.git?path=battlearena-avengers") (tags . ()) (versions . #hash((default . #hasheq((checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (source . "https://github.com/thoughtstem/TS-Languages.git?path=battlearena-avengers") (source_url . "https://github.com/thoughtstem/TS-Languages.git?path=battlearena-avengers"))))))) ("battlearena" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/battlearena.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1551370616) (dependencies . ("https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-kata-util" "https://github.com/thoughtstem/game-engine.git" "https://github.com/thoughtstem/game-engine-demos.git?path=game-engine-demos-common")) (description . "Clone of package battle-arena.  Teaching language for making battle royal type games.") (implies . ()) (last-checked . 1632902851) (last-edit . 1552421860) (last-updated . 1580770994) (modules . ((lib "battlearena/scribblings/assets-library.rkt") (lib "battlearena/scribblings/manual.scrbl") (lib "battlearena/examples.rkt") (lib "battlearena/lang/main.rkt") (lib "battlearena/main.rkt") (lib "battlearena/lang.rkt"))) (name . "battlearena") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/TS-Languages.git?path=battlearena") (tags . ()) (versions . #hash((default . #hasheq((checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (source . "https://github.com/thoughtstem/TS-Languages.git?path=battlearena") (source_url . "https://github.com/thoughtstem/TS-Languages.git?path=battlearena"))))))) ("battlearena-avengers" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/battlearena-avengers.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1551722861) (dependencies . ("https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-kata-util" "https://github.com/thoughtstem/TS-Languages.git?path=battlearena" "https://github.com/thoughtstem/fandom-sprites-ge.git")) (description . "Teaching language for creating battle royal games with Creative Commons licensed super hero assets, e.g. avengers.") (implies . ()) (last-checked . 1632902852) (last-edit . 1552421869) (last-updated . 1580770994) (modules . ((lib "battlearena-avengers/lang.rkt") (lib "battlearena-avengers/main.rkt") (lib "battlearena-avengers/lang/main.rkt") (lib "battlearena-avengers/examples.rkt") (lib "battlearena-avengers/scribblings/manual.scrbl") (lib "battlearena-avengers/scribblings/assets-library.rkt"))) (name . "battlearena-avengers") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/TS-Languages.git?path=battlearena-avengers") (tags . ()) (versions . #hash((default . #hasheq((checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (source . "https://github.com/thoughtstem/TS-Languages.git?path=battlearena-avengers") (source_url . "https://github.com/thoughtstem/TS-Languages.git?path=battlearena-avengers"))))))) ("battlearena-fortnite" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/battlearena-fortnite.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1551722997) (dependencies . ("https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-kata-util" "https://github.com/thoughtstem/TS-Languages.git?path=battlearena" "https://github.com/thoughtstem/fandom-sprites-ge.git")) (description . "Teaching language. Specialized look-and-feel for battle-arena games.") (implies . ()) (last-checked . 1632902853) (last-edit . 1552421877) (last-updated . 1580770995) (modules . ((lib "battlearena-fortnite/lang.rkt") (lib "battlearena-fortnite/examples.rkt") (lib "battlearena-fortnite/lang/main.rkt") (lib "battlearena-fortnite/main.rkt") (lib "battlearena-fortnite/scribblings/assets-library.rkt") (lib "battlearena-fortnite/scribblings/manual.scrbl"))) (name . "battlearena-fortnite") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/TS-Languages.git?path=battlearena-fortnite") (tags . ()) (versions . #hash((default . #hasheq((checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (source . "https://github.com/thoughtstem/TS-Languages.git?path=battlearena-fortnite") (source_url . "https://github.com/thoughtstem/TS-Languages.git?path=battlearena-fortnite"))))))) ("battlearena-starwars" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/battlearena-starwars.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1551723115) (dependencies . ("https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-kata-util" "https://github.com/thoughtstem/TS-Languages.git?path=battlearena" "https://github.com/thoughtstem/fandom-sprites-ge.git")) (description . "Teaching language. Specialized look-and-feel for battle-arena games.") (implies . ()) (last-checked . 1632902854) (last-edit . 1552421887) (last-updated . 1580770996) (modules . ((lib "battlearena-starwars/lang.rkt") (lib "battlearena-starwars/main.rkt") (lib "battlearena-starwars/scribblings/assets-library.rkt") (lib "battlearena-starwars/examples.rkt") (lib "battlearena-starwars/scribblings/manual.scrbl") (lib "battlearena-starwars/lang/main.rkt"))) (name . "battlearena-starwars") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/TS-Languages.git?path=battlearena-starwars") (tags . ()) (versions . #hash((default . #hasheq((checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (source . "https://github.com/thoughtstem/TS-Languages.git?path=battlearena-starwars") (source_url . "https://github.com/thoughtstem/TS-Languages.git?path=battlearena-starwars"))))))) ("bazaar" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bazaar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bazaar.txt"))) (checksum . "887d7441eaa4c1751d006fe2a5de7a970d6d08b1") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "data-lib" "draw-lib" "gui-lib" "images" "math-lib" "net-lib" "plot-gui-lib" "plot-lib" "racket-index" "rackunit-lib" "scribble-lib" "slideshow-lib" "srfi-lite-lib")) (description . "A personal collection of useful definitions. Quite unstable.") (implies . ()) (last-checked . 1632902855) (last-edit . 1427738557) (last-updated . 1632492456) (modules . ((lib "bazaar/version.rkt") (lib "bazaar/clipboard.rkt") (lib "bazaar/math.rkt") (lib "bazaar/matrix.rkt") (lib "bazaar/slideshow/slideshow-utils.rkt") (lib "bazaar/draw/color.rkt") (lib "bazaar/mutation.rkt") (lib "bazaar/keyword.rkt") (lib "bazaar/dict-list.rkt") (lib "bazaar/slideshow/examples/slideshow-table.rkt") (lib "bazaar/gui/bitmaps.rkt") (lib "bazaar/base.rkt") (lib "bazaar/system.rkt") (lib "bazaar/memoize.rkt") (lib "bazaar/bin-heap.rkt") (lib "bazaar/getter-setter.rkt") (lib "bazaar/date.rkt") (lib "bazaar/slideshow/examples/slideshow-tree.rkt") (lib "bazaar/scribble/compiler.rkt") (lib "bazaar/struct.rkt") (lib "bazaar/net/smtp.rkt") (lib "bazaar/regexp.rkt") (lib "bazaar/plot-param.rkt") (lib "bazaar/slideshow/interactive-style-maker.rkt") (lib "bazaar/gui/rapid-gui.rkt") (lib "bazaar/gui/utils.rkt") (lib "bazaar/loop.rkt") (lib "bazaar/slideshow/examples/slideshow-toc.rkt") (lib "bazaar/dict.rkt") (lib "bazaar/rackunit.rkt") (lib "bazaar/string.rkt") (lib "bazaar/plot.rkt") (lib "bazaar/define.rkt") (lib "bazaar/values.rkt") (lib "bazaar/slideshow/slideshow-tree.rkt") (lib "bazaar/slideshow/slideshow-table.rkt") (lib "bazaar/information-theory.rkt") (lib "bazaar/rvector.rkt") (lib "bazaar/find-mode.rkt") (lib "bazaar/list.rkt") (lib "bazaar/numeric-kind.rkt") (lib "bazaar/time.rkt") (lib "bazaar/with-it.rkt") (lib "bazaar/gui/msg-error.rkt") (lib "bazaar/repl.rkt") (lib "bazaar/tree.rkt") (lib "bazaar/text-table.rkt") (lib "bazaar/gui/list-box-sort.rkt") (lib "bazaar/slideshow/warsaw.rkt") (lib "bazaar/vector.rkt") (lib "bazaar/net.rkt") (lib "bazaar/gui/examples/board-paint.rkt") (lib "bazaar/cond-let.rkt") (lib "bazaar/roll-stack.rkt") (lib "bazaar/order.rkt") (lib "bazaar/cond-else.rkt") (lib "bazaar/slideshow/slideshow-toc.rkt") (lib "bazaar/gui/float-box.rkt") (lib "bazaar/file.rkt") (lib "bazaar/debug.rkt") (lib "bazaar/preferences.rkt") (lib "bazaar/gui/board.rkt"))) (name . "bazaar") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (dev . #t) (ring:1 . #t) (utility . #t))) (source . "github://github.com/Metaxal/bazaar/master") (tags . ("dev" "utility")) (versions . #hash((default . #hasheq((checksum . "887d7441eaa4c1751d006fe2a5de7a970d6d08b1") (source . "github://github.com/Metaxal/bazaar/master") (source_url . "http://github.com/Metaxal/bazaar/tree/master"))))))) ("bcrypt" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/bcrypt.txt") (success-log . "server/built/install/bcrypt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bcrypt.txt"))) (checksum . "0bef9e8afa1015644ab054b1be97866adb9087d6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "dynext-lib" "rackunit-lib")) (description . "A Racket interface to the bcrypt key derivation function.") (implies . ()) (last-checked . 1632902856) (last-edit . 1427073315) (last-updated . 1621958354) (modules . ((lib "bcrypt/private/install.rkt") (lib "bcrypt/main.rkt"))) (name . "bcrypt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (crypto . #t) (ring:1 . #t))) (source . "github://github.com/samth/bcrypt.rkt/master/") (tags . ("crypto")) (versions . #hash((default . #hasheq((checksum . "0bef9e8afa1015644ab054b1be97866adb9087d6") (source . "github://github.com/samth/bcrypt.rkt/master/") (source_url . "http://github.com/samth/bcrypt.rkt/tree/master/"))))))) ("beautiful-racket" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "br" "doc/br@beautiful-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/beautiful-racket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/beautiful-racket.txt"))) (checksum . "b0d133f4ba4149ea506d8b0dbd3845c915efdd06") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661333) (dependencies . (("base" #:version "6.6.0.900") "beautiful-racket-lib" "beautiful-racket-demo" "gui-doc" "gui-lib" "at-exp-lib" "br-parser-tools-doc" "racket-doc" "scribble-lib")) (description . "Resources for the “Beautiful Racket” book") (implies . ("beautiful-racket-lib" "beautiful-racket-demo")) (last-checked . 1632902856) (last-edit . 1557065263) (last-updated . 1621389503) (modules . ((lib "br/scribblings/br.scrbl"))) (name . "beautiful-racket") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (beautiful-racket . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket") (tags . ("beautiful-racket")) (versions . #hash((default . #hasheq((checksum . "b0d133f4ba4149ea506d8b0dbd3845c915efdd06") (source . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket") (source_url . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket"))) ("6.3" . #hasheq((checksum . "90c45a7ed65f90b2dc3f7c4ef335eb8bfcd73c17") (source . "https://github.com/mbutterick/beautiful-racket.git#v6.3-exception") (source_url . "https://github.com/mbutterick/beautiful-racket.git#v6.3-exception"))))))) ("beautiful-racket-demo" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/beautiful-racket-demo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/beautiful-racket-demo.txt"))) (checksum . "b0d133f4ba4149ea506d8b0dbd3845c915efdd06") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661341) (dependencies . (("base" #:version "6.6.0.900") "sugar" "beautiful-racket-lib" "rackunit-lib" "brag" "srfi-lib" "draw-lib" "syntax-color-lib" "gui-lib" "math-lib" "at-exp-lib")) (description . "Sample projects for “Beautiful Racket”") (implies . ()) (last-checked . 1632902857) (last-edit . 1556661341) (last-updated . 1621389504) (modules . ((lib "mirror-demo/test.rkt") (lib "basic-demo-3/setup.rkt") (lib "tacopocalypse-prep/main.rkt") (lib "basic-demo-2/parse-stx.rkt") (lib "tacopocalypse-demo/main.rkt") (lib "hdl-demo/Xor.tst.rkt") (lib "basic-demo-2/line.rkt") (lib "scriptish-demo/test.rkt") (lib "basic-demo-3/sample-shell.rkt") (lib "hdl-demo/Fanout.hdl.rkt") (lib "basic-demo-2/struct.rkt") (lib "basic-demo-2/sample-math.rkt") (lib "wires-demo/test-sources.rkt") (lib "atomic-taco-demo/test.rkt") (lib "quantum-taco-demo/test.rkt") (lib "javascriptlike-demo/rackety.rkt") (lib "jsonic-demo-3/parser.rkt") (lib "basic-demo-nth/main.rkt") (lib "regexcellent-demo/main.rkt") (lib "txtadv-demo/reader.rkt") (lib "atomic-taco-demo/main.rkt") (lib "basic-demo-3/sample.rkt") (lib "tacogram-demo/main.rkt") (lib "basic-demo-3/elements.rkt") (lib "basic-demo-2/run.rkt") (lib "hdl-demo/And.tst.rkt") (lib "basic-demo-2a/tokenizer.rkt") (lib "basic-demo-2/expr.rkt") (lib "txtadv-demo/demo-short.rkt") (lib "txtadv-demo/world-sexp.rkt") (lib "bf-demo/reader.rkt") (lib "txtadv-demo/5-lang/txtadv.rkt") (lib "basic-demo-3/report-args.rkt") (lib "basic-demo-2a/run.rkt") (lib "hdl-demo/expander.rkt") (lib "basic-demo-3/test-sources.rkt") (lib "conjunction-demo/test.rkt") (lib "jsonic-demo-2/expander.rkt") (lib "bf-demo/test-sources.rkt") (lib "txtadv-demo/4-type/txtadv.rkt") (lib "injunction-demo/main.rkt") (lib "taco-victory-demo/main.rkt") (lib "pythonesque-demo/test.rkt") (lib "funstacker-demo/funstacker-test.rkt") (lib "hdl-demo/Nand.tst.rkt") (lib "jsonic-demo-2/indenter.rkt") (lib "basic-demo/expander.rkt") (lib "jsonic-demo-2/buttons.rkt") (lib "xmlish-demo/grammar.rkt") (lib "basic-demo-3/args.rkt") (lib "jsonic-demo/parser.rkt") (lib "stackerizer-demo/stackerizer.rkt") (lib "basic-demo-2a/go.rkt") (lib "jsonic-demo-3/jsonic-test.rkt") (lib "jsonic-demo/jsonic-test.rkt") (lib "quantum-taco-demo/main.rkt") (lib "txtadv-demo/3-module-lang/txtadv.rkt") (lib "basic-demo-3/main.rkt") (lib "pl-checklist-demo/test.rkt") (lib "taco-compiler-demo/main.rkt") (lib "numberstring-demo/main.rkt") (lib "txtadv-demo/2-modules/world.rkt") (lib "basic-demo-2/main.rkt") (lib "scriptish-demo/expander.rkt") (lib "txtadv-demo/3-module-lang/world.rkt") (lib "basic-demo-2a/sample.rkt") (lib "hdl-demo/Nand2.hdl.rkt") (lib "jsonic-demo-2/test-sources.rkt") (lib "basic-demo-2/elements.rkt") (lib "txtadv-demo/tokenizer.rkt") (lib "stacker-demo/stacker-test.rkt") (lib "basic-demo-3/sample-for.rkt") (lib "basic-demo-2a/test-sources.rkt") (lib "jsonic-demo/test-sources.rkt") (lib "basic-demo-nth/tokenizer.rkt") (lib "basic-demo/parse-stx.rkt") (lib "txtadv-demo/parser.rkt") (lib "stacker-demo/stacker.rkt") (lib "txtadv-demo/main.rkt") (lib "scriptish-demo/grammar.rkt") (lib "jsonic-demo-3/main.rkt") (lib "txtadv-demo/5-lang/txtadv-reader.rkt") (lib "basic-demo-2a/elements.rkt") (lib "basic-demo-3/line.rkt") (lib "basic-demo-3/colorer.rkt") (lib "basic-demo-2/cond.rkt") (lib "basic-demo-2a/parser.rkt") (lib "jsonic-demo/main.rkt") (lib "basic-demo-3/misc.rkt") (lib "algebra-demo/grammar.rkt") (lib "pl-checklist-demo/main.rkt") (lib "taco-victory-demo/grammar.rkt") (lib "basic-demo/test-parser.rkt") (lib "hdl-demo/Dmux.tst.rkt") (lib "basic-demo-3/sample-exporter.rkt") (lib "bf-demo/expander-slow.rkt") (lib "hdl-demo/Not.tst.rkt") (lib "hdl-demo/DMux4Way.tst.rkt") (lib "txtadv-demo/expander.rkt") (lib "chip8-demo/chip8.rkt") (lib "read-only-demo/main.rkt") (lib "basic-demo-nth/parser.rkt") (lib "basic-demo-2/private/sample-pseudocode.rkt") (lib "basic-demo-3/tokenize-only.rkt") (lib "taco-decompiler-demo/run.rkt") (lib "bf-demo/test-tokenizer.rkt") (lib "basic-demo-2/lexer.rkt") (lib "basic-demo-2/expander.rkt") (lib "basic-demo-3/sample-math.rkt") (lib "wires-demo/test.rkt") (lib "hdl-demo/grammar.rkt") (lib "bf-demo/atsign.rkt") (lib "javascriptlike-demo/main.rkt") (lib "jsonic-demo-3/scribblings/jsonic.scrbl") (lib "hdl-demo/Mux.tst.rkt") (lib "jsonic-demo-3/parser-test.rkt") (lib "hdl-tst-demo/main.rkt") (lib "tacopocalypse-demo/test.rkt") (lib "javascriptlike-demo/test.rkt") (lib "wires-demo/puzzle.rkt") (lib "jsonic-demo-3/reader.rkt") (lib "hdl-demo/Nand.hdl.rkt") (lib "jsonic-demo-2/colorer.rkt") (lib "wires-demo/main.rkt") (lib "jsonic-demo-2/tokenizer.rkt") (lib "conjunction-demo/main.rkt") (lib "basic-demo-2a/main.rkt") (lib "basic-demo-3/parser.rkt") (lib "tacogram-demo/test.rkt") (lib "basic-demo-3/tokenizer.rkt") (lib "jsonic-demo-3/colorer.rkt") (lib "regexcellent-demo/test.rkt") (lib "basic-demo-2/sample-var.rkt") (lib "basic-demo-2/sample-cond.rkt") (lib "jsonic-demo-2/main.rkt") (lib "bf-demo/main.rkt") (lib "txtadv-demo/5-lang/world.rkt") (lib "precalc-demo/main.rkt") (lib "bf-demo/expander.rkt") (lib "basic-demo-3/structs.rkt") (lib "basic-demo-3/sample-importer.rkt") (lib "basic-demo/lexer-test.rkt") (lib "basic-demo-2a/misc.rkt") (lib "basic-demo-2/tokenizer.rkt") (lib "hdl-tst-demo/grammar.rkt") (lib "jsonic-demo/reader.rkt") (lib "basic-demo-2/go.rkt") (lib "mirror-demo/main.rkt") (lib "jsonic-demo-3/buttons.rkt") (lib "dyadic-demo/source.rkt") (lib "hdl-demo/DMux4Way-test.rkt") (lib "basic-demo-nth/basic-test.rkt") (lib "basic-demo-3/sample-provide.rkt") (lib "hdl-demo/Dmux-test.rkt") (lib "txtadv-demo/6-color/world.rkt") (lib "xmlish-demo/main.rkt") (lib "basic-demo-2a/lexer.rkt") (lib "jsonic-demo-3/tokenizer.rkt") (lib "precalc-demo/test.rkt") (lib "basic-demo-3/expr.rkt") (lib "jsonic-demo-2/parser-test.rkt") (lib "txtadv-demo/0-longhand/txtadv+world.rkt") (lib "jsonic-demo-2/parser.rkt") (lib "bf-demo/test-reader.rkt") (lib "dyadic-demo/main.rkt") (lib "basic-demo-2a/line.rkt") (lib "passthrough-demo/test.rkt") (lib "expand-only-demo/main.rkt") (lib "taco-compiler-demo/test.rkt") (lib "hdl-demo/Toffoli.hdl.rkt") (lib "basic-demo/private/sample-pseudocode.rkt") (lib "stackerizer-demo/stackerizer-test.rkt") (lib "scriptish-demo/subtest.rkt") (lib "basic-demo/sample.rkt") (lib "basic-demo-3/lexer.rkt") (lib "wires-demo/with-promises.rkt") (lib "basic-demo-nth/colorer.rkt") (lib "algebra-demo/main.rkt") (lib "basic-demo-2/parser.rkt") (lib "bf-demo/factorial.rkt") (lib "basic-demo/tokenizer.rkt") (lib "bf-demo/parser-tester.rkt") (lib "hdl-demo/main.rkt") (lib "pythonesque-demo/grammar.rkt") (lib "basic-demo-2a/expander.rkt") (lib "basic-demo-2/sample-for.rkt") (lib "basic-demo-3/sample-input.rkt") (lib "jsonic-demo-2/jsonic-test.rkt") (lib "txtadv-demo/6-color/color.rkt") (lib "javascriptlike-demo/sexped.rkt") (lib "injunction-demo/test.rkt") (lib "xmlish-demo/test.rkt") (lib "basic-demo-2a/expr.rkt") (lib "hdl-demo/Dmux4Way.hdl.rkt") (lib "basic-demo-3/expander.rkt") (lib "tacogram-demo/grammar.rkt") (lib "taco-victory-demo/test.rkt") (lib "hdl-demo/bus-properties.rkt") (lib "bf-demo/test-parser.rkt") (lib "basic-demo-2/test-sources.rkt") (lib "basic-demo/tokenize-only.rkt") (lib "jsonic-demo/expander.rkt") (lib "basic-demo-3/cond.rkt") (lib "basic-demo-2/parse-only.rkt") (lib "txtadv-demo/world-test.rkt") (lib "pl-checklist-lang-maker/main.rkt") (lib "precalc-demo/grammar.rkt") (lib "jsonic-demo/tokenizer.rkt") (lib "hdl-demo/DMux.hdl.rkt") (lib "basic-demo/test-sources.rkt") (lib "basic-demo/main.rkt") (lib "javascriptlike-demo/less-rackety.rkt") (lib "txtadv-demo/2-modules/txtadv.rkt") (lib "funstacker-demo/funstacker-h2.rkt") (lib "txtadv-demo/4-type/world.rkt") (lib "basic-demo-3/sample-cond.rkt") (lib "basic-demo-2/sample-gosub.rkt") (lib "basic-demo-2/colorer.rkt") (lib "basic-demo-nth/importest.rkt") (lib "taco-decompiler-demo/main.rkt") (lib "bf-demo/atsign-sexp.rkt") (lib "basic-demo-nth/expander.rkt") (lib "basic-demo-3/run.rkt") (lib "basic-demo-3/struct.rkt") (lib "basic-demo-3/parse-stx.rkt") (lib "basic-demo-2/misc.rkt") (lib "basic-demo-3/private/sample-pseudocode.rkt") (lib "regexcellent-demo/grammar.rkt") (lib "hdl-demo/Mux.hdl.rkt") (lib "stacker-demo/test-sources.rkt") (lib "bf-demo/hello.rkt") (lib "basic-demo-2/sample.rkt") (lib "pythonesque-demo/main.rkt") (lib "funstacker-demo/test-sources.rkt") (lib "scriptish-demo/main.rkt") (lib "hdl-tst-demo/expander.rkt") (lib "basic-demo-3/sample-import.rkt") (lib "basic-demo-3/parse-only.rkt") (lib "numberstring-demo/source.rkt") (lib "basic-demo-2/sample-input.rkt") (lib "hdl-demo/HalfAdder.tst.rkt") (lib "basic-demo-3/sample-gosub.rkt") (lib "bf-demo/parser.rkt") (lib "hdl-demo/Or.tst.rkt") (lib "hdl-demo/Mux-test.rkt") (lib "tacopocalypse-prep/test.rkt") (lib "basic-demo/parse-only.rkt") (lib "hdl-demo/Not.hdl.rkt") (lib "jsonic-demo-3/indenter.rkt") (lib "bf-demo/expander-imperative.rkt") (lib "jsonic-demo-2/reader.rkt") (lib "funstacker-demo/funstacker.rkt") (lib "basic-demo-3/go.rkt") (lib "txtadv-demo/6-color/txtadv.rkt") (lib "javascriptlike-demo/grammar.rkt") (lib "hdl-demo/And.hdl.rkt") (lib "basic-demo/lexer.rkt") (lib "stackerizer-demo/test-sources.rkt") (lib "txtadv-demo/world.rkt") (lib "hdl-demo/HalfAdder.hdl.rkt") (lib "txtadv-demo/1-monolith/txtadv+world.rkt") (lib "passthrough-demo/main.rkt") (lib "basic-demo-2a/struct.rkt") (lib "basic-demo/parser.rkt") (lib "taco-decompiler-demo/test.rkt") (lib "algebra-demo/test.rkt") (lib "jsonic-demo-3/test-sources.rkt") (lib "hdl-demo/Or.hdl.rkt") (lib "read-only-demo/test.rkt") (lib "hdl-demo/bus.rkt") (lib "txtadv-demo/6-color/reader.rkt") (lib "basic-demo-3/sample-def.rkt") (lib "jsonic-demo-3/expander.rkt") (lib "hdl-demo/Xor.hdl.rkt") (lib "expand-only-demo/test.rkt") (lib "javascriptlike-demo/expander.rkt"))) (name . "beautiful-racket-demo") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mb@mbtype.com . #t) (beautiful-racket . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket-demo") (tags . ("beautiful-racket")) (versions . #hash((default . #hasheq((checksum . "b0d133f4ba4149ea506d8b0dbd3845c915efdd06") (source . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket-demo") (source_url . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket-demo"))))))) ("beautiful-racket-lib" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/beautiful-racket-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/beautiful-racket-lib.txt"))) (checksum . "b0d133f4ba4149ea506d8b0dbd3845c915efdd06") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661348) (dependencies . (("base" #:version "6.6.0.900") "beautiful-racket-macro" "at-exp-lib" "sugar" "debug" "rackunit-lib" "gui-lib" "draw-lib")) (description . "support library for `beautiful-racket`") (implies . ()) (last-checked . 1632902857) (last-edit . 1556661348) (last-updated . 1621389505) (modules . ((lib "br/get-info.rkt") (lib "br/reader-utils.rkt") (lib "br/cond.rkt") (lib "br/indent.rkt") (lib "br/module.rkt") (lib "br/define.rkt") (lib "br/list.rkt") (lib "br/debug.rkt") (lib "br/test.rkt") (lib "br/quicklang.rkt") (lib "br/datum.rkt") (lib "br/main.rkt") (lib "br/verbose-app.rkt"))) (name . "beautiful-racket-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mb@mbtype.com . #t) (beautiful-racket . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket-lib") (tags . ("beautiful-racket")) (versions . #hash((default . #hasheq((checksum . "b0d133f4ba4149ea506d8b0dbd3845c915efdd06") (source . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket-lib") (source_url . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket-lib"))))))) ("beautiful-racket-macro" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/beautiful-racket-macro.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/beautiful-racket-macro.txt"))) (checksum . "b0d133f4ba4149ea506d8b0dbd3845c915efdd06") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1588618090) (dependencies . (("base" #:version "6.6.0.900") "rackunit-lib")) (description . "Subpackage with just the br/macro and br/syntax modules") (implies . ()) (last-checked . 1632902857) (last-edit . 1588618090) (last-updated . 1621389506) (modules . ((lib "br/macro.rkt") (lib "br/syntax.rkt") (lib "br/private/syntax-flatten.rkt") (lib "br/private/generate-literals.rkt"))) (name . "beautiful-racket-macro") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mb@mbtype.com . #t) (beautiful-racket . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket-macro") (tags . ("beautiful-racket")) (versions . #hash((default . #hasheq((checksum . "b0d133f4ba4149ea506d8b0dbd3845c915efdd06") (source . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket-macro") (source_url . "https://github.com/mbutterick/beautiful-racket.git?path=beautiful-racket-macro"))))))) ("beeswax" . #hasheq((author . "joel@jdueck.net") (authors . ("joel@jdueck.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "beeswax" "doc/beeswax@beeswax/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/beeswax.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/beeswax.txt"))) (checksum . "ad702b5a1c3024c6c7a2d19fa7b0c3c2586aa22b") (checksum-error . #f) (collection . "beeswax") (conflicts . ()) (date-added . 1622433816) (dependencies . ("at-exp-lib" "pollen" "sugar" "base" "scribble-doc" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A Pollen-friendly template language") (implies . ()) (last-checked . 1632902857) (last-edit . 1622433816) (last-updated . 1632370048) (modules . ((lib "beeswax/expander.rkt") (lib "beeswax/private/command.rkt") (lib "beeswax/scribblings/tutorial.scrbl") (lib "beeswax/for-pollen.rkt") (lib "beeswax/scribblings/ack.scrbl") (lib "beeswax/test/data/pollen.rkt") (lib "beeswax/scribblings/sample-proj/template.html.rkt") (lib "beeswax/private/files.rkt") (lib "beeswax/template.rkt") (lib "beeswax/reader.rkt") (lib "beeswax/scribblings/sandbox.rkt") (lib "beeswax/render.rkt") (lib "beeswax/test/data/template.html.rkt") (lib "beeswax/scribblings/beeswax.scrbl") (lib "beeswax/private/constants.rkt") (lib "beeswax/test/test-output.rkt") (lib "beeswax/scribblings/reference.scrbl") (lib "beeswax/scribblings/raco.scrbl"))) (name . "beeswax") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:joel@jdueck.net . #t) (pollen . #t) (ring:1 . #t) (templates . #t))) (source . "https://github.com/otherjoel/beeswax.git#main") (tags . ("pollen" "templates")) (versions . #hash((default . #hasheq((checksum . "ad702b5a1c3024c6c7a2d19fa7b0c3c2586aa22b") (source . "https://github.com/otherjoel/beeswax.git#main") (source_url . "https://github.com/otherjoel/beeswax.git#main"))))))) ("behavior" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "behavior" "doc/behavior@behavior/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/behavior.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/behavior.txt"))) (checksum . "72103db75c07d52d9027b34f0960532e235f9c10") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-index" "scribble-lib" "scribble-math" "racket-doc" "sandbox-lib" "cover-coveralls")) (description . "This package introduces a set of modeling techniques for exploring behavior in software systems.\r\nModels such as state machines and Petri nets can be used to model the behavior of a system, and\r\nMarkov chains are used to generate events to help in the simulation of systems.") (implies . ()) (last-checked . 1632902857) (last-edit . 1538495265) (last-updated . 1550530142) (modules . ((lib "behavior/scribblings/behavior.scrbl") (lib "behavior/test/markov-chain.rkt") (lib "behavior/reporter.rkt") (lib "behavior/fsm.rkt") (lib "behavior/test/scribblings.rkt") (lib "behavior/petri-net.rkt") (lib "behavior/markov-chain.rkt") (lib "behavior/test/utilities.rkt") (lib "behavior/test/petri-net.rkt") (lib "behavior/test/fsm.rkt"))) (name . "behavior") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johnstonskj@gmail.com . #t) (markov-chain . #t) (petri-net . #t) (ring:1 . #t) (state-machine . #t))) (source . "https://github.com/johnstonskj/behavior.git") (tags . ("markov-chain" "petri-net" "state-machine")) (versions . #hash((default . #hasheq((checksum . "72103db75c07d52d9027b34f0960532e235f9c10") (source . "https://github.com/johnstonskj/behavior.git") (source_url . "https://github.com/johnstonskj/behavior.git"))))))) ("benchmark" . #hasheq((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "benchmark" "doc/benchmark@benchmark/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/benchmark.txt") (test-failure-log . "server/built/test-fail/benchmark.txt") (test-success-log . #f))) (checksum . "de7e84539de23834508dba42e07859cf13bde20c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "math-lib" "plot-gui-lib" "plot-lib" "typed-racket-lib" "plot-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Benchmarking library") (implies . ()) (last-checked . 1632902858) (last-edit . 1398970069) (last-updated . 1558821375) (modules . ((lib "benchmark/examples/scribble-example2.rkt") (lib "benchmark/examples/external/collatz1000.rkt") (lib "benchmark/plot.rkt") (lib "benchmark/examples/scribble-example1.rkt") (lib "benchmark/scribblings/benchmark.scrbl") (lib "benchmark/examples/macro-examples/fib.rkt") (lib "benchmark/examples/sleep-racket-time.rkt") (lib "benchmark/examples/sleep-delta.rkt") (lib "benchmark/results.rkt") (lib "benchmark/bootstrap-ci.rkt") (lib "benchmark/types.rkt") (lib "benchmark/main.rkt") (lib "benchmark/examples/external/fib5.rkt") (lib "benchmark/examples/external/fib20.rkt") (lib "benchmark/macro.rkt") (lib "benchmark/examples/sleep.rkt") (lib "benchmark/examples/incremental-record.rkt") (lib "benchmark/examples/macro-examples/collatz.rkt"))) (name . "benchmark") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stamourv@racket-lang.org . #t) (performance . #t) (ring:1 . #t))) (source . "git://github.com/stamourv/racket-benchmark#master") (tags . ("performance")) (versions . #hash((default . #hasheq((checksum . "de7e84539de23834508dba42e07859cf13bde20c") (source . "git://github.com/stamourv/racket-benchmark#master") (source_url . "http://github.com/stamourv/racket-benchmark/tree/master#master"))) ("6.2" . #hasheq((checksum . "757898302572e930bf8be254361e226dbda75af5") (source . "github://github.com/stamourv/racket-benchmark/racket-6.2") (source_url . "http://github.com/stamourv/racket-benchmark/tree/racket-6.2"))) ("6.3" . #hasheq((checksum . "679dac464f413f617e9654262d28534088057dba") (source . "github://github.com/stamourv/racket-benchmark/racket-6.3") (source_url . "http://github.com/stamourv/racket-benchmark/tree/racket-6.3"))))))) ("benchmark-ips" . #hasheq((author . "zenspider@gmail.com") (authors . ("zenspider@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/benchmark-ips.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/benchmark-ips.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/benchmark-ips.txt"))) (checksum . "264e756c409f52020462901ee1f5059c9fe674eb") (checksum-error . #f) (collection . "benchmark-ips") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib" "racket-doc")) (description . "This is my port of @evanphx's benchmark-ips for ruby to racket. Provides a very simple and clean way to do performance comparisons.") (implies . ()) (last-checked . 1632902858) (last-edit . 1502757581) (last-updated . 1562000230) (modules . ((lib "benchmark-ips/main.rkt") (lib "benchmark-ips/benchmark-ips.rkt"))) (name . "benchmark-ips") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:zenspider@gmail.com . #t) (benchmarking . #t) (performance . #t) (ring:1 . #t))) (source . "git://github.com/zenspider/benchmark-ips-racket") (tags . ("benchmarking" "performance")) (versions . #hash((default . #hasheq((checksum . "264e756c409f52020462901ee1f5059c9fe674eb") (source . "git://github.com/zenspider/benchmark-ips-racket") (source_url . "http://github.com/zenspider/benchmark-ips-racket/tree/master"))))))) ("bencode" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bencode" "doc/bencode@bencode/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bencode.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bencode.txt"))) (checksum . "676a8979ef85eefd1373c2afb91649a22ae98c93") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "BitTorrent Bencode Decoding") (implies . ()) (last-checked . 1632902858) (last-edit . 1456638265) (last-updated . 1502812280) (modules . ((lib "bencode/bencode.scrbl") (lib "bencode/main.rkt"))) (name . "bencode") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (bittorrent . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/bencode.zip") (tags . ("bittorrent")) (versions . #hash((default . #hasheq((checksum . "676a8979ef85eefd1373c2afb91649a22ae98c93") (source . "http://www.neilvandyke.org/racket/bencode.zip") (source_url . "http://www.neilvandyke.org/racket/bencode.zip"))))))) ("bencode-codec" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bencode-codec" "doc/bencode-codec@bencode-codec/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bencode-codec.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bencode-codec.txt"))) (checksum . "cf4161c67e0a6f3f25fa162b9f61a3460b4ce445") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Library for reading and writing Bencoded data.") (implies . ()) (last-checked . 1632902860) (last-edit . 1471272645) (last-updated . 1520538802) (modules . ((lib "bencode-codec/bencode-codec.scrbl") (lib "bencode-codec/test-bencode.rkt") (lib "bencode-codec/dump.rkt") (lib "bencode-codec/bencode.rkt") (lib "bencode-codec/main.rkt"))) (name . "bencode-codec") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tonygarnockjones@gmail.com . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/racket-bencode") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "cf4161c67e0a6f3f25fa162b9f61a3460b4ce445") (source . "git://github.com/tonyg/racket-bencode") (source_url . "http://github.com/tonyg/racket-bencode/tree/master"))))))) ("berkeley" . #hasheq((author . "guoguo12@gmail.com") (authors . ("guoguo12@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/berkeley.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "8c9c56d99d9f157a84d94d887143340246da9d73") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Support library for CS 61AS at UC Berkeley (http://cs61as.org).") (implies . ()) (last-checked . 1632902860) (last-edit . 1445417306) (last-updated . 1623838053) (modules . ((lib "berkeley/main.rkt"))) (name . "berkeley") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:guoguo12@gmail.com . #t) (ring:1 . #t))) (source . "http://inst.eecs.berkeley.edu/~cs61as/library/berkeley.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8c9c56d99d9f157a84d94d887143340246da9d73") (source . "http://inst.eecs.berkeley.edu/~cs61as/library/berkeley.zip") (source_url . "http://inst.eecs.berkeley.edu/~cs61as/library/berkeley.zip"))))))) ("biginterval" . #hasheq((author . "oflatt@gmail.com") (authors . ("oflatt@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/biginterval.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/biginterval.txt") (test-failure-log . "server/built/test-fail/biginterval.txt") (test-success-log . #f))) (checksum . "81b0fdb5de11aeaeaf651f9e32c613c4584756ee") (checksum-error . #f) (collection . "biginterval") (conflicts . ()) (date-added . 1606759655) (dependencies . ()) (description . "A racket interface to MPFI, the interval library based on MPFR. http://perso.ens-lyon.fr/nathalie.revol/software.html.\r\nYou should use the package `rival` instead of this.") (implies . ()) (last-checked . 1632902860) (last-edit . 1606759655) (last-updated . 1606759655) (modules . ((lib "biginterval/main.rkt"))) (name . "biginterval") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:oflatt@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/oflatt/biginterval.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "81b0fdb5de11aeaeaf651f9e32c613c4584756ee") (source . "https://github.com/oflatt/biginterval.git") (source_url . "https://github.com/oflatt/biginterval.git"))))))) ("binary-class" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "binary-class" "doc/binary-class@binary-class/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binary-class.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binary-class.txt"))) (checksum . "69705ed306be38c9e4dd67d9075ec160ecdb82a4") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Classes for writing and reading binary data") (implies . ()) (last-checked . 1632902861) (last-edit . 1407001953) (last-updated . 1502812281) (modules . ((lib "binary-class/syntax.rkt") (lib "binary-class/string.rkt") (lib "binary-class/base.rkt") (lib "binary-class/contract.rkt") (lib "binary-class/manual.scrbl") (lib "binary-class/common.rkt") (lib "binary-class/private/base.rkt") (lib "binary-class/main.rkt"))) (name . "binary-class") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (io . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "git://github.com/Kalimehtar/binary-class") (tags . ("io" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "69705ed306be38c9e4dd67d9075ec160ecdb82a4") (source . "git://github.com/Kalimehtar/binary-class") (source_url . "http://github.com/Kalimehtar/binary-class/tree/master"))))))) ("binary-class-dbf" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binary-class-dbf.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binary-class-dbf.txt"))) (checksum . "751ed1b7e44f6894d7bdc468727bfc854677338b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("binary-class" "base" "fast-convert")) (description . "Interface to *.dbf files (dBase, Foxpro, ...)") (implies . ()) (last-checked . 1632902861) (last-edit . 1404276243) (last-updated . 1502812281) (modules . ((lib "binary-class/dbf.rkt") (lib "binary-class/dbf.scrbl"))) (name . "binary-class-dbf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:kalimehtar@mail.ru . #t) (db . #t) (io . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "git://github.com/Kalimehtar/binary-class-dbf") (tags . ("db" "io" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "751ed1b7e44f6894d7bdc468727bfc854677338b") (source . "git://github.com/Kalimehtar/binary-class-dbf") (source_url . "http://github.com/Kalimehtar/binary-class-dbf/tree/master"))))))) ("binary-class-exif" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binary-class-exif.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binary-class-exif.txt"))) (checksum . "8d475c4dd72de90decedeb3fc0acd53d9cf6f60d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("binary-class" "base")) (description . "Class for reading and writing Exif in JPEG or TIFF") (implies . ()) (last-checked . 1632902861) (last-edit . 1404281488) (last-updated . 1502812282) (modules . ((lib "binary-class/exif.rkt"))) (name . "binary-class-exif") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:kalimehtar@mail.ru . #t) (io . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "git://github.com/Kalimehtar/binary-class-exif") (tags . ("io" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "8d475c4dd72de90decedeb3fc0acd53d9cf6f60d") (source . "git://github.com/Kalimehtar/binary-class-exif") (source_url . "http://github.com/Kalimehtar/binary-class-exif/tree/master"))))))) ("binary-class-mp3" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "binary-class-mp3" "doc/binary-class-mp3@binary-class-mp3/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binary-class-mp3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binary-class-mp3.txt"))) (checksum . "bc10152d1bc6cd1ed7be7bec0e8d3f1ae0bf7977") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("binary-class" "base" "scribble-lib" "racket-doc")) (description . "MP3 ID3v2.1 and ID3v2.2 tags parser") (implies . ()) (last-checked . 1632902861) (last-edit . 1402276385) (last-updated . 1502812282) (modules . ((lib "binary-class/mp3.rkt") (lib "binary-class/manual-mp3.scrbl"))) (name . "binary-class-mp3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (io . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "git://github.com/Kalimehtar/binary-class-mp3") (tags . ("io" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "bc10152d1bc6cd1ed7be7bec0e8d3f1ae0bf7977") (source . "git://github.com/Kalimehtar/binary-class-mp3") (source_url . "http://github.com/Kalimehtar/binary-class-mp3/tree/master"))))))) ("binary-class-riff" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "binary-class-riff" "doc/binary-class-riff@binary-class-riff/index.html") ("main" "binary-class-wave" "doc/binary-class-wave@binary-class-riff/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binary-class-riff.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binary-class-riff.txt"))) (checksum . "ddad0c7fa1e1f7a3b990809bcccbd521204e2fd0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "binary-class" "racket-doc" "scribble-lib")) (description . "Classes for reading and writing RIFF files") (implies . ()) (last-checked . 1632902861) (last-edit . 1508498929) (last-updated . 1599362703) (modules . ((lib "binary-class/wave.rkt") (lib "binary-class/scribblings/wave.scrbl") (lib "binary-class/scribblings/riff.scrbl") (lib "binary-class/riff.rkt"))) (name . "binary-class-riff") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:leo@lwh.jp . #t) (binary-class . #t) (io . #t) (riff . #t) (ring:1 . #t) (wav . #t))) (source . "git://github.com/lwhjp/binary-class-riff") (tags . ("binary-class" "io" "riff" "wav")) (versions . #hash((default . #hasheq((checksum . "ddad0c7fa1e1f7a3b990809bcccbd521204e2fd0") (source . "git://github.com/lwhjp/binary-class-riff") (source_url . "http://github.com/lwhjp/binary-class-riff/tree/master"))))))) ("binary-word" . #hasheq((author . "") (authors . ()) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/binary-word.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Package binary-word is missing a required field: 'source\n  context...:\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (implies . ()) (last-checked . 1632902862) (last-edit . 1632906422) (last-updated . 1621809973) (modules . ()) (name . "binary-word") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (ring:1 . #t))) (source . "") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "") (source_url . ""))))))) ("binaryio" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "binaryio" "doc/binaryio@binaryio/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binaryio.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binaryio.txt"))) (checksum . "0b985cf32b2e90d90ecdc90ebbe669177b9bada2") (checksum-error . #f) (collection . "binaryio") (conflicts . ()) (dependencies . (("base" #:version "6.3") "binaryio-lib" "rackunit-lib" "math-lib" "racket-doc" "scribble-lib")) (description . "functions for reading and writing binary data") (implies . ("binaryio-lib")) (last-checked . 1632902862) (last-edit . 1501165587) (last-updated . 1617885929) (modules . ((lib "binaryio/test/bytes.rkt") (lib "binaryio/binaryio.scrbl") (lib "binaryio/examples/hpack.rkt") (lib "binaryio/test/fixup.rkt") (lib "binaryio/test/float.rkt") (lib "binaryio/test/integer.rkt"))) (name . "binaryio") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (io . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/rmculpepper/binaryio?path=binaryio") (tags . ("io" "net")) (versions . #hash((default . #hasheq((checksum . "0b985cf32b2e90d90ecdc90ebbe669177b9bada2") (source . "git://github.com/rmculpepper/binaryio?path=binaryio") (source_url . "http://github.com/rmculpepper/binaryio/tree/master?path=binaryio"))))))) ("binaryio-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binaryio-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binaryio-lib.txt"))) (checksum . "0b985cf32b2e90d90ecdc90ebbe669177b9bada2") (checksum-error . #f) (collection . "binaryio") (conflicts . ()) (dependencies . ("base")) (description . "functions for reading and writing binary data") (implies . ()) (last-checked . 1632902862) (last-edit . 1501165524) (last-updated . 1617885930) (modules . ((lib "binaryio/reader.rkt") (lib "binaryio/integer.rkt") (lib "binaryio/bytes.rkt") (lib "binaryio/main.rkt") (lib "binaryio/float.rkt") (lib "binaryio/bitport.rkt") (lib "binaryio/unchecked/bitport.rkt") (lib "binaryio/prefixcode.rkt") (lib "binaryio/private/bytes.rkt") (lib "binaryio/fixup-port.rkt") (lib "binaryio/unchecked/integer.rkt") (lib "binaryio/private/float.rkt") (lib "binaryio/unchecked/reader.rkt") (lib "binaryio/unchecked/prefixcode.rkt") (lib "binaryio/unchecked/fixup-port.rkt") (lib "binaryio/unchecked/bitvector.rkt") (lib "binaryio/bitvector.rkt"))) (name . "binaryio-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (io . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/rmculpepper/binaryio?path=binaryio-lib") (tags . ("io" "net")) (versions . #hash((default . #hasheq((checksum . "0b985cf32b2e90d90ecdc90ebbe669177b9bada2") (source . "git://github.com/rmculpepper/binaryio?path=binaryio-lib") (source_url . "http://github.com/rmculpepper/binaryio/tree/master?path=binaryio-lib"))))))) ("binutils" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "binutils" "doc/binutils@binutils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/binutils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/binutils.txt"))) (checksum . "a72ef077e2d00ec776f12c0e497c6517f66dfe16") (checksum-error . #f) (collection . "binutils") (conflicts . ()) (dependencies . ("base" "binary-class" "racket-doc" "scribble-lib")) (description . "Utilities for manipulating machine code object files") (implies . ()) (last-checked . 1632902862) (last-edit . 1507000575) (last-updated . 1614496919) (modules . ((lib "binutils/elf/private/system.rkt") (lib "binutils/private/object.rkt") (lib "binutils/elf/private/params.rkt") (lib "binutils/elf/private/types.rkt") (lib "binutils/elf/private/elf.rkt") (lib "binutils/elf/main.rkt") (lib "binutils/elf.rkt") (lib "binutils/link.rkt") (lib "binutils/elf/private/convert.rkt") (lib "binutils/dynamic.rkt") (lib "binutils/main.rkt") (lib "binutils/base.rkt") (lib "binutils/scribblings/binutils.scrbl"))) (name . "binutils") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:leo@lwh.jp . #t) (binary . #t) (executable . #t) (ring:1 . #t) (unstable . #t))) (source . "git://github.com/lwhjp/racket-binutils") (tags . ("binary" "executable" "unstable")) (versions . #hash((default . #hasheq((checksum . "a72ef077e2d00ec776f12c0e497c6517f66dfe16") (source . "git://github.com/lwhjp/racket-binutils") (source_url . "http://github.com/lwhjp/racket-binutils/tree/master"))))))) ("bip32" . #hasheq((author . "m4burns@uwaterloo.ca marc@kn0x.io") (authors . ("m4burns@uwaterloo.ca" "marc@kn0x.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bip32" "doc/bip32@bip32/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bip32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bip32.txt"))) (checksum . "19f4460abd1f5fdacaa651064c4d8353401294f0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1597691798) (dependencies . ("base" "binaryio" "sha" "crypto" "base58" "ec" "typed-racket-lib" "racket-doc" "rackunit-lib" "scribble-lib" "rackunit-typed")) (description . "Racket implementation of Bitcoin Improvement Proposal 32.") (implies . ()) (last-checked . 1632902862) (last-edit . 1597691798) (last-updated . 1597857905) (modules . ((lib "bip32/bip32.scrbl") (lib "bip32/data.rkt") (lib "bip32/test.rkt") (lib "bip32/path.rkt") (lib "bip32/serialize.rkt") (lib "bip32/typed-binaryio.rkt") (lib "bip32/main.rkt") (lib "bip32/ripemd160.rkt") (lib "bip32/derive.rkt"))) (name . "bip32") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:m4burns@uwaterloo.ca . #t) (author:marc@kn0x.io . #t) (bitcoin . #t) (crypto . #t) (ring:1 . #t))) (source . "https://github.com/marckn0x/bip32.git") (tags . ("bitcoin" "crypto")) (versions . #hash((default . #hasheq((checksum . "19f4460abd1f5fdacaa651064c4d8353401294f0") (source . "https://github.com/marckn0x/bip32.git") (source_url . "https://github.com/marckn0x/bip32.git"))))))) ("bitsyntax" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bitsyntax" "doc/bitsyntax@bitsyntax/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bitsyntax.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bitsyntax.txt"))) (checksum . "fffe0d44e6183d19b5e2b22bf07be4192994243b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc")) (description . "Erlang-like binary pattern-matching and bit string manipulation for Racket.") (implies . ()) (last-checked . 1632902863) (last-edit . 1401490586) (last-updated . 1620835126) (modules . ((lib "bitsyntax/test-typed.rkt") (lib "bitsyntax/scribblings/bitsyntax.scrbl") (lib "bitsyntax/bitmatch.rkt") (lib "bitsyntax/bitstx.rkt") (lib "bitsyntax/test-bitmatch-bitstitch.rkt") (lib "bitsyntax/main.rkt") (lib "bitsyntax/bitstring.rkt") (lib "bitsyntax/bitstitch.rkt"))) (name . "bitsyntax") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tonygarnockjones@gmail.com . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/racket-bitsyntax") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "fffe0d44e6183d19b5e2b22bf07be4192994243b") (source . "git://github.com/tonyg/racket-bitsyntax") (source_url . "http://github.com/tonyg/racket-bitsyntax/tree/master"))))))) ("bloggy" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bloggy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bloggy.txt"))) (checksum . "d189325911f28fdfd9b8d7ae64225838d6400596") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "A very simple Racket blog system") (implies . ()) (last-checked . 1632902863) (last-edit . 1357059788) (last-updated . 1502812283) (modules . ((lib "bloggy/main.rkt"))) (name . "bloggy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app . #t) (author:jay.mccarthy@gmail.com . #t) (blog . #t) (ring:1 . #t) (web . #t))) (source . "github://github.com/jeapostrophe/bloggy/master") (tags . ("app" "blog" "web")) (versions . #hash((default . #hasheq((checksum . "d189325911f28fdfd9b8d7ae64225838d6400596") (source . "github://github.com/jeapostrophe/bloggy/master") (source_url . "http://github.com/jeapostrophe/bloggy/tree/master"))))))) ("bluetooth-socket" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bluetooth-socket" "doc/bluetooth-socket@bluetooth-socket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bluetooth-socket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bluetooth-socket.txt"))) (checksum . "bd48368028d2b0e69ba96399d2771d163d40cf46") (checksum-error . #f) (collection . "bluetooth-socket") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Racket impl of FFI RAW, AF_BLUETOOTH BTPROTO_HCI socket for Linux.\r\nAllows for communicating to a Bluetooth Controller (hciX) via HCI\r\npackets per the Bluetooth Specification.") (implies . ()) (last-checked . 1632902863) (last-edit . 1528206831) (last-updated . 1620468294) (modules . ((lib "bluetooth-socket/socket/bt-socket-ffi.rkt") (lib "bluetooth-socket/socket/hci-socket.rkt") (lib "bluetooth-socket/main.rkt") (lib "bluetooth-socket/socket/stats.rkt") (lib "bluetooth-socket/scribblings/bluetooth-socket.scrbl"))) (name . "bluetooth-socket") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (bluetooth . #t) (ring:1 . #t) (socket . #t))) (source . "https://gitlab.com/RayRacine/bluetooth-socket.git") (tags . ("bluetooth" "socket")) (versions . #hash((default . #hasheq((checksum . "bd48368028d2b0e69ba96399d2771d163d40cf46") (source . "https://gitlab.com/RayRacine/bluetooth-socket.git") (source_url . "https://gitlab.com/RayRacine/bluetooth-socket.git"))))))) ("bnf" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bnf.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bnf.txt"))) (checksum . "8b1e995e41cdaf87163c9697b35eea81111d9c35") (checksum-error . #f) (collection . "bnf") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "typed-struct-props")) (description . "Concise Typed Racket syntax for declaring recursive data in BNF") (implies . ()) (last-checked . 1632902863) (last-edit . 1492834505) (last-updated . 1544906451) (modules . ((lib "bnf/tests.rkt") (lib "bnf/main.rkt"))) (name . "bnf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pcn@cs.umd.edu . #t) (bnf . #t) (data . #t) (grammar . #t) (ring:1 . #t) (typed-racket . #t))) (source . "git://github.com/philnguyen/bnf?path=bnf") (tags . ("bnf" "data" "grammar" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "8b1e995e41cdaf87163c9697b35eea81111d9c35") (source . "git://github.com/philnguyen/bnf?path=bnf") (source_url . "http://github.com/philnguyen/bnf/tree/master?path=bnf"))))))) ("boincrpc" . #hasheq((author . "parnikkapore+rktp@disroot.org") (authors . ("parnikkapore+rktp@disroot.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "boincrpc" "doc/boincrpc@boincrpc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/boincrpc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/boincrpc.txt"))) (checksum . "f05dc275c2dac7196b65058f26af9ca9e074aef6") (checksum-error . #f) (collection . "boincrpc") (conflicts . ()) (date-added . 1624433235) (dependencies . ("base" "libquiche" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Thin (but maybe soon to be thicker) abstraction layer for using BOINC’s RPC on Racket") (implies . ()) (last-checked . 1632902863) (last-edit . 1624433235) (last-updated . 1624640858) (modules . ((lib "boincrpc/main.rkt") (lib "boincrpc/scribblings/boincrpc.scrbl"))) (name . "boincrpc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:parnikkapore+rktp@disroot.org . #t) (boinc . #t) (ring:1 . #t))) (source . "https://github.com/parnikkapore/rkt-boincrpc.git") (tags . ("boinc")) (versions . #hash((default . #hasheq((checksum . "f05dc275c2dac7196b65058f26af9ca9e074aef6") (source . "https://github.com/parnikkapore/rkt-boincrpc.git") (source_url . "https://github.com/parnikkapore/rkt-boincrpc.git"))))))) ("bookcover" . #hasheq((author . "joel@jdueck.net") (authors . ("joel@jdueck.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bookcover" "doc/bookcover@bookcover/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bookcover.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bookcover.txt"))) (checksum . "824cdc44d35cc2c418074e4eaf12bbb0e516342f") (checksum-error . #f) (collection . "bookcover") (conflicts . ()) (dependencies . ("base" "beautiful-racket-lib" "draw-lib" "pict-lib" "draw-doc" "pict-doc" "racket-doc" "rackunit-lib" "scribble-lib" "slideshow-doc")) (description . "A language/library for creating PDF files suitable for use as printed book covers.") (implies . ()) (last-checked . 1632902864) (last-edit . 1523368979) (last-updated . 1553464964) (modules . ((lib "bookcover/scribblings/bookcover.scrbl") (lib "bookcover/main.rkt") (lib "bookcover/scribblings/module-reference.scrbl") (lib "bookcover/scribblings/overview.scrbl") (lib "bookcover/scribblings/example-cover.rkt") (lib "bookcover/scribblings/appendix.scrbl") (lib "bookcover/draw.rkt"))) (name . "bookcover") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:joel@jdueck.net . #t) (books . #t) (pdf . #t) (ring:1 . #t) (self-publishing . #t))) (source . "https://github.com/otherjoel/bookcover.git") (tags . ("books" "pdf" "self-publishing")) (versions . #hash((default . #hasheq((checksum . "824cdc44d35cc2c418074e4eaf12bbb0e516342f") (source . "https://github.com/otherjoel/bookcover.git") (source_url . "https://github.com/otherjoel/bookcover.git"))))))) ("box-extra" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "box-extra" "doc/box-extra@box-extra/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/box-extra.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/box-extra.txt"))) (checksum . "b3981952cbf1b3004101dd82693bf41dc3006034") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1627209265) (dependencies . ("base" "racket-doc" "box-extra-lib" "rackunit-lib" "scribble-lib")) (description . "Extra utilities for working with boxes in Racket.") (implies . ()) (last-checked . 1632902864) (last-edit . 1627214621) (last-updated . 1627214621) (modules . ((lib "box-extra/scribblings/box-extra.scrbl") (lib "tests/box-extra/main.rkt"))) (name . "box-extra") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (boxes . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-box-extra.git?path=box-extra") (tags . ("boxes")) (versions . #hash((default . #hasheq((checksum . "b3981952cbf1b3004101dd82693bf41dc3006034") (source . "https://github.com/Bogdanp/racket-box-extra.git?path=box-extra") (source_url . "https://github.com/Bogdanp/racket-box-extra.git?path=box-extra"))))))) ("box-extra-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/box-extra-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/box-extra-lib.txt"))) (checksum . "b3981952cbf1b3004101dd82693bf41dc3006034") (checksum-error . #f) (collection . "box-extra") (conflicts . ()) (date-added . 1627209237) (dependencies . ("base")) (description . "Extra utilities for working with boxes. (implementation)") (implies . ()) (last-checked . 1632902864) (last-edit . 1627209237) (last-updated . 1627214819) (modules . ((lib "box-extra/main.rkt") (lib "box-extra/unsafe.rkt"))) (name . "box-extra-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (boxes . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-box-extra.git?path=box-extra-lib") (tags . ("boxes")) (versions . #hash((default . #hasheq((checksum . "b3981952cbf1b3004101dd82693bf41dc3006034") (source . "https://github.com/Bogdanp/racket-box-extra.git?path=box-extra-lib") (source_url . "https://github.com/Bogdanp/racket-box-extra.git?path=box-extra-lib"))))))) ("bozeman" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/bozeman.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "178eb500a6c3595d96e5da5767f91c54e82631a4") (checksum-error . #f) (collection . (multi)) (conflicts . ("bozeman-doc" "bozeman-lib" "bozeman-test")) (date-added . 1625080244) (dependencies . ("bozeman-lib" "bozeman-docs")) (description . "XSLT (Extensible Stylesheet Language Transformations) for Racket") (implies . ("bozeman-lib" "bozeman-docs")) (last-checked . 1632902864) (last-edit . 1625804455) (last-updated . 1625805607) (modules . ((lib "bozeman-doc/bozeman.scrbl"))) (name . "bozeman") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (author:jesse@serverracket.com . #t) (ring:1 . #t) (xml . #t))) (source . "https://github.com/jessealama/bozeman.git") (tags . ("xml")) (versions . #hash((default . #hasheq((checksum . "178eb500a6c3595d96e5da5767f91c54e82631a4") (source . "https://github.com/jessealama/bozeman.git") (source_url . "https://github.com/jessealama/bozeman.git"))))))) ("bozeman-doc" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/bozeman-doc.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "178eb500a6c3595d96e5da5767f91c54e82631a4") (checksum-error . #f) (collection . (multi)) (conflicts . ("bozeman" "bozeman-lib" "bozeman-test")) (date-added . 1625080354) (dependencies . ("bozeman-lib" "bozeman-docs")) (description . "Documentation for Bozeman") (implies . ("bozeman-lib" "bozeman-docs")) (last-checked . 1632902864) (last-edit . 1625804484) (last-updated . 1625805607) (modules . ((lib "bozeman-doc/bozeman.scrbl"))) (name . "bozeman-doc") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (author:jesse@serverracket.com . #t) (docs . #t) (ring:1 . #t) (xml . #t))) (source . "https://github.com/jessealama/bozeman.git") (tags . ("docs" "xml")) (versions . #hash((default . #hasheq((checksum . "178eb500a6c3595d96e5da5767f91c54e82631a4") (source . "https://github.com/jessealama/bozeman.git") (source_url . "https://github.com/jessealama/bozeman.git"))))))) ("bozeman-lib" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/bozeman-lib.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "178eb500a6c3595d96e5da5767f91c54e82631a4") (checksum-error . #f) (collection . (multi)) (conflicts . ("bozeman" "bozeman-doc" "bozeman-test")) (date-added . 1625080285) (dependencies . ("bozeman-lib" "bozeman-docs")) (description . "Implementation for Bozeman") (implies . ("bozeman-lib" "bozeman-docs")) (last-checked . 1632902865) (last-edit . 1625804527) (last-updated . 1625805608) (modules . ((lib "bozeman-doc/bozeman.scrbl"))) (name . "bozeman-lib") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (author:jesse@serverracket.com . #t) (ring:1 . #t) (xml . #t))) (source . "https://github.com/jessealama/bozeman.git") (tags . ("xml")) (versions . #hash((default . #hasheq((checksum . "178eb500a6c3595d96e5da5767f91c54e82631a4") (source . "https://github.com/jessealama/bozeman.git") (source_url . "https://github.com/jessealama/bozeman.git"))))))) ("bozeman-test" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/bozeman-test.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "178eb500a6c3595d96e5da5767f91c54e82631a4") (checksum-error . #f) (collection . (multi)) (conflicts . ("bozeman" "bozeman-doc" "bozeman-lib")) (date-added . 1625080321) (dependencies . ("bozeman-lib" "bozeman-docs")) (description . "Tests for Bozeman") (implies . ("bozeman-lib" "bozeman-docs")) (last-checked . 1632902865) (last-edit . 1625804558) (last-updated . 1625805609) (modules . ((lib "bozeman-doc/bozeman.scrbl"))) (name . "bozeman-test") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (author:jesse@serverracket.com . #t) (ring:1 . #t) (tests . #t) (xml . #t))) (source . "https://github.com/jessealama/bozeman.git") (tags . ("tests" "xml")) (versions . #hash((default . #hasheq((checksum . "178eb500a6c3595d96e5da5767f91c54e82631a4") (source . "https://github.com/jessealama/bozeman.git") (source_url . "https://github.com/jessealama/bozeman.git"))))))) ("br-parser-tools" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/br-parser-tools.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/br-parser-tools.txt"))) (checksum . "9b2d7cc759b40fd556a398e181ca0fd070885904") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("br-parser-tools-lib" "br-parser-tools-doc")) (description . "fork of `parser-tools` with some modernizations & improvements. Backward compatible with `parser-tools`.") (implies . ("br-parser-tools-lib" "br-parser-tools-doc")) (last-checked . 1632902865) (last-edit . 1529863153) (last-updated . 1621360768) (modules . ()) (name . "br-parser-tools") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mb@mbtype.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/br-parser-tools.git?path=br-parser-tools") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "9b2d7cc759b40fd556a398e181ca0fd070885904") (source . "https://github.com/mbutterick/br-parser-tools.git?path=br-parser-tools") (source_url . "https://github.com/mbutterick/br-parser-tools.git?path=br-parser-tools"))))))) ("br-parser-tools-doc" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "br-parser-tools" "doc/br-parser-tools@br-parser-tools-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/br-parser-tools-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/br-parser-tools-doc.txt"))) (checksum . "9b2d7cc759b40fd556a398e181ca0fd070885904") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661355) (dependencies . ("base" "scheme-lib" "racket-doc" "syntax-color-doc" "br-parser-tools-lib" "scribble-lib")) (description . "fork of `parser-tools-doc` for Beautiful Racket") (implies . ()) (last-checked . 1632902865) (last-edit . 1556661445) (last-updated . 1621360769) (modules . ((lib "br-parser-tools/br-parser-tools.scrbl"))) (name . "br-parser-tools-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (beautiful-racket . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/br-parser-tools.git?path=br-parser-tools-doc") (tags . ("beautiful-racket")) (versions . #hash((default . #hasheq((checksum . "9b2d7cc759b40fd556a398e181ca0fd070885904") (source . "https://github.com/mbutterick/br-parser-tools.git?path=br-parser-tools-doc") (source_url . "https://github.com/mbutterick/br-parser-tools.git?path=br-parser-tools-doc"))))))) ("br-parser-tools-lib" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/br-parser-tools-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/br-parser-tools-lib.txt"))) (checksum . "9b2d7cc759b40fd556a398e181ca0fd070885904") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661362) (dependencies . ("scheme-lib" "base" "compatibility-lib" "rackunit-lib")) (description . "fork of `parser-tools-lib` for Beautiful Racket") (implies . ()) (last-checked . 1632902865) (last-edit . 1556661462) (last-updated . 1621360770) (modules . ((lib "br-parser-tools/private-yacc/parser-builder.rkt") (lib "br-parser-tools/yacc.rkt") (lib "br-parser-tools/private-lex/front.rkt") (lib "br-parser-tools/private-yacc/lalr.rkt") (lib "br-parser-tools/private-lex/util.rkt") (lib "br-parser-tools/private-yacc/parser-actions.rkt") (lib "br-parser-tools/private-lex/actions.rkt") (lib "br-parser-tools/private-yacc/table.rkt") (lib "br-parser-tools/cfg-parser.rkt") (lib "br-parser-tools/private-lex/token.rkt") (lib "br-parser-tools/private-lex/token-syntax.rkt") (lib "br-parser-tools/private-yacc/graph.rkt") (lib "br-parser-tools/private-lex/error-tests.rkt") (lib "br-parser-tools/private-lex/stx.rkt") (lib "br-parser-tools/private-yacc/grammar.rkt") (lib "br-parser-tools/lex-sre.rkt") (lib "br-parser-tools/private-lex/deriv.rkt") (lib "br-parser-tools/private-yacc/lr0.rkt") (lib "br-parser-tools/private-lex/re.rkt") (lib "br-parser-tools/lex.rkt") (lib "br-parser-tools/private-yacc/yacc-helper.rkt") (lib "br-parser-tools/private-yacc/input-file-parser.rkt") (lib "br-parser-tools/yacc-to-scheme.rkt") (lib "br-parser-tools/examples/calc.rkt") (lib "br-parser-tools/examples/read.rkt") (lib "br-parser-tools/lex-plt-v200.rkt") (lib "br-parser-tools/private-lex/unicode-chars.rkt"))) (name . "br-parser-tools-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mb@mbtype.com . #t) (beautiful-racket . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/br-parser-tools.git?path=br-parser-tools-lib") (tags . ("beautiful-racket")) (versions . #hash((default . #hasheq((checksum . "9b2d7cc759b40fd556a398e181ca0fd070885904") (source . "https://github.com/mbutterick/br-parser-tools.git?path=br-parser-tools-lib") (source_url . "https://github.com/mbutterick/br-parser-tools.git?path=br-parser-tools-lib"))))))) ("brag" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "brag" "doc/brag@brag/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/brag.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/brag.txt"))) (checksum . "d3405dd0abfcf221fc968dd8bec9cdba77d53f0a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556829038) (dependencies . (("base" #:version "6.3") "brag-lib" "at-exp-lib" "br-parser-tools-doc" "racket-doc" "scribble-lib")) (description . "Modernized & improved version of `ragg` language that generates a parser from a BNF grammar") (implies . ("brag-lib")) (last-checked . 1632902866) (last-edit . 1556829042) (last-updated . 1621353520) (modules . ((lib "brag/brag.scrbl"))) (name . "brag") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/brag.git?path=brag") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "d3405dd0abfcf221fc968dd8bec9cdba77d53f0a") (source . "https://github.com/mbutterick/brag.git?path=brag") (source_url . "https://github.com/mbutterick/brag.git?path=brag"))))))) ("brag-lib" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/brag-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/brag-lib.txt"))) (checksum . "d3405dd0abfcf221fc968dd8bec9cdba77d53f0a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556803657) (dependencies . (("base" #:version "6.3") "br-parser-tools-lib" "rackunit-lib")) (description . "") (implies . ("br-parser-tools-lib")) (last-checked . 1632902866) (last-edit . 1556803670) (last-updated . 1621353521) (modules . ((lib "brag/examples/nested-word-list.rkt") (lib "brag/examples/cutter-another.rkt") (lib "brag/examples/simple-line-drawing/grammar.rkt") (lib "brag/examples/lua-parser.rkt") (lib "brag/examples/quotation-marks-and-backslashes.rkt") (lib "brag/rules/rule-structs.rkt") (lib "brag/test/test-01-equal.rkt") (lib "brag/examples/0n1n.rkt") (lib "brag/test/test-0n1n.rkt") (lib "brag/private/colorer.rkt") (lib "brag/examples/simple-line-drawing/semantics.rkt") (lib "brag/test/test-hide-and-splice.rkt") (lib "brag/test/test-wordy.rkt") (lib "brag/test/test-nested-repeats.rkt") (lib "brag/test/test-quotation-marks-and-backslashes.rkt") (lib "brag/test/test-top-level-cut.rkt") (lib "brag/examples/wordy.rkt") (lib "brag/examples/add-mult.rkt") (lib "brag/test/test-simple-line-drawing.rkt") (lib "brag/test/test-errors.rkt") (lib "brag/test/test-cutter.rkt") (lib "brag/rules/lexer.rkt") (lib "brag/examples/whitespace.rkt") (lib "brag/test/test-parser.rkt") (lib "brag/test/test-curly-quantifier.rkt") (lib "brag/examples/top-level-cut-2.rkt") (lib "brag/test/test-empty-symbol.rkt") (lib "brag/examples/start-and-atok.rkt") (lib "brag/test/weird-grammar.rkt") (lib "brag/codegen/satisfaction.rkt") (lib "brag/codegen/flatten.rkt") (lib "brag/support.rkt") (lib "brag/private/internal-support.rkt") (lib "brag/codegen/reader.rkt") (lib "brag/codegen/runtime.rkt") (lib "brag/examples/simple-line-drawing/interpret.rkt") (lib "brag/examples/baby-json-hider.rkt") (lib "brag/examples/empty-symbol.rkt") (lib "brag/rules/parser.rkt") (lib "brag/rules/stx.rkt") (lib "brag/test/test-cutter-another.rkt") (lib "brag/codegen/codegen.rkt") (lib "brag/test/test-baby-json-hider.rkt") (lib "brag/test/test-simple-arithmetic-grammar.rkt") (lib "brag/test/test-old-token.rkt") (lib "brag/test/test-all.rkt") (lib "brag/examples/top-level-cut-1.rkt") (lib "brag/test/test-start-and-atok.rkt") (lib "brag/examples/cutter.rkt") (lib "brag/test/test-0n1.rkt") (lib "brag/private/indenter.rkt") (lib "brag/examples/simple-arithmetic-grammar.rkt") (lib "brag/examples/01-equal.rkt") (lib "brag/test/test-lexer.rkt") (lib "brag/examples/0n1.rkt") (lib "brag/examples/top-level-cut-3.rkt") (lib "brag/codegen/expander.rkt") (lib "brag/rules/stx-types.rkt") (lib "brag/examples/simple-line-drawing/examples/letter-i.rkt") (lib "brag/examples/statlist-grammar.rkt") (lib "brag/examples/curly-quantifier.rkt") (lib "brag/examples/hide-and-splice.rkt") (lib "brag/examples/simple-line-drawing.rkt") (lib "brag/examples/bnf.rkt") (lib "brag/test/test-weird-grammar.rkt") (lib "brag/examples/baby-json.rkt") (lib "brag/examples/simple-line-drawing/lang/reader.rkt") (lib "brag/examples/baby-json-alt.rkt") (lib "brag/examples/simple-line-drawing/lexer.rkt") (lib "brag/examples/baby-json-alt2.rkt") (lib "brag/test/test-baby-json.rkt") (lib "brag/test/test-flatten.rkt") (lib "brag/test/test-whitespace.rkt") (lib "brag/main.rkt") (lib "brag/examples/nested-repeats.rkt"))) (name . "brag-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:mb@mbtype.com . #t) (lib . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/brag.git?path=brag-lib") (tags . ("lib")) (versions . #hash((default . #hasheq((checksum . "d3405dd0abfcf221fc968dd8bec9cdba77d53f0a") (source . "https://github.com/mbutterick/brag.git?path=brag-lib") (source_url . "https://github.com/mbutterick/brag.git?path=brag-lib"))))))) ("brazilian-law" . #hasheq((author . "bcclaro+racket@gmail.com") (authors . ("bcclaro+racket@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "brazilian-law-parser" "doc/brazilian-law-parser@brazilian-law/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/brazilian-law.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/brazilian-law.txt"))) (checksum . "912433fd9755e309d7e681fa2c74cff5e692a6d8") (checksum-error . #f) (collection . "brazilian-law-parser") (conflicts . ()) (dependencies . (("base" #:version "6.5") "megaparsack" ("txexpr" #:version "0.2") "curly-fn-lib" "functional-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "definitions for Brazilian laws; also parses them if in suitable plaintext format.") (implies . ()) (last-checked . 1632902866) (last-edit . 1535765125) (last-updated . 1535765125) (modules . ((lib "brazilian-law-parser/parser.rkt") (lib "brazilian-law-parser/scribblings/brazilian-law-parser.scrbl") (lib "brazilian-law-parser/main.rkt") (lib "brazilian-law-parser/brazilian-law.rkt") (lib "brazilian-law-parser/print.rkt"))) (name . "brazilian-law") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:bcclaro+racket@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/OAB-exams/brazilian-law-parser.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "912433fd9755e309d7e681fa2c74cff5e692a6d8") (source . "https://github.com/OAB-exams/brazilian-law-parser.git") (source_url . "https://github.com/OAB-exams/brazilian-law-parser.git"))))))) ("brick-snip" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/brick-snip.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e3653cac8500883e91feefd6462cb413751d0c16") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("racket-bricks")) (description . "Part of the racket-bricks toolset (https://youtu.be/yJt0kKE9YxQ)\r\n\r\nThis is the cut-and-pasteable snip that encapsulates bricks that are embedded in a DrRacket program.") (implies . ()) (last-checked . 1632902866) (last-edit . 1525210698) (last-updated . 1539987149) (modules . ((lib "brick-snip/wxme-brick-snip.rkt") (lib "brick-snip/main.rkt"))) (name . "brick-snip") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/racket-blocks.git?path=brick-snip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e3653cac8500883e91feefd6462cb413751d0c16") (source . "https://github.com/thoughtstem/racket-blocks.git?path=brick-snip") (source_url . "https://github.com/thoughtstem/racket-blocks.git?path=brick-snip"))))))) ("brick-tool" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/brick-tool.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e3653cac8500883e91feefd6462cb413751d0c16") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("racket-bricks" "brick-snip")) (description . "Part of the racket-bricks toolset (https://youtu.be/yJt0kKE9YxQ)\r\n\r\nThis adds a button to the toolbar in DrRacket.  The button adds a new brick-snip at your cursor's position.  ") (implies . ()) (last-checked . 1632902867) (last-edit . 1525210683) (last-updated . 1539987149) (modules . ((lib "brick-tool/tool.rkt"))) (name . "brick-tool") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/racket-blocks.git?path=brick-tool") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e3653cac8500883e91feefd6462cb413751d0c16") (source . "https://github.com/thoughtstem/racket-blocks.git?path=brick-tool") (source_url . "https://github.com/thoughtstem/racket-blocks.git?path=brick-tool"))))))) ("brush" . #hasheq((author . "david@davidchristiansen.dk") (authors . ("david@davidchristiansen.dk")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "brush" "doc/brush@brush/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/brush.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/brush.txt"))) (checksum . "91b83cda313f77f2068f0c02753c55c2563680d5") (checksum-error . #f) (collection . "brush") (conflicts . ()) (dependencies . ("base" "scribble" "at-exp-lib" "scribble-lib" "racket-doc")) (description . "A semi-literate programming package for Scribble") (implies . ()) (last-checked . 1632902868) (last-edit . 1509742249) (last-updated . 1510218058) (modules . ((lib "brush/lp/lang/common.rkt") (lib "brush/main.rkt") (lib "brush/scribblings/brush.scrbl") (lib "brush/lp/lang/lang2.rkt") (lib "brush/private/lp.rkt"))) (name . "brush") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david@davidchristiansen.dk . #t) (literate-programming . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/david-christiansen/brush.git") (tags . ("literate-programming" "scribble")) (versions . #hash((default . #hasheq((checksum . "91b83cda313f77f2068f0c02753c55c2563680d5") (source . "https://github.com/david-christiansen/brush.git") (source_url . "https://github.com/david-christiansen/brush.git"))))))) ("bs" . #hasheq((author . "oldsin@live.com") (authors . ("oldsin@live.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/bs.txt") (docs . (("main" "bs" "doc/bs@bs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bs.txt"))) (checksum . "0a88ed7217076a6286fdaef0183bea596149991b") (checksum-error . #f) (collection . "bs") (conflicts . ()) (date-added . 1552568058) (dependencies . ("base" "brag" "crypto-lib" "parser-tools-lib" "rackunit-lib" "scribble-lib")) (description . "A Bitcoin Script Implementation for testing Script riddles.") (implies . ()) (last-checked . 1632902868) (last-edit . 1553726083) (last-updated . 1553731363) (modules . ((lib "bs/main.rkt") (lib "bs/parser.rkt") (lib "bs/color-lexer.rkt") (lib "bs/display.rkt") (lib "bs/scribblings/bs.scrbl") (lib "bs/lexer.rkt") (lib "bs/utils.rkt") (lib "bs/expander.rkt") (lib "bs/parser-test.rkt") (lib "bs/setup.rkt") (lib "bs/reader.rkt") (lib "bs/colorer.rkt") (lib "bs/opcodes.rkt") (lib "bs/tokenizer.rkt") (lib "bs/bin.rkt") (lib "bs/structs.rkt"))) (name . "bs") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:oldsin@live.com . #t) (bitcoin . #t) (ring:1 . #t) (script . #t) (scripting . #t))) (source . "https://github.com/oldsin/bs.git") (tags . ("bitcoin" "script" "scripting")) (versions . #hash((default . #hasheq((checksum . "0a88ed7217076a6286fdaef0183bea596149991b") (source . "https://github.com/oldsin/bs.git") (source_url . "https://github.com/oldsin/bs.git"))))))) ("bsd-sysv-checksum" . #hasheq((author . "davidwil@posteo.de") (authors . ("davidwil@posteo.de")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "bsd-sysv-checksum" "doc/bsd-sysv-checksum@bsd-sysv-checksum/index.html"))) (failure-log . "server/built/fail/bsd-sysv-checksum.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "b4c5dcf2c24d56bcd5eef2e3885458eaf6f164d4") (checksum-error . #f) (collection . "bsd-sysv-checksum") (conflicts . ()) (date-added . 1601848967) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Allows for calculation of BSD and System V checksums of files. Uses code from GNU Coreutils and gnulib.") (implies . ()) (last-checked . 1632902869) (last-edit . 1601848967) (last-updated . 1601848967) (modules . ((lib "bsd-sysv-checksum/scribblings/bsd-sysv-checksum.scrbl") (lib "bsd-sysv-checksum/main.rkt") (lib "bsd-sysv-checksum/private/install.rkt"))) (name . "bsd-sysv-checksum") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:davidwil@posteo.de . #t) (checksum . #t) (gnu . #t) (ring:1 . #t))) (source . "https://github.com/jeroanan/bsd-sysv-checksum.git") (tags . ("checksum" "gnu")) (versions . #hash((default . #hasheq((checksum . "b4c5dcf2c24d56bcd5eef2e3885458eaf6f164d4") (source . "https://github.com/jeroanan/bsd-sysv-checksum.git") (source_url . "https://github.com/jeroanan/bsd-sysv-checksum.git"))))))) ("buid" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "buid" "doc/buid@buid/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/buid.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/buid.txt"))) (checksum . "91002917ebbe4e5d6ed06233a3fcadc5d396de15") (checksum-error . #f) (collection . "buid") (conflicts . ()) (date-added . 1586085986) (dependencies . ("base" "racket-doc" "rackcheck" "rackunit-lib" "scribble-lib")) (description . "Universally unique, lexicographically-sortable flake ids for Racket.") (implies . ()) (last-checked . 1632902869) (last-edit . 1586085986) (last-updated . 1630919234) (modules . ((lib "buid/private/base62.rkt") (lib "buid/main.rkt") (lib "buid/buid.scrbl"))) (name . "buid") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (flake-id . #t) (ring:1 . #t) (uuid . #t))) (source . "https://github.com/Bogdanp/racket-buid.git") (tags . ("flake-id" "uuid")) (versions . #hash((default . #hasheq((checksum . "91002917ebbe4e5d6ed06233a3fcadc5d396de15") (source . "https://github.com/Bogdanp/racket-buid.git") (source_url . "https://github.com/Bogdanp/racket-buid.git"))))))) ("bv" . #hasheq((author . "pmatos@linki.tools") (authors . ("pmatos@linki.tools")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bv" "doc/bv@bv/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bv.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bv.txt"))) (checksum . "3d1fdc02432dc7bb839802f499834bd3345e54bf") (checksum-error . #f) (collection . "bv") (conflicts . ()) (date-added . 1578585000) (dependencies . ("base" "mischief" "math-lib" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib" "quickcheck" "rosette")) (description . "Bitvectors for Racket a-la Rosette") (implies . ()) (last-checked . 1632902869) (last-edit . 1578585000) (last-updated . 1590821192) (modules . ((lib "bv/private/bv.rkt") (lib "bv/scribblings/bv.scrbl") (lib "bv/main.rkt") (lib "bv/private/bv-utils.rkt"))) (name . "bv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pmatos@linki.tools . #t) (bitvector . #t) (ring:1 . #t) (rosette . #t))) (source . "https://github.com/pmatos/racket-bv.git") (tags . ("bitvector" "rosette")) (versions . #hash((default . #hasheq((checksum . "3d1fdc02432dc7bb839802f499834bd3345e54bf") (source . "https://github.com/pmatos/racket-bv.git") (source_url . "https://github.com/pmatos/racket-bv.git"))))))) ("bystroTeX" . #hasheq((author . "amkhlv@gmail.com") (authors . ("amkhlv@gmail.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . "server/built/deps/bystroTeX.txt") (docs . (("extract" "manual" "doc/manual@bystroTeX/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bystroTeX.txt") (test-failure-log . "server/built/test-fail/bystroTeX.txt") (test-success-log . #f))) (checksum . "912b7f533b44dad627fb126e9ea3978caeb6676a") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "db-lib" "scheme-lib" "scribble-lib" "racket-doc" "rackunit-lib" "scribble-doc" "at-exp-lib")) (description . "A tool for preparing HTML slides with LaTeX formulas, based on Scribble") (implies . ()) (last-checked . 1632902869) (last-edit . 1434482454) (last-updated . 1632809270) (modules . ((lib "bystroTeX/manual.scrbl") (lib "bystroTeX/slides_for-syntax.rkt") (lib "bystroTeX/utils.rkt") (lib "bystroTeX/bystrotex.rkt") (lib "bystroTeX/biblib/autobib.rkt") (lib "bystroTeX/slides.rkt") (lib "bystroTeX/common.rkt") (lib "bystroTeX/biblib/bibtex.rkt") (lib "bystroTeX/xmlconf.rkt") (lib "bystroTeX/bibtex.rkt"))) (name . "bystroTeX") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (LaTeX . #t) (academic . #t) (author:amkhlv@gmail.com . #t) (ring:1 . #t) (slides . #t))) (source . "git://github.com/amkhlv/amkhlv/?path=bystroTeX") (tags . ("academic" "LaTeX" "slides")) (versions . #hash((default . #hasheq((checksum . "912b7f533b44dad627fb126e9ea3978caeb6676a") (source . "git://github.com/amkhlv/amkhlv/?path=bystroTeX") (source_url . "git://github.com/amkhlv/amkhlv/?path=bystroTeX"))))))) ("bzip2" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bzip2" "doc/bzip2@bzip2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/bzip2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/bzip2.txt"))) (checksum . "7ceadc95e6221fd9a46f2b009cfc302117fe7f02") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "bzip2 compression and decompression") (implies . ()) (last-checked . 1632902870) (last-edit . 1456032954) (last-updated . 1502812285) (modules . ((lib "file/bzip2/private/compress.rkt") (lib "file/bzip2.rkt") (lib "file/bzip2/private/decompress.rkt") (lib "file/bzip2/private/sort.rkt") (lib "file/bzip2/private/structs.rkt") (lib "file/scribblings/bzip2.scrbl") (lib "file/bzip2/private/util.rkt") (lib "file/bzip2/private/io.rkt") (lib "file/bzip2/private/crc.rkt") (lib "file/bzip2/private/huffman.rkt"))) (name . "bzip2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (bzip2 . #t) (compression . #t) (decompression . #t) (ring:1 . #t))) (source . "git://github.com/97jaz/racket-bzip2") (tags . ("bzip2" "compression" "decompression")) (versions . #hash((default . #hasheq((checksum . "7ceadc95e6221fd9a46f2b009cfc302117fe7f02") (source . "git://github.com/97jaz/racket-bzip2") (source_url . "http://github.com/97jaz/racket-bzip2/tree/master"))))))) ("c" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "c" "doc/c@c/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/c.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/c.txt"))) (checksum . "c2efa315c13e420e6cf77ba8d5ce1f7eb9dbdc2c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "parser-tools-doc" "racket-doc" "scribble-doc")) (description . "A language level for writing C code in DrRacket.") (implies . ()) (last-checked . 1632902870) (last-edit . 1352332568) (last-updated . 1502812286) (modules . ((lib "c/lang/read.rkt") (lib "c/lang/c.scrbl") (lib "c/lang/main.rkt") (lib "c/lang/runtime.rkt") (lib "c/lang/reader.rkt") (lib "tests/c/lang/order.rkt"))) (name . "c") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (c . #t) (language . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/c/master") (tags . ("c" "language")) (versions . #hash((default . #hasheq((checksum . "c2efa315c13e420e6cf77ba8d5ce1f7eb9dbdc2c") (source . "github://github.com/jeapostrophe/c/master") (source_url . "http://github.com/jeapostrophe/c/tree/master"))))))) ("c-defs" . #hasheq((author . "peblairman@gmail.com") (authors . ("peblairman@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "c-defs" "doc/c-defs@c-defs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/c-defs.txt") (test-failure-log . "server/built/test-fail/c-defs.txt") (test-success-log . #f))) (checksum . "d5b7ba438ccdead8213e96051a205b696e4a8a93") (checksum-error . #f) (collection . "c-defs") (conflicts . ()) (dependencies . ("base" "sandbox-lib" "scribble-lib")) (description . "Simple C value access") (implies . ()) (last-checked . 1632902870) (last-edit . 1436462400) (last-updated . 1502812286) (modules . ((lib "c-defs/docs/c-defs.scrbl") (lib "c-defs/examples/python-types.rkt") (lib "c-defs/ffi.rkt") (lib "c-defs/main.rkt"))) (name . "c-defs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (C . #t) (author:peblairman@gmail.com . #t) (ffi . #t) (ring:1 . #t))) (source . "git://github.com/belph/c-defs") (tags . ("C" "ffi")) (versions . #hash((default . #hasheq((checksum . "d5b7ba438ccdead8213e96051a205b696e4a8a93") (source . "git://github.com/belph/c-defs") (source_url . "http://github.com/belph/c-defs/tree/master"))))))) ("c-utils" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "c-utils" "doc/c-utils@c-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/c-utils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/c-utils.txt"))) (checksum . "a7087828d18fee7268c51104783279d285076560") (checksum-error . #f) (collection . (multi)) (conflicts . ("clang")) (dependencies . ("abnf" "base" "parser-tools-lib" "at-exp-lib" "parser-tools-doc" "planet-doc" "racket-doc" "rackunit-lib" "scribble-doc" "scribble-lib" "srfi-lite-lib")) (description . "Utilities for manipulating C source code.") (implies . ()) (last-checked . 1632902870) (last-edit . 1367976778) (last-updated . 1513624465) (modules . ((lib "c/header.rkt") (lib "c/private/tests/parser.rkt") (lib "c/private/unobtrusive-quote.rkt") (lib "c/scribblings/eval.scrbl") (lib "c/private/syntactic-context.rkt") (lib "c/scribblings/pc.scrbl") (lib "c/private/parser.rkt") (lib "c/scribblings/parse.scrbl") (lib "c/scribblings/syntax.scrbl") (lib "c/ast.rkt") (lib "c/scribblings/intro.scrbl") (lib "c/eval.rkt") (lib "c/scribblings/internals.scrbl") (lib "c/private/tests/header.rkt") (lib "c/pc.rkt") (lib "c/scribblings/header.scrbl") (lib "c/scribblings/history.scrbl") (lib "c/scribblings/utils.rkt") (lib "c/main.rkt") (lib "c/parse.rkt") (lib "c/private/lexer.rkt") (lib "c/scribblings/c-utils.scrbl"))) (name . "c-utils") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:conflicts: . #t) (:docs: . #t) (C . #t) (author:samth@ccs.neu.edu . #t) (language . #t) (ring:1 . #t))) (source . "github://github.com/samth/c.rkt/master") (tags . ("C" "language")) (versions . #hash((default . #hasheq((checksum . "a7087828d18fee7268c51104783279d285076560") (source . "github://github.com/samth/c.rkt/master") (source_url . "http://github.com/samth/c.rkt/tree/master"))))))) ("cKanren" . #hasheq((author . "claire.alvis@gmail.com") (authors . ("claire.alvis@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cKanren.txt") (test-failure-log . "server/built/test-fail/cKanren.txt") (test-success-log . #f))) (checksum . "8714bdd442ca03dbf5b1d6250904cbc5fd275e68") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Constraint programming language") (implies . ()) (last-checked . 1632902890) (last-edit . 1388959832) (last-updated . 1502812289) (modules . ((lib "cKanren/tests/quines.rkt") (lib "cKanren/src/base.rkt") (lib "cKanren/src/framework.rkt") (lib "cKanren/src/mk-structs.rkt") (lib "cKanren/tests/interp.rkt") (lib "cKanren/src/infs.rkt") (lib "cKanren/main.rkt") (lib "cKanren/ck.rkt") (lib "cKanren/src/running.rkt") (lib "cKanren/tests/lazy-appendo.rkt") (lib "cKanren/testall.rkt") (lib "cKanren/tests/nominal/nnf.rkt") (lib "cKanren/tests/symbolo-numbero.rkt") (lib "cKanren/src/variables.rkt") (lib "cKanren/tests/nominal/alphaleantap.rkt") (lib "cKanren/src/constraint-store.rkt") (lib "cKanren/tests/absento.rkt") (lib "cKanren/tests/mk-struct.rkt") (lib "cKanren/src/errors.rkt") (lib "cKanren/src/package.rkt") (lib "cKanren/unstable/interval-domain.rkt") (lib "cKanren/src/operators.rkt") (lib "cKanren/matche.rkt") (lib "cKanren/src/lex.rkt") (lib "cKanren/src/macros.rkt") (lib "cKanren/tests/neq.rkt") (lib "cKanren/lang/reader.rkt") (lib "cKanren/tests/infer.rkt") (lib "cKanren/src/queue.rkt") (lib "cKanren/src/events.rkt") (lib "cKanren/tests/numbero.rkt") (lib "cKanren/unstable/doc/manual.scrbl") (lib "cKanren/tests/symbolo.rkt") (lib "cKanren/tests/sets.rkt") (lib "cKanren/tests/tree-unify.rkt") (lib "cKanren/src/triggers.rkt") (lib "cKanren/tests/framework.rkt") (lib "cKanren/miniKanren.rkt") (lib "cKanren/unstable/sets.rkt") (lib "cKanren/src/helpers.rkt") (lib "cKanren/src/syntax-classes.rkt") (lib "cKanren/tests/no-closure.rkt") (lib "cKanren/neq.rkt") (lib "cKanren/attributes.rkt") (lib "cKanren/unstable/ak.rkt") (lib "cKanren/copy.rkt") (lib "cKanren/tests/fd.rkt") (lib "cKanren/tree-unify.rkt") (lib "cKanren/src/constraints.rkt") (lib "cKanren/src/substitution.rkt") (lib "cKanren/eigen.rkt") (lib "cKanren/unstable/finite-domain.rkt") (lib "cKanren/tests/mk.rkt") (lib "cKanren/tester.rkt") (lib "cKanren/tests/ak.rkt") (lib "cKanren/src/debugging.rkt") (lib "cKanren/tests/comp.rkt") (lib "cKanren/absento.rkt") (lib "cKanren/unstable/fd.rkt"))) (name . "cKanren") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:claire.alvis@gmail.com . #t) (ring:1 . #t))) (source . "github://github.com/calvis/cKanren/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8714bdd442ca03dbf5b1d6250904cbc5fd275e68") (source . "github://github.com/calvis/cKanren/master") (source_url . "http://github.com/calvis/cKanren/tree/master"))))))) ("cairo" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cairo.txt") (test-failure-log . "server/built/test-fail/cairo.txt") (test-success-log . #f))) (checksum . "537ba989c6dd0ed71e5da38995306955fcae84d5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1622495031) (dependencies . ("cairo-lib" "cairo-test")) (description . "Racket bindings for Cairo (a 2d graphics library implemented in C).\r\nThe bindings match the C API closely.") (implies . ("cairo-lib" "cairo-test")) (last-checked . 1632902870) (last-edit . 1622532655) (last-updated . 1625416843) (modules . ()) (name . "cairo") (ring . 1) (search-terms . #hasheq((2d . #t) (:build-success: . #t) (author:jensaxel@soegaard.net . #t) (cairo . #t) (graphics . #t) (ring:1 . #t))) (source . "https://github.com/soegaard/cairo.git?path=cairo#main") (tags . ("2d" "cairo" "graphics")) (versions . #hash((default . #hasheq((checksum . "537ba989c6dd0ed71e5da38995306955fcae84d5") (source . "https://github.com/soegaard/cairo.git?path=cairo#main") (source_url . "https://github.com/soegaard/cairo.git?path=cairo#main"))))))) ("cairo-lib" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cairo-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cairo-lib.txt"))) (checksum . "537ba989c6dd0ed71e5da38995306955fcae84d5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1622532736) (dependencies . ("base" "draw-lib")) (description . "Racket bindings for Cairo (a 2d graphics library).\r\nThe bindings match the C API closely.") (implies . ()) (last-checked . 1632902871) (last-edit . 1622532736) (last-updated . 1625416844) (modules . ((lib "cairo/bindings.rkt") (lib "cairo/main.rkt"))) (name . "cairo-lib") (ring . 1) (search-terms . #hasheq((2d . #t) (:build-success: . #t) (author:jensaxel@soegaard.net . #t) (cairo . #t) (graphics . #t) (ring:1 . #t))) (source . "https://github.com/soegaard/cairo.git?path=cairo-lib") (tags . ("2d" "cairo" "graphics")) (versions . #hash((default . #hasheq((checksum . "537ba989c6dd0ed71e5da38995306955fcae84d5") (source . "https://github.com/soegaard/cairo.git?path=cairo-lib") (source_url . "https://github.com/soegaard/cairo.git?path=cairo-lib"))))))) ("cairo-test" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cairo-test.txt") (test-failure-log . "server/built/test-fail/cairo-test.txt") (test-success-log . #f))) (checksum . "537ba989c6dd0ed71e5da38995306955fcae84d5") (checksum-error . #f) (collection . "cairo-test") (conflicts . ()) (date-added . 1622532789) (dependencies . ("base" "cairo" "draw-lib")) (description . "Racket bindings for Cairo (a 2d graphics library).\r\nThe bindings match the C API closely.\r\nThis package contains tests.") (implies . ()) (last-checked . 1632902871) (last-edit . 1622532789) (last-updated . 1625416846) (modules . ((lib "cairo-test/dot-method.rkt") (lib "cairo-test/test3.rkt") (lib "cairo-test/test2.rkt") (lib "cairo-test/test.rkt"))) (name . "cairo-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (cairo . #t) (ring:1 . #t))) (source . "https://github.com/soegaard/cairo.git?path=cairo-test") (tags . ("cairo")) (versions . #hash((default . #hasheq((checksum . "537ba989c6dd0ed71e5da38995306955fcae84d5") (source . "https://github.com/soegaard/cairo.git?path=cairo-test") (source_url . "https://github.com/soegaard/cairo.git?path=cairo-test"))))))) ("calendar" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "calendar" "doc/calendar@calendar/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/calendar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/calendar.txt"))) (checksum . "1c38c3804b8f4d87d5036d67018839276bdf6875") (checksum-error . #f) (collection . "calendar") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "gregor-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1632902871) (last-edit . 1463510689) (last-updated . 1512590763) (modules . ((lib "calendar/lang.rkt") (lib "calendar/lang/reader.rkt") (lib "calendar/scribblings/calendar.scrbl") (lib "calendar/main.rkt") (lib "calendar/private/event.rkt"))) (name . "calendar") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "git://github.com/LeifAndersen/racket-calendar.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1c38c3804b8f4d87d5036d67018839276bdf6875") (source . "git://github.com/LeifAndersen/racket-calendar.git") (source_url . "http://github.com/LeifAndersen/racket-calendar.git/tree/master"))))))) ("canonicalize-path" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "canonicalize-path" "doc/canonicalize-path@canonicalize-path/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/canonicalize-path.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/canonicalize-path.txt"))) (checksum . "87391a22ed5dfa80e5cac219a241a162e85fa3a1") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "mcfly" "overeasy")) (description . "") (implies . ()) (last-checked . 1632902871) (last-edit . 1456531517) (last-updated . 1502812287) (modules . ((lib "canonicalize-path/canonicalize-path.scrbl") (lib "canonicalize-path/main.rkt"))) (name . "canonicalize-path") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:neil@neilvandyke.org . #t) (filesystem . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/canonicalize-path.zip") (tags . ("filesystem")) (versions . #hash((default . #hasheq((checksum . "87391a22ed5dfa80e5cac219a241a162e85fa3a1") (source . "http://www.neilvandyke.org/racket/canonicalize-path.zip") (source_url . "http://www.neilvandyke.org/racket/canonicalize-path.zip"))))))) ("canvas-list" . #hasheq((author . "massung@gmail.com") (authors . ("massung@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "canvas-list" "doc/canvas-list@canvas-list/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/canvas-list.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/canvas-list.txt"))) (checksum . "8d101e6ede48be4c77673dddc32442f55a42f5c2") (checksum-error . #f) (collection . "canvas-list") (conflicts . ()) (date-added . 1624133882) (dependencies . ("base" "draw-lib" "gui-lib" "draw-doc" "gui-doc" "racket-doc" "scribble-lib")) (description . "Fast-rendering, single-selection, canvas control allowing custom drawing for a list of items.") (implies . ()) (last-checked . 1632902872) (last-edit . 1624133882) (last-updated . 1627306819) (modules . ((lib "canvas-list/scribblings/canvas-list.scrbl") (lib "canvas-list/main.rkt"))) (name . "canvas-list") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:massung@gmail.com . #t) (canvas . #t) (control . #t) (custom . #t) (gui . #t) (list . #t) (ring:1 . #t))) (source . "https://github.com/massung/racket-canvas-list.git") (tags . ("canvas" "control" "custom" "gui" "list")) (versions . #hash((default . #hasheq((checksum . "8d101e6ede48be4c77673dddc32442f55a42f5c2") (source . "https://github.com/massung/racket-canvas-list.git") (source_url . "https://github.com/massung/racket-canvas-list.git"))))))) ("carl-lib" . #hasheq((author . "moe@kayali.io") (authors . ("moe@kayali.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "carl-lib" "doc/carl-lib@carl-lib/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/carl-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/carl-lib.txt"))) (checksum . "195c155ccf9306acd29adaf2ab7d536d7686f849") (checksum-error . #f) (collection . "carl-lib") (conflicts . ()) (date-added . 1587590245) (dependencies . ("base" "brag-lib" "db" "graph" "math-lib" "rackunit-lib" "scribble-lib" "csv-writing" "racket-graphviz" "scribble-lib" "racket-doc" "rackunit-lib" "math-doc")) (description . "Backend for Causal Relational Learning implementation") (implies . ()) (last-checked . 1632902873) (last-edit . 1587590245) (last-updated . 1605660150) (modules . ((lib "carl-lib/scribblings/carl-lib.scrbl") (lib "carl-lib/unit-table.rkt") (lib "carl-lib/embed.rkt") (lib "carl-lib/test/embed.rkt") (lib "carl-lib/estimate/estimate.rkt") (lib "carl-lib/main.rkt") (lib "carl-lib/estimate/misc.rkt") (lib "carl-lib/test/lang.rkt") (lib "carl-lib/ground/load.rkt") (lib "carl-lib/detect.rkt") (lib "carl-lib/unit-table/construct.rkt") (lib "carl-lib/test/ground.rkt") (lib "carl-lib/test/detect.rkt") (lib "carl-lib/embed/summary.rkt") (lib "carl-lib/ground.rkt") (lib "carl-lib/lang/expander.rkt") (lib "carl-lib/test/integration.rkt") (lib "carl-lib/detect/backdoor.rkt") (lib "carl-lib/lang/parser.rkt") (lib "carl-lib/estimate.rkt") (lib "carl-lib/lang/reader.rkt") (lib "carl-lib/lang.rkt"))) (name . "carl-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (academic . #t) (author:moe@kayali.io . #t) (causal-inference . #t) (ring:1 . #t) (statistics . #t))) (source . "https://github.com/mkyl/carl-lib.git") (tags . ("academic" "causal-inference" "statistics")) (versions . #hash((default . #hasheq((checksum . "195c155ccf9306acd29adaf2ab7d536d7686f849") (source . "https://github.com/mkyl/carl-lib.git") (source_url . "https://github.com/mkyl/carl-lib.git"))))))) ("cartoon-assets" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/cartoon-assets.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "995759988e3b0c986023ea9834e57ccb9ae7fb4a") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1569617802) (dependencies . ("https://github.com/thoughtstem/kenney-assets.git" "https://github.com/thoughtstem/pzuh-assets.git" "https://github.com/thoughtstem/define-assets-from.git" "https://github.com/thoughtstem/misc-artist-assets.git" "https://github.com/thoughtstem/tidey-assets.git")) (description . "A package of creative-commons images with a cartoon theme") (implies . ()) (last-checked . 1632902873) (last-edit . 1569617802) (last-updated . 1573864626) (modules . ((lib "cartoon-assets/misc.rkt") (lib "cartoon-assets/foods.rkt") (lib "cartoon-assets/scribblings/cartoon-assets.scrbl") (lib "cartoon-assets/bgs.rkt") (lib "cartoon-assets/main.rkt") (lib "cartoon-assets/outdoors.rkt") (lib "cartoon-assets/characters.rkt") (lib "cartoon-assets/slime.rkt") (lib "cartoon-assets/space.rkt") (lib "cartoon-assets/coins.rkt") (lib "cartoon-assets/videogame.rkt") (lib "cartoon-assets/world-objects.rkt") (lib "cartoon-assets/vehicles.rkt"))) (name . "cartoon-assets") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/cartoon-assets.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "995759988e3b0c986023ea9834e57ccb9ae7fb4a") (source . "https://github.com/thoughtstem/cartoon-assets.git") (source_url . "https://github.com/thoughtstem/cartoon-assets.git"))))))) ("casemate" . #hasheq((author . "johan@2130.se") (authors . ("johan@2130.se")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "casemate" "doc/casemate@casemate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/casemate.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/casemate.txt"))) (checksum . "8a2a3801300b538f3152cd3829c2a19c996fd57e") (checksum-error . #f) (collection . "casemate") (conflicts . ()) (date-added . 1574376039) (dependencies . ("base" "srfi-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Case converter in the style of camel-snake-kebab") (implies . ()) (last-checked . 1632902874) (last-edit . 1574670011) (last-updated . 1574623517) (modules . ((lib "casemate/main.rkt") (lib "casemate/casemate.scrbl"))) (name . "casemate") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johan@2130.se . #t) (byte-string . #t) (camel . #t) (kebab . #t) (pascal . #t) (ring:1 . #t) (snake . #t) (string . #t) (symbol . #t))) (source . "https://github.com/jozip/casemate.git") (tags . ("byte-string" "camel" "kebab" "pascal" "snake" "string" "symbol")) (versions . #hash((default . #hasheq((checksum . "8a2a3801300b538f3152cd3829c2a19c996fd57e") (source . "https://github.com/jozip/casemate.git") (source_url . "https://github.com/jozip/casemate.git"))))))) ("cbor" . #hasheq((author . "williewillus@vincent-lee.net") (authors . ("williewillus@vincent-lee.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "manual" "doc/manual@cbor/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cbor.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cbor.txt"))) (checksum . "fa0335296db25aa137da79d653b6cb9759c507c0") (checksum-error . #f) (collection . "cbor") (conflicts . ()) (date-added . 1618537410) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Implementation of Concise Binary Object Representation (RFC 8949) for Racket.") (implies . ()) (last-checked . 1632902874) (last-edit . 1618537410) (last-updated . 1621739412) (modules . ((lib "cbor/private/util.rkt") (lib "cbor/private/test_data.rkt") (lib "cbor/common.rkt") (lib "cbor/encode.rkt") (lib "cbor/decode.rkt") (lib "cbor/scribblings/manual.scrbl") (lib "cbor/main.rkt"))) (name . "cbor") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (author:williewillus@vincent-lee.net . #t) (cbor . #t) (rfc-8949 . #t) (rfc8949 . #t) (ring:1 . #t))) (source . "https://github.com/williewillus/racket-rfc8949.git") (tags . ("cbor" "rfc-8949" "rfc8949")) (versions . #hash((default . #hasheq((checksum . "fa0335296db25aa137da79d653b6cb9759c507c0") (source . "https://github.com/williewillus/racket-rfc8949.git") (source_url . "https://github.com/williewillus/racket-rfc8949.git"))))))) ("cc4101-handin" . #hasheq((author . "ifigueroap@gmail.com etanter@dcc.uchile.cl") (authors . ("ifigueroap@gmail.com" "etanter@dcc.uchile.cl")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cc4101-handin.txt") (test-failure-log . "server/built/test-fail/cc4101-handin.txt") (test-success-log . #f))) (checksum . "4baadf45f07a1d79d1d2213356e1e60a72092242") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "net-lib")) (description . "Handin client for the CC4101 - Programming Languages course at University of Chile") (implies . ()) (last-checked . 1632902874) (last-edit . 1394810873) (last-updated . 1502812287) (modules . ((lib "cc4101-handin/handin-multi.rkt") (lib "cc4101-handin/updater.rkt") (lib "cc4101-handin/client.rkt") (lib "cc4101-handin/this-collection.rkt") (lib "cc4101-handin/client-gui.rkt"))) (name . "cc4101-handin") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:etanter@dcc.uchile.cl . #t) (author:ifigueroap@gmail.com . #t) (ring:1 . #t))) (source . "github://github.com/pleiad/cc4101-handin-client/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4baadf45f07a1d79d1d2213356e1e60a72092242") (source . "github://github.com/pleiad/cc4101-handin-client/master") (source_url . "http://github.com/pleiad/cc4101-handin-client/tree/master"))))))) ("ccnum" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ccnum" "doc/ccnum@ccnum/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ccnum.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ccnum.txt"))) (checksum . "6a9e1802743086bb53c086d9e2b093849cd11e3b") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Credit Card Number Utilities") (implies . ()) (last-checked . 1632902875) (last-edit . 1456636390) (last-updated . 1502812287) (modules . ((lib "ccnum/ccnum.scrbl") (lib "ccnum/main.rkt"))) (name . "ccnum") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (finance . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/ccnum.zip") (tags . ("finance")) (versions . #hash((default . #hasheq((checksum . "6a9e1802743086bb53c086d9e2b093849cd11e3b") (source . "http://www.neilvandyke.org/racket/ccnum.zip") (source_url . "http://www.neilvandyke.org/racket/ccnum.zip"))))))) ("cext-lib" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compiler-lib" "dynext-lib" "scheme-lib")) (description . "Tools for managing C extensions, such as `raco ctool`") (implies . ("dynext-lib")) (last-checked . 1632902876) (last-edit . 1418788311) (last-updated . 1583550338) (modules . ((lib "compiler/commands/ctool.rkt") (lib "compiler/xform.rkt"))) (name . "cext-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "92b482002c86099184d7847fd943757021a41680") (source . "git://github.com/racket/cext-lib?path=cext-lib") (source_url . "http://github.com/racket/cext-lib/tree/master?path=cext-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("chain-module-begin" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "chain-module-begin" "doc/chain-module-begin@chain-module-begin/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chain-module-begin.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chain-module-begin.txt"))) (checksum . "77fca59322b93cb83a2d57c25546dd7a7313bc56") (checksum-error . #f) (collection . "chain-module-begin") (conflicts . ()) (date-added . 1614799371) (dependencies . ("base" "rackunit-lib" "debug-scopes" "scribble-lib" "racket-doc")) (description . "Helper to define meta-languages which can chain-call other languages. Status: Experimental (no backwards compatibility).") (implies . ()) (last-checked . 1632902876) (last-edit . 1614889040) (last-updated . 1614956004) (modules . ((lib "chain-module-begin/main.rkt") (lib "chain-module-begin/scribblings/chain-module-begin.scrbl"))) (name . "chain-module-begin") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (experimental . #t) (lang-extension . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/chain-module-begin.git#main") (tags . ("experimental" "lang-extension" "syntax")) (versions . #hash((default . #hasheq((checksum . "77fca59322b93cb83a2d57c25546dd7a7313bc56") (source . "https://github.com/jsmaniac/chain-module-begin.git#main") (source_url . "https://github.com/jsmaniac/chain-module-begin.git#main"))))))) ("character-creator" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/character-creator.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "a401b0265f57ac4417d30e09445b913b5e73152b") (checksum-error . #f) (collection . "character-creator") (conflicts . ()) (dependencies . ("game-engine")) (description . "For making sprite sheets from the Liberated Pixel Cup assets, plus some bonus assets from Sithjester. ") (implies . ()) (last-checked . 1632902876) (last-edit . 1540233670) (last-updated . 1540233670) (modules . ((lib "character-creator/sith-character-generator.rkt") (lib "character-creator/character-creator.scrbl") (lib "character-creator/universal-character-generator.rkt") (lib "character-creator/main.rkt"))) (name . "character-creator") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:stephen@thoughtstem.com . #t) (games . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/character-creator.git") (tags . ("games")) (versions . #hash((default . #hasheq((checksum . "a401b0265f57ac4417d30e09445b913b5e73152b") (source . "https://github.com/thoughtstem/character-creator.git") (source_url . "https://github.com/thoughtstem/character-creator.git"))))))) ("charterm" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "charterm" "doc/charterm@charterm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/charterm.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/charterm.txt"))) (checksum . "93a40f0d6cb8d2c0eca2b9be1455b69956a51ace") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib")) (description . "Character-cell Terminal Interface") (implies . ()) (last-checked . 1632902877) (last-edit . 1456463121) (last-updated . 1624766841) (modules . ((lib "charterm/charterm.scrbl") (lib "charterm/demo.rkt") (lib "charterm/main.rkt"))) (name . "charterm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t) (terminal . #t))) (source . "http://www.neilvandyke.org/racket/charterm.zip") (tags . ("terminal")) (versions . #hash((default . #hasheq((checksum . "93a40f0d6cb8d2c0eca2b9be1455b69956a51ace") (source . "http://www.neilvandyke.org/racket/charterm.zip") (source_url . "http://www.neilvandyke.org/racket/charterm.zip"))))))) ("check-sexp-equal" . #hasheq((author . "zenspider@gmail.com") (authors . ("zenspider@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/check-sexp-equal.txt") (docs . (("main" "check-sexp-equal" "doc/check-sexp-equal@check-sexp-equal/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/check-sexp-equal.txt") (test-failure-log . "server/built/test-fail/check-sexp-equal.txt") (test-success-log . #f))) (checksum . "59d1d837e8d7d6d0d4a8d4dc23497a9589f234fc") (checksum-error . #f) (collection . "check-sexp-equal") (conflicts . ()) (dependencies . (("sexp-diff" #:version "0.1") "base" "rackunit-lib" "racket-doc" "scribble-lib" "racket-doc")) (description . "A simple extension for rackunit that provides s-expression diffs on failure.") (implies . ()) (last-checked . 1632902878) (last-edit . 1502757399) (last-updated . 1562000237) (modules . ((lib "check-sexp-equal/main.rkt") (lib "check-sexp-equal/check-sexp-equal.scrbl") (lib "check-sexp-equal/check-doco.rkt"))) (name . "check-sexp-equal") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:zenspider@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/zenspider/check-sexp-equal") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "59d1d837e8d7d6d0d4a8d4dc23497a9589f234fc") (source . "git://github.com/zenspider/check-sexp-equal") (source_url . "http://github.com/zenspider/check-sexp-equal/tree/master"))))))) ("chess" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "chess" "doc/chess@chess/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chess.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chess.txt"))) (checksum . "cd7aaa015ddaa87026b11dfe8dbe6778409b5286") (checksum-error . #f) (collection . "chess") (conflicts . ()) (date-added . 1566844917) (dependencies . ("base" "pict-lib" "rebellion" "reprovide-lang" "pict-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A library for modeling games of chess") (implies . ()) (last-checked . 1632902878) (last-edit . 1571474111) (last-updated . 1590882348) (modules . ((lib "chess/private/slot.rkt") (lib "chess/piece.scrbl") (lib "chess/square.scrbl") (lib "chess/main.rkt") (lib "chess/main.scrbl") (lib "chess/private/pict-combiner.rkt") (lib "chess/piece.rkt") (lib "chess/board.scrbl") (lib "chess/private/index-of.rkt") (lib "chess/square.rkt") (lib "chess/private/scribble-defthingstogether.rkt") (lib "chess/pict.rkt") (lib "chess/patch.rkt") (lib "chess/pict.scrbl") (lib "chess/patch.scrbl") (lib "chess/private/scribble-evaluator-factory.rkt") (lib "chess/board.rkt"))) (name . "chess") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (chess . #t) (data-structures . #t) (games . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/chess.git") (tags . ("chess" "data-structures" "games")) (versions . #hash((default . #hasheq((checksum . "cd7aaa015ddaa87026b11dfe8dbe6778409b5286") (source . "https://github.com/jackfirth/chess.git") (source_url . "https://github.com/jackfirth/chess.git"))))))) ("chez-runner" . #hasheq((author . "1227847322@qq.com") (authors . ("1227847322@qq.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chez-runner.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chez-runner.txt"))) (checksum . "a999587b41ff7c1da3a3fe2bb95fd8483ef77905") (checksum-error . #f) (collection . "chez-runner") (conflicts . ()) (dependencies . ("base" "gui-lib" "drracket" "rackunit-lib" "scribble-lib" "pict-lib")) (description . "run chez scheme programs in drracket") (implies . ()) (last-checked . 1632902878) (last-edit . 1541144385) (last-updated . 1541144385) (modules . ((lib "chez-runner/tool.rkt"))) (name . "chez-runner") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:1227847322@qq.com . #t) (chez-scheme . #t) (drracket . #t) (plugin . #t) (ring:1 . #t) (scheme . #t))) (source . "https://github.com/Syntacticlosure/chez-runner.git") (tags . ("chez-scheme" "drracket" "plugin" "scheme")) (versions . #hash((default . #hasheq((checksum . "a999587b41ff7c1da3a3fe2bb95fd8483ef77905") (source . "https://github.com/Syntacticlosure/chez-runner.git") (source_url . "https://github.com/Syntacticlosure/chez-runner.git"))))))) ("chido-parse" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "chido-parse" "doc/chido-parse@chido-parse/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chido-parse.txt") (test-failure-log . "server/built/test-fail/chido-parse.txt") (test-success-log . #f))) (checksum . "413c49e9760c0313809ecbf9ccee9772413cb336") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1589338385) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "data-lib" "kw-make-struct" "quickcheck" "web-server-lib" "at-exp-lib" "linea" "profile-lib")) (description . "Parsing with delimited continuations.") (implies . ()) (last-checked . 1632902878) (last-edit . 1608151794) (last-updated . 1615314174) (modules . ((lib "chido-parse/private/parse-direct-tests.rkt") (lib "chido-parse/scribblings/guide.scrbl") (lib "chido-parse/private/binding-sequence.rkt") (lib "chido-parse/private/trie.rkt") (lib "chido-parse/demo/xml-macros-use.rkt") (lib "chido-parse/private/test-util-2.rkt") (lib "chido-parse/private/procedural-combinators.rkt") (lib "chido-parse/main.rkt") (lib "chido-parse/scribblings/chido-parse.scrbl") (lib "chido-parse/private/bnf-macro.rkt") (lib "chido-parse/private/wrap-at-reader.rkt") (lib "chido-parse/private/ephemeron-cache.rkt") (lib "chido-parse/private/readtable-parser.rkt") (lib "chido-parse/demo/unary.rkt") (lib "chido-parse/private/parse-failure.rkt") (lib "chido-parse/private/benchmark3.rkt") (lib "chido-parse/private/core-use.rkt") (lib "chido-parse/private/test-bnf-syntactic-lang.rkt") (lib "chido-parse/scribblings/reference.scrbl") (lib "chido-parse/private/port-broker.rkt") (lib "chido-parse/private/bnf-s-exp.rkt") (lib "chido-parse/private/test-util-3.rkt") (lib "chido-parse/private/benchmark1.rkt") (lib "chido-parse/demo/xml-macros.rkt") (lib "chido-parse/bnf-syntactic.rkt") (lib "chido-parse/demo/parenhp.rkt") (lib "chido-parse/private/parameters.rkt") (lib "chido-parse/private/core.rkt") (lib "chido-parse/private/parse-stream.rkt") (lib "chido-parse/private/stream-flatten.rkt") (lib "chido-parse/private/core-simplified.rkt") (lib "chido-parse/private/test-util-1.rkt") (lib "chido-parse/private/core-direct-jumps-rewrite.rkt") (lib "chido-parse/demo/xml.rkt") (lib "chido-parse/demo/dynamic.rkt") (lib "chido-parse/demo/linea-wrap.rkt") (lib "chido-parse/private/bnf-parse.rkt") (lib "chido-parse/demo/use-parenhp.rkt"))) (name . "chido-parse") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (parsing . #t) (ring:1 . #t))) (source . "https://github.com/willghatch/racket-chido-parse.git") (tags . ("parsing")) (versions . #hash((default . #hasheq((checksum . "413c49e9760c0313809ecbf9ccee9772413cb336") (source . "https://github.com/willghatch/racket-chido-parse.git") (source_url . "https://github.com/willghatch/racket-chido-parse.git"))))))) ("chief" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chief.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chief.txt"))) (checksum . "b790e057c60b3a30ff8232cd0684aab2ebb167f1") (checksum-error . #f) (collection . "chief") (conflicts . ()) (date-added . 1568996716) (dependencies . ("base" "gregor-lib" "at-exp-lib" "rackunit-lib")) (description . "Chief runs Procfile-based applications. Like foreman, but written in Racket. ") (implies . ()) (last-checked . 1632902879) (last-edit . 1568996716) (last-updated . 1589124951) (modules . ((lib "chief/private/procfile.rkt") (lib "chief/private/term.rkt") (lib "chief/private/env.rkt") (lib "chief/private/formation.rkt") (lib "chief/cli.rkt"))) (name . "chief") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (process . #t) (ring:1 . #t) (shell . #t))) (source . "https://github.com/Bogdanp/racket-chief.git?path=chief") (tags . ("process" "shell")) (versions . #hash((default . #hasheq((checksum . "b790e057c60b3a30ff8232cd0684aab2ebb167f1") (source . "https://github.com/Bogdanp/racket-chief.git?path=chief") (source_url . "https://github.com/Bogdanp/racket-chief.git?path=chief"))))))) ("chive" . #hasheq((author . "yanyingwang1@gmail.com") (authors . ("yanyingwang1@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/chive.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "67bad49e50e084f0daad9a315e5764602e088469") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://gitlab.com/yanyingwang/chive.git\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (date-added . 1553752760) (dependencies . ("base" "srfi" "at-exp-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "an extended scheme library to easily cook practical applications") (implies . ()) (last-checked . 1632902879) (last-edit . 1567666672) (last-updated . 1621808098) (modules . ((lib "chive/base64.rkt") (lib "chive/main.rkt") (lib "chive/class.rkt") (lib "chive/port.rkt") (lib "chive/scribblings/chive.scrbl") (lib "chive/system.rkt"))) (name . "chive") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:yanyingwang1@gmail.com . #t) (base64 . #t) (chive . #t) (date . #t) (phone-number . #t) (port . #t) (ring:1 . #t) (smtp . #t) (system . #t) (time . #t))) (source . "https://gitlab.com/yanyingwang/chive.git") (tags . ("base64" "chive" "date" "phone-number" "port" "smtp" "system" "time")) (versions . #hash((default . #hasheq((checksum . "67bad49e50e084f0daad9a315e5764602e088469") (source . "https://gitlab.com/yanyingwang/chive.git") (source_url . "https://gitlab.com/yanyingwang/chive.git"))))))) ("chk" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chk.txt"))) (checksum . "32fb635e19fa2dc2d9c35bac0964ab76dde1e89e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("chk-lib" "chk-doc")) (description . "a minimal tester") (implies . ("chk-lib" "chk-doc")) (last-checked . 1632902879) (last-edit . 1505750896) (last-updated . 1618533940) (modules . ()) (name . "chk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/jeapostrophe/chk?path=chk") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "32fb635e19fa2dc2d9c35bac0964ab76dde1e89e") (source . "git://github.com/jeapostrophe/chk?path=chk") (source_url . "http://github.com/jeapostrophe/chk/tree/master?path=chk"))))))) ("chk-doc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "chk" "doc/chk@chk-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chk-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chk-doc.txt"))) (checksum . "32fb635e19fa2dc2d9c35bac0964ab76dde1e89e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "sandbox-lib" "scribble-lib" "racket-doc" "chk-lib")) (description . "a minimal tester") (implies . ()) (last-checked . 1632902879) (last-edit . 1505750939) (last-updated . 1618533940) (modules . ((lib "chk/chk.scrbl"))) (name . "chk-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/jeapostrophe/chk?path=chk-doc") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "32fb635e19fa2dc2d9c35bac0964ab76dde1e89e") (source . "git://github.com/jeapostrophe/chk?path=chk-doc") (source_url . "http://github.com/jeapostrophe/chk/tree/master?path=chk-doc"))))))) ("chk-lib" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chk-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chk-lib.txt"))) (checksum . "32fb635e19fa2dc2d9c35bac0964ab76dde1e89e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("testing-util-lib" "base")) (description . "a minimal tester") (implies . ()) (last-checked . 1632902880) (last-edit . 1505750918) (last-updated . 1618533941) (modules . ((lib "chk/main.rkt"))) (name . "chk-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/jeapostrophe/chk?path=chk-lib") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "32fb635e19fa2dc2d9c35bac0964ab76dde1e89e") (source . "git://github.com/jeapostrophe/chk?path=chk-lib") (source_url . "http://github.com/jeapostrophe/chk/tree/master?path=chk-lib"))))))) ("chk-test" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/chk-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/chk-test.txt"))) (checksum . "32fb635e19fa2dc2d9c35bac0964ab76dde1e89e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "chk-lib" ("testing-util-lib" #:version "1.1"))) (description . "a minimal tester") (implies . ()) (last-checked . 1632902880) (last-edit . 1505750960) (last-updated . 1618533941) (modules . ((lib "chk/test.rkt") (lib "chk/test-args.rkt"))) (name . "chk-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/jeapostrophe/chk?path=chk-test") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "32fb635e19fa2dc2d9c35bac0964ab76dde1e89e") (source . "git://github.com/jeapostrophe/chk?path=chk-test") (source_url . "http://github.com/jeapostrophe/chk/tree/master?path=chk-test"))))))) ("choose-lang" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "choose-lang" "doc/choose-lang@choose-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/choose-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/choose-lang.txt"))) (checksum . "582a224f42e5a0ac82a99e13a6ce3d7298f14fcf") (checksum-error . #f) (collection . "choose-lang") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc" "scribble-abbrevs" "typed-racket-doc")) (description . "Pick #lang at read-time") (implies . ()) (last-checked . 1632902880) (last-edit . 1538539646) (last-updated . 1620468310) (modules . ((lib "choose-lang/main.rkt") (lib "choose-lang/lang/reader.rkt") (lib "choose-lang/scribblings/choose-lang.scrbl"))) (name . "choose-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (lang-extension . #t) (ring:1 . #t))) (source . "https://gitlab.com/bengreenman/choose-lang.git") (tags . ("lang-extension")) (versions . #hash((default . #hasheq((checksum . "582a224f42e5a0ac82a99e13a6ce3d7298f14fcf") (source . "https://gitlab.com/bengreenman/choose-lang.git") (source_url . "https://gitlab.com/bengreenman/choose-lang.git"))))))) ("choose-out" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "choose-out" "doc/choose-out@choose-out/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/choose-out.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/choose-out.txt"))) (checksum . "1f95bbe28c3ae1f4bc1e2556a2e363ae344c1bfd") (checksum-error . #f) (collection . "choose-out") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc" "scribble-abbrevs" "typed-racket-doc")) (description . "Conditional provide (choose during expansion of importing module)") (implies . ()) (last-checked . 1632902880) (last-edit . 1533920133) (last-updated . 1620468310) (modules . ((lib "choose-out/private/renaming.rkt") (lib "choose-out/main.rkt") (lib "choose-out/test/trustme/server.rkt") (lib "choose-out/renaming.rkt") (lib "choose-out/scribblings/choose-out.scrbl") (lib "choose-out/private/choose-out.rkt") (lib "choose-out/test/trustme/client-untrust.rkt") (lib "choose-out/test/trustme/client-trustme.rkt"))) (name . "choose-out") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (provide . #t) (ring:1 . #t))) (source . "https://gitlab.com/bengreenman/choose-out.git") (tags . ("provide")) (versions . #hash((default . #hasheq((checksum . "1f95bbe28c3ae1f4bc1e2556a2e363ae344c1bfd") (source . "https://gitlab.com/bengreenman/choose-out.git") (source_url . "https://gitlab.com/bengreenman/choose-out.git"))))))) ("circuit-playground" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "circuit-playground" "doc/circuit-playground@circuit-playground/index.html"))) (failure-log . "server/built/fail/circuit-playground.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "755086bdbbc57ab4df7de2315c5f56d85024506c") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Language for coding the Circuit Playground Express in Racket.  Compiles Racket code to Python, which runs on a custom version of the Circuit Python firmware.  We use this for educational purposes at ThoughtSTEM.  It may or may not work on your operating system.  I've tested it only on Mac and Linux.   ") (implies . ()) (last-checked . 1632902881) (last-edit . 1523473627) (last-updated . 1540584804) (modules . ((lib "circuit-playground/racket-demos/night-light.rkt") (lib "circuit-playground/racket-demos/loudness-necklace.rkt") (lib "circuit-playground/racket-demos/hello-button-down.rkt") (lib "circuit-playground/racket-demos/death-star.rkt") (lib "circuit-playground/installer.rkt") (lib "circuit-playground/circuit-playground.scrbl") (lib "circuit-playground/racket-demos/jingles.rkt") (lib "circuit-playground/api/circuit-python-base.rkt") (lib "circuit-playground/racket-demos/clap-light.rkt") (lib "circuit-playground/racket-demos/magic-wand.rkt") (lib "circuit-playground/racket-demos/lightsaber.rkt") (lib "circuit-playground/api/circuit-python.rkt") (lib "circuit-playground/api/input.rkt") (lib "circuit-playground/api/lights.rkt") (lib "circuit-playground/racket-demos/hello-touch-pad.rkt") (lib "circuit-playground/racket-demos/servo-hello.rkt") (lib "circuit-playground/racket-demos/hot-potato.rkt") (lib "circuit-playground/api/output.rkt") (lib "circuit-playground/racket-demos/siren-demo.rkt") (lib "circuit-playground/racket-demos/hello-led.rkt") (lib "circuit-playground/racket-demos/blaster.rkt") (lib "circuit-playground/api/python.rkt") (lib "circuit-playground/main.rkt") (lib "circuit-playground/api/sound.rkt") (lib "circuit-playground/api/ir.rkt") (lib "circuit-playground/api/rgb_helper.rkt") (lib "circuit-playground/api/accel.rkt") (lib "circuit-playground/api/servo.rkt") (lib "circuit-playground/racket-demos/droids.rkt") (lib "circuit-playground/circuit-playground-module.rkt") (lib "circuit-playground/racket-demos/hello-world.rkt") (lib "circuit-playground/racket-demos/hello-ir.rkt"))) (name . "circuit-playground") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t) (robotics . #t))) (source . "https://github.com/thoughtstem/circuit-playground.git") (tags . ("robotics")) (versions . #hash((default . #hasheq((checksum . "755086bdbbc57ab4df7de2315c5f56d85024506c") (source . "https://github.com/thoughtstem/circuit-playground.git") (source_url . "https://github.com/thoughtstem/circuit-playground.git"))))))) ("cksum" . #hasheq((author . "davidwil@posteo.de") (authors . ("davidwil@posteo.de")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cksum" "doc/cksum@cksum/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/cksum.txt") (success-log . "server/built/install/cksum.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cksum.txt"))) (checksum . "ea390924866cb53df44f4d812c1f187e2e88b8a7") (checksum-error . #f) (collection . "cksum") (conflicts . ()) (date-added . 1603746998) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Allows for calculation of CRC checksums of files in the style of the cksum utility from GNU Coreutils. Uses code from GNU Coreutils and gnulib.") (implies . ()) (last-checked . 1632902890) (last-edit . 1603747060) (last-updated . 1603746998) (modules . ((lib "cksum/private/install.rkt") (lib "cksum/main.rkt") (lib "cksum/scribblings/cksum.scrbl"))) (name . "cksum") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:davidwil@posteo.de . #t) (checksum . #t) (gnu . #t) (gnulib . #t) (ring:1 . #t))) (source . "https://github.com/jeroanan/cksum.git") (tags . ("checksum" "gnu" "gnulib")) (versions . #hash((default . #hasheq((checksum . "ea390924866cb53df44f4d812c1f187e2e88b8a7") (source . "https://github.com/jeroanan/cksum.git") (source_url . "https://github.com/jeroanan/cksum.git"))))))) ("clang" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "stdc"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/clang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/clang.txt"))) (checksum . "b9d008a4bf914474fa3368095e93a5c4925dc9f5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1550759669) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc")) (description . "Toolbox for C family in Typed Racket") (implies . ()) (last-checked . 1632902890) (last-edit . 1550759669) (last-updated . 1603470129) (modules . ((lib "stdc/main.rkt") (lib "stdc/tamer/stdc.scrbl") (lib "stdc/village/clang/reader.rkt"))) (name . "clang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs-error: . #t) (C . #t) (author:juzhenliang@gmail.com . #t) (ffi . #t) (parser . #t) (ring:1 . #t) (typed-racket . #t) (unsafe . #t) (unstable . #t))) (source . "https://github.com/wargrey/clang.git") (tags . ("C" "ffi" "parser" "typed-racket" "unsafe" "unstable")) (versions . #hash((default . #hasheq((checksum . "b9d008a4bf914474fa3368095e93a5c4925dc9f5") (source . "https://github.com/wargrey/clang.git") (source_url . "https://github.com/wargrey/clang.git"))))))) ("class-iop" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/class-iop.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/class-iop.txt"))) (checksum . "f5105b5cfdc7b72d9c7ffc053f884fc66677f861") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("class-iop-lib" "class-iop-doc")) (description . "Interface-oriented programming for classes") (implies . ()) (last-checked . 1632902891) (last-edit . 1438195663) (last-updated . 1571879765) (modules . ()) (name . "class-iop") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/class-iop?path=class-iop") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "f5105b5cfdc7b72d9c7ffc053f884fc66677f861") (source . "git://github.com/racket/class-iop?path=class-iop") (source_url . "http://github.com/racket/class-iop/tree/master?path=class-iop"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("class-iop-doc" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "class-iop" "doc/class-iop@class-iop-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/class-iop-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/class-iop-doc.txt"))) (checksum . "f5105b5cfdc7b72d9c7ffc053f884fc66677f861") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.6") "class-iop-lib" "scribble-lib" "racket-doc")) (description . "Documentation for class-iop") (implies . ()) (last-checked . 1632902891) (last-edit . 1438195663) (last-updated . 1571879766) (modules . ((lib "scribblings/iop/class-iop.scrbl"))) (name . "class-iop-doc") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/class-iop?path=class-iop-doc") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "f5105b5cfdc7b72d9c7ffc053f884fc66677f861") (source . "git://github.com/racket/class-iop?path=class-iop-doc") (source_url . "http://github.com/racket/class-iop/tree/master?path=class-iop-doc"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("class-iop-lib" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "f5105b5cfdc7b72d9c7ffc053f884fc66677f861") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.6"))) (description . "Implementation (no documentation) for class-iop") (implies . ()) (last-checked . 1632902891) (last-edit . 1438195663) (last-updated . 1571879766) (modules . ((lib "racket/class/iop.rkt") (lib "racket/class/private/class-iop-ct.rkt"))) (name . "class-iop-lib") (ring . 0) (search-terms . #hasheq((author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/class-iop?path=class-iop-lib") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "f5105b5cfdc7b72d9c7ffc053f884fc66677f861") (source . "git://github.com/racket/class-iop?path=class-iop-lib") (source_url . "http://github.com/racket/class-iop/tree/master?path=class-iop-lib"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("classicthesis-scribble" . #hasheq((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/classicthesis-scribble.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/classicthesis-scribble.txt"))) (checksum . "e6c3f2be24654cbf0b17d9027737c2d3eb1cddd1") (checksum-error . #f) (collection . "classicthesis") (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib")) (description . "Scribble wrapper for the classicthesis LaTeX style.") (implies . ()) (last-checked . 1632902891) (last-edit . 1420138021) (last-updated . 1502812291) (modules . ((lib "classicthesis/test-bib.rkt") (lib "classicthesis/include/lang/reader.rkt") (lib "classicthesis/test-part.scrbl") (lib "classicthesis/test-chapter.scrbl") (lib "classicthesis/lang.rkt") (lib "classicthesis/test-acknowledgements.scrbl") (lib "classicthesis/test.scrbl") (lib "classicthesis/test-section.scrbl") (lib "classicthesis/test-abstract.scrbl") (lib "classicthesis/include.rkt") (lib "classicthesis/lang/reader.rkt"))) (name . "classicthesis-scribble") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stamourv@racket-lang.org . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/stamourv/classicthesis-scribble") (tags . ("scribble")) (versions . #hash((default . #hasheq((checksum . "e6c3f2be24654cbf0b17d9027737c2d3eb1cddd1") (source . "git://github.com/stamourv/classicthesis-scribble") (source_url . "http://github.com/stamourv/classicthesis-scribble/tree/master"))))))) ("cldr-bcp47" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cldr-bcp47-timezone" "doc/cldr-bcp47-timezone@cldr-bcp47/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cldr-bcp47.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cldr-bcp47.txt"))) (checksum . "823fc1a530f1a0ec4de59f5454c1a17f20c5a5d6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "cldr-core" "scribble-lib" "racket-doc")) (description . "API for BCP47 extensions to CLDR") (implies . ()) (last-checked . 1632902891) (last-edit . 1427073088) (last-updated . 1502812291) (modules . ((lib "cldr/bcp47/timezone.rkt") (lib "cldr/bcp47/scribblings/cldr-bcp47-timezone.scrbl"))) (name . "cldr-bcp47") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (cldr . #t) (l10n . #t) (ring:1 . #t))) (source . "git://github.com/97jaz/cldr-bcp47") (tags . ("cldr" "l10n")) (versions . #hash((default . #hasheq((checksum . "823fc1a530f1a0ec4de59f5454c1a17f20c5a5d6") (source . "git://github.com/97jaz/cldr-bcp47") (source_url . "http://github.com/97jaz/cldr-bcp47/tree/master"))))))) ("cldr-core" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cldr-core" "doc/cldr-core@cldr-core/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cldr-core.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cldr-core.txt"))) (checksum . "8a4d6de47ea572bfcee8d4df498be893906f52de") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "memoize" "racket-doc" "scribble-lib")) (description . "API for cldr-core data set") (implies . ()) (last-checked . 1632902892) (last-edit . 1426995002) (last-updated . 1502812291) (modules . ((lib "cldr/likely-subtags.rkt") (lib "cldr/scribblings/cldr-core.scrbl") (lib "cldr/file.rkt") (lib "cldr/core.rkt"))) (name . "cldr-core") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (cldr . #t) (l10n . #t) (ring:1 . #t))) (source . "git://github.com/97jaz/cldr-core") (tags . ("cldr" "l10n")) (versions . #hash((default . #hasheq((checksum . "8a4d6de47ea572bfcee8d4df498be893906f52de") (source . "git://github.com/97jaz/cldr-core") (source_url . "http://github.com/97jaz/cldr-core/tree/master"))))))) ("cldr-dates-modern" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cldr-dates-modern" "doc/cldr-dates-modern@cldr-dates-modern/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cldr-dates-modern.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cldr-dates-modern.txt"))) (checksum . "c36282917247f6a069e553535f4619007cd7b6e5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "cldr-core" "scribble-lib" "racket-doc")) (description . "API for cldr-dates-modern data set") (implies . ()) (last-checked . 1632902892) (last-edit . 1426994487) (last-updated . 1502812292) (modules . ((lib "cldr/dates-modern.rkt") (lib "cldr/scribblings/cldr-dates-modern.scrbl"))) (name . "cldr-dates-modern") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (cldr . #t) (l10n . #t) (ring:1 . #t))) (source . "git://github.com/97jaz/cldr-dates-modern") (tags . ("cldr" "l10n")) (versions . #hash((default . #hasheq((checksum . "c36282917247f6a069e553535f4619007cd7b6e5") (source . "git://github.com/97jaz/cldr-dates-modern") (source_url . "http://github.com/97jaz/cldr-dates-modern/tree/master"))))))) ("cldr-localenames-modern" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cldr-localenames-modern" "doc/cldr-localenames-modern@cldr-localenames-modern/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cldr-localenames-modern.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cldr-localenames-modern.txt"))) (checksum . "f9f3e8d9245764a309542816acf40fe147b473a3") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "cldr-core" "scribble-lib" "racket-doc")) (description . "API for cldr-localenames-modern data set") (implies . ()) (last-checked . 1632902892) (last-edit . 1426994538) (last-updated . 1502812293) (modules . ((lib "cldr/localenames-modern.rkt") (lib "cldr/scribblings/cldr-localenames-modern.scrbl"))) (name . "cldr-localenames-modern") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (cldr . #t) (l10n . #t) (ring:1 . #t))) (source . "git://github.com/97jaz/cldr-localenames-modern") (tags . ("cldr" "l10n")) (versions . #hash((default . #hasheq((checksum . "f9f3e8d9245764a309542816acf40fe147b473a3") (source . "git://github.com/97jaz/cldr-localenames-modern") (source_url . "http://github.com/97jaz/cldr-localenames-modern/tree/master"))))))) ("cldr-numbers-modern" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cldr-numbers-modern" "doc/cldr-numbers-modern@cldr-numbers-modern/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cldr-numbers-modern.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cldr-numbers-modern.txt"))) (checksum . "625428099b3f8cd264955a283dddc176a6080ba1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "cldr-core" "scribble-lib" "racket-doc")) (description . "API for cldr-numbers-modern data set") (implies . ()) (last-checked . 1632902892) (last-edit . 1426996138) (last-updated . 1502812295) (modules . ((lib "cldr/numbers-modern.rkt") (lib "cldr/scribblings/cldr-numbers-modern.scrbl"))) (name . "cldr-numbers-modern") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (cldr . #t) (l10n . #t) (ring:1 . #t))) (source . "git://github.com/97jaz/cldr-numbers-modern") (tags . ("cldr" "l10n")) (versions . #hash((default . #hasheq((checksum . "625428099b3f8cd264955a283dddc176a6080ba1") (source . "git://github.com/97jaz/cldr-numbers-modern") (source_url . "http://github.com/97jaz/cldr-numbers-modern/tree/master"))))))) ("cli" . #hasheq((author . "skasivaj@gmail.com") (authors . ("skasivaj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cli" "doc/cli@cli/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cli.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cli.txt"))) (checksum . "ee7ccb3604a12bbdd65ae3c01ae2cd6ee8b38791") (checksum-error . #f) (collection . "cli") (conflicts . ()) (date-added . 1627003429) (dependencies . ("base" "mischief" "version-case" "scribble-lib" "scribble-abbrevs" "racket-doc" "rackunit-lib" "cover" "cover-coveralls" "sandbox-lib")) (description . "Simple and expressive command line interfaces.") (implies . ()) (last-checked . 1632902893) (last-edit . 1627079273) (last-updated . 1632431291) (modules . ((lib "cli/expander.rkt") (lib "cli/tests/test-scripts.rkt") (lib "cli/private/util.rkt") (lib "cli/tests/cli.rkt") (lib "cli/tests/scripts/flag-w-args.rkt") (lib "cli/main.rkt") (lib "cli/scribblings/cli.scrbl") (lib "cli/tests/scripts/constraints.rkt") (lib "cli/reader.rkt") (lib "cli/tests/scripts/flag.rkt") (lib "cli/tests/scripts/doc.rkt") (lib "cli/tests/scripts/no-args.rkt") (lib "cli/tests/scripts/args.rkt"))) (name . "cli") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:skasivaj@gmail.com . #t) (cli . #t) (command-line . #t) (ring:1 . #t) (scripting . #t))) (source . "https://github.com/countvajhula/cli.git#main") (tags . ("cli" "command-line" "scripting")) (versions . #hash((default . #hasheq((checksum . "ee7ccb3604a12bbdd65ae3c01ae2cd6ee8b38791") (source . "https://github.com/countvajhula/cli.git#main") (source_url . "https://github.com/countvajhula/cli.git#main"))))))) ("clicker-assets" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/clicker-assets.txt") (docs . (("main" "clicker-assets" "doc/clicker-assets@clicker-assets/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/clicker-assets.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/clicker-assets.txt"))) (checksum . "a377ae67172c3174a094c4794ea98c9f50b1dedd") (checksum-error . #f) (collection . "clicker-assets") (conflicts . ()) (date-added . 1569611658) (dependencies . ("base" "define-assets-from" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Assets for clicker games") (implies . ()) (last-checked . 1632902893) (last-edit . 1569611658) (last-updated . 1578420210) (modules . ((lib "clicker-assets/main.rkt") (lib "clicker-assets/scribblings/clicker-assets.scrbl"))) (name . "clicker-assets") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/clicker-assets.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a377ae67172c3174a094c4794ea98c9f50b1dedd") (source . "https://github.com/thoughtstem/clicker-assets.git") (source_url . "https://github.com/thoughtstem/clicker-assets.git"))))))) ("client-cookies" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/client-cookies.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/client-cookies.txt"))) (checksum . "ea699f80c4865c71971a73b4cfc444969a633c6c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556510505) (dependencies . ("base")) (description . "Client cookies jar for net/url and similar libs.\r\nDeprecated: use net/cookies.") (implies . ()) (last-checked . 1632902893) (last-edit . 1556510505) (last-updated . 1502812296) (modules . ((lib "client-cookies/dev.rkt") (lib "client-cookies/main.rkt"))) (name . "client-cookies") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:kalimehtar@mail.ru . #t) (deprecated . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Kalimehtar/client-cookies.git") (tags . ("deprecated" "net" "web")) (versions . #hash((default . #hasheq((checksum . "ea699f80c4865c71971a73b4cfc444969a633c6c") (source . "https://github.com/Kalimehtar/client-cookies.git") (source_url . "https://github.com/Kalimehtar/client-cookies.git"))))))) ("clotho" . #hasheq((author . "william@hatch.uno eeide@cs.utah.edu pierce.darragh@gmail.com") (authors . ("william@hatch.uno" "eeide@cs.utah.edu" "pierce.darragh@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "clotho" "doc/clotho@clotho/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/clotho.txt") (test-failure-log . "server/built/test-fail/clotho.txt") (test-success-log . #f))) (checksum . "7cc309787f07286e3b1411346f4e85e4bec09098") (checksum-error . #f) (collection . "clotho") (conflicts . ()) (date-added . 1596395710) (dependencies . ("base" "version-string-with-git-hash" "rackunit-lib" "math-lib" "scribble-lib" "racket-doc")) (description . "A library for enabling parametric randomness in Racket applications.") (implies . ()) (last-checked . 1632902893) (last-edit . 1596395710) (last-updated . 1622026786) (modules . ((lib "clotho/scribblings/api.scrbl") (lib "clotho/scribblings/acknowledgments.scrbl") (lib "clotho/examples/guide/manipulate.rkt") (lib "clotho/examples/guide/external-multiple.rkt") (lib "clotho/lib/common.rkt") (lib "clotho/lib/macros.rkt") (lib "clotho/examples/guide/success.rkt") (lib "clotho/lib/clean-prg.rkt") (lib "clotho/scribblings/code-and-license.scrbl") (lib "clotho/lib/random-source-struct.rkt") (lib "clotho/scribblings/guide.scrbl") (lib "clotho/base.rkt") (lib "clotho/stateful.rkt") (lib "clotho/examples/guide/error.rkt") (lib "clotho/examples/guide/replay.rkt") (lib "clotho/examples/guide/racket-abstract.rkt") (lib "clotho/math/distributions.rkt") (lib "clotho/examples/guide/byte-string.rkt") (lib "clotho/examples/guide/external.rkt") (lib "clotho/examples/guide/abstract.rkt") (lib "clotho/examples/guide/math-distributions.rkt") (lib "clotho/examples/minesweeper-multiple.rkt") (lib "clotho/lib/random.rkt") (lib "clotho/lib/random-source.rkt") (lib "clotho/racket/base.rkt") (lib "clotho/lib/convenience-functions.rkt") (lib "clotho/scribblings/clotho.scrbl") (lib "clotho/main.rkt") (lib "clotho/examples/cards.rkt") (lib "clotho/examples/minesweeper.rkt"))) (name . "clotho") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:eeide@cs.utah.edu . #t) (author:pierce.darragh@gmail.com . #t) (author:william@hatch.uno . #t) (fuzzing . #t) (lang . #t) (random . #t) (ring:1 . #t))) (source . "https://gitlab.flux.utah.edu/xsmith/clotho.git?path=clotho#rpi-release") (tags . ("fuzzing" "lang" "random")) (versions . #hash((default . #hasheq((checksum . "7cc309787f07286e3b1411346f4e85e4bec09098") (source . "https://gitlab.flux.utah.edu/xsmith/clotho.git?path=clotho#rpi-release") (source_url . "https://gitlab.flux.utah.edu/xsmith/clotho.git?path=clotho#rpi-release"))))))) ("cmx" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/cmx.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "3591f092f7aac01e5c529d5b82421e321cdda8cb") (checksum-error . #f) (collection . "cmx") (conflicts . ()) (dependencies . ("base" "event-lang" "draw-lib" "pict-lib" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "A calculus of mediated exchange") (implies . ()) (last-checked . 1632902893) (last-edit . 1530995182) (last-updated . 1529343728) (modules . ((lib "cmx/mediator.rkt") (lib "cmx/scribblings/cmx.scrbl") (lib "cmx/scribblings/diagram.rkt") (lib "cmx/main.rkt"))) (name . "cmx") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:dedbox@gmail.com . #t) (concurrency . #t) (experimental . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-cmx.git") (tags . ("concurrency" "experimental")) (versions . #hash((default . #hasheq((checksum . "3591f092f7aac01e5c529d5b82421e321cdda8cb") (source . "https://github.com/dedbox/racket-cmx.git") (source_url . "https://github.com/dedbox/racket-cmx.git"))))))) ("cobalt2-theme" . #hasheq((author . "dexterlagan@gmail.com") (authors . ("dexterlagan@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cobalt2-theme.txt") (test-failure-log . "server/built/test-fail/cobalt2-theme.txt") (test-success-log . #f))) (checksum . "7782e2324b62cc496ca2167800a423c8929adf01") (checksum-error . #f) (collection . "cobalt2-theme") (conflicts . ()) (date-added . 1618758552) (dependencies . ("base")) (description . "The Cobalt 2 color theme for DrRacket.") (implies . ()) (last-checked . 1632902894) (last-edit . 1618758552) (last-updated . 1618758552) (modules . ((lib "cobalt2-theme/scribblings/cobalt-theme.scrbl"))) (name . "cobalt2-theme") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:dexterlagan@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/DexterLagan/cobalt2-theme.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7782e2324b62cc496ca2167800a423c8929adf01") (source . "https://github.com/DexterLagan/cobalt2-theme.git") (source_url . "https://github.com/DexterLagan/cobalt2-theme.git"))))))) ("code-sync" . #hasheq((author . "jung.ry@northeastern.edu") (authors . ("jung.ry@northeastern.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "code-sync" "doc/code-sync@code-sync/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/code-sync.txt") (test-failure-log . "server/built/test-fail/code-sync.txt") (test-success-log . #f))) (checksum . "feea02e2cc19088ba7ce5336b89b22044d5dafcf") (checksum-error . #f) (collection . "code-sync") (conflicts . ()) (date-added . 1595633470) (dependencies . ("base" "gui-lib" "data-lib" "drracket-plugin-lib" "rfc6455" "net" "web-server-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Fast Code Sharing for DrRacket") (implies . ()) (last-checked . 1632902894) (last-edit . 1605131729) (last-updated . 1605132999) (modules . ((lib "code-sync/websocket-test.rkt") (lib "code-sync/scribblings/code-sync.scrbl") (lib "code-sync/main.rkt") (lib "code-sync/tool.rkt"))) (name . "code-sync") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jung.ry@northeastern.edu . #t) (code . #t) (live . #t) (ring:1 . #t) (share . #t) (sync . #t))) (source . "https://github.com/rymaju/code-sync.git") (tags . ("code" "live" "share" "sync")) (versions . #hash((default . #hasheq((checksum . "feea02e2cc19088ba7ce5336b89b22044d5dafcf") (source . "https://github.com/rymaju/code-sync.git") (source_url . "https://github.com/rymaju/code-sync.git"))))))) ("codepoint" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "f114a142f08bee5ca26b17d37ed698ebc7e63176") (checksum-error . #f) (collection . "codepoint") (conflicts . ()) (date-added . 1632445820) (dependencies . ("base" "srfi-lite-lib" "scribble-lib" "racket-doc" "sandbox-lib" "rackunit-lib")) (description . "Library for operations on Unicode codepoints, and UCD properties.") (implies . ()) (last-checked . 1632902894) (last-edit . 1632445852) (last-updated . 1632859696) (modules . ((lib "codepoint/scribblings/codepoint-fold.scrbl") (lib "codepoint/private/generator.rkt") (lib "codepoint/tests/properties.rkt") (lib "codepoint/scribblings/generator.scrbl") (lib "codepoint/tests/fold.rkt") (lib "codepoint/range.rkt") (lib "codepoint/fold.rkt") (lib "codepoint/properties.rkt") (lib "codepoint/private/ucd.rkt") (lib "codepoint/range-dict.rkt") (lib "codepoint/tests/codepoint-range-dict.rkt") (lib "codepoint/tests/codepoint-range.rkt") (lib "codepoint/enums.rkt") (lib "codepoint/scribblings/codepoint.scrbl") (lib "codepoint/main.rkt") (lib "codepoint/scribblings/codepoint-types.scrbl") (lib "codepoint/tests/codepoint.rkt") (lib "codepoint/scribblings/codepoint-properties.scrbl"))) (name . "codepoint") (ring . 2) (search-terms . #hasheq((author:johnstonskj@gmail.com . #t) (ring:2 . #t) (unicode . #t))) (source . "https://github.com/johnstonskj/racket-codepoint.git#main") (tags . ("unicode")) (versions . #hash((default . #hasheq((checksum . "f114a142f08bee5ca26b17d37ed698ebc7e63176") (source . "https://github.com/johnstonskj/racket-codepoint.git#main") (source_url . "https://github.com/johnstonskj/racket-codepoint.git#main"))))))) ("codespells-live" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "codespells-live"))) (failure-log . "server/built/fail/codespells-live.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ff1d635bc711b21d6814a5626167dd340f843545") (checksum-error . #f) (collection . "codespells-live") (conflicts . ()) (date-added . 1617735599) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "@(tt codespells-live/chat) is the language for interacting\r\nwith our Twitch stream\r\n@(link https://www.twitch.tv/codespells here). Any of\r\ncommands below can be run inside the Twitch chat preceded by a\r\n@tt{!!} and minus the outer set of parentheses. (E.g. @tt{!!mini})") (implies . ()) (last-checked . 1632902894) (last-edit . 1617735599) (last-updated . 1618343159) (modules . ((lib "codespells-live/chat.rkt") (lib "codespells-live/main.rkt") (lib "codespells-live/scribblings/codespells-live.scrbl"))) (name . "codespells-live") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/ldhandley/codespells-live.git#main") (tags . ()) (versions . #hash((default . #hasheq((checksum . "ff1d635bc711b21d6814a5626167dd340f843545") (source . "https://github.com/ldhandley/codespells-live.git#main") (source_url . "https://github.com/ldhandley/codespells-live.git#main"))))))) ("collections" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collections.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collections.txt"))) (checksum . "c4822fc200b0488922cd6e86b4f2ea7cf8c565da") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("collections-lib" "collections-doc")) (description . "A generic interface for collections") (implies . ("collections-lib" "collections-doc")) (last-checked . 1632902895) (last-edit . 1475813259) (last-updated . 1597605716) (modules . ()) (name . "collections") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-collections?path=collections") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c4822fc200b0488922cd6e86b4f2ea7cf8c565da") (source . "git://github.com/lexi-lambda/racket-collections?path=collections") (source_url . "http://github.com/lexi-lambda/racket-collections/tree/master?path=collections"))) ("6.2" . #hasheq((checksum . "63a829b7766a05b989e9ad18f32e3b1b29d0bb65") (source . "git://github.com/lexi-lambda/racket-collections#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/racket-collections/tree/master#version-exception--6.2"))) ("6.2.1" . #hasheq((checksum . "63a829b7766a05b989e9ad18f32e3b1b29d0bb65") (source . "git://github.com/lexi-lambda/racket-collections#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/racket-collections/tree/master#version-exception--6.2"))))))) ("collections-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "collections" "doc/collections@collections-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collections-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collections-doc.txt"))) (checksum . "c4822fc200b0488922cd6e86b4f2ea7cf8c565da") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "collections-lib" "functional-doc" "racket-doc" "scribble-lib")) (description . "") (implies . ()) (last-checked . 1632902895) (last-edit . 1475261219) (last-updated . 1597605717) (modules . ((lib "scribblings/data/collection/private/utils.rkt") (lib "scribblings/data/collection/collection/examples.scrbl") (lib "scribblings/data/collection/collection/introduction.scrbl") (lib "scribblings/data/collection/collections.scrbl") (lib "scribblings/data/collection/collection/reference.scrbl") (lib "scribblings/data/collection/collection/experimental.scrbl"))) (name . "collections-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-collections?path=collections-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c4822fc200b0488922cd6e86b4f2ea7cf8c565da") (source . "git://github.com/lexi-lambda/racket-collections?path=collections-doc") (source_url . "http://github.com/lexi-lambda/racket-collections/tree/master?path=collections-doc"))))))) ("collections-lens" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/collections-lens.txt") (docs . (("main" "collections-lens" "doc/collections-lens@collections-lens/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collections-lens.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collections-lens.txt"))) (checksum . "73556daf4885558ea6a66a5def8ad668c0fcf4c3") (checksum-error . #f) (collection . "data") (conflicts . ()) (dependencies . ("base" "collections" "curly-fn" "lens-common" "scribble-lib" "at-exp-lib" "racket-doc" "lens-doc" "rackunit-lib")) (description . "Lenses for generic collections") (implies . ()) (last-checked . 1632902895) (last-edit . 1471826212) (last-updated . 1502812297) (modules . ((lib "data/collection/lens/private/sandbox.rkt") (lib "data/scribblings/main.scrbl") (lib "data/collection/lens.rkt"))) (name . "collections-lens") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (lens . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/collections-lens") (tags . ("lens")) (versions . #hash((default . #hasheq((checksum . "73556daf4885558ea6a66a5def8ad668c0fcf4c3") (source . "git://github.com/lexi-lambda/collections-lens") (source_url . "http://github.com/lexi-lambda/collections-lens/tree/master"))))))) ("collections-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collections-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collections-lib.txt"))) (checksum . "c4822fc200b0488922cd6e86b4f2ea7cf8c565da") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.3") "curly-fn-lib" ("functional-lib" #:version "0.3.1") "match-plus" "static-rename" "unstable-list-lib")) (description . "") (implies . ()) (last-checked . 1632902896) (last-edit . 1475261199) (last-updated . 1597605718) (modules . ((lib "data/collection/collection.rkt") (lib "data/collection/indexable.rkt") (lib "data/collection/match.rkt") (lib "data/collection/sequence.rkt") (lib "data/collection/private/random-access.rkt") (lib "data/collection/countable.rkt") (lib "data/collection/private/util.rkt") (lib "data/collection/contract.rkt") (lib "data/collection/experimental/quasi.rkt") (lib "data/collection.rkt"))) (name . "collections-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-collections?path=collections-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c4822fc200b0488922cd6e86b4f2ea7cf8c565da") (source . "git://github.com/lexi-lambda/racket-collections?path=collections-lib") (source_url . "http://github.com/lexi-lambda/racket-collections/tree/master?path=collections-lib"))))))) ("collections-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collections-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collections-test.txt"))) (checksum . "c4822fc200b0488922cd6e86b4f2ea7cf8c565da") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "collections-lib" "match-plus" "rackunit-lib")) (description . "") (implies . ()) (last-checked . 1632902896) (last-edit . 1475261238) (last-updated . 1597605718) (modules . ((lib "tests/data/collection/dict.rkt") (lib "tests/data/collection/contract.rkt") (lib "tests/data/collection/experimental/quasi.rkt") (lib "tests/data/collection/sequence.rkt") (lib "tests/data/collection/match.rkt") (lib "tests/data/collection/collection.rkt") (lib "tests/data/collection/sequence-lib.rkt"))) (name . "collections-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-collections?path=collections-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c4822fc200b0488922cd6e86b4f2ea7cf8c565da") (source . "git://github.com/lexi-lambda/racket-collections?path=collections-test") (source_url . "http://github.com/lexi-lambda/racket-collections/tree/master?path=collections-test"))))))) ("collector2" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "collector2" "doc/collector2@collector2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/collector2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/collector2.txt"))) (checksum . "dd5ee2da83a1221d7d3820fa42653b61b6fc82c5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1622562499) (dependencies . ("base" "counter" "ebuild" "threading-lib" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "generate Gentoo ebuild scripts from Racket catalog packages") (implies . ()) (last-checked . 1632902896) (last-edit . 1630361942) (last-updated . 1630357689) (modules . ((lib "collector2/private/pkgs/all.rkt") (lib "collector2/private/epoch/epoch.rkt") (lib "collector2/private/repo/repo.rkt") (lib "collector2/private/collector2.rkt") (lib "collector2/scribblings/collector2.scrbl") (lib "collector2/private/pkgs/hash.rkt") (lib "collector-legacy/collector.rkt") (lib "collector2/private/pkgs/separator.rkt") (lib "collector2/private/repo/helpers.rkt") (lib "collector2/private/pkgs/filter.rkt") (lib "collector2/private/pkgs/bin-all-data.rkt") (lib "collector2/private/epoch/tests.rkt") (lib "collector2/main.rkt") (lib "collector2/private/pkgs/pkgs.rkt") (lib "collector2/private/repo/tests.rkt") (lib "collector2/private/pkgs/bin-all-names.rkt") (lib "collector2/private/pkgs/tests.rkt"))) (name . "collector2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:xgqt@riseup.net . #t) (automation . #t) (gentoo . #t) (ring:1 . #t))) (source . "https://gitlab.com/src_prepare/racket/collector2.git") (tags . ("automation" "gentoo")) (versions . #hash((default . #hasheq((checksum . "dd5ee2da83a1221d7d3820fa42653b61b6fc82c5") (source . "https://gitlab.com/src_prepare/racket/collector2.git") (source_url . "https://gitlab.com/src_prepare/racket/collector2.git"))))))) ("colon-kw" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "colon-kw" "doc/colon-kw@colon-kw/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/colon-kw.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/colon-kw.txt"))) (checksum . "a338070d902753978a5a297c737845c013231ea7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "a lang-extension for writing :kw for #:kw") (implies . ()) (last-checked . 1632902896) (last-edit . 1466340908) (last-updated . 1527137254) (modules . ((lib "colon-kw/tests/both.rkt") (lib "colon-kw/scribblings/colon-kw.scrbl") (lib "colon-kw/lang/reader.rkt") (lib "colon-kw/tests/test.rkt") (lib "kw-colon/reader.rkt") (lib "colon-kw/lang/lexer.rkt") (lib "kw-colon/tests/test.rkt") (lib "kw-colon/lang/reader.rkt") (lib "colon-kw/reader.rkt"))) (name . "colon-kw") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (keywords . #t) (lang-extension . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/AlexKnauth/colon-kw") (tags . ("keywords" "lang-extension" "syntax")) (versions . #hash((default . #hasheq((checksum . "a338070d902753978a5a297c737845c013231ea7") (source . "git://github.com/AlexKnauth/colon-kw") (source_url . "http://github.com/AlexKnauth/colon-kw/tree/master"))))))) ("colon-match" . #hasheq((author . "alexander@knauth.org jensaxel@soegaard.net") (authors . ("alexander@knauth.org" "jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "colon-match" "doc/colon-match@colon-match/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/colon-match.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/colon-match.txt"))) (checksum . "7cccb5fdb4e5301ec2b2d38c553ad3050f7d542d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "sandbox-lib" "racket-doc")) (description . "match with colon notation, based on discussion with Jens Axel Søgaard on users list ") (implies . ()) (last-checked . 1632902897) (last-edit . 1424704309) (last-updated . 1510210861) (modules . ((lib "colon-match/main.rkt") (lib "colon-match/docs/colon-match.scrbl"))) (name . "colon-match") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (author:jensaxel@soegaard.net . #t) (match . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/colon-match") (tags . ("match")) (versions . #hash((default . #hasheq((checksum . "7cccb5fdb4e5301ec2b2d38c553ad3050f7d542d") (source . "git://github.com/AlexKnauth/colon-match") (source_url . "http://github.com/AlexKnauth/colon-match/tree/master"))))))) ("colophon" . #hasheq((author . "shr@basus.me") (authors . ("shr@basus.me")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/colophon.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/colophon.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/colophon.txt"))) (checksum . "04989fbffb385a09d4f6b83ab9a132fa85ec8454") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1591233765) (dependencies . (("base" #:version "6.3") ("pollen" #:version "2.2") "scribble-doc" "racket-doc" "scribble-lib")) (description . "An experimental static site generator") (implies . ()) (last-checked . 1632902897) (last-edit . 1591233765) (last-updated . 1608344153) (modules . ((lib "colophon/link.rkt") (lib "colophon/private/command.rkt") (lib "website/posts/pollen.rkt") (lib "colophon/predicates.rkt") (lib "colophon/tags.rkt") (lib "pollen/bootstrap.rkt") (lib "colophon/common.rkt") (lib "colophon/components.rkt") (lib "website/pollen.rkt") (lib "pollen/html5.rkt"))) (name . "colophon") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:shr@basus.me . #t) (documents . #t) (pollen . #t) (ring:1 . #t))) (source . "https://github.com/basus/colophon.git") (tags . ("documents" "pollen")) (versions . #hash((default . #hasheq((checksum . "04989fbffb385a09d4f6b83ab9a132fa85ec8454") (source . "https://github.com/basus/colophon.git") (source_url . "https://github.com/basus/colophon.git"))))))) ("color-flood" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/color-flood.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/color-flood.txt"))) (checksum . "86f82e312587e982695ef5dd687e247f97bae7f5") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "bazaar" "gui-lib" "rackunit-lib")) (description . "A game where the player must fill the board with colors before its opponent") (implies . ()) (last-checked . 1632902897) (last-edit . 1428324507) (last-updated . 1596547378) (modules . ((lib "color-flood/main.rkt") (lib "color-flood/color-flood.rkt"))) (name . "color-flood") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (games . #t) (gui . #t) (ring:1 . #t))) (source . "git://github.com/Metaxal/color-flood") (tags . ("games" "gui")) (versions . #hash((default . #hasheq((checksum . "86f82e312587e982695ef5dd687e247f97bae7f5") (source . "git://github.com/Metaxal/color-flood") (source_url . "http://github.com/Metaxal/color-flood/tree/master"))))))) ("color-strings" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/color-strings.txt") (docs . (("main" "color-strings" "doc/color-strings@color-strings/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/color-strings.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/color-strings.txt"))) (checksum . "6f6f5594f46ebcdc96ab9c82edc4e5a90d6f0896") (checksum-error . #f) (collection . "colors-as-strings") (conflicts . ()) (date-added . 1569966162) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Makes identifiers for common colors.  Prevents silly mispellings.") (implies . ()) (last-checked . 1632902898) (last-edit . 1569966162) (last-updated . 1582227065) (modules . ((lib "colors-as-strings/main.rkt") (lib "colors-as-strings/scribblings/color-strings.scrbl"))) (name . "color-strings") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/color-strings.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6f6f5594f46ebcdc96ab9c82edc4e5a90d6f0896") (source . "https://github.com/thoughtstem/color-strings.git") (source_url . "https://github.com/thoughtstem/color-strings.git"))))))) ("colorize" . #hasheq((author . "yanyingwang1@gmail.com") (authors . ("yanyingwang1@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "colorize" "doc/colorize@colorize/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/colorize.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/colorize.txt"))) (checksum . "157878ae018b5b6aebeb5e5e51d73ca38af4ad08") (checksum-error . #f) (collection . "colorize") (conflicts . ()) (date-added . 1566386269) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "colorize your console") (implies . ()) (last-checked . 1632902898) (last-edit . 1586250599) (last-updated . 1588613742) (modules . ((lib "colorize/main.rkt") (lib "colorize/scribblings/colorize.scrbl"))) (name . "colorize") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (ansi . #t) (author:yanyingwang1@gmail.com . #t) (color . #t) (console . #t) (ring:1 . #t))) (source . "https://github.com/yanyingwang/colorize.git") (tags . ("ansi" "color" "console")) (versions . #hash((default . #hasheq((checksum . "157878ae018b5b6aebeb5e5e51d73ca38af4ad08") (source . "https://github.com/yanyingwang/colorize.git") (source_url . "https://github.com/yanyingwang/colorize.git"))))))) ("colormaps" . #hasheq((author . "alexharsanyi@gmail.com") (authors . ("alexharsanyi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "colormaps" "doc/colormaps@colormaps/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/colormaps.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/colormaps.txt"))) (checksum . "f0dc88be58bae0d0331bfa778987460d7d71a08a") (checksum-error . #f) (collection . "colormaps") (conflicts . ()) (date-added . 1581125209) (dependencies . ("base" "plot-lib" "pict-lib" "draw-lib" "scribble-lib" "racket-doc" "rackunit-lib" "pict-doc" "plot-doc" "plot-gui-lib")) (description . "Additional colormaps for the Racket plot package") (implies . ()) (last-checked . 1632902898) (last-edit . 1581125209) (last-updated . 1595082105) (modules . ((lib "colormaps/utils.rkt") (lib "colormaps/tol.rkt") (lib "colormaps/cb.rkt") (lib "colormaps/main.rkt") (lib "colormaps/scribblings/colormaps.scrbl"))) (name . "colormaps") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexharsanyi@gmail.com . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/alex-hhh/colormaps.git") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "f0dc88be58bae0d0331bfa778987460d7d71a08a") (source . "https://github.com/alex-hhh/colormaps.git") (source_url . "https://github.com/alex-hhh/colormaps.git"))))))) ("colors" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "colors" "doc/colors@colors/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/colors.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/colors.txt"))) (checksum . "103aa2aa71310b0c7a83b33714593f01ce24beab") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1551898548) (dependencies . ("base" "draw-lib" "gui-lib" "racket-doc" "scribble-lib" "debug" "rackunit-lib")) (description . "A library for HSB colors.") (implies . ()) (last-checked . 1632902898) (last-edit . 1551898548) (last-updated . 1574702771) (modules . ((lib "colors/hsl.rkt") (lib "colors/hsv.rkt") (lib "colors/private/shared.rkt") (lib "colors/main.rkt") (lib "colors/scribblings/colors.scrbl") (lib "colors/hsi.rkt"))) (name . "colors") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:spencer@florence.io . #t) (colorspace . #t) (graphics . #t) (ring:1 . #t))) (source . "https://github.com/florence/colors.git") (tags . ("colorspace" "graphics")) (versions . #hash((default . #hasheq((checksum . "103aa2aa71310b0c7a83b33714593f01ce24beab") (source . "https://github.com/florence/colors.git") (source_url . "https://github.com/florence/colors.git"))))))) ("colors-as-strings" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . "server/built/deps/colors-as-strings.txt") (docs . (("extract" "color-strings" "doc/color-strings@colors-as-strings/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/colors-as-strings.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/colors-as-strings.txt"))) (checksum . "6f6f5594f46ebcdc96ab9c82edc4e5a90d6f0896") (checksum-error . #f) (collection . "colors-as-strings") (conflicts . ("color-strings")) (date-added . 1570065338) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Provides common color strings as identifiers.") (implies . ()) (last-checked . 1632902899) (last-edit . 1570067156) (last-updated . 1582227067) (modules . ((lib "colors-as-strings/main.rkt") (lib "colors-as-strings/scribblings/color-strings.scrbl"))) (name . "colors-as-strings") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:2 . #t))) (source . "https://github.com/thoughtstem/colors-as-strings.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6f6f5594f46ebcdc96ab9c82edc4e5a90d6f0896") (source . "https://github.com/thoughtstem/colors-as-strings.git") (source_url . "https://github.com/thoughtstem/colors-as-strings.git"))))))) ("com-win32-i386" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for base package") (implies . ()) (last-checked . 1632902899) (last-edit . 1576860307) (last-updated . 1595020965) (modules . ()) (name . "com-win32-i386") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "d7b5daa77d467cee1490ae505f066cdf1f2031e5") (source . "https://pkg-sources.racket-lang.org/pkgs/d7b5daa77d467cee1490ae505f066cdf1f2031e5/com-win32-i386.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/d7b5daa77d467cee1490ae505f066cdf1f2031e5/com-win32-i386.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("com-win32-x86_64" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for base package") (implies . ()) (last-checked . 1632902900) (last-edit . 1576860307) (last-updated . 1595020983) (modules . ()) (name . "com-win32-x86_64") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "94962e13500cdb4cac7ddc5f505899cec88e9648") (source . "https://pkg-sources.racket-lang.org/pkgs/94962e13500cdb4cac7ddc5f505899cec88e9648/com-win32-x86_64.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/94962e13500cdb4cac7ddc5f505899cec88e9648/com-win32-x86_64.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("combinator-parser" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "combinator-parser" "doc/combinator-parser@combinator-parser/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/combinator-parser.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/combinator-parser.txt"))) (checksum . "e64f938862f47f0e8bab8d6f406a8fa6a203e435") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "compatibility-lib" "scribble-lib" "parser-tools-doc" "racket-doc" "at-exp-lib" "lazy" "scheme-lib")) (description . "A combinator parser library retained for backwards compatibility. Using parser-tools/yacc or ragg instead is recommended.") (implies . ()) (last-checked . 1632902901) (last-edit . 1368287415) (last-updated . 1502812300) (modules . ((lib "combinator-parser/private-combinator/parser-sigs.rkt") (lib "combinator-parser/main.rkt") (lib "combinator-parser/private-combinator/combinator.rkt") (lib "combinator-parser/combinator-unit.rkt") (lib "combinator-parser/private-combinator/errors.rkt") (lib "combinator-parser/private-combinator/combinator-parser.rkt") (lib "combinator-parser/scribblings/combinator-parser.scrbl") (lib "combinator-parser/private-combinator/structs.rkt") (lib "combinator-parser/examples/combinator-example.rkt"))) (name . "combinator-parser") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (legacy . #t) (parsing . #t) (ring:1 . #t))) (source . "github://github.com/takikawa/combinator-parser/master") (tags . ("legacy" "parsing")) (versions . #hash((default . #hasheq((checksum . "e64f938862f47f0e8bab8d6f406a8fa6a203e435") (source . "github://github.com/takikawa/combinator-parser/master") (source_url . "http://github.com/takikawa/combinator-parser/tree/master"))))))) ("comm-panel" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/comm-panel.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/comm-panel.txt") (test-failure-log . "server/built/test-fail/comm-panel.txt") (test-success-log . #f))) (checksum . "44225da9b3cd1f883beef9c03f20431f80239530") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("happy-names" "aws")) (description . "Racket GUI widget for sending, receiving, listening, and broadcasting strings over  AWS SQS.") (implies . ()) (last-checked . 1632902901) (last-edit . 1529089334) (last-updated . 1529166745) (modules . ((lib "comm-panel/ui.rkt") (lib "comm-panel/broadcast-listen.rkt") (lib "comm-panel/main.rkt") (lib "comm-panel/computer-queues.rkt") (lib "comm-panel/string-sending.rkt"))) (name . "comm-panel") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:stephen@thoughtstem.com . #t) (aws . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/comm-panel.git") (tags . ("aws" "gui")) (versions . #hash((default . #hasheq((checksum . "44225da9b3cd1f883beef9c03f20431f80239530") (source . "https://github.com/thoughtstem/comm-panel.git") (source_url . "https://github.com/thoughtstem/comm-panel.git"))))))) ("command-line-ext" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "command-line-ext" "doc/command-line-ext@command-line-ext/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/command-line-ext.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/command-line-ext.txt"))) (checksum . "e980b3b31d7a0cb6e0339335bde860f35a0fe471") (checksum-error . #f) (collection . "command-line-ext") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "fancy-app" "generic-syntax-expanders" "reprovide-lang" "lens" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "Extensible form of command-line with command-line-flag-expanders") (implies . ()) (last-checked . 1632902901) (last-edit . 1500074696) (last-updated . 1591173985) (modules . ((lib "command-line-ext/private/core-form.scrbl") (lib "command-line-ext/main.scrbl") (lib "command-line-ext/private/doc-util.rkt") (lib "command-line-ext/private/library-expanders.rkt") (lib "command-line-ext/private/example-script.rkt") (lib "command-line-ext/main.rkt") (lib "command-line-ext/private/extensible-command-line-ext-syntax.rkt") (lib "command-line-ext/private/core-command-line-ext-syntax.rkt"))) (name . "command-line-ext") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (generic-syntax-expanders . #t) (ring:1 . #t) (terminal . #t))) (source . "git://github.com/jackfirth/command-line-ext") (tags . ("experimental" "generic-syntax-expanders" "terminal")) (versions . #hash((default . #hasheq((checksum . "e980b3b31d7a0cb6e0339335bde860f35a0fe471") (source . "git://github.com/jackfirth/command-line-ext") (source_url . "http://github.com/jackfirth/command-line-ext/tree/master"))))))) ("command-tree" . #hasheq((author . "jerome.martin.dev@gmail.com") (authors . ("jerome.martin.dev@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/command-tree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/command-tree.txt"))) (checksum . "3a5dd35d43f3be52fb9743361adcb53eabcb8a3a") (checksum-error . #f) (collection . "command-tree") (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Handle tree-style (à la git) command line arguments ") (implies . ()) (last-checked . 1632902902) (last-edit . 1515169603) (last-updated . 1521553367) (modules . ((lib "command-tree/main.rkt"))) (name . "command-tree") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (arguments . #t) (author:jerome.martin.dev@gmail.com . #t) (cli . #t) (parameters . #t) (ring:1 . #t) (terminal . #t) (tree . #t))) (source . "https://github.com/euhmeuh/command-tree.git") (tags . ("arguments" "cli" "parameters" "terminal" "tree")) (versions . #hash((default . #hasheq((checksum . "3a5dd35d43f3be52fb9743361adcb53eabcb8a3a") (source . "https://github.com/euhmeuh/command-tree.git") (source_url . "https://github.com/euhmeuh/command-tree.git"))))))) ("common-icons" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/common-icons.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ff6013cbb58ca0914b13a53bcdd2b4dd9bc609d3") (checksum-error . #f) (collection . "ts-icons") (conflicts . ("ts-icons")) (date-added . 1569966952) (dependencies . ("base" "https://github.com/thoughtstem/define-assets-from.git" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A (currently) very small set of icons we've used across multiple projects.  We'll add more here as that continues to happen.") (implies . ()) (last-checked . 1632902902) (last-edit . 1569966952) (last-updated . 1582227069) (modules . ((lib "ts-icons/scribblings/ts-icons.scrbl") (lib "ts-icons/main.rkt"))) (name . "common-icons") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:2 . #t))) (source . "https://github.com/thoughtstem/common-icons.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "ff6013cbb58ca0914b13a53bcdd2b4dd9bc609d3") (source . "https://github.com/thoughtstem/common-icons.git") (source_url . "https://github.com/thoughtstem/common-icons.git"))))))) ("compact-annotations" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "compact-annotations" "doc/compact-annotations@compact-annotations/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/compact-annotations.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/compact-annotations.txt"))) (checksum . "dcd5f87dec21f40904e92eefb747472151bd3ace") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "cover" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "Function type annotation syntax for Typed Racket similar to Haskell") (implies . ()) (last-checked . 1632902902) (last-edit . 1500074831) (last-updated . 1502812301) (modules . ((lib "compact-annotations/compact-annotations.scrbl") (lib "compact-annotations/examples.rkt") (lib "compact-annotations/main.rkt"))) (name . "compact-annotations") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (ring:1 . #t) (sugar . #t) (typed-racket . #t) (types . #t))) (source . "git://github.com/jackfirth/compact-annotations") (tags . ("experimental" "sugar" "typed-racket" "types")) (versions . #hash((default . #hasheq((checksum . "dcd5f87dec21f40904e92eefb747472151bd3ace") (source . "git://github.com/jackfirth/compact-annotations") (source_url . "http://github.com/jackfirth/compact-annotations/tree/master"))))))) ("compatibility" . #hash((author . "eli@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org samth@racket-lang.org") (authors . ("eli@racket-lang.org" "mflatt@racket-lang.org" "robby@racket-lang.org" "samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("compatibility-lib" "compatibility-doc")) (description . "Libraries that implement legacy interfaces") (implies . ("compatibility-lib" "compatibility-doc")) (last-checked . 1632902902) (last-edit . 1417659583) (last-updated . 1606516975) (modules . ()) (name . "compatibility") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "492030dac6f095045ce8a13dca75204dd5f34e32") (source . "git://github.com/racket/compatibility/?path=compatibility") (source_url . "git://github.com/racket/compatibility/?path=compatibility"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("compatibility-doc" . #hash((author . "eli@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org samth@racket-lang.org") (authors . ("eli@racket-lang.org" "mflatt@racket-lang.org" "robby@racket-lang.org" "samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mzlib" "doc/mzlib@compatibility-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "compatibility-lib" "pconvert-lib" "sandbox-lib" "compiler-lib" "gui-lib" "racket-doc" "data-doc" "mzscheme-doc" "scheme-lib")) (description . "documentation part of compatibility") (implies . ()) (last-checked . 1632902903) (last-edit . 1417659583) (last-updated . 1606516976) (modules . ((lib "mzlib/scribblings/integer-set.scrbl") (lib "mzlib/scribblings/include.scrbl") (lib "mzlib/scribblings/match.scrbl") (lib "mzlib/scribblings/contract-label.rkt") (lib "mzlib/scribblings/struct.scrbl") (lib "mzlib/scribblings/etc.scrbl") (lib "mzlib/scribblings/thread.scrbl") (lib "mzlib/scribblings/match-grammar.rkt") (lib "mzlib/scribblings/list.scrbl") (lib "mzlib/scribblings/compile.scrbl") (lib "mzlib/scribblings/string.scrbl") (lib "mzlib/scribblings/mzlib.scrbl") (lib "mzlib/scribblings/compat.scrbl") (lib "mzlib/scribblings/cml.scrbl") (lib "mzlib/scribblings/contract.scrbl") (lib "mzlib/scribblings/traceld.scrbl") (lib "mzlib/scribblings/plt-match.scrbl") (lib "mzlib/scribblings/cmdline.scrbl") (lib "mzlib/scribblings/math.scrbl") (lib "mzlib/scribblings/serialize.scrbl") (lib "mzlib/scribblings/common.rkt") (lib "mzlib/scribblings/file.scrbl") (lib "mzlib/scribblings/os.scrbl") (lib "mzlib/scribblings/pconvert-prop.scrbl") (lib "mzlib/scribblings/pregexp.scrbl") (lib "mzlib/scribblings/restart.scrbl") (lib "mzlib/scribblings/awk.scrbl") (lib "mzlib/scribblings/unit.scrbl") (lib "mzlib/scribblings/sendevent.scrbl") (lib "mzlib/scribblings/pconvert.scrbl") (lib "mzlib/scribblings/transcr.scrbl") (lib "mzlib/scribblings/port.scrbl") (lib "mzlib/scribblings/sandbox.scrbl") (lib "mzlib/scribblings/for.scrbl") (lib "mzlib/scribblings/kw.scrbl"))) (name . "compatibility-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:eli@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "492030dac6f095045ce8a13dca75204dd5f34e32") (source . "git://github.com/racket/compatibility/?path=compatibility-doc") (source_url . "git://github.com/racket/compatibility/?path=compatibility-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("compatibility-lib" . #hash((author . "eli@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org samth@racket-lang.org") (authors . ("eli@racket-lang.org" "mflatt@racket-lang.org" "robby@racket-lang.org" "samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "base" "net-lib" "sandbox-lib")) (description . "implementation (no documentation) part of compatibility") (implies . ()) (last-checked . 1632902903) (last-edit . 1417659583) (last-updated . 1606516977) (modules . ((lib "compatibility/package.rkt") (lib "mzscheme/private/old-rp.rkt") (lib "mzlib/unit.rkt") (lib "net/head-unit.rkt") (lib "mzlib/defmacro.rkt") (lib "mzlib/trace.rkt") (lib "mzlib/private/structure-helper.rkt") (lib "mzlib/thread.rkt") (lib "mzlib/process.rkt") (lib "mzlib/list.rkt") (lib "mzlib/cm-accomplice.rkt") (lib "mzlib/match.rkt") (lib "mzlib/foreign.rkt") (lib "mzlib/private/contract-mutable.rkt") (lib "mzscheme/private/old-procs.rkt") (lib "mzlib/kw.rkt") (lib "net/smtp-sig.rkt") (lib "mzlib/tar.rkt") (lib "net/base64-unit.rkt") (lib "mzlib/private/stxset.rkt") (lib "racket/mpair.rkt") (lib "mzlib/md5.rkt") (lib "mzlib/pretty.rkt") (lib "mzlib/string.rkt") (lib "net/url-sig.rkt") (lib "net/pop3-unit.rkt") (lib "mzlib/zip.rkt") (lib "mzlib/private/contract-arr-checks.rkt") (lib "net/nntp-sig.rkt") (lib "mzlib/awk.rkt") (lib "scheme/package.rkt") (lib "net/dns-unit.rkt") (lib "mzlib/cml.rkt") (lib "mzlib/inflate.rkt") (lib "mzlib/private/sigutil.rkt") (lib "net/url-unit.rkt") (lib "mzlib/compile.rkt") (lib "mzlib/private/contract-arrow.rkt") (lib "net/uri-codec-unit.rkt") (lib "mzlib/a-unit.rkt") (lib "mzlib/private/unitidmap.rkt") (lib "mzlib/include.rkt") (lib "mzlib/date.rkt") (lib "lazy/mz-without-promises.rkt") (lib "net/nntp-unit.rkt") (lib "mzlib/unitsig.rkt") (lib "mzlib/for.rkt") (lib "compatibility/mlist.rkt") (lib "net/cookie-unit.rkt") (lib "mzlib/serialize.rkt") (lib "mzlib/pregexp.rkt") (lib "net/ftp-unit.rkt") (lib "mzlib/traceld.rkt") (lib "mzlib/transcr.rkt") (lib "mzlib/private/contract-define.rkt") (lib "net/cgi-unit.rkt") (lib "racket/package.rkt") (lib "mzscheme/private/old-if.rkt") (lib "mzlib/cm.rkt") (lib "mzlib/stxparam.rkt") (lib "mzlib/private/package-helper.rkt") (lib "mzlib/struct.rkt") (lib "mzlib/math.rkt") (lib "mzlib/compat.rkt") (lib "mzscheme/main.rkt") (lib "mzlib/unit200.rkt") (lib "mzlib/deflate.rkt") (lib "mzscheme/lang/reader.rkt") (lib "net/base64-sig.rkt") (lib "net/qp-sig.rkt") (lib "net/mime-sig.rkt") (lib "net/cgi-sig.rkt") (lib "mzlib/unit-exptime.rkt") (lib "mzlib/shared.rkt") (lib "mzlib/runtime-path.rkt") (lib "compatibility/defmacro.rkt") (lib "mzlib/port.rkt") (lib "mzlib/etc.rkt") (lib "mzlib/restart.rkt") (lib "net/cookie-sig.rkt") (lib "net/mime-unit.rkt") (lib "mzlib/sendevent.rkt") (lib "net/ftp-sig.rkt") (lib "net/pop3-sig.rkt") (lib "mzlib/contract.rkt") (lib "mzlib/unitsig200.rkt") (lib "mzlib/class.rkt") (lib "mzlib/os.rkt") (lib "mzlib/sandbox.rkt") (lib "mzlib/a-signature.rkt") (lib "mzlib/async-channel.rkt") (lib "net/smtp-unit.rkt") (lib "mzlib/integer-set.rkt") (lib "mzscheme/private/old-ds.rkt") (lib "net/sendmail-unit.rkt") (lib "mzlib/trait.rkt") (lib "net/imap-sig.rkt") (lib "mzlib/file.rkt") (lib "net/uri-codec-sig.rkt") (lib "net/sendmail-sig.rkt") (lib "mzlib/plt-match.rkt") (lib "mzscheme/private/stxmz-body.rkt") (lib "net/head-sig.rkt") (lib "mzlib/private/contract-struct.rkt") (lib "mzlib/private/stxparamkey.rkt") (lib "scheme/mpair.rkt") (lib "mzlib/private/sigmatch.rkt") (lib "mzlib/private/contract-arr-obj-helpers.rkt") (lib "mzlib/surrogate.rkt") (lib "mzlib/private/contract-object.rkt") (lib "mzlib/control.rkt") (lib "net/qp-unit.rkt") (lib "net/imap-unit.rkt") (lib "mzlib/cmdline.rkt") (lib "net/dns-sig.rkt"))) (name . "compatibility-lib") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "492030dac6f095045ce8a13dca75204dd5f34e32") (source . "git://github.com/racket/compatibility/?path=compatibility-lib") (source_url . "git://github.com/racket/compatibility/?path=compatibility-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("compatibility-test" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-test" "compatibility-lib" "drracket-tool-lib" "rackunit-lib" ("pconvert-lib" #:version "1.1"))) (description . "tests for compatibility-lib") (implies . ()) (last-checked . 1632902903) (last-edit . 1417659583) (last-updated . 1606516978) (modules . ((lib "tests/racket/package-arrows.rkt") (lib "tests/racket/package.rkt") (lib "tests/mzlib/test.rkt"))) (name . "compatibility-test") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "492030dac6f095045ce8a13dca75204dd5f34e32") (source . "git://github.com/racket/compatibility/?path=compatibility-test") (source_url . "git://github.com/racket/compatibility/?path=compatibility-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("compiler" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("compiler-lib")) (description . "Racket compilation tools, such as `raco exe'") (implies . ("compiler-lib")) (last-checked . 1632902903) (last-edit . 1464388807) (last-updated . 1632665349) (modules . ()) (name . "compiler") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "git://github.com/racket/racket?path=pkgs/compiler") (source_url . "http://github.com/racket/racket/tree/master?path=pkgs%2Fcompiler"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("compiler-goodies" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "compiler-goodies" "doc/compiler-goodies@compiler-goodies/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/compiler-goodies.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/compiler-goodies.txt"))) (checksum . "4378d1039bd958ee4bfddafc5ec4dd8ef15bd5bb") (checksum-error . #f) (collection . "compiler-goodies") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "compiler-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1632902904) (last-edit . 1422049375) (last-updated . 1502812303) (modules . ((lib "compiler-goodies/main.rkt") (lib "compiler-goodies/scribblings/compiler-goodies.scrbl"))) (name . "compiler-goodies") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "git://github.com/LeifAndersen/racket-compiler-goodies") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4378d1039bd958ee4bfddafc5ec4dd8ef15bd5bb") (source . "git://github.com/LeifAndersen/racket-compiler-goodies") (source_url . "http://github.com/LeifAndersen/racket-compiler-goodies/tree/master"))))))) ("compiler-lib" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "8.1.0.2") "scheme-lib" "rackunit-lib" ("zo-lib" #:version "1.3"))) (description . "implementation (no documentation) part of compiler") (implies . ("zo-lib")) (last-checked . 1632902904) (last-edit . 1464388807) (last-updated . 1632665374) (modules . ((lib "compiler/private/deserialize.rkt") (lib "compiler/option-unit.rkt") (lib "compiler/commands/test.rkt") (lib "compiler/commands/exe-dir.rkt") (lib "compiler/demodularizer/module-path.rkt") (lib "compiler/demodularizer/run.rkt") (lib "launcher/launcher-sig.rkt") (lib "compiler/demodularizer/name.rkt") (lib "compiler/sig.rkt") (lib "compiler/decompile.rkt") (lib "compiler/commands/read.rkt") (lib "compiler/demodularizer/main.rkt") (lib "compiler/demodularizer/write.rkt") (lib "compiler/demodularizer/import.rkt") (lib "compiler/commands/make.rkt") (lib "launcher/launcher-unit.rkt") (lib "compiler/commands/unpack.rkt") (lib "compiler/demodularizer/remap.rkt") (lib "compiler/demodularizer/gc.rkt") (lib "compiler/private/chez.rkt") (lib "setup/option-unit.rkt") (lib "setup/option-sig.rkt") (lib "compiler/bundle-dist.rkt") (lib "compiler/demodularizer/find.rkt") (lib "compiler/commands/decompile.rkt") (lib "compiler/demodularizer/batch.rkt") (lib "setup/setup-unit.rkt") (lib "compiler/embed-sig.rkt") (lib "compiler/compiler-unit.rkt") (lib "compiler/demodularizer/bundle.rkt") (lib "compiler/demodularizer/merge.rkt") (lib "compiler/commands/expand.rkt") (lib "compiler/commands/pack.rkt") (lib "compiler/private/language.rkt") (lib "compiler/demodularizer/linklet.rkt") (lib "compiler/commands/exe.rkt") (lib "compiler/embed-unit.rkt"))) (name . "compiler-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "git://github.com/racket/racket?path=pkgs/compiler-lib") (source_url . "http://github.com/racket/racket/tree/master?path=pkgs%2Fcompiler-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("compiler-test" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "icons" "compiler-lib" "eli-tester" "rackunit-lib" "net-lib" "scheme-lib" "compatibility-lib" "gui-lib" "htdp-lib" "plai-lib" "rackunit-lib" "dynext-lib" "mzscheme-lib")) (description . "tests for compiler-lib") (implies . ()) (last-checked . 1632902904) (last-edit . 1464388807) (last-updated . 1632665398) (modules . ((lib "tests/compiler/test/runtime.rkt") (lib "tests/compiler/test/racket.rkt") (lib "tests/compiler/embed/embed-me5.rkt") (lib "tests/compiler/embed/embed-me13.rkt") (lib "tests/compiler/embed/embed-me36.rkt") (lib "tests/compiler/embed/embed-planet-1/alt.rkt") (lib "tests/compiler/embed/embed-me29-2.rkt") (lib "tests/compiler/zo-test.rkt") (lib "tests/compiler/embed/embed-me20.rkt") (lib "tests/compiler/test/args.rkt") (lib "tests/compiler/make.rkt") (lib "tests/compiler/commands/test.rkt") (lib "tests/compiler/embed/embed-me37.rkt") (lib "tests/compiler/embed/embed-me18.rkt") (lib "tests/compiler/ctool.rkt") (lib "tests/compiler/test/extensions/a-omit-1.rkt") (lib "tests/compiler/embed/test.rkt") (lib "tests/compiler/collection-zos.rkt") (lib "tests/compiler/embed/embed-isl.rkt") (lib "tests/compiler/embed/embed-me6.rkt") (lib "tests/compiler/embed/embed-me21.rkt") (lib "tests/compiler/zo-test-worker.rkt") (lib "tests/compiler/embed/embed-planet-2/main.rkt") (lib "tests/compiler/embed/embed-planet-1/main.rkt") (lib "tests/compiler/embed/embed-me35.rkt") (lib "tests/compiler/embed/embed-isll.rkt") (lib "tests/compiler/test/extensions/b-include-1.rkt") (lib "tests/compiler/test/scheme.rkt") (lib "tests/compiler/embed/embed-planet-1/dyn-sub.rkt") (lib "tests/compiler/embed/embed-me23.rkt") (lib "tests/compiler/embed/embed-bsla.rkt") (lib "tests/compiler/embed/embed-me3.rkt") (lib "tests/compiler/demodularizer/tests/racket-5.rkt") (lib "tests/compiler/embed/embed-me30.rkt") (lib "tests/compiler/embed/embed-me28.rkt") (lib "tests/compiler/embed/embed-me2.rkt") (lib "tests/compiler/embed/embed-me40b.rkt") (lib "tests/compiler/embed/embed-me22.rkt") (lib "tests/compiler/embed/embed-me34.rkt") (lib "tests/compiler/embed/embed-me27.rkt") (lib "tests/compiler/embed/embed-me11.rkt") (lib "tests/compiler/embed/embed-me16.rkt") (lib "tests/compiler/embed/embed-me6b.rkt") (lib "tests/compiler/test/b.rkt") (lib "tests/compiler/test/a.rkt") (lib "tests/compiler/embed/embed-me1.rkt") (lib "tests/compiler/embed/embed-me33.rkt") (lib "tests/compiler/embed/embed-planet-1/other.rkt") (lib "tests/compiler/embed/embed-me18a.rkt") (lib "tests/compiler/embed/embed-me17a.rkt") (lib "tests/compiler/embed/embed-planet-2/private/sub.rkt") (lib "tests/compiler/embed/embed-me34-print.rkt") (lib "tests/compiler/embed/embed-me25.rkt") (lib "tests/compiler/embed/embed-me39.rkt") (lib "tests/compiler/embed/embed-me14.rkt") (lib "tests/compiler/embed/embed-me29.rkt") (lib "tests/compiler/embed/embed-place2.rkt") (lib "tests/compiler/embed/embed-place.rkt") (lib "tests/compiler/demodularizer/tests/base-5.rkt") (lib "tests/compiler/embed/embed-me24.rkt") (lib "tests/compiler/embed/embed-me12.rkt") (lib "tests/compiler/embed/embed-me40.rkt") (lib "tests/compiler/embed/embed-me17.rkt") (lib "tests/compiler/test/d/.ignored.rkt") (lib "tests/compiler/demodularizer/tests/kernel-5.rkt") (lib "tests/compiler/embed/embed-me1f.rkt") (lib "tests/compiler/embed/embed-asl.rkt") (lib "tests/compiler/regression.rkt") (lib "tests/compiler/test/output.rkt") (lib "tests/compiler/embed/embed-bsl.rkt") (lib "tests/compiler/embed/embed-me26.rkt") (lib "tests/compiler/zo-test-util.rkt") (lib "tests/compiler/embed/embed-me1e.rkt") (lib "tests/compiler/zo-exs.rkt") (lib "tests/compiler/embed/embed-me15.rkt") (lib "tests/compiler/embed/embed-me38.rkt") (lib "tests/compiler/test/d/c.rkt") (lib "tests/compiler/embed/embed-me1b.rkt") (lib "tests/compiler/embed/embed-me37b.rkt") (lib "tests/compiler/demodularizer/demod-test.rkt") (lib "tests/compiler/embed/embed-planet-1/has-sub.rkt") (lib "tests/compiler/test/d/d.rkt") (lib "tests/compiler/embed/embed-me19.rkt") (lib "tests/compiler/embed/embed-me15-one.rkt") (lib "tests/compiler/embed/embed-me9.rkt") (lib "tests/compiler/zo.rkt") (lib "tests/compiler/embed/embed-me31.rkt") (lib "tests/compiler/embed/embed-me1d.rkt") (lib "tests/compiler/embed/embed-me12-rd.rkt") (lib "tests/compiler/embed/embed-me11-rd.rkt") (lib "tests/compiler/embed/embed-me32.rkt") (lib "tests/compiler/embed/embed-me10.rkt") (lib "tests/compiler/embed/embed-me1c.rkt"))) (name . "compiler-test") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "git://github.com/racket/racket?path=pkgs/compiler-test") (source_url . "http://github.com/racket/racket/tree/master?path=pkgs%2Fcompiler-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("component" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/component.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/component.txt"))) (checksum . "3ca0ce9f27f7d2f0bc4e71434b558e3088d7da84") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("component-doc" "component-lib")) (description . "Simple dependency injection (docs and implementation).") (implies . ("component-doc" "component-lib")) (last-checked . 1632902904) (last-edit . 1542023582) (last-updated . 1627373302) (modules . ()) (name . "component") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (dependency-injection . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-component.git?path=component") (tags . ("dependency-injection")) (versions . #hash((default . #hasheq((checksum . "3ca0ce9f27f7d2f0bc4e71434b558e3088d7da84") (source . "https://github.com/Bogdanp/racket-component.git?path=component") (source_url . "https://github.com/Bogdanp/racket-component.git?path=component"))))))) ("component-doc" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "component" "doc/component@component-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/component-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/component-doc.txt"))) (checksum . "3ca0ce9f27f7d2f0bc4e71434b558e3088d7da84") (checksum-error . #f) (collection . "component") (conflicts . ()) (dependencies . ("base" "component-lib" "db-doc" "db-lib" "scribble-lib" "racket-doc" "rackunit-doc" "rackunit-lib")) (description . "Simple dependency injection (docs).") (implies . ()) (last-checked . 1632902905) (last-edit . 1542023589) (last-updated . 1627373303) (modules . ((lib "component/component.scrbl"))) (name . "component-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (dependency-injection . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-component.git?path=component-doc") (tags . ("dependency-injection")) (versions . #hash((default . #hasheq((checksum . "3ca0ce9f27f7d2f0bc4e71434b558e3088d7da84") (source . "https://github.com/Bogdanp/racket-component.git?path=component-doc") (source_url . "https://github.com/Bogdanp/racket-component.git?path=component-doc"))))))) ("component-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/component-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/component-lib.txt"))) (checksum . "3ca0ce9f27f7d2f0bc4e71434b558e3088d7da84") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Simple dependency injection (implementation only).") (implies . ()) (last-checked . 1632902905) (last-edit . 1542031420) (last-updated . 1627373303) (modules . ((lib "component/private/graph.rkt") (lib "component/private/system.rkt") (lib "component/testing.rkt") (lib "component/private/component.rkt") (lib "component/main.rkt") (lib "component/private/dependency.rkt"))) (name . "component-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (dependency-injection . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-component.git?path=component-lib") (tags . ("dependency-injection")) (versions . #hash((default . #hasheq((checksum . "3ca0ce9f27f7d2f0bc4e71434b558e3088d7da84") (source . "https://github.com/Bogdanp/racket-component.git?path=component-lib") (source_url . "https://github.com/Bogdanp/racket-component.git?path=component-lib"))))))) ("component-test" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/component-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/component-test.txt"))) (checksum . "3ca0ce9f27f7d2f0bc4e71434b558e3088d7da84") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "component-lib" "rackunit-lib")) (description . "Tests for component-lib.") (implies . ()) (last-checked . 1632902905) (last-edit . 1541962581) (last-updated . 1627373304) (modules . ((lib "tests/component/testing-tests.rkt") (lib "tests/component/graph-tests.rkt") (lib "tests/component/system-tests.rkt") (lib "tests/component/run-all-tests.rkt"))) (name . "component-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (dependency-injection . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-component.git?path=component-test") (tags . ("dependency-injection")) (versions . #hash((default . #hasheq((checksum . "3ca0ce9f27f7d2f0bc4e71434b558e3088d7da84") (source . "https://github.com/Bogdanp/racket-component.git?path=component-test") (source_url . "https://github.com/Bogdanp/racket-component.git?path=component-test"))))))) ("compose-app" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "compose-app" "doc/compose-app@compose-app/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/compose-app.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/compose-app.txt"))) (checksum . "b1ca7838740c3cc84e392ea17f9e57f0595c111f") (checksum-error . #f) (collection . "compose-app") (conflicts . ()) (dependencies . ("base" "fancy-app" "racket-doc" ("scribble-lib" #:version "1.16") "scribble-text-lib" "rackunit-lib")) (description . "#%app syntax for function composition, (a .. b .. c) => (lambda (v) (a (b (c v))))") (implies . ()) (last-checked . 1632902905) (last-edit . 1500074194) (last-updated . 1502815866) (modules . ((lib "compose-app/main.rkt") (lib "compose-app/main.scrbl") (lib "compose-app/fancy-app.rkt") (lib "compose-app/test.rkt"))) (name . "compose-app") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (app-syntax . #t) (author:jackhfirth@gmail.com . #t) (functional . #t) (ring:1 . #t) (sugar . #t))) (source . "git://github.com/jackfirth/compose-app") (tags . ("app-syntax" "functional" "sugar")) (versions . #hash((default . #hasheq((checksum . "b1ca7838740c3cc84e392ea17f9e57f0595c111f") (source . "git://github.com/jackfirth/compose-app") (source_url . "http://github.com/jackfirth/compose-app/tree/master"))))))) ("cond-contract" . #hasheq((author . "pmatos@linki.tools") (authors . ("pmatos@linki.tools")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cond-contract" "doc/cond-contract@cond-contract/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cond-contract.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cond-contract.txt"))) (checksum . "8f8f1605d91a15fe653c407076a6fc64f69cbebe") (checksum-error . #f) (collection . "cond-contract") (conflicts . ()) (date-added . 1578584948) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Conditional contracts for Racket") (implies . ()) (last-checked . 1632902905) (last-edit . 1578584948) (last-updated . 1582104670) (modules . ((lib "cond-contract/scribblings/cond-contract.scrbl") (lib "cond-contract/main.rkt"))) (name . "cond-contract") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pmatos@linki.tools . #t) (contracts . #t) (ring:1 . #t))) (source . "https://github.com/pmatos/cond-contract.git") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "8f8f1605d91a15fe653c407076a6fc64f69cbebe") (source . "https://github.com/pmatos/cond-contract.git") (source_url . "https://github.com/pmatos/cond-contract.git"))))))) ("cond-strict" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cond-strict" "doc/cond-strict@cond-strict/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cond-strict.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cond-strict.txt"))) (checksum . "449212681ea5675beda19bf8242411f6073882ee") (checksum-error . #f) (collection . "cond-strict") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "cond: what it should have been") (implies . ()) (last-checked . 1632902906) (last-edit . 1475036587) (last-updated . 1502815866) (modules . ((lib "cond-strict/main.rkt") (lib "cond-strict/scribblings/cond-strict.scrbl"))) (name . "cond-strict") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (cond . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/cond-strict") (tags . ("cond")) (versions . #hash((default . #hasheq((checksum . "449212681ea5675beda19bf8242411f6073882ee") (source . "git://github.com/AlexKnauth/cond-strict") (source_url . "http://github.com/AlexKnauth/cond-strict/tree/master"))))))) ("continued-fractions" . #hasheq((author . "deren.dohoda@gmail.com") (authors . ("deren.dohoda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cf-manual" "doc/cf-manual@continued-fractions/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/continued-fractions.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/continued-fractions.txt"))) (checksum . "1b64abbd6adcaf781c7873a8489bbeff87cbaa56") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "math-lib" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Exact computer arithmetic and base conversion via continued fractions.") (implies . ()) (last-checked . 1632902906) (last-edit . 1455368395) (last-updated . 1621108747) (modules . ((lib "continued-fractions/bases.rkt") (lib "continued-fractions/private/general-continued-fractions.rkt") (lib "continued-fractions/cf-manual.scrbl") (lib "continued-fractions/cf-create.scrbl") (lib "continued-fractions/create.rkt") (lib "continued-fractions/private/simple-matrix.rkt") (lib "continued-fractions/private/sequence-utils.rkt") (lib "continued-fractions/private/arithmetic.rkt") (lib "continued-fractions/main.rkt") (lib "continued-fractions/cf-bases.scrbl") (lib "continued-fractions/private/continued-fractions.rkt") (lib "continued-fractions/private/consumer-emitters.rkt"))) (name . "continued-fractions") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:deren.dohoda@gmail.com . #t) (exact-arithmetic . #t) (ring:1 . #t))) (source . "https://derend@bitbucket.org/derend/continued-fractions.git") (tags . ("exact-arithmetic")) (versions . #hash((default . #hasheq((checksum . "1b64abbd6adcaf781c7873a8489bbeff87cbaa56") (source . "https://derend@bitbucket.org/derend/continued-fractions.git") (source_url . "https://derend@bitbucket.org/derend/continued-fractions.git"))))))) ("contract-etc" . #hasheq((author . "camoy@ccs.neu.edu") (authors . ("camoy@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "contract-etc" "doc/contract-etc@contract-etc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/contract-etc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/contract-etc.txt"))) (checksum . "9336dca2f9f5a46595b8077c1dbe6deb9b5d7926") (checksum-error . #f) (collection . "contract-etc") (conflicts . ()) (date-added . 1613458878) (dependencies . ("base" "sandbox-lib" "chk-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Miscellaneous contracts.") (implies . ()) (last-checked . 1632902906) (last-edit . 1613458878) (last-updated . 1620521948) (modules . ((lib "contract-etc/tests/main.rkt") (lib "contract-etc/tests/no-contracts.rkt") (lib "contract-etc/scribblings/contract-etc.scrbl") (lib "contract-etc/main.rkt") (lib "contract-etc/tests/contracts.rkt") (lib "contract-etc/examples/atomic.rkt"))) (name . "contract-etc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:camoy@ccs.neu.edu . #t) (contracts . #t) (ring:1 . #t))) (source . "https://github.com/camoy/contract-etc.git#main") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "9336dca2f9f5a46595b8077c1dbe6deb9b5d7926") (source . "https://github.com/camoy/contract-etc.git#main") (source_url . "https://github.com/camoy/contract-etc.git#main"))))))) ("contract-parameter" . #hasheq((author . "camoy@ccs.neu.edu") (authors . ("camoy@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "contract-parameter" "doc/contract-parameter@contract-parameter/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/contract-parameter.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/contract-parameter.txt"))) (checksum . "e380f7bd096b6ff429ab4f25e3f6e07122063386") (checksum-error . #f) (collection . "contract-parameter") (conflicts . ()) (date-added . 1613458770) (dependencies . ("contract-etc" "base" "chk-lib" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Dynamically bound contracts.") (implies . ()) (last-checked . 1632902906) (last-edit . 1613458770) (last-updated . 1620529133) (modules . ((lib "contract-parameter/examples/mutable-hash.rkt") (lib "contract-parameter/main.rkt") (lib "contract-parameter/private/binding.rkt") (lib "contract-parameter/examples/map.rkt") (lib "contract-parameter/scribblings/contract-parameter.scrbl") (lib "contract-parameter/private/parameterize-contract-macro.rkt") (lib "contract-parameter/examples/iterator.rkt") (lib "contract-parameter/examples/sort.rkt") (lib "contract-parameter/private/contract-parameter.rkt") (lib "contract-parameter/private/util.rkt") (lib "contract-parameter/private/parameterize-contract.rkt"))) (name . "contract-parameter") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:camoy@ccs.neu.edu . #t) (contracts . #t) (ring:1 . #t))) (source . "https://github.com/camoy/contract-parameter.git#main") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "e380f7bd096b6ff429ab4f25e3f6e07122063386") (source . "https://github.com/camoy/contract-parameter.git#main") (source_url . "https://github.com/camoy/contract-parameter.git#main"))))))) ("contract-profile" . #hash((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "contract-profile" "doc/contract-profile@contract-profile/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "contract-profile") (conflicts . ()) (dependencies . (("base" #:version "6.3") "math-lib" ("profile-lib" #:version "1.1") "racket-doc" "scribble-lib" "rackunit-lib")) (description . "Profiling tool for contracts") (implies . ()) (last-checked . 1632902907) (last-edit . 1417659583) (last-updated . 1571868929) (modules . ((lib "contract-profile/tests.rkt") (lib "contract-profile/scribblings/contract-profile.scrbl") (lib "contract-profile/utils.rkt") (lib "contract-profile/module-graph-view.rkt") (lib "contract-profile/dot.rkt") (lib "contract-profile/boundary-view.rkt") (lib "contract-profile/main.rkt") (lib "contract-profile/raco.rkt"))) (name . "contract-profile") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:stamourv@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "8469bec20b096be090d03615498c6fb316d8ecea") (source . "git://github.com/racket/contract-profile") (source_url . "http://github.com/racket/contract-profile/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("contract-repl" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/contract-repl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/contract-repl.txt"))) (checksum . "5eadd5d87b04178d5574804313238934f3544692") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "A REPL that prints contracts on values") (implies . ()) (last-checked . 1632902907) (last-edit . 1365266285) (last-updated . 1502815869) (modules . ((lib "contract-repl/main.rkt"))) (name . "contract-repl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:asumu@ccs.neu.edu . #t) (contracts . #t) (repl . #t) (ring:1 . #t))) (source . "github://github.com/takikawa/contract-repl/master") (tags . ("contracts" "repl")) (versions . #hash((default . #hasheq((checksum . "5eadd5d87b04178d5574804313238934f3544692") (source . "github://github.com/takikawa/contract-repl/master") (source_url . "http://github.com/takikawa/contract-repl/tree/master"))))))) ("control" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "control-manual" "doc/control-manual@control/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/control.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/control.txt"))) (checksum . "51bc2319c07a06b1275a231c8ccfc433a8f34258") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Control structures") (implies . ()) (last-checked . 1632902907) (last-edit . 1429997690) (last-updated . 1502815869) (modules . ((lib "control/tagged-begin.rkt") (lib "control/until.rkt") (lib "control/main.rkt") (lib "control/while.rkt") (lib "control/begin-with-goto.rkt") (lib "control/scribblings/control-manual.scrbl") (lib "control/dotimes.rkt"))) (name . "control") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jensaxel@soegaard.net . #t) (goto . #t) (ring:1 . #t) (tagbody . #t) (until . #t) (while . #t))) (source . "git://github.com/soegaard/control") (tags . ("goto" "tagbody" "until" "while")) (versions . #hash((default . #hasheq((checksum . "51bc2319c07a06b1275a231c8ccfc433a8f34258") (source . "git://github.com/soegaard/control") (source_url . "http://github.com/soegaard/control/tree/master"))))))) ("counter" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "counter" "doc/counter@counter/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/counter.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/counter.txt"))) (checksum . "61be8583e75ec1e44ccd577651d764636c51a123") (checksum-error . #f) (collection . "counter") (conflicts . ()) (date-added . 1623594514) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Small counter library to use for console output, logging, etc.") (implies . ()) (last-checked . 1632902907) (last-edit . 1623594514) (last-updated . 1628266109) (modules . ((lib "counter/main.rkt") (lib "counter/tests.rkt") (lib "counter/scribblings/counter.scrbl"))) (name . "counter") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:xgqt@riseup.net . #t) (counter . #t) (library . #t) (ring:1 . #t))) (source . "https://gitlab.com/xgqt/scheme-counter.git") (tags . ("counter" "library")) (versions . #hash((default . #hasheq((checksum . "61be8583e75ec1e44ccd577651d764636c51a123") (source . "https://gitlab.com/xgqt/scheme-counter.git") (source_url . "https://gitlab.com/xgqt/scheme-counter.git"))))))) ("country" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "country" "doc/country@country/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/country.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/country.txt"))) (checksum . "b3694f8a0dee227342506de305b04c8123be5099") (checksum-error . #f) (collection . "country") (conflicts . ()) (date-added . 1563981828) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Facilities for working with country data.") (implies . ()) (last-checked . 1632902908) (last-edit . 1563981828) (last-updated . 1632643704) (modules . ((lib "country/country.scrbl") (lib "country/region.rkt") (lib "country/main.rkt") (lib "country/country.rkt") (lib "country/subdivision.rkt"))) (name . "country") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (countries . #t) (db . #t) (iso . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-country.git?path=country") (tags . ("countries" "db" "iso")) (versions . #hash((default . #hasheq((checksum . "b3694f8a0dee227342506de305b04c8123be5099") (source . "https://github.com/Bogdanp/racket-country.git?path=country") (source_url . "https://github.com/Bogdanp/racket-country.git?path=country"))))))) ("cover" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cover.txt"))) (checksum . "ad50ffa8f6246053bec24b39b9cae7fad1534373") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1582753654) (dependencies . ("cover-lib" "cover-doc")) (description . "A code coverage tool") (implies . ()) (last-checked . 1632902908) (last-edit . 1582753654) (last-updated . 1582839048) (modules . ()) (name . "cover") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:spencer@florence.io . #t) (ring:1 . #t) (testing . #t) (tools . #t))) (source . "https://github.com/florence/cover.git?path=cover#release") (tags . ("testing" "tools")) (versions . #hash((default . #hasheq((checksum . "ad50ffa8f6246053bec24b39b9cae7fad1534373") (source . "https://github.com/florence/cover.git?path=cover#release") (source_url . "https://github.com/florence/cover.git?path=cover#release"))) ("6.2.1" . #hasheq((checksum . "578f4ebd0dee8b62e2e9325fbd7632c4b73499fe") (source . "https://github.com/florence/cover.git#v3.0.3") (source_url . "https://github.com/florence/cover.git#v3.0.3"))) ("6.2" . #hasheq((checksum . "578f4ebd0dee8b62e2e9325fbd7632c4b73499fe") (source . "https://github.com/florence/cover.git#v3.0.3") (source_url . "https://github.com/florence/cover.git#v3.0.3"))) ("6.3" . #hasheq((checksum . "578f4ebd0dee8b62e2e9325fbd7632c4b73499fe") (source . "https://github.com/florence/cover.git#v3.0.3") (source_url . "https://github.com/florence/cover.git#v3.0.3"))) ("6.6" . #hasheq((checksum . "694844a7009ff04523e136bf5c0c4ba487767552") (source . "https://github.com/florence/cover.git#v3.1.2") (source_url . "https://github.com/florence/cover.git#v3.1.2"))) ("6.7" . #hasheq((checksum . "694844a7009ff04523e136bf5c0c4ba487767552") (source . "https://github.com/florence/cover.git#v3.1.2") (source_url . "https://github.com/florence/cover.git#v3.1.2"))) ("6.4" . #hasheq((checksum . "578f4ebd0dee8b62e2e9325fbd7632c4b73499fe") (source . "https://github.com/florence/cover.git#v3.0.3") (source_url . "https://github.com/florence/cover.git#v3.0.3"))) ("6.5" . #hasheq((checksum . "578f4ebd0dee8b62e2e9325fbd7632c4b73499fe") (source . "https://github.com/florence/cover.git#v3.0.3") (source_url . "https://github.com/florence/cover.git#v3.0.3"))) ("6.8" . #hasheq((checksum . "694844a7009ff04523e136bf5c0c4ba487767552") (source . "https://github.com/florence/cover.git#v3.1.2") (source_url . "https://github.com/florence/cover.git#v3.1.2"))) ("6.1" . #hasheq((checksum . "578f4ebd0dee8b62e2e9325fbd7632c4b73499fe") (source . "https://github.com/florence/cover.git#v3.0.3") (source_url . "https://github.com/florence/cover.git#v3.0.3"))) ("6.1.1" . #hasheq((checksum . "578f4ebd0dee8b62e2e9325fbd7632c4b73499fe") (source . "https://github.com/florence/cover.git#v3.0.3") (source_url . "https://github.com/florence/cover.git#v3.0.3"))))))) ("cover-benchmarks" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/cover-benchmarks.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover-benchmarks.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cover-benchmarks.txt"))) (checksum . "ad50ffa8f6246053bec24b39b9cae7fad1534373") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1582826512) (dependencies . ("draw-lib" "plot-lib" ("cover-lib" #:version "3.3.3") "base" "custom-load" "pict-lib" "pict-test" "racket-benchmarks")) (description . "benchmarks for cover") (implies . ()) (last-checked . 1632902910) (last-edit . 1582827098) (last-updated . 1582839051) (modules . ((lib "cover/benchmarks/report.rkt") (lib "cover/benchmarks/run-test-benchmark.rkt") (lib "cover/benchmarks/collect-data.rkt"))) (name . "cover-benchmarks") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:spencer@florence.io . #t) (benchmarking . #t) (cover . #t) (ring:1 . #t))) (source . "https://github.com/florence/cover.git?path=cover-benchmarks#release") (tags . ("benchmarking" "cover")) (versions . #hash((default . #hasheq((checksum . "ad50ffa8f6246053bec24b39b9cae7fad1534373") (source . "https://github.com/florence/cover.git?path=cover-benchmarks#release") (source_url . "https://github.com/florence/cover.git?path=cover-benchmarks#release"))))))) ("cover-cobertura" . #hasheq((author . "efanzh@gmail.com") (authors . ("efanzh@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover-cobertura.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cover-cobertura.txt"))) (checksum . "2a63c5ef4544b3c6ca928c596ae81e4490f14c14") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1573901496) (dependencies . ("base" "cover")) (description . "") (implies . ()) (last-checked . 1632902910) (last-edit . 1573919383) (last-updated . 1573995191) (modules . ((lib "cover/cobertura.rkt"))) (name . "cover-cobertura") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:efanzh@gmail.com . #t) (ring:1 . #t) (testing . #t) (tools . #t))) (source . "https://github.com/EFanZh/cover-cobertura.git") (tags . ("testing" "tools")) (versions . #hash((default . #hasheq((checksum . "2a63c5ef4544b3c6ca928c596ae81e4490f14c14") (source . "https://github.com/EFanZh/cover-cobertura.git") (source_url . "https://github.com/EFanZh/cover-cobertura.git"))))))) ("cover-codecov" . #hasheq((author . "plessner.ryan@gmail.com spencer@florence.io") (authors . ("plessner.ryan@gmail.com" "spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover-codecov.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cover-codecov.txt"))) (checksum . "b1a9de60da3c33894ddd6fcc3e26e8e6b614f708") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556548151) (dependencies . ("cover-lib" ("base" #:version "6.1.1") "rackunit-lib")) (description . "") (implies . ()) (last-checked . 1632902911) (last-edit . 1556548151) (last-updated . 1582687741) (modules . ((lib "cover/private/travis-service.rkt") (lib "cover/private/gitlab-service.rkt") (lib "cover/codecov.rkt") (lib "cover/private/codecov.rkt") (lib "cover/private/ci-service.rkt") (lib "cover/private/tests/test-not-run.rkt"))) (name . "cover-codecov") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:plessner.ryan@gmail.com . #t) (author:spencer@florence.io . #t) (ring:1 . #t) (testing . #t) (tools . #t))) (source . "https://github.com/florence/cover-codecov.git#release") (tags . ("testing" "tools")) (versions . #hash((default . #hasheq((checksum . "b1a9de60da3c33894ddd6fcc3e26e8e6b614f708") (source . "https://github.com/florence/cover-codecov.git#release") (source_url . "https://github.com/florence/cover-codecov.git#release"))))))) ("cover-coveralls" . #hasheq((author . "spencer@florence.io plessner.ryan@gmail.com") (authors . ("spencer@florence.io" "plessner.ryan@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover-coveralls.txt") (test-failure-log . "server/built/test-fail/cover-coveralls.txt") (test-success-log . #f))) (checksum . "a5bb101d934e72f49b3f583707c58b921d61c07c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.1.1") "cover-lib" "rackunit-lib")) (description . "") (implies . ()) (last-checked . 1632902911) (last-edit . 1455244920) (last-updated . 1582687742) (modules . ((lib "cover/private/tests/not-run.rkt") (lib "cover/coveralls.rkt") (lib "cover/private/tests/prog.rkt") (lib "cover/private/coveralls.rkt"))) (name . "cover-coveralls") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:plessner.ryan@gmail.com . #t) (author:spencer@florence.io . #t) (ring:1 . #t) (testing . #t) (tools . #t))) (source . "git://github.com/rpless/cover-coveralls#release") (tags . ("testing" "tools")) (versions . #hash((default . #hasheq((checksum . "a5bb101d934e72f49b3f583707c58b921d61c07c") (source . "git://github.com/rpless/cover-coveralls#release") (source_url . "http://github.com/rpless/cover-coveralls/tree/master#release"))))))) ("cover-doc" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cover" "doc/cover@cover-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cover-doc.txt"))) (checksum . "ad50ffa8f6246053bec24b39b9cae7fad1534373") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1582684128) (dependencies . ("base" "cover-lib" "racket-doc" "base" "scribble-lib")) (description . "A code coverage tool, documentation") (implies . ()) (last-checked . 1632902911) (last-edit . 1582684182) (last-updated . 1582839052) (modules . ((lib "cover/scribblings/cover.scrbl") (lib "cover/scribblings/basics.scrbl") (lib "cover/scribblings/api.scrbl") (lib "cover/scribblings/base.rkt") (lib "cover/scribblings/plugins.scrbl"))) (name . "cover-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:spencer@florence.io . #t) (ring:1 . #t) (testing . #t) (tools . #t))) (source . "https://github.com/florence/cover.git?path=cover-doc#release") (tags . ("testing" "tools")) (versions . #hash((default . #hasheq((checksum . "ad50ffa8f6246053bec24b39b9cae7fad1534373") (source . "https://github.com/florence/cover.git?path=cover-doc#release") (source_url . "https://github.com/florence/cover.git?path=cover-doc#release"))))))) ("cover-lib" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cover-lib.txt"))) (checksum . "ad50ffa8f6246053bec24b39b9cae7fad1534373") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1582684086) (dependencies . ("base" "compiler-lib" "custom-load" "data-lib" "errortrace-lib" "syntax-color-lib" "testing-util-lib")) (description . "A code coverage tool, implementation part") (implies . ()) (last-checked . 1632902911) (last-edit . 1582684243) (last-updated . 1582839053) (modules . ((lib "cover/strace.rkt") (lib "cover/cover.rkt") (lib "cover/private/raw.rkt") (lib "cover/private/format-utils.rkt") (lib "cover/private/file-utils.rkt") (lib "cover/format.rkt") (lib "cover/private/contracts.rkt") (lib "cover/main.rkt") (lib "cover/raco.rkt") (lib "cover/private/shared.rkt") (lib "cover/private/html/html.rkt"))) (name . "cover-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:spencer@florence.io . #t) (ring:1 . #t) (testing . #t) (tools . #t))) (source . "https://github.com/florence/cover.git?path=cover-lib#release") (tags . ("testing" "tools")) (versions . #hash((default . #hasheq((checksum . "ad50ffa8f6246053bec24b39b9cae7fad1534373") (source . "https://github.com/florence/cover.git?path=cover-lib#release") (source_url . "https://github.com/florence/cover.git?path=cover-lib#release"))))))) ("cover-test" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cover-test.txt") (test-failure-log . "server/built/test-fail/cover-test.txt") (test-success-log . #f))) (checksum . "ad50ffa8f6246053bec24b39b9cae7fad1534373") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1582684155) (dependencies . ("base" "cover-lib" "data-lib" "syntax-color-lib" "compiler-lib" "custom-load" "at-exp-lib" "base" "htdp-lib" "macro-debugger" "rackunit-lib" "typed-racket-lib")) (description . "A code coverage tool, test part") (implies . ()) (last-checked . 1632902911) (last-edit . 1582684215) (last-updated . 1582839053) (modules . ((lib "cover/tests/html.rkt") (lib "cover/tests/bfs+module-nolex.rkt") (lib "cover/tests/basic/empty-id.rkt") (lib "cover/tests/simple-multi/2.rkt") (lib "cover/tests/syntax/syntax.rkt") (lib "cover/tests/submods/prog.rkt") (lib "cover/tests/bfs+module.rkt") (lib "cover/tests/file-utils.rkt") (lib "cover/tests/reader.rkt") (lib "cover/tests/eval/eval-call.rkt") (lib "cover/tests/error.rkt") (lib "cover/tests/basic/no-expressions.rkt") (lib "cover/tests/at-exp/at-exp.rkt") (lib "cover/tests/basic/empty-ISL.rkt") (lib "cover/tests/test-cross-phase-persist.rkt") (lib "cover/tests/syntax.rkt") (lib "cover/tests/nested.rkt") (lib "cover/tests/multibyte-coverage/submod.rkt") (lib "cover/tests/error-file.rkt") (lib "cover/tests/new-logger.rkt") (lib "cover/tests/basic/not-run.rkt") (lib "cover/tests/cross-phase-persist.rkt") (lib "cover/tests/main.rkt") (lib "cover/tests/basic/prog.rkt") (lib "cover/tests/prog.rkt") (lib "cover/tests/lazy-require.rkt") (lib "cover/tests/multiple-modules.rkt") (lib "cover/tests/format-utils.rkt") (lib "cover/tests/eval/do-eval.rkt") (lib "cover/tests/module.rkt") (lib "cover/tests/do-dont-run.rkt") (lib "cover/tests/provide.rkt") (lib "cover/tests/do-bfs+module.rkt") (lib "cover/tests/raco.rkt") (lib "cover/tests/cover-internal.rkt") (lib "cover/tests/bfs+define-syntax.rkt") (lib "cover/tests/dont-run.rkt") (lib "cover/tests/exit.rkt") (lib "cover/tests/eval/eval.rkt") (lib "cover/tests/do-eval.rkt") (lib "cover/tests/bfs.rkt") (lib "cover/tests/provide-define-syntax/prog.rkt") (lib "cover/tests/use-provide.rkt") (lib "cover/tests/do-multiple-modules.rkt") (lib "cover/tests/basic/raise.rkt") (lib "cover/tests/do-arg.rkt") (lib "cover/tests/do-syntax.rkt") (lib "cover/tests/simple-multi/1.rkt") (lib "cover/tests/arg.rkt") (lib "cover/tests/multibyte-coverage/arrow.rkt") (lib "cover/tests/eval.rkt") (lib "cover/tests/do-exit.rkt") (lib "cover/tests/do-reader.rkt"))) (name . "cover-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:spencer@florence.io . #t) (ring:1 . #t) (testing . #t) (tools . #t))) (source . "https://github.com/florence/cover.git?path=cover-test#release") (tags . ("testing" "tools")) (versions . #hash((default . #hasheq((checksum . "ad50ffa8f6246053bec24b39b9cae7fad1534373") (source . "https://github.com/florence/cover.git?path=cover-test#release") (source_url . "https://github.com/florence/cover.git?path=cover-test#release"))))))) ("covid-19" . #hasheq((author . "yanyingwang1@gmail.com") (authors . ("yanyingwang1@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "covid-19" "doc/covid-19@covid-19/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/covid-19.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/covid-19.txt"))) (checksum . "c69ad787d45df4698defc97c8863f47a95851984") (checksum-error . #f) (collection . "covid-19") (conflicts . ()) (date-added . 1622392835) (dependencies . ("base" "http-client" "scribble-lib" "racket-doc" "rackunit-lib" "scribble-rainbow-delimiters")) (description . "Racket wrapper of QQ/Sina's COVID-19 API ") (implies . ()) (last-checked . 1632902912) (last-edit . 1622392835) (last-updated . 1625476116) (modules . ((lib "covid-19/main.rkt") (lib "covid-19/qq.rkt") (lib "covid-19/sina.rkt") (lib "covid-19/scribblings/covid-19.scrbl"))) (name . "covid-19") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:yanyingwang1@gmail.com . #t) (covid-19 . #t) (ring:1 . #t))) (source . "https://github.com/yanyingwang/covid-19.git") (tags . ("covid-19")) (versions . #hash((default . #hasheq((checksum . "c69ad787d45df4698defc97c8863f47a95851984") (source . "https://github.com/yanyingwang/covid-19.git") (source_url . "https://github.com/yanyingwang/covid-19.git"))))))) ("cow-repl" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cow-repl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cow-repl.txt"))) (checksum . "19b38c35a868d3e3fe02d4f5fcc59e8212c37228") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Cowsay in your REPL") (implies . ()) (last-checked . 1632902912) (last-edit . 1382475611) (last-updated . 1502815870) (modules . ((lib "cow-repl/main.rkt"))) (name . "cow-repl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t))) (source . "github://github.com/takikawa/racket-cow-repl/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "19b38c35a868d3e3fe02d4f5fcc59e8212c37228") (source . "github://github.com/takikawa/racket-cow-repl/master") (source_url . "http://github.com/takikawa/racket-cow-repl/tree/master"))))))) ("cpu-affinity" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cpu-affinity" "doc/cpu-affinity@cpu-affinity/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cpu-affinity.txt") (test-failure-log . "server/built/test-fail/cpu-affinity.txt") (test-success-log . #f))) (checksum . "bc6316cbc7bc3f2179ae569bfe7c23a53b62025f") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "compatibility-lib" "racket-doc" "compatibility-doc")) (description . "A library for getting/setting CPU affinity") (implies . ()) (last-checked . 1632902912) (last-edit . 1429301964) (last-updated . 1502815871) (modules . ((lib "cpu-affinity/unix.rkt") (lib "cpu-affinity/main.rkt") (lib "cpu-affinity/error.rkt") (lib "cpu-affinity/windows.rkt") (lib "cpu-affinity/cpu-affinity.scrbl") (lib "cpu-affinity/test.rkt"))) (name . "cpu-affinity") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (ffi . #t) (os . #t) (ring:1 . #t))) (source . "git://github.com/takikawa/racket-cpu-affinity") (tags . ("ffi" "os")) (versions . #hash((default . #hasheq((checksum . "bc6316cbc7bc3f2179ae569bfe7c23a53b62025f") (source . "git://github.com/takikawa/racket-cpu-affinity") (source_url . "http://github.com/takikawa/racket-cpu-affinity/tree/master"))))))) ("cpuinfo" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cpuinfo" "doc/cpuinfo@cpuinfo/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cpuinfo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cpuinfo.txt"))) (checksum . "e5d01f97d71e0098ee6af20052889f52b94f5115") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "mcfly" "overeasy")) (description . "CPU Information") (implies . ()) (last-checked . 1632902913) (last-edit . 1456513268) (last-updated . 1502815871) (modules . ((lib "cpuinfo/main.rkt") (lib "cpuinfo/cpuinfo.scrbl"))) (name . "cpuinfo") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/cpuinfo.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e5d01f97d71e0098ee6af20052889f52b94f5115") (source . "http://www.neilvandyke.org/racket/cpuinfo.zip") (source_url . "http://www.neilvandyke.org/racket/cpuinfo.zip"))))))) ("crc32c" . #hasheq((author . "tetsumi@protonmail.com") (authors . ("tetsumi@protonmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "crc32c" "doc/crc32c@crc32c/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/crc32c.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/crc32c.txt"))) (checksum . "9ae11530f64ae796e3280b224249f5157b7bdf04") (checksum-error . #f) (collection . "crc32c") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Implementation of CRC32-C") (implies . ()) (last-checked . 1632902914) (last-edit . 1524253223) (last-updated . 1621108754) (modules . ((lib "crc32c/scribblings/crc32c.scrbl") (lib "crc32c/main.rkt"))) (name . "crc32c") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tetsumi@protonmail.com . #t) (checksum . #t) (crc . #t) (hash . #t) (ring:1 . #t))) (source . "https://bitbucket.org/Tetsumi/crc32c.git") (tags . ("checksum" "crc" "hash")) (versions . #hash((default . #hasheq((checksum . "9ae11530f64ae796e3280b224249f5157b7bdf04") (source . "https://bitbucket.org/Tetsumi/crc32c.git") (source_url . "https://bitbucket.org/Tetsumi/crc32c.git"))))))) ("crypto" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/crypto.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/crypto.txt"))) (checksum . "21e900fc568843331e1ea3eb1e1094c90a07032d") (checksum-error . #f) (collection . "crypto") (conflicts . ()) (dependencies . ("base" "crypto-lib" "crypto-doc")) (description . "Cryptography library") (implies . ("crypto-lib" "crypto-doc")) (last-checked . 1632902914) (last-edit . 1519093684) (last-updated . 1631045313) (modules . ()) (name . "crypto") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (crypto . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/crypto.git?path=crypto") (tags . ("crypto")) (versions . #hash((default . #hasheq((checksum . "21e900fc568843331e1ea3eb1e1094c90a07032d") (source . "https://github.com/rmculpepper/crypto.git?path=crypto") (source_url . "https://github.com/rmculpepper/crypto.git?path=crypto"))))))) ("crypto-doc" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "crypto" "doc/crypto@crypto-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/crypto-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/crypto-doc.txt"))) (checksum . "21e900fc568843331e1ea3eb1e1094c90a07032d") (checksum-error . #f) (collection . "crypto") (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "crypto-lib")) (description . "Cryptography library") (implies . ()) (last-checked . 1632902914) (last-edit . 1519093619) (last-updated . 1631045314) (modules . ((lib "crypto/examples/signing-ed25519.rkt") (lib "crypto/examples/key-agreement-x25519.rkt") (lib "crypto/examples/key-agreement-dh.rkt") (lib "crypto/examples/signing-ec.rkt") (lib "crypto/scribblings/intro.scrbl") (lib "crypto/examples/encryption-x25519.rkt") (lib "crypto/examples/key-agreement-ec.rkt") (lib "crypto/scribblings/pkey.scrbl") (lib "crypto/scribblings/misc.scrbl") (lib "crypto/scribblings/digest.scrbl") (lib "crypto/scribblings/cipher.scrbl") (lib "crypto/scribblings/crypto.scrbl") (lib "crypto/scribblings/kdf.scrbl") (lib "crypto/scribblings/factory.scrbl"))) (name . "crypto-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (crypto . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/crypto.git?path=crypto-doc") (tags . ("crypto")) (versions . #hash((default . #hasheq((checksum . "21e900fc568843331e1ea3eb1e1094c90a07032d") (source . "https://github.com/rmculpepper/crypto.git?path=crypto-doc") (source_url . "https://github.com/rmculpepper/crypto.git?path=crypto-doc"))))))) ("crypto-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/crypto-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/crypto-lib.txt"))) (checksum . "21e900fc568843331e1ea3eb1e1094c90a07032d") (checksum-error . #f) (collection . "crypto") (conflicts . ()) (dependencies . ("base" "asn1-lib" "base64-lib" "binaryio-lib" ("gmp-lib" #:version "1.1"))) (description . "Cryptography library") (implies . ()) (last-checked . 1632902915) (last-edit . 1519093582) (last-updated . 1631045315) (modules . ((lib "crypto/private/nettle/ffi.rkt") (lib "crypto/nettle.rkt") (lib "crypto/private/gcrypt/digest.rkt") (lib "crypto/private/rkt/salsa.rkt") (lib "crypto/private/rkt/poly1305.rkt") (lib "crypto/private/common/ffi.rkt") (lib "crypto/private/decaf/factory.rkt") (lib "crypto/private/common/util.rkt") (lib "crypto/main.rkt") (lib "crypto/libcrypto.rkt") (lib "crypto/private/sodium/cipher.rkt") (lib "crypto/private/common/base256.rkt") (lib "crypto/private/common/cipher.rkt") (lib "crypto/sodium.rkt") (lib "crypto/private/b2/factory.rkt") (lib "crypto/private/rkt/pbkdf2.rkt") (lib "crypto/private/libcrypto/cipher.rkt") (lib "crypto/private/libcrypto/kdf.rkt") (lib "crypto/private/nettle/cipher.rkt") (lib "crypto/private/nettle/pkey.rkt") (lib "crypto/private/nettle/kdf.rkt") (lib "crypto/pem.rkt") (lib "crypto/private/gcrypt/cipher.rkt") (lib "crypto/private/common/error.rkt") (lib "crypto/pkcs8.rkt") (lib "crypto/private/b2/ffi.rkt") (lib "crypto/private/decaf/digest.rkt") (lib "crypto/private/rkt/kdf.rkt") (lib "crypto/private/sodium/digest.rkt") (lib "crypto/private/common/kdf.rkt") (lib "crypto/private/gcrypt/factory.rkt") (lib "crypto/gcrypt.rkt") (lib "crypto/private/sodium/kdf.rkt") (lib "crypto/private/common/asn1.rkt") (lib "crypto/private/gcrypt/kdf.rkt") (lib "crypto/decaf.rkt") (lib "crypto/b2.rkt") (lib "crypto/private/b2/digest.rkt") (lib "crypto/private/common/interfaces.rkt") (lib "crypto/private/nettle/digest.rkt") (lib "crypto/private/common/digest.rkt") (lib "crypto/private/rkt/chacha.rkt") (lib "crypto/private/decaf/ffi.rkt") (lib "crypto/private/libcrypto/pkey.rkt") (lib "crypto/private/sodium/ffi.rkt") (lib "crypto/private/libcrypto/ffi.rkt") (lib "crypto/all.rkt") (lib "crypto/private/sodium/pkey.rkt") (lib "crypto/private/decaf/pkey.rkt") (lib "crypto/private/sodium/factory.rkt") (lib "crypto/private/gcrypt/pkey.rkt") (lib "crypto/argon2.rkt") (lib "crypto/private/common/common.rkt") (lib "crypto/private/argon2/ffi.rkt") (lib "crypto/private/common/factory.rkt") (lib "crypto/private/common/pk-common.rkt") (lib "crypto/private/libcrypto/factory.rkt") (lib "crypto/private/common/catalog.rkt") (lib "crypto/private/nettle/factory.rkt") (lib "crypto/private/libcrypto/digest.rkt") (lib "crypto/private/argon2/factory.rkt") (lib "crypto/private/gcrypt/ffi.rkt"))) (name . "crypto-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (crypto . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/crypto.git?path=crypto-lib") (tags . ("crypto")) (versions . #hash((default . #hasheq((checksum . "21e900fc568843331e1ea3eb1e1094c90a07032d") (source . "https://github.com/rmculpepper/crypto.git?path=crypto-lib") (source_url . "https://github.com/rmculpepper/crypto.git?path=crypto-lib"))))))) ("crypto-test" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/crypto-test.txt") (test-failure-log . "server/built/test-fail/crypto-test.txt") (test-success-log . #f))) (checksum . "21e900fc568843331e1ea3eb1e1094c90a07032d") (checksum-error . #f) (collection . "crypto") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "asn1-lib" "crypto-lib")) (description . "Cryptography library") (implies . ()) (last-checked . 1632902915) (last-edit . 1519093658) (last-updated . 1631045316) (modules . ((lib "crypto/tests/pkcs8/test-pkcs8.rkt") (lib "crypto/tests/pkey.rkt") (lib "crypto/tests/digest.rkt") (lib "crypto/tests/errors.rkt") (lib "crypto/tests/rkt-kdf.rkt") (lib "crypto/tests/util.rkt") (lib "crypto/tests/cipher.rkt") (lib "crypto/tests/pwhash.rkt") (lib "crypto/tests/test.rkt") (lib "crypto/tests/padding.rkt") (lib "crypto/tests/kdf.rkt"))) (name . "crypto-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (crypto . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/crypto.git?path=crypto-test") (tags . ("crypto")) (versions . #hash((default . #hasheq((checksum . "21e900fc568843331e1ea3eb1e1094c90a07032d") (source . "https://github.com/rmculpepper/crypto.git?path=crypto-test") (source_url . "https://github.com/rmculpepper/crypto.git?path=crypto-test"))))))) ("crystal" . #hasheq((author . "cwebber@dustycloud.org") (authors . ("cwebber@dustycloud.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/crystal.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/crystal.txt"))) (checksum . "70274401f177b1001ea15169c9032e466bf8efc9") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1558110033) (dependencies . ("base" "crypto-lib" "csexp" "web-server-lib" "magenc" "html-writing" "rackunit-lib" "scribble-lib")) (description . "Spritely Crystal is an implementation and demo of how to bring privacy-preserving, persistent URLs to the web which are capable of being updated.") (implies . ()) (last-checked . 1632902915) (last-edit . 1561125828) (last-updated . 1620468350) (modules . ((lib "crystal/crystal-server.rkt") (lib "crystal/webserver-utils.rkt") (lib "crystal/client.rkt") (lib "crystal/crystal.rkt") (lib "crystal/web-registry.rkt"))) (name . "crystal") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:cwebber@dustycloud.org . #t) (p2p . #t) (ring:1 . #t) (spritely . #t) (web . #t))) (source . "https://gitlab.com/spritely/crystal.git?path=crystal") (tags . ("p2p" "spritely" "web")) (versions . #hash((default . #hasheq((checksum . "70274401f177b1001ea15169c9032e466bf8efc9") (source . "https://gitlab.com/spritely/crystal.git?path=crystal") (source_url . "https://gitlab.com/spritely/crystal.git?path=crystal"))))))) ("cs-bootstrap" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cs-bootstrap.txt") (test-failure-log . "server/built/test-fail/cs-bootstrap.txt") (test-success-log . #f))) (checksum . "91a33d86e8e5f637bbc96afa765aff6b3b66120c") (checksum-error . #f) (collection . "cs-bootstrap") (conflicts . ()) (date-added . 1595712500) (dependencies . ("base")) (description . "Creates Chez Scheme boot files from source") (implies . ()) (last-checked . 1632902916) (last-edit . 1595712500) (last-updated . 1630336069) (modules . ((lib "cs-bootstrap/hand-coded.rkt") (lib "cs-bootstrap/r6rs-lang.rkt") (lib "cs-bootstrap/machine-def.rkt") (lib "cs-bootstrap/gensym.rkt") (lib "cs-bootstrap/scheme-struct.rkt") (lib "cs-bootstrap/constant.rkt") (lib "cs-bootstrap/primdata.rkt") (lib "cs-bootstrap/scheme-lang.rkt") (lib "cs-bootstrap/format.rkt") (lib "cs-bootstrap/r6rs-readtable.rkt") (lib "cs-bootstrap/main.rkt") (lib "cs-bootstrap/record.rkt") (lib "cs-bootstrap/define-datatype.rkt") (lib "cs-bootstrap/nanopass-patch.rkt") (lib "cs-bootstrap/make-boot.rkt") (lib "cs-bootstrap/strip.rkt") (lib "cs-bootstrap/syntax-mode.rkt") (lib "cs-bootstrap/parse-makefile.rkt") (lib "cs-bootstrap/config.rkt") (lib "cs-bootstrap/immediate.rkt") (lib "cs-bootstrap/scheme-readtable.rkt") (lib "cs-bootstrap/rcd.rkt") (lib "cs-bootstrap/symbol.rkt"))) (name . "cs-bootstrap") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/racket/ChezScheme.git?path=rktboot") (tags . ()) (versions . #hash((default . #hasheq((checksum . "91a33d86e8e5f637bbc96afa765aff6b3b66120c") (source . "https://github.com/racket/ChezScheme.git?path=rktboot") (source_url . "https://github.com/racket/ChezScheme.git?path=rktboot"))))))) ("cs135-drtools" . #hasheq((author . "racket@raymond.li kaustubh3973@gmail.com") (authors . ("racket@raymond.li" "kaustubh3973@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/cs135-drtools.txt") (docs . (("main" "cs135-drtools" "doc/cs135-drtools@cs135-drtools/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cs135-drtools.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cs135-drtools.txt"))) (checksum . "75c7041944ac489cacfe9327a7a936aafb576983") (checksum-error . #f) (collection . "cs135-drtools") (conflicts . ()) (date-added . 1602526501) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "DrRacket Tools for CS 135 course at UWaterloo.") (implies . ()) (last-checked . 1632902916) (last-edit . 1602550050) (last-updated . 1608228992) (modules . ((lib "cs135-drtools/keybindings.rkt") (lib "cs135-drtools/tool.rkt") (lib "cs135-drtools/register.rkt") (lib "cs135-drtools/scribblings/cs135-drtools.scrbl") (lib "cs135-drtools/scripts/autocomplete.rkt") (lib "cs135-drtools/main.rkt"))) (name . "cs135-drtools") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:kaustubh3973@gmail.com . #t) (author:racket@raymond.li . #t) (autocomplete . #t) (cs135 . #t) (cs135-tools . #t) (drracket . #t) (drracket-customization . #t) (drracket-dark-mode . #t) (drracket-preferences . #t) (drracket-theme . #t) (htdp . #t) (keybindings . #t) (keyboard-shortcuts . #t) (racket . #t) (racket-lang . #t) (racket-language . #t) (racket-teachpack . #t) (raco . #t) (ring:1 . #t) (shortcut . #t) (shortcuts . #t) (tools . #t) (uwaterloo . #t))) (source . "https://github.com/Raymo111/cs135-drtools.git") (tags . ("autocomplete" "cs135" "cs135-tools" "drracket" "drracket-customization" "drracket-dark-mode" "drracket-preferences" "drracket-theme" "htdp" "keybindings" "keyboard-shortcuts" "racket" "racket-lang" "racket-language" "racket-teachpack" "raco" "shortcut" "shortcuts" "tools" "uwaterloo")) (versions . #hash((default . #hasheq((checksum . "75c7041944ac489cacfe9327a7a936aafb576983") (source . "https://github.com/Raymo111/cs135-drtools.git") (source_url . "https://github.com/Raymo111/cs135-drtools.git"))))))) ("cs2500f16-jsonlab" . #hasheq((author . "mackenzie.r@husky.neu.edu") (authors . ("mackenzie.r@husky.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cs2500f16-jsonlab" "doc/cs2500f16-jsonlab@cs2500f16-jsonlab/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cs2500f16-jsonlab.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cs2500f16-jsonlab.txt"))) (checksum . "34e5dceecc4b8c43428414b3da7befdb36c123d6") (checksum-error . #f) (collection . "cs2500f16-jsonlab") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Teachpack for CS2500 JSON lab") (implies . ()) (last-checked . 1632902916) (last-edit . 1472064553) (last-updated . 1502815872) (modules . ((lib "cs2500f16-jsonlab/scribblings/cs2500f16-jsonlab.scrbl") (lib "cs2500f16-jsonlab/main.rkt"))) (name . "cs2500f16-jsonlab") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mackenzie.r@husky.neu.edu . #t) (cs2500 . #t) (ring:1 . #t))) (source . "git://github.com/rmacnz/cs2500jsonlab") (tags . ("cs2500")) (versions . #hash((default . #hasheq((checksum . "34e5dceecc4b8c43428414b3da7befdb36c123d6") (source . "git://github.com/rmacnz/cs2500jsonlab") (source_url . "http://github.com/rmacnz/cs2500jsonlab/tree/master"))))))) ("cs7480-util" . #hasheq((author . "types@ccs.neu.edu davis.mil@husky.neu.edu") (authors . ("types@ccs.neu.edu" "davis.mil@husky.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cs7480-util" "doc/cs7480-util@cs7480-util/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cs7480-util.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cs7480-util.txt"))) (checksum . "cd672fcb1f09354ef37619ddeed6c396286acfa5") (checksum-error . #f) (collection . "cs7480-util") (conflicts . ()) (dependencies . ("base" "lang-file" "typed-racket-lib" "drracket-tool-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Static analysis utilities") (implies . ()) (last-checked . 1632902917) (last-edit . 1476383231) (last-updated . 1502815872) (modules . ((lib "cs7480-util/private/find-typedefs.rkt") (lib "cs7480-util/private/find-required.rkt") (lib "cs7480-util/main.rkt") (lib "cs7480-util/docs/cs7480-util.scrbl") (lib "cs7480-util/private/find-defs.rkt"))) (name . "cs7480-util") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:davis.mil@husky.neu.edu . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t) (unstable . #t) (utility . #t))) (source . "git://github.com/MiloDavis/cs7480-util") (tags . ("unstable" "utility")) (versions . #hash((default . #hasheq((checksum . "cd672fcb1f09354ef37619ddeed6c396286acfa5") (source . "git://github.com/MiloDavis/cs7480-util") (source_url . "http://github.com/MiloDavis/cs7480-util/tree/master"))))))) ("csc104" . #hasheq((author . "gfb@cs.toronto.edu") (authors . ("gfb@cs.toronto.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/csc104.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "f329049edf037b4d7b4bc624477e7759cffaca22") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548690091) (dependencies . (("base" #:version "7.3") "tightlight" "snack" "draw-lib" "drracket-plugin-lib" "errortrace-lib" "gui-lib" "htdp-lib" "images-lib" "net-lib" "reprovide-lang" "snip-lib" "option-contract-lib" "parser-tools-lib" "syntax-color-lib")) (description . "Language for University of Toronto course CSC104") (implies . ()) (last-checked . 1632902917) (last-edit . 1570200876) (last-updated . 1578933431) (modules . ((lib "csc104/language/functions/C.rkt") (lib "csc104/language/forms/check.rkt") (lib "csc104/language/interpreter/steps.rkt") (lib "compthink-ui/drracket.rkt") (lib "csc104/language/forms/current-definitions.rkt") (lib "csc104/language/forms/ast.rkt") (lib "csc104/language/interpreter/token.rkt") (lib "csc104/language/interpreter/layout-support/strings-and-images.rkt") (lib "csc104/language/forms/forms.require.rkt") (lib "csc104/language/forms/common.rkt") (lib "csc104/extra/shorthand.rkt") (lib "csc104/language/forms/forms.assume.rkt") (lib "csc104/language/interpreter/layout-support/layout-rules.rkt") (lib "csc104/language/interpreter/patterns.define.rkt") (lib "csc104/language/without-gui.rkt") (lib "csc104/test-display.rkt") (lib "csc104/private/log.rkt") (lib "csc104/language/interpreter/layout-ast.rkt") (lib "csc104/shared/code.rkt") (lib "csc104/language/forms/forms.module-begin.rkt") (lib "csc104/words/general.rkt") (lib "csc104/private/print.rkt") (lib "csc104/language/interpreter/algebraic.rkt") (lib "csc104/private/preferences.rkt") (lib "csc104/language/forms/base.rkt") (lib "csc104/language/interpreter/interpreter.rkt") (lib "csc104/private/color-lexer/compthink-lexer.rkt") (lib "csc104/language/interpreter/context.rkt") (lib "csc104/language/interpreter/common.rkt") (lib "csc104/language/forms/form-naming.rkt") (lib "csc104/words/words.rkt") (lib "csc104/private/settings-panel.rkt") (lib "csc104/2019-fall.rkt") (lib "csc104/language/interpreter/patterns.independent.rkt") (lib "csc104/words/ui.rkt") (lib "csc104/language/forms/forms.misc.rkt") (lib "csc104/rewrite-error.rkt") (lib "csc104/english.rkt") (lib "csc104/run-teaching-program.rkt") (lib "csc104/language/functions/image.rkt") (lib "csc104/language/interpreter/support.rkt") (lib "csc104/private/color-lexer/text.rkt") (lib "csc104/language/interpreter/patterns.conditional.rkt") (lib "csc104/2019-fall-reader.rkt") (lib "csc104/language/forms/step-display.rkt") (lib "csc104/private/language-ui.rkt") (lib "csc104/language/forms/forms.implicit.rkt") (lib "csc104/private/is-image.rkt") (lib "csc104/language/functions/non-image.rkt") (lib "csc104/language/steps.rkt") (lib "csc104/shared-settings.rkt") (lib "csc104/language/interpreter/interpreter-shared.rkt") (lib "csc104/private/color-lexer/support.rkt") (lib "csc104/language/forms/forms.binding.rkt") (lib "csc104/language/forms/patterns.rkt") (lib "csc104/language/interpreter/annotate.rkt") (lib "csc104/language/interpreter/layout-support/markup.rkt") (lib "csc104/code-snip.rkt") (lib "csc104/language/interpreter/hide.rkt") (lib "csc104/private/color-lexer/configuration.rkt") (lib "csc104/language/functions/image-implementation.rkt") (lib "csc104/language/forms/step.rkt") (lib "csc104/language/interpreter/patterns.for.rkt") (lib "csc104/words/cs-terms.rkt") (lib "csc104/language/forms/forms.conditional.rkt") (lib "csc104/langs.rkt") (lib "csc104/language/forms/styled-output.rkt") (lib "csc104/private/sideline-box.rkt") (lib "csc104/language/interpreter/define.rkt") (lib "csc104/language/functions/custom.rkt") (lib "csc104/language/functions/color-constants.rkt") (lib "csc104/language/interpreter/layout.rkt") (lib "csc104/language/forms/syntax-error-context.rkt") (lib "csc104/language/functions/contracts.rkt") (lib "csc104/private/installer.rkt") (lib "csc104/language/keywords.rkt") (lib "csc104/underline-snip.rkt") (lib "csc104/configuration.rkt") (lib "csc104/language/forms/forms.list.rkt") (lib "csc104/language/forms/custom.for.rkt") (lib "csc104/continuation-key.rkt") (lib "csc104/language/interpreter/layout-support/layout-dsl.rkt") (lib "csc104/language/forms/forms.reflection.rkt") (lib "csc104/language/universe.rkt") (lib "csc104/private/underline-box.rkt") (lib "csc104/sideline-snip.rkt") (lib "compthink-ui/tool.rkt") (lib "csc104/language/display-code.rkt") (lib "csc104/language/forms/forms.app.rkt") (lib "csc104/language/interpreter/patterns.ast.rkt") (lib "csc104/language/forms/universe.rkt") (lib "compthink-ui/repl-link.rkt") (lib "csc104/language/form-names.rkt") (lib "compthink-ui/menus-keys.rkt") (lib "csc104/words/meta.rkt") (lib "csc104/language/forms/print-code.rkt") (lib "csc104/language/interpreter/literal.rkt") (lib "csc104/code-box.rkt") (lib "csc104/language/forms/syntax-error.rkt") (lib "csc104/language/functions/meta-language.rkt") (lib "csc104/words/monologue.rkt") (lib "csc104/private/color-lexer/numeric.rkt") (lib "csc104/private/code-box.rkt") (lib "csc104/language/interpreter/interpreter.implementation.rkt") (lib "csc104/language/forms/forms.for.rkt") (lib "csc104/private/htdp-stepper-debugger.rkt") (lib "csc104/language/interpreter/patterns.rkt") (lib "csc104/language/interpreter/eval.rkt") (lib "csc104/language/functions/error.rkt") (lib "compthink-ui/configuration.rkt") (lib "csc104/private/color-lexer/comment.rkt"))) (name . "csc104") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:gfb@cs.toronto.edu . #t) (education . #t) (ring:1 . #t) (teaching . #t))) (source . "https://www.cs.toronto.edu/~gfb/racket-pkgs/csc104.zip") (tags . ("education" "teaching")) (versions . #hash((default . #hasheq((checksum . "f329049edf037b4d7b4bc624477e7759cffaca22") (source . "https://www.cs.toronto.edu/~gfb/racket-pkgs/csc104.zip") (source_url . "https://www.cs.toronto.edu/~gfb/racket-pkgs/csc104.zip"))))))) ("csexp" . #hasheq((author . "cwebber@dustycloud.org") (authors . ("cwebber@dustycloud.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/csexp.txt") (docs . (("main" "csexp" "doc/csexp@csexp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/csexp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/csexp.txt"))) (checksum . "a5b054836db26c6568d88d4e6c7706ff270f83f4") (checksum-error . #f) (collection . "csexp") (conflicts . ()) (date-added . 1550417543) (dependencies . ("base" "rackunit-lib")) (description . "Canonical s-expressions for Racket.") (implies . ()) (last-checked . 1632902917) (last-edit . 1550417543) (last-updated . 1620468351) (modules . ((lib "csexp/main.rkt") (lib "csexp/scribblings/csexp.scrbl") (lib "csexp/private/csexp.rkt"))) (name . "csexp") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:cwebber@dustycloud.org . #t) (csexp . #t) (ring:1 . #t) (serialization . #t))) (source . "https://gitlab.com/spritely/racket-csexp.git?path=csexp") (tags . ("csexp" "serialization")) (versions . #hash((default . #hasheq((checksum . "a5b054836db26c6568d88d4e6c7706ff270f83f4") (source . "https://gitlab.com/spritely/racket-csexp.git?path=csexp") (source_url . "https://gitlab.com/spritely/racket-csexp.git?path=csexp"))))))) ("csfml" . #hasheq((author . "massung@gmail.com") (authors . ("massung@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/csfml.txt") (test-failure-log . "server/built/test-fail/csfml.txt") (test-success-log . #f))) (checksum . "7bcd88b848d054b5d847a51f65eb90988c260b81") (checksum-error . #f) (collection . "csfml") (conflicts . ()) (date-added . 1578849636) (dependencies . ("base")) (description . "Bindings for CSFML 2.5 (https://www.sfml-dev.org/download/csfml/)") (implies . ()) (last-checked . 1632902918) (last-edit . 1580838933) (last-updated . 1613185831) (modules . ((lib "csfml/audio.rkt") (lib "csfml/system.rkt") (lib "csfml/window.rkt") (lib "csfml/main.rkt") (lib "csfml/examples/ex_3.rkt") (lib "csfml/enums.rkt") (lib "csfml/examples/ex_2.rkt") (lib "csfml/network.rkt") (lib "csfml/graphics.rkt") (lib "csfml/types.rkt") (lib "csfml/examples/ex_1.rkt"))) (name . "csfml") (ring . 1) (search-terms . #hasheq((2d . #t) (:build-success: . #t) (author:massung@gmail.com . #t) (csfml . #t) (opengl . #t) (ring:1 . #t) (sfml . #t))) (source . "https://github.com/massung/racket-csfml.git") (tags . ("2d" "csfml" "opengl" "sfml")) (versions . #hash((default . #hasheq((checksum . "7bcd88b848d054b5d847a51f65eb90988c260b81") (source . "https://github.com/massung/racket-csfml.git") (source_url . "https://github.com/massung/racket-csfml.git"))))))) ("csp" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "csp" "doc/csp@csp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/csp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/csp.txt"))) (checksum . "82f76fe5aafb75af1649430add81b96a061d8bf5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661372) (dependencies . ("beautiful-racket-lib" "htdp-lib" "math-lib" ("base" #:version "6.0") "sugar" "rackunit-lib" "debug" "graph" "at-exp-lib" "math-doc" "racket-doc" "scribble-lib")) (description . "solve constraint-satisfaction problems") (implies . ()) (last-checked . 1632902918) (last-edit . 1556661372) (last-updated . 1621360909) (modules . ((lib "csp/csp-test.rkt") (lib "csp/sudoku-jm.rkt") (lib "csp/hacs-cryptarithmetic.rkt") (lib "csp/hacs-test-queens.rkt") (lib "csp/hacs-demo-triples.rkt") (lib "csp/aima.rkt") (lib "csp/aima-sum.rkt") (lib "csp/hacs-test-workbench.rkt") (lib "csp/expander.rkt") (lib "csp/hacs-test.rkt") (lib "csp/scribblings/csp.scrbl") (lib "csp/hacs.rkt") (lib "csp/hacs-map.rkt") (lib "csp/hacs-test-sudoku.rkt") (lib "csp/csp-test-problems.rkt") (lib "csp/aima-queens.rkt") (lib "csp/csp.rkt") (lib "csp/test-lang.rkt") (lib "csp/aima-smm.rkt") (lib "csp/csp-test-etc.rkt") (lib "csp/main.rkt"))) (name . "csp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (constraint . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/csp.git") (tags . ("constraint")) (versions . #hash((default . #hasheq((checksum . "82f76fe5aafb75af1649430add81b96a061d8bf5") (source . "https://github.com/mbutterick/csp.git") (source_url . "https://github.com/mbutterick/csp.git"))))))) ("csrmesh" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "csrmesh" "doc/csrmesh@csrmesh/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/csrmesh.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/csrmesh.txt"))) (checksum . "d7cc04b2bbfd45c71bf086bf5075de9ccd81415f") (checksum-error . #f) (collection . "csrmesh") (conflicts . ()) (dependencies . ("crypto" "bitsyntax" "word" "typed-racket-more" "typed-racket-lib" "base" "scribble-lib" "typed-racket-doc" "racket-doc" "rackunit-lib")) (description . "Implementation of the Bluetooth CSR Mesh protocol.") (implies . ()) (last-checked . 1632902918) (last-edit . 1528392905) (last-updated . 1620468352) (modules . ((lib "csrmesh/main.rkt") (lib "csrmesh/csrmesh/pinhack.rkt") (lib "csrmesh/csrmesh/packet.rkt") (lib "csrmesh/scribblings/csrmesh.scrbl"))) (name . "csrmesh") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (bluetooth . #t) (csr . #t) (csrmesh . #t) (mesh . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/csrmesh.git") (tags . ("bluetooth" "csr" "csrmesh" "mesh")) (versions . #hash((default . #hasheq((checksum . "d7cc04b2bbfd45c71bf086bf5075de9ccd81415f") (source . "https://gitlab.com/RayRacine/csrmesh.git") (source_url . "https://gitlab.com/RayRacine/csrmesh.git"))))))) ("css-expr" . #hasheq((author . "me@leafac.com") (authors . ("me@leafac.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "css-expr" "doc/css-expr@css-expr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/css-expr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/css-expr.txt"))) (checksum . "d060b2a76d08013c91318890dc5d9f6cc6c81138") (checksum-error . #f) (collection . "css-expr") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "nanopass" "scribble-lib" "racket-doc" "sandbox-lib")) (description . "S-expression-based CSS") (implies . ()) (last-checked . 1632902918) (last-edit . 1525863053) (last-updated . 1526152722) (modules . ((lib "css-expr/typed.rkt") (lib "css-expr/css-expr.scrbl") (lib "css-expr/main.rkt"))) (name . "css-expr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:me@leafac.com . #t) (css . #t) (dsl . #t) (pollen . #t) (ring:1 . #t))) (source . "https://github.com/leafac/css-expr.git") (tags . ("css" "dsl" "pollen")) (versions . #hash((default . #hasheq((checksum . "d060b2a76d08013c91318890dc5d9f6cc6c81138") (source . "https://github.com/leafac/css-expr.git") (source_url . "https://github.com/leafac/css-expr.git"))))))) ("css-tools" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "css-tools" "doc/css-tools@css-tools/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/css-tools.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/css-tools.txt"))) (checksum . "a33fc646904b99cece497b5b221a8d83bdc4d96f") (checksum-error . #f) (collection . "css-tools") (conflicts . ()) (date-added . 1556661379) (dependencies . (("base" #:version "6.0") "sugar" "scribble-lib" "rackunit-lib")) (description . "Tools for generating & manipulating CSS (unstable)") (implies . ()) (last-checked . 1632902919) (last-edit . 1556661379) (last-updated . 1621360910) (modules . ((lib "css-tools/named-colors.rkt") (lib "css-tools/core.rkt") (lib "css-tools/transition.rkt") (lib "css-tools/main.rkt") (lib "css-tools/column.rkt") (lib "css-tools/font-face.rkt") (lib "css-tools/misc.rkt") (lib "css-tools/html.rkt") (lib "css-tools/math.rkt") (lib "css-tools/colors.rkt") (lib "css-tools/scribblings/css-tools.scrbl") (lib "css-tools/typography.rkt"))) (name . "css-tools") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (css . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/css-tools.git") (tags . ("css")) (versions . #hash((default . #hasheq((checksum . "a33fc646904b99cece497b5b221a8d83bdc4d96f") (source . "https://github.com/mbutterick/css-tools.git") (source_url . "https://github.com/mbutterick/css-tools.git"))))))) ("csv" . #hasheq((author . "linjunhalida@gmail.com") (authors . ("linjunhalida@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/csv.txt") (docs . (("main" "csv" "doc/csv@csv/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/csv.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/csv.txt"))) (checksum . "c21cf591926b8c978b3191671ca50570fc50d21b") (checksum-error . #f) (collection . "csv") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "csv file reader and writer") (implies . ()) (last-checked . 1632902919) (last-edit . 1455333284) (last-updated . 1502815874) (modules . ((lib "csv/test.rkt") (lib "csv/scribblings/csv.scrbl") (lib "csv/main.rkt"))) (name . "csv") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:linjunhalida@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/halida/csv") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c21cf591926b8c978b3191671ca50570fc50d21b") (source . "git://github.com/halida/csv") (source_url . "http://github.com/halida/csv/tree/master"))))))) ("csv-reading" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "csv-reading" "doc/csv-reading@csv-reading/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/csv-reading.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/csv-reading.txt"))) (checksum . "217c1ee293ee246cba52fc91f2e897492d0b5101") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1602807083) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Comma-Separated Value (CSV) Parsing") (implies . ()) (last-checked . 1632902919) (last-edit . 1602807083) (last-updated . 1502815875) (modules . ((lib "csv-reading/csv-reading.scrbl") (lib "csv-reading/main.rkt"))) (name . "csv-reading") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (csv . #t) (ring:1 . #t))) (source . "https://www.neilvandyke.org/racket/csv-reading.zip") (tags . ("csv")) (versions . #hash((default . #hasheq((checksum . "217c1ee293ee246cba52fc91f2e897492d0b5101") (source . "https://www.neilvandyke.org/racket/csv-reading.zip") (source_url . "https://www.neilvandyke.org/racket/csv-reading.zip"))))))) ("csv-writing" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "csv-writing" "doc/csv-writing@csv-writing/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/csv-writing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/csv-writing.txt"))) (checksum . "a656ce4ee8ee9ef618e257a9def8f673f3ec6122") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1552763509) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "simple functions to write CSV files (and TSV files)") (implies . ()) (last-checked . 1632902920) (last-edit . 1552763509) (last-updated . 1573828780) (modules . ((lib "csv-writing/main.rkt") (lib "csv-writing/tests.rkt") (lib "csv-writing/csv-writing.scrbl"))) (name . "csv-writing") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (csv . #t) (ring:1 . #t) (tabular . #t) (tsv . #t))) (source . "https://github.com/jbclements/csv-writing.git") (tags . ("csv" "tabular" "tsv")) (versions . #hash((default . #hasheq((checksum . "a656ce4ee8ee9ef618e257a9def8f673f3ec6122") (source . "https://github.com/jbclements/csv-writing.git") (source_url . "https://github.com/jbclements/csv-writing.git"))))))) ("cuecore" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cuecore" "doc/cuecore@cuecore/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cuecore.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cuecore.txt"))) (checksum . "826b05916b9f84601ef405ee36e6b9a843c42ea2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "typed-racket-more" "mordae" "racket-doc" "typed-racket-doc" "typed-racket-lib")) (description . "CueCore Lighting Control") (implies . ()) (last-checked . 1632902920) (last-edit . 1453308885) (last-updated . 1502815875) (modules . ((lib "cuecore/cuecore.scrbl") (lib "cuecore/main.rkt"))) (name . "cuecore") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "git://github.com/mordae/racket-cuecore") (tags . ()) (versions . #hash((default . #hasheq((checksum . "826b05916b9f84601ef405ee36e6b9a843c42ea2") (source . "git://github.com/mordae/racket-cuecore") (source_url . "http://github.com/mordae/racket-cuecore/tree/master"))))))) ("cultural-anthropology" . #hasheq((author . "jesse@serverracket.com jesse@lisp.sh") (authors . ("jesse@serverracket.com" "jesse@lisp.sh")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/cultural-anthropology.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "936d7abc3a9cd2d88a68b30a98030f79282ec0d1") (checksum-error . #f) (collection . "cultural-anthropology") (conflicts . ()) (date-added . 1607664631) (dependencies . ("auxiliary-macro-context" "bitsyntax" "bookcover" "brag" "cmx" "datalog" "dssl" "dssl2" "event-lang" "frog" "frtime" "gm-pepm-2018" "gregor" "gtp-measure" "gtp-paper" "hackett" "herbie" "heresy" "identikon" "ipoe" "lipics" "margrave" "monad" "nanopass" "neuron" "non-det" "parenlog" "pict3d" "plai" "play" "pollen" "pop-pl" "py-fizz" "racket-dogstatsd" "racketscript" "rackjure" "ragg" "rash" "reactor" "redex" "remix" "rosette" "send-exp" "slideshow" "slideshow-exe" "syndicate" "turnstile" "typed-racket" "video" "vr-lang" "web-server")) (description . "Metapackage that bundles all the packages discussed or mentioned in Language-oriented Programming in Racket: A Cultural Anthropology") (implies . ()) (last-checked . 1632902920) (last-edit . 1607664631) (last-updated . 1538976181) (modules . ()) (name . "cultural-anthropology") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:jesse@lisp.sh . #t) (author:jesse@serverracket.com . #t) (books . #t) (lang . #t) (ring:1 . #t))) (source . "https://github.com/jessealama/cultural-anthropology.git") (tags . ("books" "lang")) (versions . #hash((default . #hasheq((checksum . "936d7abc3a9cd2d88a68b30a98030f79282ec0d1") (source . "https://github.com/jessealama/cultural-anthropology.git") (source_url . "https://github.com/jessealama/cultural-anthropology.git"))))))) ("cur" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cur.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cur.txt"))) (checksum . "7ce536c14e4e18cc84a7011a70f37cb98e21cf97") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1592513284) (dependencies . ("cur-lib" "cur-doc" "cur-test")) (description . "Dependent types and meta-programming") (implies . ("cur-lib" "cur-doc" "cur-test")) (last-checked . 1632902920) (last-edit . 1592513284) (last-updated . 1618616732) (modules . ()) (name . "cur") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:wjb@williamjbowman.com . #t) (proofs . #t) (ring:1 . #t) (types . #t))) (source . "https://github.com/wilbowma/cur.git?path=cur#main") (tags . ("proofs" "types")) (versions . #hash((default . #hasheq((checksum . "7ce536c14e4e18cc84a7011a70f37cb98e21cf97") (source . "https://github.com/wilbowma/cur.git?path=cur#main") (source_url . "https://github.com/wilbowma/cur.git?path=cur#main"))))))) ("cur-doc" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cur" "doc/cur@cur-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cur-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/cur-doc.txt"))) (checksum . "7ce536c14e4e18cc84a7011a70f37cb98e21cf97") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1592513301) (dependencies . ("base" ("base" #:version "7.6") "scribble-lib" "racket-doc" "sandbox-lib" ("cur-lib" #:version "0.6") "data-doc")) (description . "") (implies . ()) (last-checked . 1632902921) (last-edit . 1592513301) (last-updated . 1618616733) (modules . ((lib "cur/scribblings/stdlib/sugar.scrbl") (lib "cur/scribblings/stdlib/datum.scrbl") (lib "cur/scribblings/olly.scrbl") (lib "cur/scribblings/stdlib/typeclass.scrbl") (lib "cur/scribblings/stdlib/bool.scrbl") (lib "cur/scribblings/ntac.scrbl") (lib "cur/scribblings/stdlib/equality.scrbl") (lib "cur/scribblings/stdlib/list.scrbl") (lib "cur/scribblings/reflection.scrbl") (lib "cur/cur.scrbl") (lib "cur/scribblings/stdlib/racket-ascii.scrbl") (lib "cur/scribblings/defs.rkt") (lib "cur/scribblings/stdlib/nat.scrbl") (lib "cur/scribblings/stdlib/maybe.scrbl") (lib "cur/scribblings/stdlib/ascii.scrbl") (lib "cur/scribblings/stdlib/sigma.scrbl") (lib "cur/scribblings/stdlib.scrbl") (lib "cur/scribblings/curnel.scrbl"))) (name . "cur-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t))) (source . "https://github.com/wilbowma/cur.git?path=cur-doc#main") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7ce536c14e4e18cc84a7011a70f37cb98e21cf97") (source . "https://github.com/wilbowma/cur.git?path=cur-doc#main") (source_url . "https://github.com/wilbowma/cur.git?path=cur-doc#main"))))))) ("cur-lib" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cur-lib.txt") (test-failure-log . "server/built/test-fail/cur-lib.txt") (test-success-log . #f))) (checksum . "7ce536c14e4e18cc84a7011a70f37cb98e21cf97") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1592513265) (dependencies . (("base" #:version "7.6") ("turnstile-lib" #:version "0.5.6") ("macrotypes-lib" #:version "0.3.3") "reprovide-lang-lib")) (description . "") (implies . ()) (last-checked . 1632902921) (last-edit . 1592513265) (last-updated . 1618616734) (modules . ((lib "cur/ntac/ctx.rkt") (lib "cur/ntac/auto.rkt") (lib "cur/curnel/coc.rkt") (lib "cur/lang/reader.rkt") (lib "cur/stdlib/axiom.rkt") (lib "cur/ntac/base.rkt") (lib "cur/stdlib/totality.rkt") (lib "cur/stdlib/racket-ascii.rkt") (lib "cur/stdlib/pair.rkt") (lib "cur/ntac/metantac.rkt") (lib "cur/ntac/ML-rewrite.rkt") (lib "cur/stdlib/typeclass.rkt") (lib "cur/stdlib/sugar.rkt") (lib "cur/stdlib/maybe.rkt") (lib "cur/stdlib/nat.rkt") (lib "cur/ntac/standard.rkt") (lib "cur/ntac/rewrite.rkt") (lib "cur/curnel/lang.rkt") (lib "cur/metantac/lang/reader.rkt") (lib "cur/stdlib/equality.rkt") (lib "cur/stdlib/bool.rkt") (lib "cur/main.rkt") (lib "cur/stdlib/sigma.rkt") (lib "cur/stdlib/datum.rkt") (lib "cur/curnel/cic-saccharata.rkt") (lib "cur/metantac/main.rkt") (lib "cur/stdlib/pattern-tree.rkt") (lib "cur/ntac/prove-unify.rkt") (lib "cur/curnel/coc-saccharata.rkt") (lib "cur/debug/syntax-trace.rkt") (lib "cur/curnel/stxutils.rkt") (lib "cur/stdlib/ascii.rkt") (lib "cur/curnel/reflection.rkt") (lib "cur/ntac/inversion.rkt") (lib "cur/stdlib/sized.rkt") (lib "cur/stdlib/list.rkt") (lib "cur/stdlib/prop.rkt") (lib "cur/olly.rkt") (lib "cur/ntac/utils.rkt"))) (name . "cur-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t))) (source . "https://github.com/wilbowma/cur.git?path=cur-lib#main") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7ce536c14e4e18cc84a7011a70f37cb98e21cf97") (source . "https://github.com/wilbowma/cur.git?path=cur-lib#main") (source_url . "https://github.com/wilbowma/cur.git?path=cur-lib#main"))))))) ("cur-test" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/cur-test.txt") (test-failure-log . "server/built/test-fail/cur-test.txt") (test-success-log . #f))) (checksum . "7ce536c14e4e18cc84a7011a70f37cb98e21cf97") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1592513332) (dependencies . ("base" "rackunit-lib" ("cur-lib" #:version "0.6") "sweet-exp-lib" "chk-lib" "rackunit-macrotypes-lib")) (description . "") (implies . ()) (last-checked . 1632902921) (last-edit . 1592513332) (last-updated . 1618616735) (modules . ((lib "cur/tests/ntac/software-foundations/Poly-church.rkt") (lib "cur/tests/ntac/admit.rkt") (lib "cur/tests/stdlib/sized.rkt") (lib "cur/tests/ntac/assert.rkt") (lib "cur/tests/ntac/inversion.rkt") (lib "cur/tests/ntac/rewrite-forall.rkt") (lib "cur/tests/stdlib/sugar.rkt") (lib "cur/tests/stdlib/deppat.rkt") (lib "cur/tests/ntac/ML-rewrite-2.rkt") (lib "cur/tests/stdlib/typeclass.rkt") (lib "cur/tests/ntac/software-foundations/Regex.rkt") (lib "cur/tests/vector-append.rkt") (lib "cur/tests/issue67.rkt") (lib "cur/tests/stdlib/prop.rkt") (lib "cur/tests/stdlib/curunit.rkt") (lib "cur/tests/wilbowma.rkt") (lib "cur/tests/ntac/ML-rewrite.rkt") (lib "cur/tests/ntac/rewrite-in.rkt") (lib "cur/tests/ntac/software-foundations/Tactics-destruct.rkt") (lib "cur/tests/stdlib/ascii.rkt") (lib "cur/tests/issue-60.rkt") (lib "cur/tests/stdlib/pattern-tree.rkt") (lib "cur/tests/ntac/software-foundations/IndProp.rkt") (lib "cur/tests/ntac/simpl.rkt") (lib "cur/tests/stdlib/sigma.rkt") (lib "cur/tests/issue-71.rkt") (lib "cur/tests/ntac/destruct-exist.rkt") (lib "cur/tests/stdlib/list.rkt") (lib "cur/tests/plus.rkt") (lib "cur/tests/ntac/generalize.rkt") (lib "cur/tests/stdlib/axiom.rkt") (lib "cur/tests/ntac/rewrite-with-previous.rkt") (lib "cur/tests/ntac/software-foundations/Imp-var.rkt") (lib "cur/tests/stdlib/datum.rkt") (lib "cur/tests/ntac/induction.rkt") (lib "cur/tests/ntac/software-foundations/Maps.rkt") (lib "cur/tests/ntac/implicit.rkt") (lib "cur/tests/ntac/software-foundations/Poly.rkt") (lib "cur/tests/ntac.rkt") (lib "cur/tests/sweet-exp.rkt") (lib "cur/tests/stdlib/pat.rkt") (lib "cur/tests/issue-134.rkt") (lib "cur/tests/stdlib/termination.rkt") (lib "cur/tests/ntac/software-foundations/Poly-abbrv.rkt") (lib "cur/tests/stlc.rkt") (lib "cur/tests/stdlib/rackunit-size.rkt") (lib "cur/tests/ntac/software-foundations/Imp.rkt") (lib "cur/tests/ntac/issue104.rkt") (lib "cur/tests/fact.rkt") (lib "cur/tests/stdlib/racket-ascii.rkt") (lib "cur/tests/curnel/datatypes.rkt") (lib "cur/tests/issue-95.rkt") (lib "cur/tests/stdlib/maybe.rkt") (lib "cur/tests/ntac/interactive.rkt") (lib "cur/tests/ntac/software-foundations/Logic.rkt") (lib "cur/tests/ntac/rewrite.rkt") (lib "cur/tests/ntac/software-foundations/Induction.rkt") (lib "cur/tests/ntac/software-foundations/Tactics-unfolding.rkt") (lib "cur/tests/ntac/software-foundations/Tactics-inversion.rkt") (lib "cur/tests/ntac/leb.rkt") (lib "cur/tests/ntac/Induction-no-Basics.rkt") (lib "cur/tests/curnel/cic-saccharata.rkt") (lib "cur/tests/stdlib/nat.rkt") (lib "cur/tests/ntac/reflexivity-poly.rkt") (lib "cur/tests/stdlib/equality.rkt") (lib "cur/tests/ntac/destruct.rkt") (lib "cur/tests/curnel/reflection.rkt") (lib "cur/tests/ntac/software-foundations/Induction-ML.rkt") (lib "cur/tests/ntac/software-foundations/Tactics3.rkt") (lib "cur/tests/ntac/auto.rkt") (lib "cur/tests/ntac/software-foundations/Basics-ML.rkt") (lib "cur/tests/stdlib/bool.rkt") (lib "cur/tests/ntac/rackunit-ntac.rkt") (lib "cur/tests/ntac/software-foundations/Poly-pairs.rkt") (lib "cur/tests/ntac/software-foundations/Basics.rkt") (lib "cur/tests/ntac/software-foundations/Tactics.rkt") (lib "cur/tests/ntac/ML-reflexivity.rkt") (lib "cur/tests/stdlib/pattern-tree-matcher.rkt") (lib "cur/tests/ntac/software-foundations/Lists.rkt") (lib "cur/tests/stlc-olly.rkt") (lib "cur/tests/stdlib/totality.rkt") (lib "cur/tests/ntac/software-foundations/Regex2.rkt") (lib "cur/tests/olly.rkt") (lib "cur/tests/curnel/equality.rkt") (lib "cur/tests/ntac/ctx.rkt"))) (name . "cur-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t))) (source . "https://github.com/wilbowma/cur.git?path=cur-test#main") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7ce536c14e4e18cc84a7011a70f37cb98e21cf97") (source . "https://github.com/wilbowma/cur.git?path=cur-test#main") (source_url . "https://github.com/wilbowma/cur.git?path=cur-test#main"))))))) ("curly-fn" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/curly-fn.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/curly-fn.txt"))) (checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("curly-fn-doc" "curly-fn-lib")) (description . "") (implies . ("curly-fn-doc" "curly-fn-lib")) (last-checked . 1632902921) (last-edit . 1475259842) (last-updated . 1502815877) (modules . ()) (name . "curly-fn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:lexi.lambda@gmail.com . #t) (lambda . #t) (lang-extension . #t) (language . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/lexi-lambda/racket-curly-fn?path=curly-fn") (tags . ("lambda" "lang-extension" "language" "syntax")) (versions . #hash((default . #hasheq((checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (source . "git://github.com/lexi-lambda/racket-curly-fn?path=curly-fn") (source_url . "http://github.com/lexi-lambda/racket-curly-fn/tree/master?path=curly-fn"))) ("6.2.1" . #hasheq((checksum . "e44ab25b4340b3907f800c998596949e10307448") (source . "git://github.com/lexi-lambda/racket-curly-fn#version-exception--old-macroexpander") (source_url . "http://github.com/lexi-lambda/racket-curly-fn/tree/master#version-exception--old-macroexpander"))) ("6.2" . #hasheq((checksum . "e44ab25b4340b3907f800c998596949e10307448") (source . "git://github.com/lexi-lambda/racket-curly-fn#version-exception--old-macroexpander") (source_url . "http://github.com/lexi-lambda/racket-curly-fn/tree/master#version-exception--old-macroexpander"))) ("6.1.1" . #hasheq((checksum . "e44ab25b4340b3907f800c998596949e10307448") (source . "git://github.com/lexi-lambda/racket-curly-fn#version-exception--old-macroexpander") (source_url . "http://github.com/lexi-lambda/racket-curly-fn/tree/master#version-exception--old-macroexpander"))))))) ("curly-fn-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "curly-fn" "doc/curly-fn@curly-fn-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/curly-fn-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/curly-fn-doc.txt"))) (checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "curly-fn-lib" "namespaced-transformer-doc" "namespaced-transformer-lib" "racket-doc" "scribble-code-examples" "scribble-lib")) (description . "") (implies . ()) (last-checked . 1632902922) (last-edit . 1473377651) (last-updated . 1502815877) (modules . ((lib "scribblings/curly-fn.scrbl"))) (name . "curly-fn-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-curly-fn?path=curly-fn-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (source . "git://github.com/lexi-lambda/racket-curly-fn?path=curly-fn-doc") (source_url . "http://github.com/lexi-lambda/racket-curly-fn/tree/master?path=curly-fn-doc"))))))) ("curly-fn-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/curly-fn-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/curly-fn-lib.txt"))) (checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.3") "namespaced-transformer-lib")) (description . "") (implies . ()) (last-checked . 1632902922) (last-edit . 1473377629) (last-updated . 1502815878) (modules . ((lib "curly-fn/lang/language-info.rkt") (lib "curly-fn/lang/runtime-config.rkt") (lib "curly-fn/private/make-extension-reader.rkt") (lib "curly-fn/main.rkt") (lib "curly-fn/private/curly-fn-transformer.rkt") (lib "curly-fn/lang/reader.rkt"))) (name . "curly-fn-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-curly-fn?path=curly-fn-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (source . "git://github.com/lexi-lambda/racket-curly-fn?path=curly-fn-lib") (source_url . "http://github.com/lexi-lambda/racket-curly-fn/tree/master?path=curly-fn-lib"))))))) ("curly-fn-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/curly-fn-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/curly-fn-test.txt"))) (checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "curly-fn-lib" "rackunit-lib")) (description . "") (implies . ()) (last-checked . 1632902923) (last-edit . 1473377672) (last-updated . 1502815878) (modules . ((lib "tests/curly-fn.rkt"))) (name . "curly-fn-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-curly-fn?path=curly-fn-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d64cd71d5b386be85f5979edae6f6b6469a4df86") (source . "git://github.com/lexi-lambda/racket-curly-fn?path=curly-fn-test") (source_url . "http://github.com/lexi-lambda/racket-curly-fn/tree/master?path=curly-fn-test"))))))) ("curved-text" . #hasheq((author . "klibert.piotr@gmail.com") (authors . ("klibert.piotr@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/curved-text.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "bc6223bfc3949bf2f632c86588f10f8da2ef0b6c") (checksum-error . #f) (collection . "curved-text") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1632902923) (last-edit . 1490796988) (last-updated . 1502815878) (modules . ((lib "curved-text/demo/canvas.rkt") (lib "curved-text/bezier/math.rkt") (lib "curved-text/bezier/binary-search.rkt") (lib "curved-text/demo/main.rkt") (lib "curved-text/main.rkt") (lib "curved-text/demo/drawing.rkt") (lib "curved-text/bezier/point.rkt") (lib "curved-text/bezier/tables.rkt") (lib "curved-text/bezier/utils.rkt") (lib "curved-text/bezier/curved-text.rkt") (lib "curved-text/bezier/curve.rkt"))) (name . "curved-text") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-desc: . #t) (author:klibert.piotr@gmail.com . #t) (curve . #t) (graphics . #t) (gui . #t) (ring:1 . #t))) (source . "git://github.com/piotrklibert/curved-text") (tags . ("curve" "graphics" "gui")) (versions . #hash((default . #hasheq((checksum . "bc6223bfc3949bf2f632c86588f10f8da2ef0b6c") (source . "git://github.com/piotrklibert/curved-text") (source_url . "http://github.com/piotrklibert/curved-text/tree/master"))))))) ("custom-load" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "custom-load" "doc/custom-load@custom-load/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/custom-load.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/custom-load.txt"))) (checksum . "4e70205c29ab0672663fcae78ded32563f01414b") (checksum-error . #f) (collection . "custom-load") (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "A load handler that avoids stale zo files.") (implies . ()) (last-checked . 1632902923) (last-edit . 1429587087) (last-updated . 1502815878) (modules . ((lib "custom-load/test/a.rkt") (lib "custom-load/test/c.rkt") (lib "custom-load/main.rkt") (lib "custom-load/private/loader.rkt") (lib "custom-load/custom-load.scrbl") (lib "custom-load/top.rkt") (lib "custom-load/test/b.rkt"))) (name . "custom-load") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/rmculpepper/custom-load") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4e70205c29ab0672663fcae78ded32563f01414b") (source . "git://github.com/rmculpepper/custom-load") (source_url . "http://github.com/rmculpepper/custom-load/tree/master"))))))) ("dali" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dali" "doc/dali@dali/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dali.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dali.txt"))) (checksum . "d69925424559447fbd3bba7d4d66dcb2a745b9c2") (checksum-error . #f) (collection . "dali") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-index" "scribble-lib" "racket-doc" "sandbox-lib" "cover-coveralls")) (description . "Simple text templating (mustache/handlebars style) for Racket.") (implies . ()) (last-checked . 1632902923) (last-edit . 1537394131) (last-updated . 1538070924) (modules . ((lib "dali/tests/test-doc-complete.rkt") (lib "dali/tests/dali.rkt") (lib "dali/scribblings/dali.scrbl") (lib "dali/main.rkt"))) (name . "dali") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johnstonskj@gmail.com . #t) (ring:1 . #t) (template . #t))) (source . "https://github.com/johnstonskj/dali.git") (tags . ("template")) (versions . #hash((default . #hasheq((checksum . "d69925424559447fbd3bba7d4d66dcb2a745b9c2") (source . "https://github.com/johnstonskj/dali.git") (source_url . "https://github.com/johnstonskj/dali.git"))))))) ("dallas" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/dallas.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "56677648adf0b2cb54256654f2610b4d1d0001b3") (checksum-error . #f) (collection . (multi)) (conflicts . ("dallas-doc" "dallas-lib" "dallas-test")) (date-added . 1625078980) (dependencies . ("dallas-lib" "dallas-docs")) (description . "Experimental RDBMS based on the Darwen & Date's D language") (implies . ("dallas-lib" "dallas-docs")) (last-checked . 1632902923) (last-edit . 1625804593) (last-updated . 1625805610) (modules . ((lib "dallas-doc/dallas.scrbl"))) (name . "dallas") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (author:jesse@serverracket.com . #t) (database . #t) (db . #t) (experimental . #t) (relational . #t) (ring:1 . #t))) (source . "https://github.com/jessealama/dallas.git") (tags . ("database" "db" "experimental" "relational")) (versions . #hash((default . #hasheq((checksum . "56677648adf0b2cb54256654f2610b4d1d0001b3") (source . "https://github.com/jessealama/dallas.git") (source_url . "https://github.com/jessealama/dallas.git"))))))) ("dallas-doc" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/dallas-doc.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "56677648adf0b2cb54256654f2610b4d1d0001b3") (checksum-error . #f) (collection . (multi)) (conflicts . ("dallas" "dallas-lib" "dallas-test")) (date-added . 1625079138) (dependencies . ("dallas-lib" "dallas-docs")) (description . "Documentation for Dallas") (implies . ("dallas-lib" "dallas-docs")) (last-checked . 1632902924) (last-edit . 1625804621) (last-updated . 1625805610) (modules . ((lib "dallas-doc/dallas.scrbl"))) (name . "dallas-doc") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (author:jesse@serverracket.com . #t) (database . #t) (db . #t) (docs . #t) (experimental . #t) (relational . #t) (ring:1 . #t))) (source . "https://github.com/jessealama/dallas.git") (tags . ("database" "db" "docs" "experimental" "relational")) (versions . #hash((default . #hasheq((checksum . "56677648adf0b2cb54256654f2610b4d1d0001b3") (source . "https://github.com/jessealama/dallas.git") (source_url . "https://github.com/jessealama/dallas.git"))))))) ("dallas-lib" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/dallas-lib.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "56677648adf0b2cb54256654f2610b4d1d0001b3") (checksum-error . #f) (collection . (multi)) (conflicts . ("dallas" "dallas-doc" "dallas-test")) (date-added . 1625079093) (dependencies . ("dallas-lib" "dallas-docs")) (description . "Dallas (implementation)") (implies . ("dallas-lib" "dallas-docs")) (last-checked . 1632902924) (last-edit . 1625804657) (last-updated . 1625805611) (modules . ((lib "dallas-doc/dallas.scrbl"))) (name . "dallas-lib") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (author:jesse@serverracket.com . #t) (database . #t) (db . #t) (experimental . #t) (relational . #t) (ring:1 . #t))) (source . "https://github.com/jessealama/dallas.git") (tags . ("database" "db" "experimental" "relational")) (versions . #hash((default . #hasheq((checksum . "56677648adf0b2cb54256654f2610b4d1d0001b3") (source . "https://github.com/jessealama/dallas.git") (source_url . "https://github.com/jessealama/dallas.git"))))))) ("dallas-test" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/dallas-test.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "56677648adf0b2cb54256654f2610b4d1d0001b3") (checksum-error . #f) (collection . (multi)) (conflicts . ("dallas" "dallas-doc" "dallas-lib")) (date-added . 1625079192) (dependencies . ("dallas-lib" "dallas-docs")) (description . "Tests for Dallas") (implies . ("dallas-lib" "dallas-docs")) (last-checked . 1632902925) (last-edit . 1625804679) (last-updated . 1625805612) (modules . ((lib "dallas-doc/dallas.scrbl"))) (name . "dallas-test") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (author:jesse@serverracket.com . #t) (database . #t) (db . #t) (experimental . #t) (relational . #t) (ring:1 . #t) (tests . #t))) (source . "https://github.com/jessealama/dallas.git") (tags . ("database" "db" "experimental" "relational" "tests")) (versions . #hash((default . #hasheq((checksum . "56677648adf0b2cb54256654f2610b4d1d0001b3") (source . "https://github.com/jessealama/dallas.git") (source_url . "https://github.com/jessealama/dallas.git"))))))) ("dan-scheme" . #hasheq((author . "david@davidchristiansen.dk") (authors . ("david@davidchristiansen.dk")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dan-scheme" "doc/dan-scheme@dan-scheme/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dan-scheme.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dan-scheme.txt"))) (checksum . "289e8cb903a24b2e1939a8556c164589a0e293e5") (checksum-error . #f) (collection . "dan-scheme") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "A very little language for situations where simplicity is desired over convenience") (implies . ()) (last-checked . 1632902925) (last-edit . 1484148866) (last-updated . 1608758330) (modules . ((lib "dan-scheme/test.rkt") (lib "dan-scheme/scribblings/dan-scheme.scrbl") (lib "dan-scheme/main.rkt"))) (name . "dan-scheme") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:david@davidchristiansen.dk . #t) (ring:1 . #t))) (source . "git://github.com/david-christiansen/dan-scheme") (tags . ()) (versions . #hash((default . #hasheq((checksum . "289e8cb903a24b2e1939a8556c164589a0e293e5") (source . "git://github.com/david-christiansen/dan-scheme") (source_url . "http://github.com/david-christiansen/dan-scheme/tree/master"))))))) ("darwin" . #hasheq((author . "pmatos@linki.tools") (authors . ("pmatos@linki.tools")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "darwin" "doc/darwin@darwin/index.html"))) (failure-log . "server/built/fail/darwin.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "311df33cc83f67859ed9db8b236d227dec83d895") (checksum-error . #f) (collection . (multi)) (conflicts . ("frog")) (date-added . 1569610192) (dependencies . (("base" #:version "6.2") "find-parent-dir" "html-lib" ("markdown-ng" #:version "0.1") "txexpr" "racket-index" ("rackjure" #:version "0.9") "reprovide-lang" "scribble-lib" "scribble-text-lib" "srfi-lite-lib" "web-server-lib" "at-exp-lib" "net-doc" "racket-doc" "rackunit-lib" "scribble-doc" "scribble-text-lib" "web-server-doc")) (description . "Static blog generator application. Supports Twitter Bootstrap, Pygments, more.") (implies . ()) (last-checked . 1632902925) (last-edit . 1569610192) (last-updated . 1603725668) (modules . ((lib "darwin/private/posts.rkt") (lib "darwin/verbosity.rkt") (lib "darwin/private/enhance-body/add-doc-links/doc-uri.rkt") (lib "darwin/darwin.scrbl") (lib "darwin/private/author.rkt") (lib "darwin/private/params.rkt") (lib "darwin/params.rkt") (lib "example/_src/posts/2013-06-19-a-scribble-post.scrbl") (lib "darwin/private/new-post.rkt") (lib "darwin/private/tags.rkt") (lib "darwin/private/main.rkt") (lib "darwin/config/lang/reader.rkt") (lib "example/darwin.rkt") (lib "darwin/private/enhance-body/syntax-highlight/pygments.rkt") (lib "darwin/config/main.rkt") (lib "darwin/config/private/load.rkt") (lib "darwin/private/stale.rkt") (lib "darwin/private/watch-dir.rkt") (lib "darwin/main.rkt") (lib "darwin/private/serialize-posts.rkt") (lib "darwin/enhance-body.rkt") (lib "darwin/private/feeds.rkt") (lib "darwin/private/bodies-page.rkt") (lib "darwin/config/private/test.rkt") (lib "darwin/private/post-struct.rkt") (lib "darwin/scribble.rkt") (lib "darwin/private/verbosity.rkt") (lib "darwin/private/define-doc.rkt") (lib "darwin/private/paths.rkt") (lib "darwin/private/non-posts.rkt") (lib "darwin/private/read-scribble.rkt") (lib "darwin/private/html.rkt") (lib "darwin/widgets.rkt") (lib "darwin/private/xexpr2text.rkt") (lib "darwin/private/xexpr-map.rkt") (lib "darwin/private/util.rkt") (lib "darwin/paths.rkt") (lib "darwin/private/template.rkt") (lib "example/_src/A-Non-Post-Scribble-Page.scrbl"))) (name . "darwin") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (app . #t) (author:pmatos@linki.tools . #t) (blog . #t) (markdown . #t) (ring:2 . #t) (scribble . #t) (web . #t))) (source . "https://github.com/pmatos/darwin.git") (tags . ("app" "blog" "markdown" "scribble" "web")) (versions . #hash((default . #hasheq((checksum . "311df33cc83f67859ed9db8b236d227dec83d895") (source . "https://github.com/pmatos/darwin.git") (source_url . "https://github.com/pmatos/darwin.git"))))))) ("data" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("data-lib" "data-enumerate-lib" "data-doc")) (description . "Data strucutures") (implies . ("data-lib" "data-enumerate-lib" "data-doc")) (last-checked . 1632902925) (last-edit . 1417659583) (last-updated . 1623838115) (modules . ()) (name . "data") (ring . 0) (search-terms . #hasheq((author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "58cbbacedc6df418faa8faac0f7b8133998bce96") (source . "git://github.com/racket/data/?path=data") (source_url . "git://github.com/racket/data/?path=data"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("data-doc" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "data" "doc/data@data-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "data-lib" "data-enumerate-lib" "racket-doc" "scribble-lib" "plot-lib" "math-doc" "math-lib" "pict-doc" "pict-lib")) (description . "documentation part of data") (implies . ()) (last-checked . 1632902925) (last-edit . 1417659583) (last-updated . 1623838116) (modules . ((lib "data/scribblings/heap.scrbl") (lib "data/scribblings/integer-set.scrbl") (lib "data/scribblings/order.scrbl") (lib "data/scribblings/union-find.scrbl") (lib "data/scribblings/queue.scrbl") (lib "data/scribblings/gvector.scrbl") (lib "data/scribblings/enumerate.scrbl") (lib "data/scribblings/cite.rkt") (lib "data/scribblings/bit-vector.scrbl") (lib "data/scribblings/data.scrbl") (lib "data/scribblings/splay-tree.scrbl") (lib "data/scribblings/skip-list.scrbl") (lib "data/scribblings/interval-map.scrbl"))) (name . "data-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "58cbbacedc6df418faa8faac0f7b8133998bce96") (source . "git://github.com/racket/data/?path=data-doc") (source_url . "git://github.com/racket/data/?path=data-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("data-enumerate-lib" . #hash((author . "maxsnew@racket-lang.org jay@racket-lang.org") (authors . ("maxsnew@racket-lang.org" "jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.8.0.2") "data-lib" "math-lib" "rackunit-lib")) (description . "implementation (no documentation) of data/enumerate") (implies . ()) (last-checked . 1632902926) (last-edit . 1417659583) (last-updated . 1623838116) (modules . ((lib "data/enumerate/private/core.rkt") (lib "data/enumerate/lib/unsafe.rkt") (lib "data/enumerate/unsafe.rkt") (lib "data/enumerate/compat.rkt") (lib "data/enumerate.rkt") (lib "data/enumerate/lib.rkt") (lib "data/enumerate/private/more.rkt") (lib "data/enumerate/private/unfair.rkt"))) (name . "data-enumerate-lib") (ring . 0) (search-terms . #hasheq((author:jay@racket-lang.org . #t) (author:maxsnew@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "58cbbacedc6df418faa8faac0f7b8133998bce96") (source . "git://github.com/racket/data/?path=data-enumerate-lib") (source_url . "git://github.com/racket/data/?path=data-enumerate-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("data-frame" . #hasheq((author . "alexharsanyi@gmail.com") (authors . ("alexharsanyi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "data-frame" "doc/data-frame@data-frame/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/data-frame.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/data-frame.txt"))) (checksum . "ea260ee35e87be7f3f2d7808cdaf1d7e5d7d9916") (checksum-error . #f) (collection . "data-frame") (conflicts . ()) (date-added . 1552739191) (dependencies . ("db-lib" "draw-lib" "math-lib" "plot-gui-lib" "plot-lib" "srfi-lite-lib" "typed-racket-lib" "rackunit-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib" "db-doc" "math-doc" "plot-doc" "al2-test-runner")) (description . "A data frame implementation for Racket") (implies . ()) (last-checked . 1632902926) (last-edit . 1552739191) (last-updated . 1630739322) (modules . ((lib "data-frame/private/exn.rkt") (lib "data-frame/private/tcx.rkt") (lib "data-frame/private/annealing.rkt") (lib "data-frame/private/slr.rkt") (lib "data-frame/private/csv.rkt") (lib "data-frame/private/rdp-simplify.rkt") (lib "data-frame/tcx.rkt") (lib "data-frame/private/spline.rkt") (lib "data-frame/private/gpx.rkt") (lib "data-frame/private/describe.rkt") (lib "data-frame/private/bsearch.rkt") (lib "data-frame/gpx.rkt") (lib "data-frame/private/least-squares-fit.rkt") (lib "data-frame/private/meanmax.rkt") (lib "data-frame/private/histogram.rkt") (lib "data-frame/private/xml-common.rkt") (lib "data-frame/private/df.rkt") (lib "data-frame/private/test/df-generate.rkt") (lib "data-frame/private/sql.rkt") (lib "data-frame/scribblings/data-frame.scrbl") (lib "data-frame/private/colors.rkt") (lib "data-frame/private/test/df-lsq-plots.rkt") (lib "data-frame/private/for-df.rkt") (lib "data-frame/private/series.rkt") (lib "data-frame/private/statistics.rkt") (lib "data-frame/private/scatter.rkt") (lib "data-frame/main.rkt") (lib "data-frame/private/test/df-test.rkt"))) (name . "data-frame") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexharsanyi@gmail.com . #t) (data-frame . #t) (ring:1 . #t) (tabular . #t))) (source . "https://github.com/alex-hhh/data-frame.git") (tags . ("data-frame" "tabular")) (versions . #hash((default . #hasheq((checksum . "ea260ee35e87be7f3f2d7808cdaf1d7e5d7d9916") (source . "https://github.com/alex-hhh/data-frame.git") (source_url . "https://github.com/alex-hhh/data-frame.git"))))))) ("data-lib" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.6") "rackunit-lib")) (description . "implementation (no documentation) part of data") (implies . ()) (last-checked . 1632902926) (last-edit . 1417659583) (last-updated . 1623838118) (modules . ((lib "data/skip-list.rkt") (lib "data/interval-map.rkt") (lib "data/union-find.rkt") (lib "data/private/skip-list.rkt") (lib "data/heap/unsafe.rkt") (lib "data/splay-tree.rkt") (lib "data/gvector.rkt") (lib "data/heap.rkt") (lib "data/order.rkt"))) (name . "data-lib") (ring . 0) (search-terms . #hasheq((author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "58cbbacedc6df418faa8faac0f7b8133998bce96") (source . "git://github.com/racket/data/?path=data-lib") (source_url . "git://github.com/racket/data/?path=data-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("data-red-black" . #hasheq((author . "dyoo@hashcollision.org") (authors . ("dyoo@hashcollision.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "data-red-black" "doc/data-red-black@data-red-black/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/data-red-black.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/data-red-black.txt"))) (checksum . "d473dd82c5406c8954f70060fe3764bf72d92a90") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "data-lib" "data-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "red-black trees.  Includes implementations of augmented red-black trees, positional red-black trees, and an ordered set backed by a rb-tree.") (implies . ()) (last-checked . 1632902927) (last-edit . 1359057406) (last-updated . 1502815880) (modules . ((lib "data/red-black/ordered-set.rkt") (lib "data/red-black/augmented.scrbl") (lib "data/red-black/augmented.rkt") (lib "data/red-black/data-red-black.scrbl") (lib "data/red-black/positional.rkt") (lib "data/red-black/positional.scrbl") (lib "data/red-black/ordered-set.scrbl") (lib "data/red-black/biblio.scrbl") (lib "data/red-black/rb-token-tree.rkt"))) (name . "data-red-black") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dyoo@hashcollision.org . #t) (data . #t) (ring:1 . #t))) (source . "github://github.com/dyoo/data-red-black/master/") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "d473dd82c5406c8954f70060fe3764bf72d92a90") (source . "github://github.com/dyoo/data-red-black/master/") (source_url . "http://github.com/dyoo/data-red-black/tree/master/"))))))) ("data-sci" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/data-sci.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "427efdec036df998b05553484f6ba5dd0f1bc4af") (checksum-error . "pkg: specified directory is not in Git respository\n  path: data-sci\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:913:0: lift-git-directory-content\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:318:11\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:114:0: stage-package/info\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:720:0: pkg-stage\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:129:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (date-added . 1562278463) (dependencies . ("https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-kata-util" "https://github.com/n3mo/data-science.git")) (description . "To facilitate educational use, this reprovides plot and data-science.  The vision is to add specific datasets, and various abstractions and/or convenience functions for working with certain sets.") (implies . ()) (last-checked . 1632902928) (last-edit . 1562278463) (last-updated . 1621808143) (modules . ((lib "data-sci/sets/html-util.rkt") (lib "data-sci/examples.rkt") (lib "data-sci/lang/k-means.rkt") (lib "data-sci/sets/csv-util.rkt") (lib "data-sci/assets.rkt") (lib "data-sci/lang/corpus.rkt") (lib "data-sci/lang/corpus/main.rkt") (lib "data-sci/main.rkt") (lib "data-sci/lang/corpus/corpuses.rkt") (lib "data-sci/lang/corpus/lang.rkt") (lib "data-sci/sets/titanic.rkt") (lib "data-sci/sets/large-cities.rkt") (lib "data-sci/lang/main.rkt") (lib "data-sci/sets.rkt") (lib "data-sci/scribblings/manual.scrbl"))) (name . "data-sci") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/TS-Languages.git?path=data-sci") (tags . ()) (versions . #hash((default . #hasheq((checksum . "427efdec036df998b05553484f6ba5dd0f1bc4af") (source . "https://github.com/thoughtstem/TS-Languages.git?path=data-sci") (source_url . "https://github.com/thoughtstem/TS-Languages.git?path=data-sci"))))))) ("data-table" . #hasheq((author . "matt@jadud.com") (authors . ("matt@jadud.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "manual"))) (failure-log . "server/built/fail/data-table.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "331dcd445372435abcca64e4eb75c8d34a73fe5b") (checksum-error . #f) (collection . "data-table") (conflicts . ()) (date-added . 1551027738) (dependencies . ("db" "data-lib" "csv-reading" "gregor" "rackunit" "rackunit-chk")) (description . "data-table provides a set of tools for working with tabular data. Still under construction.") (implies . ()) (last-checked . 1632902928) (last-edit . 1551037653) (last-updated . 1552374179) (modules . ((lib "data-table/sanitizers.rkt") (lib "data-table/formats/csv.rkt") (lib "data-table/scribblings/introduction.scrbl") (lib "data-table/main.rkt") (lib "data-table/scribblings/manual.scrbl") (lib "data-table/data-science-wrapper.rkt") (lib "data-table/scribblings/reference.scrbl") (lib "data-table/formats/sheets.rkt") (lib "data-table/formats/sqlite.rkt") (lib "data-table/syntax-wrappers.rkt") (lib "data-table/operations/pull.rkt") (lib "data-table/formats/sql-util.rkt") (lib "data-table/scribblings/guide.scrbl") (lib "data-table/scribblings/working-with-data.scrbl") (lib "data-table/scribblings/generate-images.rkt") (lib "data-table/scribblings/operations/pull.scrbl") (lib "data-table/scribblings/operations/drawing-support.rkt") (lib "data-table/test-support.rkt") (lib "data-table/scribblings/reading-data.scrbl") (lib "data-table/formats/sql.rkt") (lib "data-table/scribblings/operations/select.scrbl") (lib "data-table/scribblings/operations/sieve.scrbl") (lib "data-table/operations/sieve.rkt") (lib "data-table/types.rkt") (lib "data-table/tables.rkt") (lib "data-table/operations/select.rkt") (lib "data-table/scribblings/sanitizers.scrbl"))) (name . "data-table") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:matt@jadud.com . #t) (data . #t) (frame . #t) (gsheets . #t) (mysql . #t) (ring:1 . #t) (sqlite3 . #t) (tabular . #t))) (source . "https://github.com/jadudm/data-table.git") (tags . ("data" "frame" "gsheets" "mysql" "sqlite3" "tabular")) (versions . #hash((default . #hasheq((checksum . "331dcd445372435abcca64e4eb75c8d34a73fe5b") (source . "https://github.com/jadudm/data-table.git") (source_url . "https://github.com/jadudm/data-table.git"))))))) ("data-test" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "data-enumerate-lib" "racket-index" "data-lib" "rackunit-lib" "math-lib")) (description . "tests for data-lib") (implies . ()) (last-checked . 1632902928) (last-edit . 1417659583) (last-updated . 1623838120) (modules . ((lib "tests/data/enumerate.rkt") (lib "tests/data/test-docs-complete.rkt") (lib "tests/data/enumerate/util.rkt") (lib "tests/data/interval-map.rkt") (lib "tests/data/order.rkt") (lib "tests/data/heap.rkt") (lib "tests/data/integer-set.rkt") (lib "tests/data/queue.rkt") (lib "tests/data/ordered-dict.rkt") (lib "tests/data/gvector.rkt") (lib "tests/data/bit-vector.rkt"))) (name . "data-test") (ring . 0) (search-terms . #hasheq((author:ryanc@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "58cbbacedc6df418faa8faac0f7b8133998bce96") (source . "git://github.com/racket/data/?path=data-test") (source_url . "git://github.com/racket/data/?path=data-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("data-type" . #hasheq((author . "dannypsnl@gmail.com") (authors . ("dannypsnl@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ab521276bc054921a740c6e6ff9030d8cb4dc172") (checksum-error . #f) (collection . "data-type") (conflicts . ()) (date-added . 1629348872) (dependencies . ("base" "typed-racket-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "data type syntax for typed/racket") (implies . ()) (last-checked . 1632902928) (last-edit . 1629941957) (last-updated . 1630465722) (modules . ((lib "data-type/scribblings/data-type.scrbl") (lib "data-type/main.rkt"))) (name . "data-type") (ring . 1) (search-terms . #hasheq((author:dannypsnl@gmail.com . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/dannypsnl/data-type.git#develop") (tags . ("typed-racket")) (versions . #hash((default . #hasheq((checksum . "ab521276bc054921a740c6e6ff9030d8cb4dc172") (source . "https://github.com/dannypsnl/data-type.git#develop") (source_url . "https://github.com/dannypsnl/data-type.git#develop"))))))) ("database-url" . #hasheq((author . "lassi@lassi.io") (authors . ("lassi@lassi.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "database-url" "doc/database-url@database-url/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/database-url.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/database-url.txt"))) (checksum . "1bc45817ab41171da41d39c0027367eda698c463") (checksum-error . #f) (collection . "database-url") (conflicts . ()) (date-added . 1555074431) (dependencies . ("db-lib" "rackunit-lib" "base" "db-doc" "racket-doc" "scribble-lib")) (description . "Parse DATABASE_URL for use with the Racket db module") (implies . ()) (last-checked . 1632902928) (last-edit . 1555074431) (last-updated . 1593896139) (modules . ((lib "database-url/database-url.rkt") (lib "database-url/database-url-test.rkt") (lib "database-url/database-url.scrbl") (lib "database-url/main.rkt"))) (name . "database-url") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lassi@lassi.io . #t) (db . #t) (ring:1 . #t) (uri . #t) (url . #t) (web . #t))) (source . "https://github.com/lassik/racket-database-url.git") (tags . ("db" "uri" "url" "web")) (versions . #hash((default . #hasheq((checksum . "1bc45817ab41171da41d39c0027367eda698c463") (source . "https://github.com/lassik/racket-database-url.git") (source_url . "https://github.com/lassik/racket-database-url.git"))))))) ("datacell" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "datacell" "doc/datacell@datacell/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/datacell.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/datacell.txt"))) (checksum . "fe91d9251542df5f9edb41fb457fb6c7f548d425") (checksum-error . #f) (collection . "datacell") (conflicts . ()) (date-added . 1551898611) (dependencies . ("base" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A simple embedded dataflow language") (implies . ()) (last-checked . 1632902929) (last-edit . 1551898622) (last-updated . 1553173378) (modules . ((lib "datacell/scribblings/datacell.scrbl") (lib "datacell/private/cell.rkt") (lib "datacell/main.rkt"))) (name . "datacell") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:spencer@florence.io . #t) (dataflow . #t) (ring:1 . #t))) (source . "https://github.com/florence/datacell.git") (tags . ("dataflow")) (versions . #hash((default . #hasheq((checksum . "fe91d9251542df5f9edb41fb457fb6c7f548d425") (source . "https://github.com/florence/datacell.git") (source_url . "https://github.com/florence/datacell.git"))))))) ("datalog" . #hash((author . "jay@racket-lang.org") (authors . ("jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "datalog" "doc/datalog@datalog/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "datalog") (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "syntax-color-lib" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "An implementation of the Datalog language") (implies . ()) (last-checked . 1632902929) (last-edit . 1417659583) (last-updated . 1572301071) (modules . ((lib "datalog/tests/pretty.rkt") (lib "datalog/tests/paren-examples/revpath.rkt") (lib "datalog/tests/pr/5.rkt") (lib "datalog/private/lex.rkt") (lib "datalog/lang/reader.rkt") (lib "datalog/sexp/lang/reader.rkt") (lib "datalog/stx.rkt") (lib "datalog/tests/examples/path.rkt") (lib "datalog/tests/paren-examples/long.rkt") (lib "datalog/tests/examples/hello.rkt") (lib "datalog/tests/examples/revpath.rkt") (lib "datalog/eval.rkt") (lib "datalog/private/compiler.rkt") (lib "datalog/pretty.rkt") (lib "datalog/runtime.rkt") (lib "datalog/tests/runtime.rkt") (lib "datalog/tests/private/env.rkt") (lib "datalog/tests/paren-examples/tutorial.rkt") (lib "datalog/tests/paren-examples/true.rkt") (lib "datalog/tests/private/variant.rkt") (lib "datalog/tests/private/lex.rkt") (lib "datalog/tests/paren-examples/sym.rkt") (lib "datalog/scribblings/datalog.scrbl") (lib "datalog/tests/private/unify.rkt") (lib "datalog/lang/lang-info.rkt") (lib "datalog/tests/paren-examples/ancestor.rkt") (lib "datalog/tests/private/subst.rkt") (lib "datalog/tool/syntax-color.rkt") (lib "datalog/tests/examples/bidipath.rkt") (lib "datalog/tests/parse.rkt") (lib "datalog/tests/racket.rkt") (lib "datalog/tests/pr/6.rkt") (lib "datalog/tests/util.rkt") (lib "datalog/ast.rkt") (lib "datalog/tests/examples/ancestor.rkt") (lib "datalog/private/pprint.rkt") (lib "datalog/tests/examples/empty.rkt") (lib "datalog/tests/examples/pq.rkt") (lib "datalog/lang/configure-runtime.rkt") (lib "datalog/serialize.rkt") (lib "datalog/tool/submit.rkt") (lib "datalog/tests/paren-examples/req.rkt") (lib "datalog/sexp/lang.rkt") (lib "datalog/tests/test-docs-complete.rkt") (lib "datalog/tests/main.rkt") (lib "datalog/tests/paren-examples/bidipath.rkt") (lib "datalog/tests/examples/sym.rkt") (lib "datalog/scribblings/tutorial.scrbl") (lib "datalog/tests/paren-examples/says.rkt") (lib "datalog/tests/ast.rkt") (lib "datalog/tests/paren-examples/add1.rkt") (lib "datalog/tests/examples/laps.rkt") (lib "datalog/tests/eval.rkt") (lib "datalog/tests/examples/true.rkt") (lib "datalog/tests/paren-examples/pq.rkt") (lib "datalog/tests/pr/1.rkt") (lib "datalog/main.rkt") (lib "datalog/tests/paren-examples/laps.rkt") (lib "datalog/tests/examples/tutorial.rkt") (lib "datalog/private/env.rkt") (lib "datalog/tests/examples/fac.rkt") (lib "datalog/tests/paren-examples/empty.rkt") (lib "datalog/tests/examples/long.rkt") (lib "datalog/tests/paren-examples/path.rkt") (lib "datalog/private/variant.rkt") (lib "datalog/scribblings/utils.rkt") (lib "datalog/scribblings/racket.scrbl") (lib "datalog/private/subst.rkt") (lib "datalog/parse.rkt") (lib "datalog/private/unify.rkt") (lib "datalog/tests/examples/says.rkt") (lib "datalog/tests/tool/syntax-color.rkt") (lib "datalog/tests/examples/student.rkt"))) (name . "datalog") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:jay@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "057771889eff193e5442a0c95b8c837bac4c241c") (source . "git://github.com/racket/datalog") (source_url . "http://github.com/racket/datalog/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("datatype" . #hasheq((author . "sgtamk@gmail.com") (authors . ("sgtamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/datatype.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/datatype.txt"))) (checksum . "5d865929dfcab856ebb85924ef16a74b13362662") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib")) (description . "Algebraic(-like) Data Types") (implies . ()) (last-checked . 1632902929) (last-edit . 1476382356) (last-updated . 1605129878) (modules . ((lib "datatype/private/example.rkt") (lib "datatype/experimental/example.rkt") (lib "datatype/private/parse-type.rkt") (lib "datatype/main.rkt") (lib "datatype/experimental/datatype.rkt") (lib "datatype/private/example-usage.rkt") (lib "datatype/private/type-case.rkt") (lib "datatype/private/example-type.rkt"))) (name . "datatype") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:sgtamk@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/pnwamk/datatype#master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5d865929dfcab856ebb85924ef16a74b13362662") (source . "git://github.com/pnwamk/datatype#master") (source_url . "http://github.com/pnwamk/datatype/tree/master#master"))))))) ("date" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "date" "doc/date@date/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/date.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/date.txt"))) (checksum . "57d7adbbc09dffc26337bff1b1a3597c872be8ea") (checksum-error . #f) (collection . "date") (conflicts . ()) (dependencies . ("srfi-lite-lib" "typed-racket-lib" "base" "srfi-lite-lib" "typed-racket-more" "typed-racket-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Simple Date/Time support for formats commonly used on the Web in Typed Racket.\r\nNote there are better collection options unless you just need a RFC/ISO date for some HTTP API or similar.") (implies . ()) (last-checked . 1632902930) (last-edit . 1528424264) (last-updated . 1620468362) (modules . ((lib "date/scribblings/date.scrbl") (lib "date/main.rkt"))) (name . "date") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (ISO-8601 . #t) (RFC-2822 . #t) (author:ray.racine@gmail.com . #t) (date . #t) (datetime . #t) (ring:1 . #t) (time . #t))) (source . "https://gitlab.com/RayRacine/date.git") (tags . ("date" "datetime" "ISO-8601" "RFC-2822" "time")) (versions . #hash((default . #hasheq((checksum . "57d7adbbc09dffc26337bff1b1a3597c872be8ea") (source . "https://gitlab.com/RayRacine/date.git") (source_url . "https://gitlab.com/RayRacine/date.git"))))))) ("db" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("db-lib" "db-doc" "base")) (description . "Database connectivity") (implies . ("db-lib" "db-doc")) (last-checked . 1632902930) (last-edit . 1417659583) (last-updated . 1626692923) (modules . ()) (name . "db") (ring . 0) (search-terms . #hasheq((author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "bf7e4955fee9bdf74b15dc347a92fd0407789074") (source . "git://github.com/racket/db/?path=db") (source_url . "git://github.com/racket/db/?path=db"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("db-doc" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "db" "doc/db@db-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "data-doc" "srfi-lite-lib" "web-server-doc" "base" "scribble-lib" "sandbox-lib" "web-server-lib" "db-lib" "racket-doc")) (description . "documentation part of db") (implies . ()) (last-checked . 1632902930) (last-edit . 1417659583) (last-updated . 1626692924) (modules . ((lib "db/scribblings/config.rkt") (lib "db/scribblings/notes.scrbl") (lib "db/scribblings/query.scrbl") (lib "db/scribblings/tabbing.rkt") (lib "db/scribblings/sql-types.scrbl") (lib "db/scribblings/util.scrbl") (lib "db/scribblings/connect.scrbl") (lib "db/scribblings/db.scrbl") (lib "db/scribblings/using-db.scrbl"))) (name . "db-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "bf7e4955fee9bdf74b15dc347a92fd0407789074") (source . "git://github.com/racket/db/?path=db-doc") (source_url . "git://github.com/racket/db/?path=db-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("db-lib" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("srfi-lite-lib" ("base" #:version "8.0.0.7") "unix-socket-lib" ("sasl-lib" #:version "1.1"))) (description . "implementation (no documentation) part of db") (implies . ()) (last-checked . 1632902931) (last-edit . 1417659583) (last-updated . 1626692926) (modules . ((lib "db/util/datetime.rkt") (lib "db/private/cassandra/connection.rkt") (lib "db/util/private/geometry.rkt") (lib "db/postgresql.rkt") (lib "db/main.rkt") (lib "db/private/odbc/connection.rkt") (lib "db/util/testing.rkt") (lib "db/private/cassandra/main.rkt") (lib "db/private/sqlite3/place.rkt") (lib "db/private/odbc/ffi-constants.rkt") (lib "db/private/odbc/ffi.rkt") (lib "db/private/postgresql/message.rkt") (lib "db/private/cassandra/message.rkt") (lib "db/base.rkt") (lib "db/util/cassandra.rkt") (lib "db/util/postgresql.rkt") (lib "db/odbc.rkt") (lib "db/cassandra.rkt") (lib "db/unsafe/sqlite3.rkt") (lib "db/private/postgresql/dbsystem.rkt") (lib "db/util/geometry.rkt") (lib "db/private/generic/place-client.rkt") (lib "db/private/generic/place-server.rkt") (lib "db/private/cassandra/dbsystem.rkt") (lib "db/private/generic/connect-util.rkt") (lib "db/mysql.rkt") (lib "db/private/odbc/dbsystem.rkt") (lib "db/private/mysql/message.rkt") (lib "db/private/mysql/connection.rkt") (lib "db/private/generic/functions2.rkt") (lib "db/private/postgresql/main.rkt") (lib "db/private/mysql/main.rkt") (lib "db/sqlite3.rkt") (lib "db/private/generic/sql-convert.rkt") (lib "db/private/odbc/main.rkt") (lib "db/private/postgresql/connection.rkt") (lib "db/private/generic/dsn.rkt") (lib "db/private/mysql/dbsystem.rkt"))) (name . "db-lib") (ring . 0) (search-terms . #hasheq((author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "bf7e4955fee9bdf74b15dc347a92fd0407789074") (source . "git://github.com/racket/db/?path=db-lib") (source_url . "git://github.com/racket/db/?path=db-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("db-ppc-macosx" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for base package") (implies . ()) (last-checked . 1632902931) (last-edit . 1576860307) (last-updated . 1595021029) (modules . ()) (name . "db-ppc-macosx") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "bb6eb3e5e8a6feec0611f429107ebfc51d222cd8") (source . "https://pkg-sources.racket-lang.org/pkgs/bb6eb3e5e8a6feec0611f429107ebfc51d222cd8/db-ppc-macosx.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/bb6eb3e5e8a6feec0611f429107ebfc51d222cd8/db-ppc-macosx.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("db-test" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "db-lib" "rackunit-lib" "web-server-lib" "srfi-lite-lib")) (description . "tests for db") (implies . ()) (last-checked . 1632902932) (last-edit . 1417659583) (last-updated . 1626692927) (modules . ((lib "tests/db/programs/pools.rkt") (lib "tests/db/programs/sl-insert-id.rkt") (lib "tests/db/db/sql-types.rkt") (lib "tests/db/programs/sl-os-thread.rkt") (lib "tests/db/gen/misc.rkt") (lib "tests/db/gen/odbc.rkt") (lib "tests/db/programs/startup-leak-test.rkt") (lib "tests/db/programs/cassandra.rkt") (lib "tests/db/db/connection.rkt") (lib "tests/db/programs/web-test.rkt") (lib "tests/db/programs/sl-inserts.rkt") (lib "tests/db/programs/custodian.rkt") (lib "tests/db/programs/memleak.rkt") (lib "tests/db/db/query.rkt") (lib "tests/db/db/concurrent.rkt") (lib "tests/db/config.rkt") (lib "tests/db/gen/sql-types.rkt") (lib "tests/db/all-tests.rkt") (lib "tests/db/programs/sl-unsafe.rkt") (lib "tests/db/programs/mysql-auth.rkt") (lib "tests/db/gen/query.rkt"))) (name . "db-test") (ring . 0) (search-terms . #hasheq((author:ryanc@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "bf7e4955fee9bdf74b15dc347a92fd0407789074") (source . "git://github.com/racket/db/?path=db-test") (source_url . "git://github.com/racket/db/?path=db-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("db-win32-i386" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for base package") (implies . ()) (last-checked . 1632902932) (last-edit . 1626896069) (last-updated . 1626896443) (modules . ()) (name . "db-win32-i386") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "4c83114a738ecf406c88127f5515596c6083bab2") (source . "https://pkg-sources.racket-lang.org/pkgs/4c83114a738ecf406c88127f5515596c6083bab2/db-win32-i386.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/4c83114a738ecf406c88127f5515596c6083bab2/db-win32-i386.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("db-win32-x86_64" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for base package") (implies . ()) (last-checked . 1632902932) (last-edit . 1626896069) (last-updated . 1626896441) (modules . ()) (name . "db-win32-x86_64") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "1e2a93e84f393b2547e3d4d7ba3748a7ad805b89") (source . "https://pkg-sources.racket-lang.org/pkgs/1e2a93e84f393b2547e3d4d7ba3748a7ad805b89/db-win32-x86_64.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/1e2a93e84f393b2547e3d4d7ba3748a7ad805b89/db-win32-x86_64.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("db-x86_64-linux-natipkg" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for base package") (implies . ()) (last-checked . 1632902933) (last-edit . 1626896069) (last-updated . 1626896445) (modules . ()) (name . "db-x86_64-linux-natipkg") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "8b76423fe610e3b88d3251080c8acf877de3aa35") (source . "https://pkg-sources.racket-lang.org/pkgs/8b76423fe610e3b88d3251080c8acf877de3aa35/db-x86_64-linux-natipkg.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/8b76423fe610e3b88d3251080c8acf877de3aa35/db-x86_64-linux-natipkg.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("dbg" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "c857049255cd68f2e6cbb90882e97cf3d96d4ba0") (checksum-error . #f) (collection . "debugging") (conflicts . ()) (date-added . 1632546265) (dependencies . ("base" "profile-lib")) (description . "Remote debugging client and server implementation.") (implies . ()) (last-checked . 1632902933) (last-edit . 1632546265) (last-updated . 1632902933) (modules . ((lib "debugging/private/common.rkt") (lib "debugging/server.rkt") (lib "debugging/private/error.rkt") (lib "debugging/private/client.rkt") (lib "debugging/private/memory-cs.rkt") (lib "debugging/client.rkt") (lib "debugging/private/server.rkt") (lib "debugging/private/memory-bc.rkt") (lib "debugging/private/memory.rkt"))) (name . "dbg") (ring . 2) (search-terms . #hasheq((author:bogdan@defn.io . #t) (debugging . #t) (ring:2 . #t))) (source . "https://github.com/Bogdanp/racket-dbg.git?path=dbg") (tags . ("debugging")) (versions . #hash((default . #hasheq((checksum . "c857049255cd68f2e6cbb90882e97cf3d96d4ba0") (source . "https://github.com/Bogdanp/racket-dbg.git?path=dbg") (source_url . "https://github.com/Bogdanp/racket-dbg.git?path=dbg"))))))) ("dbg-ui" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "c857049255cd68f2e6cbb90882e97cf3d96d4ba0") (checksum-error . #f) (collection . "debugging") (conflicts . ()) (date-added . 1632546304) (dependencies . ("base" "dbg" "gui-easy-lib" "gui-lib" "plot-lib" "plot-gui-lib" "profile-lib")) (description . "Remote debugging GUI client for the dbg package.") (implies . ()) (last-checked . 1632902934) (last-edit . 1632546324) (last-updated . 1632902934) (modules . ((lib "debugging/ui/profile.rkt") (lib "debugging/ui/main.rkt") (lib "debugging/ui.rkt") (lib "debugging/ui/tree-map.rkt"))) (name . "dbg-ui") (ring . 2) (search-terms . #hasheq((author:bogdan@defn.io . #t) (debugging . #t) (gui . #t) (ring:2 . #t))) (source . "https://github.com/Bogdanp/racket-dbg.git?path=dbg-ui") (tags . ("debugging" "gui")) (versions . #hash((default . #hasheq((checksum . "c857049255cd68f2e6cbb90882e97cf3d96d4ba0") (source . "https://github.com/Bogdanp/racket-dbg.git?path=dbg-ui") (source_url . "https://github.com/Bogdanp/racket-dbg.git?path=dbg-ui"))))))) ("dbm" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dbm" "doc/dbm@dbm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dbm.txt") (test-failure-log . "server/built/test-fail/dbm.txt") (test-success-log . #f))) (checksum . "a5bf5a400457f49e3e8f5b2009f97e6c4494d1c6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "An interface to UNIX dbm files using a libdbm FFI") (implies . ()) (last-checked . 1632902935) (last-edit . 1354108626) (last-updated . 1576634759) (modules . ((lib "file/dbm/test.rkt") (lib "file/dbm.rkt") (lib "file/dbm/dbm.rkt") (lib "file/dbm/dbm-ffi.rkt") (lib "file/dbm/dbm.scrbl"))) (name . "dbm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (db . #t) (ffi . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/dbm/master") (tags . ("db" "ffi")) (versions . #hash((default . #hasheq((checksum . "a5bf5a400457f49e3e8f5b2009f97e6c4494d1c6") (source . "github://github.com/jeapostrophe/dbm/master") (source_url . "http://github.com/jeapostrophe/dbm/tree/master"))))))) ("dbus" . #hasheq((author . "tonygarnockjones@gmail.com mordae@anilinux.org") (authors . ("tonygarnockjones@gmail.com" "mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dbus" "doc/dbus@dbus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dbus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dbus.txt"))) (checksum . "57c5e3d9120f778b48ba01efb6b37c1ffbc9963d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("xexpr-path" "misc1" "base" "parser-tools-lib" "unstable-lib" "racket-doc" "scribble-lib")) (description . "Native D-Bus for Racket") (implies . ()) (last-checked . 1632902935) (last-edit . 1474394630) (last-updated . 1502815888) (modules . ((lib "dbus/main.rkt") (lib "dbus/private/util.rkt") (lib "dbus/private/signature.rkt") (lib "dbus/dbus.scrbl") (lib "dbus/private/ffi.rkt") (lib "dbus/private/common.rkt") (lib "dbus/examples/network-manager.rkt") (lib "dbus/interface.rkt") (lib "dbus/examples/hello.rkt") (lib "dbus/interface.scrbl") (lib "dbus/examples/notification.rkt") (lib "dbus/private/message.rkt") (lib "dbus/private/rpc.rkt"))) (name . "dbus") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (author:tonygarnockjones@gmail.com . #t) (gnome . #t) (linux . #t) (ring:1 . #t) (rpc . #t))) (source . "git://github.com/tonyg/racket-dbus") (tags . ("gnome" "linux" "rpc")) (versions . #hash((default . #hasheq((checksum . "57c5e3d9120f778b48ba01efb6b37c1ffbc9963d") (source . "git://github.com/tonyg/racket-dbus") (source_url . "http://github.com/tonyg/racket-dbus/tree/master"))))))) ("ddict" . #hasheq((author . "pnwamk@gmail.com") (authors . ("pnwamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ddict" "doc/ddict@ddict/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ddict.txt") (test-failure-log . "server/built/test-fail/ddict.txt") (test-success-log . #f))) (checksum . "a322d6a38c203d946d48d3ae5892e9ad4f11bdf2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "Deterministic Dictionaries") (implies . ()) (last-checked . 1632902935) (last-edit . 1485368541) (last-updated . 1528386227) (modules . ((lib "data/ddict/ddict.scrbl") (lib "tests/data/ddict.rkt") (lib "data/private/id-ddict.rkt") (lib "data/private/ddict.rkt") (lib "tests/data/ddict-perf.rkt") (lib "data/id-ddict.rkt") (lib "tests/data/id-ddict.rkt") (lib "data/ddict.rkt"))) (name . "ddict") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pnwamk@gmail.com . #t) (data . #t) (ring:1 . #t))) (source . "git://github.com/pnwamk/ddict.git") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "a322d6a38c203d946d48d3ae5892e9ad4f11bdf2") (source . "git://github.com/pnwamk/ddict.git") (source_url . "http://github.com/pnwamk/ddict.git/tree/master"))))))) ("debug" . #hasheq((author . "alexander@knauth.org mb@mbtype.com") (authors . ("alexander@knauth.org" "mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "debug" "doc/debug@debug/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/debug.txt") (test-failure-log . "server/built/test-fail/debug.txt") (test-success-log . #f))) (checksum . "aa798842c09ece55c2a088f09d30e398d2b77fee") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.6.0.3") "rackunit-lib" "typed-racket-lib" "pretty-format" "rackunit-lib" "rackunit-typed" "scribble-lib" "racket-doc" "scribble-doc")) (description . "a lang-extension for debugging, and a macro for inserting a debug-repl") (implies . ()) (last-checked . 1632902935) (last-edit . 1468642550) (last-updated . 1569174620) (modules . ((lib "debug/test/test-util.rkt") (lib "debug/test/debug-repl.rkt") (lib "typed/debug/test/typed-racket.rkt") (lib "typed/debug/report/helpers.rkt") (lib "debug/no-output/lang/reader.rkt") (lib "debug/private/make-variable-like-transformer.rkt") (lib "debug/report.rkt") (lib "debug/lang/reader.rkt") (lib "debug/test/test.rkt") (lib "debug/report/helpers.rkt") (lib "debug/lang/runtime-config.rkt") (lib "typed/debug/test/typed-with-reader.rkt") (lib "debug/repl.rkt") (lib "debug/test/debug-repl-macros.rkt") (lib "typed/debug/report.rkt") (lib "debug/scribblings/debug.scrbl") (lib "debug/reader.rkt") (lib "debug/lang/language-info.rkt"))) (name . "debug") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (author:mb@mbtype.com . #t) (debug . #t) (debugging . #t) (lang-extension . #t) (repl . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/debug") (tags . ("debug" "debugging" "lang-extension" "repl")) (versions . #hash((default . #hasheq((checksum . "aa798842c09ece55c2a088f09d30e398d2b77fee") (source . "git://github.com/AlexKnauth/debug") (source_url . "http://github.com/AlexKnauth/debug/tree/master"))) ("6.2" . #hasheq((checksum . "5d652d31fb906e2c64a769bf33091013c224f640") (source . "git://github.com/AlexKnauth/debug#for-v-up-to-6.2.1") (source_url . "http://github.com/AlexKnauth/debug/tree/master#for-v-up-to-6.2.1"))) ("6.2.1" . #hasheq((checksum . "5d652d31fb906e2c64a769bf33091013c224f640") (source . "git://github.com/AlexKnauth/debug#for-v-up-to-6.2.1") (source_url . "http://github.com/AlexKnauth/debug/tree/master#for-v-up-to-6.2.1"))))))) ("debug-scopes" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "debug-scopes" "doc/debug-scopes@debug-scopes/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/debug-scopes.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/debug-scopes.txt"))) (checksum . "8d8f13976b634113f717ddbaf76e9de85203557c") (checksum-error . #f) (collection . "debug-scopes") (conflicts . ()) (date-added . 1614799376) (dependencies . ("base" "pretty-format" "rackunit-lib" "reprovide-lang" "scribble-lib" "racket-doc" "scribble-enhanced")) (description . "Some utilities which help debugging scope-related issues for unhygienic macros") (implies . ()) (last-checked . 1632902936) (last-edit . 1614889033) (last-updated . 1620698515) (modules . ((lib "debug-scopes/main.rkt") (lib "debug-scopes/test/named-scopes-test-def.rkt") (lib "debug-scopes/named-scopes/override.rkt") (lib "debug-scopes/named-scopes/dummy-lang.rkt") (lib "debug-scopes/scribblings/debug-scopes.scrbl") (lib "debug-scopes/named-scopes.rkt") (lib "debug-scopes/test/named-scopes-test-use.rkt") (lib "debug-scopes/superscripts.rkt") (lib "debug-scopes/named-scopes/exptime.rkt") (lib "debug-scopes/named-scopes-sli-parameter.rkt"))) (name . "debug-scopes") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (debug . #t) (debugging . #t) (ring:1 . #t) (scopes . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/debug-scopes.git#main") (tags . ("debug" "debugging" "scopes" "syntax")) (versions . #hash((default . #hasheq((checksum . "8d8f13976b634113f717ddbaf76e9de85203557c") (source . "https://github.com/jsmaniac/debug-scopes.git#main") (source_url . "https://github.com/jsmaniac/debug-scopes.git#main"))))))) ("decentralized-internet" . #hasheq((author . "andrew@etherstone.org") (authors . ("andrew@etherstone.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "decentralized-internet" "doc/decentralized-internet@decentralized-internet/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/decentralized-internet.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/decentralized-internet.txt"))) (checksum . "cf020840a7bc35638d939bbe69b66291f0dc7597") (checksum-error . #f) (collection . "decentralized-internet") (conflicts . ()) (date-added . 1586326102) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "A package for building distributed computing projects") (implies . ()) (last-checked . 1632902936) (last-edit . 1586328061) (last-updated . 1632276531) (modules . ((lib "decentralized-internet/scribblings/decentralized-internet.scrbl") (lib "decentralized-internet/main.rkt"))) (name . "decentralized-internet") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:andrew@etherstone.org . #t) (blockchain . #t) (computing . #t) (connectivity . #t) (decentralized . #t) (grid . #t) (grid-computing . #t) (p2p . #t) (ring:1 . #t))) (source . "https://github.com/Lonero-Team/Racket-Package.git") (tags . ("blockchain" "computing" "connectivity" "decentralized" "grid" "grid-computing" "p2p")) (versions . #hash((default . #hasheq((checksum . "cf020840a7bc35638d939bbe69b66291f0dc7597") (source . "https://github.com/Lonero-Team/Racket-Package.git") (source_url . "https://github.com/Lonero-Team/Racket-Package.git"))))))) ("defensive-to-contracts" . #hasheq((author . "peterzhong2023@u.northwestern.edu") (authors . ("peterzhong2023@u.northwestern.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "defensive-to-contracts" "doc/defensive-to-contracts@defensive-to-contracts/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/defensive-to-contracts.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/defensive-to-contracts.txt"))) (checksum . "f64d8cb80a17fb981eb8269ef15f1fdb2f4d190b") (checksum-error . #f) (collection . "defensive-to-contracts") (conflicts . ()) (date-added . 1602836695) (dependencies . ("base" "plai" "gui-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "This package presents a tool that converts defensive programming \r\ninto equivalent contracts. Currently, the tool is still at its infancy \r\nand have not been tested on many code bases. The sample folder contains\r\nsome example files to get you started. So far I have exposed two functions\r\nthat allows you to input a path and either returns the raw result or load up\r\na GUI that allows you to change a file.") (implies . ()) (last-checked . 1632902936) (last-edit . 1602895750) (last-updated . 1602896023) (modules . ((lib "defensive-to-contracts/sample-defensive/realworld1.rkt") (lib "defensive-to-contracts/scribblings/defensive-to-contracts.scrbl") (lib "defensive-to-contracts/syntax-to-contract.rkt") (lib "defensive-to-contracts/textedit.rkt") (lib "defensive-to-contracts/sample-defensive/simple-dependent.rkt") (lib "defensive-to-contracts/sample-defensive/racketcon_.rkt") (lib "defensive-to-contracts/main.rkt") (lib "defensive-to-contracts/related-fact.rkt") (lib "defensive-to-contracts/simplify-fact.rkt") (lib "defensive-to-contracts/fact-to-contract.rkt") (lib "defensive-to-contracts/sample-defensive/unless-one-arg.rkt") (lib "defensive-to-contracts/definitions.rkt") (lib "defensive-to-contracts/structure-deletions.rkt") (lib "defensive-to-contracts/sample-defensive/realworld3.rkt") (lib "defensive-to-contracts/sample-defensive/pcond-onearg.rkt") (lib "defensive-to-contracts/sample-defensive/helloworld.rkt") (lib "defensive-to-contracts/sample-defensive/racketcon.rkt") (lib "defensive-to-contracts/pcond.rkt") (lib "defensive-to-contracts/complex-pred-to-facts.rkt") (lib "defensive-to-contracts/sample-defensive/simple-defensive-two-arg-with-begin.rkt") (lib "defensive-to-contracts/chspans.rkt") (lib "defensive-to-contracts/program-fact.rkt") (lib "defensive-to-contracts/sample-defensive/realworld2.rkt") (lib "defensive-to-contracts/sample-defensive/simple-defensive-two-arg.rkt"))) (name . "defensive-to-contracts") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:peterzhong2023@u.northwestern.edu . #t) (contracts . #t) (conversion . #t) (defensive . #t) (ring:1 . #t))) (source . "https://github.com/jiujiu1123/defensive-to-contracts.git#main") (tags . ("contracts" "conversion" "defensive")) (versions . #hash((default . #hasheq((checksum . "f64d8cb80a17fb981eb8269ef15f1fdb2f4d190b") (source . "https://github.com/jiujiu1123/defensive-to-contracts.git#main") (source_url . "https://github.com/jiujiu1123/defensive-to-contracts.git#main"))))))) ("deferred" . #hasheq((author . "cjfuller@gmail.com") (authors . ("cjfuller@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "deferred" "doc/deferred@deferred/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/deferred.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/deferred.txt"))) (checksum . "fccb728dc9cbc0a6acb38fd0bc782db41bf32d4c") (checksum-error . #f) (collection . "deferred") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "A simple library for deferring asynchronous tasks until a specified time") (implies . ()) (last-checked . 1632902937) (last-edit . 1419883017) (last-updated . 1502815889) (modules . ((lib "deferred/main.rkt") (lib "deferred/main-test.rkt") (lib "deferred/deferred.scrbl"))) (name . "deferred") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:cjfuller@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/cjfuller/deferred") (tags . ()) (versions . #hash((default . #hasheq((checksum . "fccb728dc9cbc0a6acb38fd0bc782db41bf32d4c") (source . "git://github.com/cjfuller/deferred") (source_url . "http://github.com/cjfuller/deferred/tree/master"))))))) ("define-assets-from" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/define-assets-from.txt") (docs . (("main" "define-assets-from" "doc/define-assets-from@define-assets-from/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/define-assets-from.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/define-assets-from.txt"))) (checksum . "f41954f7d955fdabbd697976d73344a5aa733d31") (checksum-error . #f) (collection . "define-assets-from") (conflicts . ()) (date-added . 1568916490) (dependencies . ("base" "htdp-lib" "scribble-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "makes it easy to provide 2htdp/image identifiers from a directory full of PNGs.  Just put files in directories, get provides out from your Racket modules. ") (implies . ()) (last-checked . 1632902937) (last-edit . 1578425457) (last-updated . 1578430976) (modules . ((lib "define-assets-from/main.rkt") (lib "define-assets-from/demo/assets.rkt") (lib "define-assets-from/scribblings/define-assets-from.scrbl") (lib "define-assets-from/demo2/assets.rkt") (lib "define-assets-from/demo/assets2.rkt"))) (name . "define-assets-from") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/define-assets-from.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f41954f7d955fdabbd697976d73344a5aa733d31") (source . "https://github.com/thoughtstem/define-assets-from.git") (source_url . "https://github.com/thoughtstem/define-assets-from.git"))))))) ("define-match-spread-out" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "define-match-spread-out" "doc/define-match-spread-out@define-match-spread-out/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/define-match-spread-out.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/define-match-spread-out.txt"))) (checksum . "0f97b9f4bdee1655617f70f4291cf774993b2f83") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "unstable-lib" "defpat" "rackunit-lib" "scribble-lib" "scribble-code-examples" "racket-doc")) (description . "a version of define that allows definitions to be spread across a file") (implies . ()) (last-checked . 1632902937) (last-edit . 1462893465) (last-updated . 1502815889) (modules . ((lib "define-match-spread-out/tests/test.rkt") (lib "define-match-spread-out/scribblings/define-match-spread-out.scrbl") (lib "define-match-spread-out/tests/require-test.rkt") (lib "define-match-spread-out/main.rkt"))) (name . "define-match-spread-out") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (match . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/define-match-spread-out") (tags . ("match")) (versions . #hash((default . #hasheq((checksum . "0f97b9f4bdee1655617f70f4291cf774993b2f83") (source . "git://github.com/AlexKnauth/define-match-spread-out") (source_url . "http://github.com/AlexKnauth/define-match-spread-out/tree/master"))))))) ("define-who" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "define-who" "doc/define-who@define-who/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/define-who.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/define-who.txt"))) (checksum . "c77167fe7d5c2f3057cc80d9c201f9e888f02545") (checksum-error . #f) (collection . "define-who") (conflicts . ()) (date-added . 1595178382) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "An anaphoric macro that binds who to function name") (implies . ()) (last-checked . 1632902937) (last-edit . 1595178382) (last-updated . 1607782585) (modules . ((lib "define-who/main.rkt") (lib "define-who/scribblings/define-who.scrbl"))) (name . "define-who") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (macro . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/define-who.git") (tags . ("macro")) (versions . #hash((default . #hasheq((checksum . "c77167fe7d5c2f3057cc80d9c201f9e888f02545") (source . "https://github.com/sorawee/define-who.git") (source_url . "https://github.com/sorawee/define-who.git"))))))) ("define-with-spec" . #hasheq((author . "pnwamk@gmail.com") (authors . ("pnwamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "define-with-spec" "doc/define-with-spec@define-with-spec/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/define-with-spec.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/define-with-spec.txt"))) (checksum . "1b7050a848a853313abb5cdd4a0bfcb6705e5f9f") (checksum-error . #f) (collection . "define-with-spec") (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "Allows for function definitions with simple specifications that are enforced by checks at each call site. Functionality pales in comparison to racket/contract, but error messages w/ source info are provided for same-module violations of specifications.") (implies . ()) (last-checked . 1632902937) (last-edit . 1515785308) (last-updated . 1519874741) (modules . ((lib "define-with-spec/tests/tests.rkt") (lib "define-with-spec/main.rkt") (lib "define-with-spec/scribblings/define-with-spec.scrbl"))) (name . "define-with-spec") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:pnwamk@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/pnwamk/define-with-spec.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1b7050a848a853313abb5cdd4a0bfcb6705e5f9f") (source . "https://github.com/pnwamk/define-with-spec.git") (source_url . "https://github.com/pnwamk/define-with-spec.git"))))))) ("define2" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "define2" "doc/define2@define2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/define2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/define2.txt"))) (checksum . "c9760f29b27e45c6fa9edee37d6275214745e8f8") (checksum-error . #f) (collection . "define2") (conflicts . ()) (date-added . 1609683120) (dependencies . ("base" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Provides new but backward-compatible definitions of `lambda` and `define` that simplify keyword arguments and designing wrapper functions.") (implies . ()) (last-checked . 1632902938) (last-edit . 1609761007) (last-updated . 1615568854) (modules . ((lib "define2/define-wrapper.rkt") (lib "define2/define.rkt") (lib "define2/scribblings/define2.scrbl") (lib "define2/main.rkt") (lib "define2/formals.rkt") (lib "define2/tests/define.rkt"))) (name . "define2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (define . #t) (keywords . #t) (lambda . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/Metaxal/define2.git") (tags . ("define" "keywords" "lambda" "syntax")) (versions . #hash((default . #hasheq((checksum . "c9760f29b27e45c6fa9edee37d6275214745e8f8") (source . "https://github.com/Metaxal/define2.git") (source_url . "https://github.com/Metaxal/define2.git"))))))) ("defpat" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "defpat-main" "doc/defpat-main@defpat/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/defpat.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/defpat.txt"))) (checksum . "b1ab923ef4c92355de7ee77703d8af692835c8f0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1622133475) (dependencies . ("base" "generic-bind" "sweet-exp" "reprovide-lang" "unstable-lib" "unstable-list-lib" "rackunit" "scribble-lib" "scribble-code-examples" "racket-doc")) (description . "a version of define for defining functions with match-patterns as arguments") (implies . ()) (last-checked . 1632902938) (last-edit . 1622133475) (last-updated . 1502815889) (modules . ((lib "defpat/opt-match-case-lambda.rkt") (lib "defpat/docs/opt-match-case-lambda.scrbl") (lib "defpat/docs/opt-case-lambda.scrbl") (lib "defpat/docs/defpat.scrbl") (lib "defpat/defpat.rkt") (lib "defpat/main.rkt") (lib "defpat/docs/match-case-lambda.scrbl") (lib "defpat/match-case-lambda.rkt") (lib "defpat/opt-case-lambda.rkt") (lib "defpat/docs/defpat-main.scrbl"))) (name . "defpat") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (match . #t) (ring:1 . #t) (sugar . #t))) (source . "https://github.com/AlexKnauth/defpat.git#master") (tags . ("match" "sugar")) (versions . #hash((default . #hasheq((checksum . "b1ab923ef4c92355de7ee77703d8af692835c8f0") (source . "https://github.com/AlexKnauth/defpat.git#master") (source_url . "https://github.com/AlexKnauth/defpat.git#master"))))))) ("deinprogramm" . #hash((author . "sperber@racket-lang.org") (authors . ("sperber@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "deinprogramm" "doc/deinprogramm@deinprogramm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "deinprogramm-signature" "drracket" "drracket-plugin-lib" "errortrace-lib" "gui-lib" "htdp-lib" "pconvert-lib" "scheme-lib" "simple-tree-text-markup-lib" "string-constants-lib" "trace" "wxme-lib" "snip-lib" "at-exp-lib" "htdp-doc" "racket-doc" "racket-index" "rackunit-lib" "scribble-lib")) (description . "Teaching languages for _Die Macht der Abstraktion_") (implies . ("deinprogramm-signature")) (last-checked . 1632902938) (last-edit . 1433690262) (last-updated . 1632060501) (modules . ((lib "deinprogramm/sdp/tests/record.rkt") (lib "deinprogramm/textbook-pls-spec.rkt") (lib "teachpack/deinprogramm/image.rkt") (lib "deinprogramm/DMdA/tests/run-image-test.rkt") (lib "deinprogramm/DMdA-beginner/lang/reader.rkt") (lib "deinprogramm/DMdA-beginner.rkt") (lib "deinprogramm/sdp/avanced-reader.rkt") (lib "deinprogramm/DMdA/private/module-begin.rkt") (lib "deinprogramm/scribblings/ka.scrbl") (lib "deinprogramm/DMdA/lang/reader.rkt") (lib "deinprogramm/DMdA-assignments.rkt") (lib "deinprogramm/DMdA/tests/run-match-tests.rkt") (lib "deinprogramm/private/explicit-write.rkt") (lib "deinprogramm/sdp/beginner-reader.rkt") (lib "deinprogramm/DMdA/private/DMdA-reader.rkt") (lib "deinprogramm/sdp/vanilla/lang/reader.rkt") (lib "deinprogramm/scribblings/beginner.scrbl") (lib "deinprogramm/DMdA/private/runtime.rkt") (lib "deinprogramm/DMdA/tests/record.rkt") (lib "deinprogramm/sdp/private/primitives.rkt") (lib "deinprogramm/sdp/advanced/lang/reader.rkt") (lib "teachpack/deinprogramm/sound.rkt") (lib "deinprogramm/DMdA-deflam.rkt") (lib "deinprogramm/sdp/advanced.rkt") (lib "deinprogramm/sdp/private/sdp-reader.rkt") (lib "deinprogramm/sdp/vanilla.rkt") (lib "deinprogramm/sdp/private/rewrite-error-message.rkt") (lib "teachpack/deinprogramm/sdp/image.rkt") (lib "deinprogramm/sdp/tests/match.rkt") (lib "deinprogramm/DMdA/tests/run-signature-tests.rkt") (lib "teachpack/deinprogramm/turtle.rkt") (lib "deinprogramm/sdp/private/module-begin.rkt") (lib "deinprogramm/scribblings/prim-ops.rkt") (lib "deinprogramm/DMdA/tests/image.rkt") (lib "deinprogramm/DMdA-vanilla.rkt") (lib "deinprogramm/scribblings/sdp-lib.scrbl") (lib "deinprogramm/sdp/tests/run-signature-tests.rkt") (lib "deinprogramm/sdp/tests/signature.rkt") (lib "teachpack/deinprogramm/image2.rkt") (lib "deinprogramm/sdp/tests/run-match-tests.rkt") (lib "deinprogramm/DMdA/private/DMdA-langs.rkt") (lib "deinprogramm/test-suite.rkt") (lib "deinprogramm/run-dmda-code.rkt") (lib "deinprogramm/DMdA-advanced.rkt") (lib "deinprogramm/sdp/record.rkt") (lib "deinprogramm/sdp/private/sdp-langs.rkt") (lib "deinprogramm/DMdA/private/convert-explicit.rkt") (lib "deinprogramm/sdp/lang/reader.rkt") (lib "deinprogramm/DMdA/define-record-procedures.rkt") (lib "deinprogramm/DMdA-advanced/lang/reader.rkt") (lib "deinprogramm/scribblings/shared.rkt") (lib "deinprogramm/sdp/vanilla-reader.rkt") (lib "deinprogramm/DMdA-assignments/lang/reader.rkt") (lib "deinprogramm/sdp/private/convert-explicit.rkt") (lib "deinprogramm/sdp/private/runtime.rkt") (lib "deinprogramm/DMdA/teachpack/world.rkt") (lib "deinprogramm/scribblings/std-grammar.rkt") (lib "deinprogramm/DMdA-vanilla-reader.rkt") (lib "deinprogramm/private/syntax-checkers.rkt") (lib "deinprogramm/sdp/beginner.rkt") (lib "teachpack/deinprogramm/universe.rkt") (lib "deinprogramm/DMdA/private/primitives.rkt") (lib "deinprogramm/DMdA-vanilla/lang/reader.rkt") (lib "deinprogramm/DMdA/teachpack/image.rkt") (lib "deinprogramm/scribblings/vanilla.scrbl") (lib "teachpack/deinprogramm/sdp/universe.rkt") (lib "deinprogramm/DMdA/tests/match.rkt") (lib "deinprogramm/sdp/tests/run-record-tests.rkt") (lib "deinprogramm/scribblings/advanced.scrbl") (lib "deinprogramm/DMdA/teachpack/turtle.rkt") (lib "deinprogramm/DMdA-assignments-reader.rkt") (lib "deinprogramm/scribblings/deinprogramm.scrbl") (lib "deinprogramm/sdp/deflam.rkt") (lib "deinprogramm/DMdA/tests/signature.rkt") (lib "deinprogramm/sdp/beginner/lang/reader.rkt") (lib "deinprogramm/DMdA-beginner-reader.rkt") (lib "deinprogramm/DMdA-advanced-reader.rkt") (lib "deinprogramm/sdp/tests/test-docs-complete.rkt") (lib "teachpack/deinprogramm/world.rkt") (lib "deinprogramm/DMdA/teachpack/line3d.rkt") (lib "teachpack/deinprogramm/line3d.rkt") (lib "deinprogramm/sdp/private/stepper-button.rkt") (lib "deinprogramm/DMdA/tests/run-record-tests.rkt") (lib "deinprogramm/sdp/private/reader.rkt"))) (name . "deinprogramm") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:sperber@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "fe4624d70371ce2b2e4dff1a8a56bf1211a4d247") (source . "git://github.com/racket/deinprogramm?path=deinprogramm") (source_url . "http://github.com/racket/deinprogramm/tree/master?path=deinprogramm"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("deinprogramm-signature" . #hash((author . "sperber@racket-lang.org") (authors . ("sperber@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "fe4624d70371ce2b2e4dff1a8a56bf1211a4d247") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "drracket-plugin-lib" "gui-lib" "htdp-lib" "scheme-lib" "srfi-lib" "string-constants-lib")) (description . "Signature support for teaching languages for _Die Macht der Abstraktion_") (implies . ()) (last-checked . 1632902938) (last-edit . 1433690261) (last-updated . 1632060502) (modules . ((lib "deinprogramm/signature/tool.rkt") (lib "deinprogramm/signature/signature-unit.rkt") (lib "deinprogramm/signature/signature.rkt") (lib "deinprogramm/signature/signature-english.rkt") (lib "deinprogramm/quickcheck/quickcheck.rkt") (lib "deinprogramm/signature/signature-german.rkt") (lib "deinprogramm/quickcheck/random.rkt") (lib "deinprogramm/signature/signature-syntax.rkt"))) (name . "deinprogramm-signature") (ring . 0) (search-terms . #hasheq((author:sperber@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/deinprogramm?path=deinprogramm-signature") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "fe4624d70371ce2b2e4dff1a8a56bf1211a4d247") (source . "git://github.com/racket/deinprogramm?path=deinprogramm-signature") (source_url . "http://github.com/racket/deinprogramm/tree/master?path=deinprogramm-signature"))))))) ("delay-pure" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "delay-pure" "doc/delay-pure@delay-pure/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/delay-pure.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/delay-pure.txt"))) (checksum . "19541b8094b1aac23268f13d308202627275a360") (checksum-error . #f) (collection . "delay-pure") (conflicts . ()) (date-added . 1614475957) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "type-expander" "phc-toolkit" "version-case" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "Non-cached promises for Typed/Racket, like delay/name. Should be sound for occurrence typing (unlike delay/name) because only pure functions are allowed.") (implies . ()) (last-checked . 1632902939) (last-edit . 1614888762) (last-updated . 1617546887) (modules . ((lib "delay-pure/main.rkt") (lib "delay-pure/private/pure-exception.rkt") (lib "delay-pure/test/test-immutable-struct-constructor-mod.rkt") (lib "delay-pure/private/pure-safe.rkt") (lib "delay-pure/scribblings/delay-pure.scrbl") (lib "delay-pure/private/pure-function.rkt") (lib "delay-pure/test/test-external-mutation.rkt") (lib "delay-pure/test/test-pure-safe.rkt") (lib "delay-pure/test/test-immutable-struct-constructor-mod2.rkt") (lib "delay-pure/private/fully-expanded-grammar-no-set.rkt") (lib "delay-pure/test/test-pure-function.rkt") (lib "delay-pure/private/immutable-struct-constructor.rkt") (lib "delay-pure/private/pure-unsafe.rkt") (lib "delay-pure/test/test-unsafe.rkt") (lib "delay-pure/test/test-immutable-struct-constructor.rkt") (lib "delay-pure/test/test-pure-lifted.rkt"))) (name . "delay-pure") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/jsmaniac/delay-pure.git#main") (tags . ("typed-racket")) (versions . #hash((default . #hasheq((checksum . "19541b8094b1aac23268f13d308202627275a360") (source . "https://github.com/jsmaniac/delay-pure.git#main") (source_url . "https://github.com/jsmaniac/delay-pure.git#main"))))))) ("delimit-app" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "delimit-app" "doc/delimit-app@delimit-app/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/delimit-app.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/delimit-app.txt"))) (checksum . "720c0f95c1c3642b936030fabfb4850ab166d7e2") (checksum-error . #f) (collection . "delimit-app") (conflicts . ()) (dependencies . (("base" #:version "6.4") "fancy-app" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "An #%app macro that changes meaning based on paren shape") (implies . ()) (last-checked . 1632902939) (last-edit . 1500074416) (last-updated . 1502815891) (modules . ((lib "delimit-app/main.scrbl") (lib "delimit-app/fancy-app.rkt") (lib "delimit-app/main.rkt"))) (name . "delimit-app") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (app-syntax . #t) (author:jackhfirth@gmail.com . #t) (ring:1 . #t) (sugar . #t))) (source . "git://github.com/jackfirth/delimit-app") (tags . ("app-syntax" "sugar")) (versions . #hash((default . #hasheq((checksum . "720c0f95c1c3642b936030fabfb4850ab166d7e2") (source . "git://github.com/jackfirth/delimit-app") (source_url . "http://github.com/jackfirth/delimit-app/tree/master"))))))) ("derp-3" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/derp-3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/derp-3.txt"))) (checksum . "b26498d7bc7ab09a17b799c0e295f8e514930ca4") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "math-lib" "srfi-lib")) (description . "The Derp 3 parser, based on Parsing with Derivatives, code written by Michael D. Adams (www.michaeldadams.org)") (implies . ()) (last-checked . 1632902939) (last-edit . 1466453957) (last-updated . 1621108775) (modules . ((lib "derp-3/derp.rkt") (lib "derp-3/pyparse.rkt") (lib "derp-3/util/define-case.rkt") (lib "derp-3/util/fast-for.rkt") (lib "derp-3/util/benchmark.rkt") (lib "derp-3/util/unsafe-struct.rkt"))) (name . "derp-3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:clements@racket-lang.org . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "https://bitbucket.org/jbclements/derp-3.git") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "b26498d7bc7ab09a17b799c0e295f8e514930ca4") (source . "https://bitbucket.org/jbclements/derp-3.git") (source_url . "https://bitbucket.org/jbclements/derp-3.git"))))))) ("derpy" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "derpy" "doc/derpy@derpy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/derpy.txt") (test-failure-log . "server/built/test-fail/derpy.txt") (test-success-log . #f))) (checksum . "179ec02668cdb0beda40022ef9b45909795c7c09") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "typed-racket-more" "mordae" "zmq" "tesira" "libserialport" "esc-vp21" "pex" "cuecore" "racket-doc" "typed-racket-lib" "typed-racket-doc")) (description . "Presentation Room Control") (implies . ()) (last-checked . 1632902939) (last-edit . 1439459915) (last-updated . 1502815898) (modules . ((lib "derpy/tesira-driver.scrbl") (lib "derpy/atlona-driver.scrbl") (lib "derpy/bin/tesira-driver.rkt") (lib "derpy/bin/lighting-driver.rkt") (lib "derpy/bin/atlona-ir-driver.rkt") (lib "derpy/bin/epson-driver.rkt") (lib "derpy/util/zmq.rkt") (lib "derpy/util/reply.rkt") (lib "derpy/pex-driver.scrbl") (lib "derpy/bin/atlona-driver.rkt") (lib "derpy/util/error.rkt") (lib "derpy/derpy.scrbl") (lib "derpy/epson-driver.scrbl") (lib "derpy/bin/pex-driver.rkt"))) (name . "derpy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "git://github.com/mordae/racket-derpy") (tags . ()) (versions . #hash((default . #hasheq((checksum . "179ec02668cdb0beda40022ef9b45909795c7c09") (source . "git://github.com/mordae/racket-derpy") (source_url . "http://github.com/mordae/racket-derpy/tree/master"))))))) ("describe" . #hasheq((author . "mb@mbtype.com doug@cognidrome.org") (authors . ("mb@mbtype.com" "doug@cognidrome.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "describe" "doc/describe@describe/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/describe.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/describe.txt"))) (checksum . "6489f1b499cbfcda74ced18555c5c2ca255921e5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661246) (dependencies . ("base" "compatibility-lib" "scribble-lib" "racket-doc")) (description . "Doug Williams's 'describe' package from PLaneT") (implies . ()) (last-checked . 1632902939) (last-edit . 1556661246) (last-updated . 1621360931) (modules . ((lib "describe/scribblings/describe.scrbl") (lib "describe/describe-test.rkt") (lib "describe/float-test-single.rkt") (lib "describe/main.rkt") (lib "describe/float-test-double.rkt"))) (name . "describe") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:doug@cognidrome.org . #t) (author:mb@mbtype.com . #t) (information . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/describe.git") (tags . ("information")) (versions . #hash((default . #hasheq((checksum . "6489f1b499cbfcda74ced18555c5c2ca255921e5") (source . "https://github.com/mbutterick/describe.git") (source_url . "https://github.com/mbutterick/describe.git"))))))) ("design-by-numbers" . #hasheq((author . "jedgingt@cs.du.edu chrisg@cs.du.edu") (authors . ("jedgingt@cs.du.edu" "chrisg@cs.du.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "dbn-manual"))) (failure-log . "server/built/fail/design-by-numbers.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "dc6e30cce44918090094f9c876746f98faea0cd0") (checksum-error . #f) (collection . "dbn") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "parser-tools-lib" "gui-lib" "syntax-color-lib" "wxme-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "An implementation of John Maeda's Design by Numbers language in Racket as a #lang. ") (implies . ()) (last-checked . 1632902940) (last-edit . 1538083354) (last-updated . 1571069752) (modules . ((lib "dbn/dbnc/lexer.rkt") (lib "dbn/dbnc/indent-utils.rkt") (lib "dbn/dbnc/colorer.rkt") (lib "dbn/dbn-eval.rkt") (lib "dbn/configure-runtime.rkt") (lib "dbn/dbnc/indenter.rkt") (lib "dbn/scribblings/dbn-manual.scrbl") (lib "dbn/dbnc/parser.rkt") (lib "dbn/dbnc/annotations.rkt") (lib "dbn/dbnc/env.rkt") (lib "dbn/dbnc/ast.rkt") (lib "dbn/dbnc/errors.rkt") (lib "dbn/lang-info.rkt") (lib "dbn/dbnc/papersim.rkt") (lib "dbn/main.rkt") (lib "dbn/dbnc/ast-nodes.rkt") (lib "dbn/lang/dbn-reader.rkt") (lib "dbn/lang/dbn-expander.rkt"))) (name . "design-by-numbers") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (art . #t) (author:chrisg@cs.du.edu . #t) (author:jedgingt@cs.du.edu . #t) (design . #t) (graphics . #t) (pictures . #t) (ring:1 . #t))) (source . "https://github.com/chrisgd/design-by-numbers.git?path=dbn") (tags . ("art" "design" "graphics" "pictures")) (versions . #hash((default . #hasheq((checksum . "dc6e30cce44918090094f9c876746f98faea0cd0") (source . "https://github.com/chrisgd/design-by-numbers.git?path=dbn") (source_url . "https://github.com/chrisgd/design-by-numbers.git?path=dbn"))))))) ("deta" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/deta.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/deta.txt"))) (checksum . "7093c871896ee1195c4f356977ecf53c3c3f1fda") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563095334) (dependencies . ("deta-doc" "deta-lib")) (description . "A functional database mapper. (docs and implementation)") (implies . ("deta-doc" "deta-lib")) (last-checked . 1632902940) (last-edit . 1563095334) (last-updated . 1628950133) (modules . ()) (name . "deta") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (database . #t) (orm . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/deta.git?path=deta") (tags . ("database" "orm")) (versions . #hash((default . #hasheq((checksum . "7093c871896ee1195c4f356977ecf53c3c3f1fda") (source . "https://github.com/Bogdanp/deta.git?path=deta") (source_url . "https://github.com/Bogdanp/deta.git?path=deta"))))))) ("deta-doc" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "deta" "doc/deta@deta-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/deta-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/deta-doc.txt"))) (checksum . "7093c871896ee1195c4f356977ecf53c3c3f1fda") (checksum-error . #f) (collection . "deta") (conflicts . ()) (date-added . 1563095278) (dependencies . ("base" "db-doc" "db-lib" "deta-lib" "gregor-doc" "gregor-lib" "racket-doc" "sandbox-lib" "scribble-lib" "threading-doc" "threading-lib")) (description . "A functional database mapper. (docs only)") (implies . ()) (last-checked . 1632902940) (last-edit . 1563095278) (last-updated . 1628950133) (modules . ((lib "deta/deta.scrbl"))) (name . "deta-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (database . #t) (orm . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/deta.git?path=deta-doc") (tags . ("database" "orm")) (versions . #hash((default . #hasheq((checksum . "7093c871896ee1195c4f356977ecf53c3c3f1fda") (source . "https://github.com/Bogdanp/deta.git?path=deta-doc") (source_url . "https://github.com/Bogdanp/deta.git?path=deta-doc"))))))) ("deta-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/deta-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/deta-lib.txt"))) (checksum . "7093c871896ee1195c4f356977ecf53c3c3f1fda") (checksum-error . #f) (collection . "deta") (conflicts . ()) (date-added . 1563031996) (dependencies . ("base" "db-lib" "gregor-lib" "at-exp-lib")) (description . "A functional database mapper. (implementation only)") (implies . ()) (last-checked . 1632902940) (last-edit . 1563031996) (last-updated . 1628950134) (modules . ((lib "deta/private/dialect/standard.rkt") (lib "deta/query.rkt") (lib "deta/private/query.rkt") (lib "deta/reflect.rkt") (lib "deta/private/type.rkt") (lib "deta/private/ast.rkt") (lib "deta/private/dialect/operator.rkt") (lib "deta/type.rkt") (lib "deta/private/meta.rkt") (lib "deta/private/connection.rkt") (lib "deta/private/dialect/dialect.rkt") (lib "deta/schema.rkt") (lib "deta/main.rkt") (lib "deta/private/field.rkt") (lib "deta/private/dialect/postgresql.rkt") (lib "deta/private/entity.rkt") (lib "deta/private/dialect/sqlite3.rkt") (lib "deta/private/schema.rkt"))) (name . "deta-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (database . #t) (orm . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/deta.git?path=deta-lib") (tags . ("database" "orm")) (versions . #hash((default . #hasheq((checksum . "7093c871896ee1195c4f356977ecf53c3c3f1fda") (source . "https://github.com/Bogdanp/deta.git?path=deta-lib") (source_url . "https://github.com/Bogdanp/deta.git?path=deta-lib"))))))) ("deta-test" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/deta-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/deta-test.txt"))) (checksum . "7093c871896ee1195c4f356977ecf53c3c3f1fda") (checksum-error . #f) (collection . "tests") (conflicts . ()) (date-added . 1563032025) (dependencies . (("libsqlite3-x86_64-linux" #:platform #rx"x86_64-linux") "base" "at-exp-lib" "db-lib" "deta-lib" "gregor-lib" "rackunit-lib" "threading-lib")) (description . "A functional database mapper. (tests only)") (implies . ()) (last-checked . 1632902941) (last-edit . 1569967642) (last-updated . 1628950135) (modules . ((lib "tests/deta/schema.rkt") (lib "tests/deta/type.rkt") (lib "tests/deta/query.rkt") (lib "tests/deta/common.rkt") (lib "tests/deta/sql-postgresql.rkt") (lib "tests/deta/sql-sqlite3.rkt") (lib "tests/deta/entity.rkt"))) (name . "deta-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (database . #t) (orm . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/deta.git?path=deta-test") (tags . ("database" "orm")) (versions . #hash((default . #hasheq((checksum . "7093c871896ee1195c4f356977ecf53c3c3f1fda") (source . "https://github.com/Bogdanp/deta.git?path=deta-test") (source_url . "https://github.com/Bogdanp/deta.git?path=deta-test"))))))) ("detail" . #hasheq((author . "chenxiao770117@gmail.com") (authors . ("chenxiao770117@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "detail" "doc/detail@detail/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/detail.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/detail.txt"))) (checksum . "5d4d2b765bfdfb0335c1a13a897a8bb3e65d85f9") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1585116755) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib" "draw-lib")) (description . "detail used to reveal the details of the function") (implies . ()) (last-checked . 1632902941) (last-edit . 1585116778) (last-updated . 1613120451) (modules . ((lib "detail/effect/test-basic.rkt") (lib "detail/effect/test-width.rkt") (lib "detail/effect/test-bignormalsmall.rkt") (lib "detail/effect/test-simple-list.rkt") (lib "detail/example/tiger.rkt") (lib "detail/effect/test-div.rkt") (lib "detail/effect/test-page-split.rkt") (lib "detail/src/report/console-txt.rkt") (lib "detail/effect/test-list.rkt") (lib "detail/effect/test-h2.rkt") (lib "detail/src/define.rkt") (lib "detail/main.rkt") (lib "detail/effect/test-h3.rkt") (lib "detail/effect/test-img.rkt") (lib "detail/scribble/detail.scrbl") (lib "detail/src/lib.rkt") (lib "detail/src/detail.rkt") (lib "detail/src/report/pdf.rkt") (lib "detail/effect/test-empty.rkt") (lib "detail/effect/test-small-font.rkt") (lib "detail/effect/test-big-font.rkt") (lib "detail/test/detail-test.rkt") (lib "detail/effect/test-h1.rkt") (lib "detail/effect/test-normal-font.rkt") (lib "detail/effect/test-h1h2h3.rkt") (lib "detail/test/lib-test.rkt") (lib "detail/src/report/raw.rkt") (lib "detail/src/report/report.rkt") (lib "detail/effect/test-lines.rkt"))) (name . "detail") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:chenxiao770117@gmail.com . #t) (debug . #t) (log . #t) (report . #t) (ring:1 . #t))) (source . "https://github.com/simmone/racket-detail.git") (tags . ("debug" "log" "report")) (versions . #hash((default . #hasheq((checksum . "5d4d2b765bfdfb0335c1a13a897a8bb3e65d85f9") (source . "https://github.com/simmone/racket-detail.git") (source_url . "https://github.com/simmone/racket-detail.git"))))))) ("dezhemini" . #hasheq((author . "") (authors . ()) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/dezhemini.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Package dezhemini is missing a required field: 'source\n  context...:\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (implies . ()) (last-checked . 1632902941) (last-edit . 1632906422) (last-updated . 1621808156) (modules . ()) (name . "dezhemini") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (ring:1 . #t))) (source . "") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "") (source_url . ""))))))) ("dherman-struct" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dherman-struct.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dherman-struct.txt"))) (checksum . "1f0510d8e50ca3d22b3ba7ee65cce117450d44a0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "scheme-lib" "rackunit-lib" "srfi-lite-lib")) (description . "A port of David Herman's struct.plt planet package") (implies . ()) (last-checked . 1632902941) (last-edit . 1394146015) (last-updated . 1502815898) (modules . ((lib "dherman-struct/datatype.rkt") (lib "dherman-struct/private/tests/datatype.rkt") (lib "dherman-struct/private/datatype-registry.rkt") (lib "dherman-struct/private/tests/tests.rkt") (lib "dherman-struct/hierarchy.rkt") (lib "dherman-struct/struct.rkt") (lib "dherman-struct/private/datatype-registry-data.rkt") (lib "dherman-struct/private/struct-info-compat.rkt") (lib "dherman-struct/private/tests/class.rkt") (lib "dherman-struct/private/tests/hierarchy.rkt") (lib "dherman-struct/private/tests/struct.rkt") (lib "dherman-struct/class.rkt"))) (name . "dherman-struct") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:clements@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/jbclements/dherman-struct") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1f0510d8e50ca3d22b3ba7ee65cce117450d44a0") (source . "git://github.com/jbclements/dherman-struct") (source_url . "http://github.com/jbclements/dherman-struct/tree/master"))))))) ("diagrama" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/diagrama.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/diagrama.txt"))) (checksum . "291f244843d7226df4b7cb763bc3d6b1e98af71b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1573763186) (dependencies . (("base" #:version "7.4") "diagrama-lib" "diagrama-doc")) (description . "A diagram drawing library, implementation") (implies . ()) (last-checked . 1632902942) (last-edit . 1590588299) (last-updated . 1583795166) (modules . ()) (name . "diagrama") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:spencer@florence.io . #t) (diagram . #t) (drawing . #t) (figure . #t) (graphics . #t) (images . #t) (pict . #t) (ring:1 . #t))) (source . "https://github.com/florence/diagrama.git?path=diagrama") (tags . ("diagram" "drawing" "figure" "graphics" "images" "pict")) (versions . #hash((default . #hasheq((checksum . "291f244843d7226df4b7cb763bc3d6b1e98af71b") (source . "https://github.com/florence/diagrama.git?path=diagrama") (source_url . "https://github.com/florence/diagrama.git?path=diagrama"))))))) ("diagrama-doc" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "diagrama" "doc/diagrama@diagrama-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/diagrama-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/diagrama-doc.txt"))) (checksum . "291f244843d7226df4b7cb763bc3d6b1e98af71b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1573763090) (dependencies . (("base" #:version "7.4") "diagrama-lib" "pict-lib" "draw-doc" "draw-lib" "pict-doc" "racket-doc" "scribble-lib")) (description . "A diagram drawing library, documentation") (implies . ()) (last-checked . 1632902942) (last-edit . 1573763090) (last-updated . 1583795167) (modules . ((lib "diagrama/scribblings/base.rkt") (lib "diagrama/scribblings/reference.scrbl") (lib "diagrama/scribblings/diagrama.scrbl"))) (name . "diagrama-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:spencer@florence.io . #t) (diagram . #t) (drawing . #t) (figure . #t) (graphics . #t) (images . #t) (pict . #t) (ring:1 . #t))) (source . "https://github.com/florence/diagrama.git?path=diagrama-doc") (tags . ("diagram" "drawing" "figure" "graphics" "images" "pict")) (versions . #hash((default . #hasheq((checksum . "291f244843d7226df4b7cb763bc3d6b1e98af71b") (source . "https://github.com/florence/diagrama.git?path=diagrama-doc") (source_url . "https://github.com/florence/diagrama.git?path=diagrama-doc"))))))) ("diagrama-lib" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/diagrama-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/diagrama-lib.txt"))) (checksum . "291f244843d7226df4b7cb763bc3d6b1e98af71b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1573763054) (dependencies . ("draw-lib" ("base" #:version "7.4") "pict-lib")) (description . "A diagram drawing library, implementation") (implies . ()) (last-checked . 1632902943) (last-edit . 1573763054) (last-updated . 1583795167) (modules . ((lib "diagrama/private/shared.rkt") (lib "diagrama/circuit.rkt") (lib "diagrama/main.rkt"))) (name . "diagrama-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:spencer@florence.io . #t) (diagram . #t) (drawing . #t) (figure . #t) (graphics . #t) (images . #t) (pict . #t) (ring:1 . #t))) (source . "https://github.com/florence/diagrama.git?path=diagrama-lib") (tags . ("diagram" "drawing" "figure" "graphics" "images" "pict")) (versions . #hash((default . #hasheq((checksum . "291f244843d7226df4b7cb763bc3d6b1e98af71b") (source . "https://github.com/florence/diagrama.git?path=diagrama-lib") (source_url . "https://github.com/florence/diagrama.git?path=diagrama-lib"))))))) ("diagrams" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/diagrams.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/diagrams.txt"))) (checksum . "ab990ea081e982f7216ed9f7ff3c8e44749cd645") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Draw technical diagrams") (implies . ()) (last-checked . 1632902943) (last-edit . 1531184957) (last-updated . 1531184957) (modules . ()) (name . "diagrams") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:dedbox@gmail.com . #t) (drawing . #t) (graphics . #t) (images . #t) (pict . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-diagrams.git") (tags . ("drawing" "graphics" "images" "pict")) (versions . #hash((default . #hasheq((checksum . "ab990ea081e982f7216ed9f7ff3c8e44749cd645") (source . "https://github.com/dedbox/racket-diagrams.git") (source_url . "https://github.com/dedbox/racket-diagrams.git"))))))) ("dice-parser" . #hasheq((author . "car.margiotta@icloud.com") (authors . ("car.margiotta@icloud.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dice-parser" "doc/dice-parser@dice-parser/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dice-parser.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dice-parser.txt"))) (checksum . "99f06659f3f7659dc577df4fef1d2b6f6eb12baa") (checksum-error . #f) (collection . "dice-parser") (conflicts . ()) (date-added . 1587464672) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A parser for dice expressions like 1d6-1d4+5.") (implies . ()) (last-checked . 1632902944) (last-edit . 1597368949) (last-updated . 1620468374) (modules . ((lib "dice-parser/docs/dice-parser.scrbl") (lib "dice-parser/main.rkt"))) (name . "dice-parser") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:car.margiotta@icloud.com . #t) (dice . #t) (game . #t) (random . #t) (ring:1 . #t) (rpg . #t))) (source . "https://gitlab.com/car.margiotta/dice-parser.git") (tags . ("dice" "game" "random" "rpg")) (versions . #hash((default . #hasheq((checksum . "99f06659f3f7659dc577df4fef1d2b6f6eb12baa") (source . "https://gitlab.com/car.margiotta/dice-parser.git") (source_url . "https://gitlab.com/car.margiotta/dice-parser.git"))))))) ("diff-merge" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/diff-merge.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/diff-merge.txt"))) (checksum . "13a367d6f254ac184f017b37f5e204ac6c95dabe") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "profile-lib")) (description . "Myers-Ukkonen diff and diff3-based merge for sequences") (implies . ()) (last-checked . 1632902944) (last-edit . 1527789872) (last-updated . 1527789872) (modules . ((lib "diff-merge/sequence.rkt") (lib "diff-merge/main.rkt") (lib "diff-merge/diff.rkt") (lib "diff-merge/merge.rkt"))) (name . "diff-merge") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (diff . #t) (merge . #t) (ring:1 . #t) (sequence . #t) (text . #t))) (source . "https://github.com/tonyg/racket-diff-merge.git") (tags . ("diff" "merge" "sequence" "text")) (versions . #hash((default . #hasheq((checksum . "13a367d6f254ac184f017b37f5e204ac6c95dabe") (source . "https://github.com/tonyg/racket-diff-merge.git") (source_url . "https://github.com/tonyg/racket-diff-merge.git"))))))) ("digimon" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "digimon"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/digimon.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/digimon.txt"))) (checksum . "45735f4fb26b0df062394dfef4074b86bccefd30") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (dependencies . ("base" "gui-lib" "typed-racket-lib" "typed-racket-more" "racket-index" "sandbox-lib" "scribble-lib" "math-lib" "scribble-lib" "racket-doc")) (description . "The (typed) core to construct the digital world") (implies . ()) (last-checked . 1632902944) (last-edit . 1481635750) (last-updated . 1629504658) (modules . ((lib "digimon/digitama/bintext/table/bits.rkt") (lib "digimon/digitama/bintext/archive.rkt") (lib "digimon/number.rkt") (lib "digimon/symbol.rkt") (lib "digimon/digitama/ffi.rkt") (lib "digimon/digitama/tamer/texbook.rkt") (lib "digimon/tamer/zip/zipcopy.rkt") (lib "digimon/digitama/tamer/manual.rkt") (lib "digimon/digivice/wisemon/phony/prove.rkt") (lib "digimon/digitama/ioexn.rkt") (lib "digimon/digitama/spec/prompt.rkt") (lib "digimon/plist.rkt") (lib "digimon/digitama/typeset/renderer.rkt") (lib "digimon/network.rkt") (lib "digimon/digitama/unsafe/number.rkt") (lib "digimon/tamer/zip/pkzip.rkt") (lib "digimon/digitama/bintext/table/huffman.rkt") (lib "digimon/tamer/bplist/infotab.rkt") (lib "digimon/tamer/zip/deflate.rkt") (lib "digimon/digivice/nanomon/unsafe/colorize.rkt") (lib "digimon/emoji.rkt") (lib "digimon/tamer/bplist/xcbuild.rkt") (lib "digimon/filesystem.rkt") (lib "digimon/tamer/spec.rkt") (lib "digimon/digitama/toolchain/bin/gcc.rkt") (lib "digimon/digitama/unsafe/release/ops.rkt") (lib "digimon/tamer/bdd.rkt") (lib "digimon/tamer/bplist/empty.rkt") (lib "digimon/stdio.rkt") (lib "digimon/digitama/wisemon.rkt") (lib "digimon/digitama/bitstream.rkt") (lib "digimon/digivice/wisemon.rkt") (lib "digimon/digitama/toolchain/cc/linker.rkt") (lib "digimon/bitstream.rkt") (lib "digimon/tamer/zip/zipinfo.rkt") (lib "digimon/digivice/nanomon/shell/colorize.rkt") (lib "digimon/digivice/nanomon/parameter.rkt") (lib "digimon/digivice/wisemon/native.rkt") (lib "digimon/digitama/system.rkt") (lib "digimon/cc.rkt") (lib "digimon/digivice/wisemon/phony.rkt") (lib "digimon/digivice/wisemon/phony/clean.rkt") (lib "digimon/digivice/wisemon/phony/typeset.rkt") (lib "digimon/dtrace.rkt") (lib "digimon/digitama/typeset/exec.rkt") (lib "digimon/uuid.rkt") (lib "digimon/digivice/wisemon/racket.rkt") (lib "digimon/debug.rkt") (lib "digimon/digitama/exec.rkt") (lib "digimon/checksum.rkt") (lib "digimon/tamer/zip/lz77.rkt") (lib "digimon/digitama/spec/behavior.rkt") (lib "digimon/echo.rkt") (lib "digimon/digitama/stdio.rkt") (lib "digimon/continuation.rkt") (lib "digimon/digitama/latex.rkt") (lib "digimon/digitama/dtrace.rkt") (lib "digimon/digitama/bintext/archive/zip.rkt") (lib "digimon/thread.rkt") (lib "digimon/format.rkt") (lib "digimon/tamer/cmdopt/scp.rkt") (lib "digimon/digitama/bytes.rkt") (lib "digimon/collection.rkt") (lib "digimon/digitama/toolchain/toolchain.rkt") (lib "digimon/digitama/toolchain/cc/cc.rkt") (lib "digimon/digivice/nanomon.rkt") (lib "digimon/digitama/toolchain/bin/clang.rkt") (lib "digimon/digitama/evt.rkt") (lib "digimon/port.rkt") (lib "digimon/digitama/plist.rkt") (lib "digimon/enumeration.rkt") (lib "digimon/wisemon.rkt") (lib "digimon/struct.rkt") (lib "digimon/digitama/spec/expectation.rkt") (lib "digimon/archive.rkt") (lib "digimon/digivice/wisemon/path.rkt") (lib "digimon/tamer/bplist/cycular.rkt") (lib "digimon/tamer/tex/pdftex.scrbl") (lib "digimon/cmdopt.rkt") (lib "digimon/digitama/sugar.rkt") (lib "digimon/system.rkt") (lib "digimon/tamer/bplist/date.rkt") (lib "digimon/digitama/typeset/bin/luahbtex.rkt") (lib "digimon/tamer/zip/spec.rkt") (lib "digimon/digivice/nanomon/shell/exec.rkt") (lib "digimon/digitama/plural.rkt") (lib "digimon/ffi.rkt") (lib "digimon/tamer/zip/codelen-cases.rkt") (lib "digimon/digitama/toolchain/bin/msvc.rkt") (lib "digimon/digitama/typeset/bin/euptex.rkt") (lib "digimon/digitama/main.rkt") (lib "digimon/tamer/zip/codelen.rkt") (lib "digimon/digitama/collection.rkt") (lib "digimon/digitama/typeset/bin/pdftex.rkt") (lib "digimon/digitama/tamer.rkt") (lib "digimon/digitama/cmdopt.rkt") (lib "digimon/digivice/wisemon/phony/dist.rkt") (lib "digimon/date.rkt") (lib "digimon/digitama/bintext/zipinfo.rkt") (lib "digimon/tamer/echo.rkt") (lib "digimon/digitama/plist/bplist.rkt") (lib "digimon/tamer/cmdopt/vim.rkt") (lib "digimon/digitama/bintext/zip.rkt") (lib "digimon/digivice/wisemon/spec.rkt") (lib "digimon/tamer/zip/unzip.rkt") (lib "digimon/tamer/zip/zip.rkt") (lib "digimon/digitama/number.rkt") (lib "digimon/tamer/digimon.scrbl") (lib "digimon/digitama/toolchain/cc/modeline.rkt") (lib "digimon/tamer/cmdopt/ev.rkt") (lib "digimon/predicate.rkt") (lib "digimon/digitama/typeset/bin/xetex.rkt") (lib "digimon/digitama/bintext/base64.rkt") (lib "digimon/digitama/spec/misc.rkt") (lib "digimon/tamer/bplist/constants.rkt") (lib "digimon/tamer/plist.rkt") (lib "digimon/spec.rkt") (lib "digimon/digitama/tamer/citation.rkt") (lib "digimon/tamer/uuid.rkt") (lib "digimon/tongue.rkt") (lib "digimon/tamer/zip/huftree.rkt") (lib "digimon/digitama/unsafe/debug/ops.rkt") (lib "digimon/digitama/plist/Info.plist.rkt") (lib "digimon/digivice/wisemon/phony/all.rkt") (lib "digimon/digitama/bintext/zipconfig.rkt") (lib "digimon/digitama/unsafe/ops.rkt") (lib "digimon/digivice/wisemon/parameter.rkt") (lib "digimon/digitama/spec/dsl.rkt") (lib "digimon/digitama/spec/seed.rkt") (lib "digimon/iana.rkt") (lib "digimon/tamer.rkt") (lib "digimon/tamer/stdio.rkt") (lib "digimon/digitama/tamer/block.rkt") (lib "digimon/digitama/typeset/tex.rkt") (lib "digimon/binscii.rkt") (lib "digimon/digitama/toolchain/cc/compiler.rkt") (lib "digimon/exception.rkt") (lib "digimon/gui.rkt") (lib "digimon/digitama/bintext/lz77.rkt") (lib "digimon/location.rkt") (lib "digimon/string.rkt") (lib "digimon/digivice/nanomon/shell.rkt") (lib "digimon/digitama/bintext/huffman.rkt") (lib "digimon/digitama/bintext/crc.rkt") (lib "digimon/tamer/zip/pkunzip.rkt") (lib "digimon/digitama/bintext/deflation.rkt") (lib "digimon/digitama/spec/issue.rkt"))) (name . "digimon") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs-error: . #t) (author:juzhenliang@gmail.com . #t) (ring:1 . #t) (typed-racket . #t) (unstable . #t) (utility . #t))) (source . "git://github.com/wargrey/digimon.git") (tags . ("typed-racket" "unstable" "utility")) (versions . #hash((default . #hasheq((checksum . "45735f4fb26b0df062394dfef4074b86bccefd30") (source . "git://github.com/wargrey/digimon.git") (source_url . "http://github.com/wargrey/digimon.git/tree/master"))))))) ("dirname" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dirname" "doc/dirname@dirname/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dirname.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dirname.txt"))) (checksum . "041285c1d906787c04402420c15b567a46911dd8") (checksum-error . #f) (collection . "dirname") (conflicts . ()) (date-added . 1627490570) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Basename and dirname functions") (implies . ()) (last-checked . 1632902944) (last-edit . 1627490598) (last-updated . 1628266144) (modules . ((lib "dirname/scribblings/dirname.scrbl") (lib "dirname/main.rkt"))) (name . "dirname") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:xgqt@riseup.net . #t) (filesystem . #t) (ring:1 . #t) (system . #t))) (source . "https://gitlab.com/xgqt/racket-dirname.git") (tags . ("filesystem" "system")) (versions . #hash((default . #hasheq((checksum . "041285c1d906787c04402420c15b567a46911dd8") (source . "https://gitlab.com/xgqt/racket-dirname.git") (source_url . "https://gitlab.com/xgqt/racket-dirname.git"))))))) ("disassemble" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/disassemble.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/disassemble.txt"))) (checksum . "c4f80cd7994d2d4f9ad4aae0734c454d33390017") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "r6rs-lib" "srfi-lib" "srfi-lite-lib")) (description . "Disassembler for JIT-compiled functions.") (implies . ()) (last-checked . 1632902945) (last-edit . 1353013870) (last-updated . 1607905156) (modules . ((lib "machine-code/disassembler.rkt") (lib "machine-code/disassembler/x86-opcodes.rkt") (lib "disassemble/test.rkt") (lib "disassemble/fcdisasm.rkt") (lib "machine-code/disassembler/private.rkt") (lib "disassemble/nasm.rkt") (lib "disassemble/test2.rkt") (lib "disassemble/vm.rkt") (lib "disassemble/main.rkt") (lib "machine-code/disassembler/x86.rkt"))) (name . "disassemble") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (dev . #t) (performance . #t) (ring:1 . #t))) (source . "github://github.com/samth/disassemble/master") (tags . ("dev" "performance")) (versions . #hash((default . #hasheq((checksum . "c4f80cd7994d2d4f9ad4aae0734c454d33390017") (source . "github://github.com/samth/disassemble/master") (source_url . "http://github.com/samth/disassemble/tree/master"))))))) ("disposable" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "disposable" "doc/disposable@disposable/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/disposable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/disposable.txt"))) (checksum . "843d3e224fd874b9c463b74cb5ef13d8a0b5766a") (checksum-error . #f) (collection . "disposable") (conflicts . ()) (dependencies . (("arguments" #:version "1.2.1") "base" "reprovide-lang" "rackunit-lib" "racket-doc" ("scribble-lib" #:version "1.16") "scribble-text-lib")) (description . "Provides an abstraction for values associated with external resources that allows automatic resource pooling, per-thread virtual construction, and monadic composition") (implies . ()) (last-checked . 1632902945) (last-edit . 1502749749) (last-updated . 1509166856) (modules . ((lib "disposable/unsafe.rkt") (lib "disposable/private/syntax.rkt") (lib "disposable/example.rkt") (lib "disposable/scribblings/main.scrbl") (lib "disposable/private/atomic-box.rkt") (lib "disposable/scribblings/base.rkt") (lib "disposable/scribblings/lite.scrbl") (lib "disposable/scribblings/util.rkt") (lib "disposable/scribblings/transient.scrbl") (lib "disposable/private/pool.rkt") (lib "disposable/scribblings/misc.scrbl") (lib "disposable/scribblings/pool.scrbl") (lib "disposable/testing.rkt") (lib "disposable/file.rkt") (lib "disposable/main.rkt"))) (name . "disposable") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (concurrency . #t) (experimental . #t) (io . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/racket-disposable?path=disposable") (tags . ("concurrency" "experimental" "io")) (versions . #hash((default . #hasheq((checksum . "843d3e224fd874b9c463b74cb5ef13d8a0b5766a") (source . "git://github.com/jackfirth/racket-disposable?path=disposable") (source_url . "http://github.com/jackfirth/racket-disposable/tree/master?path=disposable"))))))) ("disposable-test" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/disposable-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/disposable-test.txt"))) (checksum . "843d3e224fd874b9c463b74cb5ef13d8a0b5766a") (checksum-error . #f) (collection . "disposable") (conflicts . ()) (dependencies . ("base" ("disposable" #:version "0.2") "doc-coverage" "fixture" "rackunit-lib")) (description . "Tests for the disposable package") (implies . ("disposable")) (last-checked . 1632902946) (last-edit . 1502812668) (last-updated . 1509166857) (modules . ((lib "disposable/tests/pool.rkt") (lib "disposable/tests/transient.rkt") (lib "disposable/tests/main.rkt") (lib "disposable/tests/util.rkt") (lib "disposable/tests/file.rkt") (lib "disposable/tests/testing.rkt"))) (name . "disposable-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jackhfirth@gmail.com . #t) (concurrency . #t) (disposable . #t) (experimental . #t) (io . #t) (ring:1 . #t) (tests . #t))) (source . "git://github.com/jackfirth/racket-disposable?path=disposable-test") (tags . ("concurrency" "disposable" "experimental" "io" "tests")) (versions . #hash((default . #hasheq((checksum . "843d3e224fd874b9c463b74cb5ef13d8a0b5766a") (source . "git://github.com/jackfirth/racket-disposable?path=disposable-test") (source_url . "http://github.com/jackfirth/racket-disposable/tree/master?path=disposable-test"))))))) ("distributed-places" . #hash((author . "tewk@racket-lang.org") (authors . ("tewk@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("distributed-places-lib" "distributed-places-doc")) (description . "Libraries for distributed computations") (implies . ("distributed-places-lib" "distributed-places-doc")) (last-checked . 1632902946) (last-edit . 1417659583) (last-updated . 1571868950) (modules . ()) (name . "distributed-places") (ring . 0) (search-terms . #hasheq((author:tewk@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "3f4a1f43430216871e8cc7a6ecbd2a03530a9bfb") (source . "git://github.com/racket/distributed-places/?path=distributed-places") (source_url . "git://github.com/racket/distributed-places/?path=distributed-places"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("distributed-places-doc" . #hash((author . "tewk@racket-lang.org") (authors . ("tewk@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "distributed-places" "doc/distributed-places@distributed-places-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "distributed-places-lib" "racket-doc" "sandbox-lib" "scribble-lib")) (description . "documentation part of distributed-places") (implies . ()) (last-checked . 1632902947) (last-edit . 1417659583) (last-updated . 1571868951) (modules . ((lib "scribblings/distributed-places/rmpi.scrbl") (lib "scribblings/distributed-places/distributed-places.scrbl"))) (name . "distributed-places-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:tewk@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "3f4a1f43430216871e8cc7a6ecbd2a03530a9bfb") (source . "git://github.com/racket/distributed-places/?path=distributed-places-doc") (source_url . "git://github.com/racket/distributed-places/?path=distributed-places-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("distributed-places-lib" . #hash((author . "tewk@racket-lang.org") (authors . ("tewk@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "implementation (no documentation) part of distributed-places") (implies . ()) (last-checked . 1632902947) (last-edit . 1417659583) (last-updated . 1571868951) (modules . ((lib "racket/place/distributed/examples/logging/master.rkt") (lib "racket/place/distributed/examples/logging/tuple.rkt") (lib "racket/place/distributed/examples/restart/master.rkt") (lib "racket/place/distributed/examples/restart/restarter.rkt") (lib "racket/place/distributed/launch.rkt") (lib "racket/place/distributed/rmpi.rkt") (lib "racket/place/distributed/examples/hello-world.rkt") (lib "racket/place/distributed/examples/multiple/master.rkt") (lib "racket/place/distributed/examples/logging/bank.rkt") (lib "racket/place/distributed/examples/multiple/place-worker.rkt") (lib "racket/place/distributed/examples/thread/master.rkt") (lib "racket/place/distributed/examples/multiple/bank.rkt") (lib "racket/place/distributed.rkt") (lib "racket/place/distributed/examples/named/bank.rkt") (lib "racket/place/define-remote-server.rkt") (lib "racket/place/distributed/examples/named/tuple.rkt") (lib "racket/place/distributed/examples/named/master.rkt") (lib "racket/place/distributed/map-reduce.rkt"))) (name . "distributed-places-lib") (ring . 0) (search-terms . #hasheq((author:tewk@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "3f4a1f43430216871e8cc7a6ecbd2a03530a9bfb") (source . "git://github.com/racket/distributed-places/?path=distributed-places-lib") (source_url . "git://github.com/racket/distributed-places/?path=distributed-places-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("distributed-places-test" . #hash((author . "tewk@racket-lang.org") (authors . ("tewk@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distributed-places-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distributed-places-test.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("distributed-places-lib" "base")) (description . "tests for of distributed-places") (implies . ()) (last-checked . 1632902947) (last-edit . 1417659583) (last-updated . 1571868952) (modules . ((lib "distributed-places-test/test/racket/place/distributed/tuple.rkt") (lib "distributed-places-test/test/racket/place/distributed/bank.rkt") (lib "distributed-places-test/test/racket/place/distributed/distributed.rkt") (lib "distributed-places-test/test/racket/place/distributed/restarter.rkt"))) (name . "distributed-places-test") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:tewk@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "3f4a1f43430216871e8cc7a6ecbd2a03530a9bfb") (source . "git://github.com/racket/distributed-places/?path=distributed-places-test") (source_url . "git://github.com/racket/distributed-places/?path=distributed-places-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("distro-build" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distro-build.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distro-build.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("distro-build-lib" "distro-build-doc")) (description . "Tools for constructing a distribution of Racket") (implies . ("distro-build-lib" "distro-build-doc")) (last-checked . 1632902948) (last-edit . 1417307461) (last-updated . 1629248937) (modules . ()) (name . "distro-build") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a2357dd96cb74204c5242c1bae5d18e5793f1909") (source . "git://github.com/racket/distro-build/?path=distro-build") (source_url . "git://github.com/racket/distro-build/?path=distro-build"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("distro-build-client" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distro-build-client.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distro-build-client.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "distro-build") (conflicts . ()) (dependencies . (("base" #:version "6.2.900.9") "ds-store-lib" "at-exp-lib")) (description . "client-side part of distro-build") (implies . ()) (last-checked . 1632902948) (last-edit . 1417307461) (last-updated . 1629248938) (modules . ((lib "distro-build/notarize.rkt") (lib "distro-build/installer-dmg.rkt") (lib "distro-build/installer-tgz.rkt") (lib "distro-build/installer-exe.rkt") (lib "distro-build/unpack-collects.rkt") (lib "distro-build/installer.rkt") (lib "distro-build/installer-sh.rkt") (lib "distro-build/set-config.rkt") (lib "distro-build/installer-pkg.rkt") (lib "distro-build/display-time.rkt"))) (name . "distro-build-client") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a2357dd96cb74204c5242c1bae5d18e5793f1909") (source . "git://github.com/racket/distro-build/?path=distro-build-client") (source_url . "git://github.com/racket/distro-build/?path=distro-build-client"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("distro-build-doc" . #hasheq((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "distro-build" "doc/distro-build@distro-build-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distro-build-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distro-build-doc.txt"))) (checksum . "a2357dd96cb74204c5242c1bae5d18e5793f1909") (checksum-error . #f) (collection . "distro-build") (conflicts . ()) (dependencies . (("base" #:version "6.1.1.6") "distro-build-server" "distro-build-client" "web-server-lib" "at-exp-lib" "racket-doc" "scribble-lib")) (description . "documentation part of distro-build") (implies . ()) (last-checked . 1632902949) (last-edit . 1440895103) (last-updated . 1629248939) (modules . ((lib "distro-build/distro-build.scrbl"))) (name . "distro-build-doc") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "git://github.com/racket/distro-build/?path=distro-build-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a2357dd96cb74204c5242c1bae5d18e5793f1909") (source . "git://github.com/racket/distro-build/?path=distro-build-doc") (source_url . "git://github.com/racket/distro-build/?path=distro-build-doc"))))))) ("distro-build-lib" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distro-build-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distro-build-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("distro-build-client" "distro-build-server")) (description . "implementation (no documentation) part of distro-build") (implies . ("distro-build-client" "distro-build-server")) (last-checked . 1632902949) (last-edit . 1417307461) (last-updated . 1629248940) (modules . ()) (name . "distro-build-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a2357dd96cb74204c5242c1bae5d18e5793f1909") (source . "git://github.com/racket/distro-build/?path=distro-build-lib") (source_url . "git://github.com/racket/distro-build/?path=distro-build-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("distro-build-server" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distro-build-server.txt") (test-failure-log . "server/built/test-fail/distro-build-server.txt") (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "distro-build") (conflicts . ()) (dependencies . (("base" #:version "6.1.1.6") "distro-build-client" ("web-server-lib" #:version "1.6") "ds-store-lib" "net-lib" "scribble-html-lib" "plt-web-lib" "remote-shell-lib" "at-exp-lib" "rackunit-lib")) (description . "server-side part of distro-build") (implies . ()) (last-checked . 1632902949) (last-edit . 1417307461) (last-updated . 1629248942) (modules . ((lib "distro-build/url-options.rkt") (lib "distro-build/readme.rkt") (lib "distro-build/config.rkt") (lib "distro-build/pkg-info.rkt") (lib "distro-build/download-page.rkt") (lib "distro-build/record-installer.rkt") (lib "distro-build/indexes.rkt") (lib "distro-build/drive-clients.rkt") (lib "distro-build/manage-snapshots.rkt") (lib "distro-build/private/target-machine.rkt") (lib "distro-build/pack-built.rkt") (lib "distro-build/install-for-docs.rkt") (lib "distro-build/install-pkgs.rkt") (lib "distro-build/assemble-site.rkt") (lib "distro-build/set-server-config.rkt") (lib "distro-build/email.rkt") (lib "distro-build/pack-collects.rkt") (lib "distro-build/private/find-desired-snapshots.rkt") (lib "distro-build/serve-catalog.rkt"))) (name . "distro-build-server") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a2357dd96cb74204c5242c1bae5d18e5793f1909") (source . "git://github.com/racket/distro-build/?path=distro-build-server") (source_url . "git://github.com/racket/distro-build/?path=distro-build-server"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("distro-build-test" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/distro-build-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/distro-build-test.txt"))) (checksum . "a2357dd96cb74204c5242c1bae5d18e5793f1909") (checksum-error . #f) (collection . "distro-build") (conflicts . ()) (dependencies . ("base" "remote-shell-lib" "web-server-lib")) (description . "Tests for distro-build") (implies . ()) (last-checked . 1632902950) (last-edit . 1509210348) (last-updated . 1629248943) (modules . ((lib "distro-build/tests/unix-installer.rkt"))) (name . "distro-build-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/distro-build/?path=distro-build-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a2357dd96cb74204c5242c1bae5d18e5793f1909") (source . "git://github.com/racket/distro-build/?path=distro-build-test") (source_url . "git://github.com/racket/distro-build/?path=distro-build-test"))))))) ("dlm-read" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dlm-read" "doc/dlm-read@dlm-read/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dlm-read.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dlm-read.txt"))) (checksum . "9ae0487b315e762d311ea0e14b72a9bd2de27470") (checksum-error . #f) (collection . "dlm-read") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "csv-reading" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1632902950) (last-edit . 1418153746) (last-updated . 1502815906) (modules . ((lib "dlm-read/main.rkt") (lib "dlm-read/scribblings/dlm-read.scrbl"))) (name . "dlm-read") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "git://github.com/LeifAndersen/racket-dlm-read#master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "9ae0487b315e762d311ea0e14b72a9bd2de27470") (source . "git://github.com/LeifAndersen/racket-dlm-read#master") (source_url . "http://github.com/LeifAndersen/racket-dlm-read/tree/master#master"))))))) ("dm" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dm" "doc/dm@dm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dm.txt") (test-failure-log . "server/built/test-fail/dm.txt") (test-success-log . #f))) (checksum . "15b137ef72b0bf1f10cfd1d14e80e2472e8a5df4") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "libuuid" "racket-doc")) (description . "Linux Device Mapper bindings for Racket.") (implies . ()) (last-checked . 1632902950) (last-edit . 1405684510) (last-updated . 1502815906) (modules . ((lib "dm/private/ffi.rkt") (lib "dm/main.rkt") (lib "dm/parse.rkt") (lib "dm/dm.scrbl"))) (name . "dm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (linux . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-dm/master") (tags . ("ffi" "linux")) (versions . #hash((default . #hasheq((checksum . "15b137ef72b0bf1f10cfd1d14e80e2472e8a5df4") (source . "github://github.com/mordae/racket-dm/master") (source_url . "http://github.com/mordae/racket-dm/tree/master"))))))) ("doc-coverage" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "doc-coverage" "doc/doc-coverage@doc-coverage/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/doc-coverage.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/doc-coverage.txt"))) (checksum . "b1c0e9f3fd3a25e260f8905e6c8211dacf532b25") (checksum-error . #f) (collection . "doc-coverage") (conflicts . ()) (dependencies . (("base" #:version "6.3") "racket-index" "rackunit-lib" "reprovide-lang-lib" "scribble-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A package for inspecting and testing a module's documentation of its provided bindings") (implies . ()) (last-checked . 1632902950) (last-edit . 1505788731) (last-updated . 1595294810) (modules . ((lib "doc-coverage/private/export-tests.rkt") (lib "doc-coverage/scribblings/main.scrbl") (lib "doc-coverage/main.rkt") (lib "doc-coverage/tests/main.rkt") (lib "doc-coverage/private/export-lists.rkt") (lib "doc-coverage/private/raco.rkt") (lib "doc-coverage/private/export-count.rkt") (lib "doc-coverage/private/main.rkt"))) (name . "doc-coverage") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (reflection . #t) (ring:1 . #t) (scribble . #t) (testing . #t))) (source . "git://github.com/jackfirth/doc-coverage?path=doc-coverage") (tags . ("reflection" "scribble" "testing")) (versions . #hash((default . #hasheq((checksum . "b1c0e9f3fd3a25e260f8905e6c8211dacf532b25") (source . "git://github.com/jackfirth/doc-coverage?path=doc-coverage") (source_url . "http://github.com/jackfirth/doc-coverage/tree/master?path=doc-coverage"))))))) ("dollar" . #hasheq((author . "racket@rogerkeays.com") (authors . ("racket@rogerkeays.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dollar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dollar.txt"))) (checksum . "16fa7aec4e1cef43a7b678dc798b1a9c20a87bb6") (checksum-error . #f) (collection . "dollar") (conflicts . ()) (date-added . 1613838080) (dependencies . ("base" "rackunit")) (description . "An example #lang extension which uses $ instead of , for unquote.") (implies . ()) (last-checked . 1632902951) (last-edit . 1613838080) (last-updated . 1615310667) (modules . ((lib "dollar/lang/reader.rkt") (lib "dollar/tests/racket.rkt") (lib "dollar/tests/racket-base.rkt"))) (name . "dollar") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:racket@rogerkeays.com . #t) (lang . #t) (lang-extension . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/rogerkeays/racket-dollar.git#main") (tags . ("lang" "lang-extension" "language")) (versions . #hash((default . #hasheq((checksum . "16fa7aec4e1cef43a7b678dc798b1a9c20a87bb6") (source . "https://github.com/rogerkeays/racket-dollar.git#main") (source_url . "https://github.com/rogerkeays/racket-dollar.git#main"))))))) ("doodle" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "doodle" "doc/doodle@doodle/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/doodle.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/doodle.txt"))) (checksum . "a6840bb97bb384b92c612960aca676e31662453c") (checksum-error . #f) (collection . "doodle") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "pict-lib" "draw-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1632902951) (last-edit . 1455079653) (last-updated . 1502815907) (modules . ((lib "doodle/scribblings/doodle.scrbl") (lib "doodle/private/template/paper.scrbl") (lib "doodle/private/template/utils.rkt") (lib "doodle/main.rkt"))) (name . "doodle") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/LeifAndersen/doodle") (tags . ("scribble")) (versions . #hash((default . #hasheq((checksum . "a6840bb97bb384b92c612960aca676e31662453c") (source . "git://github.com/LeifAndersen/doodle") (source_url . "http://github.com/LeifAndersen/doodle/tree/master"))))))) ("dos" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dos" "doc/dos@dos/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dos.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dos.txt"))) (checksum . "e39826f5f65f7d0b849e5286859e70a62a985be1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "htdp-lib" "htdp-lib" "scribble-lib" "racket-doc" "htdp-doc" "rackunit-lib")) (description . "Delimited-continuation-based Operating-system Simulator") (implies . ()) (last-checked . 1632902951) (last-edit . 1411610244) (last-updated . 1559419006) (modules . ((lib "dos/main.rkt") (lib "dos/examples/win.rkt") (lib "dos/examples/os2.rkt") (lib "dos/os2.rkt") (lib "dos/win/big-bang.rkt") (lib "dos/dos.scrbl") (lib "dos/examples/dos.rkt") (lib "dos/examples/win-long.rkt") (lib "dos/win.rkt"))) (name . "dos") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (continuation . #t) (games . #t) (os . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/dos") (tags . ("continuation" "games" "os")) (versions . #hash((default . #hasheq((checksum . "e39826f5f65f7d0b849e5286859e70a62a985be1") (source . "git://github.com/jeapostrophe/dos") (source_url . "http://github.com/jeapostrophe/dos/tree/master"))))))) ("dotenv" . #hasheq((author . "royall@royall.us") (authors . ("royall@royall.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dotenv" "doc/dotenv@dotenv/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dotenv.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dotenv.txt"))) (checksum . "86b9a0718f2dfdae1b08d7f6f859875a06817de4") (checksum-error . #f) (collection . "dotenv") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Override environment variables by loading .env files.") (implies . ()) (last-checked . 1632902951) (last-edit . 1503888629) (last-updated . 1563587863) (modules . ((lib "dotenv/scribblings/dotenv.scrbl") (lib "dotenv/main.rkt") (lib "dotenv/private/dotenv.rkt"))) (name . "dotenv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:royall@royall.us . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/royallthefourth/dotenv") (tags . ("web")) (versions . #hash((default . #hasheq((checksum . "86b9a0718f2dfdae1b08d7f6f859875a06817de4") (source . "git://github.com/royallthefourth/dotenv") (source_url . "http://github.com/royallthefourth/dotenv/tree/master"))))))) ("dotlambda" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dotlambda" "doc/dotlambda@dotlambda/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dotlambda.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dotlambda.txt"))) (checksum . "96cfe93ab611db377a4a68f4b0a7e483ebf506a6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614799385) (dependencies . ("base" "rackunit-lib" "typed-map-lib" "typed-racket-lib" "typed-racket-more" "chain-module-begin" "debug-scopes" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "Splits dotted identifiers like a.b.c, also supports λ<arg>.(code) syntax. Experimental (i.e. there may be small breaking changes in later versions).") (implies . ()) (last-checked . 1632902951) (last-edit . 1614889028) (last-updated . 1617550155) (modules . ((lib "dotlambda/test/typed-dotlambda-phase1.rkt") (lib "dotlambda/scribblings/typed-dotlambda.scrbl") (lib "dotlambda/unhygienic-implementation.rkt") (lib "typed/dotlambda.rkt") (lib "typed/dotlambda/main.rkt") (lib "dotlambda/unhygienic/lang/reader.rkt") (lib "dotlambda/unhygienic.rkt") (lib "dotlambda/test/test-typed-racket-chain.rkt") (lib "dotlambda/private/fold.rkt") (lib "dotlambda/implementation.rkt") (lib "dotlambda/main.rkt") (lib "dotlambda/test/test-typed-dotlambda.rkt") (lib "dotlambda/test/test-dotlambda.rkt") (lib "dotlambda/scribblings/dotlambda.scrbl") (lib "dotlambda/lang/reader.rkt") (lib "dotlambda/literals.rkt") (lib "typed/dotlambda/lang/reader.rkt"))) (name . "dotlambda") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (experimental . #t) (lang-extension . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/dotlambda.git#main") (tags . ("experimental" "lang-extension" "syntax")) (versions . #hash((default . #hasheq((checksum . "96cfe93ab611db377a4a68f4b0a7e483ebf506a6") (source . "https://github.com/jsmaniac/dotlambda.git#main") (source_url . "https://github.com/jsmaniac/dotlambda.git#main"))))))) ("dotmethod" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dotmethod" "doc/dotmethod@dotmethod/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dotmethod.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dotmethod.txt"))) (checksum . "e427237130d9b530d935269a6506c8cdeccc765c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "afl" "postfix-dot-notation" "sweet-exp" "mutable-match-lambda" "my-cond" "racket-doc" "rackunit-lib" "scribble-code-examples" "scribble-lib")) (description . "obj.method(x) in racket using mutable-match-lambda") (implies . ()) (last-checked . 1632902952) (last-edit . 1472014564) (last-updated . 1596547508) (modules . ((lib "dotmethod/lang/reader.rkt") (lib "dotmethod/dotmethod.rkt") (lib "dotmethod/scribblings/dotmethod.scrbl") (lib "dotmethod/tests/test-lang.rkt") (lib "dotmethod/tests/test-require.rkt"))) (name . "dotmethod") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (deprecated . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/AlexKnauth/dotmethod") (tags . ("deprecated" "syntax")) (versions . #hash((default . #hasheq((checksum . "e427237130d9b530d935269a6506c8cdeccc765c") (source . "git://github.com/AlexKnauth/dotmethod") (source_url . "http://github.com/AlexKnauth/dotmethod/tree/master"))))))) ("dracula" . #hasheq((author . "cce@racket-lang.org") (authors . ("cce@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/dracula.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e50a9ab1d609c339ca94272770213cf746c8ba0b") (checksum-error . #f) (collection . "dracula") (conflicts . ()) (dependencies . ("planet-schematics-random1" "base" "compatibility-lib" "drracket" "drracket-plugin-lib" "gui-lib" "htdp-lib" "planet-lib" "rackunit-gui" "rackunit-lib" "sandbox-lib" "scheme-lib" "scribble-lib" "slideshow-lib" "srfi-lib" "srfi-lite-lib" "string-constants-lib" "racket-doc")) (description . "Dracula: ACL2 theorem prover tools in DrRacket") (implies . ()) (last-checked . 1632902952) (last-edit . 1393214838) (last-updated . 1502815908) (modules . ((lib "dracula/test/test-private.rkt") (lib "dracula/private/fasttest/rackunit.rkt") (lib "dracula/reference/reference.scrbl") (lib "dracula/private/scheme/debug.rkt") (lib "dracula/reference/teachpacks/testing.scrbl") (lib "dracula/lang/in-package.rkt") (lib "dracula/lang/let.rkt") (lib "dracula/test/data-state.rkt") (lib "dracula/private/scheme/dict.rkt") (lib "dracula/modular/teachpacks.rkt") (lib "dracula/lang/t-or-nil.rkt") (lib "dracula/proof/proof.rkt") (lib "dracula/lang/quote.rkt") (lib "dracula/reference/acl2/library.scrbl") (lib "dracula/lang/parameters.rkt") (lib "dracula/reference/acl2/sets.scrbl") (lib "dracula/reference/acl2/arithmetic.scrbl") (lib "dracula/modular/keywords.rkt") (lib "dracula/reference/acl2/sequences.scrbl") (lib "dracula/reference/teachpacks/rand.scrbl") (lib "dracula/test/program-tests.rkt") (lib "dracula/acl2/acl2.rkt") (lib "dracula/private/scheme/test/test-values.rkt") (lib "dracula/reference/acl2/trees.scrbl") (lib "dracula/guide/tutorial.scrbl") (lib "dracula/lang/dracula.rkt") (lib "dracula/private/scheme/syntax.rkt") (lib "dracula/reference/teachpacks/binary-io-utilities.scrbl") (lib "dracula/private/scheme/exn.rkt") (lib "dracula/lang/defstructure.rkt") (lib "dracula/lang/acl2-readtable.rkt") (lib "dracula/private/scheme/lang.rkt") (lib "dracula/private/scheme/test/test-queue.rkt") (lib "dracula/teachpacks/world.rkt") (lib "dracula/private/scheme/sandbox.rkt") (lib "dracula/modular/interface.rkt") (lib "dracula/modular/world-teachpack.rkt") (lib "dracula/private/fasttest/examples/tutorial.rkt") (lib "dracula/private/scheme/test/test-planet.rkt") (lib "dracula/proof/syntax.rkt") (lib "dracula/test/test-teachpacks.rkt") (lib "dracula/modular/dynamic-rep.rkt") (lib "dracula/private/scheme/web.rkt") (lib "dracula/drscheme/dracula-proof-panel.rkt") (lib "dracula/guide/guide.scrbl") (lib "dracula/test/run-tests.rkt") (lib "dracula/reference/acl2/books.scrbl") (lib "dracula/lang/nil-macros.rkt") (lib "dracula/test/test-modular.rkt") (lib "dracula/private/scheme/test/test-debug.rkt") (lib "dracula/test/test-parse.rkt") (lib "dracula/test/test-language.rkt") (lib "dracula/modular/top.rkt") (lib "dracula/teachpacks/list-utilities.rkt") (lib "dracula/private/scheme/test/test-syntax.rkt") (lib "dracula/reference/evaluator.rkt") (lib "dracula/private/scheme/test/test-text.rkt") (lib "dracula/lang/deflist.rkt") (lib "dracula/lang/dracula-core.rkt") (lib "dracula/private/scheme/private/syntax-core.rkt") (lib "dracula/teachpacks/doublecheck.rkt") (lib "dracula/drscheme/dracula-drscheme-tab.rkt") (lib "dracula/acl2/rep.rkt") (lib "dracula/lang/acl2-top.rkt") (lib "dracula/teachpacks/io-utilities.rkt") (lib "dracula/modular.rkt") (lib "dracula/private/scheme/set.rkt") (lib "dracula/lang/constants.rkt") (lib "dracula/acl2/parse.rkt") (lib "dracula/private/scheme/scribble.rkt") (lib "dracula/reference/acl2/bitwise.scrbl") (lib "dracula/private/scheme/test/checks.rkt") (lib "dracula/private/scheme/regexp.rkt") (lib "dracula/reference/modular/modular.scrbl") (lib "dracula/drscheme/dracula-interfaces.rkt") (lib "dracula/test/test-state.rkt") (lib "dracula/reference/acl2/unsupported.scrbl") (lib "dracula/modular/static-rep.rkt") (lib "dracula/modular/invoke.rkt") (lib "dracula/self/module-path.rkt") (lib "dracula/private/scheme/test/test-hash.rkt") (lib "dracula/teachpacks/testing-gui.rkt") (lib "dracula/private/scheme/test/test-require-provide.rkt") (lib "dracula/private/scheme/test/test-contract.rkt") (lib "dracula/reference/teachpacks/teachpacks.scrbl") (lib "dracula/acl2/buffer.rkt") (lib "dracula/test/test-library.rkt") (lib "dracula/reference/acl2/strings.scrbl") (lib "dracula/reference/acl2/acl2.scrbl") (lib "dracula/drscheme/dracula-state.rkt") (lib "dracula/private/scheme/text.rkt") (lib "dracula/reference/acl2/ordinals.scrbl") (lib "dracula/private/scheme/hash.rkt") (lib "dracula/lang/acl2-app.rkt") (lib "dracula/private/scheme/test/test-function.rkt") (lib "dracula/teachpacks/little-prover.rkt") (lib "dracula/reference/acl2/booleans.scrbl") (lib "dracula/reference/acl2/parameters.scrbl") (lib "dracula/teachpacks/binary-io-utilities.rkt") (lib "dracula/modular/module.rkt") (lib "dracula/reference/teachpacks/audio.scrbl") (lib "dracula/private/fasttest/test.rkt") (lib "dracula/modular/main.rkt") (lib "dracula/teachpacks/io-utilities-scheme.rkt") (lib "dracula/private/scheme/test/test-web.rkt") (lib "dracula/guide/display.rkt") (lib "dracula/private/scheme/contract.rkt") (lib "dracula/private/scheme/test/test-port.rkt") (lib "dracula/reference/teachpacks/avl-rational-keys.scrbl") (lib "dracula/teachpacks/rand.rkt") (lib "dracula/private/scheme/test/test-set.rkt") (lib "dracula/private/fasttest/examples/stress.rkt") (lib "dracula/guide/doublecheck.scrbl") (lib "dracula/main.rkt") (lib "dracula/lang/primitive-procedures/acl2-prims-scheme.rkt") (lib "dracula/reference/teachpacks/io-utilities.scrbl") (lib "dracula/lang/acl2-reader.rkt") (lib "dracula/reference/teachpacks/little-prover.scrbl") (lib "dracula/drscheme/dracula-drscheme-frame.rkt") (lib "dracula/reference/acl2/symbols.scrbl") (lib "dracula/private/scheme/test/test-sandbox.rkt") (lib "dracula/private/scheme/slideshow.rkt") (lib "dracula/private/scheme/scheme.rkt") (lib "dracula/lang/conditionals.rkt") (lib "dracula/private/scheme/test/test-scribble.rkt") (lib "dracula/lang/defthm.rkt") (lib "dracula/drscheme/tool.rkt") (lib "dracula/private/scheme/drscheme.rkt") (lib "dracula/test/data-proof.rkt") (lib "dracula/teachpacks/testing.rkt") (lib "dracula/private/fasttest/private/random-stream.rkt") (lib "dracula/reference/teachpacks/list-utilities.scrbl") (lib "dracula/private/scheme/function.rkt") (lib "dracula/private/scheme/planet.rkt") (lib "dracula/lang/prover.rkt") (lib "dracula/lang/include-book.rkt") (lib "dracula/reference/acl2/characters.scrbl") (lib "dracula/lang/printer.rkt") (lib "dracula/private/regexp.rkt") (lib "dracula/lang/declare.rkt") (lib "dracula/private/fasttest/random.rkt") (lib "dracula/self/require.rkt") (lib "dracula/lang/equality.rkt") (lib "dracula/test/test-proof.rkt") (lib "dracula/reference/acl2/events.scrbl") (lib "dracula/test/data-parse.rkt") (lib "dracula/private/scheme/main.rkt") (lib "dracula/private/scheme/test/test-match.rkt") (lib "dracula/private/scheme/queue.rkt") (lib "dracula/reference/teachpacks/j-bob.scrbl") (lib "dracula/lang/theorems.rkt") (lib "dracula/private/scheme/values.rkt") (lib "dracula/lang/acl2-io.rkt") (lib "dracula/private/scheme/test/test-exn.rkt") (lib "dracula/modular/require.rkt") (lib "dracula/private/scheme/gui.rkt") (lib "dracula/private/scheme/test/test-class.rkt") (lib "dracula/reference/acl2/datatypes.scrbl") (lib "dracula/reference/acl2/alists.scrbl") (lib "dracula/guide/dracula.scrbl") (lib "dracula/reference/acl2/expressions.scrbl") (lib "dracula/modular/world.rkt") (lib "dracula/lang/acl.rkt") (lib "dracula/guide/modular.scrbl") (lib "dracula/teachpacks/j-bob.rkt") (lib "dracula/private/scheme/define.rkt") (lib "dracula/private/hash.rkt") (lib "dracula/teachpacks/avl-rational-keys.rkt") (lib "dracula/private/scheme/test/test-dict.rkt") (lib "dracula/test/test-regexp.rkt") (lib "dracula/lang/defun.rkt") (lib "dracula/private/scheme/test/test-gui.rkt") (lib "dracula/reference/teachpacks/world.scrbl") (lib "dracula/modular/list-set.rkt") (lib "dracula/teachpacks/audio.rkt") (lib "dracula/private/scheme/private/define-core.rkt") (lib "dracula/drscheme/dracula-drscheme-definitions.rkt") (lib "dracula/private/scheme/require-provide.rkt") (lib "dracula/reference/acl2/lists.scrbl") (lib "dracula/private/scheme/port.rkt") (lib "dracula/modular/syntax-meta.rkt") (lib "dracula/private/scheme/test/test-regexp.rkt") (lib "dracula/modular/link.rkt") (lib "dracula/drscheme/dracula-language-level.rkt") (lib "dracula/private/scheme/class.rkt") (lib "dracula/lang/dracula-module-begin.rkt") (lib "dracula/lang/syntax-checks.rkt") (lib "dracula/lang/with-prover-time-limit.rkt") (lib "dracula/private/scheme/test/test-define.rkt") (lib "dracula/lang/case-match.rkt") (lib "dracula/lang/primitive-procedures/acl2-prims.rkt") (lib "dracula/drscheme/term-state.rkt") (lib "dracula/private/scheme/test/test-main.rkt") (lib "dracula/drscheme/executable-path.rkt") (lib "dracula/private/scheme/match.rkt") (lib "dracula/private/scheme/test/test-slideshow.rkt") (lib "dracula/reference/teachpacks/doublecheck.scrbl") (lib "dracula/drscheme/proof-state.rkt") (lib "dracula/teachpacks/j-bob-lang.rkt") (lib "dracula/private/scheme/test/test-drscheme.rkt") (lib "dracula/self/scribble.rkt") (lib "dracula/reference/acl2/io.scrbl") (lib "dracula/lang/defconst.rkt") (lib "dracula/reference/teachpacks/j-bob-lang.scrbl") (lib "dracula/lang/do-check.rkt"))) (name . "dracula") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:cce@racket-lang.org . #t) (ring:1 . #t))) (source . "github://github.com/carl-eastlund/dracula/release") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e50a9ab1d609c339ca94272770213cf746c8ba0b") (source . "github://github.com/carl-eastlund/dracula/release") (source_url . "http://github.com/carl-eastlund/dracula/tree/release"))))))) ("dracula-theme" . #hasheq((author . "massung@gmail.com") (authors . ("massung@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dracula-theme.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dracula-theme.txt"))) (checksum . "e0c10bc0177ada3e37518f96ba0ea55560d76781") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1581779634) (dependencies . ("base")) (description . "Dracula color scheme for DrRacket (https://draculatheme.com/)") (implies . ()) (last-checked . 1632902952) (last-edit . 1611168908) (last-updated . 1624054137) (modules . ()) (name . "dracula-theme") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:massung@gmail.com . #t) (colorscheme . #t) (ring:1 . #t))) (source . "https://github.com/dracula/racket.git") (tags . ("colorscheme" "DrRacket")) (versions . #hash((default . #hasheq((checksum . "e0c10bc0177ada3e37518f96ba0ea55560d76781") (source . "https://github.com/dracula/racket.git") (source_url . "https://github.com/dracula/racket.git"))))))) ("draw" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("draw-lib" "draw-doc")) (description . "Drawing libraries") (implies . ("draw-lib" "draw-doc")) (last-checked . 1632902953) (last-edit . 1417659583) (last-updated . 1630541350) (modules . ()) (name . "draw") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "501b7aba22b024ca01ed93bcff07b2bc1030079e") (source . "git://github.com/racket/draw/?path=draw") (source_url . "git://github.com/racket/draw/?path=draw"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("draw-aarch64-macosx-3" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/draw-aarch64-macosx-3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/draw-aarch64-macosx-3.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for draw package") (implies . ()) (last-checked . 1632902953) (last-edit . 1619290668) (last-updated . 1619290668) (modules . ()) (name . "draw-aarch64-macosx-3") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "f252e607746796bc32a08c1ff84ae421b183e54a") (source . "https://pkg-sources.racket-lang.org/pkgs/f252e607746796bc32a08c1ff84ae421b183e54a/draw-aarch64-macosx-3.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/f252e607746796bc32a08c1ff84ae421b183e54a/draw-aarch64-macosx-3.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("draw-doc" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "draw" "doc/draw@draw-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("gui-doc" "pict-doc" "at-exp-lib" "base" "gui-lib" "pict-lib" "scribble-lib" "draw-lib" "racket-doc")) (description . "documentation part of draw") (implies . ()) (last-checked . 1632902954) (last-edit . 1417659583) (last-updated . 1630541352) (modules . ((lib "scribblings/draw/ps-setup-class.scrbl") (lib "scribblings/draw/font-name-directory-intf.scrbl") (lib "scribblings/draw/record-dc-class.scrbl") (lib "scribblings/draw/color-class.scrbl") (lib "scribblings/draw/brush-class.scrbl") (lib "scribblings/draw/brush-list-class.scrbl") (lib "scribblings/draw/font-list-class.scrbl") (lib "scribblings/draw/pen-class.scrbl") (lib "scribblings/draw/post-script-dc-class.scrbl") (lib "scribblings/draw/dc-intf.scrbl") (lib "scribblings/draw/draw-unit.scrbl") (lib "scribblings/draw/region-class.scrbl") (lib "scribblings/draw/linear-gradient-class.scrbl") (lib "scribblings/draw/gl-context-intf.scrbl") (lib "scribblings/draw/radial-gradient-class.scrbl") (lib "scribblings/draw/bitmap-dc-class.scrbl") (lib "scribblings/draw/font-class.scrbl") (lib "scribblings/draw/pen-list-class.scrbl") (lib "scribblings/draw/unsafe.scrbl") (lib "scribblings/draw/draw-funcs.scrbl") (lib "scribblings/draw/draw.scrbl") (lib "scribblings/draw/gl-config-class.scrbl") (lib "scribblings/draw/pdf-dc-class.scrbl") (lib "scribblings/draw/guide.scrbl") (lib "scribblings/draw/bitmap-class.scrbl") (lib "scribblings/draw/point-class.scrbl") (lib "scribblings/draw/common.rkt") (lib "scribblings/draw/svg-dc-class.scrbl") (lib "scribblings/draw/draw-contracts.scrbl") (lib "scribblings/draw/color-database-intf.scrbl") (lib "scribblings/draw/dc-path-class.scrbl") (lib "scribblings/draw/conveniences.scrbl") (lib "scribblings/draw/blurbs.rkt") (lib "scribblings/draw/libs.scrbl"))) (name . "draw-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "501b7aba22b024ca01ed93bcff07b2bc1030079e") (source . "git://github.com/racket/draw/?path=draw-doc") (source_url . "git://github.com/racket/draw/?path=draw-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("draw-i386-macosx" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for draw package") (implies . ()) (last-checked . 1632902954) (last-edit . 1576860307) (last-updated . 1595021090) (modules . ()) (name . "draw-i386-macosx") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "84ccf524cd10ad0c989eb37d816893dc0b26d705") (source . "https://pkg-sources.racket-lang.org/pkgs/84ccf524cd10ad0c989eb37d816893dc0b26d705/draw-i386-macosx.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/84ccf524cd10ad0c989eb37d816893dc0b26d705/draw-i386-macosx.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("draw-i386-macosx-2" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for draw package") (implies . ()) (last-checked . 1632902954) (last-edit . 1576860307) (last-updated . 1595021097) (modules . ()) (name . "draw-i386-macosx-2") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e7c6929139d44373b86e437e1c46e9b02d0e051f") (source . "https://pkg-sources.racket-lang.org/pkgs/e7c6929139d44373b86e437e1c46e9b02d0e051f/draw-i386-macosx-2.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/e7c6929139d44373b86e437e1c46e9b02d0e051f/draw-i386-macosx-2.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("draw-i386-macosx-3" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/draw-i386-macosx-3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/draw-i386-macosx-3.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for draw package") (implies . ()) (last-checked . 1632902955) (last-edit . 1619290668) (last-updated . 1619290676) (modules . ()) (name . "draw-i386-macosx-3") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "d17a7f95bbe9b033e62e65ef627bd30124cd7964") (source . "https://pkg-sources.racket-lang.org/pkgs/d17a7f95bbe9b033e62e65ef627bd30124cd7964/draw-i386-macosx-3.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/d17a7f95bbe9b033e62e65ef627bd30124cd7964/draw-i386-macosx-3.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("draw-lib" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "8.0.0.8") ("draw-i386-macosx-3" #:platform "i386-macosx") ("draw-x86_64-macosx-3" #:platform "x86_64-macosx") ("draw-ppc-macosx-3" #:platform "ppc-macosx") ("draw-aarch64-macosx-3" #:platform "aarch64-macosx") ("draw-win32-i386-3" #:platform "win32\\i386") ("draw-win32-x86_64-3" #:platform "win32\\x86_64") ("draw-x86_64-linux-natipkg-3" #:platform "x86_64-linux-natipkg") ("draw-x11-x86_64-linux-natipkg" #:platform "x86_64-linux-natipkg") ("draw-ttf-x86_64-linux-natipkg" #:platform "x86_64-linux-natipkg"))) (description . "implementation (no documentation) part of draw") (implies . ()) (last-checked . 1632902955) (last-edit . 1417659583) (last-updated . 1630541354) (modules . ((lib "racket/draw/unsafe/callback.rkt") (lib "racket/draw.rkt") (lib "racket/draw/xpm.rkt") (lib "racket/draw/private/gradient.rkt") (lib "racket/draw/private/utils.rkt") (lib "racket/draw/private/contract.rkt") (lib "file/gif.rkt") (lib "racket/draw/private/define.rkt") (lib "racket/draw/private/dc-path.rkt") (lib "racket/draw/draw-sig.rkt") (lib "racket/draw/private/dc.rkt") (lib "racket/draw/arrow.rkt") (lib "racket/draw/private/ps-setup.rkt") (lib "racket/draw/unsafe/cairo-lib.rkt") (lib "racket/draw/unsafe/bstr.rkt") (lib "racket/draw/private/point.rkt") (lib "racket/draw/private/region.rkt") (lib "racket/draw/private/gl-context.rkt") (lib "racket/draw/private/pen.rkt") (lib "racket/draw/private/font-dir.rkt") (lib "racket/draw/private/bitmap-dc.rkt") (lib "racket/draw/private/color.rkt") (lib "racket/draw/private/bitmap.rkt") (lib "racket/draw/unsafe/pango.rkt") (lib "racket/draw/private/xp.rkt") (lib "racket/draw/private/write-bytes.rkt") (lib "racket/draw/draw-unit.rkt") (lib "racket/draw/bmp.rkt") (lib "net/gifwrite.rkt") (lib "racket/draw/private/transform.rkt") (lib "racket/draw/unsafe/glib.rkt") (lib "racket/draw/unsafe/cairo.rkt") (lib "racket/draw/private/page-dc.rkt") (lib "racket/draw/private/emoji-sequences.rkt") (lib "racket/draw/unsafe/brush.rkt") (lib "racket/draw/private/dc-intf.rkt") (lib "racket/draw/private/local.rkt") (lib "racket/draw/private/record-dc.rkt") (lib "racket/draw/unsafe/jpeg.rkt") (lib "racket/draw/private/hold.rkt") (lib "racket/draw/private/svg-dc.rkt") (lib "racket/draw/private/lock.rkt") (lib "racket/draw/private/font.rkt") (lib "racket/draw/private/post-script-dc.rkt") (lib "racket/draw/private/fmod.rkt") (lib "racket/draw/unsafe/png.rkt") (lib "racket/draw/private/font-syms.rkt") (lib "racket/draw/gif.rkt") (lib "file/private/octree-quantize.rkt") (lib "racket/draw/private/syntax.rkt") (lib "racket/draw/private/emoji.rkt") (lib "racket/draw/xbm.rkt") (lib "racket/draw/private/lzw.rkt") (lib "racket/draw/private/libs.rkt") (lib "racket/draw/private/gl-config.rkt") (lib "racket/draw/private/brush.rkt"))) (name . "draw-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "501b7aba22b024ca01ed93bcff07b2bc1030079e") (source . "git://github.com/racket/draw/?path=draw-lib") (source_url . "git://github.com/racket/draw/?path=draw-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("draw-ppc-macosx" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for draw package") (implies . ()) (last-checked . 1632902955) (last-edit . 1576860307) (last-updated . 1595021107) (modules . ()) (name . "draw-ppc-macosx") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "ca120b25f76730e26a28f919a55e9defd455e10c") (source . "https://pkg-sources.racket-lang.org/pkgs/ca120b25f76730e26a28f919a55e9defd455e10c/draw-ppc-macosx.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/ca120b25f76730e26a28f919a55e9defd455e10c/draw-ppc-macosx.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("draw-ppc-macosx-2" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for draw package") (implies . ()) (last-checked . 1632902956) (last-edit . 1576860307) (last-updated . 1595021113) (modules . ()) (name . "draw-ppc-macosx-2") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2f48dff527db9f3fcff4945fb9738cf352ea4399") (source . "https://pkg-sources.racket-lang.org/pkgs/2f48dff527db9f3fcff4945fb9738cf352ea4399/draw-ppc-macosx-2.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/2f48dff527db9f3fcff4945fb9738cf352ea4399/draw-ppc-macosx-2.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("draw-ppc-macosx-3" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/draw-ppc-macosx-3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/draw-ppc-macosx-3.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for draw package") (implies . ()) (last-checked . 1632902956) (last-edit . 1576860307) (last-updated . 1607368621) (modules . ()) (name . "draw-ppc-macosx-3") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "1849b7d08515a133f1a214c7a959ed9482814a56") (source . "https://pkg-sources.racket-lang.org/pkgs/1849b7d08515a133f1a214c7a959ed9482814a56/draw-ppc-macosx-3.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/1849b7d08515a133f1a214c7a959ed9482814a56/draw-ppc-macosx-3.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("draw-test" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "501b7aba22b024ca01ed93bcff07b2bc1030079e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-index" "scheme-lib" "draw-lib" "racket-test" "sgl" "gui-lib" "rackunit-lib" "pconvert-lib" "compatibility-lib" "sandbox-lib")) (description . "tests for draw") (implies . ()) (last-checked . 1632902956) (last-edit . 1437927008) (last-updated . 1630541356) (modules . ((lib "tests/racket/draw/blits.rkt") (lib "tests/racket/draw/gif.rkt") (lib "tests/racket/draw/dc.rkt") (lib "tests/racket/draw/png.rkt") (lib "tests/racket/draw/font-maps.rkt") (lib "tests/racket/draw/unsafe-draw.rkt") (lib "tests/racket/draw/jpeg.rkt") (lib "tests/racket/draw/scale-png.rkt") (lib "tests/racket/draw/color.rkt") (lib "tests/racket/draw/draw.rkt") (lib "tests/racket/draw/bitmap-stress.rkt") (lib "tests/racket/draw/bmp.rkt") (lib "tests/racket/draw/clip-check.rkt") (lib "tests/racket/draw/record-dc.rkt"))) (name . "draw-test") (ring . 1) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-tests . #t) (ring:1 . #t))) (source . "git://github.com/racket/draw/?path=draw-test") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "501b7aba22b024ca01ed93bcff07b2bc1030079e") (source . "git://github.com/racket/draw/?path=draw-test") (source_url . "git://github.com/racket/draw/?path=draw-test"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("draw-ttf-x86_64-linux-natipkg" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for draw package") (implies . ()) (last-checked . 1632902957) (last-edit . 1526575094) (last-updated . 1595021123) (modules . ()) (name . "draw-ttf-x86_64-linux-natipkg") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "a141c2ae32e7af8ce850f926d9d2f5eaea3c4b63") (source . "https://pkg-sources.racket-lang.org/pkgs/a141c2ae32e7af8ce850f926d9d2f5eaea3c4b63/draw-ttf-x86_64-linux-natipkg.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/a141c2ae32e7af8ce850f926d9d2f5eaea3c4b63/draw-ttf-x86_64-linux-natipkg.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("draw-win32-i386" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for draw package") (implies . ()) (last-checked . 1632902957) (last-edit . 1576860307) (last-updated . 1595021129) (modules . ()) (name . "draw-win32-i386") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f38adc9da2396b6efa0b221d8d3df43005c3558e") (source . "https://pkg-sources.racket-lang.org/pkgs/f38adc9da2396b6efa0b221d8d3df43005c3558e/draw-win32-i386.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/f38adc9da2396b6efa0b221d8d3df43005c3558e/draw-win32-i386.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("draw-win32-i386-2" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for draw package") (implies . ()) (last-checked . 1632902958) (last-edit . 1576860307) (last-updated . 1595021132) (modules . ()) (name . "draw-win32-i386-2") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "fc0488d019932b7754657fa26ad7883931234584") (source . "https://pkg-sources.racket-lang.org/pkgs/fc0488d019932b7754657fa26ad7883931234584/draw-win32-i386-2.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/fc0488d019932b7754657fa26ad7883931234584/draw-win32-i386-2.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("draw-win32-i386-3" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/draw-win32-i386-3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/draw-win32-i386-3.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for draw package") (implies . ()) (last-checked . 1632902958) (last-edit . 1576860307) (last-updated . 1595021135) (modules . ()) (name . "draw-win32-i386-3") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "4a0be4e7d0c0db7cb7908ea5a29092313a4c73d7") (source . "https://pkg-sources.racket-lang.org/pkgs/4a0be4e7d0c0db7cb7908ea5a29092313a4c73d7/draw-win32-i386-3.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/4a0be4e7d0c0db7cb7908ea5a29092313a4c73d7/draw-win32-i386-3.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("draw-win32-x86_64" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for draw package") (implies . ()) (last-checked . 1632902958) (last-edit . 1576860307) (last-updated . 1595021139) (modules . ()) (name . "draw-win32-x86_64") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "ff0e422298ba0ead55f50f62be0a0ebaff90b59b") (source . "https://pkg-sources.racket-lang.org/pkgs/ff0e422298ba0ead55f50f62be0a0ebaff90b59b/draw-win32-x86_64.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/ff0e422298ba0ead55f50f62be0a0ebaff90b59b/draw-win32-x86_64.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("draw-win32-x86_64-2" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for draw package") (implies . ()) (last-checked . 1632902959) (last-edit . 1576860307) (last-updated . 1595021142) (modules . ()) (name . "draw-win32-x86_64-2") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e75d6188f943fbca5d97696411f07f8084107777") (source . "https://pkg-sources.racket-lang.org/pkgs/e75d6188f943fbca5d97696411f07f8084107777/draw-win32-x86_64-2.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/e75d6188f943fbca5d97696411f07f8084107777/draw-win32-x86_64-2.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("draw-win32-x86_64-3" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/draw-win32-x86_64-3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/draw-win32-x86_64-3.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for draw package") (implies . ()) (last-checked . 1632902959) (last-edit . 1576860307) (last-updated . 1595021146) (modules . ()) (name . "draw-win32-x86_64-3") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "40e651ee240b517d95f0455f835df8a186e6ad8b") (source . "https://pkg-sources.racket-lang.org/pkgs/40e651ee240b517d95f0455f835df8a186e6ad8b/draw-win32-x86_64-3.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/40e651ee240b517d95f0455f835df8a186e6ad8b/draw-win32-x86_64-3.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("draw-x11-x86_64-linux-natipkg" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for draw package") (implies . ()) (last-checked . 1632902960) (last-edit . 1576860307) (last-updated . 1595021149) (modules . ()) (name . "draw-x11-x86_64-linux-natipkg") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "f8e5fdc120b96b94d1511c7d110a375bd225bf03") (source . "https://pkg-sources.racket-lang.org/pkgs/f8e5fdc120b96b94d1511c7d110a375bd225bf03/draw-x11-x86_64-linux-natipkg.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/f8e5fdc120b96b94d1511c7d110a375bd225bf03/draw-x11-x86_64-linux-natipkg.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("draw-x86_64-linux-natipkg-2" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for draw package") (implies . ()) (last-checked . 1632902960) (last-edit . 1576860307) (last-updated . 1595021153) (modules . ()) (name . "draw-x86_64-linux-natipkg-2") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "009066a20290d442a38544e89d336cb3f586cfe7") (source . "https://pkg-sources.racket-lang.org/pkgs/009066a20290d442a38544e89d336cb3f586cfe7/draw-x86_64-linux-natipkg-2.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/009066a20290d442a38544e89d336cb3f586cfe7/draw-x86_64-linux-natipkg-2.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("draw-x86_64-linux-natipkg-3" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for draw package") (implies . ()) (last-checked . 1632902960) (last-edit . 1576860307) (last-updated . 1595021158) (modules . ()) (name . "draw-x86_64-linux-natipkg-3") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "1be13a5d7af1dc007cff8c4a6fb177fc1091aa7e") (source . "https://pkg-sources.racket-lang.org/pkgs/1be13a5d7af1dc007cff8c4a6fb177fc1091aa7e/draw-x86_64-linux-natipkg-3.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/1be13a5d7af1dc007cff8c4a6fb177fc1091aa7e/draw-x86_64-linux-natipkg-3.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("draw-x86_64-macosx" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for draw package") (implies . ()) (last-checked . 1632902961) (last-edit . 1576860307) (last-updated . 1595021161) (modules . ()) (name . "draw-x86_64-macosx") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d597bdcb7982a6d6bc39fb421ce95f11dff009e1") (source . "https://pkg-sources.racket-lang.org/pkgs/d597bdcb7982a6d6bc39fb421ce95f11dff009e1/draw-x86_64-macosx.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/d597bdcb7982a6d6bc39fb421ce95f11dff009e1/draw-x86_64-macosx.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("draw-x86_64-macosx-2" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for draw package") (implies . ()) (last-checked . 1632902961) (last-edit . 1576860307) (last-updated . 1595021166) (modules . ()) (name . "draw-x86_64-macosx-2") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0a291e1f09fcb5a8f5ceab19e996fb85231a7493") (source . "https://pkg-sources.racket-lang.org/pkgs/0a291e1f09fcb5a8f5ceab19e996fb85231a7493/draw-x86_64-macosx-2.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/0a291e1f09fcb5a8f5ceab19e996fb85231a7493/draw-x86_64-macosx-2.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("draw-x86_64-macosx-3" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/draw-x86_64-macosx-3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/draw-x86_64-macosx-3.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for draw package") (implies . ()) (last-checked . 1632902961) (last-edit . 1619290668) (last-updated . 1619290674) (modules . ()) (name . "draw-x86_64-macosx-3") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "e42409d4b9e38b97cc51793fa12a1a90b3d52454") (source . "https://pkg-sources.racket-lang.org/pkgs/e42409d4b9e38b97cc51793fa12a1a90b3d52454/draw-x86_64-macosx-3.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/e42409d4b9e38b97cc51793fa12a1a90b3d52454/draw-x86_64-macosx-3.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("drbayes" . #hasheq((author . "neil.toronto@gmail.com") (authors . ("neil.toronto@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/drbayes.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e59eb7c7867118bf4c77ca903e133c7530e612a3") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "math-lib" "images-lib" "plot-gui-lib" "plot-lib" "profile-lib")) (description . "Probabilistic programming language") (implies . ()) (last-checked . 1632902962) (last-edit . 1423766206) (last-updated . 1596547516) (modules . ((lib "drbayes/private/search/split.rkt") (lib "drbayes/direct/exact-semantics/tests.rkt") (lib "drbayes/private/set/union-more-ops.rkt") (lib "drbayes/private/search/utils.rkt") (lib "drbayes/private/arrow/prob-arrows.rkt") (lib "drbayes/private/arrow/meaning.rkt") (lib "drbayes/private/language.rkt") (lib "drbayes/private/flonum/directed-rounding.rkt") (lib "drbayes/tests/language-tests/probabilistic-grammar.rkt") (lib "drbayes/private/set/bool-set.rkt") (lib "drbayes/private/search/enumerate.rkt") (lib "drbayes/private/set/store-set.rkt") (lib "drbayes/private/arrow/pure-lifts/make-real-lift.rkt") (lib "drbayes/private/set/parameters.rkt") (lib "drbayes/private/flonum/probability.rkt") (lib "drbayes/private/arrow/pure-lifts.rkt") (lib "drbayes/private/search/parameters.rkt") (lib "drbayes/tests/set-tests/set-lattice-properties.rkt") (lib "drbayes/tests/set-tests/store-set-tests.rkt") (lib "drbayes/direct/exact-semantics/branch-trace.rkt") (lib "drbayes/private/set/store.rkt") (lib "drbayes/direct/exact-semantics/pre-arrow.rkt") (lib "drbayes/tests/random-sets/random-null-set.rkt") (lib "drbayes/tests/arrow-tests/real-function-tests.rkt") (lib "drbayes/direct/exact-semantics/bot-arrow.rkt") (lib "drbayes/private/set/union.rkt") (lib "drbayes/tests/set-tests/pair-set-tests.rkt") (lib "drbayes/tests/language-tests/flonum-accuracy/abstract-float.rkt") (lib "drbayes/tests/language-tests/ray-tracing.rkt") (lib "drbayes/private/arrow/indexes.rkt") (lib "drbayes/direct/exact-semantics/semantic-function.rkt") (lib "drbayes/tests/random-sets/random-real-set.rkt") (lib "drbayes/tests/set-tests/set-properties.rkt") (lib "drbayes/direct/exact-semantics/partial-arrows-plus.rkt") (lib "drbayes/private/language/functions.rkt") (lib "drbayes/private/language/drbayes-dispatcher.rkt") (lib "drbayes/tests/random-sets/random-symbol-set.rkt") (lib "drbayes/tests/set-tests/set-tests.rkt") (lib "drbayes/tests/arrow-tests/arrow-tests.rkt") (lib "drbayes/direct/racket-impl/pre-star-arrow.rkt") (lib "drbayes/private/bigfloat/directed-rounding.rkt") (lib "drbayes/private/arrow/pure-arrows.rkt") (lib "drbayes/tests/set-tests/bool-set-tests.rkt") (lib "drbayes/private/language/parameterized-expansion.rkt") (lib "drbayes/private/arrow/pure-lifts/rounding-lifts.rkt") (lib "drbayes/private/arrow/proc-arrow.rkt") (lib "drbayes/private/flonum/symmetric-log.rkt") (lib "drbayes/tests/language-tests/probability-bounds-tests/normal-normal-query.rkt") (lib "drbayes/private/arrow/types.rkt") (lib "drbayes/direct/racket-impl/set.rkt") (lib "drbayes/private/arrow/pure-lifts/make-predicate-lift.rkt") (lib "drbayes/private/arrow/prob-lifts.rkt") (lib "drbayes/private/set/null-set.rkt") (lib "drbayes/direct/exact-semantics/mapping.rkt") (lib "drbayes/tests/random-sets/random-bool-set.rkt") (lib "drbayes/private/set/union-ops.rkt") (lib "drbayes/private/search/sample.rkt") (lib "drbayes/direct/exact-semantics/fun-arrow.rkt") (lib "drbayes/private/arrow/refine.rkt") (lib "drbayes/tests/flonum-tests/log-random-tests.rkt") (lib "drbayes/tests/set-tests/prob-set-tests.rkt") (lib "drbayes/tests/language-tests/normal-normal.rkt") (lib "drbayes/private/set/store-index.rkt") (lib "drbayes/tests/real-tests/bijection-tests.rkt") (lib "drbayes/private/flonum/flops.rkt") (lib "drbayes/tests/language-tests/flonum-accuracy/geometric-inv-cdf.rkt") (lib "drbayes/tests/set-tests/symbol-set-tests.rkt") (lib "drbayes/tests/set-tests/set-algebra-properties.rkt") (lib "drbayes/tests/language-tests/tests.rkt") (lib "drbayes/private/arrow/preimage-mapping.rkt") (lib "drbayes/private/set/symbol-set.rkt") (lib "drbayes/tests/random-sets/random-prob-set.rkt") (lib "drbayes/tests/language-tests/build-it-break-it/build-it-break-it.rkt") (lib "drbayes/private/search.rkt") (lib "drbayes/private/arrow/pure-lifts/comparison-lifts.rkt") (lib "drbayes/private/arrow/parameters.rkt") (lib "drbayes/private/set.rkt") (lib "drbayes/tests/real-tests/trijection-tests.rkt") (lib "drbayes/private/set/types.rkt") (lib "drbayes/private/bigfloat.rkt") (lib "drbayes/tests/random-sets/random-set.rkt") (lib "drbayes/direct/racket-impl/pre-mapping.rkt") (lib "drbayes/private/arrow/pure-lifts/make-prob-lift.rkt") (lib "drbayes/private/set/prob-set.rkt") (lib "drbayes/private/set/real-set.rkt") (lib "drbayes/private/arrow.rkt") (lib "drbayes/private/set/extremal-set.rkt") (lib "drbayes/main.rkt") (lib "drbayes/direct/exact-semantics/map-arrow.rkt") (lib "drbayes/private/arrow/pure-lifts/predicate-lifts.rkt") (lib "drbayes/private/arrow/cache.rkt") (lib "drbayes/direct/scratch/store-split.rkt") (lib "drbayes/private/flonum/utils.rkt") (lib "drbayes/private/arrow/pure-lifts/trijection.rkt") (lib "drbayes/tests/real-tests/utils.rkt") (lib "drbayes/tests/set-tests/set-membership-properties.rkt") (lib "drbayes/private/arrow/pure-lifts/bijection.rkt") (lib "drbayes/tests/set-tests/integer-set-tests.rkt") (lib "drbayes/private/set/value.rkt") (lib "drbayes/direct/exact-semantics/preimage-mapping.rkt") (lib "drbayes/tests/flonum-tests/symmetric-log-tests.rkt") (lib "drbayes/tests/random-sets/random-integer-set.rkt") (lib "drbayes/direct/exact-semantics/set-ops.rkt") (lib "drbayes/private/arrow/pure-lifts/prob-lifts.rkt") (lib "drbayes/tests/language-tests/need-for-strict-if.rkt") (lib "drbayes/private/search/refinement-sample.rkt") (lib "drbayes/tests/set-tests/null-set-tests.rkt") (lib "drbayes/private/set/bottom.rkt") (lib "drbayes/private/search/refinement-search.rkt") (lib "drbayes/private/flonum.rkt") (lib "drbayes/private/arrow/pure-lifts/tag-lifts.rkt") (lib "drbayes/private/search/search-tree.rkt") (lib "drbayes/private/utils.rkt") (lib "drbayes/direct/racket-impl/pre-arrow.rkt") (lib "drbayes/tests/random-sets/random-store-set.rkt") (lib "drbayes/tests/set-tests/real-set-tests.rkt") (lib "drbayes/tests/language-tests/probability-bounds-tests/normal-normal-cond-query.rkt") (lib "drbayes/private/search/types.rkt") (lib "drbayes/private/untyped-utils.rkt") (lib "drbayes/tests/test-utils.rkt") (lib "drbayes/direct/exact-semantics/partial-arrows.rkt") (lib "drbayes/direct/types.rkt") (lib "drbayes/private/bigfloat/symmetric-log.rkt") (lib "drbayes/private/arrow/pure-lifts/equal-lifts.rkt") (lib "drbayes/direct/untyped-utils.rkt") (lib "drbayes/tests/language-tests/build-it-break-it/gamma-beta.rkt") (lib "drbayes/private/set/ordered-set.rkt") (lib "drbayes/private/arrow/pure-lifts/real-lifts.rkt") (lib "drbayes/private/set/integer-set.rkt") (lib "drbayes/private/language/macros.rkt"))) (name . "drbayes") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:neil.toronto@gmail.com . #t) (bayesian . #t) (language . #t) (probability . #t) (ring:1 . #t))) (source . "git://github.com/ntoronto/drbayes") (tags . ("bayesian" "language" "probability")) (versions . #hash((default . #hasheq((checksum . "e59eb7c7867118bf4c77ca903e133c7530e612a3") (source . "git://github.com/ntoronto/drbayes") (source_url . "http://github.com/ntoronto/drbayes/tree/master"))))))) ("drcomplete" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drcomplete.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drcomplete.txt"))) (checksum . "eed4628a9553e103e062006655a16f5dc68ee7cd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1551770937) (dependencies . ("drcomplete-filename" "drcomplete-required" "drcomplete-user-defined" "drcomplete-module" "drcomplete-auto")) (description . "The package assembles drcomplete plugins") (implies . ()) (last-checked . 1632902962) (last-edit . 1551770937) (last-updated . 1632816556) (modules . ()) (name . "drcomplete") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t))) (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete") (tags . ("DrRacket")) (versions . #hash((default . #hasheq((checksum . "eed4628a9553e103e062006655a16f5dc68ee7cd") (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete") (source_url . "https://github.com/yjqww6/drcomplete.git?path=drcomplete"))))))) ("drcomplete-auto" . #hasheq((author . "yj_qww6@126.com 1227847322@qq.com") (authors . ("yj_qww6@126.com" "1227847322@qq.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drcomplete-auto.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drcomplete-auto.txt"))) (checksum . "eed4628a9553e103e062006655a16f5dc68ee7cd") (checksum-error . #f) (collection . "drcomplete-auto") (conflicts . ()) (date-added . 1553154543) (dependencies . ("base" "gui-lib" "drracket-plugin-lib" "drracket")) (description . "automatic triggering of autocompletion") (implies . ()) (last-checked . 1632902962) (last-edit . 1553154543) (last-updated . 1632816557) (modules . ((lib "drcomplete-auto/tool.rkt"))) (name . "drcomplete-auto") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:1227847322@qq.com . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t))) (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-auto") (tags . ("DrRacket")) (versions . #hash((default . #hasheq((checksum . "eed4628a9553e103e062006655a16f5dc68ee7cd") (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-auto") (source_url . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-auto"))))))) ("drcomplete-base" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drcomplete-base.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drcomplete-base.txt"))) (checksum . "eed4628a9553e103e062006655a16f5dc68ee7cd") (checksum-error . #f) (collection . "drcomplete-base") (conflicts . ()) (date-added . 1555386683) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "rackunit-lib")) (description . "basic framework for drcomplete") (implies . ()) (last-checked . 1632902962) (last-edit . 1555386683) (last-updated . 1632816557) (modules . ((lib "drcomplete-base/main.rkt") (lib "drcomplete-base/tool.rkt"))) (name . "drcomplete-base") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t))) (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-base") (tags . ("DrRacket")) (versions . #hash((default . #hasheq((checksum . "eed4628a9553e103e062006655a16f5dc68ee7cd") (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-base") (source_url . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-base"))))))) ("drcomplete-filename" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drcomplete-filename.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drcomplete-filename.txt"))) (checksum . "eed4628a9553e103e062006655a16f5dc68ee7cd") (checksum-error . #f) (collection . "drcomplete-filename") (conflicts . ()) (date-added . 1551249678) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "srfi-lib" "drcomplete-base")) (description . "A DrRacket plugin for autocomplete for filenames, only active inside string.") (implies . ()) (last-checked . 1632902962) (last-edit . 1551770777) (last-updated . 1632816558) (modules . ((lib "drcomplete-filename/tool.rkt") (lib "drcomplete-filename/interface.rkt") (lib "drcomplete-filename/private/main.rkt"))) (name . "drcomplete-filename") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t))) (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-filename") (tags . ("DrRacket")) (versions . #hash((default . #hasheq((checksum . "eed4628a9553e103e062006655a16f5dc68ee7cd") (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-filename") (source_url . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-filename"))))))) ("drcomplete-method-names" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drcomplete-method-names.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drcomplete-method-names.txt"))) (checksum . "eed4628a9553e103e062006655a16f5dc68ee7cd") (checksum-error . #f) (collection . "drcomplete-method-names") (conflicts . ()) (date-added . 1594893288) (dependencies . ("base" "drracket-plugin-lib" "gui-lib" "drcomplete-base" "rackunit-lib")) (description . "A DrRacket plugin for autocomplete for class method names") (implies . ()) (last-checked . 1632902963) (last-edit . 1594893288) (last-updated . 1632816559) (modules . ((lib "drcomplete-method-names/tool.rkt"))) (name . "drcomplete-method-names") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t))) (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-method-names") (tags . ("DrRacket")) (versions . #hash((default . #hasheq((checksum . "eed4628a9553e103e062006655a16f5dc68ee7cd") (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-method-names") (source_url . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-method-names"))))))) ("drcomplete-module" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drcomplete-module.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drcomplete-module.txt"))) (checksum . "eed4628a9553e103e062006655a16f5dc68ee7cd") (checksum-error . #f) (collection . "drcomplete-module") (conflicts . ()) (date-added . 1552030077) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "drcomplete-base")) (description . "autocomplete for modules") (implies . ()) (last-checked . 1632902963) (last-edit . 1552030077) (last-updated . 1632816559) (modules . ((lib "drcomplete-module/tool.rkt") (lib "drcomplete-module/private/main.rkt"))) (name . "drcomplete-module") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t))) (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-module") (tags . ("DrRacket")) (versions . #hash((default . #hasheq((checksum . "eed4628a9553e103e062006655a16f5dc68ee7cd") (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-module") (source_url . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-module"))))))) ("drcomplete-required" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drcomplete-required.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drcomplete-required.txt"))) (checksum . "eed4628a9553e103e062006655a16f5dc68ee7cd") (checksum-error . #f) (collection . "drcomplete-required") (conflicts . ()) (date-added . 1551627861) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "srfi-lib" "drcomplete-base" "rackunit-lib")) (description . "A DrRacket plugin for autocomplete for required identifiers.") (implies . ()) (last-checked . 1632902963) (last-edit . 1551770827) (last-updated . 1632816560) (modules . ((lib "drcomplete-required/tests/test.rkt") (lib "drcomplete-required/private/walk.rkt") (lib "drcomplete-required/tool.rkt") (lib "drcomplete-required/private/expansion.rkt"))) (name . "drcomplete-required") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t))) (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-required") (tags . ("DrRacket")) (versions . #hash((default . #hasheq((checksum . "eed4628a9553e103e062006655a16f5dc68ee7cd") (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-required") (source_url . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-required"))))))) ("drcomplete-user-defined" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drcomplete-user-defined.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drcomplete-user-defined.txt"))) (checksum . "eed4628a9553e103e062006655a16f5dc68ee7cd") (checksum-error . #f) (collection . "drcomplete-user-defined") (conflicts . ()) (date-added . 1551450799) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "syntax-color-lib" "drcomplete-base" "rackunit-lib")) (description . "A DrRacket plugin for autocomplete for user-defined identifiers.") (implies . ()) (last-checked . 1632902963) (last-edit . 1551770864) (last-updated . 1632816561) (modules . ((lib "drcomplete-user-defined/tests/test.rkt") (lib "drcomplete-user-defined/private/expansion.rkt") (lib "drcomplete-user-defined/private/main.rkt") (lib "drcomplete-user-defined/tool.rkt"))) (name . "drcomplete-user-defined") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t))) (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-user-defined") (tags . ("DrRacket")) (versions . #hash((default . #hasheq((checksum . "eed4628a9553e103e062006655a16f5dc68ee7cd") (source . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-user-defined") (source_url . "https://github.com/yjqww6/drcomplete.git?path=drcomplete-user-defined"))))))) ("drdr" . #hash((author . "jay@racket-lang.org") (authors . ("jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drdr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drdr.txt"))) (checksum . "a4efefc74adfdfabe465895fe055645e259394f0") (checksum-error . #f) (collection . "drdr") (conflicts . ()) (dependencies . ("base" "eli-tester" "net-lib" "web-server-lib" "web-server-test" "job-queue-lib" "at-exp-lib" "scheme-lib" "scribble-lib")) (description . "DrDr, Racket's continuous integration system") (implies . ()) (last-checked . 1632902963) (last-edit . 1417307461) (last-updated . 1632888556) (modules . ((lib "drdr/scm.rkt") (lib "drdr/run-collect.rkt") (lib "drdr/set-browser.rkt") (lib "drdr/sema.rkt") (lib "drdr/path-utils.rkt") (lib "drdr/notify.rkt") (lib "drdr/formats.rkt") (lib "drdr/gather-logs.rkt") (lib "drdr/status-analyze.rkt") (lib "drdr/time-file.rkt") (lib "drdr/diff.rkt") (lib "drdr/cache.rkt") (lib "drdr/make-archive-lib.rkt") (lib "drdr/make-archive.rkt") (lib "drdr/diffcmd.rkt") (lib "drdr/replay-log.rkt") (lib "drdr/tests/run-collect.rkt") (lib "drdr/plt-build.rkt") (lib "drdr/archive.rkt") (lib "drdr/archive-repair.rkt") (lib "drdr/render.rkt") (lib "drdr/cc.rkt") (lib "drdr/dirstruct.rkt") (lib "drdr/retry.rkt") (lib "drdr/status.rkt") (lib "drdr/job-queue.rkt") (lib "drdr/time-check.rkt") (lib "drdr/svn.rkt") (lib "drdr/main.rkt") (lib "drdr/list-count.rkt") (lib "drdr/monitor-scm.rkt") (lib "drdr/rendering.rkt") (lib "drdr/time.rkt") (lib "drdr/rewriting.rkt") (lib "drdr/archive-test.rkt") (lib "drdr/config.rkt") (lib "drdr/tests/loud.rkt") (lib "drdr/metadata.rkt") (lib "drdr/analyze.rkt") (lib "drdr/monitor-drdr.rkt") (lib "drdr/replay.rkt"))) (name . "drdr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:jay@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/drdr") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a4efefc74adfdfabe465895fe055645e259394f0") (source . "git://github.com/racket/drdr") (source_url . "http://github.com/racket/drdr/tree/master"))))))) ("drdr2" . #hash((author . "jay@racket-lang.org") (authors . ("jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drdr2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drdr2.txt"))) (checksum . "680818e5cfa7d48de02bf1a027f78d766498a48d") (checksum-error . #f) (collection . "drdr2") (conflicts . ()) (dependencies . ("base" "compatibility-lib" "sandbox-lib" "eli-tester")) (description . "Prototype replacement for DrDr") (implies . ()) (last-checked . 1632902964) (last-edit . 1417307461) (last-updated . 1571930119) (modules . ((lib "drdr2/tests/slave.rkt") (lib "drdr2/lib/scm.rkt") (lib "drdr2/monitor/monitor.rkt") (lib "drdr2/tests/pqueue.rkt") (lib "drdr2/tests/db.rkt") (lib "drdr2/renderer/renderer.rkt") (lib "drdr2/analyzer/analyzer.rkt") (lib "drdr2/scheduler/scheduler.rkt") (lib "drdr2/lib/db.rkt") (lib "drdr2/slave/slave.rkt") (lib "drdr2/monitor/scm.rkt") (lib "drdr2/master/master.rkt") (lib "drdr2/lib/pqueue.rkt"))) (name . "drdr2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:jay@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/drdr2") (tags . ()) (versions . #hash((default . #hasheq((checksum . "680818e5cfa7d48de02bf1a027f78d766498a48d") (source . "git://github.com/racket/drdr2") (source_url . "http://github.com/racket/drdr2/tree/master"))))))) ("dropbox" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dropbox" "doc/dropbox@dropbox/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dropbox.txt") (test-failure-log . "server/built/test-fail/dropbox.txt") (test-success-log . #f))) (checksum . "fc978c6c2feca00a74c4e5f9f7213a55585abe68") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "SDK for Dropbox") (implies . ()) (last-checked . 1632902964) (last-edit . 1374792929) (last-updated . 1502815932) (modules . ((lib "dropbox/tests.rkt") (lib "dropbox/dropbox.rkt") (lib "dropbox/main.rkt") (lib "dropbox/dropbox.scrbl"))) (name . "dropbox") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (API . #t) (author:stchang@racket-lang.org . #t) (dropbox . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "github://github.com/stchang/dropbox/master") (tags . ("API" "dropbox" "net" "web")) (versions . #hash((default . #hasheq((checksum . "fc978c6c2feca00a74c4e5f9f7213a55585abe68") (source . "github://github.com/stchang/dropbox/master") (source_url . "http://github.com/stchang/dropbox/tree/master"))))))) ("drracket" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tools" "doc/tools@drracket/index.html") ("main" "plt-installer" "doc/plt-installer@drracket/index.html") ("main" "browser" "doc/browser@drracket/index.html") ("main" "bug-report" "doc/bug-report@drracket/index.html") ("main" "drracket" "doc/drracket@drracket/index.html") ("main" "tool" "doc/tool@drracket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "data-lib" "compiler-lib" ("base" #:version "8.2.0.8") "planet-lib" "compatibility-lib" ("draw-lib" #:version "1.7") ("errortrace-lib" #:version "1.3") "macro-debugger-text-lib" "parser-tools-lib" "pconvert-lib" "pict-lib" "profile-lib" "sandbox-lib" ("scribble-lib" #:version "1.11") ("snip-lib" #:version "1.2") ("string-constants-lib" #:version "1.38") "typed-racket-lib" "wxme-lib" ("gui-lib" #:version "1.60") ("racket-index" #:version "1.2") ("racket-doc" #:version "1.1") "html-lib" "images-lib" ("icons" #:version "1.2") ("typed-racket-more" #:version "1.12") "trace" ("macro-debugger" #:version "1.1") "net-lib" "tex-table" "htdp-lib" ("drracket-plugin-lib" #:version "1.1") "gui-pkg-manager-lib" "drracket-tool-lib" "drracket-tool-doc" "pict-snip-lib" "option-contract-lib" "syntax-color-lib" "quickscript" "simple-tree-text-markup-lib" "mzscheme-doc" "net-doc" "planet-doc" "compatibility-doc" "string-constants-doc" "draw-doc" "errortrace-doc" "gui-doc" "pict-doc" "profile-doc" "r5rs-doc" "at-exp-lib" "rackunit-lib")) (description . "The DrRacket programming environment") (implies . ("drracket-plugin-lib" "drracket-tool-lib")) (last-checked . 1632902964) (last-edit . 1481905442) (last-updated . 1631938155) (modules . ((lib "drracket/tool-lib.rkt") (lib "drracket/private/get-extend.rkt") (lib "drracket/private/mkheart.rkt") (lib "drracket/private/syncheck/local-member-names.rkt") (lib "drracket/sprof.rkt") (lib "browser/bullet-snip.rkt") (lib "drracket/private/syncheck/gui.rkt") (lib "drracket/private/tools-drs.rkt") (lib "browser/tool.rkt") (lib "help/private/save-bug-report.rkt") (lib "scribblings/drracket/status.scrbl") (lib "drracket/private/expanding-place.rkt") (lib "browser/private/html.rkt") (lib "scribblings/drracket/prefs.scrbl") (lib "drracket/private/eval.rkt") (lib "drracket/private/in-irl-namespace.rkt") (lib "scribblings/drracket/menus.scrbl") (lib "drracket/private/tool-contract-language.rkt") (lib "scribblings/drracket/interface-ref.scrbl") (lib "scribblings/tools/modes.scrbl") (lib "browser/private/btree.rkt") (lib "drracket/private/number-snip.rkt") (lib "browser/htmltext.rkt") (lib "drracket/private/module-language-tools.rkt") (lib "scribblings/tools/tool-lib-extracts.rkt") (lib "drracket/private/insert-large-letters.rkt") (lib "drracket/private/ts.rkt") (lib "drracket/private/stack-checkpoint.rkt") (lib "scribblings/tools/rep.scrbl") (lib "drracket/private/honu-logo.rkt") (lib "scribblings/drracket/incremental-keybindings.rkt") (lib "drracket/private/debug.rkt") (lib "drracket/private/init.rkt") (lib "drracket/private/help-desk.rkt") (lib "scribblings/tools/language.scrbl") (lib "setup/plt-installer-unit.rkt") (lib "drracket/private/stick-figures.rkt") (lib "drracket/private/bindings-browser.rkt") (lib "scribble/tools/private/mk-drs-bitmaps.rkt") (lib "version/tool.scrbl") (lib "scribblings/tools/debug.scrbl") (lib "scribblings/drracket/drracket.scrbl") (lib "scribblings/tools/doc-util.rkt") (lib "drracket/private/frame-icon.rkt") (lib "browser/browser.rkt") (lib "scribblings/drracket/interface-essentials.scrbl") (lib "drracket/private/tooltip.rkt") (lib "help/bug-report.rkt") (lib "scribble/tools/drracket-buttons.rkt") (lib "scribblings/tools/help-desk.scrbl") (lib "drracket/private/module-language.rkt") (lib "repo-time-stamp/stamp.rkt") (lib "scribblings/tools/frame.scrbl") (lib "drracket/private/syncheck-debug.rkt") (lib "drracket/private/insulated-read-language.rkt") (lib "scribblings/drracket/common.rkt") (lib "scribblings/drracket/example.rkt") (lib "drracket/private/named-undefined.rkt") (lib "scribblings/drracket/printing.scrbl") (lib "drracket/private/recon.rkt") (lib "drracket/private/interface.rkt") (lib "browser/external.rkt") (lib "drracket/private/syncheck/online-comp.rkt") (lib "drracket/arrow.rkt") (lib "drracket/drracket.rkt") (lib "drracket/private/language-configuration.rkt") (lib "drracket/private/launcher-bootstrap.rkt") (lib "drracket/private/app.rkt") (lib "scribblings/tools/eval.scrbl") (lib "drracket/private/wrap-tool-inputs.rkt") (lib "scribblings/tools/tracing.scrbl") (lib "scribblings/tools/common.rkt") (lib "drscheme/private/number-snip.rkt") (lib "drracket/private/syncheck/intf.rkt") (lib "drracket/private/language.rkt") (lib "drracket/private/label-frame-mred.rkt") (lib "drracket/acks.rkt") (lib "drracket/private/link.rkt") (lib "browser/browser-sig.rkt") (lib "gui-debugger/marks.rkt") (lib "macro-debugger/tool.rkt") (lib "drracket/private/compiled-dir.rkt") (lib "browser/private/sig.rkt") (lib "drracket/private/launcher-mred-bootstrap.rkt") (lib "drracket/private/ellipsis-snip.rkt") (lib "drracket/private/embedded-snip-utils.rkt") (lib "drracket/private/suffix.rkt") (lib "gui-debugger/load-sandbox.rkt") (lib "scribblings/drracket/languages.scrbl") (lib "drracket/private/rep.rkt") (lib "scribblings/tools/unit.scrbl") (lib "drracket/private/module-browser.rkt") (lib "drracket/private/local-member-names.rkt") (lib "browser/private/entity-names.rkt") (lib "drracket/syncheck.rkt") (lib "scribblings/drracket/files.scrbl") (lib "browser/browser.scrbl") (lib "drracket/private/modes.rkt") (lib "drracket/private/pict-snip.rkt") (lib "drracket/private/parse-logger-args.rkt") (lib "browser/main.rkt") (lib "scribblings/drracket/extending.scrbl") (lib "scribblings/drracket/indentation-table.rkt") (lib "setup/plt-installer-sig.rkt") (lib "drracket/private/key.rkt") (lib "drscheme/tool-lib.rkt") (lib "drracket/private/unit.rkt") (lib "drracket/main.rkt") (lib "drracket/default-code-style.rkt") (lib "browser/tests/test-docs-complete.rkt") (lib "drracket/private/dock-icon.rkt") (lib "drracket/private/frame.rkt") (lib "scribblings/tools/module-language-tools.scrbl") (lib "drracket/private/multi-file-search.rkt") (lib "gui-debugger/debug-tool.rkt") (lib "setup/plt-installer.rkt") (lib "drracket/private/text.rkt") (lib "scribblings/tools/example-src.rkt") (lib "drracket/private/ada.rkt") (lib "scribblings/tools/module-language.scrbl") (lib "drracket/private/profile-drs.rkt") (lib "drracket/private/palaka.rkt") (lib "drracket/private/dates.rkt") (lib "drracket/private/launcher-mz-bootstrap.rkt") (lib "browser/browser-unit.rkt") (lib "scribblings/tools/init.scrbl") (lib "scribblings/tools/get-slash-extend.scrbl") (lib "setup/plt-installer.scrbl") (lib "drscheme/drscheme.rkt") (lib "help/private/bug-report-controls.rkt") (lib "drracket/private/ellipsis-snip-wxme.rkt") (lib "drracket/private/syncheck/blueboxes-gui.rkt") (lib "help/private/buginfo.rkt") (lib "repo-time-stamp/time-stamp.rkt") (lib "scribblings/tools/language-configuration.scrbl") (lib "help/bug-report.scrbl") (lib "drracket/syncheck-drracket-button.rkt") (lib "browser/private/bullet.rkt") (lib "scribblings/tools/lang-tools.scrbl") (lib "browser/private/hyper.rkt") (lib "drracket/private/get-defs.rkt") (lib "gui-debugger/annotator.rkt") (lib "scribblings/drracket/make-indentation-table.rkt") (lib "drracket/private/eval-helpers-and-pref-init.rkt") (lib "drracket/private/tools.rkt") (lib "version/tool.rkt") (lib "drracket/private/language-object-contract.rkt") (lib "drracket/private/tracing.rkt") (lib "browser/private/option-snip.rkt") (lib "drracket/private/main.rkt") (lib "drracket/private/colored-errors.rkt") (lib "scribblings/drracket/keybindings.scrbl") (lib "drracket/private/drracket-normal.rkt") (lib "scribblings/tools/tools.scrbl") (lib "drscheme/main.rkt") (lib "drracket/private/font.rkt"))) (name . "drracket") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "b34454171f2ef158d367e687e19fe2e4f44ab2ff") (source . "git://github.com/racket/drracket/?path=drracket") (source_url . "git://github.com/racket/drracket/?path=drracket"))) ("5.3.4" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("drracket-ayu-mirage" . #hasheq((author . "oran.simhony@gmail.com") (authors . ("oran.simhony@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-ayu-mirage.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-ayu-mirage.txt"))) (checksum . "5271740c3f0089e3958647353c24b73a3a80e401") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1557150791) (dependencies . ("base")) (description . "🎨 An ayu mirage color scheme for DrRacket") (implies . ()) (last-checked . 1632902964) (last-edit . 1557150791) (last-updated . 1557155898) (modules . ()) (name . "drracket-ayu-mirage") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:oran.simhony@gmail.com . #t) (colorscheme . #t) (ring:1 . #t))) (source . "https://github.com/oransimhony/drracket-ayu-mirage.git") (tags . ("colorscheme" "DrRacket")) (versions . #hash((default . #hasheq((checksum . "5271740c3f0089e3958647353c24b73a3a80e401") (source . "https://github.com/oransimhony/drracket-ayu-mirage.git") (source_url . "https://github.com/oransimhony/drracket-ayu-mirage.git"))))))) ("drracket-cmdline-args" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "drracket-cmdline-args" "doc/drracket-cmdline-args@drracket-cmdline-args/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-cmdline-args.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-cmdline-args.txt"))) (checksum . "d0b3806a1ebd38dad22cac27b479ab7254a5bf33") (checksum-error . #f) (collection . "drracket-cmdline-args") (conflicts . ()) (date-added . 1594575496) (dependencies . ("drracket-plugin-lib" "gui-lib" "shlex" "base" "scribble-lib" "racket-doc")) (description . "Accessible command-line arguments for DrRacket") (implies . ()) (last-checked . 1632902965) (last-edit . 1594631770) (last-updated . 1615249390) (modules . ((lib "drracket-cmdline-args/scribblings/drracket-cmdline-args.scrbl") (lib "drracket-cmdline-args/tool.rkt"))) (name . "drracket-cmdline-args") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (command-line . #t) (drracket . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/drracket-cmdline-args.git") (tags . ("command-line" "drracket")) (versions . #hash((default . #hasheq((checksum . "d0b3806a1ebd38dad22cac27b479ab7254a5bf33") (source . "https://github.com/sorawee/drracket-cmdline-args.git") (source_url . "https://github.com/sorawee/drracket-cmdline-args.git"))))))) ("drracket-custom-keybindings" . #hasheq((author . "aowens5189@gmail.com") (authors . ("aowens5189@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "kb-base" "doc/kb-base@drracket-custom-keybindings/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-custom-keybindings.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-custom-keybindings.txt"))) (checksum . "ea5e6bcc52021624bf98615f2c447fc4d61a7ad4") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1621733047) (dependencies . ("rackunit-lib" "base" "drracket-plugin-lib" "gui-lib" "plai-lib" "redex-gui-lib" "gui-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A plugin and language for implementing macro-specific keybinding extensions for DrRacket") (implies . ()) (last-checked . 1632902965) (last-edit . 1621733047) (last-updated . 1622073612) (modules . ((lib "drracket-custom-keybindings/handler.rkt") (lib "kb-base/kb-base/example-macros.rkt") (lib "tests/kb-base/error-tests.rkt") (lib "tests/kb-base/operations-tests.rkt") (lib "kb-base/kb-base/interpreter.rkt") (lib "kb-base/kb-base/operations.rkt") (lib "tests/kb-base/well-formed.rkt") (lib "drracket-custom-keybindings/custom-keybinding-tool.rkt") (lib "kb-base/kb-base/helpers.rkt") (lib "tests/kb-base/example-keybindings/plai.rkt") (lib "kb-base/kb-base/kb-expr.rkt") (lib "kb-base/test-utils.rkt") (lib "kb-base/scribblings/kb-base.scrbl") (lib "kb-base/main.rkt") (lib "tests/kb-base/example-keybindings/misc-racket.rkt") (lib "tests/kb-base/keybinding-tests.rkt") (lib "tests/kb-base/example-keybindings/contracts.rkt"))) (name . "drracket-custom-keybindings") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (DrRacket . #t) (author:aowens5189@gmail.com . #t) (ide . #t) (ring:1 . #t))) (source . "https://github.com/aowens-21/drracket-custom-keybindings.git") (tags . ("DrRacket" "ide")) (versions . #hash((default . #hasheq((checksum . "ea5e6bcc52021624bf98615f2c447fc4d61a7ad4") (source . "https://github.com/aowens-21/drracket-custom-keybindings.git") (source_url . "https://github.com/aowens-21/drracket-custom-keybindings.git"))))))) ("drracket-cyberpunk" . #hasheq((author . "scott@thinkmoore.net") (authors . ("scott@thinkmoore.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-cyberpunk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-cyberpunk.txt"))) (checksum . "65d2ccc304b2f1d81423f78f9330a314497f8aae") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632902966) (last-edit . 1457033684) (last-updated . 1502815938) (modules . ()) (name . "drracket-cyberpunk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (DrRacket . #t) (author:scott@thinkmoore.net . #t) (colorscheme . #t) (ring:1 . #t))) (source . "git://github.com/thinkmoore/drracket-cyberpunk.git") (tags . ("colorscheme" "DrRacket")) (versions . #hash((default . #hasheq((checksum . "65d2ccc304b2f1d81423f78f9330a314497f8aae") (source . "git://github.com/thinkmoore/drracket-cyberpunk.git") (source_url . "http://github.com/thinkmoore/drracket-cyberpunk.git/tree/master"))))))) ("drracket-material" . #hasheq((author . "oeplse@gmail.com") (authors . ("oeplse@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-material.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-material.txt"))) (checksum . "560b77fffe55bfc06b3cce6416cbbdda759dd16f") (checksum-error . #f) (collection . "racket-material") (conflicts . ()) (dependencies . ("base")) (description . "This package adds a Material colorscheme to DrRacket.") (implies . ()) (last-checked . 1632902966) (last-edit . 1521907708) (last-updated . 1521911795) (modules . ()) (name . "drracket-material") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:oeplse@gmail.com . #t) (colorscheme . #t) (material . #t) (ring:1 . #t))) (source . "https://github.com/turbinenreiter/drracket-material.git") (tags . ("colorscheme" "material")) (versions . #hash((default . #hasheq((checksum . "560b77fffe55bfc06b3cce6416cbbdda759dd16f") (source . "https://github.com/turbinenreiter/drracket-material.git") (source_url . "https://github.com/turbinenreiter/drracket-material.git"))))))) ("drracket-one-dark" . #hasheq((author . "joao.brilhante@outlook.com") (authors . ("joao.brilhante@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-one-dark.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-one-dark.txt"))) (checksum . "7b9dbd998e8976f37f98cf1f8fa25c4f4631dcef") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1614955494) (dependencies . ("base")) (description . "Atom's iconic One Dark color scheme for DrRacket!") (implies . ()) (last-checked . 1632902966) (last-edit . 1614956544) (last-updated . 1614961495) (modules . ()) (name . "drracket-one-dark") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:joao.brilhante@outlook.com . #t) (colorscheme . #t) (drracket . #t) (ring:1 . #t))) (source . "https://github.com/JoaoBrlt/drracket-one-dark.git") (tags . ("colorscheme" "drracket")) (versions . #hash((default . #hasheq((checksum . "7b9dbd998e8976f37f98cf1f8fa25c4f4631dcef") (source . "https://github.com/JoaoBrlt/drracket-one-dark.git") (source_url . "https://github.com/JoaoBrlt/drracket-one-dark.git"))))))) ("drracket-paredit" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-paredit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-paredit.txt"))) (checksum . "b2272896fcdba7e1f2fae7f0f3ecf0043252a10f") (checksum-error . #f) (collection . "drracket-paredit") (conflicts . ()) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "srfi-lib")) (description . "paredit keybindings for DrRacket") (implies . ()) (last-checked . 1632902967) (last-edit . 1388410593) (last-updated . 1604136124) (modules . ((lib "drracket-paredit/tool.rkt") (lib "drracket-paredit/paredit.rkt"))) (name . "drracket-paredit") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t))) (source . "github://github.com/yjqww6/drracket-paredit/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b2272896fcdba7e1f2fae7f0f3ecf0043252a10f") (source . "github://github.com/yjqww6/drracket-paredit/master") (source_url . "http://github.com/yjqww6/drracket-paredit/tree/master"))))))) ("drracket-plugin-lib" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib")) (description . "DrRacket's plugin API") (implies . ()) (last-checked . 1632902967) (last-edit . 1417659583) (last-updated . 1631938160) (modules . ((lib "drracket/private/drsig.rkt") (lib "drscheme/tool.rkt") (lib "drracket/tool.rkt") (lib "lang/debugger-language-interface.rkt"))) (name . "drracket-plugin-lib") (ring . 0) (search-terms . #hasheq((author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "b34454171f2ef158d367e687e19fe2e4f44ab2ff") (source . "git://github.com/racket/drracket/?path=drracket-plugin-lib") (source_url . "git://github.com/racket/drracket/?path=drracket-plugin-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("drracket-red" . #hasheq((author . "jagen315@gmail.com") (authors . ("jagen315@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-red.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-red.txt"))) (checksum . "06030dbc0451476ba652db86e19e737de6e1d9a1") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1620543867) (dependencies . ("base")) (description . "VsCode Red Theme for DrRacket") (implies . ()) (last-checked . 1632902968) (last-edit . 1620543867) (last-updated . 1620622815) (modules . ()) (name . "drracket-red") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jagen315@gmail.com . #t) (drracket-theme . #t) (ring:1 . #t))) (source . "https://github.com/jagen31/drracket-red.git") (tags . ("drracket-theme")) (versions . #hash((default . #hasheq((checksum . "06030dbc0451476ba652db86e19e737de6e1d9a1") (source . "https://github.com/jagen31/drracket-red.git") (source_url . "https://github.com/jagen31/drracket-red.git"))))))) ("drracket-restore-workspace" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "drracket-restore-workspace" "doc/drracket-restore-workspace@drracket-restore-workspace/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-restore-workspace.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-restore-workspace.txt"))) (checksum . "76a7f64331fc2a85f0c26f1465cf0ce07a8a3fad") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1607287215) (dependencies . ("drracket-plugin-lib" "gui-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Restore workspace for DrRacket") (implies . ()) (last-checked . 1632902968) (last-edit . 1607287215) (last-updated . 1608088762) (modules . ((lib "drracket-restore-workspace/tool.rkt") (lib "drracket-restore-workspace/scribblings/drracket-restore-workspace.scrbl"))) (name . "drracket-restore-workspace") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (drracket . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/drracket-restore-workspace.git") (tags . ("drracket")) (versions . #hash((default . #hasheq((checksum . "76a7f64331fc2a85f0c26f1465cf0ce07a8a3fad") (source . "https://github.com/sorawee/drracket-restore-workspace.git") (source_url . "https://github.com/sorawee/drracket-restore-workspace.git"))))))) ("drracket-scheme-dark-green" . #hasheq((author . "shu-hung.you@eecs.northwestern.edu") (authors . ("shu-hung.you@eecs.northwestern.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-scheme-dark-green.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-scheme-dark-green.txt"))) (checksum . "bda60667005f146ffa78b6435e10cd5731d7f211") (checksum-error . #f) (collection . "drracket-scheme-dark-green") (conflicts . ()) (dependencies . ("base")) (description . "This is a white-on-black dark green colorscheme for DrRacket.") (implies . ()) (last-checked . 1632902969) (last-edit . 1544213935) (last-updated . 1609661494) (modules . ()) (name . "drracket-scheme-dark-green") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:shu-hung.you@eecs.northwestern.edu . #t) (colorscheme . #t) (drracket . #t) (ring:1 . #t))) (source . "https://github.com/shhyou/drracket-scheme-dark-green.git") (tags . ("colorscheme" "drracket")) (versions . #hash((default . #hasheq((checksum . "bda60667005f146ffa78b6435e10cd5731d7f211") (source . "https://github.com/shhyou/drracket-scheme-dark-green.git") (source_url . "https://github.com/shhyou/drracket-scheme-dark-green.git"))))))) ("drracket-solarized" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-solarized.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-solarized.txt"))) (checksum . "9a90657bb320d4231c85dff96ceaef6a835c5c4f") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "Solarized colorscheme for Drracket") (implies . ()) (last-checked . 1632902969) (last-edit . 1381596999) (last-updated . 1596547519) (modules . ()) (name . "drracket-solarized") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:asumu@ccs.neu.edu . #t) (colorscheme . #t) (drracket . #t) (ring:1 . #t))) (source . "github://github.com/takikawa/drracket-solarized/master") (tags . ("colorscheme" "drracket")) (versions . #hash((default . #hasheq((checksum . "9a90657bb320d4231c85dff96ceaef6a835c5c4f") (source . "github://github.com/takikawa/drracket-solarized/master") (source_url . "http://github.com/takikawa/drracket-solarized/tree/master"))))))) ("drracket-test" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "htdp" "drracket" "racket-index" "scheme-lib" "at-exp-lib" "rackunit-lib" "compatibility-lib" "gui-lib" "htdp" "compiler-lib" "cext-lib" "string-constants-lib")) (description . "tests for drracket") (implies . ()) (last-checked . 1632902970) (last-edit . 1417659583) (last-updated . 1631938164) (modules . ((lib "tests/drracket/insert-large-letters-test.rkt") (lib "tests/drracket/snip/number-snip.rkt") (lib "tests/drracket/snip/collapsed-nested.rkt") (lib "tests/drracket/get-defs-test.rkt") (lib "tests/drracket/populate-compiled.rkt") (lib "tests/drracket/snip/2htdpimage3.rkt") (lib "tests/drracket/save-hash-lang-line.rkt") (lib "tests/drracket/private/module-lang-test-utils.rkt") (lib "tests/drracket/incremental-keybindings-test.rkt") (lib "tests/drracket/snip/commentbox.rkt") (lib "tests/drracket/syncheck-test.rkt") (lib "tests/drracket/image-and-comment-box.rkt") (lib "tests/drracket/snip/2htdpimage2.rkt") (lib "tests/drracket/snip/pict-snip3.rkt") (lib "tests/drracket/no-write-and-frame-leak.rkt") (lib "tests/drracket/tool-lib-and-sig.rkt") (lib "tests/drracket/snips.rkt") (lib "tests/drracket/snip/run-collapsed.rkt") (lib "tests/drracket/private/repl-test.rkt") (lib "tests/drracket/memory-log.rkt") (lib "tests/drracket/gui-debugger/tail.rkt") (lib "tests/drracket/leak-on-run.rkt") (lib "tests/drracket/snip/2htdpimage4.rkt") (lib "tests/drracket/time-keystrokes.rkt") (lib "tests/drracket/private/run-example-tool.rkt") (lib "tests/drracket/private/randomly-click.rkt") (lib "tests/drracket/module-browser.rkt") (lib "tests/drracket/private/drracket-test-util.rkt") (lib "tests/drracket/repl-test-raw.rkt") (lib "tests/drracket/snip/collapsed3.rkt") (lib "tests/help/test-gui-docs-complete.rkt") (lib "tests/drracket/module-browser-test1.rkt") (lib "tests/drracket/snip/image.rkt") (lib "tests/drracket/online-compilation-zo-creation.rkt") (lib "tests/drracket/gui-debugger/breaks.rkt") (lib "tests/drracket/gui-debugger/harness.rkt") (lib "tests/drracket/autosave-recovery-gui.rkt") (lib "tests/drracket/hash-lang-extensions.rkt") (lib "tests/drracket/snip/pict-snip.rkt") (lib "tests/drracket/snip/collapsed.rkt") (lib "tests/drracket/test-docs-complete.rkt") (lib "tests/drracket/module-browser-test2.rkt") (lib "tests/drracket/snip/collapsed2.rkt") (lib "tests/drracket/snip-run-all.rkt") (lib "tests/drracket/example-tool.rkt") (lib "tests/drracket/private/easter-egg-lib.rkt") (lib "tests/drracket/snip/srcloc-snip.rkt") (lib "tests/drracket/stepper-test.rkt") (lib "tests/drracket/teaching-lang-executable-creation.rkt") (lib "tests/drracket/teachpack.rkt") (lib "tests/drracket/language-test.rkt") (lib "tests/drracket/teaching-lang-save-file.rkt") (lib "tests/drracket/repl-test-debug.rkt") (lib "tests/drracket/gui-debugger/in-drr.rkt") (lib "tests/drracket/syncheck-eval-compile-time.rkt") (lib "tests/drracket/snip/2htdpimage.rkt") (lib "tests/drracket/teaching-lang-coverage.rkt") (lib "tests/drracket/teaching-lang-sharing-modules.rkt") (lib "tests/drracket/io.rkt") (lib "tests/drracket/follow-log.rkt") (lib "tests/drracket/hangman.rkt") (lib "tests/drracket/easter-egg.rkt") (lib "tests/drracket/module-lang-test.rkt") (lib "tests/drracket/test-engine-test.rkt") (lib "tests/drracket/errortrace-stacks.rkt") (lib "tests/drracket/snip/pict-snip2.rkt") (lib "tests/drracket/private/gui.rkt") (lib "tests/drracket/gui-debugger/quote-syntax.rkt") (lib "tests/drracket/repl-test-misc.rkt") (lib "tests/drracket/repl-test-debugprofile.rkt") (lib "tests/drracket/sample-solutions-one-window.rkt") (lib "tests/drracket/snip/color-red.rkt") (lib "tests/drracket/private/no-fw-test-util.rkt"))) (name . "drracket-test") (ring . 0) (search-terms . #hasheq((author:robby@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "b34454171f2ef158d367e687e19fe2e4f44ab2ff") (source . "git://github.com/racket/drracket/?path=drracket-test") (source_url . "git://github.com/racket/drracket/?path=drracket-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("drracket-tool" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("drracket-tool-lib" "drracket-tool-doc")) (description . "Programmatic interface to some IDE tools that DrRacket supports") (implies . ("drracket-tool-lib" "drracket-tool-doc")) (last-checked . 1632902970) (last-edit . 1417659583) (last-updated . 1631938166) (modules . ()) (name . "drracket-tool") (ring . 0) (search-terms . #hasheq((author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "b34454171f2ef158d367e687e19fe2e4f44ab2ff") (source . "git://github.com/racket/drracket/?path=drracket-tool") (source_url . "git://github.com/racket/drracket/?path=drracket-tool"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("drracket-tool-doc" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "drracket-tools" "doc/drracket-tools@drracket-tool-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "drracket-tool-lib" "racket-doc" "gui-doc" "gui-lib" "drracket")) (description . "Docs for the programmatic interface to some IDE tools that DrRacket supports") (implies . ()) (last-checked . 1632902971) (last-edit . 1417659583) (last-updated . 1631938168) (modules . ((lib "scribblings/drracket-tools/drracket-tools.scrbl"))) (name . "drracket-tool-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "b34454171f2ef158d367e687e19fe2e4f44ab2ff") (source . "git://github.com/racket/drracket/?path=drracket-tool-doc") (source_url . "git://github.com/racket/drracket/?path=drracket-tool-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("drracket-tool-lib" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.10") "scribble-lib" ("string-constants-lib" #:version "1.12") "scribble-lib" "racket-index" "gui-lib" "at-exp-lib" "rackunit-lib")) (description . "Code implementing programmatic interfaces to some IDE tools that DrRacket supports") (implies . ()) (last-checked . 1632902971) (last-edit . 1417659583) (last-updated . 1631938170) (modules . ((lib "drracket/private/rectangle-intersect.rkt") (lib "drracket/private/syncheck/annotate.rkt") (lib "drracket/private/syncheck/syncheck-local-member-names.rkt") (lib "drracket/get-module-path.rkt") (lib "drracket/private/standalone-module-browser.rkt") (lib "drracket/private/syncheck/xref.rkt") (lib "drracket/module-browser.rkt") (lib "drracket/check-syntax.rkt") (lib "drracket/private/syncheck/syncheck-intf.rkt") (lib "drracket/private/syncheck/traversals.rkt") (lib "drracket/private/syncheck/colors.rkt") (lib "drracket/private/raco-module-browser.rkt") (lib "drracket/find-module-path-completions.rkt") (lib "drracket/private/syncheck/contract-traversal.rkt"))) (name . "drracket-tool-lib") (ring . 0) (search-terms . #hasheq((author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "b34454171f2ef158d367e687e19fe2e4f44ab2ff") (source . "git://github.com/racket/drracket/?path=drracket-tool-lib") (source_url . "git://github.com/racket/drracket/?path=drracket-tool-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("drracket-tool-test" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "drracket-tool-lib")) (description . "Tests for IDE tools that DrRacket supports") (implies . ()) (last-checked . 1632902971) (last-edit . 1417659583) (last-updated . 1631938172) (modules . ((lib "tests/check-syntax/contract-check-syntax.rkt") (lib "tests/check-syntax/syncheck-direct.rkt") (lib "tests/check-syntax/soup.rkt"))) (name . "drracket-tool-test") (ring . 0) (search-terms . #hasheq((author:robby@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "b34454171f2ef158d367e687e19fe2e4f44ab2ff") (source . "git://github.com/racket/drracket/?path=drracket-tool-test") (source_url . "git://github.com/racket/drracket/?path=drracket-tool-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("drracket-vim-tool" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-vim-tool.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-vim-tool.txt"))) (checksum . "c347e8f8dcb0d89efd44755587b108e1f420912a") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "data-lib" "drracket-plugin-lib" "rackunit-lib" "at-exp-lib")) (description . "DrRacket plugin that simulates vim keybindings") (implies . ()) (last-checked . 1632902971) (last-edit . 1438046359) (last-updated . 1547762250) (modules . ((lib "drracket-vim-tool/private/commands.rkt") (lib "drracket-vim-tool/tests/unit-tests.rkt") (lib "drracket-vim-tool/private/utils.rkt") (lib "drracket-vim-tool/tests/utils.rkt") (lib "drracket-vim-tool/tool.rkt") (lib "drracket-vim-tool/private/text.rkt"))) (name . "drracket-vim-tool") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:asumu@ccs.neu.edu . #t) (drracket . #t) (editor . #t) (ring:1 . #t) (vim . #t))) (source . "git://github.com/takikawa/drracket-vim-tool") (tags . ("drracket" "editor" "vim")) (versions . #hash(("6.0.1" . #hasheq((checksum . "0d6725c85d732e7a6b92e3dc6f1f5d98b92ebd2c") (source . "git://github.com/takikawa/drracket-vim-tool#6.2") (source_url . "http://github.com/takikawa/drracket-vim-tool/tree/master#6.2"))) (default . #hasheq((checksum . "c347e8f8dcb0d89efd44755587b108e1f420912a") (source . "git://github.com/takikawa/drracket-vim-tool") (source_url . "http://github.com/takikawa/drracket-vim-tool/tree/master"))) ("6.2.1" . #hasheq((checksum . "0d6725c85d732e7a6b92e3dc6f1f5d98b92ebd2c") (source . "git://github.com/takikawa/drracket-vim-tool#6.2") (source_url . "http://github.com/takikawa/drracket-vim-tool/tree/master#6.2"))) ("6.2" . #hasheq((checksum . "0d6725c85d732e7a6b92e3dc6f1f5d98b92ebd2c") (source . "git://github.com/takikawa/drracket-vim-tool#6.2") (source_url . "http://github.com/takikawa/drracket-vim-tool/tree/master#6.2"))) ("6.0" . #hasheq((checksum . "0d6725c85d732e7a6b92e3dc6f1f5d98b92ebd2c") (source . "git://github.com/takikawa/drracket-vim-tool#6.2") (source_url . "http://github.com/takikawa/drracket-vim-tool/tree/master#6.2"))) ("6.1" . #hasheq((checksum . "0d6725c85d732e7a6b92e3dc6f1f5d98b92ebd2c") (source . "git://github.com/takikawa/drracket-vim-tool#6.2") (source_url . "http://github.com/takikawa/drracket-vim-tool/tree/master#6.2"))))))) ("drracket-workspaces" . #hasheq((author . "kbtpodifo@gmail.com") (authors . ("kbtpodifo@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-workspaces.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-workspaces.txt"))) (checksum . "ec3eff8e7b7dc5ca7f59209f188ba843d5c827d2") (checksum-error . #f) (collection . "drracket-workspaces") (conflicts . ()) (date-added . 1619148339) (dependencies . ("base" "drracket-plugin-lib" "gui-lib")) (description . "Save and reopen groups of files in DrRacket as workspaces.") (implies . ()) (last-checked . 1632902973) (last-edit . 1619148339) (last-updated . 1619149412) (modules . ((lib "drracket-workspaces/tool.rkt") (lib "drracket-workspaces/preferences.rkt"))) (name . "drracket-workspaces") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:kbtpodifo@gmail.com . #t) (drracket . #t) (ring:1 . #t))) (source . "https://github.com/stardust66/drracket-workspaces.git#main") (tags . ("drracket")) (versions . #hash((default . #hasheq((checksum . "ec3eff8e7b7dc5ca7f59209f188ba843d5c827d2") (source . "https://github.com/stardust66/drracket-workspaces.git#main") (source_url . "https://github.com/stardust66/drracket-workspaces.git#main"))))))) ("drracket-zenburn" . #hasheq((author . "andrei.formiga@gmail.com") (authors . ("andrei.formiga@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/drracket-zenburn.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/drracket-zenburn.txt"))) (checksum . "baec7d09cf9dad88303f123d30626fc466b32c81") (checksum-error . #f) (collection . "drracket-zenburn") (conflicts . ()) (dependencies . ("base")) (description . "The Zenburn colorscheme for DrRacket.") (implies . ()) (last-checked . 1632902974) (last-edit . 1494609821) (last-updated . 1502815948) (modules . ()) (name . "drracket-zenburn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DrRacket . #t) (author:andrei.formiga@gmail.com . #t) (colorscheme . #t) (ring:1 . #t))) (source . "git://github.com/tautologico/drracket-zenburn") (tags . ("colorscheme" "DrRacket")) (versions . #hash((default . #hasheq((checksum . "baec7d09cf9dad88303f123d30626fc466b32c81") (source . "git://github.com/tautologico/drracket-zenburn") (source_url . "http://github.com/tautologico/drracket-zenburn/tree/master"))))))) ("ds-store" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "ds-store") (conflicts . ()) (dependencies . ("ds-store-lib" "ds-store-doc" "base")) (description . "Libraries for manipulating .DS_Store files") (implies . ("ds-store-lib" "ds-store-doc")) (last-checked . 1632902975) (last-edit . 1417659583) (last-updated . 1571868970) (modules . ()) (name . "ds-store") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "bb352d6c57a101aa0455db905e87bef7f121e9fc") (source . "git://github.com/racket/ds-store/?path=ds-store") (source_url . "git://github.com/racket/ds-store/?path=ds-store"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("ds-store-doc" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ds-store" "doc/ds-store@ds-store-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "ds-store") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "ds-store-lib")) (description . "documentation part of ds-store") (implies . ()) (last-checked . 1632902975) (last-edit . 1417659583) (last-updated . 1571868971) (modules . ((lib "ds-store/ds-store.scrbl"))) (name . "ds-store-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "bb352d6c57a101aa0455db905e87bef7f121e9fc") (source . "git://github.com/racket/ds-store/?path=ds-store-doc") (source_url . "git://github.com/racket/ds-store/?path=ds-store-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("ds-store-lib" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "ds-store") (conflicts . ()) (dependencies . ("base")) (description . "implementation (no documentation) part of ds-store") (implies . ()) (last-checked . 1632902976) (last-edit . 1417659583) (last-updated . 1571868972) (modules . ((lib "ds-store/alias.rkt") (lib "ds-store/main.rkt"))) (name . "ds-store-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "bb352d6c57a101aa0455db905e87bef7f121e9fc") (source . "git://github.com/racket/ds-store/?path=ds-store-lib") (source_url . "git://github.com/racket/ds-store/?path=ds-store-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("dset" . #hasheq((author . "pnwamk@gmail.com") (authors . ("pnwamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dset" "doc/dset@dset/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dset.txt") (test-failure-log . "server/built/test-fail/dset.txt") (test-success-log . #f))) (checksum . "ce3581c73c42a3c8bbb6b4498325109fdf221c12") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "Deterministic Sets") (implies . ()) (last-checked . 1632902976) (last-edit . 1485368839) (last-updated . 1503081511) (modules . ((lib "tests/data/dset.rkt") (lib "data/dset/dset.scrbl") (lib "data/dset.rkt"))) (name . "dset") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pnwamk@gmail.com . #t) (data . #t) (ring:1 . #t))) (source . "git://github.com/pnwamk/dset.git") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "ce3581c73c42a3c8bbb6b4498325109fdf221c12") (source . "git://github.com/pnwamk/dset.git") (source_url . "http://github.com/pnwamk/dset.git/tree/master"))))))) ("dssl" . #hasheq((author . "jesse.tov@gmail.com") (authors . ("jesse.tov@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dssl" "doc/dssl@dssl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dssl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dssl.txt"))) (checksum . "bb5040d0a608a3b6f7f16d6ae725b24388f6aa6c") (checksum-error . #f) (collection . "dssl") (conflicts . ()) (dependencies . ("base" "htdp-lib" "scribble-lib" "racket-doc" "htdp-doc" "at-exp-lib" "sandbox-lib" "compatibility-doc")) (description . "Data Structures Student Language: an extension of ASL for easier imperative programming.") (implies . ()) (last-checked . 1632902976) (last-edit . 1510931056) (last-updated . 1502815950) (modules . ((lib "dssl/dssl.rkt") (lib "dssl/tests/mlang-test.rkt") (lib "dssl/scribblings/std-grammar.rkt") (lib "dssl/lang/reader.rkt") (lib "dssl/scribblings/common.rkt") (lib "dssl/main.rkt") (lib "dssl/scribblings/prim-ops.rkt") (lib "dssl/scribblings/dssl.scrbl") (lib "dssl/classes.rkt") (lib "dssl/tests/test.rkt"))) (name . "dssl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse.tov@gmail.com . #t) (data-structures . #t) (language . #t) (programming-languages . #t) (ring:1 . #t) (student . #t))) (source . "https://github.com/tov/dssl.git") (tags . ("data-structures" "language" "programming-languages" "student")) (versions . #hash((default . #hasheq((checksum . "bb5040d0a608a3b6f7f16d6ae725b24388f6aa6c") (source . "https://github.com/tov/dssl.git") (source_url . "https://github.com/tov/dssl.git"))))))) ("dssl2" . #hasheq((author . "stamourv@racket-lang.org jesse.tov@gmail.com") (authors . ("stamourv@racket-lang.org" "jesse.tov@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dssl2" "doc/dssl2@dssl2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dssl2.txt") (test-failure-log . "server/built/test-fail/dssl2.txt") (test-success-log . #f))) (checksum . "12644a53e347f48c641945a14c1d27101a899036") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1570395202) (dependencies . ("base" "gui-lib" "rackunit-lib" "parser-tools-lib" "plot-gui-lib" "plot-lib" "sandbox-lib" "snip-lib" "scribble-lib" "racket-doc")) (description . "A language for data structures students") (implies . ()) (last-checked . 1632902976) (last-edit . 1617645988) (last-updated . 1630602575) (modules . ((lib "dssl2/test/dssl2/even-huh.rkt") (lib "dssl2/lib/sbox_hash_dssl2.rkt") (lib "dssl2/test/grader/0_of_0_malicious.rkt") (lib "dssl2/test/dssl2/zero-huh.rkt") (lib "dssl2/scribblings/array.scrbl") (lib "dssl2/private/rte.rkt") (lib "dssl2/test/dssl2/comparisons.rkt") (lib "dssl2/test/dssl2/dll-nested-struct.rkt") (lib "dssl2/test/grader/0_of_0_loads_crashes.rkt") (lib "dssl2/test/dssl2/integer-div-mod.rkt") (lib "dssl2/private/util.rkt") (lib "dssl2/test/grader/0_of_0.rkt") (lib "dssl2/scribblings/lexical-syntax.scrbl") (lib "dssl2/test/dssl2/timeout-slow.rkt") (lib "dssl2/test/dssl2/float.rkt") (lib "dssl2/test/dssl2/def.rkt") (lib "dssl2/private/singletons.rkt") (lib "dssl2/scribblings/common.rkt") (lib "dssl2/private/drracket/indent.rkt") (lib "dssl2/test/dssl2/modulo.rkt") (lib "dssl2/test/dssl2/promise.rkt") (lib "dssl2/test/dssl2/timeout-slow-fail.rkt") (lib "dssl2/private/prims.rkt") (lib "dssl2/test/dssl2/str-huh.rkt") (lib "dssl2/test/dssl2/floor.rkt") (lib "dssl2/test/dssl2/plus-fail.rkt") (lib "dssl2/private/object.rkt") (lib "dssl2/private/errors.rkt") (lib "dssl2/test/grader/0_of_0_crashes.rkt") (lib "dssl2/private/drracket/comment.rkt") (lib "dssl2/test/dssl2/vector-comprehension.rkt") (lib "dssl2/scribblings/expression-forms.scrbl") (lib "dssl2/test/grader/2_of_3.rkt") (lib "dssl2/scribblings/util.rkt") (lib "dssl2/test/dssl2/object-printer.rkt") (lib "dssl2/test/dssl2/arithmetic.rkt") (lib "dssl2/private/syntax-classes.rkt") (lib "dssl2/test/dssl2/stream.rkt") (lib "dssl2/private/contract.rkt") (lib "dssl2/test/dssl2/if5.rkt") (lib "dssl2/test/dssl2/interface.rkt") (lib "dssl2/test/dssl2/positive-huh.rkt") (lib "dssl2/test/dssl2/print.rkt") (lib "dssl2/test/grader/0_of_0_cheater.rkt") (lib "dssl2/lang/reader.rkt") (lib "dssl2/test/dssl2/dll-nested-class.rkt") (lib "dssl2/test/dssl2/struct-set.rkt") (lib "dssl2/private/syntax.rkt") (lib "dssl2/test/dssl2/if6.rkt") (lib "dssl2/test/dssl2/num-huh.rkt") (lib "dssl2/test/dssl2/posn-assign-fail.rkt") (lib "dssl2/scribblings/statement-forms.scrbl") (lib "dssl2/test/dssl2/defstruct.rkt") (lib "dssl2/test/dssl2/ceiling.rkt") (lib "dssl2/private/drracket/color-lexer.rkt") (lib "dssl2/test/dssl2/continue.rkt") (lib "dssl2/test/dssl2/char.rkt") (lib "dssl2/test/dssl2/odd-huh.rkt") (lib "dssl2/scribblings/formal-grammar.scrbl") (lib "dssl2/private/struct.rkt") (lib "dssl2/private/operators.rkt") (lib "dssl2/test/dssl2/and.rkt") (lib "dssl2/grader.rkt") (lib "dssl2/test/dssl2/subtract.rkt") (lib "dssl2/test/dssl2/int-huh-ctc.rkt") (lib "dssl2/test/dssl2/map.rkt") (lib "dssl2/private/names.rkt") (lib "dssl2/private/interface.rkt") (lib "dssl2/test/dssl2/filter.rkt") (lib "dssl2/test/dssl2/container-interface.rkt") (lib "dssl2/test/dssl2/if3.rkt") (lib "dssl2/private/find-lib.rkt") (lib "dssl2/test/dssl2/or.rkt") (lib "dssl2/test/parser.rkt") (lib "dssl2/test/grader/1_of_1.rkt") (lib "dssl2/test/dssl2/error-message.rkt") (lib "dssl2/test/dssl2/test.rkt") (lib "dssl2/test/dssl2/if1.rkt") (lib "dssl2/language.rkt") (lib "dssl2/test/dssl2/range.rkt") (lib "dssl2/test/dssl2/implode.rkt") (lib "dssl2/scribblings/built-ins.scrbl") (lib "dssl2/private/class-system.rkt") (lib "dssl2/private/drracket/editor-helpers.rkt") (lib "dssl2/private/generic.rkt") (lib "dssl2/test/dssl2/lambda.rkt") (lib "dssl2/test/dssl2/expt.rkt") (lib "dssl2/test/dssl2/vector.rkt") (lib "dssl2/test/dssl2/cells.rkt") (lib "dssl2/private/lexer.rkt") (lib "dssl2/test/dssl2/if2.rkt") (lib "dssl2/test/dssl2/vector-oob-fail.rkt") (lib "dssl2/lib/stream.rkt") (lib "dssl2/test/dssl2/timeout.rkt") (lib "dssl2/test/dssl2/tail-defns.rkt") (lib "dssl2/private/parser.rkt") (lib "dssl2/test/dssl2/lt.rkt") (lib "dssl2/test/dssl2/float-huh.rkt") (lib "dssl2/lib/plot.rkt") (lib "dssl2/test/dssl2/negative-huh.rkt") (lib "dssl2/test/dssl2/bitwise-fail.rkt") (lib "dssl2/test/dssl2/max-min.rkt") (lib "dssl2/test/dssl2/parametric.rkt") (lib "dssl2/test/dssl2/object-equality.rkt") (lib "dssl2/private/defines.rkt") (lib "dssl2/main.rkt") (lib "dssl2/test/dssl2/posn.rkt") (lib "dssl2/private/printer.rkt") (lib "dssl2/test/dssl2/int.rkt") (lib "dssl2/test/dssl2/len.rkt") (lib "dssl2/test/dssl2/struct-init.rkt") (lib "dssl2/private/drracket/line-summary.rkt") (lib "dssl2/lib/fifo.rkt") (lib "dssl2/test/dssl2/print-cycle.rkt") (lib "dssl2/test/run-dssl2-tests.rkt") (lib "dssl2/test/dssl2/fifo-contract.rkt") (lib "dssl2/private/provide.rkt") (lib "dssl2/lib/uint64.rkt") (lib "dssl2/lib/round.rkt") (lib "dssl2/scribblings/contracts.scrbl") (lib "dssl2/lib/cons.rkt") (lib "dssl2/test/dssl2/default-timeout-slow-fail.rkt") (lib "dssl2/lib/adt.rkt") (lib "dssl2/test/dssl2/error-fail.rkt") (lib "dssl2/test/dssl2/strlen.rkt") (lib "dssl2/test/dssl2/while.rkt") (lib "dssl2/test/dssl2/proc-huh.rkt") (lib "dssl2/test/dssl2/plus.rkt") (lib "dssl2/test/grader.rkt") (lib "dssl2/test/dssl2/equal.rkt") (lib "dssl2/lib/dll.rkt") (lib "dssl2/test/dssl2/dll-for-each.rkt") (lib "dssl2/test/dssl2/class-posn.rkt") (lib "dssl2/test/dssl2/array.rkt") (lib "dssl2/scribblings/sbox_hash.scrbl") (lib "dssl2/test/dssl2/make-vector.rkt") (lib "dssl2/test/grader/2_of_2.rkt") (lib "dssl2/test/dssl2/format.rkt") (lib "dssl2/test/dssl2/file-io.rkt") (lib "dssl2/test/dssl2/cons-lib.rkt") (lib "dssl2/scribblings/dssl2.scrbl") (lib "dssl2/test/grader/0_of_0_infinite_loop.rkt") (lib "dssl2/test/dssl2/bitwise.rkt") (lib "dssl2/test/dssl2/if4.rkt") (lib "dssl2/test/dssl2/interface-import.rkt") (lib "dssl2/test/dssl2/vec-huh.rkt") (lib "dssl2/test/grader/1_of_2_out_of_memory.rkt") (lib "dssl2/test/dssl2/posn-fail.rkt") (lib "dssl2/test/dssl2/int-huh.rkt") (lib "dssl2/test/dssl2/struct-def.rkt") (lib "dssl2/test/dssl2/eq.rkt") (lib "dssl2/lib/array.rkt") (lib "dssl2/test/dssl2/default-timeout-slow.rkt") (lib "dssl2/test/dssl2/assert-error.rkt") (lib "dssl2/lib/promise.rkt") (lib "dssl2/private/drracket/test-helpers.rkt") (lib "dssl2/lib/tagged.rkt") (lib "dssl2/private/stxparams.rkt") (lib "dssl2/lib/sbox_hash.rkt") (lib "dssl2/scribblings/cons.scrbl") (lib "dssl2/test/grader/4_of_4_prints.rkt") (lib "dssl2/test/dssl2/break.rkt") (lib "dssl2/test/dssl2/int-huh-ctc-fail.rkt") (lib "dssl2/test/dssl2/matrix.rkt") (lib "dssl2/test/dssl2/struct-get.rkt") (lib "dssl2/test/dssl2/explode.rkt") (lib "dssl2/test/dssl2/fifo.rkt") (lib "dssl2/test/dssl2/dll.rkt"))) (name . "dssl2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse.tov@gmail.com . #t) (author:stamourv@racket-lang.org . #t) (data-structures . #t) (language . #t) (programming-languages . #t) (ring:1 . #t) (student . #t))) (source . "https://github.com/tov/dssl2.git#release") (tags . ("data-structures" "language" "programming-languages" "student")) (versions . #hash((default . #hasheq((checksum . "12644a53e347f48c641945a14c1d27101a899036") (source . "https://github.com/tov/dssl2.git#release") (source_url . "https://github.com/tov/dssl2.git#release"))))))) ("dtc" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/dtc.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "acf9da3f929806e48b79e28243576c3eb705a079") (checksum-error . #f) (collection . "dtc") (conflicts . ()) (date-added . 1571584321) (dependencies . ("base" "image-coloring" "https://github.com/thoughtstem/meta-engine.git?path=meta-engine" "rchess" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Languages for book Don't Teach Coding") (implies . ()) (last-checked . 1632902977) (last-edit . 1592865422) (last-updated . 1592953114) (modules . ((lib "dtc/English.rkt") (lib "dtc/frames/chess/chess.rkt") (lib "dtc/frames/animations.rkt") (lib "dtc/hello/animation.rkt") (lib "dtc/hello/animation/spin.rkt") (lib "dtc/hello/colors.rkt") (lib "dtc/frames/chess/games/napoleon-turk-1809.rkt") (lib "dtc/story/cats.rkt") (lib "dtc/hello/normal.rkt") (lib "dtc/complete.rkt") (lib "dtc/story+/images.rkt") (lib "dtc/main.rkt") (lib "dtc/frames/chess/base.rkt") (lib "dtc/story/images.rkt") (lib "dtc/story/basic.rkt") (lib "dtc/story+/cats.rkt") (lib "dtc/frames/animations/main.rkt") (lib "dtc/frames/cats.rkt") (lib "dtc/frames/chess/games.rkt") (lib "dtc/frames/story-images/main.rkt") (lib "dtc/frames/tic-tac-toe.rkt") (lib "dtc/scribblings/dtc.scrbl") (lib "dtc/frames/chess/main.rkt") (lib "dtc/frames/image-code.rkt") (lib "dtc/story/arrows/parsing.rkt"))) (name . "dtc") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/srfoster/dtc.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "acf9da3f929806e48b79e28243576c3eb705a079") (source . "https://github.com/srfoster/dtc.git") (source_url . "https://github.com/srfoster/dtc.git"))))))) ("dynamic-ffi" . #hasheq((author . "dbenoit@fedoraproject.org") (authors . ("dbenoit@fedoraproject.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dynamic-ffi" "doc/dynamic-ffi@dynamic-ffi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dynamic-ffi.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dynamic-ffi.txt"))) (checksum . "a1ab6473c8911226bd97fffa19b31c0bc641ca12") (checksum-error . #f) (collection . "dynamic-ffi") (conflicts . ()) (date-added . 1558910128) (dependencies . ("base" "rackunit-lib" "racket-doc" "rackunit-lib" "at-exp-lib" "scribble-lib" "scribble-doc")) (description . "Dynamically generate FFI bindings to C, and write C code inline in your Racket programs.") (implies . ()) (last-checked . 1632902977) (last-edit . 1581791914) (last-updated . 1581910312) (modules . ((lib "dynamic-ffi/cached.rkt") (lib "dynamic-ffi/main.rkt") (lib "dynamic-ffi/ffi.rkt") (lib "dynamic-ffi/test/inline.rkt") (lib "dynamic-ffi/runtime-paths.rkt") (lib "dynamic-ffi/common.rkt") (lib "dynamic-ffi/export.rkt") (lib "dynamic-ffi/scribblings/dynamic-ffi.scrbl") (lib "dynamic-ffi/meta.rkt") (lib "dynamic-ffi/make.rkt") (lib "dynamic-ffi/test/manual/generate.rkt") (lib "dynamic-ffi/unsafe.rkt") (lib "dynamic-ffi/test/typedef-struct.rkt") (lib "dynamic-ffi/inline.rkt") (lib "dynamic-ffi/test/libc.rkt"))) (name . "dynamic-ffi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (C . #t) (author:dbenoit@fedoraproject.org . #t) (dynamic . #t) (ffi . #t) (language . #t) (programming . #t) (ring:1 . #t))) (source . "https://github.com/dbenoit17/dynamic-ffi.git#release-v1.1") (tags . ("C" "dynamic" "ffi" "language" "programming")) (versions . #hash((default . #hasheq((checksum . "a1ab6473c8911226bd97fffa19b31c0bc641ca12") (source . "https://github.com/dbenoit17/dynamic-ffi.git#release-v1.1") (source_url . "https://github.com/dbenoit17/dynamic-ffi.git#release-v1.1"))))))) ("dynamic-xml" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dynamic-xml" "doc/dynamic-xml@dynamic-xml/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/dynamic-xml.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/dynamic-xml.txt"))) (checksum . "0e41c5b26fd0780604d0ecdc27d1e2c40faceb97") (checksum-error . #f) (collection . "dynamic-xml") (conflicts . ()) (date-added . 1586409840) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Apply keyword procedures in a given Racket namespace using X-expressions.") (implies . ()) (last-checked . 1632902978) (last-edit . 1586409840) (last-updated . 1588721847) (modules . ((lib "dynamic-xml/scribblings/dynamic-xml.scrbl") (lib "dynamic-xml/main.rkt"))) (name . "dynamic-xml") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sage@sagegerard.com . #t) (dynamic . #t) (keywords . #t) (ring:1 . #t) (x-expressions . #t) (xexpr . #t) (xml . #t))) (source . "https://github.com/zyrolasting/dynamic-xml.git") (tags . ("dynamic" "keywords" "x-expressions" "xexpr" "xml")) (versions . #hash((default . #hasheq((checksum . "0e41c5b26fd0780604d0ecdc27d1e2c40faceb97") (source . "https://github.com/zyrolasting/dynamic-xml.git") (source_url . "https://github.com/zyrolasting/dynamic-xml.git"))))))) ("dynext-lib" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "92b482002c86099184d7847fd943757021a41680") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Library for running a C compiler/linker") (implies . ()) (last-checked . 1632902978) (last-edit . 1419120696) (last-updated . 1583550394) (modules . ((lib "dynext/dynext-sig.rkt") (lib "dynext/dynext.rkt") (lib "dynext/dynext-unit.rkt") (lib "dynext/link.rkt") (lib "dynext/private/stdio.rkt") (lib "dynext/link-unit.rkt") (lib "dynext/private/cmdargs.rkt") (lib "dynext/compile-unit.rkt") (lib "dynext/link-sig.rkt") (lib "dynext/private/dirs.rkt") (lib "dynext/compile.rkt") (lib "dynext/file-sig.rkt") (lib "dynext/compile-sig.rkt") (lib "dynext/main.rkt") (lib "dynext/file-unit.rkt"))) (name . "dynext-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/cext-lib?path=dynext-lib") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "92b482002c86099184d7847fd943757021a41680") (source . "git://github.com/racket/cext-lib?path=dynext-lib") (source_url . "http://github.com/racket/cext-lib/tree/master?path=dynext-lib"))) ("6.1.1" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("ebml" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ebml" "doc/ebml@ebml/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ebml.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ebml.txt"))) (checksum . "2ec0b537cf88dfbcf791f28a3ecd45583ff6295a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "scribble-lib" "racket-doc")) (description . "A library for reading and writing EBML files.") (implies . ()) (last-checked . 1632902978) (last-edit . 1359851583) (last-updated . 1513624504) (modules . ((lib "ebml/main.rkt") (lib "ebml/reader.rkt") (lib "ebml/ebml.scrbl") (lib "ebml/writer.rkt") (lib "ebml/examples/rust-ebml-parser.rkt") (lib "ebml/examples/sexp-ebml.rkt"))) (name . "ebml") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (data . #t) (io . #t) (ring:1 . #t))) (source . "github://github.com/jbclements/ebml/master") (tags . ("data" "io")) (versions . #hash((default . #hasheq((checksum . "2ec0b537cf88dfbcf791f28a3ecd45583ff6295a") (source . "github://github.com/jbclements/ebml/master") (source_url . "http://github.com/jbclements/ebml/tree/master"))))))) ("ebuild" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ebuild" "doc/ebuild@ebuild/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ebuild.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ebuild.txt"))) (checksum . "53f9d7526c5199193d748eae897e7767d98479fa") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1625701132) (dependencies . ("base" "dirname" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Library to ease automatic ebuild creation and maintenance") (implies . ()) (last-checked . 1632902978) (last-edit . 1628374081) (last-updated . 1628809794) (modules . ((lib "ebuild/private/ebuild/elsef.rkt") (lib "ebuild/private/metadata/pkgmetadata.rkt") (lib "ebuild/private/metadata/longdescription.rkt") (lib "ebuild/private/repository/layout.rkt") (lib "ebuild/private/repository/conf.rkt") (lib "ebuild-doc/scribblings/classes/repository.scrbl") (lib "ebuild-transformers/githost.rkt") (lib "ebuild-tests/repository/repoman.rkt") (lib "ebuild-tools/private/url2pkg.rkt") (lib "ebuild-tools/private/interactive/input.rkt") (lib "ebuild-doc/scribblings/about.scrbl") (lib "ebuild-tools/private/clean-versions.rkt") (lib "ebuild/private/metadata/upstream.rkt") (lib "ebuild-doc/scribblings/templates/cargo.scrbl") (lib "ebuild/private/package/version.rkt") (lib "ebuild-templates/cargo.rkt") (lib "ebuild/private/metadata/slots.rkt") (lib "ebuild-doc/scribblings/external.scrbl") (lib "ebuild/metadata.rkt") (lib "ebuild/private/metadata/empty-tags.rkt") (lib "ebuild/private/metadata/elsenull.rkt") (lib "ebuild/private/ebuild/src-uri.rkt") (lib "ebuild-doc/scribblings/exported/sh-function.scrbl") (lib "ebuild-doc/scribblings/exported/repository.scrbl") (lib "ebuild-doc/scribblings/exported/ebuild.scrbl") (lib "ebuild-tools/interactive.rkt") (lib "ebuild-transformers/src-uri.rkt") (lib "ebuild/main.rkt") (lib "ebuild-doc/scribblings/exported/metadata.scrbl") (lib "ebuild-doc/scribblings/classes/ebuild.scrbl") (lib "ebuild/private/metadata/maintainer.rkt") (lib "ebuild/package.rkt") (lib "ebuild/private/metadata/use.rkt") (lib "ebuild-tools/clean-versions.rkt") (lib "ebuild-templates/git.rkt") (lib "ebuild-doc/scribblings/main.scrbl") (lib "ebuild-doc/scribblings/ebuild.scrbl") (lib "ebuild-doc/scribblings/templates.scrbl") (lib "ebuild-doc/scribblings/exported.scrbl") (lib "ebuild/sh-function.rkt") (lib "ebuild-tests/package/cyclone.rkt") (lib "ebuild-doc/scribblings/classes/metadata.scrbl") (lib "ebuild-tests/templates/cargo/ripgrep.rkt") (lib "ebuild/private/ebuild/header.rkt") (lib "ebuild-tests/metadata/xml-in.rkt") (lib "ebuild-tools/url2pkg.rkt") (lib "ebuild/private/ebuild/variable.rkt") (lib "ebuild-doc/scribblings/exported/package.scrbl") (lib "ebuild/private/metadata/element.rkt") (lib "ebuild-doc/scribblings/transformers/src-uri.scrbl") (lib "ebuild-doc/scribblings/transformers.scrbl") (lib "ebuild-templates/gh.rkt") (lib "ebuild-tests/ebuild/simple.rkt") (lib "ebuild-doc/scribblings/classes.scrbl") (lib "ebuild-doc/scribblings/classes/package.scrbl") (lib "ebuild/ebuild.rkt") (lib "ebuild/private/ebuild/unroll.rkt") (lib "ebuild/repository.rkt") (lib "ebuild/private/repository/bool.rkt"))) (name . "ebuild") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:xgqt@riseup.net . #t) (ebuild . #t) (gentoo . #t) (library . #t) (ring:1 . #t))) (source . "https://gitlab.com/xgqt/racket-ebuild.git") (tags . ("ebuild" "gentoo" "library")) (versions . #hash((default . #hasheq((checksum . "53f9d7526c5199193d748eae897e7767d98479fa") (source . "https://gitlab.com/xgqt/racket-ebuild.git") (source_url . "https://gitlab.com/xgqt/racket-ebuild.git"))))))) ("ec" . #hasheq((author . "m4burns@uwaterloo.ca marc@kn0x.io") (authors . ("m4burns@uwaterloo.ca" "marc@kn0x.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ec" "doc/ec@ec/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ec.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ec.txt"))) (checksum . "81d6fbe1852d3b20cffa651e6062dd1aca146018") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1597682543) (dependencies . ("base" "math-lib" "binaryio" "typed-racket-lib" "racket-doc" "rackunit-lib" "scribble-lib" "crypto-lib" "rackunit-typed")) (description . "Provides elliptic curve arithmetic, point (de)serialization, and parameters for popular cryptographic elliptic curves.") (implies . ()) (last-checked . 1632902978) (last-edit . 1597682543) (last-updated . 1597858042) (modules . ((lib "ec/typed-binaryio.rkt") (lib "ec/main.rkt") (lib "ec/sec.rkt") (lib "ec/test.rkt") (lib "ec/ec.rkt") (lib "ec/data.rkt") (lib "ec/curves.rkt") (lib "ec/ec.scrbl"))) (name . "ec") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:m4burns@uwaterloo.ca . #t) (author:marc@kn0x.io . #t) (crypto . #t) (math . #t) (ring:1 . #t))) (source . "https://github.com/marckn0x/ec.git") (tags . ("crypto" "math")) (versions . #hash((default . #hasheq((checksum . "81d6fbe1852d3b20cffa651e6062dd1aca146018") (source . "https://github.com/marckn0x/ec.git") (source_url . "https://github.com/marckn0x/ec.git"))))))) ("echonest" . #hasheq((author . "racket@greghendershott.com") (authors . ("racket@greghendershott.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/echonest.txt") (test-failure-log . "server/built/test-fail/echonest.txt") (test-success-log . #f))) (checksum . "fd7d6511231bb4304cfd10260825e86ac33c3ddc") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "wffi" "rackjure" "rackunit-lib")) (description . "Wrapper for The Echo Nest web API.") (implies . ()) (last-checked . 1632902979) (last-edit . 1396443362) (last-updated . 1502815951) (modules . ((lib "echonest/main.rkt") (lib "echonest/test.rkt"))) (name . "echonest") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (audio . #t) (author:racket@greghendershott.com . #t) (music . #t) (ring:1 . #t) (web . #t))) (source . "github://github.com/greghendershott/echonest/master") (tags . ("audio" "music" "web")) (versions . #hash((default . #hasheq((checksum . "fd7d6511231bb4304cfd10260825e86ac33c3ddc") (source . "github://github.com/greghendershott/echonest/master") (source_url . "http://github.com/greghendershott/echonest/tree/master"))))))) ("ecmascript" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ecmascript" "doc/ecmascript@ecmascript/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ecmascript.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ecmascript.txt"))) (checksum . "69fcfa42856ea799ff9d9d63a60eaf1b1783fe50") (checksum-error . #f) (collection . "ecmascript") (conflicts . ()) (dependencies . ("base" "math-lib" "parser-tools-lib" "ragg" "racket-doc" "scribble-lib")) (description . "Parser, runtime and #lang for ECMAScript") (implies . ()) (last-checked . 1632902979) (last-edit . 1413348069) (last-updated . 1550022581) (modules . ((lib "ecmascript/init.rkt") (lib "ecmascript/types.rkt") (lib "ecmascript/convert.rkt") (lib "ecmascript/lang/compile.rkt") (lib "ecmascript/scribblings/statements.scrbl") (lib "ecmascript/scribblings/functions.scrbl") (lib "ecmascript/lang/runtime-config.rkt") (lib "ecmascript/private/date.rkt") (lib "ecmascript/lib/object.rkt") (lib "ecmascript/main.rkt") (lib "ecmascript/lang/reader.rkt") (lib "ecmascript/lib/error.rkt") (lib "ecmascript/lang/operator.rkt") (lib "ecmascript/lib/number.rkt") (lib "ecmascript/lib/math.rkt") (lib "ecmascript/lib/string.rkt") (lib "ecmascript/function.rkt") (lib "ecmascript/lang/read.rkt") (lib "ecmascript/eval.rkt") (lib "ecmascript/lib/array.rkt") (lib "ecmascript/private/this.rkt") (lib "ecmascript/lib/regexp.rkt") (lib "ecmascript/parse.rkt") (lib "ecmascript/lang/literal.rkt") (lib "ecmascript/lib/util.rkt") (lib "ecmascript/private/object.rkt") (lib "ecmascript/lang/statement.rkt") (lib "ecmascript/run.rkt") (lib "ecmascript/scribblings/syntax.scrbl") (lib "ecmascript/private/error.rkt") (lib "ecmascript/lib/boolean.rkt") (lib "ecmascript/private/array.rkt") (lib "ecmascript/lang/lex.rkt") (lib "ecmascript/lang/grammar.rkt") (lib "ecmascript/scribblings/types.scrbl") (lib "ecmascript/scribblings/ecmascript.scrbl") (lib "ecmascript/object.rkt") (lib "ecmascript/scribblings/parsing.scrbl") (lib "ecmascript/scribblings/lit-op.scrbl") (lib "ecmascript/private/primitive.rkt") (lib "ecmascript/scribblings/lang.scrbl") (lib "ecmascript/lang/language-info.rkt") (lib "ecmascript/lang/helpers.rkt") (lib "ecmascript/lang/function.rkt") (lib "ecmascript/scribblings/sexpr.scrbl") (lib "ecmascript/private/function.rkt") (lib "ecmascript/private/global-object.rkt") (lib "ecmascript/private/environment.rkt") (lib "ecmascript/lang/environment.rkt") (lib "ecmascript/lib/function.rkt") (lib "ecmascript/ast.rkt"))) (name . "ecmascript") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:leo@lwh.jp . #t) (language . #t) (ring:1 . #t))) (source . "git://github.com/lwhjp/ecmascript") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "69fcfa42856ea799ff9d9d63a60eaf1b1783fe50") (source . "git://github.com/lwhjp/ecmascript") (source_url . "http://github.com/lwhjp/ecmascript/tree/master"))))))) ("ee-lib" . #hasheq((author . "michael.ballantyne@gmail.com") (authors . ("michael.ballantyne@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/ee-lib.txt") (docs . (("main" "ee-lib" "doc/ee-lib@ee-lib/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ee-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ee-lib.txt"))) (checksum . "8307f906f63e4a1dce8f198f241c4463970338cf") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1561146824) (dependencies . (("base" #:version "8.2.0.7") "rackunit-lib" "racket-doc" "scribble-lib" "drracket")) (description . "Utilities for defining embedded macro expanders") (implies . ()) (last-checked . 1632902979) (last-edit . 1628530129) (last-updated . 1628564971) (modules . ((lib "ee-lib/test/phone-numbers-ee-lib.rkt") (lib "ee-lib/test/suspend/suspend.rkt") (lib "ee-lib/persistent-id-table.rkt") (lib "ee-lib/scribblings/ee-lib.scrbl") (lib "ee-lib/main.rkt") (lib "ee-lib/test/jstest.rkt") (lib "ee-lib/test/same-binding.rkt") (lib "ee-lib/test/js.rkt") (lib "ee-lib/test/splicing.rkt") (lib "ee-lib/test/suspend/suspend-test.rkt") (lib "ee-lib/private/flip-intro-scope.rkt") (lib "ee-lib/define.rkt") (lib "ee-lib/errors.rkt") (lib "ee-lib/private/lift-disappeareds.rkt") (lib "ee-lib/test/phone-numbers-basic.rkt"))) (name . "ee-lib") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:michael.ballantyne@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/michaelballantyne/ee-lib.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8307f906f63e4a1dce8f198f241c4463970338cf") (source . "https://github.com/michaelballantyne/ee-lib.git") (source_url . "https://github.com/michaelballantyne/ee-lib.git"))) ("8.1" . #hasheq((checksum . "ade1fdeece880f4c79c1ea4f76a8a626721e3934") (source . "https://github.com/michaelballantyne/ee-lib.git#pre-8.2.0.7") (source_url . "https://github.com/michaelballantyne/ee-lib.git#pre-8.2.0.7"))) ("8.2" . #hasheq((checksum . "ade1fdeece880f4c79c1ea4f76a8a626721e3934") (source . "https://github.com/michaelballantyne/ee-lib.git#pre-8.2.0.7") (source_url . "https://github.com/michaelballantyne/ee-lib.git#pre-8.2.0.7"))) ("8.0" . #hasheq((checksum . "ade1fdeece880f4c79c1ea4f76a8a626721e3934") (source . "https://github.com/michaelballantyne/ee-lib.git#pre-8.2.0.7") (source_url . "https://github.com/michaelballantyne/ee-lib.git#pre-8.2.0.7"))) ("7.9" . #hasheq((checksum . "ade1fdeece880f4c79c1ea4f76a8a626721e3934") (source . "https://github.com/michaelballantyne/ee-lib.git#pre-8.2.0.7") (source_url . "https://github.com/michaelballantyne/ee-lib.git#pre-8.2.0.7"))) ("7.8" . #hasheq((checksum . "ade1fdeece880f4c79c1ea4f76a8a626721e3934") (source . "https://github.com/michaelballantyne/ee-lib.git#pre-8.2.0.7") (source_url . "https://github.com/michaelballantyne/ee-lib.git#pre-8.2.0.7"))))))) ("eff" . #hasheq((author . "1227847322@qq.com") (authors . ("1227847322@qq.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/eff.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/eff.txt"))) (checksum . "1c467f8f4f79706c3fcd5b4e429f74bcb2c7eaa7") (checksum-error . #f) (collection . "eff") (conflicts . ()) (date-added . 1609683961) (dependencies . ("base" "rackunit-lib")) (description . "A Library Provide Extensible Effects in Racket (Untyped).") (implies . ()) (last-checked . 1632902981) (last-edit . 1609684019) (last-updated . 1615371771) (modules . ((lib "eff/main.rkt") (lib "eff/value-effs.rkt") (lib "eff/scope.rkt") (lib "eff/tests/comprehension.rkt") (lib "eff/macro-helpers.rkt") (lib "eff/tests/state.rkt") (lib "eff/tests/scoped-value.rkt") (lib "eff/control-effs.rkt"))) (name . "eff") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (algebraic-effects . #t) (author:1227847322@qq.com . #t) (extensible-effects . #t) (ring:1 . #t))) (source . "https://github.com/syntacticlosure/eff.git#untyped") (tags . ("algebraic-effects" "extensible-effects")) (versions . #hash((default . #hasheq((checksum . "1c467f8f4f79706c3fcd5b4e429f74bcb2c7eaa7") (source . "https://github.com/syntacticlosure/eff.git#untyped") (source_url . "https://github.com/syntacticlosure/eff.git#untyped"))))))) ("effection" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/effection.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/effection.txt"))) (checksum . "f63023df2e26612f860f07693ae80a0ffd057c1e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1579216433) (dependencies . ("effection-doc" "effection-lib")) (description . "A library for custom side effects.") (implies . ("effection-doc" "effection-lib")) (last-checked . 1632902981) (last-edit . 1615519815) (last-updated . 1615519815) (modules . ()) (name . "effection") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (effects . #t) (language . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/rocketnia/effection.git?path=effection#main") (tags . ("effects" "language" "unstable")) (versions . #hash((default . #hasheq((checksum . "f63023df2e26612f860f07693ae80a0ffd057c1e") (source . "https://github.com/rocketnia/effection.git?path=effection#main") (source_url . "https://github.com/rocketnia/effection.git?path=effection#main"))))))) ("effection-doc" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "effection" "doc/effection@effection-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/effection-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/effection-doc.txt"))) (checksum . "f63023df2e26612f860f07693ae80a0ffd057c1e") (checksum-error . #f) (collection . "effection") (conflicts . ()) (date-added . 1579217442) (dependencies . ("base" "parendown-lib" "scribble-lib")) (description . "A library for custom side effects. (doc)") (implies . ()) (last-checked . 1632902981) (last-edit . 1615519803) (last-updated . 1615519803) (modules . ((lib "effection/scribblings/effection.scrbl"))) (name . "effection-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:rokitna@hotmail.com . #t) (effects . #t) (language . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/rocketnia/effection.git?path=effection-doc#main") (tags . ("effects" "language" "unstable")) (versions . #hash((default . #hasheq((checksum . "f63023df2e26612f860f07693ae80a0ffd057c1e") (source . "https://github.com/rocketnia/effection.git?path=effection-doc#main") (source_url . "https://github.com/rocketnia/effection.git?path=effection-doc#main"))))))) ("effection-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/effection-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/effection-lib.txt"))) (checksum . "f63023df2e26612f860f07693ae80a0ffd057c1e") (checksum-error . #f) (collection . "effection") (conflicts . ()) (date-added . 1579217467) (dependencies . ("base" "interconfection-lib" "lathe-comforts-lib" "parendown-lib")) (description . "A library for custom side effects. (lib)") (implies . ()) (last-checked . 1632902981) (last-edit . 1615519792) (last-updated . 1615519792) (modules . ((lib "effection/main.rkt") (lib "effection/effects/base.rkt"))) (name . "effection-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (effects . #t) (language . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/rocketnia/effection.git?path=effection-lib#main") (tags . ("effects" "language" "unstable")) (versions . #hash((default . #hasheq((checksum . "f63023df2e26612f860f07693ae80a0ffd057c1e") (source . "https://github.com/rocketnia/effection.git?path=effection-lib#main") (source_url . "https://github.com/rocketnia/effection.git?path=effection-lib#main"))))))) ("effection-test" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/effection-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/effection-test.txt"))) (checksum . "f63023df2e26612f860f07693ae80a0ffd057c1e") (checksum-error . #f) (collection . "effection") (conflicts . ()) (date-added . 1579217501) (dependencies . ("base")) (description . "A library for custom side effects. (test)") (implies . ()) (last-checked . 1632902982) (last-edit . 1615519780) (last-updated . 1615519780) (modules . ()) (name . "effection-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (effects . #t) (language . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/rocketnia/effection.git?path=effection-test#main") (tags . ("effects" "language" "unstable")) (versions . #hash((default . #hasheq((checksum . "f63023df2e26612f860f07693ae80a0ffd057c1e") (source . "https://github.com/rocketnia/effection.git?path=effection-test#main") (source_url . "https://github.com/rocketnia/effection.git?path=effection-test#main"))))))) ("effects" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/effects.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/effects.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/effects.txt"))) (checksum . "e4e7cd99e120660b84baa6c7612995a528e8a1b2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1558451028) (dependencies . ("base")) (description . "Delimited-continuation-based effects for Racket") (implies . ()) (last-checked . 1632902982) (last-edit . 1558451028) (last-updated . 1558457768) (modules . ((lib "effects/main.rkt"))) (name . "effects") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (effects . #t) (ring:1 . #t))) (source . "https://github.com/tonyg/racket-effects.git") (tags . ("effects")) (versions . #hash((default . #hasheq((checksum . "e4e7cd99e120660b84baa6c7612995a528e8a1b2") (source . "https://github.com/tonyg/racket-effects.git") (source_url . "https://github.com/tonyg/racket-effects.git"))))))) ("egal" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/egal.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/egal.txt"))) (checksum . "ea395262430ee0c5dffc264a92b0ad4d1a1a9bc8") (checksum-error . #f) (collection . "egal") (conflicts . ()) (dependencies . ("base")) (description . "Henry Baker's egal") (implies . ()) (last-checked . 1632902982) (last-edit . 1503512122) (last-updated . 1502815951) (modules . ((lib "egal/main.rkt"))) (name . "egal") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (comparison . #t) (equality . #t) (ring:1 . #t))) (source . "git://github.com/samth/egal") (tags . ("comparison" "equality")) (versions . #hash((default . #hasheq((checksum . "ea395262430ee0c5dffc264a92b0ad4d1a1a9bc8") (source . "git://github.com/samth/egal") (source_url . "http://github.com/samth/egal/tree/master"))))))) ("egg-herbie" . #hasheq((author . "oflatt@gmail.com pavpan@cs.utah.edu me@pavpancheckha.com") (authors . ("oflatt@gmail.com" "pavpan@cs.utah.edu" "me@pavpancheckha.com")) (build . #hash((conflicts-log . ("indirect" "conflicts.txt")) (dep-failure-log . "server/built/deps/egg-herbie.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/egg-herbie.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/egg-herbie.txt"))) (checksum . "0fd9a08784d6b6f77c66d36da20f8ef6d24ddc86") (checksum-error . #f) (collection . "egg-herbie-redirect") (conflicts . ()) (date-added . 1607460713) (dependencies . (("egg-herbie-osx" #:platform "x86_64-macosx" #:version "1.5") ("egg-herbie-windows" #:platform "win32\\x86_64" #:version "1.5") ("egg-herbie-linux" #:platform "x86_64-linux" #:version "1.5") ("egg-herbie-linux" #:platform "x86_64-linux-natipkg" #:version "1.5"))) (description . "An egg interface for Herbie.") (implies . ()) (last-checked . 1632902982) (last-edit . 1627163107) (last-updated . 1631927374) (modules . ()) (name . "egg-herbie") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:me@pavpancheckha.com . #t) (author:oflatt@gmail.com . #t) (author:pavpan@cs.utah.edu . #t) (ring:1 . #t))) (source . "https://github.com/herbie-fp/egg-herbie.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0fd9a08784d6b6f77c66d36da20f8ef6d24ddc86") (source . "https://github.com/herbie-fp/egg-herbie.git") (source_url . "https://github.com/herbie-fp/egg-herbie.git"))))))) ("egg-herbie-linux" . #hasheq((author . "me@pavpanchekha.com oflatt@gmail.com") (authors . ("me@pavpanchekha.com" "oflatt@gmail.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . "server/built/deps/egg-herbie-linux.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/egg-herbie-linux.txt") (test-failure-log . "server/built/test-fail/egg-herbie-linux.txt") (test-success-log . #f))) (checksum . "1468ca5237b202850d9df1fba5c11bcc7f7e8891") (checksum-error . #f) (collection . "egg-herbie") (conflicts . ("egg-herbie-windows")) (date-added . 1574369025) (dependencies . ()) (description . "") (implies . ()) (last-checked . 1632902982) (last-edit . 1627162480) (last-updated . 1627162480) (modules . ((lib "egg-herbie/main.rkt") (lib "egg-herbie/egg-interface.rkt") (lib "egg-herbie/to-egg-pattern.rkt"))) (name . "egg-herbie-linux") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:conflicts: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:me@pavpanchekha.com . #t) (author:oflatt@gmail.com . #t) (ring:2 . #t))) (source . "https://github.com/uwplse/herbie/releases/download/v1.5/egg-herbie-ubuntu.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1468ca5237b202850d9df1fba5c11bcc7f7e8891") (source . "https://github.com/uwplse/herbie/releases/download/v1.5/egg-herbie-ubuntu.zip") (source_url . "https://github.com/uwplse/herbie/releases/download/v1.5/egg-herbie-ubuntu.zip"))))))) ("egg-herbie-osx" . #hasheq((author . "me@pavpanchekha.com oflatt@gmail.com") (authors . ("me@pavpanchekha.com" "oflatt@gmail.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . "server/built/deps/egg-herbie-osx.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/egg-herbie-osx.txt") (test-failure-log . "server/built/test-fail/egg-herbie-osx.txt") (test-success-log . #f))) (checksum . "606ccc8483d33e1e46ea8a82cdcf0d0a0960128d") (checksum-error . #f) (collection . "egg-herbie") (conflicts . ("egg-herbie-windows")) (date-added . 1574368988) (dependencies . ()) (description . "") (implies . ()) (last-checked . 1632902983) (last-edit . 1627162494) (last-updated . 1627162494) (modules . ((lib "egg-herbie/main.rkt") (lib "egg-herbie/egg-interface.rkt") (lib "egg-herbie/to-egg-pattern.rkt"))) (name . "egg-herbie-osx") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:conflicts: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:me@pavpanchekha.com . #t) (author:oflatt@gmail.com . #t) (ring:2 . #t))) (source . "https://github.com/uwplse/herbie/releases/download/v1.5/egg-herbie-macOS.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "606ccc8483d33e1e46ea8a82cdcf0d0a0960128d") (source . "https://github.com/uwplse/herbie/releases/download/v1.5/egg-herbie-macOS.zip") (source_url . "https://github.com/uwplse/herbie/releases/download/v1.5/egg-herbie-macOS.zip"))))))) ("egg-herbie-windows" . #hasheq((author . "me@pavpanchekha.com oflatt@gmail.com") (authors . ("me@pavpanchekha.com" "oflatt@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/egg-herbie-windows.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/egg-herbie-windows.txt") (test-failure-log . "server/built/test-fail/egg-herbie-windows.txt") (test-success-log . #f))) (checksum . "9345a45945b28de4ee4405738289374572e750f2") (checksum-error . #f) (collection . "egg-herbie") (conflicts . ()) (date-added . 1574368904) (dependencies . ()) (description . "") (implies . ()) (last-checked . 1632902983) (last-edit . 1627162509) (last-updated . 1627162509) (modules . ((lib "egg-herbie/main.rkt") (lib "egg-herbie/egg-interface.rkt") (lib "egg-herbie/to-egg-pattern.rkt"))) (name . "egg-herbie-windows") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:me@pavpanchekha.com . #t) (author:oflatt@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/uwplse/herbie/releases/download/v1.5/egg-herbie-windows.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "9345a45945b28de4ee4405738289374572e750f2") (source . "https://github.com/uwplse/herbie/releases/download/v1.5/egg-herbie-windows.zip") (source_url . "https://github.com/uwplse/herbie/releases/download/v1.5/egg-herbie-windows.zip"))))))) ("ejs" . #hasheq((author . "jesse@serverracket.com jesse@lisp.sh") (authors . ("jesse@serverracket.com" "jesse@lisp.sh")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ejs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ejs.txt"))) (checksum . "6b8e74c48e98e1db0a02ddfe72eb44be9070112f") (checksum-error . #f) (collection . "ejs") (conflicts . ()) (date-added . 1607664649) (dependencies . ("base" "rackunit-lib")) (description . "EJS is exact JSON: A no-compromises implementation of RFC 8259 in which all numbers are rational") (implies . ()) (last-checked . 1632902984) (last-edit . 1607664649) (last-updated . 1542193996) (modules . ((lib "ejs/value.rkt") (lib "ejs/equal.rkt") (lib "ejs/render.rkt") (lib "ejs/util.rkt") (lib "ejs/main.rkt"))) (name . "ejs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jesse@lisp.sh . #t) (author:jesse@serverracket.com . #t) (json . #t) (ring:1 . #t))) (source . "https://github.com/jessealama/ejs.git") (tags . ("json")) (versions . #hash((default . #hasheq((checksum . "6b8e74c48e98e1db0a02ddfe72eb44be9070112f") (source . "https://github.com/jessealama/ejs.git") (source_url . "https://github.com/jessealama/ejs.git"))))))) ("ekans" . #hasheq((author . "kalxd@126.com") (authors . ("kalxd@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ekans" "doc/ekans@ekans/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ekans.txt") (test-failure-log . "server/built/test-fail/ekans.txt") (test-success-log . #f))) (checksum . "52d5acb0339dc38a6410f853957d57f90f566131") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1581862006) (dependencies . ("base" "gui-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "歌词下载器。") (implies . ()) (last-checked . 1632902984) (last-edit . 1581862006) (last-updated . 1609330771) (modules . ((lib "ekans/main.rkt") (lib "ekans/scribblings/ekans.scrbl") (lib "ekans/main-window/viewer-dialog.rkt") (lib "ekans/scribblings/site.scrbl") (lib "ekans/site/netease.rkt") (lib "ekans/scribblings/install.scrbl") (lib "ekans/base/type.rkt") (lib "ekans/main-window/main.rkt") (lib "ekans/scribblings/generic.scrbl") (lib "ekans/base/error.rkt") (lib "ekans/site/main.rkt") (lib "ekans/base/action.rkt") (lib "ekans/site/kugou.rkt") (lib "ekans/base/main.rkt"))) (name . "ekans") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalxd@126.com . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/kalxd/ekans.git") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "52d5acb0339dc38a6410f853957d57f90f566131") (source . "https://github.com/kalxd/ekans.git") (source_url . "https://github.com/kalxd/ekans.git"))))))) ("elasticsearch" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/elasticsearch.txt") (test-failure-log . "server/built/test-fail/elasticsearch.txt") (test-success-log . #f))) (checksum . "160e2be024a21e7b043b93a5d45eaaca8e3713a1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "") (implies . ()) (last-checked . 1632902985) (last-edit . 1442954581) (last-updated . 1537826128) (modules . ((lib "elasticsearch/utils.rkt") (lib "elasticsearch/elasticsearch.rkt") (lib "elasticsearch/main.rkt") (lib "elasticsearch/tests.rkt"))) (name . "elasticsearch") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/vishesh/elasticsearch.rkt") (tags . ()) (versions . #hash((default . #hasheq((checksum . "160e2be024a21e7b043b93a5d45eaaca8e3713a1") (source . "git://github.com/vishesh/elasticsearch.rkt") (source_url . "http://github.com/vishesh/elasticsearch.rkt/tree/master"))))))) ("electron" . #hasheq((author . "david@craven.ch") (authors . ("david@craven.ch")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/electron.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/.git\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (description . "") (implies . ()) (last-checked . 1632902985) (last-edit . 1526834310) (last-updated . 1621808204) (modules . ()) (name . "electron") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:david@craven.ch . #t) (ring:1 . #t))) (source . "https://github.com/.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "https://github.com/.git") (source_url . "https://github.com/.git"))))))) ("elf" . #hasheq((author . "code_man@cybnet.ch ") (authors . ("code_man@cybnet.ch")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/elf.txt") (docs . (("main" "elf" "doc/elf@elf/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/elf.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/elf.txt"))) (checksum . "b4ce29f51fa06b6c283e5acf348f318dec539b16") (checksum-error . #f) (collection . "elf") (conflicts . ()) (dependencies . ()) (description . "Unix executable and linking format read/writing") (implies . ()) (last-checked . 1632902985) (last-edit . 1440179405) (last-updated . 1632224147) (modules . ((lib "elf/elf-header.rkt") (lib "elf/elf-program-header.rkt") (lib "elf/elf.rkt") (lib "elf/elf-sections.rkt") (lib "elf/elf-constants.rkt") (lib "elf/main.rkt") (lib "elf/elf.scrbl"))) (name . "elf") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:code_man@cybnet.ch . #t) (executable . #t) (linking . #t) (ring:1 . #t))) (source . "http://code_man.cybnet.ch/racket/elf.zip") (tags . ("executable" "linking")) (versions . #hash((default . #hasheq((checksum . "b4ce29f51fa06b6c283e5acf348f318dec539b16") (source . "http://code_man.cybnet.ch/racket/elf.zip") (source_url . "http://code_man.cybnet.ch/racket/elf.zip"))))))) ("eli-tester" . #hash((author . "eli@racket-lang.org") (authors . ("eli@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Testing framework") (implies . ()) (last-checked . 1632902986) (last-edit . 1417659583) (last-updated . 1571879913) (modules . ((lib "tests/eli-tester.rkt"))) (name . "eli-tester") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "2d7d78118b9fc36c37096be8908e63ac9572fe10") (source . "git://github.com/racket/eli-tester") (source_url . "http://github.com/racket/eli-tester/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("elle" . #hasheq((author . "kellysmith12.21@gmail.com") (authors . ("kellysmith12.21@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/elle.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/elle.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/elle.txt"))) (checksum . "87053a6ba8e12c15823395149fe74a62ebb77fee") (checksum-error . #f) (collection . "elle") (conflicts . ()) (date-added . 1610010555) (dependencies . ("elle-lib" "elle-doc")) (description . "The library and documentation for the Elle language, a Racket-like language with reimagined syntax and updated features.") (implies . ("elle-lib" "elle-doc")) (last-checked . 1632902986) (last-edit . 1610502483) (last-updated . 1611080018) (modules . ()) (name . "elle") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:kellysmith12.21@gmail.com . #t) (lang . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/tail-reversion/elle.git?path=elle#release") (tags . ("lang" "language")) (versions . #hash((default . #hasheq((checksum . "87053a6ba8e12c15823395149fe74a62ebb77fee") (source . "https://github.com/tail-reversion/elle.git?path=elle#release") (source_url . "https://github.com/tail-reversion/elle.git?path=elle#release"))))))) ("elle-doc" . #hasheq((author . "kellysmith12.21@gmail.com") (authors . ("kellysmith12.21@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "Elle" "doc/Elle@elle-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/elle-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/elle-doc.txt"))) (checksum . "87053a6ba8e12c15823395149fe74a62ebb77fee") (checksum-error . #f) (collection . "elle") (conflicts . ()) (date-added . 1610010398) (dependencies . ("base" "elle-lib" "scribble-lib" "racket-doc" "rebellion")) (description . "Documentation for the Elle language.") (implies . ()) (last-checked . 1632902986) (last-edit . 1610502502) (last-updated . 1611080018) (modules . ((lib "elle/scribblings/util.rkt") (lib "elle/scribblings/core-data/number.scrbl") (lib "elle/scribblings/core-data/text.scrbl") (lib "elle/scribblings/core-data.scrbl") (lib "elle/scribblings/core-forms.scrbl") (lib "elle/scribblings/generics.scrbl") (lib "elle/scribblings/core-data/symbol.scrbl") (lib "elle/scribblings/core-data/boolean.scrbl") (lib "elle/scribblings/core-forms/pattern.scrbl") (lib "elle/scribblings/core-data/keyword.scrbl") (lib "elle/scribblings/core-forms/local-binding.scrbl") (lib "elle/scribblings/core-forms/conditional.scrbl") (lib "elle/scribblings/core-data/result.scrbl") (lib "elle/scribblings/main.scrbl") (lib "elle/scribblings/core-forms/procedure.scrbl") (lib "elle/scribblings/core-data/optional.scrbl") (lib "elle/scribblings/core-data/character.scrbl") (lib "elle/scribblings/render-id-without-prefix.rkt") (lib "elle/scribblings/contracts.scrbl") (lib "elle/scribblings/core-forms/definition.scrbl") (lib "elle/scribblings/core-forms/type.scrbl"))) (name . "elle-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kellysmith12.21@gmail.com . #t) (docs . #t) (documentation . #t) (ring:1 . #t))) (source . "https://github.com/tail-reversion/elle.git?path=elle-doc#release") (tags . ("docs" "documentation")) (versions . #hash((default . #hasheq((checksum . "87053a6ba8e12c15823395149fe74a62ebb77fee") (source . "https://github.com/tail-reversion/elle.git?path=elle-doc#release") (source_url . "https://github.com/tail-reversion/elle.git?path=elle-doc#release"))))))) ("elle-lib" . #hasheq((author . "kellysmith12.21@gmail.com") (authors . ("kellysmith12.21@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/elle-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/elle-lib.txt"))) (checksum . "87053a6ba8e12c15823395149fe74a62ebb77fee") (checksum-error . #f) (collection . "elle") (conflicts . ()) (date-added . 1610010249) (dependencies . (("base" #:version "7.9") "rebellion")) (description . "The Elle language, a Racket-like language with reimagined syntax and updated features.") (implies . ()) (last-checked . 1632902986) (last-edit . 1610502521) (last-updated . 1611080019) (modules . ((lib "elle/base.rkt") (lib "elle/private/prebase/parameter.rkt") (lib "elle/private/prebase/let-lam.rkt") (lib "elle/private/option.rkt") (lib "elle/private/prebase/require-provide.rkt") (lib "elle/vector.rkt") (lib "elle/private/prebase/special.rkt") (lib "elle/private/ordering.rkt") (lib "elle/private/prebase/preprebase.rkt") (lib "elle/private/bytes.rkt") (lib "elle/private/procedure.rkt") (lib "elle/math.rkt") (lib "elle/list.rkt") (lib "elle/private/text.rkt") (lib "elle/private/char.rkt") (lib "elle/private/reader.rkt") (lib "elle/private/symbol.rkt") (lib "elle/hash.rkt") (lib "elle/private/prebase/module-body.rkt") (lib "elle/private/prebase/conditional.rkt") (lib "elle/private/boolean.rkt") (lib "elle/private/prebase/match.rkt") (lib "elle/prelude.rkt") (lib "elle/private/equality.rkt") (lib "elle/main.rkt") (lib "elle/private/number.rkt") (lib "elle/private/prebase/contract.rkt") (lib "elle/private/prebase.rkt") (lib "elle/private/result.rkt") (lib "elle/private/prebase/type.rkt") (lib "elle/private/keyword.rkt"))) (name . "elle-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:kellysmith12.21@gmail.com . #t) (lang . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/tail-reversion/elle.git?path=elle-lib#release") (tags . ("lang" "language")) (versions . #hash((default . #hasheq((checksum . "87053a6ba8e12c15823395149fe74a62ebb77fee") (source . "https://github.com/tail-reversion/elle.git?path=elle-lib#release") (source_url . "https://github.com/tail-reversion/elle.git?path=elle-lib#release"))))))) ("emcsabac" . #hasheq((author . "tbn@cs.brown.edu tn@cs.brown.edu") (authors . ("tbn@cs.brown.edu" "tn@cs.brown.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/emcsabac.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e14172de583770ebfae544cc40432738e429a4dc") (checksum-error . #f) (collection . "emcsabac") (conflicts . ()) (date-added . 1549286482) (dependencies . ("base" "rosette" "ocelot")) (description . "Basic ABAC analyzer for educational purposes") (implies . ()) (last-checked . 1632902987) (last-edit . 1553814731) (last-updated . 1553814840) (modules . ((lib "emcsabac/test/arbac1.rkt") (lib "emcsabac/test/errors.rkt") (lib "emcsabac/lexparse.rkt") (lib "emcsabac/test/arbac2.rkt") (lib "emcsabac/test/emcstests.rkt") (lib "emcsabac/runner.rkt") (lib "emcsabac/runtime-config.rkt") (lib "emcsabac/language-info.rkt") (lib "emcsabac/main.rkt") (lib "emcsabac/lang/reader.rkt"))) (name . "emcsabac") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:tbn@cs.brown.edu . #t) (author:tn@cs.brown.edu . #t) (ring:1 . #t))) (source . "https://github.com/tnelson/emcsabac.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e14172de583770ebfae544cc40432738e429a4dc") (source . "https://github.com/tnelson/emcsabac.git") (source_url . "https://github.com/tnelson/emcsabac.git"))))))) ("emoji" . #hasheq((author . "whichxjy@gmail.com") (authors . ("whichxjy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "emoji" "doc/emoji@emoji/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/emoji.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/emoji.txt"))) (checksum . "f1a1bececc0f6ed232bc3f77f1975818b457d9f8") (checksum-error . #f) (collection . "emoji") (conflicts . ()) (date-added . 1570896633) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "Emoji terminal output for Racket") (implies . ()) (last-checked . 1632902987) (last-edit . 1570896633) (last-updated . 1571037373) (modules . ((lib "emoji/code-map.rkt") (lib "emoji/scribblings/emoji.scrbl") (lib "emoji/main.rkt"))) (name . "emoji") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:whichxjy@gmail.com . #t) (emoji . #t) (ring:1 . #t))) (source . "https://github.com/whichxjy/emoji.git?path=emoji") (tags . ("emoji")) (versions . #hash((default . #hasheq((checksum . "f1a1bececc0f6ed232bc3f77f1975818b457d9f8") (source . "https://github.com/whichxjy/emoji.git?path=emoji") (source_url . "https://github.com/whichxjy/emoji.git?path=emoji"))))))) ("english" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "english" "doc/english@english/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/english.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/english.txt"))) (checksum . "b03f3b203fdbc11780291e09a528ff0590b5802b") (checksum-error . #f) (collection . "english") (conflicts . ()) (date-added . 1569608713) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Utilities for generating English text strings -- e.g. plurals") (implies . ()) (last-checked . 1632902987) (last-edit . 1569608764) (last-updated . 1582162315) (modules . ((lib "english/scribblings/english.scrbl") (lib "english/main.rkt"))) (name . "english") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/english.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b03f3b203fdbc11780291e09a528ff0590b5802b") (source . "https://github.com/thoughtstem/english.git") (source_url . "https://github.com/thoughtstem/english.git"))))))) ("envlang" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/envlang.txt") (docs . (("main" "envlang" "doc/envlang@envlang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/envlang.txt") (test-failure-log . "server/built/test-fail/envlang.txt") (test-success-log . #f))) (checksum . "c45bfb25492a5fbedad50c7ad530d82bbbb43e3c") (checksum-error . #f) (collection . "envlang") (conflicts . ()) (date-added . 1616342905) (dependencies . ("base" "rackunit-lib" "phc-toolkit" "base" "reprovide-lang-lib" "polysemy" "scribble-lib" "hyper-literate")) (description . "Prototype of a proof-of-concept for a language with first-class environments.") (implies . ()) (last-checked . 1632902987) (last-edit . 1616342905) (last-updated . 1617497241) (modules . ((lib "envlang/demo2-rkt.hl.rkt") (lib "envlang/tiny.rkt") (lib "envlang/racket-utils.rkt") (lib "envlang/envlang-rkt-for-test.rkt") (lib "envlang/test-tiny.rkt") (lib "envlang/envlang.rkt") (lib "envlang/scribblings/envlang.scrbl") (lib "envlang/test-tiny.hl.rkt") (lib "envlang/rkt.rkt") (lib "envlang/demo-rkt.hl.rkt") (lib "envlang/test-rkt.rkt"))) (name . "envlang") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (app-syntax . #t) (author:racket@suzanne.soy . #t) (deprecated . #t) (experimental . #t) (language . #t) (lazy . #t) (ring:1 . #t) (sugar . #t))) (source . "https://github.com/envlang/racket.git#main") (tags . ("app-syntax" "deprecated" "experimental" "language" "lazy" "sugar")) (versions . #hash((default . #hasheq((checksum . "c45bfb25492a5fbedad50c7ad530d82bbbb43e3c") (source . "https://github.com/envlang/racket.git#main") (source_url . "https://github.com/envlang/racket.git#main"))))))) ("envy" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "envy" "doc/envy@envy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/envy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/envy.txt"))) (checksum . "0adfe762ea5ee9237ec67e15b1880a8767060ffb") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "sweet-exp-lib" "threading" "typed-racket-lib" "racket-doc" "scribble-lib" "sweet-exp" "typed-racket-doc" "typed-racket-more")) (description . "an environment variable manager for applications") (implies . ("typed-racket-lib")) (last-checked . 1632902987) (last-edit . 1440904426) (last-updated . 1502815954) (modules . ((lib "tests/envy/environment.rkt") (lib "envy/scribblings/util.rkt") (lib "envy/environment.rkt") (lib "envy/s-exp/lang/reader.rkt") (lib "envy/scribblings/lang-envy-sexp.scrbl") (lib "envy/main.rkt") (lib "envy/scribblings/envy.scrbl") (lib "envy/scribblings/api-reference.scrbl") (lib "envy/s-exp/lang/language.rkt") (lib "envy/private/coerce.rkt") (lib "envy/lang/reader.rkt") (lib "envy/scribblings/lang-envy.scrbl"))) (name . "envy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/envy") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0adfe762ea5ee9237ec67e15b1880a8767060ffb") (source . "git://github.com/lexi-lambda/envy") (source_url . "http://github.com/lexi-lambda/envy/tree/master"))) ("6.2" . #hasheq((checksum . "1220a9678bc78daa496427ed406c183837cc0765") (source . "git://github.com/lexi-lambda/envy#v6.2") (source_url . "http://github.com/lexi-lambda/envy/tree/master#v6.2"))) ("6.2.1" . #hasheq((checksum . "1220a9678bc78daa496427ed406c183837cc0765") (source . "git://github.com/lexi-lambda/envy#v6.2") (source_url . "http://github.com/lexi-lambda/envy/tree/master#v6.2"))))))) ("eopl" . #hash((author . "dvanhorn@racket-lang.org") (authors . ("dvanhorn@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "eopl" "doc/eopl@eopl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "eopl") (conflicts . ()) (dependencies . ("base" "compatibility-lib" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Teaching language for _Essentials of Programming Languages_") (implies . ()) (last-checked . 1632902989) (last-edit . 1417447869) (last-updated . 1571886985) (modules . ((lib "eopl/private/sllgen.rkt") (lib "eopl/tests/chapter4/mutable-pairs/pairvals.rkt") (lib "eopl/tests/chapter8/simplemodules/checker.rkt") (lib "eopl/tests/chapter3/let-lang/tests.rkt") (lib "eopl/tests/chapter8/abstract-types-lang/tests-book.rkt") (lib "eopl/tests/chapter8/full-system/check-modules.rkt") (lib "eopl/private/sllboth.rkt") (lib "eopl/lang/reader.rkt") (lib "eopl/tests/chapter8/abstract-types-lang/checker.rkt") (lib "eopl/tests/chapter8/abstract-types-lang/renaming.rkt") (lib "eopl/tests/chapter7/checked/environments.rkt") (lib "eopl/tests/chapter4/mutable-pairs/lang.rkt") (lib "eopl/tests/chapter9/classes/classes.rkt") (lib "eopl/tests/chapter9/classes/tests.rkt") (lib "eopl/tests/chapter6/cps-lang/cps.rkt") (lib "eopl/tests/chapter5/letrec-lang/interp-registers.rkt") (lib "eopl/tests/chapter9/typed-oo/static-data-structures.rkt") (lib "eopl/tests/chapter2/sec2.1.rkt") (lib "eopl/tests/chapter4/call-by-reference/pairvals.rkt") (lib "eopl/tests/chapter4/mutable-pairs/environments.rkt") (lib "eopl/tests/chapter7/checked/tests.rkt") (lib "eopl/tests/chapter4/call-by-need/data-structures.rkt") (lib "eopl/tests/chapter3/letrec-lang/tests.rkt") (lib "eopl/tests/chapter4/explicit-refs/interp.rkt") (lib "eopl/tests/chapter8/simplemodules/interp.rkt") (lib "eopl/tests/chapter3/proc-lang/proc-rep/environments.rkt") (lib "eopl/tests/chapter9/classes/store.rkt") (lib "eopl/tests/chapter4/call-by-need/interp.rkt") (lib "eopl/tests/chapter4/explicit-refs/tests.rkt") (lib "eopl/tests/chapter5/exceptions/data-structures.rkt") (lib "eopl/tests/chapter4/implicit-refs/store.rkt") (lib "eopl/tests/chapter3/lexaddr-lang/environments.rkt") (lib "eopl/tests/chapter9/classes/data-structures.rkt") (lib "eopl/tests/chapter4/call-by-reference/pairval1.rkt") (lib "eopl/tests/chapter5/thread-lang/scheduler.rkt") (lib "eopl/tests/chapter7/inferred/substitutions.rkt") (lib "eopl/tests/chapter3/lexaddr-lang/tests.rkt") (lib "eopl/tests/chapter5/thread-lang/tests.rkt") (lib "eopl/tests/chapter2/sec2.4.rkt") (lib "eopl/tests/chapter9/typed-oo/classes.rkt") (lib "eopl/tests/chapter3/proc-lang/proc-rep/lang.rkt") (lib "eopl/tests/chapter9/typed-oo/store.rkt") (lib "eopl/tests/chapter3/proc-lang/proc-rep/tests.rkt") (lib "eopl/tests/chapter7/inferred/environments.rkt") (lib "eopl/tests/chapter8/abstract-types-lang/check-modules.rkt") (lib "eopl/tests/chapter9/classes/interp.rkt") (lib "eopl/tests/chapter4/explicit-refs/lang.rkt") (lib "eopl/tests/chapter9/classes/environments.rkt") (lib "eopl/tests/chapter3/proc-lang/proc-rep/data-structures.rkt") (lib "eopl/tests/chapter4/implicit-refs/interp.rkt") (lib "eopl/tests/chapter4/implicit-refs/tests.rkt") (lib "eopl/tests/chapter8/full-system/subtyping.rkt") (lib "eopl/tests/chapter4/mutable-pairs/store.rkt") (lib "eopl/tests/chapter8/full-system/data-structures.rkt") (lib "eopl/tests/chapter4/call-by-reference/data-structures.rkt") (lib "eopl/tests/chapter7/checked/interp.rkt") (lib "eopl/tests/chapter8/abstract-types-lang/environments.rkt") (lib "eopl/tests/chapter3/proc-lang/ds-rep/lang.rkt") (lib "eopl/tests/chapter8/full-system/expand-type.rkt") (lib "eopl/tests/chapter9/typed-oo/checker.rkt") (lib "eopl/tests/chapter8/abstract-types-lang/static-data-structures.rkt") (lib "eopl/tests/chapter7/inferred/tests.rkt") (lib "eopl/tests/chapter6/cps-lang/cps-in-lang.rkt") (lib "eopl/tests/chapter8/abstract-types-lang/test-suite.rkt") (lib "eopl/tests/chapter4/mutable-pairs/interp.rkt") (lib "eopl/tests/chapter7/checked/lang.rkt") (lib "eopl/tests/chapter3/let-lang/lang.rkt") (lib "eopl/tests/chapter8/simplemodules/data-structures.rkt") (lib "eopl/tests/chapter5/letrec-lang/environments.rkt") (lib "eopl/tests/chapter4/call-by-need/lang.rkt") (lib "eopl/tests/chapter6/cps-side-effects-lang/interp-tests.rkt") (lib "eopl/tests/chapter5/thread-lang/semaphores.rkt") (lib "eopl/tests/chapter5/letrec-lang/tests.rkt") (lib "eopl/tests/chapter5/exceptions/environments.rkt") (lib "eopl/tests/chapter3/proc-lang/ds-rep/data-structures.rkt") (lib "eopl/private/utils.rkt") (lib "eopl/tests/chapter4/call-by-reference/store.rkt") (lib "eopl/tests/chapter9/typed-oo/tests.rkt") (lib "eopl/tests/chapter8/full-system/renaming.rkt") (lib "eopl/tests/chapter2/sec2.2-ds-rep.rkt") (lib "eopl/tests/chapter6/cps-side-effects-lang/data-structures.rkt") (lib "eopl/tests/chapter4/call-by-reference/interp.rkt") (lib "eopl/tests/chapter4/call-by-reference/environments.rkt") (lib "eopl/tests/chapter4/call-by-reference/pairval2.rkt") (lib "eopl/tests/chapter3/letrec-lang/environments.rkt") (lib "eopl/tests/chapter4/call-by-reference/tests.rkt") (lib "eopl/tests/chapter3/proc-lang/ds-rep/tests.rkt") (lib "eopl/tests/chapter8/full-system/lang.rkt") (lib "eopl/tests/chapter4/call-by-need/pairval2.rkt") (lib "eopl/tests/chapter9/typed-oo/data-structures.rkt") (lib "eopl/tests/chapter4/mutable-pairs/pairval1.rkt") (lib "eopl/tests/chapter4/explicit-refs/store.rkt") (lib "eopl/tests/chapter7/checked/checker.rkt") (lib "eopl/tests/chapter3/letrec-lang/interp.rkt") (lib "eopl/tests/chapter7/inferred/inferrer.rkt") (lib "eopl/tests/chapter5/exceptions/tests.rkt") (lib "eopl/tests/chapter4/mutable-pairs/data-structures.rkt") (lib "eopl/tests/chapter4/implicit-refs/lang.rkt") (lib "eopl/tests/chapter4/explicit-refs/data-structures.rkt") (lib "eopl/tests/chapter2/sec2.5.rkt") (lib "eopl/tests/chapter6/cps-lang/tests.rkt") (lib "eopl/tests/chapter4/call-by-need/store.rkt") (lib "eopl/tests/chapter8/simplemodules/check-modules.rkt") (lib "eopl/tests/chapter6/cps-side-effects-lang/tests.rkt") (lib "eopl/tests/chapter4/implicit-refs/environments.rkt") (lib "eopl/tests/chapter5/letrec-lang/interp.rkt") (lib "eopl/tests/chapter7/inferred/equal-up-to-gensyms.rkt") (lib "eopl/tests/sllgen/sllgenTests.rkt") (lib "eopl/tests/chapter8/simplemodules/lang.rkt") (lib "eopl/tests/chapter3/lexaddr-lang/interp.rkt") (lib "eopl/tests/chapter5/letrec-lang/data-structures.rkt") (lib "eopl/tests/chapter9/typed-oo/static-classes.rkt") (lib "eopl/tests/chapter6/cps-lang/data-structures.rkt") (lib "eopl/tests/chapter4/call-by-need/pairval1.rkt") (lib "eopl/tests/chapter6/cps-side-effects-lang/cps-out-lang.rkt") (lib "eopl/tests/chapter7/inferred/interp.rkt") (lib "eopl/tests/chapter4/mutable-pairs/tests.rkt") (lib "eopl/tests/chapter8/full-system/test-suite.rkt") (lib "eopl/tests/chapter5/thread-lang/data-structures.rkt") (lib "eopl/tests/chapter4/explicit-refs/environments.rkt") (lib "eopl/tests/chapter6/cps-side-effects-lang/cps.rkt") (lib "eopl/tests/chapter3/letrec-lang/lang.rkt") (lib "eopl/tests/chapter5/exceptions/lang.rkt") (lib "eopl/tests/chapter8/abstract-types-lang/subtyping.rkt") (lib "eopl/eopl.rkt") (lib "eopl/tests/chapter4/call-by-need/tests.rkt") (lib "eopl/eopl.scrbl") (lib "eopl/tests/chapter3/let-lang/environments.rkt") (lib "eopl/tests/chapter2/sec2.3.rkt") (lib "eopl/tests/chapter4/call-by-need/pairvals.rkt") (lib "eopl/tests/chapter8/full-system/interp.rkt") (lib "eopl/tests/chapter6/cps-side-effects-lang/cps-in-lang.rkt") (lib "eopl/tests/chapter9/typed-oo/environments.rkt") (lib "eopl/tests/chapter8/simplemodules/environments.rkt") (lib "eopl/tests/chapter8/simplemodules/tests-book.rkt") (lib "eopl/tests/chapter9/typed-oo/interp.rkt") (lib "eopl/main.rkt") (lib "eopl/tests/chapter5/exceptions/interp.rkt") (lib "eopl/tests/chapter8/simplemodules/test-suite.rkt") (lib "eopl/tests/chapter6/cps-lang/cps-out-lang.rkt") (lib "eopl/tests/chapter8/abstract-types-lang/expand-type.rkt") (lib "eopl/tests/chapter8/simplemodules/subtyping.rkt") (lib "eopl/tests/chapter3/proc-lang/ds-rep/environments.rkt") (lib "eopl/tests/chapter8/full-system/environments.rkt") (lib "eopl/tests/chapter3/letrec-lang/data-structures.rkt") (lib "eopl/tests/chapter7/checked/data-structures.rkt") (lib "eopl/tests/chapter6/cps-side-effects-lang/store.rkt") (lib "eopl/tests/chapter8/abstract-types-lang/data-structures.rkt") (lib "eopl/private/slldef.rkt") (lib "eopl/tests/chapter9/classes/lang.rkt") (lib "eopl/datatype.rkt") (lib "eopl/tests/chapter8/full-system/checker.rkt") (lib "eopl/tests/chapter4/mutable-pairs/pairval2.rkt") (lib "eopl/tests/chapter8/abstract-types-lang/interp.rkt") (lib "eopl/tests/chapter5/thread-lang/lang.rkt") (lib "eopl/tests/chapter2/sec2.2-proc-rep.rkt") (lib "eopl/tests/chapter8/simplemodules/expand-type.rkt") (lib "eopl/tests/chapter8/abstract-types-lang/lang.rkt") (lib "eopl/tests/chapter7/inferred/lang.rkt") (lib "eopl/tests/private/utils.rkt") (lib "eopl/tests/chapter3/lexaddr-lang/translator.rkt") (lib "eopl/tests/chapter3/let-lang/data-structures.rkt") (lib "eopl/tests/chapter8/full-system/tests-book.rkt") (lib "eopl/tests/chapter5/thread-lang/store.rkt") (lib "eopl/tests/chapter4/call-by-need/environments.rkt") (lib "eopl/tests/chapter5/thread-lang/queues.rkt") (lib "eopl/tests/chapter4/implicit-refs/data-structures.rkt") (lib "eopl/tests/chapter5/thread-lang/interp.rkt") (lib "eopl/tests/chapter8/simplemodules/static-data-structures.rkt") (lib "eopl/tests/chapter9/typed-oo/lang.rkt") (lib "eopl/tests/chapter6/cps-side-effects-lang/interp.rkt") (lib "eopl/tests/chapter3/let-lang/interp.rkt") (lib "eopl/tests/chapter4/call-by-reference/lang.rkt") (lib "eopl/tests/chapter8/full-system/static-data-structures.rkt") (lib "eopl/tests/chapter3/proc-lang/proc-rep/interp.rkt") (lib "eopl/tests/chapter7/inferred/data-structures.rkt") (lib "eopl/tests/chapter6/cps-lang/interp.rkt") (lib "eopl/tests/chapter3/lexaddr-lang/lang.rkt") (lib "eopl/tests/chapter3/proc-lang/ds-rep/interp.rkt") (lib "eopl/tests/chapter1/inductive.rkt") (lib "eopl/tests/chapter7/inferred/unifier.rkt") (lib "eopl/tests/chapter3/lexaddr-lang/data-structures.rkt") (lib "eopl/tests/chapter5/letrec-lang/lang.rkt"))) (name . "eopl") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:dvanhorn@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "43575d6e95dc34ca6e49b305180f696565e16e0f") (source . "git://github.com/racket/eopl") (source_url . "http://github.com/racket/eopl/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("errortrace" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org florence@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org" "florence@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "df715eb2ce77c4785b5b733a2292337808961c8c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("errortrace-lib" "errortrace-doc")) (implies . ("errortrace-lib" "errortrace-doc")) (last-checked . 1632902989) (last-edit . 1461959556) (last-updated . 1623438511) (modules . ()) (name . "errortrace") (ring . 1) (search-terms . #hasheq((:no-desc: . #t) (:no-tag: . #t) (author:florence@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/errortrace/?path=errortrace") (tags . ()) (versions . #hash((default . #hasheq((checksum . "df715eb2ce77c4785b5b733a2292337808961c8c") (source . "git://github.com/racket/errortrace/?path=errortrace") (source_url . "git://github.com/racket/errortrace/?path=errortrace"))))))) ("errortrace-doc" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org florence@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org" "florence@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "errortrace" "doc/errortrace@errortrace-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("racket-doc" "base" "errortrace-lib" "scribble-lib")) (description . "documentation part of errortrace") (implies . ()) (last-checked . 1632902990) (last-edit . 1461949401) (last-updated . 1623438512) (modules . ((lib "errortrace/scribblings/errortrace.scrbl"))) (name . "errortrace-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:florence@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "df715eb2ce77c4785b5b733a2292337808961c8c") (source . "git://github.com/racket/errortrace/?path=errortrace-doc") (source_url . "git://github.com/racket/errortrace/?path=errortrace-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("errortrace-lib" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org florence@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org" "florence@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.6.0.3") "source-syntax")) (description . "implementation (no documentation) part of errortrace") (implies . ()) (last-checked . 1632902990) (last-edit . 1461949401) (last-updated . 1623438513) (modules . ((lib "errortrace/errortrace.rkt") (lib "errortrace/private/utils.rkt") (lib "errortrace/errortrace-key.rkt") (lib "errortrace/stacktrace.rkt") (lib "errortrace/lang/reader.rkt") (lib "errortrace/main.rkt") (lib "errortrace/lang/body.rkt") (lib "errortrace/errortrace-lib.rkt") (lib "errortrace/zo-compile.rkt"))) (name . "errortrace-lib") (ring . 0) (search-terms . #hasheq((author:florence@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "df715eb2ce77c4785b5b733a2292337808961c8c") (source . "git://github.com/racket/errortrace/?path=errortrace-lib") (source_url . "git://github.com/racket/errortrace/?path=errortrace-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("errortrace-pkg" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "errortrace-pkg" "doc/errortrace-pkg@errortrace-pkg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/errortrace-pkg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/errortrace-pkg.txt"))) (checksum . "cb7038eb6b7200ed44b75d45bbab66bb836232ec") (checksum-error . #f) (collection . "errortrace-pkg") (conflicts . ()) (date-added . 1596330208) (dependencies . ("base" "custom-load" "errortrace-doc" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Errortrace installed packages") (implies . ()) (last-checked . 1632902990) (last-edit . 1596330208) (last-updated . 1607782621) (modules . ((lib "errortrace-pkg/lib.rkt") (lib "errortrace-pkg/main.rkt") (lib "errortrace-pkg/scribblings/errortrace-pkg.scrbl"))) (name . "errortrace-pkg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (errortrace . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/errortrace-pkg.git") (tags . ("errortrace")) (versions . #hash((default . #hasheq((checksum . "cb7038eb6b7200ed44b75d45bbab66bb836232ec") (source . "https://github.com/sorawee/errortrace-pkg.git") (source_url . "https://github.com/sorawee/errortrace-pkg.git"))))))) ("errortrace-test" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org florence@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org" "florence@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("errortrace-lib" "eli-tester" "rackunit-lib" "base" "racket-index" "compiler-lib" "at-exp-lib")) (description . "tests for errortrace") (implies . ()) (last-checked . 1632902990) (last-edit . 1461949401) (last-updated . 1623438514) (modules . ((lib "tests/errortrace/cross-phase.rkt") (lib "tests/errortrace/begin.rkt") (lib "tests/errortrace/main.rkt") (lib "tests/errortrace/backtrace-nontail.rkt") (lib "tests/errortrace/test-coverage.rkt") (lib "tests/errortrace/test-compile-time.rkt") (lib "tests/errortrace/lang.rkt") (lib "tests/errortrace/simple.rkt") (lib "tests/errortrace/phase-1.rkt") (lib "tests/errortrace/coverage-let.rkt") (lib "tests/errortrace/phase-2-profile.rkt") (lib "tests/errortrace/profile.rkt") (lib "tests/errortrace/phase-0-eval.rkt") (lib "tests/errortrace/define-syntaxes-id-test.rkt") (lib "tests/errortrace/test-docs-complete.rkt") (lib "tests/errortrace/phase-1-eval.rkt") (lib "tests/errortrace/coverage-define-syntax.rkt") (lib "tests/errortrace/phase-1-module.rkt") (lib "tests/errortrace/wrap.rkt") (lib "tests/errortrace/alert.rkt") (lib "tests/errortrace/cross-phase-mod.rkt"))) (name . "errortrace-test") (ring . 0) (search-terms . #hasheq((author:florence@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "df715eb2ce77c4785b5b733a2292337808961c8c") (source . "git://github.com/racket/errortrace/?path=errortrace-test") (source_url . "git://github.com/racket/errortrace/?path=errortrace-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("esc-vp21" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "esc-vp21" "doc/esc-vp21@esc-vp21/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/esc-vp21.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/esc-vp21.txt"))) (checksum . "01bc89268f4f051d55885f64d4a0fac671a762b9") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "mordae" "racket-doc" "typed-racket-doc" "typed-racket-lib")) (description . "Epson ESC/VP21 Projector Control") (implies . ()) (last-checked . 1632902991) (last-edit . 1440345277) (last-updated . 1502815956) (modules . ((lib "esc/vp21.rkt") (lib "esc/vp-net.rkt") (lib "esc/esc-vp21.scrbl"))) (name . "esc-vp21") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "git://github.com/mordae/racket-esc-vp21") (tags . ()) (versions . #hash((default . #hasheq((checksum . "01bc89268f4f051d55885f64d4a0fac671a762b9") (source . "git://github.com/mordae/racket-esc-vp21") (source_url . "http://github.com/mordae/racket-esc-vp21/tree/master"))))))) ("euclid" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "euclid" "doc/euclid@euclid/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/euclid.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/euclid.txt"))) (checksum . "bd64f8f2c7e60ce6d435c7f0241cf3dfffe6d297") (checksum-error . #f) (collection . "euclid") (conflicts . ()) (date-added . 1621494454) (dependencies . ("rebellion" "base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Data structures and algorithms related to Euclidean geometry") (implies . ()) (last-checked . 1632902991) (last-edit . 1621494454) (last-updated . 1621551639) (modules . ((lib "euclid/plane/angle.rkt") (lib "euclid/private/scribble-evaluator-factory.rkt") (lib "euclid/solid.rkt") (lib "euclid/plane.rkt") (lib "euclid/plane/ray.scrbl") (lib "euclid/solid/point.rkt") (lib "euclid/plane.scrbl") (lib "euclid/plane/point.scrbl") (lib "euclid/plane/ray.rkt") (lib "euclid/main.scrbl") (lib "euclid/plane/angle.scrbl") (lib "euclid/plane/point.rkt") (lib "euclid/solid/point.scrbl") (lib "euclid/main.rkt") (lib "euclid/solid.scrbl"))) (name . "euclid") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (data-structures . #t) (geometry . #t) (math . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/euclid.git") (tags . ("data-structures" "geometry" "math")) (versions . #hash((default . #hasheq((checksum . "bd64f8f2c7e60ce6d435c7f0241cf3dfffe6d297") (source . "https://github.com/jackfirth/euclid.git") (source_url . "https://github.com/jackfirth/euclid.git"))))))) ("event" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "event-lang"))) (failure-log . "server/built/fail/event.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "5c31cb32a816b0b23af2905bf25c7c3b69bd36cb") (checksum-error . #f) (collection . "event") (conflicts . ()) (date-added . 1599023999) (dependencies . ("algebraic" "base" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "Synchronizable event programming") (implies . ()) (last-checked . 1632902991) (last-edit . 1599023999) (last-updated . 1599023999) (modules . ((lib "event/scribblings/event-lang-includes.rkt") (lib "event/main.rkt") (lib "event/gate.rkt") (lib "event/scribblings/event-lang.scrbl"))) (name . "event") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:dedbox@gmail.com . #t) (concurrency . #t) (experimental . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-event.git") (tags . ("concurrency" "experimental")) (versions . #hash((default . #hasheq((checksum . "5c31cb32a816b0b23af2905bf25c7c3b69bd36cb") (source . "https://github.com/dedbox/racket-event.git") (source_url . "https://github.com/dedbox/racket-event.git"))))))) ("eventfd" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "eventfd" "doc/eventfd@eventfd/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/eventfd.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/eventfd.txt"))) (checksum . "f4e8e36525ca23009c71bc9838181cdba5503c98") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Linux eventfd support") (implies . ()) (last-checked . 1632902991) (last-edit . 1438605284) (last-updated . 1502815956) (modules . ((lib "eventfd/eventfd.scrbl") (lib "eventfd/private/ffi.rkt") (lib "eventfd/main.rkt"))) (name . "eventfd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (linux . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-eventfd/master") (tags . ("ffi" "linux")) (versions . #hash((default . #hasheq((checksum . "f4e8e36525ca23009c71bc9838181cdba5503c98") (source . "github://github.com/mordae/racket-eventfd/master") (source_url . "http://github.com/mordae/racket-eventfd/tree/master"))))))) ("exact-decimal-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "exact-decimal-lang" "doc/exact-decimal-lang@exact-decimal-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/exact-decimal-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/exact-decimal-lang.txt"))) (checksum . "0aae96ff741748e3a7da4239ad748e56c5f49470") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit" "scribble-lib" "racket-doc" "scribble-doc")) (description . "a lang-extension that reads decimals as exact rationals") (implies . ()) (last-checked . 1632902991) (last-edit . 1466340939) (last-updated . 1502815957) (modules . ((lib "exact-decimal/lang/language-info.rkt") (lib "exact-decimal/lang/reader.rkt") (lib "exact-decimal/docs/exact-decimal-lang.scrbl") (lib "exact-decimal/tests/test.rkt") (lib "exact-decimal/lang/runtime-config.rkt"))) (name . "exact-decimal-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lang-extension . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/exact-decimal-lang") (tags . ("lang-extension")) (versions . #hash((default . #hasheq((checksum . "0aae96ff741748e3a7da4239ad748e56c5f49470") (source . "git://github.com/AlexKnauth/exact-decimal-lang") (source_url . "http://github.com/AlexKnauth/exact-decimal-lang/tree/master"))))))) ("expander" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/expander.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (checksum-error . #f) (collection . "expander") (conflicts . ()) (dependencies . (("base" #:version "6.6.0.2") "zo-lib" "compiler-lib" "at-exp-lib")) (description . "Racket's implementation of macros, modules, and top-level evaluation") (implies . ()) (last-checked . 1632902992) (last-edit . 1556209159) (last-updated . 1632665502) (modules . ((lib "expander/common/parse-module-path.rkt") (lib "expander/host/reader-syntax.rkt") (lib "expander/expand/parsed.rkt") (lib "expander/extract/check-and-report.rkt") (lib "expander/extract/needed.rkt") (lib "expander/namespace/variable-reference.rkt") (lib "expander/expand/liberal-def-ctx.rkt") (lib "expander/syntax/srcloc.rkt") (lib "expander/extract/linklet-info.rkt") (lib "expander/expand/use-site.rkt") (lib "expander/syntax/original.rkt") (lib "expander/expand/syntax-implicit-error.rkt") (lib "expander/compile/context.rkt") (lib "expander/expand/already-expanded.rkt") (lib "expander/syntax/binding.rkt") (lib "expander/compile/side-effect.rkt") (lib "expander/expand/module-prompt.rkt") (lib "expander/expand/prepare.rkt") (lib "expander/namespace/api-module.rkt") (lib "expander/expand/missing-module.rkt") (lib "expander/boot/utils-primitive.rkt") (lib "expander/syntax/read-syntax.rkt") (lib "expander/expand/env.rkt") (lib "expander/common/memo.rkt") (lib "expander/compile/linklet.rkt") (lib "expander/expand/apply-transformer.rkt") (lib "expander/expand/rename-trans.rkt") (lib "expander/extract/variable.rkt") (lib "expander/expand/binding-to-module.rkt") (lib "expander/read/parameter.rkt") (lib "expander/extract/primitive-table.rkt") (lib "expander/boot/place-primitive.rkt") (lib "expander/syntax/taint-object.rkt") (lib "expander/expand/require+provide.rkt") (lib "expander/boot/expobs-primitive.rkt") (lib "expander/namespace/primitive-module.rkt") (lib "expander/run/submodule.rkt") (lib "expander/syntax/debug.rkt") (lib "expander/extract/main.rkt") (lib "expander/read/accum-string.rkt") (lib "expander/eval/protect.rkt") (lib "expander/expand/lift-context.rkt") (lib "expander/expand/syntax-id-error.rkt") (lib "expander/syntax/datum-map.rkt") (lib "expander/compile/reserved-symbol.rkt") (lib "expander/expand/save-and-restore.rkt") (lib "expander/extract/underscore.rkt") (lib "expander/boot/load-handler.rkt") (lib "expander/expand/implicit-property.rkt") (lib "expander/syntax/to-list.rkt") (lib "expander/read/api.rkt") (lib "expander/eval/reflect-submodule.rkt") (lib "expander/extract/prune-name.rkt") (lib "expander/expand/syntax-local.rkt") (lib "expander/read/constant.rkt") (lib "expander/compile/linklet-api.rkt") (lib "expander/extract/linklet.rkt") (lib "expander/read/coerce-key.rkt") (lib "expander/common/contract.rkt") (lib "expander/compile/extra-inspector.rkt") (lib "expander/expand/log.rkt") (lib "expander/extract/flatten.rkt") (lib "expander/host/syntax-to-reader-syntax.rkt") (lib "expander/syntax/like-ambiguous-binding.rkt") (lib "expander/syntax/track.rkt") (lib "expander/read/coerce.rkt") (lib "expander/read/primitive-parameter.rkt") (lib "expander/expand/bind-top.rkt") (lib "expander/read/special-comment.rkt") (lib "expander/namespace/module.rkt") (lib "expander/common/make-match.rkt") (lib "expander/boot/linklet-primitive.rkt") (lib "expander/read/readtable-parameter.rkt") (lib "expander/expand/expr.rkt") (lib "expander/syntax/space-scope.rkt") (lib "expander/expand/reference-record.rkt") (lib "expander/read/number.rkt") (lib "expander/host/correlate.rkt") (lib "expander/compile/write-linklet.rkt") (lib "expander/compile/main.rkt") (lib "expander/extract/gc-defn.rkt") (lib "expander/compile/version-bytes.rkt") (lib "expander/syntax/preserved.rkt") (lib "expander/compile/correlated-linklet.rkt") (lib "expander/compile/multi-top.rkt") (lib "expander/read/quote.rkt") (lib "expander/expand/free-id-set.rkt") (lib "expander/eval/direct.rkt") (lib "expander/read/regexp.rkt") (lib "expander/run/bootstrap.rkt") (lib "expander/compile/recompile.rkt") (lib "expander/common/intern.rkt") (lib "expander/boot/core-primitive.rkt") (lib "expander/eval/top-level-instance.rkt") (lib "expander/run/linklet-operation.rkt") (lib "expander/read/parse-case.rkt") (lib "expander/namespace/namespace.rkt") (lib "expander/syntax/scope.rkt") (lib "expander/run/linklet.rkt") (lib "expander/compile/header.rkt") (lib "expander/eval/multi-top.rkt") (lib "expander/namespace/core.rkt") (lib "expander/namespace/provided.rkt") (lib "expander/syntax/api-taint.rkt") (lib "expander/boot/handler.rkt") (lib "expander/expand/dup-check.rkt") (lib "expander/read/consume.rkt") (lib "expander/eval/reflect-compiled.rkt") (lib "expander/read/fixnum-flonum.rkt") (lib "expander/read/extension.rkt") (lib "expander/run/correlated-to-host-syntax.rkt") (lib "expander/syntax/serialize.rkt") (lib "expander/common/performance.rkt") (lib "expander/syntax/weaker-inspector.rkt") (lib "expander/read/vector.rkt") (lib "expander/syntax/fallback.rkt") (lib "expander/read/error.rkt") (lib "expander/common/phase.rkt") (lib "expander/eval/reflect.rkt") (lib "expander/namespace/provide-for-api.rkt") (lib "expander/run/status.rkt") (lib "expander/eval/reflect-name.rkt") (lib "expander/expand/bindings-arity-error.rkt") (lib "expander/syntax/taint.rkt") (lib "expander/extract/module.rkt") (lib "expander/bootstrap-run.rkt") (lib "expander/extract/known-primitive.rkt") (lib "expander/expand/require.rkt") (lib "expander/common/list-ish.rkt") (lib "expander/eval/load.rkt") (lib "expander/boot/read-primitive.rkt") (lib "expander/expand/module.rkt") (lib "expander/eval/root-context.rkt") (lib "expander/expand/local-expand.rkt") (lib "expander/read/language.rkt") (lib "expander/syntax/syntax.rkt") (lib "expander/host/string-to-number.rkt") (lib "expander/expand/allowed-context.rkt") (lib "expander/boot/runtime-primitive.rkt") (lib "expander/common/module-path.rkt") (lib "expander/common/reflect-hash.rkt") (lib "expander/expand/top.rkt") (lib "expander/common/small-hash.rkt") (lib "expander/common/promise.rkt") (lib "expander/common/fasl.rkt") (lib "expander/compile/module-use.rkt") (lib "expander/extract/save-and-report.rkt") (lib "expander/extract/symbol.rkt") (lib "expander/compile/known.rkt") (lib "expander/syntax/property.rkt") (lib "expander/common/inline.rkt") (lib "expander/demo.rkt") (lib "expander/compile/serialize-property.rkt") (lib "expander/bootstrap-demo.rkt") (lib "expander/compile/read-linklet.rkt") (lib "expander/compile/compiled-in-memory.rkt") (lib "expander/read/struct.rkt") (lib "expander/eval/shadow-directory.rkt") (lib "expander/read/sequence.rkt") (lib "expander/eval/main.rkt") (lib "expander/read/char.rkt") (lib "expander/read/graph.rkt") (lib "expander/common/prefab.rkt") (lib "expander/compile/instance.rkt") (lib "expander/expand/module-path.rkt") (lib "expander/expand/protect.rkt") (lib "expander/extract/defn-known.rkt") (lib "expander/expand/stop-ids.rkt") (lib "expander/read/special.rkt") (lib "expander/compile/serialize-state.rkt") (lib "expander/read/delimiter.rkt") (lib "expander/expand/context.rkt") (lib "expander/expand/expanded+parsed.rkt") (lib "expander/expand/set-bang-trans.rkt") (lib "expander/expand/provide.rkt") (lib "expander/expand/definition-context.rkt") (lib "expander/compile/namespace-scope.rkt") (lib "expander/read/whitespace.rkt") (lib "expander/syntax/match.rkt") (lib "expander/namespace/api.rkt") (lib "expander/common/struct-star.rkt") (lib "expander/compile/expr.rkt") (lib "expander/read/main.rkt") (lib "expander/compile/correlate.rkt") (lib "expander/expand/cross-phase.rkt") (lib "expander/eval/module.rkt") (lib "expander/read/string.rkt") (lib "expander/common/module-path-intern.rkt") (lib "expander/eval/collection.rkt") (lib "expander/syntax/api.rkt") (lib "expander/read/hash.rkt") (lib "expander/compile/module.rkt") (lib "expander/extract/defn.rkt") (lib "expander/namespace/registry.rkt") (lib "expander/read/indentation.rkt") (lib "expander/expand/main.rkt") (lib "expander/main.rkt") (lib "expander/read/digit.rkt") (lib "expander/namespace/inspector.rkt") (lib "expander/read/symbol-or-number.rkt") (lib "expander/compile/multi-top-data.rkt") (lib "expander/namespace/attach.rkt") (lib "expander/expand/append.rkt") (lib "expander/expand/def-id.rkt") (lib "expander/read/readtable.rkt") (lib "expander/read/location.rkt") (lib "expander/common/parameter-like.rkt") (lib "expander/syntax/full-binding.rkt") (lib "expander/syntax/bulk-binding.rkt") (lib "expander/eval/module-cache.rkt") (lib "expander/syntax/cache.rkt") (lib "expander/read/closer.rkt") (lib "expander/eval/dynamic-require.rkt") (lib "expander/eval/top.rkt") (lib "expander/host/linklet.rkt") (lib "expander/syntax/binding-table.rkt") (lib "expander/boot/kernel.rkt") (lib "expander/compile/serialize.rkt") (lib "expander/expand/binding-for-transformer.rkt") (lib "expander/extract/simplify-defn.rkt") (lib "expander/extract/export.rkt") (lib "expander/common/set.rkt") (lib "expander/eval/parameter.rkt") (lib "expander/compile/top.rkt") (lib "expander/boot/main-primitive.rkt") (lib "expander/syntax/module-binding.rkt") (lib "expander/read/wrap.rkt") (lib "expander/run/cache.rkt") (lib "expander/syntax/mapped-name.rkt") (lib "expander/compile/eager-instance.rkt") (lib "expander/compile/self-quoting.rkt") (lib "expander/eval/api.rkt") (lib "expander/expand/body.rkt") (lib "expander/extract/global.rkt") (lib "expander/expand/root-expand-context.rkt") (lib "expander/syntax/local-binding.rkt") (lib "expander/syntax/error.rkt") (lib "expander/extract/link.rkt") (lib "expander/expand/lift-key.rkt") (lib "expander/common/phase+space.rkt") (lib "expander/compile/form.rkt") (lib "expander/compile/built-in-symbol.rkt") (lib "expander/extract/c-encode.rkt") (lib "expander/eval/module-read.rkt") (lib "expander/run.rkt") (lib "expander/expand/rebuild.rkt") (lib "expander/host/correlate-syntax.rkt") (lib "expander/extract/decompile.rkt") (lib "expander/syntax/binding-set.rkt") (lib "expander/extract/get-linklet.rkt") (lib "expander/read/config.rkt") (lib "expander/read/demo.rkt") (lib "expander/read/box.rkt"))) (name . "expander") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/racket/?path=racket/src/expander") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "git://github.com/racket/racket/?path=racket/src/expander") (source_url . "git://github.com/racket/racket/?path=racket/src/expander"))))))) ("expect" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "expect" "doc/expect@expect/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/expect.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/expect.txt"))) (checksum . "9530df30537ae05400b6a3add9619e5f697dca52") (checksum-error . #f) (collection . "expect") (conflicts . ()) (dependencies . ("syntax-classes-lib" ("arguments" #:version "1.1") "base" "fancy-app" ("rackunit-lib" #:version "1.7") "reprovide-lang" "rackunit-doc" "doc-coverage" "racket-doc" "scribble-lib" "scribble-text-lib" "syntax-classes-lib")) (description . "A package defining expectations, first-class assertions about values for use in validation and unit testing with high quality error messages. Currently experimental.") (implies . ()) (last-checked . 1632902992) (last-edit . 1500074613) (last-updated . 1506054560) (modules . ((lib "expect/private/text.rkt") (lib "expect/private/rackunit/check.rkt") (lib "expect/tests/data/data-set.rkt") (lib "expect/private/lite/compare-sugar.rkt") (lib "expect/private/lite/combinator.rkt") (lib "expect/tests/struct.rkt") (lib "expect/private/util.rkt") (lib "expect/scribblings/convert.scrbl") (lib "expect/rackunit.rkt") (lib "expect/private/data/convert.rkt") (lib "expect/scribblings/main.scrbl") (lib "expect/private/data/convert-base.rkt") (lib "expect/scribblings/base.scrbl") (lib "expect/tests/scribble.rkt") (lib "expect/tests/text.rkt") (lib "expect/tests/function.rkt") (lib "expect/private/meta.rkt") (lib "expect/private/data/data-box.rkt") (lib "expect/tests/data/data-sequence.rkt") (lib "expect/private/data/data-dict.rkt") (lib "expect/tests/syntax.rkt") (lib "expect/scribblings/syntax.scrbl") (lib "expect/scribblings/text.scrbl") (lib "expect/private/function.rkt") (lib "expect/tests/data/data-box.rkt") (lib "expect/private/rackunit/case.rkt") (lib "expect/private/data/context.rkt") (lib "expect/scribblings/logic.scrbl") (lib "expect/scribblings/combinator.scrbl") (lib "expect/scribblings/base.rkt") (lib "expect/scribblings/rackunit.scrbl") (lib "expect/scribblings/function.scrbl") (lib "expect/tests/meta.rkt") (lib "expect/private/lite/logic.rkt") (lib "expect/tests/util.rkt") (lib "expect/private/data/data-syntax.rkt") (lib "expect/private/main.rkt") (lib "expect/tests/logic.rkt") (lib "expect/private/fail.rkt") (lib "expect/private/lite.rkt") (lib "expect/tests/data/convert-equal.rkt") (lib "expect/private/syntax.rkt") (lib "expect/private/data/data-sequence.rkt") (lib "expect/private/lite/base.rkt") (lib "expect/scribblings/compare.scrbl") (lib "expect/tests/rackunit.rkt") (lib "expect/main.rkt") (lib "expect/private/function-context.rkt") (lib "expect/private/data/main.rkt") (lib "expect/private/data/data-set.rkt") (lib "expect/private/data.rkt") (lib "expect/tests/data/convert.rkt") (lib "expect/scribblings/data.scrbl") (lib "expect/scribblings/meta.scrbl") (lib "expect/private/lite/main.rkt") (lib "expect/scribblings/util.rkt") (lib "expect/tests/data/data-hash.rkt") (lib "expect/private/lite/compare.rkt") (lib "expect/private/struct.rkt") (lib "expect/private/rackunit/main.rkt") (lib "expect/tests/compare.rkt") (lib "expect/private/rackunit/base.rkt") (lib "expect/private/text-io.rkt") (lib "expect/scribblings/struct.scrbl"))) (name . "expect") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (rackunit . #t) (ring:1 . #t) (testing . #t) (validation . #t))) (source . "git://github.com/jackfirth/racket-expect") (tags . ("experimental" "rackunit" "testing" "validation")) (versions . #hash((default . #hasheq((checksum . "9530df30537ae05400b6a3add9619e5f697dca52") (source . "git://github.com/jackfirth/racket-expect") (source_url . "http://github.com/jackfirth/racket-expect/tree/master"))))))) ("explorer" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/explorer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/explorer.txt"))) (checksum . "2a1836d01a7ff2ed025a67cc5f06c38b56776b2d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "gui-lib" "rackunit-lib")) (description . "Utility for interactive exploration of complex data structures.") (implies . ()) (last-checked . 1632902992) (last-edit . 1382141997) (last-updated . 1502815957) (modules . ((lib "explorer/example.rkt") (lib "explorer/compile-cond.rkt") (lib "explorer/main.rkt") (lib "explorer/frame.rkt") (lib "explorer/workspace.rkt"))) (name . "explorer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/racket-explorer") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2a1836d01a7ff2ed025a67cc5f06c38b56776b2d") (source . "git://github.com/tonyg/racket-explorer") (source_url . "http://github.com/tonyg/racket-explorer/tree/master"))))))) ("expr-in-racket" . #hasheq((author . "kevin2059@163.com") (authors . ("kevin2059@163.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/expr-in-racket.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "fa8266d311df18010da4e56648e06a9fe53c6b0b") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "embed expr like x+1 in racket.") (implies . ()) (last-checked . 1632902992) (last-edit . 1518140329) (last-updated . 1518140134) (modules . ((lib "expr-in-racket/syntax.rkt") (lib "expr-in-racket/lang/configure-runtime.rkt") (lib "expr-in-racket/lang/reader.rkt") (lib "expr-in-racket/grammar/ast.rkt") (lib "expr-in-racket/grammar/lex.rkt") (lib "expr-in-racket/lang/lang-info.rkt") (lib "expr-in-racket/compiler.rkt") (lib "expr-in-racket/grammar/yacc.rkt") (lib "expr-in-racket/main.rkt") (lib "expr-in-racket/lib.rkt") (lib "expr-in-racket/srcloc.rkt"))) (name . "expr-in-racket") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:kevin2059@163.com . #t) (lang-extension . #t) (ring:1 . #t))) (source . "https://github.com/connor2059/expr-in-racket.git") (tags . ("lang-extension")) (versions . #hash((default . #hasheq((checksum . "fa8266d311df18010da4e56648e06a9fe53c6b0b") (source . "https://github.com/connor2059/expr-in-racket.git") (source_url . "https://github.com/connor2059/expr-in-racket.git"))))))) ("extenor" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/extenor.txt") (docs . (("main" "extenor" "doc/extenor@extenor/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/extenor.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/extenor.txt"))) (checksum . "6be463cb23ceca3b602ce1c482cd6d37cd7a6e15") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1608412528) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Extensible Nominal Records.  They're like mixin-able structs that keep their extensions when functionally updated by procedures that only know about the non-extended version.  Also somewhat like dictionaries, but supporting struct-type-properties.") (implies . ()) (last-checked . 1632902993) (last-edit . 1608412618) (last-updated . 1610658756) (modules . ((lib "extenor/extenorcl/dict-extenorcl.rkt") (lib "extenor/main.rkt") (lib "extenor/scribblings/extenor.scrbl") (lib "extenor/extenorcl/custom-write-extenorcl.rkt"))) (name . "extenor") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (ring:1 . #t) (struct . #t))) (source . "https://github.com/willghatch/racket-extenor.git") (tags . ("struct")) (versions . #hash((default . #hasheq((checksum . "6be463cb23ceca3b602ce1c482cd6d37cd7a6e15") (source . "https://github.com/willghatch/racket-extenor.git") (source_url . "https://github.com/willghatch/racket-extenor.git"))))))) ("extensible-functions" . #hasheq((author . "me@leafac.com") (authors . ("me@leafac.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "extensible-functions" "doc/extensible-functions@extensible-functions/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/extensible-functions.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/extensible-functions.txt"))) (checksum . "7aa4c134ba48137bd66d30ad9282d261a5507dbe") (checksum-error . #f) (collection . "extensible-functions") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "A solution to the expression problem in Typed Racket") (implies . ()) (last-checked . 1632902994) (last-edit . 1525863103) (last-updated . 1525868360) (modules . ((lib "extensible-functions/extensible-functions.scrbl") (lib "extensible-functions/main.rkt"))) (name . "extensible-functions") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:me@leafac.com . #t) (expression-problem . #t) (extensible . #t) (ring:1 . #t) (utility . #t))) (source . "https://github.com/leafac/extensible-functions.git") (tags . ("expression-problem" "extensible" "utility")) (versions . #hash((default . #hasheq((checksum . "7aa4c134ba48137bd66d30ad9282d261a5507dbe") (source . "https://github.com/leafac/extensible-functions.git") (source_url . "https://github.com/leafac/extensible-functions.git"))))))) ("extensible-parser-specifications" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "extensible-parser-specifications" "doc/extensible-parser-specifications@extensible-parser-specifications/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/extensible-parser-specifications.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/extensible-parser-specifications.txt"))) (checksum . "616130a74b83cf7790257150655949698a7a3913") (checksum-error . #f) (collection . "extensible-parser-specifications") (conflicts . ()) (date-added . 1614799389) (dependencies . ("base" "rackunit-lib" "phc-toolkit" "generic-syntax-expanders" "alexis-util" "scribble-lib" "racket-doc" "seq-no-order")) (description . "Unstable, and has seemingly unsolvable problems with module boundaries. This package works like seq-no-order by Alexander Knauth, but adds reusable (within the same module) clauses and global constraints like a must occur before b or a mutually exclusive with c.") (implies . ()) (last-checked . 1632902994) (last-edit . 1614888907) (last-updated . 1617550561) (modules . ((lib "extensible-parser-specifications/scribblings/utils.rkt") (lib "extensible-parser-specifications/scribblings/no-order.scrbl") (lib "extensible-parser-specifications/scribblings/post.scrbl") (lib "extensible-parser-specifications/scribblings/pre-global-post-section.scrbl") (lib "extensible-parser-specifications/private/mixin.rkt") (lib "extensible-parser-specifications/scribblings/pre.scrbl") (lib "extensible-parser-specifications/scribblings/rest.scrbl") (lib "extensible-parser-specifications/private/post.rkt") (lib "extensible-parser-specifications/scribblings/forward-attributes.scrbl") (lib "extensible-parser-specifications/private/optional.rkt") (lib "extensible-parser-specifications/private/global-mutex.rkt") (lib "extensible-parser-specifications/test/test-global.rkt") (lib "extensible-parser-specifications/scribblings/defining-reusable-mixins.scrbl") (lib "extensible-parser-specifications/test/test-order-point.rkt") (lib "extensible-parser-specifications/private/no-order.rkt") (lib "extensible-parser-specifications/private/pre.rkt") (lib "extensible-parser-specifications/test/test-extend-structure-options.rkt") (lib "extensible-parser-specifications/test/test-maybe-empty.rkt") (lib "extensible-parser-specifications/main.rkt") (lib "extensible-parser-specifications/private/nop.rkt") (lib "extensible-parser-specifications/test/test-structure-options.rkt") (lib "extensible-parser-specifications/test/test-scopes-mixin-in-syntax-parser.rkt") (lib "extensible-parser-specifications/private/global.rkt") (lib "extensible-parser-specifications/private/try-attribute.rkt") (lib "extensible-parser-specifications/test/test-rest.rkt") (lib "extensible-parser-specifications/scribblings/pre-global-post-order.scrbl") (lib "extensible-parser-specifications/private/parameters.rkt") (lib "extensible-parser-specifications/scribblings/misc.scrbl") (lib "extensible-parser-specifications/private/define-syntax+simple-api.rkt") (lib "extensible-parser-specifications/scribblings/global.scrbl") (lib "extensible-parser-specifications/private/before-after.rkt") (lib "extensible-parser-specifications/scribblings/extensible-parser-specifications.scrbl"))) (name . "extensible-parser-specifications") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (experimental . #t) (ring:1 . #t) (syntax . #t) (syntax-parse . #t))) (source . "https://github.com/jsmaniac/extensible-parser-specifications.git#main") (tags . ("experimental" "syntax" "syntax-parse")) (versions . #hash((default . #hasheq((checksum . "616130a74b83cf7790257150655949698a7a3913") (source . "https://github.com/jsmaniac/extensible-parser-specifications.git#main") (source_url . "https://github.com/jsmaniac/extensible-parser-specifications.git#main"))))))) ("fairyfloss" . #hasheq((author . "helado.de.brownie@gmail.com") (authors . ("helado.de.brownie@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fairyfloss.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fairyfloss.txt"))) (checksum . "967a9db447145f56e178273e930067d36c4668b5") (checksum-error . #f) (collection . "fairyfloss") (conflicts . ()) (date-added . 1577589554) (dependencies . ("base")) (description . "sailorhg's fairyfloss for DrRacket ") (implies . ()) (last-checked . 1632902995) (last-edit . 1588556524) (last-updated . 1578029139) (modules . ()) (name . "fairyfloss") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:helado.de.brownie@gmail.com . #t) (colorscheme . #t) (drracket . #t) (ring:1 . #t))) (source . "https://github.com/HeladoDeBrownie/DrRacket-Theme-fairyfloss.git#Stable") (tags . ("colorscheme" "drracket")) (versions . #hash((default . #hasheq((checksum . "967a9db447145f56e178273e930067d36c4668b5") (source . "https://github.com/HeladoDeBrownie/DrRacket-Theme-fairyfloss.git#Stable") (source_url . "https://github.com/HeladoDeBrownie/DrRacket-Theme-fairyfloss.git#Stable"))))))) ("fancy-app" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fancy-app" "doc/fancy-app@fancy-app/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fancy-app.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fancy-app.txt"))) (checksum . "31ddeb91625dd6f95002c47e670751dd16704524") (checksum-error . #f) (collection . "fancy-app") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Scala-style anonymous functions") (implies . ()) (last-checked . 1632902995) (last-edit . 1410271467) (last-updated . 1607131118) (modules . ((lib "fancy-app/main.rkt") (lib "fancy-app/main.scrbl"))) (name . "fancy-app") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samth@ccs.neu.edu . #t) (ring:1 . #t) (syntax . #t))) (source . "github://github.com/samth/fancy-app/master") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "31ddeb91625dd6f95002c47e670751dd16704524") (source . "github://github.com/samth/fancy-app/master") (source_url . "http://github.com/samth/fancy-app/tree/master"))))))) ("fast-convert" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fast-convert" "doc/fast-convert@fast-convert/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fast-convert.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fast-convert.txt"))) (checksum . "2420aeb2ce8c7fb3e14d0ee1d560c33e16aa1b80") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Fast conversion from bytes to string  for one-byte encoding") (implies . ()) (last-checked . 1632902995) (last-edit . 1407086328) (last-updated . 1502815959) (modules . ((lib "fast-convert/fast-convert.scrbl") (lib "fast-convert/main.rkt"))) (name . "fast-convert") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (dev . #t) (performance . #t) (ring:1 . #t))) (source . "git://github.com/Kalimehtar/fast-convert") (tags . ("dev" "performance")) (versions . #hash((default . #hasheq((checksum . "2420aeb2ce8c7fb3e14d0ee1d560c33e16aa1b80") (source . "git://github.com/Kalimehtar/fast-convert") (source_url . "http://github.com/Kalimehtar/fast-convert/tree/master"))))))) ("fast-sequence" . #hasheq((author . "ryanc@racket-lang.org ann-bolotina@yandex.ru") (authors . ("ryanc@racket-lang.org" "ann-bolotina@yandex.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/fast-sequence.txt") (docs . (("main" "fast-sequence" "doc/fast-sequence@fast-sequence/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fast-sequence.txt") (test-failure-log . "server/built/test-fail/fast-sequence.txt") (test-success-log . #f))) (checksum . "d5144e2d6f73f441937a77439f80b79000768cd9") (checksum-error . #f) (collection . "fast-sequence") (conflicts . ()) (date-added . 1602256245) (dependencies . (("base" #:version "7.4") "fast-sequence-lib" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Macros for fast sequences.") (implies . ("fast-sequence-lib")) (last-checked . 1632902995) (last-edit . 1602256275) (last-updated . 1602825745) (modules . ((lib "fast-sequence/private/fast-sequence-testing.rkt") (lib "fast-sequence/tests/do-seq-long-running-tests.rkt") (lib "fast-sequence/tests/do-sequence-tests.rkt") (lib "fast-sequence/benchmarks/benchmarks.rkt") (lib "fast-sequence/fast-sequence.scrbl") (lib "fast-sequence/benchmarks/nest.rkt") (lib "fast-sequence/tests/fast-sequence-tests.rkt"))) (name . "fast-sequence") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:ann-bolotina@yandex.ru . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t) (sequence . #t))) (source . "https://github.com/abolotina/fast-sequence-combinators.git?path=fast-sequence#stable") (tags . ("sequence")) (versions . #hash((default . #hasheq((checksum . "d5144e2d6f73f441937a77439f80b79000768cd9") (source . "https://github.com/abolotina/fast-sequence-combinators.git?path=fast-sequence#stable") (source_url . "https://github.com/abolotina/fast-sequence-combinators.git?path=fast-sequence#stable"))))))) ("fast-sequence-lib" . #hasheq((author . "ryanc@racket-lang.org ann-bolotina@yandex.ru") (authors . ("ryanc@racket-lang.org" "ann-bolotina@yandex.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fast-sequence-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fast-sequence-lib.txt"))) (checksum . "d5144e2d6f73f441937a77439f80b79000768cd9") (checksum-error . #f) (collection . "fast-sequence") (conflicts . ()) (date-added . 1602256008) (dependencies . (("base" #:version "7.4"))) (description . "Macros for fast sequences.") (implies . ()) (last-checked . 1632902996) (last-edit . 1602256129) (last-updated . 1602825746) (modules . ((lib "fast-sequence/private/do-sequence.rkt") (lib "fast-sequence/private/fast-sequence-filter.rkt") (lib "fast-sequence/private/fast-sequence-map.rkt") (lib "fast-sequence/main.rkt"))) (name . "fast-sequence-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ann-bolotina@yandex.ru . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t) (sequence . #t))) (source . "https://github.com/abolotina/fast-sequence-combinators.git?path=fast-sequence-lib#stable") (tags . ("sequence")) (versions . #hash((default . #hasheq((checksum . "d5144e2d6f73f441937a77439f80b79000768cd9") (source . "https://github.com/abolotina/fast-sequence-combinators.git?path=fast-sequence-lib#stable") (source_url . "https://github.com/abolotina/fast-sequence-combinators.git?path=fast-sequence-lib#stable"))))))) ("faster-minikanren" . #hasheq((author . "michael.ballantyne@gmail.com") (authors . ("michael.ballantyne@gmail.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/faster-minikanren.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/faster-minikanren.txt"))) (checksum . "b085f037ea588641236781e08820fb3c77043f50") (checksum-error . #f) (collection . "minikanren") (conflicts . ("minikanren")) (dependencies . ("base")) (description . "A fast implementation of miniKanren with disequality and absento.") (implies . ()) (last-checked . 1632902996) (last-edit . 1474776335) (last-updated . 1629421785) (modules . ((lib "minikanren/simple-interp.rkt") (lib "minikanren/numbers.rkt") (lib "minikanren/mk.rkt") (lib "minikanren/matche.rkt") (lib "minikanren/main.rkt") (lib "minikanren/full-interp.rkt"))) (name . "faster-minikanren") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:no-tag: . #t) (author:michael.ballantyne@gmail.com . #t) (ring:2 . #t))) (source . "git://github.com/michaelballantyne/faster-miniKanren") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b085f037ea588641236781e08820fb3c77043f50") (source . "git://github.com/michaelballantyne/faster-miniKanren") (source_url . "http://github.com/michaelballantyne/faster-miniKanren/tree/master"))))))) ("feature-profile" . #hasheq((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "feature-profile" "doc/feature-profile@feature-profile/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/feature-profile.txt") (test-failure-log . "server/built/test-fail/feature-profile.txt") (test-success-log . #f))) (checksum . "cc96e3aa8efe71c013f662c60e2b0d9231b27f97") (checksum-error . #f) (collection . "feature-profile") (conflicts . ()) (dependencies . (("base" #:version "6.3") "contract-profile" "profile-lib" "rackunit-lib" "scribble-lib" "racket-doc" "sandbox-lib")) (description . "Profile that measures time spent in language/library features") (implies . ()) (last-checked . 1632902996) (last-edit . 1398968923) (last-updated . 1504303442) (modules . ((lib "feature-profile/examples/composition.rkt") (lib "feature-profile/tree-walker.rkt") (lib "feature-profile/utils.rkt") (lib "feature-profile/structs.rkt") (lib "feature-profile/examples/fizzbuzz.rkt") (lib "feature-profile/examples/matrix-mult.rkt") (lib "feature-profile/features.rkt") (lib "feature-profile/raco.rkt") (lib "feature-profile/scribblings/feature-profile.scrbl") (lib "feature-profile/examples/run-all.rkt") (lib "feature-profile/plug-in-lib.rkt") (lib "feature-profile/profile-helpers.rkt") (lib "feature-profile/examples/word-wrap.rkt") (lib "feature-profile/main.rkt"))) (name . "feature-profile") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stamourv@racket-lang.org . #t) (dev . #t) (performance . #t) (ring:1 . #t))) (source . "git://github.com/stamourv/feature-profile#master") (tags . ("dev" "performance")) (versions . #hash((default . #hasheq((checksum . "cc96e3aa8efe71c013f662c60e2b0d9231b27f97") (source . "git://github.com/stamourv/feature-profile#master") (source_url . "http://github.com/stamourv/feature-profile/tree/master#master"))) ("6.2" . #hasheq((checksum . "fb1303c585ec4de440f325d21d21b9030bc742e5") (source . "github://github.com/stamourv/feature-profile/racket-6.2") (source_url . "http://github.com/stamourv/feature-profile/tree/racket-6.2"))) ("6.3" . #hasheq((checksum . "ef1ee21c9974b8c9b109a0bed5bff4655116c094") (source . "github://github.com/stamourv/feature-profile/racket-6.3") (source_url . "http://github.com/stamourv/feature-profile/tree/racket-6.3"))))))) ("fector" . #hasheq((author . "dvanhorn@racket-lang.org") (authors . ("dvanhorn@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fector.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fector.txt"))) (checksum . "269812d67549fbd77273f5025a4144214d790081") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Persistent Functional Vectors") (implies . ()) (last-checked . 1632902997) (last-edit . 1354604413) (last-updated . 1502815960) (modules . ((lib "data/fector.rkt") (lib "data/fector/fast.rkt"))) (name . "fector") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:dvanhorn@racket-lang.org . #t) (data . #t) (ring:1 . #t))) (source . "github://github.com/dvanhorn/fector/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "269812d67549fbd77273f5025a4144214d790081") (source . "github://github.com/dvanhorn/fector/master") (source_url . "http://github.com/dvanhorn/fector/tree/master"))))))) ("fexpress" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fexpress.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fexpress.txt"))) (checksum . "5a6ee4baa220472cc68fdb41bd4b106a5add9a49") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1628915517) (dependencies . ("fexpress-doc" "fexpress-lib")) (description . "A compilation-friendly fexpr language.") (implies . ("fexpress-doc" "fexpress-lib")) (last-checked . 1632902997) (last-edit . 1628915517) (last-updated . 1629882596) (modules . ()) (name . "fexpress") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (compiler . #t) (experimental . #t) (fexpr . #t) (functional . #t) (lambda-calculus . #t) (language . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/rocketnia/fexpress.git?path=fexpress#main") (tags . ("compiler" "experimental" "fexpr" "functional" "lambda-calculus" "language" "unstable")) (versions . #hash((default . #hasheq((checksum . "5a6ee4baa220472cc68fdb41bd4b106a5add9a49") (source . "https://github.com/rocketnia/fexpress.git?path=fexpress#main") (source_url . "https://github.com/rocketnia/fexpress.git?path=fexpress#main"))))))) ("fexpress-doc" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fexpress" "doc/fexpress@fexpress-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fexpress-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fexpress-doc.txt"))) (checksum . "5a6ee4baa220472cc68fdb41bd4b106a5add9a49") (checksum-error . #f) (collection . "fexpress") (conflicts . ()) (date-added . 1628915313) (dependencies . ("base" "fexpress-lib" "racket-doc" "scribble-lib")) (description . "A compilation-friendly fexpr language. (doc)") (implies . ()) (last-checked . 1632902997) (last-edit . 1628915313) (last-updated . 1629882596) (modules . ((lib "fexpress/scribblings/fexpress.scrbl"))) (name . "fexpress-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:rokitna@hotmail.com . #t) (compiler . #t) (experimental . #t) (fexpr . #t) (functional . #t) (lambda-calculus . #t) (language . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/rocketnia/fexpress.git?path=fexpress-doc#main") (tags . ("compiler" "experimental" "fexpr" "functional" "lambda-calculus" "language" "unstable")) (versions . #hash((default . #hasheq((checksum . "5a6ee4baa220472cc68fdb41bd4b106a5add9a49") (source . "https://github.com/rocketnia/fexpress.git?path=fexpress-doc#main") (source_url . "https://github.com/rocketnia/fexpress.git?path=fexpress-doc#main"))))))) ("fexpress-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fexpress-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fexpress-lib.txt"))) (checksum . "5a6ee4baa220472cc68fdb41bd4b106a5add9a49") (checksum-error . #f) (collection . "fexpress") (conflicts . ()) (date-added . 1628915369) (dependencies . ("base")) (description . "A compilation-friendly fexpr language. (lib)") (implies . ()) (last-checked . 1632902997) (last-edit . 1628915369) (last-updated . 1629882597) (modules . ((lib "fexpress/main.rkt") (lib "fexpress/proof-of-concept.rkt"))) (name . "fexpress-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (compiler . #t) (experimental . #t) (fexpr . #t) (functional . #t) (lambda-calculus . #t) (language . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/rocketnia/fexpress.git?path=fexpress-lib#main") (tags . ("compiler" "experimental" "fexpr" "functional" "lambda-calculus" "language" "unstable")) (versions . #hash((default . #hasheq((checksum . "5a6ee4baa220472cc68fdb41bd4b106a5add9a49") (source . "https://github.com/rocketnia/fexpress.git?path=fexpress-lib#main") (source_url . "https://github.com/rocketnia/fexpress.git?path=fexpress-lib#main"))))))) ("fexpress-test" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fexpress-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fexpress-test.txt"))) (checksum . "5a6ee4baa220472cc68fdb41bd4b106a5add9a49") (checksum-error . #f) (collection . "fexpress") (conflicts . ()) (date-added . 1628915446) (dependencies . ("base" "fexpress-lib" "rackunit-lib")) (description . "A compilation-friendly fexpr language. (test)") (implies . ()) (last-checked . 1632902998) (last-edit . 1628915446) (last-updated . 1629882598) (modules . ((lib "fexpress/tests.rkt") (lib "fexpress/tests/and.rkt"))) (name . "fexpress-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (compiler . #t) (experimental . #t) (fexpr . #t) (functional . #t) (lambda-calculus . #t) (language . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/rocketnia/fexpress.git?path=fexpress-test#main") (tags . ("compiler" "experimental" "fexpr" "functional" "lambda-calculus" "language" "unstable")) (versions . #hash((default . #hasheq((checksum . "5a6ee4baa220472cc68fdb41bd4b106a5add9a49") (source . "https://github.com/rocketnia/fexpress.git?path=fexpress-test#main") (source_url . "https://github.com/rocketnia/fexpress.git?path=fexpress-test#main"))))))) ("ffi-definer-convention" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "ffi-definer-convention"))) (failure-log . "server/built/fail/ffi-definer-convention.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "5b6a361adeb1f079b9fabc80055ce592152a9d9a") (checksum-error . #f) (collection . "ffi-definer-convention") (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "No longer necessary in 6.9.0.5 and newer (it's built-in to the ffi library now)") (implies . ()) (last-checked . 1632902998) (last-edit . 1504809486) (last-updated . 1596547566) (modules . ((lib "ffi-definer-convention/ffi-definer-convention.scrbl") (lib "ffi-definer-convention/test.rkt") (lib "ffi-definer-convention/conventions.rkt") (lib "ffi-definer-convention/main.rkt"))) (name . "ffi-definer-convention") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:asumu@ccs.neu.edu . #t) (ffi . #t) (ring:1 . #t))) (source . "git://github.com/takikawa/racket-ffi-definer-convention") (tags . ("ffi")) (versions . #hash((default . #hasheq((checksum . "5b6a361adeb1f079b9fabc80055ce592152a9d9a") (source . "git://github.com/takikawa/racket-ffi-definer-convention") (source_url . "http://github.com/takikawa/racket-ffi-definer-convention/tree/master"))))))) ("ffi-utils" . #hasheq((author . "scott@thinkmoore.net") (authors . ("scott@thinkmoore.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "ffi-utils"))) (failure-log . "server/built/fail/ffi-utils.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "20fd038aad7978f6613a78cc48fae1358b90089d") (checksum-error . #f) (collection . "ffi-utils") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Helpful tools for writing FFI interfaces to C") (implies . ()) (last-checked . 1632902998) (last-edit . 1487854746) (last-updated . 1502815960) (modules . ((lib "ffi-utils/private/generate-errno.rkt") (lib "ffi-utils/errno.rkt") (lib "ffi-utils/private/includes.rkt") (lib "ffi-utils/data.rkt") (lib "ffi-utils/scribblings/ffi-utils.scrbl"))) (name . "ffi-utils") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:scott@thinkmoore.net . #t) (ffi . #t) (ring:1 . #t))) (source . "git://github.com/thinkmoore/ffi-utils") (tags . ("ffi")) (versions . #hash((default . #hasheq((checksum . "20fd038aad7978f6613a78cc48fae1358b90089d") (source . "git://github.com/thinkmoore/ffi-utils") (source_url . "http://github.com/thinkmoore/ffi-utils/tree/master"))))))) ("ffmpeg-i386-macosx-3-4" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/ffmpeg-i386-macosx-3-4.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: specified directory is not in Git respository\n  path: ffmpeg-i386-macosx\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:913:0: lift-git-directory-content\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:318:11\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:114:0: stage-package/info\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:720:0: pkg-stage\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:129:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (description . "") (implies . ()) (last-checked . 1632903034) (last-edit . 1528476314) (last-updated . 1621808250) (modules . ()) (name . "ffmpeg-i386-macosx-3-4") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ffmpeg . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-i386-macosx#ffmpeg-3.4") (tags . ("ffmpeg" "video")) (versions . #hash((default . #hasheq((checksum . "") (source . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-i386-macosx#ffmpeg-3.4") (source_url . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-i386-macosx#ffmpeg-3.4"))))))) ("ffmpeg-i386-win32" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/ffmpeg-i386-win32.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903034) (last-edit . 1497318984) (last-updated . 1622923216) (modules . ()) (name . "ffmpeg-i386-win32") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ffmpeg . #t) (ring:1 . #t) (video . #t))) (source . "git://github.com/videolang/native-pkgs?path=ffmpeg-i386-win32") (tags . ("ffmpeg" "video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "git://github.com/videolang/native-pkgs?path=ffmpeg-i386-win32") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=ffmpeg-i386-win32"))))))) ("ffmpeg-i386-win32-3-4" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ffmpeg-i386-win32-3-4.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ffmpeg-i386-win32-3-4.txt"))) (checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903095) (last-edit . 1528476372) (last-updated . 1621022418) (modules . ()) (name . "ffmpeg-i386-win32-3-4") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ffmpeg . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-i386-win32#ffmpeg-3.4") (tags . ("ffmpeg" "video")) (versions . #hash((default . #hasheq((checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (source . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-i386-win32#ffmpeg-3.4") (source_url . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-i386-win32#ffmpeg-3.4"))))))) ("ffmpeg-x86_64-macosx" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ffmpeg-x86_64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ffmpeg-x86_64-macosx.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903131) (last-edit . 1497318909) (last-updated . 1594641604) (modules . ()) (name . "ffmpeg-x86_64-macosx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ffmpeg . #t) (ring:1 . #t) (video . #t))) (source . "git://github.com/videolang/native-pkgs?path=ffmpeg-x86_64-macosx") (tags . ("ffmpeg" "video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "git://github.com/videolang/native-pkgs?path=ffmpeg-x86_64-macosx") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=ffmpeg-x86_64-macosx"))))))) ("ffmpeg-x86_64-macosx-3-4" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ffmpeg-x86_64-macosx-3-4.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ffmpeg-x86_64-macosx-3-4.txt"))) (checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "openh264-x86_64-macosx")) (description . "Bindings for ffmpeg 3.4") (implies . ()) (last-checked . 1632903191) (last-edit . 1528476144) (last-updated . 1602446415) (modules . ()) (name . "ffmpeg-x86_64-macosx-3-4") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:leif@leifandersen.net . #t) (ffmpeg . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-x86_64-macosx#ffmpeg-3.4") (tags . ("ffmpeg" "video")) (versions . #hash((default . #hasheq((checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (source . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-x86_64-macosx#ffmpeg-3.4") (source_url . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-x86_64-macosx#ffmpeg-3.4"))))))) ("ffmpeg-x86_64-win32" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/ffmpeg-x86_64-win32.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903227) (last-edit . 1497318946) (last-updated . 1613635214) (modules . ()) (name . "ffmpeg-x86_64-win32") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ffmpeg . #t) (ring:1 . #t) (video . #t))) (source . "git://github.com/videolang/native-pkgs?path=ffmpeg-x86_64-win32") (tags . ("ffmpeg" "video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "git://github.com/videolang/native-pkgs?path=ffmpeg-x86_64-win32") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=ffmpeg-x86_64-win32"))))))) ("ffmpeg-x86_64-win32-3-4" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ffmpeg-x86_64-win32-3-4.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ffmpeg-x86_64-win32-3-4.txt"))) (checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903288) (last-edit . 1528476424) (last-updated . 1602432019) (modules . ()) (name . "ffmpeg-x86_64-win32-3-4") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ffmpeg . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-x86_64-win32#ffmpeg-3.4") (tags . ("ffmpeg" "video")) (versions . #hash((default . #hasheq((checksum . "e8fb290d38e90800ffa1d105dbb540d28f931807") (source . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-x86_64-win32#ffmpeg-3.4") (source_url . "https://github.com/videolang/native-pkgs.git?path=ffmpeg-x86_64-win32#ffmpeg-3.4"))))))) ("fiberweb" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "fiberweb" "doc/fiberweb@fiberweb/index.html"))) (failure-log . "server/built/fail/fiberweb.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "c2ea40456784fa45d682bc4230b49e07f862ae78") (checksum-error . #f) (collection . "fiberweb") (conflicts . ()) (date-added . 1581496862) (dependencies . ("base" "rebellion" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "An experiment in cooperative concurrency. Wildly unimplemented.") (implies . ()) (last-checked . 1632903324) (last-edit . 1581496862) (last-updated . 1596547926) (modules . ((lib "fiberweb/main.rkt") (lib "fiberweb/main.scrbl"))) (name . "fiberweb") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (asynchronous . #t) (author:jackhfirth@gmail.com . #t) (concurrency . #t) (io . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/fiberweb.git") (tags . ("asynchronous" "concurrency" "io")) (versions . #hash((default . #hasheq((checksum . "c2ea40456784fa45d682bc4230b49e07f862ae78") (source . "https://github.com/jackfirth/fiberweb.git") (source_url . "https://github.com/jackfirth/fiberweb.git"))))))) ("file-metadata" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/file-metadata.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/file-metadata.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/file-metadata.txt"))) (checksum . "d8f90fdd911e0e97b754cb74d5963f2c3c465637") (checksum-error . #f) (collection . "file-metadata") (conflicts . ()) (dependencies . ()) (description . "Answer various questions about a file, e.g. Is this a gzip file?  \r\n\r\nTHIS IS VERY ALPHA.  Currently only supports the 'is it a gzip' question, code is ugly, etc.") (implies . ()) (last-checked . 1632903324) (last-edit . 1536690185) (last-updated . 1536695915) (modules . ((lib "file-metadata/tests/test_main.rkt") (lib "file-metadata/main.rkt") (lib "file-metadata/definitions/gzip.rkt"))) (name . "file-metadata") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:david.storrs@gmail.com . #t) (file . #t) (metadata . #t) (ring:1 . #t))) (source . "https://github.com/dstorrs/file-metadata.git") (tags . ("file" "metadata")) (versions . #hash((default . #hasheq((checksum . "d8f90fdd911e0e97b754cb74d5963f2c3c465637") (source . "https://github.com/dstorrs/file-metadata.git") (source_url . "https://github.com/dstorrs/file-metadata.git"))))))) ("file-watchers" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "file-watchers" "doc/file-watchers@file-watchers/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/file-watchers.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/file-watchers.txt"))) (checksum . "c1ac766a345a335438165ab0d13a4d8f6aec6162") (checksum-error . #f) (collection . "file-watchers") (conflicts . ()) (date-added . 1561591938) (dependencies . ("rackunit-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Sensible file watching procedures") (implies . ()) (last-checked . 1632903324) (last-edit . 1561760479) (last-updated . 1591120574) (modules . ((lib "file-watchers/main.rkt") (lib "file-watchers/threads.rkt") (lib "file-watchers/cli.rkt") (lib "file-watchers/apathetic-watch.rkt") (lib "file-watchers/intensive-watch.rkt") (lib "file-watchers/scribblings/file-watchers.scrbl") (lib "file-watchers/lists.rkt") (lib "file-watchers/filesystem.rkt") (lib "file-watchers/robust-watch.rkt"))) (name . "file-watchers") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audit . #t) (author:sage@sagegerard.com . #t) (file . #t) (file-system . #t) (filesystem . #t) (io . #t) (monitor . #t) (monitoring . #t) (ring:1 . #t) (threading . #t))) (source . "https://github.com/zyrolasting/file-watchers.git") (tags . ("audit" "file" "file-system" "filesystem" "io" "monitor" "monitoring" "threading")) (versions . #hash((default . #hasheq((checksum . "c1ac766a345a335438165ab0d13a4d8f6aec6162") (source . "https://github.com/zyrolasting/file-watchers.git") (source_url . "https://github.com/zyrolasting/file-watchers.git"))))))) ("files-viewer" . #hasheq((author . "1227847322@qq.com") (authors . ("1227847322@qq.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "files-viewer" "doc/files-viewer@files-viewer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/files-viewer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/files-viewer.txt"))) (checksum . "164d4034611a970b5eb36ae20675241f0b52e82b") (checksum-error . #f) (collection . "files-viewer") (conflicts . ()) (date-added . 1587720025) (dependencies . ("base" "gui-lib" "drracket" "rackunit-lib" "scheme-lib" "compatibility-lib" "scribble-lib" "pict-lib")) (description . "a file manager for drracket") (implies . ()) (last-checked . 1632903324) (last-edit . 1587720025) (last-updated . 1620187611) (modules . ((lib "files-viewer/private/main.rkt") (lib "files-viewer/private/popup-menu.rkt") (lib "files-viewer/private/info-instructor.rkt") (lib "files-viewer/private/gui-helpers.rkt") (lib "files-viewer/private/contents.rkt") (lib "files-viewer/private/color-scheme.rkt") (lib "files-viewer/private/fschange.rkt") (lib "files-viewer/private/path-helpers.rkt") (lib "files-viewer/private/rename-dialog.rkt") (lib "files-viewer/private/terminal.rkt") (lib "files-viewer/private/dir-control.rkt") (lib "files-viewer/hierlist/hierlist.rkt") (lib "files-viewer/tool.rkt") (lib "files-viewer/private/file-filters.rkt") (lib "files-viewer/scribblings/files-viewer.scrbl") (lib "files-viewer/hierlist/hierlist-sig.rkt") (lib "files-viewer/hierlist/hierlist-unit.rkt"))) (name . "files-viewer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:1227847322@qq.com . #t) (drracket . #t) (file-manager . #t) (ring:1 . #t))) (source . "https://github.com/MatrixForChange/files-viewer.git") (tags . ("drracket" "file-manager")) (versions . #hash((default . #hasheq((checksum . "164d4034611a970b5eb36ae20675241f0b52e82b") (source . "https://github.com/MatrixForChange/files-viewer.git") (source_url . "https://github.com/MatrixForChange/files-viewer.git"))))))) ("finalizer" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "finalizer" "doc/finalizer@finalizer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/finalizer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/finalizer.txt"))) (checksum . "74517770d70b786a3df48fd20ea9ea8059e4a641") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Trivial finalizer. Does action when object garbage collected") (implies . ()) (last-checked . 1632903325) (last-edit . 1407088564) (last-updated . 1502816067) (modules . ((lib "finalizer/main.rkt") (lib "finalizer/finalizer.scrbl"))) (name . "finalizer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (dev . #t) (ring:1 . #t))) (source . "git://github.com/Kalimehtar/finalizer") (tags . ("dev")) (versions . #hash((default . #hasheq((checksum . "74517770d70b786a3df48fd20ea9ea8059e4a641") (source . "git://github.com/Kalimehtar/finalizer") (source_url . "http://github.com/Kalimehtar/finalizer/tree/master"))))))) ("find-parent-dir" . #hasheq((author . "samth@ccs.neu.edu eric.hanchrow@gmail.com") (authors . ("samth@ccs.neu.edu" "eric.hanchrow@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/find-parent-dir.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/find-parent-dir.txt"))) (checksum . "e78d0277447d81934847166e8024edc5adea4b1c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Find parent directories matching a criterion.") (implies . ()) (last-checked . 1632903325) (last-edit . 1381252407) (last-updated . 1502816067) (modules . ((lib "find-parent-dir/main.rkt"))) (name . "find-parent-dir") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:eric.hanchrow@gmail.com . #t) (author:samth@ccs.neu.edu . #t) (file-system . #t) (ring:1 . #t))) (source . "github://github.com/samth/find-parent-dir/master") (tags . ("file-system")) (versions . #hash((default . #hasheq((checksum . "e78d0277447d81934847166e8024edc5adea4b1c") (source . "github://github.com/samth/find-parent-dir/master") (source_url . "http://github.com/samth/find-parent-dir/tree/master"))))))) ("fixture" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fixture" "doc/fixture@fixture/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fixture.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fixture.txt"))) (checksum . "fafde5528ad6491cd9e87c078f9838eabc524a87") (checksum-error . #f) (collection . "fixture") (conflicts . ()) (dependencies . ("reprovide-lang" "fancy-app" ("rackunit-lib" #:version "1.8") "base" ("disposable" #:version "0.2") "doc-coverage" "racket-doc" "rackunit-doc" "scribble-lib")) (description . "Provides test fixtures: resources that are automatically created and destroyed for each RackUnit test case") (implies . ()) (last-checked . 1632903325) (last-edit . 1504200527) (last-updated . 1505795359) (modules . ((lib "fixture/scribblings/util.rkt") (lib "fixture/tests/main.rkt") (lib "fixture/main.rkt") (lib "fixture/base.rkt") (lib "fixture/scribblings/base.rkt") (lib "fixture/tests/util.rkt") (lib "fixture/scribblings/main.scrbl") (lib "fixture/rackunit.rkt"))) (name . "fixture") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (disposable . #t) (experimental . #t) (io . #t) (rackunit . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/jackfirth/racket-fixture") (tags . ("disposable" "experimental" "io" "rackunit" "testing")) (versions . #hash((default . #hasheq((checksum . "fafde5528ad6491cd9e87c078f9838eabc524a87") (source . "git://github.com/jackfirth/racket-fixture") (source_url . "http://github.com/jackfirth/racket-fixture/tree/master"))))))) ("flash-card" . #hasheq((author . "JasonLongLe@gmail.com") (authors . ("JasonLongLe@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/flash-card.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "41d66dd1347aa69b744f310067f99834d9087de9") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1573000065) (dependencies . ("https://github.com/thoughtstem/meta-engine.git?path=meta-engine" "threading" "image-coloring")) (description . "A language for creating interactive digital flash cards.") (implies . ()) (last-checked . 1632903325) (last-edit . 1573068597) (last-updated . 1573592811) (modules . ((lib "flash-card/main.rkt") (lib "flash-card/scribblings/manual.scrbl") (lib "flash-card/lang.rkt") (lib "flash-card/examples.rkt") (lib "flash-card/lang/main.rkt"))) (name . "flash-card") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:JasonLongLe@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/aBlender/flash-card.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "41d66dd1347aa69b744f310067f99834d9087de9") (source . "https://github.com/aBlender/flash-card.git") (source_url . "https://github.com/aBlender/flash-card.git"))))))) ("flexpr" . #hasheq((author . "racket@greghendershott.com") (authors . ("racket@greghendershott.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "flexpr" "doc/flexpr@flexpr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/flexpr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/flexpr.txt"))) (checksum . "a547ca94094a2090f12b0028b634da0b08d42df8") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" ("racket" "6.0.1") "at-exp-lib" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . " Expressions rendered as both XML and JSON") (implies . ()) (last-checked . 1632903326) (last-edit . 1503266391) (last-updated . 1502816068) (modules . ((lib "flexpr/flexpr.scrbl") (lib "flexpr/main.rkt"))) (name . "flexpr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@greghendershott.com . #t) (json . #t) (ring:1 . #t) (xml . #t))) (source . "git://github.com/greghendershott/flexpr") (tags . ("json" "xml")) (versions . #hash((default . #hasheq((checksum . "a547ca94094a2090f12b0028b634da0b08d42df8") (source . "git://github.com/greghendershott/flexpr") (source_url . "http://github.com/greghendershott/flexpr/tree/master"))))))) ("fltest" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/fltest.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fltest.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fltest.txt"))) (checksum . "8d2d686a7d940accf540b74a9409d3b51ea980eb") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1600713973) (dependencies . ()) (description . "") (implies . ()) (last-checked . 1632903326) (last-edit . 1600713973) (last-updated . 1600713973) (modules . ((lib "fltest/main.rkt"))) (name . "fltest") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:samth@ccs.neu.edu . #t) (ring:1 . #t))) (source . "https://github.com/samth/fltest.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8d2d686a7d940accf540b74a9409d3b51ea980eb") (source . "https://github.com/samth/fltest.git") (source_url . "https://github.com/samth/fltest.git"))))))) ("fluent" . #hasheq((author . "racket@rogerkeays.com") (authors . ("racket@rogerkeays.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fluent.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fluent.txt"))) (checksum . "b8bc82e25a35451ba3136f393157e380e6f4837f") (checksum-error . #f) (collection . "fluent") (conflicts . ()) (date-added . 1615128751) (dependencies . ("base" "rackunit")) (description . "UNIX style pipes and a lambda shorthand syntax to make your code more readable.") (implies . ()) (last-checked . 1632903327) (last-edit . 1615130596) (last-updated . 1616514827) (modules . ((lib "fluent/main.rkt") (lib "fluent/main-test-rename.rkt") (lib "fluent/unicode.rkt") (lib "fluent/short-test.rkt") (lib "fluent/short.rkt") (lib "fluent/unicode-test.rkt") (lib "fluent/main-test-default.rkt"))) (name . "fluent") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:racket@rogerkeays.com . #t) (functional . #t) (lambda . #t) (lang-extension . #t) (ring:1 . #t))) (source . "https://github.com/rogerkeays/racket-fluent.git#main") (tags . ("functional" "lambda" "lang-extension")) (versions . #hash((default . #hasheq((checksum . "b8bc82e25a35451ba3136f393157e380e6f4837f") (source . "https://github.com/rogerkeays/racket-fluent.git#main") (source_url . "https://github.com/rogerkeays/racket-fluent.git#main"))))))) ("fme" . #hasheq((author . "sgtamk@gmail.com") (authors . ("sgtamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fme" "doc/fme@fme/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fme.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fme.txt"))) (checksum . "63075d432e7803b2822a78568306c29a6fde557c") (checksum-error . #f) (collection . "fme") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Fourier-Motzkin elimination for integer inequality satisfiability") (implies . ()) (last-checked . 1632903327) (last-edit . 1476382380) (last-updated . 1502816068) (modules . ((lib "fme/main.rkt") (lib "fme/private/fme-utils.rkt") (lib "fme/private/fme.rkt") (lib "fme/private/leq.rkt") (lib "fme/fme.scrbl") (lib "fme/private/benchmarks.rkt") (lib "fme/private/lexp.rkt"))) (name . "fme") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sgtamk@gmail.com . #t) (math . #t) (ring:1 . #t))) (source . "git://github.com/pnwamk/fme#master") (tags . ("math")) (versions . #hash((default . #hasheq((checksum . "63075d432e7803b2822a78568306c29a6fde557c") (source . "git://github.com/pnwamk/fme#master") (source_url . "http://github.com/pnwamk/fme/tree/master#master"))))))) ("fmt" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "d8314d080e91a9462e6ee2b76bc36d69240d1e91") (checksum-error . #f) (collection . "fmt") (conflicts . ()) (date-added . 1632695226) (dependencies . ("pprint-compact" "syntax-color-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "an extensible code formatter for Racket") (implies . ()) (last-checked . 1632903327) (last-edit . 1632695226) (last-updated . 1632903327) (modules . ((lib "fmt/conventions-util.rkt") (lib "fmt/.fmt.rkt") (lib "fmt/scribblings/util.rkt") (lib "fmt/tests/large.rkt") (lib "fmt/scribblings/fmt.scrbl") (lib "fmt/main.rkt") (lib "fmt/raco.rkt") (lib "fmt/core.rkt") (lib "fmt/tests/general.rkt") (lib "fmt/scribblings/examples/example.rkt") (lib "fmt/conventions.rkt"))) (name . "fmt") (ring . 2) (search-terms . #hasheq((author:sorawee.pwase@gmail.com . #t) (formatter . #t) (ring:2 . #t))) (source . "https://github.com/sorawee/fmt.git") (tags . ("formatter")) (versions . #hash((default . #hasheq((checksum . "d8314d080e91a9462e6ee2b76bc36d69240d1e91") (source . "https://github.com/sorawee/fmt.git") (source_url . "https://github.com/sorawee/fmt.git"))))))) ("font-finder" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "font-finder" "doc/font-finder@font-finder/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/font-finder.txt") (test-failure-log . "server/built/test-fail/font-finder.txt") (test-success-log . #f))) (checksum . "fa316eef64ee8525ad741479f132246b4a0acf85") (checksum-error . #f) (collection . "font-finder") (conflicts . ()) (date-added . 1585796965) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Locate font files on your computer") (implies . ()) (last-checked . 1632903328) (last-edit . 1585796965) (last-updated . 1585796965) (modules . ((lib "font-finder/scribblings/font-finder.scrbl") (lib "font-finder/main.rkt"))) (name . "font-finder") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david.storrs@gmail.com . #t) (filesystem . #t) (font . #t) (fonts . #t) (ring:1 . #t))) (source . "https://github.com/dstorrs/font-finder.git") (tags . ("filesystem" "font" "fonts")) (versions . #hash((default . #hasheq((checksum . "fa316eef64ee8525ad741479f132246b4a0acf85") (source . "https://github.com/dstorrs/font-finder.git") (source_url . "https://github.com/dstorrs/font-finder.git"))))))) ("fontconfig" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/fontconfig.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fontconfig.txt") (test-failure-log . "server/built/test-fail/fontconfig.txt") (test-success-log . #f))) (checksum . "3c4332aa72fff0ddf1172d442f30954dffde616b") (checksum-error . #f) (collection . "fontconfig") (conflicts . ()) (date-added . 1561082305) (dependencies . (("base" #:version "6.9.0.5"))) (description . "FFI bindings for fontconfig") (implies . ()) (last-checked . 1632903328) (last-edit . 1561082305) (last-updated . 1561162310) (modules . ((lib "fontconfig/main.rkt") (lib "fontconfig/test.rkt") (lib "fontconfig/fontconfig.rkt"))) (name . "fontconfig") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:asumu@ccs.neu.edu . #t) (ffi . #t) (ring:1 . #t))) (source . "https://github.com/takikawa/racket-fontconfig.git") (tags . ("ffi")) (versions . #hash((default . #hasheq((checksum . "3c4332aa72fff0ddf1172d442f30954dffde616b") (source . "https://github.com/takikawa/racket-fontconfig.git") (source_url . "https://github.com/takikawa/racket-fontconfig.git"))))))) ("fontland" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fontland.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fontland.txt"))) (checksum . "519cebbbbf87f78c2be9e57b97c674964a86f181") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661206) (dependencies . ("crc32c" "db-lib" ("base" #:version "7.1") "beautiful-racket-lib" "debug" "draw-lib" "rackunit-lib" "png-image" "sugar" "xenomorph")) (description . "font processing [in development]") (implies . ()) (last-checked . 1632903328) (last-edit . 1556661206) (last-updated . 1621361390) (modules . ((lib "fontland/table/cff/cff-index.rkt") (lib "fontland/unsafe/freetype.rkt") (lib "fontland/font-path.rkt") (lib "fontland/struct.rkt") (lib "fontland/table/OS2.rkt") (lib "fontland/woff2-directory.rkt") (lib "fontland/script.rkt") (lib "fontland/table/hhea.rkt") (lib "fontland/glyphrun.rkt") (lib "fontland/unsafe/fontconfig.rkt") (lib "fontland/table/hmtx.rkt") (lib "fontland/table/CFF_.rkt") (lib "fontland/ttf-glyph.rkt") (lib "fontland/cff-glyph.rkt") (lib "fontland/test/subset.rkt") (lib "fontland/bbox.rkt") (lib "fontland/unsafe/harfbuzz.rkt") (lib "fontland/deque.rkt") (lib "fontland/table/head.rkt") (lib "fontland/test/directory.rkt") (lib "fontland/table/fpgm.rkt") (lib "fontland/table-stream.rkt") (lib "fontland/table/post.rkt") (lib "fontland/subset.rkt") (lib "fontland/table/cff/cff-operand.rkt") (lib "fontland/test/index.rkt") (lib "fontland/table/cff/cff-encodings.rkt") (lib "fontland/test/metadata.rkt") (lib "fontland/main.rkt") (lib "fontland/table/cff/cff-private-dict.rkt") (lib "fontland/table/prep.rkt") (lib "fontland/table/loca.rkt") (lib "fontland/table/cff/cff-dict.rkt") (lib "fontland/table/glyf.rkt") (lib "fontland/table/cff/cff-charsets.rkt") (lib "fontland/font.rkt") (lib "fontland/test/glyphs.rkt") (lib "fontland/directory.rkt") (lib "fontland/table/maxp.rkt") (lib "fontland/table/cff/cff-struct.rkt") (lib "fontland/path.rkt") (lib "fontland/glyph-position.rkt") (lib "fontland/table/cvt_.rkt") (lib "fontland/unsafe/harfbuzz-helper.rkt") (lib "fontland/woff-directory.rkt") (lib "fontland/table/cff/cff-standard-strings.rkt") (lib "fontland/table/cff/cff-pointer.rkt") (lib "fontland/db.rkt") (lib "fontland/tables.rkt") (lib "fontland/helper.rkt") (lib "fontland/glyph.rkt") (lib "fontland/test/glyph_mapping.rkt") (lib "fontland/table/cff/cff-font.rkt") (lib "fontland/zlib.rkt") (lib "fontland/table/cff/cff-top.rkt"))) (name . "fontland") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mb@mbtype.com . #t) (fonts . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/fontland.git") (tags . ("fonts")) (versions . #hash((default . #hasheq((checksum . "519cebbbbf87f78c2be9e57b97c674964a86f181") (source . "https://github.com/mbutterick/fontland.git") (source_url . "https://github.com/mbutterick/fontland.git"))))))) ("for-helpers" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "for-helpers" "doc/for-helpers@for-helpers/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/for-helpers.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/for-helpers.txt"))) (checksum . "3753dbce905e5c115e8107a9411249a12a06fd64") (checksum-error . #f) (collection . "for-helpers") (conflicts . ()) (date-added . 1596103707) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "sandbox-lib")) (description . "Helper macros for racket for macros to avoid intermediate sequences") (implies . ()) (last-checked . 1632903329) (last-edit . 1596103707) (last-updated . 1596706146) (modules . ((lib "for-helpers/extra.rkt") (lib "for-helpers/tests/test-extra.rkt") (lib "for-helpers/private/common.rkt") (lib "for-helpers/tests/bench.rkt") (lib "for-helpers/main.rkt") (lib "for-helpers/private/helper.rkt") (lib "for-helpers/private/main.rkt") (lib "for-helpers/scribblings/for-helpers.scrbl") (lib "for-helpers/tests/test.rkt") (lib "for-helpers/private/extra.rkt") (lib "for-helpers/tests/bench-extra.rkt") (lib "for-helpers/private/optimize.rkt"))) (name . "for-helpers") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t) (utility . #t))) (source . "https://github.com/yjqww6/for-helpers.git") (tags . ("utility")) (versions . #hash((default . #hasheq((checksum . "3753dbce905e5c115e8107a9411249a12a06fd64") (source . "https://github.com/yjqww6/for-helpers.git") (source_url . "https://github.com/yjqww6/for-helpers.git"))))))) ("forge" . #hasheq((author . "thomas_del_vecchio@brown.edu charles_cutting@brown.edu tim_nelson@brown.edu") (authors . ("thomas_del_vecchio@brown.edu" "charles_cutting@brown.edu" "tim_nelson@brown.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/forge.txt") (test-failure-log . "server/built/test-fail/forge.txt") (test-success-log . #f))) (checksum . "55feaf27fde573546aa316e0a986db028505b229") (checksum-error . #f) (collection . "forge") (conflicts . ()) (date-added . 1579888770) (dependencies . ("base" "syntax-classes" "br-parser-tools-lib" "brag-lib" "beautiful-racket" "syntax-color-lib" "net-lib" "profile-lib" "crypto-lib" "rackunit-lib" "web-server-lib" "draw-lib" "mischief" "gui-lib" "drracket-plugin-lib" "pretty-format" "predicates" "basedir" "request" "sha")) (description . "A model-finding language with Alloy-adjacent syntax.") (implies . ()) (last-checked . 1632903329) (last-edit . 1614606514) (last-updated . 1625827412) (modules . ((lib "forge/racket-rfc6455/net/rfc6455/service-mapper.rkt") (lib "forge/sigs-functional.rkt") (lib "forge/testme/lang/expander.rkt") (lib "forge/tests/forge/relations/set.rkt") (lib "forge/amalgam/lift-bounds/lift-bounds_helpers.rkt") (lib "forge/tests/forge-core/instances/basic-instances.rkt") (lib "forge/demo/life.rkt") (lib "forge/racket-rfc6455/net/rfc6455/examples/cat.rkt") (lib "forge/example/forge/simple-graph.rkt") (lib "forge/amalgam/tests/forge_ex.rkt") (lib "forge/tests/forge/formulas/booleanFormulaOperators.rkt") (lib "forge/tests/forge/electrum/always-tests.rkt") (lib "forge/tests/forge/target/far_retargeting.rkt") (lib "forge/testme/library.rkt") (lib "forge/amalgam/tests/forge_ex_test.rkt") (lib "forge/pardinus-cli/server/error-tests.rkt") (lib "forge/lang/ast.rkt") (lib "forge/kodkod-cli/server/server-common.rkt") (lib "forge/tests/forge/sigs/abstractSigs.rkt") (lib "forge/tests/forge/electrum/social-network.rkt") (lib "forge/tests/forge-core/other/emptyJoinError.rkt") (lib "forge/examples/test.rkt") (lib "forge/tests/forge/formulas/quantifiedFormulas.rkt") (lib "forge/tests/forge/expressions/orderOfOpsExprs.rkt") (lib "forge/tests/forge/electrum/traffic-light.rkt") (lib "forge/tests/forge/formulas/multiplicityFormulas.rkt") (lib "forge/tests/forge-functional/instances/excluded-extender-value.rkt") (lib "forge/check-ex-spec/core/lang/reader.rkt") (lib "forge/tests/forge-functional/instances/eval-int-match.rkt") (lib "forge/examples/example.rkt") (lib "forge/tests/forge-functional/formulas/quantifiedFormulas.rkt") (lib "forge/example/forge/coercing-ints.rkt") (lib "forge/OLD/bugs/quantifierBug.rkt") (lib "forge/examples/tttnew.rkt") (lib "forge/racket-rfc6455/net/rfc6455/examples/echo-server.rkt") (lib "forge/amalgam/userStudies/mturk_spec.rkt") (lib "forge/tests/forge/expressions/orderOfOpsLogical.rkt") (lib "forge/examples/smallsigstest.rkt") (lib "forge/tests/forge/electrum/past-time.rkt") (lib "forge/tests/forge/electrum/after-tests.rkt") (lib "forge/new-mode/examples/basic-example-core.rkt") (lib "forge/tests/forge-core/sigs/oneSigs.rkt") (lib "forge/test4.rkt") (lib "forge/tests/forge-core/formulas/quantifiedFormulas.rkt") (lib "forge/testme/examples/ta-template/summarize.rkt") (lib "forge/tests/forge/other/decl-order.rkt") (lib "forge/tests/forge/examples/sudoku.rkt") (lib "forge/example/forge/tristan-bug.rkt") (lib "forge/example/store/testing.rkt") (lib "forge/example/forge-core/setting-solver.rkt") (lib "forge/amalgam/tests/substitutor_test.rkt") (lib "forge/new-mode/lang/reader.rkt") (lib "forge/examples/simpleTrace2.rkt") (lib "forge/example/forge-core/graphs.rkt") (lib "forge/example/store/testing2.rkt") (lib "forge/example/forge/graphs.rkt") (lib "forge/racket-rfc6455/net/rfc6455/examples/test-server.rkt") (lib "forge/example/store/edge-size-bug.rkt") (lib "forge/new-mode/core/main.rkt") (lib "forge/example/forge-core/import2.rkt") (lib "forge/racket-rfc6455/net/rfc6455/hybi00/dispatcher.rkt") (lib "forge/OLD/bugs/unreferencedAtomsDontPopulateBug.rkt") (lib "forge/kodkod-cli/server/kkcli-reader.rkt") (lib "forge/example/forge-core/pardinus2.rkt") (lib "forge/tests/forge/electrum/basic-temporal-example.rkt") (lib "forge/racket-rfc6455/net/rfc6455/examples/test-service-mapper.rkt") (lib "forge/tests/forge/target/hamming_runs.rkt") (lib "forge/examples/circular.rkt") (lib "forge/tests/forge-core/ints/intStructure.rkt") (lib "forge/example/forge/check.rkt") (lib "forge/testme/examples/sample-ta/sample/chaffs/sample-chaff2.rkt") (lib "forge/racket-rfc6455/net/rfc6455/rfc6455/client.rkt") (lib "forge/example/forge-core/shutdown.rkt") (lib "forge/examples/simplerTrace.rkt") (lib "forge/tests/forge-core/ints/intOperators.rkt") (lib "forge/tests/forge-functional/other/multiple-runs.rkt") (lib "forge/check-ex-spec/main.rkt") (lib "forge/example/forge-core/relation-breakers.rkt") (lib "forge/kodkod-cli/server/error-tests.rkt") (lib "forge/kodkod-cli/server/log.rkt") (lib "forge/testme/examples/sample-student/student-sample-core.rkt") (lib "forge/tests/forge/ints/intStructure.rkt") (lib "forge/tests/forge-core/other/ast-nodes.rkt") (lib "forge/examples/ADTtrace.rkt") (lib "forge/tests/forge/target/far_fixed.rkt") (lib "forge/racket-rfc6455/net/rfc6455/hybi00/handshake.rkt") (lib "forge/tests/forge-functional/electrum/non-temporal-var-errors.rkt") (lib "forge/breaks.rkt") (lib "forge/example/store/quant-bug.rkt") (lib "forge/tests/forge-functional/electrum/trace-length-errors.rkt") (lib "forge/tests/forge-core/sigs/basicSigs.rkt") (lib "forge/example/store/with-command/make-c-sig.rkt") (lib "forge/example/store/with-command/make-b-sig.rkt") (lib "forge/amalgam/userStudies/KittyBacon.rkt") (lib "forge/amalgam/desugar/desugar_helpers.rkt") (lib "forge/tests/forge/relations/lone.rkt") (lib "forge/examples/traceBreak.rkt") (lib "forge/example/forge-core/small.rkt") (lib "forge/pardinus-cli/server/log.rkt") (lib "forge/tests/forge/ints/intComparators.rkt") (lib "forge/tests/forge/target/close_fixed.rkt") (lib "forge/amalgam/userStudies/test.rkt") (lib "forge/check-ex-spec/examples/sample-ta/sample/chaffs/sample-chaff1.rkt") (lib "forge/check-ex-spec/library/commands.rkt") (lib "forge/tests/forge-core/instances/excluded-extender-value.rkt") (lib "forge/tests/evaluator.rkt") (lib "forge/example/forge/unbound-identifier-bug.rkt") (lib "forge/tests/forge-core/formulas/booleanFormulaOperators.rkt") (lib "forge/lang/alloy-syntax/indenter.rkt") (lib "forge/kodkod-cli/server/kkcli-expander.rkt") (lib "forge/examples/hopsBetweenCities.rkt") (lib "forge/pardinus-cli/server/server.rkt") (lib "forge/racket-rfc6455/net/rfc6455/private/connection-manager.rkt") (lib "forge/tests/forge/electrum/var-can-force-var-changes.rkt") (lib "forge/tests/forge/electrum/example-light-puzzle.rkt") (lib "forge/tests/forge-core/ints/intComparators.rkt") (lib "forge/tests/forge/target/close_retargeting.rkt") (lib "forge/racket-rfc6455/net/rfc6455/rfc6455/conn.rkt") (lib "forge/tests/forge-core/electrum/non-temporal-next.rkt") (lib "forge/example/store/meeting-bug.rkt") (lib "forge/sigs.rkt") (lib "forge/racket-rfc6455/net/rfc6455/timeout.rkt") (lib "forge/testme/lang/reader.rkt") (lib "forge/OLD/bugs/func-bug.rkt") (lib "forge/tests/forge-core/other/multiple-runs.rkt") (lib "forge/examples/test2.rkt") (lib "forge/tests/forge/other/instances.rkt") (lib "forge/tests/forge-functional/formulas/multiplicityFormulas.rkt") (lib "forge/examples/eval-thing.rkt") (lib "forge/examples/intTests.rkt") (lib "forge/tests/forge-functional/sigs/basicSigs.rkt") (lib "forge/pardinus-cli/server/server-common.rkt") (lib "forge/examples/kittybacon.rkt") (lib "forge/testme/examples/sample-student/student-sample-surface.rkt") (lib "forge/examples/checkXSpecTests.rkt") (lib "forge/tests/forge/electrum/non-var-can-stop-var-changes.rkt") (lib "forge/kodkod-cli/server/server.rkt") (lib "forge/examples/undirectedtree.rkt") (lib "forge/examples/goatswolves3.rkt") (lib "forge/racket-rfc6455/net/rfc6455/examples/client.rkt") (lib "forge/tests/forge-core/expressions/setComprehensions.rkt") (lib "forge/lang/reader.rkt") (lib "forge/tests/forge-functional/instances/basic-instances.rkt") (lib "forge/translate-to-kodkod-cli.rkt") (lib "forge/translate-from-kodkod-cli.rkt") (lib "forge/new-mode/library/public-utilities.rkt") (lib "forge/tests/forge-functional/examples/spanning-tree.rkt") (lib "forge/tests/forge-core/sigs/abstractSigs.rkt") (lib "forge/amalgam/substitutor/substitutor.rkt") (lib "forge/tests/forge/ints/intConverters.rkt") (lib "forge/amalgam/tests/desugar_test.rkt") (lib "forge/example/forge-core/testing-test.rkt") (lib "forge/tests/forge/sigs/extendingSigs.rkt") (lib "forge/testme/core/main.rkt") (lib "forge/OLD/OLD/traces/addRemove.rkt") (lib "forge/examples/crypto.rkt") (lib "forge/tests/forge-core/instances/atoms.rkt") (lib "forge/example/forge-core/testing-merge.rkt") (lib "forge/tests/forge/electrum/eventually-tests.rkt") (lib "forge/tests/forge-core/expressions/expressionOperators.rkt") (lib "forge/amalgam/desugar/desugar.rkt") (lib "forge/core/main.rkt") (lib "forge/example/store/quant-bug2.rkt") (lib "forge/racket-rfc6455/net/rfc6455/examples/time-client-with-threads.rkt") (lib "forge/racket-rfc6455/net/rfc6455/examples/time-server.rkt") (lib "forge/new-mode/lang/expander.rkt") (lib "forge/tests/forge-functional/ints/intConverters.rkt") (lib "forge/check-ex-spec/examples/sample-ta/sample/wheats/sample-wheat.rkt") (lib "forge/racket-rfc6455/net/rfc6455/hybi00/conn.rkt") (lib "forge/racket-rfc6455/net/rfc6455/rfc6455/handshake.rkt") (lib "forge/tests/forge-core/electrum/temporal-next.rkt") (lib "forge/examples/bindTests.rkt") (lib "forge/tests/forge/electrum/var-vs-non-var-rels.rkt") (lib "forge/example/forge-core/pardinus.rkt") (lib "forge/examples/fancyBoundsTests.rkt") (lib "forge/amalgam/userStudies/test-model2.rkt") (lib "forge/check-ex-spec/demo/demo-suite.rkt") (lib "forge/examples/token_test.rkt") (lib "forge/examples/dir/file.rkt") (lib "forge/examples/Untitled.rkt") (lib "forge/tests/forge-core/sigs/extendingSigs.rkt") (lib "forge/new-mode/examples/basic-example-surface.rkt") (lib "forge/drracket-link.rkt") (lib "forge/tests/forge/examples/booleanLogic.rkt") (lib "forge/OLD/OLD/old-tests/basicGraph.rkt") (lib "forge/examples/internal/highlighting-experiment.rkt") (lib "forge/tests/forge/sigs/basicSigs.rkt") (lib "forge/testme/library/commands.rkt") (lib "forge/example/store/new-bug.rkt") (lib "forge/example/forge/instances.rkt") (lib "forge/OLD/OLD/old-tests/instances.rkt") (lib "forge/examples/errors/error-test-ast.rkt") (lib "forge/tests/forge/electrum/var-vs-non-var-sigs.rkt") (lib "forge/testme/main.rkt") (lib "forge/lang/expander.rkt") (lib "forge/tests/forge/sigs/givenBounds.rkt") (lib "forge/examples/soundBreakTests.rkt") (lib "forge/server/eval-model.rkt") (lib "forge/racket-rfc6455/net/rfc6455/dispatcher.rkt") (lib "forge/tests/forge/relations/one.rkt") (lib "forge/example/store/scripting-preds.rkt") (lib "forge/example/forge/transition-system.rkt") (lib "forge/tests/forge-functional/instances/eval-expr-match.rkt") (lib "forge/main.rkt") (lib "forge/check-ex-spec/core/main.rkt") (lib "forge/lang/alloy-syntax/parser.rkt") (lib "forge/OLD/bugs/restrictionOperatorBug.rkt") (lib "forge/example/store/edge-size-bug-forge.rkt") (lib "forge/pardinus-cli/server/kkcli-trace.rkt") (lib "forge/tests/forge-functional/expressions/expressionOperators.rkt") (lib "forge/tests/forge-functional/sigs/extendingSigs.rkt") (lib "forge/tests/forge/other/univIdenRTC.rkt") (lib "forge/logging/sigs.rkt") (lib "forge/amalgam/lift-bounds/lift-bounds.rkt") (lib "forge/tests/forge/formulas/setFormulaOperators.rkt") (lib "forge/examples/test0.rkt") (lib "forge/racket-rfc6455/net/rfc6455/client.rkt") (lib "forge/server/modelToXML.rkt") (lib "forge/example/store/tainting/tainting.rkt") (lib "forge/tests/forge-functional/formulas/booleanFormulaOperators.rkt") (lib "forge/examples/address2_parsed.rkt") (lib "forge/tests/forge-core/examples/testing.rkt") (lib "forge/example/store/old-forge.rkt") (lib "forge/kodkod-cli/server/intTests2.rkt") (lib "forge/example/store/tainting/some-defs.rkt") (lib "forge/lang/bounds.rkt") (lib "forge/examples/intTests2.rkt") (lib "forge/shared.rkt") (lib "forge/example/store/forge-file.rkt") (lib "forge/examples/soundBreakTests3.rkt") (lib "forge/tests/forge-core/expressions/ifte-performance.rkt") (lib "forge/kodkod-cli/server/kkcli-trace.rkt") (lib "forge/example/forge-core/basic-relation.rkt") (lib "forge/amalgam.rkt") (lib "forge/racket-rfc6455/net/rfc6455/url.rkt") (lib "forge/sigs-structs.rkt") (lib "forge/testme/examples/sample-ta/sample/wheats/sample-wheat.rkt") (lib "forge/example/forge-core/evaluating.rkt") (lib "forge/new-mode/main.rkt") (lib "forge/examples/sudoku.rkt") (lib "forge/check-ex-spec/lang/expander.rkt") (lib "forge/amalgam/tests/amalgam_tests.rkt") (lib "forge/example/forge-core/transition-system.rkt") (lib "forge/check-ex-spec/examples/ta-template/summarize.rkt") (lib "forge/examples/simpleTrace.rkt") (lib "forge/example/forge-core/import1.rkt") (lib "forge/check-ex-spec/lang/reader.rkt") (lib "forge/example/forge/basic-core.rkt") (lib "forge/pardinus-cli/server/kkcli-reader.rkt") (lib "forge/examples/traceSyntax.rkt") (lib "forge/tests/forge/electrum/always-true.rkt") (lib "forge/example/new-mode/new-mode-fancy.rkt") (lib "forge/amalgam/userStudies/un-commentedKittyBacon.rkt") (lib "forge/tests/forge/electrum/prime-check.rkt") (lib "forge/tests/forge/ints/intOperators.rkt") (lib "forge/tests/forge-functional/formulas/setFormulaOperators.rkt") (lib "forge/pardinus-cli/server/intTests2.rkt") (lib "forge/tests/forge-core/ints/intConverters.rkt") (lib "forge/tests/forge-functional/other/ast-nodes.rkt") (lib "forge/tests/forge-functional/ints/intOperators.rkt") (lib "forge/amalgam/tests/forge_ex2.rkt") (lib "forge/example/store/forge-core-file.rkt") (lib "forge/OLD/OLD/old-tests/plinear.rkt") (lib "forge/examples/soundBreakTests2.rkt") (lib "forge/amalgam/tests/desugar_helpers_test.rkt") (lib "forge/examples/address.rkt") (lib "forge/tests/forge-core/electrum/temporal-next-PvsC.rkt") (lib "forge/tests/forge/sigs/oneSigs.rkt") (lib "forge/examples/simplest.rkt") (lib "forge/pardinus-cli/server/kkcli-expander.rkt") (lib "forge/kodkod-cli/server/kks.rkt") (lib "forge/new-mode/library/private-utilities.rkt") (lib "forge/examples/namedAtoms.rkt") (lib "forge/testme/examples/sample-ta/sample/chaffs/sample-chaff1.rkt") (lib "forge/OLD/test-evaluator.rkt") (lib "forge/amalgam/desugar/tuple2Expr.rkt") (lib "forge/amalgam/tests/lift-bounds_helpers_tests.rkt") (lib "forge/last-checker.rkt") (lib "forge/examples/abc.rkt") (lib "forge/tests/forge-functional/sigs/oneSigs.rkt") (lib "forge/examples/address2.rkt") (lib "forge/example/forge-core/ints.rkt") (lib "forge/examples/errors/error-test-forge.rkt") (lib "forge/examples/tttboards.rkt") (lib "forge/lang/alloy-syntax/colorer.rkt") (lib "forge/tests/forge/electrum/cities.rkt") (lib "forge/tests/forge-functional/instances/atoms.rkt") (lib "forge/server/forgeserver.rkt") (lib "forge/new-mode/library.rkt") (lib "forge/examples/goatswolves2.rkt") (lib "forge/example/forge-core/contrasting.rkt") (lib "forge/tests/forge-functional/expressions/setComprehensions.rkt") (lib "forge/example/store/minimal-quant-bug.rkt") (lib "forge/racket-rfc6455/net/rfc6455/examples/time-client-with-sync.rkt") (lib "forge/lang/alloy-syntax/lexer.rkt") (lib "forge/logging/logging.rkt") (lib "forge/OLD/OLD/old-tests/skolemOptions.rkt") (lib "forge/examples/graph.rkt") (lib "forge/evaluator.rkt") (lib "forge/tests/forge-functional/examples/testing.rkt") (lib "forge/tests/forge-core/formulas/setFormulaOperators.rkt") (lib "forge/tests/forge/expressions/setComprehensions.rkt") (lib "forge/check-ex-spec/examples/sample-student/student-sample-core.rkt") (lib "forge/core/lang/reader.rkt") (lib "forge/tool.rkt") (lib "forge/tests/forge-functional/electrum/temporal-next.rkt") (lib "forge/drracket-gui.rkt") (lib "forge/example/forge/basic.rkt") (lib "forge/example/store/new-bug2.rkt") (lib "forge/examples/traceComparison.rkt") (lib "forge/racket-rfc6455/net/rfc6455/conn-api.rkt") (lib "forge/check-ex-spec/examples/sample-ta/sample/chaffs/sample-chaff2.rkt") (lib "forge/tests/forge-functional/other/emptyJoinError.rkt") (lib "forge/example/forge-core/partial-instance.rkt") (lib "forge/racket-rfc6455/net/rfc6455/http.rkt") (lib "forge/testme/library/download-file.rkt") (lib "forge/tests/forge-core/electrum/trace-length-errors.rkt") (lib "forge/examples/higherOrderHack.rkt") (lib "forge/example/store/with-command/local-import.rkt") (lib "forge/examples/errors/error-test-paren.rkt") (lib "forge/racket-rfc6455/net/rfc6455.rkt") (lib "forge/new-mode/core/lang/reader.rkt") (lib "forge/tests/forge/expressions/expressionOperators.rkt") (lib "forge/example/new-mode/new-mode-core.rkt") (lib "forge/tests/forge-functional/ints/intComparators.rkt") (lib "forge/racket-rfc6455/net/rfc6455/rfc6455/dispatcher.rkt") (lib "forge/tests/forge-core/electrum/non-temporal-var-errors.rkt") (lib "forge/racket-rfc6455/net/rfc6455/server.rkt") (lib "forge/examples/address_parsed.rkt") (lib "forge/example/forge-core/info-maps.rkt") (lib "forge/examples/blah.rkt") (lib "forge/OLD/OLD/old-tests/intConversion.rkt") (lib "forge/racket-rfc6455/net/rfc6455/hybi00/client.rkt") (lib "forge/example/forge-core/importing.rkt") (lib "forge/new-mode/library/commands.rkt") (lib "forge/examples/state-machine-inst.rkt") (lib "forge/send-to-kodkod.rkt") (lib "forge/examples/booleanLogic.rkt") (lib "forge/tests/forge-functional/sigs/abstractSigs.rkt") (lib "forge/tests/forge-functional/electrum/non-temporal-next.rkt") (lib "forge/pardinus-cli/server/kks.rkt") (lib "forge/OLD/OLD/instances.rkt") (lib "forge/example/forge-core/multiple-import.rkt") (lib "forge/example/forge/importing.rkt") (lib "forge/amalgam/tests/lift-bounds_test.rkt") (lib "forge/lazy-tree.rkt") (lib "forge/example/forge-core/extending-ints.rkt") (lib "forge/kodkod-cli/server/kkcli-test.rkt") (lib "forge/tests/forge-functional/expressions/ifte-performance.rkt") (lib "forge/tests/forge-core/formulas/multiplicityFormulas.rkt") (lib "forge/testme/core/lang/reader.rkt") (lib "forge/check-ex-spec/examples/sample-student/student-sample-surface.rkt") (lib "forge/tests/forge-functional/electrum/temporal-next-PvsC.rkt") (lib "forge/example/forge-core/read-from-file.rkt") (lib "forge/examples/life.rkt") (lib "forge/pardinus-cli/server/kkcli-test.rkt") (lib "forge/check-ex-spec/library/download-file.rkt") (lib "forge/examples/variadicBreakTests.rkt") (lib "forge/check-ex-spec/library.rkt") (lib "forge/example/store/meeting-test.rkt") (lib "forge/logging/check-ex-spec/main.rkt") (lib "forge/racket-rfc6455/net/rfc6455/rfc6455/frame.rkt") (lib "forge/amalgam/tests/test_helpers.rkt") (lib "forge/tests/forge-functional/ints/intStructure.rkt") (lib "forge/tests/forge/expressions/orderOfOpsLogical2.rkt") (lib "forge/lang/alloy-syntax/tokenizer.rkt") (lib "forge/examples/undirected_tree_syntax.rkt") (lib "forge/examples/test1.rkt") (lib "forge/example/store/forge-core-importing.rkt"))) (name . "forge") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (alloy . #t) (author:charles_cutting@brown.edu . #t) (author:thomas_del_vecchio@brown.edu . #t) (author:tim_nelson@brown.edu . #t) (education . #t) (logic . #t) (modeling . #t) (relational . #t) (ring:1 . #t))) (source . "https://github.com/tnelson/Forge.git?path=forge") (tags . ("alloy" "education" "logic" "modeling" "relational")) (versions . #hash((default . #hasheq((checksum . "55feaf27fde573546aa316e0a986db028505b229") (source . "https://github.com/tnelson/Forge.git?path=forge") (source_url . "https://github.com/tnelson/Forge.git?path=forge"))))))) ("forged-ocelot" . #hasheq((author . "charles_cutting@brown.edu") (authors . ("charles_cutting@brown.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "forged-ocelot" "doc/forged-ocelot@forged-ocelot/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/forged-ocelot.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/forged-ocelot.txt"))) (checksum . "f28a7012348b9096ede5cb1da64ef6544686b205") (checksum-error . #f) (collection . "forged-ocelot") (conflicts . ()) (date-added . 1563299930) (dependencies . ("base" "rackunit-lib" "sandbox-lib" "rosette" "scribble-lib" "racket-doc")) (description . "A fork of James Bornholt's Ocelot solver for relational model finding, for use in Forge.") (implies . ()) (last-checked . 1632903329) (last-edit . 1563300076) (last-updated . 1596547942) (modules . ((lib "forged-ocelot/lang/universe.rkt") (lib "forged-ocelot/lib/simplify.rkt") (lib "forged-ocelot/lang/sketch.rkt") (lib "forged-ocelot/forged-ocelot.rkt") (lib "forged-ocelot/scribblings/forged-ocelot.scrbl") (lib "forged-ocelot/lib/alloy.rkt") (lib "forged-ocelot/lib/simplify-solve.rkt") (lib "forged-ocelot/engine/matrix-ops.rkt") (lib "forged-ocelot/engine/engine.rkt") (lib "forged-ocelot/engine/symmetry.rkt") (lib "forged-ocelot/engine/tuple.rkt") (lib "forged-ocelot/lang/bounds.rkt") (lib "forged-ocelot/engine/matrix.rkt") (lib "forged-ocelot/scribblings/log.rkt") (lib "forged-ocelot/engine/interpretation.rkt") (lib "forged-ocelot/lib/print.rkt") (lib "forged-ocelot/lang/ast.rkt") (lib "forged-ocelot/main.rkt"))) (name . "forged-ocelot") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:charles_cutting@brown.edu . #t) (ring:1 . #t))) (source . "https://github.com/cemcutting/forged-ocelot.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f28a7012348b9096ede5cb1da64ef6544686b205") (source . "https://github.com/cemcutting/forged-ocelot.git") (source_url . "https://github.com/cemcutting/forged-ocelot.git"))))))) ("formica" . #hasheq((author . "samsergey@yandex.ru") (authors . ("samsergey@yandex.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/formica.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "/var/tmp/16329033301632903330027-samsergey_formica_master/info.rkt:5:0: require: bad syntax\n  in: (require string-constants)\n  location...:\n   /var/tmp/16329033301632903330027-samsergey_formica_master/info.rkt:5:0\n  context...:\n   /home/pkgserver/racket/collects/setup/getinfo.rkt:33:0: get-info/full\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:129:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Functionally oriented educational language") (implies . ()) (last-checked . 1632903330) (last-edit . 1482286917) (last-updated . 1632903330) (modules . ()) (name . "formica") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-tag: . #t) (author:samsergey@yandex.ru . #t) (ring:1 . #t))) (source . "git://github.com/samsergey/formica") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "git://github.com/samsergey/formica") (source_url . "http://github.com/samsergey/formica/tree/master"))))))) ("forms" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/forms.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/forms.txt"))) (checksum . "ccc1084bb47c5d857d46f23fd190658e151259ea") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("forms-doc" "forms-lib")) (description . "Web form validation (docs and implementation).") (implies . ("forms-doc" "forms-lib")) (last-checked . 1632903330) (last-edit . 1547764555) (last-updated . 1623834826) (modules . ()) (name . "forms") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ring:1 . #t) (validation . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-forms.git?path=forms") (tags . ("validation" "web")) (versions . #hash((default . #hasheq((checksum . "ccc1084bb47c5d857d46f23fd190658e151259ea") (source . "https://github.com/Bogdanp/racket-forms.git?path=forms") (source_url . "https://github.com/Bogdanp/racket-forms.git?path=forms"))))))) ("forms-doc" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "forms" "doc/forms@forms-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/forms-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/forms-doc.txt"))) (checksum . "ccc1084bb47c5d857d46f23fd190658e151259ea") (checksum-error . #f) (collection . "forms") (conflicts . ()) (dependencies . ("base" "forms-lib" "sandbox-lib" "scribble-lib" "racket-doc" "web-server-doc" "web-server-lib")) (description . "Web form validation (documentation only).") (implies . ()) (last-checked . 1632903331) (last-edit . 1547764504) (last-updated . 1623834827) (modules . ((lib "forms/forms.scrbl"))) (name . "forms-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (ring:1 . #t) (validation . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-forms.git?path=forms-doc") (tags . ("validation" "web")) (versions . #hash((default . #hasheq((checksum . "ccc1084bb47c5d857d46f23fd190658e151259ea") (source . "https://github.com/Bogdanp/racket-forms.git?path=forms-doc") (source_url . "https://github.com/Bogdanp/racket-forms.git?path=forms-doc"))))))) ("forms-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/forms-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/forms-lib.txt"))) (checksum . "ccc1084bb47c5d857d46f23fd190658e151259ea") (checksum-error . #f) (collection . "forms") (conflicts . ()) (dependencies . ("base" "srfi-lite-lib" "web-server-lib")) (description . "Web form validation (implementation only).") (implies . ()) (last-checked . 1632903331) (last-edit . 1547764437) (last-updated . 1623834828) (modules . ((lib "forms/private/l10n.rkt") (lib "forms/main.rkt") (lib "forms/private/contract.rkt") (lib "forms/private/prim.rkt") (lib "forms/private/widget.rkt") (lib "forms/private/formlet.rkt") (lib "forms/base.rkt") (lib "forms/private/form.rkt"))) (name . "forms-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ring:1 . #t) (validation . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-forms.git?path=forms-lib") (tags . ("validation" "web")) (versions . #hash((default . #hasheq((checksum . "ccc1084bb47c5d857d46f23fd190658e151259ea") (source . "https://github.com/Bogdanp/racket-forms.git?path=forms-lib") (source_url . "https://github.com/Bogdanp/racket-forms.git?path=forms-lib"))))))) ("forms-test" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/forms-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/forms-test.txt"))) (checksum . "ccc1084bb47c5d857d46f23fd190658e151259ea") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "forms-lib" "rackunit-lib" "srfi-lite-lib" "web-server-lib")) (description . "Web form validation (tests only).") (implies . ()) (last-checked . 1632903331) (last-edit . 1547764464) (last-updated . 1623834828) (modules . ((lib "tests/forms/widget-tests.rkt") (lib "tests/forms/formlet-tests.rkt") (lib "tests/forms/util.rkt") (lib "tests/forms/run-all-tests.rkt") (lib "tests/forms/form-tests.rkt"))) (name . "forms-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ring:1 . #t) (validation . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-forms.git?path=forms-test") (tags . ("validation" "web")) (versions . #hash((default . #hasheq((checksum . "ccc1084bb47c5d857d46f23fd190658e151259ea") (source . "https://github.com/Bogdanp/racket-forms.git?path=forms-test") (source_url . "https://github.com/Bogdanp/racket-forms.git?path=forms-test"))))))) ("forth" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "forth" "doc/forth@forth/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/forth.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/forth.txt"))) (checksum . "fe84d4200ba2b038888153b649b872b55f7aebea") (checksum-error . #f) (collection . "forth") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "rackunit-abbrevs")) (description . "Forth emulator, as a Racket #lang") (implies . ()) (last-checked . 1632903331) (last-edit . 1447139635) (last-updated . 1582482916) (modules . ((lib "forth/lang/reader.rkt") (lib "forth/examples/exit.rkt") (lib "forth/examples/arithmetic.rkt") (lib "forth/examples/define.rkt") (lib "forth/scribblings/forth.scrbl") (lib "forth/main.rkt") (lib "forth/private/command.rkt") (lib "forth/examples/two-and-two-make-four.rkt") (lib "forth/private/stack.rkt"))) (name . "forth") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (repl . #t) (ring:1 . #t))) (source . "git://github.com/bennn/forth") (tags . ("repl")) (versions . #hash((default . #hasheq((checksum . "fe84d4200ba2b038888153b649b872b55f7aebea") (source . "git://github.com/bennn/forth") (source_url . "http://github.com/bennn/forth/tree/master"))))))) ("fpbench" . #hasheq((author . "me@pavpanchekha.com dthien@cs.washington.edu") (authors . ("me@pavpanchekha.com" "dthien@cs.washington.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fpbench.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fpbench.txt"))) (checksum . "cfb4b3fe80ac060754c0ee45243b6407604d978d") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1548660608) (dependencies . ("base" "math-lib" "generic-flonum" "rackunit-lib")) (description . "Tools for the FPBench numerical software standards (more info at http://fpbench.org/)") (implies . ()) (last-checked . 1632903331) (last-edit . 1625859490) (last-updated . 1629306929) (modules . ((lib "fpbench/src/sampler.rkt") (lib "fpbench/src/canonicalizer.rkt") (lib "fpbench/infra/test-core2smtlib2.rkt") (lib "fpbench/src/core2tex.rkt") (lib "fpbench/infra/test-core2fptaylor.rkt") (lib "fpbench/evaluate.rkt") (lib "fpbench/src/fpcore-visitor.rkt") (lib "fpbench/infra/test-core2cml.rkt") (lib "fpbench/src/core2scala.rkt") (lib "fpbench/infra/bench-stats.rkt") (lib "fpbench/src/compilers.rkt") (lib "fpbench/src/fpcore-reader.rkt") (lib "fpbench/infra/test-core2c.rkt") (lib "fpbench/infra/core2json.rkt") (lib "fpbench/transform.rkt") (lib "fpbench/export.rkt") (lib "fpbench/src/fpcore-extra.rkt") (lib "fpbench/src/imperative.rkt") (lib "fpbench/infra/test-core2js.rkt") (lib "fpbench/src/range-analysis.rkt") (lib "fpbench/src/common.rkt") (lib "fpbench/infra/test-core2scala.rkt") (lib "fpbench/src/core2gappa.rkt") (lib "fpbench/src/fpcore-interpreter.rkt") (lib "fpbench/src/core2go.rkt") (lib "fpbench/infra/gen-sanity.rkt") (lib "fpbench/src/evaluator.rkt") (lib "fpbench/src/core2c.rkt") (lib "fpbench/src/supported.rkt") (lib "fpbench/src/core2wls.rkt") (lib "fpbench/infra/gen-expr.rkt") (lib "fpbench/infra/test-core2sollya.rkt") (lib "fpbench/src/core2js.rkt") (lib "fpbench/src/functional.rkt") (lib "fpbench/infra/test-core2go.rkt") (lib "fpbench/src/core2fptaylor.rkt") (lib "fpbench/src/fpcore-checker.rkt") (lib "fpbench/main.rkt") (lib "fpbench/src/tensor.rkt") (lib "fpbench/infra/test-core2wls.rkt") (lib "fpbench/infra/filter.rkt") (lib "fpbench/src/core2smtlib2.rkt") (lib "fpbench/infra/gen-tests.rkt") (lib "fpbench/infra/test-common.rkt") (lib "fpbench/toolserver.rkt") (lib "fpbench/src/core2sollya.rkt") (lib "fpbench/src/core2cml.rkt") (lib "fpbench/src/common-subexpr-elim.rkt"))) (name . "fpbench") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:dthien@cs.washington.edu . #t) (author:me@pavpanchekha.com . #t) (floating-point . #t) (numerical . #t) (ring:1 . #t) (standards . #t))) (source . "https://github.com/FPBench/FPBench.git") (tags . ("floating-point" "numerical" "standards")) (versions . #hash((default . #hasheq((checksum . "cfb4b3fe80ac060754c0ee45243b6407604d978d") (source . "https://github.com/FPBench/FPBench.git") (source_url . "https://github.com/FPBench/FPBench.git"))))))) ("fra" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fra" "doc/fra@fra/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fra.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fra.txt"))) (checksum . "151ca5afbb8e732e0da89198cf0b982625233b87") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "eli-tester" "racket-doc" "scribble-lib")) (description . "Purely functional implementation of relational algebra") (implies . ()) (last-checked . 1632903333) (last-edit . 1352492579) (last-updated . 1513192004) (modules . ((lib "fra/main.rkt") (lib "fra/database.rkt") (lib "fra/ivector.rkt") (lib "fra/test.rkt") (lib "fra/tuple.rkt") (lib "fra/schema.rkt") (lib "fra/query.rkt") (lib "fra/optimize.rkt") (lib "fra/relation.rkt") (lib "fra/optimize-tests.rkt") (lib "fra/fra.scrbl") (lib "fra/prop.rkt"))) (name . "fra") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (db . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/fra/master") (tags . ("db")) (versions . #hash((default . #hasheq((checksum . "151ca5afbb8e732e0da89198cf0b982625233b87") (source . "github://github.com/jeapostrophe/fra/master") (source_url . "http://github.com/jeapostrophe/fra/tree/master"))))))) ("fragments" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/fragments.txt") (docs . (("main" "fragments" "doc/fragments@fragments/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fragments.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fragments.txt"))) (checksum . "1041f29a85313deed3ab55bc6a69418b9239a1fd") (checksum-error . #f) (collection . "fragments") (conflicts . ()) (date-added . 1568588686) (dependencies . ("base" "simple-http" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "experimental game") (implies . ()) (last-checked . 1632903333) (last-edit . 1568589077) (last-updated . 1568588686) (modules . ((lib "fragments/scribblings/fragments.scrbl") (lib "fragments/main.rkt"))) (name . "fragments") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/srfoster/fragments.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1041f29a85313deed3ab55bc6a69418b9239a1fd") (source . "https://github.com/srfoster/fragments.git") (source_url . "https://github.com/srfoster/fragments.git"))))))) ("fragments-first" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fragments-first" "doc/fragments-first@fragments-first/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fragments-first.txt") (test-failure-log . "server/built/test-fail/fragments-first.txt") (test-success-log . #f))) (checksum . "f9a6bec8a8ec537874d04c05c2a6d27b0af11e38") (checksum-error . #f) (collection . "fragments-first") (conflicts . ()) (date-added . 1568588713) (dependencies . ("base" "fragments" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "experimental game") (implies . ()) (last-checked . 1632903333) (last-edit . 1568589101) (last-updated . 1596547945) (modules . ((lib "fragments-first/main.rkt") (lib "fragments-first/scribblings/fragments-first.scrbl") (lib "fragments-first/lang/main.rkt") (lib "fragments-first/world.rkt"))) (name . "fragments-first") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/srfoster/fragments-first.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f9a6bec8a8ec537874d04c05c2a6d27b0af11e38") (source . "https://github.com/srfoster/fragments-first.git") (source_url . "https://github.com/srfoster/fragments-first.git"))))))) ("frog" . #hasheq((author . "racket@greghendershott.com") (authors . ("racket@greghendershott.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "frog" "doc/frog@frog/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/frog.txt") (test-failure-log . "server/built/test-fail/frog.txt") (test-success-log . #f))) (checksum . "93d8b442c2e619334612b7e2d091e4eb33995021") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.3") "find-parent-dir" "html-lib" ("markdown" #:version "0.25") "racket-index" "reprovide-lang" "scribble-lib" "scribble-text-lib" "srfi-lite-lib" "threading-lib" "web-server-lib" "at-exp-lib" "net-doc" "racket-doc" "rackunit-lib" "scribble-doc" "scribble-text-lib" "threading-doc" "web-server-doc")) (description . "Static blog generator application. Supports Twitter Bootstrap, Pygments, more.") (implies . ()) (last-checked . 1632903333) (last-edit . 1491742817) (last-updated . 1613491496) (modules . ((lib "frog/main.rkt") (lib "frog/widgets.rkt") (lib "frog/private/main.rkt") (lib "frog/private/non-posts.rkt") (lib "frog/private/bodies-page.rkt") (lib "frog/config/private/test.rkt") (lib "frog/private/tags.rkt") (lib "frog/private/enhance-body/add-doc-links/doc-uri.rkt") (lib "frog/private/params.rkt") (lib "frog/private/version.rkt") (lib "frog/private/serialize-posts.rkt") (lib "example/_src/posts/2013-06-19-a-scribble-post.scrbl") (lib "frog/params.rkt") (lib "frog/private/define-doc.rkt") (lib "frog/private/watch-dir.rkt") (lib "frog/private/util.rkt") (lib "example/frog.rkt") (lib "frog/private/upgrade/template-frog.rkt") (lib "frog/private/template.rkt") (lib "frog/private/xexpr2text.rkt") (lib "frog/enhance-body.rkt") (lib "frog/private/upgrade/old-config.rkt") (lib "frog/private/posts.rkt") (lib "frog/verbosity.rkt") (lib "frog/config/main.rkt") (lib "frog/paths.rkt") (lib "frog/private/read-scribble.rkt") (lib "frog/private/post-struct.rkt") (lib "frog/frog.scrbl") (lib "frog/private/new-post.rkt") (lib "frog/scribble.rkt") (lib "frog/private/paths.rkt") (lib "frog/config/lang/reader.rkt") (lib "frog/private/stale.rkt") (lib "frog/private/enhance-body/syntax-highlight/pygments.rkt") (lib "frog/private/author.rkt") (lib "frog/private/verbosity.rkt") (lib "frog/config/private/load.rkt") (lib "frog/private/html.rkt") (lib "frog/private/xexpr-map.rkt") (lib "example/_src/A-Non-Post-Scribble-Page.scrbl") (lib "frog/private/feeds.rkt"))) (name . "frog") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (app . #t) (author:racket@greghendershott.com . #t) (blog . #t) (markdown . #t) (ring:1 . #t) (scribble . #t) (web . #t))) (source . "git://github.com/greghendershott/frog") (tags . ("app" "blog" "markdown" "scribble" "web")) (versions . #hash((default . #hasheq((checksum . "93d8b442c2e619334612b7e2d091e4eb33995021") (source . "git://github.com/greghendershott/frog") (source_url . "http://github.com/greghendershott/frog/tree/master"))))))) ("from-template" . #hasheq((author . "phdumaresq@protonmail.com") (authors . ("phdumaresq@protonmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "from-template" "doc/from-template@from-template/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/from-template.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/from-template.txt"))) (checksum . "921d1ea4bc6ca1d523c3af548d2fdb7ac5046970") (checksum-error . #f) (collection . "racket-package-template") (conflicts . ()) (date-added . 1597943518) (dependencies . ("base" "readline" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Download template apps to get started building new projects with Racket") (implies . ()) (last-checked . 1632903333) (last-edit . 1597943518) (last-updated . 1603765725) (modules . ((lib "racket-package-template/main.rkt") (lib "racket-package-template/scribblings/from-template.scrbl"))) (name . "from-template") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:phdumaresq@protonmail.com . #t) (cli . #t) (git . #t) (raco . #t) (ring:1 . #t) (template . #t))) (source . "https://github.com/nixin72/from-template.git") (tags . ("cli" "git" "raco" "template")) (versions . #hash((default . #hasheq((checksum . "921d1ea4bc6ca1d523c3af548d2fdb7ac5046970") (source . "https://github.com/nixin72/from-template.git") (source_url . "https://github.com/nixin72/from-template.git"))))))) ("frtime" . #hash((author . "jay@racket-lang.org gcooper@racket-lang.org") (authors . ("jay@racket-lang.org" "gcooper@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "frtime" "doc/frtime@frtime/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "frtime") (conflicts . ()) (dependencies . ("srfi-lite-lib" "base" "compatibility-lib" "drracket" "gui-lib" "pict-lib" "string-constants-lib" "draw-doc" "gui-doc" "racket-doc" "scribble-lib" "rackunit")) (description . "The implementation of the FrTime language") (implies . ()) (last-checked . 1632903334) (last-edit . 1417470608) (last-updated . 1619809617) (modules . ((lib "frtime/core/heap.rkt") (lib "frtime/demos/tetris.rkt") (lib "frtime/opt/lowered-equivs.rkt") (lib "frtime/core/frp.rkt") (lib "frtime/demos/growing-points.rkt") (lib "frtime/demos/orbit-mouse.rkt") (lib "frtime/gui/simple.rkt") (lib "frtime/reactive.rkt") (lib "frtime/core/erl.rkt") (lib "frtime/frlibs/list.rkt") (lib "frtime/opt/lang/reader.rkt") (lib "frtime/demos/tile-game.rkt") (lib "frtime/demos/mirror-lens.rkt") (lib "frtime/lang/reader.rkt") (lib "frtime/frtime-lang-only.rkt") (lib "frtime/gui/aux-mixin-macros.rkt") (lib "frtime/demos/needles.rkt") (lib "frtime/gui/demo/bindec.rkt") (lib "frtime/tests/test-docs-complete.rkt") (lib "frtime/demos/analog-clock.rkt") (lib "frtime/animation.rkt") (lib "frtime/demos/ball-on-string.rkt") (lib "frtime/lang.rkt") (lib "frtime/demos/piston.rkt") (lib "frtime/gui/demo/instr.rkt") (lib "frtime/gui/mixin-macros.rkt") (lib "frtime/core/mailbox.rkt") (lib "frtime/demos/pong.rkt") (lib "frtime/demos/delay-mouse.rkt") (lib "frtime/demos/mouse.rkt") (lib "frtime/opt/frtime-opt-lang.rkt") (lib "frtime/lang-ext.rkt") (lib "frtime/tool/frtime-tool.rkt") (lib "frtime/gui/demo/timer.rkt") (lib "frtime/opt/frtime-opt.rkt") (lib "frtime/core/match.rkt") (lib "frtime/frlibs/math.rkt") (lib "frtime/animation/graphics-posn-less-unit.rkt") (lib "frtime/tests/erl.rkt") (lib "frtime/frlibs/etc.rkt") (lib "frtime/animation/graphics-sig.rkt") (lib "frtime/demos/push-pull-ball.rkt") (lib "frtime/scribblings/frtime.scrbl") (lib "frtime/core/dv.rkt") (lib "frtime/lang-core.rkt") (lib "frtime/core/sema-mailbox.rkt") (lib "frtime/gui/fred.rkt") (lib "frtime/reactive/lang/reader.rkt") (lib "frtime/tests/heap.rkt") (lib "frtime/frp-snip.rkt") (lib "frtime/frtime.rkt") (lib "frtime/animation/graphics-unit.rkt") (lib "frtime/tests/dv.rkt") (lib "frtime/frlibs/date.rkt") (lib "frtime/gui.rkt") (lib "frtime/lang-utils.rkt") (lib "frtime/develop-frtime.rkt") (lib "frtime/frtime-big.rkt") (lib "frtime/animation/graphics.rkt") (lib "frtime/demos/ufo.rkt") (lib "frtime/tests/mailbox.rkt") (lib "frtime/core/contract.rkt") (lib "frtime/tests/time.rkt") (lib "frtime/main.rkt") (lib "frtime/demos/rotation.rkt") (lib "frtime/struct.rkt"))) (name . "frtime") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:gcooper@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "21b603596c2c81bf68a3d92412910d2557832fb9") (source . "git://github.com/racket/frtime") (source_url . "http://github.com/racket/frtime/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("ftree" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ftree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ftree.txt"))) (checksum . "7e8f67c00359728e3f0ec75c410317bac4e82f07") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Finger Trees") (implies . ()) (last-checked . 1632903334) (last-edit . 1369194370) (last-updated . 1619906728) (modules . ((lib "orderedseq/orderedseq.rkt") (lib "tests/pqueue-tests.rkt") (lib "ftree/main.rkt") (lib "orderedseq/main.rkt") (lib "tests/ftree-tests.rkt") (lib "raseq/raseq.rkt") (lib "doc/ftree.scrbl") (lib "pqueue/main.rkt") (lib "tests/itree-tests.rkt") (lib "tests/oseq-tests.rkt") (lib "tests/raseq-tests.rkt") (lib "ftree/ftree.rkt") (lib "intervaltree/main.rkt") (lib "pqueue/pqueue.rkt") (lib "raseq/main.rkt") (lib "intervaltree/intervaltree.rkt"))) (name . "ftree") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (data . #t) (ring:1 . #t))) (source . "github://github.com/stchang/ftree/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "7e8f67c00359728e3f0ec75c410317bac4e82f07") (source . "github://github.com/stchang/ftree/master") (source_url . "http://github.com/stchang/ftree/tree/master"))))))) ("fulmar" . #hasheq((author . "earl.christopher@gmail.com") (authors . ("earl.christopher@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fulmar-doc" "doc/fulmar-doc@fulmar/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fulmar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fulmar.txt"))) (checksum . "4cf60699558b3bb28fa813443456993d1563bfb2") (checksum-error . #f) (collection . "fulmar") (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "rackunit-lib" "sandbox-lib" "at-exp-lib" "at-exp-lib")) (description . "Generate C++ code from S-expressions") (implies . ()) (last-checked . 1632903334) (last-edit . 1398957977) (last-updated . 1502816071) (modules . ((lib "fulmar/doc.rkt") (lib "fulmar/private/doc/doc-gen.rkt") (lib "fulmar/generate.rkt") (lib "fulmar/private/fulmar-core.rkt") (lib "fulmar/tests/core-chunk-tests.rkt") (lib "fulmar/main.rkt") (lib "fulmar/private/core-chunk.rkt") (lib "fulmar/tests/standard-chunk-tests.rkt") (lib "fulmar/version.rkt") (lib "fulmar/private/doc/doc-scraper.rkt") (lib "fulmar/private/utility.rkt") (lib "fulmar/doc/fulmar-doc.scrbl") (lib "fulmar/meta.rkt") (lib "fulmar/private/generate.rkt") (lib "fulmar/private/doc/document.rkt") (lib "fulmar/tests/main.rkt") (lib "fulmar/verify.rkt") (lib "fulmar/FulmarAbbreviations.rkt") (lib "fulmar/standard-chunk.rkt") (lib "fulmar/tests/fulmar-core-tests.rkt") (lib "fulmar/type-decls.rkt") (lib "fulmar/apply.rkt"))) (name . "fulmar") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:earl.christopher@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/cwearl/fulmar.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4cf60699558b3bb28fa813443456993d1563bfb2") (source . "git://github.com/cwearl/fulmar.git") (source_url . "http://github.com/cwearl/fulmar.git/tree/master"))))))) ("functional" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/functional.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/functional.txt"))) (checksum . "be2285cd3da0e2fffe651a8ab723185bb669425d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "functional-lib" "functional-doc")) (description . "generic interfaces and data structures for functional programming") (implies . ("functional-lib" "functional-doc")) (last-checked . 1632903334) (last-edit . 1475260470) (last-updated . 1625177884) (modules . ()) (name . "functional") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (functional . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/functional?path=functional") (tags . ("functional")) (versions . #hash((default . #hasheq((checksum . "be2285cd3da0e2fffe651a8ab723185bb669425d") (source . "git://github.com/lexi-lambda/functional?path=functional") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional"))) ("6.2" . #hasheq((checksum . "6709e8525aad5420d0bb3f0dc5dce5acb9bd9f3f") (source . "git://github.com/lexi-lambda/functional?path=functional#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional#version-exception--6.2"))) ("6.2.1" . #hasheq((checksum . "6709e8525aad5420d0bb3f0dc5dce5acb9bd9f3f") (source . "git://github.com/lexi-lambda/functional?path=functional#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional#version-exception--6.2"))))))) ("functional-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "functional" "doc/functional@functional-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/functional-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/functional-doc.txt"))) (checksum . "be2285cd3da0e2fffe651a8ab723185bb669425d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "collections-doc" "collections-lib" "functional-lib" "racket-doc" "scribble-lib")) (description . "documentation (no implementation) for “functional”") (implies . ()) (last-checked . 1632903335) (last-edit . 1475260504) (last-updated . 1625177885) (modules . ((lib "scribblings/data/functional.scrbl"))) (name . "functional-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (functional . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/functional?path=functional-doc") (tags . ("functional")) (versions . #hash((default . #hasheq((checksum . "be2285cd3da0e2fffe651a8ab723185bb669425d") (source . "git://github.com/lexi-lambda/functional?path=functional-doc") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional-doc"))) ("6.2" . #hasheq((checksum . "6709e8525aad5420d0bb3f0dc5dce5acb9bd9f3f") (source . "git://github.com/lexi-lambda/functional?path=functional-doc#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional-doc#version-exception--6.2"))) ("6.2.1" . #hasheq((checksum . "6709e8525aad5420d0bb3f0dc5dce5acb9bd9f3f") (source . "git://github.com/lexi-lambda/functional?path=functional-doc#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional-doc#version-exception--6.2"))))))) ("functional-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/functional-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/functional-lib.txt"))) (checksum . "be2285cd3da0e2fffe651a8ab723185bb669425d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.3") ("collections-lib" #:version "1.3") "curly-fn-lib" "static-rename-lib")) (description . "implementation (no documentation) for “functional”") (implies . ()) (last-checked . 1632903336) (last-edit . 1475260524) (last-updated . 1625177886) (modules . ((lib "data/maybe.rkt") (lib "data/either.rkt") (lib "data/monad.rkt") (lib "data/functor.rkt") (lib "data/applicative.rkt"))) (name . "functional-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (functional . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/functional?path=functional-lib") (tags . ("functional")) (versions . #hash((default . #hasheq((checksum . "be2285cd3da0e2fffe651a8ab723185bb669425d") (source . "git://github.com/lexi-lambda/functional?path=functional-lib") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional-lib"))) ("6.2" . #hasheq((checksum . "6709e8525aad5420d0bb3f0dc5dce5acb9bd9f3f") (source . "git://github.com/lexi-lambda/functional?path=functional-lib#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional-lib#version-exception--6.2"))) ("6.2.1" . #hasheq((checksum . "6709e8525aad5420d0bb3f0dc5dce5acb9bd9f3f") (source . "git://github.com/lexi-lambda/functional?path=functional-lib#version-exception--6.2") (source_url . "http://github.com/lexi-lambda/functional/tree/master?path=functional-lib#version-exception--6.2"))))))) ("fundamentals" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/fundamentals.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "427efdec036df998b05553484f6ba5dd0f1bc4af") (checksum-error . "pkg: specified directory is not in Git respository\n  path: fundamentals\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:913:0: lift-git-directory-content\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:318:11\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:114:0: stage-package/info\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:720:0: pkg-stage\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:129:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (date-added . 1562338787) (dependencies . ("https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-kata-util")) (description . "Reprovides all of racket, along with 2htdp/image.  Convenient for teaching arbitrarily complex racket concepts with pictures.") (implies . ()) (last-checked . 1632903337) (last-edit . 1562338787) (last-updated . 1621813993) (modules . ((lib "fundamentals/scribblings/manual.scrbl") (lib "fundamentals/main.rkt") (lib "fundamentals/examples.rkt"))) (name . "fundamentals") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/TS-Languages.git?path=fundamentals") (tags . ()) (versions . #hash((default . #hasheq((checksum . "427efdec036df998b05553484f6ba5dd0f1bc4af") (source . "https://github.com/thoughtstem/TS-Languages.git?path=fundamentals") (source_url . "https://github.com/thoughtstem/TS-Languages.git?path=fundamentals"))))))) ("fuse" . #hasheq((author . "scott@thinkmoore.net") (authors . ("scott@thinkmoore.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fuse" "doc/fuse@fuse/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fuse.txt") (test-failure-log . "server/built/test-fail/fuse.txt") (test-success-log . #f))) (checksum . "5c24b1e135e97ff6c8e49b363f01ff21c28ecf8b") (checksum-error . #f) (collection . "fuse") (conflicts . ()) (dependencies . ("scribble-lib" "base" "rackunit-lib" "sandbox-lib" "scribble-lib" "racket-doc")) (description . "Library for creating user-space filesystems with FUSE") (implies . ()) (last-checked . 1632903338) (last-edit . 1475858124) (last-updated . 1502816073) (modules . ((lib "fuse/private/data.rkt") (lib "fuse/main.rkt") (lib "fuse/scribblings/fuse.scrbl") (lib "fuse/examples/hello.rkt") (lib "fuse/private/errno.rkt") (lib "fuse/private/filesystem.rkt"))) (name . "fuse") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:scott@thinkmoore.net . #t) (filesystem . #t) (linux . #t) (ring:1 . #t) (systems . #t) (unix . #t))) (source . "https://github.com/thinkmoore/racket-fuse.git") (tags . ("filesystem" "linux" "systems" "unix")) (versions . #hash((default . #hasheq((checksum . "5c24b1e135e97ff6c8e49b363f01ff21c28ecf8b") (source . "https://github.com/thinkmoore/racket-fuse.git") (source_url . "https://github.com/thinkmoore/racket-fuse.git"))))))) ("futil" . #hasheq((author . "sgt43@cornell.edu") (authors . ("sgt43@cornell.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/futil.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "b2de29a6e8c1d54100cc6967ecb9fa1fe80223c5") (checksum-error . "git-checkout: won't extract a link with an up-directory element\n  path: #<path:../.flake8>\n  context...:\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:764:3\n   [repeats 1 more time]\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:165:11\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/racket/collects/pkg/private/download.rkt:102:2: download!\n   /home/pkgserver/racket/collects/pkg/private/download.rkt:94:0: download-repo!\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:318:11\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:114:0: stage-package/info\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:720:0: pkg-stage\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:129:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   ...\n") (collection . #f) (conflicts . ()) (date-added . 1565734435) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "gui-lib" "graph-lib" "threading-lib")) (description . "An intermediate language designed for Fuse.") (implies . ()) (last-checked . 1632903339) (last-edit . 1565734435) (last-updated . 1621813995) (modules . ((lib "futil/ast.rkt") (lib "futil/futil-syntax.rkt") (lib "futil/component.rkt") (lib "futil/futil-prims.rkt") (lib "futil/stdlib.rkt") (lib "futil/futil-syntax-2.rkt") (lib "futil/json.rkt") (lib "futil/test/unit-tests.rkt") (lib "futil/port.rkt") (lib "futil/test/playground.rkt") (lib "futil/cmdline.rkt") (lib "futil/test/test.rkt") (lib "futil/state-dict.rkt") (lib "futil/util.rkt") (lib "futil/grid-gui.rkt") (lib "futil/visualizer.rkt") (lib "futil/main.rkt") (lib "futil/interpret.rkt"))) (name . "futil") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-tag: . #t) (author:sgt43@cornell.edu . #t) (ring:1 . #t))) (source . "https://github.com/cucapra/futil.git?path=futil") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b2de29a6e8c1d54100cc6967ecb9fa1fe80223c5") (source . "https://github.com/cucapra/futil.git?path=futil") (source_url . "https://github.com/cucapra/futil.git?path=futil"))))))) ("future-visualizer" . #hash((author . "jamesswaine@racket-lang.org") (authors . ("jamesswaine@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "future-visualizer" "doc/future-visualizer@future-visualizer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "data-lib" "draw-lib" "pict-lib" "gui-lib" "future-visualizer-pict" "scheme-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Graphical performance tools for using futures") (implies . ("future-visualizer-pict")) (last-checked . 1632903339) (last-edit . 1417659583) (last-updated . 1591755263) (modules . ((lib "future-visualizer/tests/trace.rkt") (lib "future-visualizer/scribblings/common.rkt") (lib "future-visualizer/tests/vtrace3.rkt") (lib "future-visualizer/private/pict-canvas.rkt") (lib "future-visualizer/private/visualizer-gui.rkt") (lib "future-visualizer/main.rkt") (lib "future-visualizer/tests/blocks.rkt") (lib "future-visualizer/scribblings/future-visualizer.scrbl") (lib "future-visualizer/scribblings/futures-trace.scrbl") (lib "future-visualizer/tests/visualizer.rkt") (lib "future-visualizer/private/gui-helpers.rkt"))) (name . "future-visualizer") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:jamesswaine@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "87b83c0eb720247b5ad8222f0c9b0f07b226e0bb") (source . "git://github.com/racket/future-visualizer/?path=future-visualizer") (source_url . "git://github.com/racket/future-visualizer/?path=future-visualizer"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("future-visualizer-pict" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "87b83c0eb720247b5ad8222f0c9b0f07b226e0bb") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1591707999) (dependencies . ("base" "data-lib" "draw-lib" "pict-lib")) (description . "The drawing and data representation portions of the future visualizer") (implies . ()) (last-checked . 1632903340) (last-edit . 1591707999) (last-updated . 1591755263) (modules . ((lib "future-visualizer/private/display.rkt") (lib "future-visualizer/private/visualizer-data.rkt") (lib "future-visualizer/private/constants.rkt") (lib "future-visualizer/private/graph-drawing.rkt") (lib "future-visualizer/private/visualizer-drawing.rkt") (lib "future-visualizer/trace.rkt") (lib "future-visualizer/private/drawing-helpers.rkt"))) (name . "future-visualizer-pict") (ring . 0) (search-terms . #hasheq((author:samth@ccs.neu.edu . #t) (futures . #t) (ring:0 . #t))) (source . "https://github.com/racket/future-visualizer.git?path=future-visualizer-pict") (tags . ("futures")) (versions . #hash((default . #hasheq((checksum . "87b83c0eb720247b5ad8222f0c9b0f07b226e0bb") (source . "https://github.com/racket/future-visualizer.git?path=future-visualizer-pict") (source_url . "https://github.com/racket/future-visualizer.git?path=future-visualizer-pict"))))))) ("future-visualizer-typed" . #hash((author . "jamesswaine@racket-lang.org") (authors . ("jamesswaine@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "future-visualizer" "typed-racket-lib")) (description . "type declarations for future-visualizer") (implies . ()) (last-checked . 1632903340) (last-edit . 1417659583) (last-updated . 1591755264) (modules . ((lib "future-visualizer/typed.rkt"))) (name . "future-visualizer-typed") (ring . 0) (search-terms . #hasheq((author:jamesswaine@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "87b83c0eb720247b5ad8222f0c9b0f07b226e0bb") (source . "git://github.com/racket/future-visualizer/?path=future-visualizer-typed") (source_url . "git://github.com/racket/future-visualizer/?path=future-visualizer-typed"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("futures-sort" . #hasheq((author . "dominik.pantucek@trustica.cz") (authors . ("dominik.pantucek@trustica.cz")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "futures-sort" "doc/futures-sort@futures-sort/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/futures-sort.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/futures-sort.txt"))) (checksum . "dc1914f60b192897855989d4b87846eaa95aa777") (checksum-error . #f) (collection . "futures-sort") (conflicts . ()) (date-added . 1570451773) (dependencies . ("base" "scribble-lib" "scribble-lib" "racket-doc" "rackunit-lib" "scribble-math" "at-exp-lib")) (description . "This library leverages futures for implementing parallel merge-sort of vector? and fxvector?. By default it tries to use all available processors as reported by (processor-count).\r\n") (implies . ()) (last-checked . 1632903340) (last-edit . 1570451773) (last-updated . 1577916313) (modules . ((lib "futures-sort/scribblings/futures-sort.scrbl") (lib "futures-sort/main.rkt"))) (name . "futures-sort") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dominik.pantucek@trustica.cz . #t) (futures . #t) (ring:1 . #t) (sorting-algorithm . #t))) (source . "https://github.com/dzoep/futures-sort.git") (tags . ("futures" "sorting-algorithm")) (versions . #hash((default . #hasheq((checksum . "dc1914f60b192897855989d4b87846eaa95aa777") (source . "https://github.com/dzoep/futures-sort.git") (source_url . "https://github.com/dzoep/futures-sort.git"))))))) ("fuzzy-search" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "fuzzy-search" "doc/fuzzy-search@fuzzy-search/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/fuzzy-search.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/fuzzy-search.txt"))) (checksum . "8a55ab77a1c2e2d835c782dff25fbb7d8732fa34") (checksum-error . #f) (collection . "fuzzy-search") (conflicts . ()) (date-added . 1588832809) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Approximate string matching based on Forrest Smith's reverse engineering of Sublime Text.") (implies . ()) (last-checked . 1632903341) (last-edit . 1588832809) (last-updated . 1596547949) (modules . ((lib "fuzzy-search/scribblings/fuzzy-search.scrbl") (lib "fuzzy-search/benchmark.rkt") (lib "fuzzy-search/main.rkt") (lib "fuzzy-search/require.rkt"))) (name . "fuzzy-search") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sage@sagegerard.com . #t) (fuzzy-search . #t) (ring:1 . #t) (search . #t) (strings . #t))) (source . "https://github.com/zyrolasting/fuzzy-search.git") (tags . ("fuzzy-search" "search" "strings")) (versions . #hash((default . #hasheq((checksum . "8a55ab77a1c2e2d835c782dff25fbb7d8732fa34") (source . "https://github.com/zyrolasting/fuzzy-search.git") (source_url . "https://github.com/zyrolasting/fuzzy-search.git"))))))) ("g-code-tools" . #hasheq((author . "gifan.thada@gmail.com") (authors . ("gifan.thada@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/g-code-tools.txt") (docs . (("main" "g-code-tools" "doc/g-code-tools@g-code-tools/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/g-code-tools.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/g-code-tools.txt"))) (checksum . "8a786ec0608afdc0729c344e7cd58d368fc86ff9") (checksum-error . #f) (collection . "g-code-tools") (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A collection of tools for manipulating G-code.") (implies . ()) (last-checked . 1632903341) (last-edit . 1539636412) (last-updated . 1596547949) (modules . ((lib "g-code-tools/main.rkt") (lib "g-code-tools/g-code-tools.rkt") (lib "g-code-tools/scribblings/g-code-tools.scrbl") (lib "g-code-tools/tests.rkt"))) (name . "g-code-tools") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:gifan.thada@gmail.com . #t) (g-code . #t) (ring:1 . #t))) (source . "https://github.com/GThad/g-code-tools.git") (tags . ("g-code")) (versions . #hash((default . #hasheq((checksum . "8a786ec0608afdc0729c344e7cd58d368fc86ff9") (source . "https://github.com/GThad/g-code-tools.git") (source_url . "https://github.com/GThad/g-code-tools.git"))))))) ("game-engine" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/game-engine.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "98c4b9e9b8c071818e564ef7efb55465cff487a8") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("threading" "memoize" "https://github.com/jeapostrophe/mode-lambda.git#0858b6d" "drracket" "htdp-lib" "https://github.com/jeapostrophe/lux.git" "jack-posn" "https://github.com/thoughtstem/racket-chipmunk.git#master" "base")) (description . "An entity/component 2d game engine for rapid prototyping and educational purposes.  It is not (at the moment) particularly fast. ") (implies . ()) (last-checked . 1632903341) (last-edit . 1539111666) (last-updated . 1602273601) (modules . ((lib "game-engine/components/detect-edge.rkt") (lib "game-engine/entity-helpers/render-util.rkt") (lib "game-engine/entity-helpers/time-manager.rkt") (lib "game-engine/game-engine.rkt") (lib "game-engine/components/backdrop.rkt") (lib "game-engine/entity-helpers/mouse-util.rkt") (lib "game-engine/entity-helpers/particles.rkt") (lib "game-engine/components/key-animator.rkt") (lib "game-engine/components/every-tick.rkt") (lib "game-engine/test/main.rkt") (lib "game-engine/engine/extensions/sound/rsound.rkt") (lib "game-engine/components/on-mouse.rkt") (lib "game-engine/components/on-key.rkt") (lib "game-engine/scribblings/game-engine.scrbl") (lib "game-engine/components/backpack.rkt") (lib "game-engine/components/dialog.rkt") (lib "game-engine/entity-helpers/rgb-hsb.rkt") (lib "game-engine/components/key-movement.rkt") (lib "game-engine/components/stop-on-edge.rkt") (lib "game-engine/components/do-every.rkt") (lib "game-engine/entity-helpers/mini-map.rkt") (lib "game-engine/entity-helpers/dialog-util.rkt") (lib "game-engine/components/counter.rkt") (lib "game-engine/test/a-bunch-of-features.rkt") (lib "game-engine/engine/rendering.rkt") (lib "game-engine/components/sound-stream.rkt") (lib "game-engine/entity-helpers/player-util.rkt") (lib "game-engine/engine/core.rkt") (lib "game-engine/components/follow.rkt") (lib "game-engine/engine/extensions/sound.rkt") (lib "game-engine/components/rotation-style.rkt") (lib "game-engine/entity-helpers/ui-util.rkt") (lib "game-engine/collision-helper.rkt") (lib "game-engine/entity-helpers/cutscene-util.rkt") (lib "game-engine/components/animated-sprite.rkt") (lib "game-engine/components/spawn-once.rkt") (lib "game-engine/entity-helpers/carry-util.rkt") (lib "game-engine/components/storage.rkt") (lib "game-engine/components/on-rule.rkt") (lib "game-engine/entity-helpers/movement-util.rkt") (lib "game-engine/components/detect-collide.rkt") (lib "game-engine/components/producer-of.rkt") (lib "game-engine/components/spawn-dialog.rkt") (lib "game-engine/components/speed.rkt") (lib "game-engine/engine/extensions/sound/fake-rsound.rkt") (lib "game-engine/game-entities.rkt") (lib "game-engine/component-util.rkt") (lib "game-engine/components.rkt") (lib "game-engine/engine/component-struct.rkt") (lib "game-engine/entity-helpers/backpack-util.rkt") (lib "game-engine/components/observe-change.rkt") (lib "game-engine/components/health.rkt") (lib "game-engine/ai.rkt") (lib "game-engine/pre-install.rkt") (lib "game-engine/components/wrap-around.rkt") (lib "game-engine/components/on-start.rkt") (lib "game-engine/entity-helpers/sprite-util.rkt") (lib "game-engine/main.rkt") (lib "game-engine/components/direction.rkt") (lib "game-engine/components/on-edge.rkt") (lib "game-engine/components/lock-to.rkt") (lib "game-engine/entity-helpers/text-util.rkt") (lib "game-engine/components/after-time.rkt"))) (name . "game-engine") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:stephen@thoughtstem.com . #t) (games . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/game-engine.git") (tags . ("games")) (versions . #hash((default . #hasheq((checksum . "98c4b9e9b8c071818e564ef7efb55465cff487a8") (source . "https://github.com/thoughtstem/game-engine.git") (source_url . "https://github.com/thoughtstem/game-engine.git"))))))) ("game-engine-demos-common" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/game-engine-demos-common.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "614d1c5fb871f17e4008a26cb42542800457576b") (checksum-error . #f) (collection . "game-engine-demos-common") (conflicts . ()) (dependencies . ("https://github.com/thoughtstem/game-engine.git" "https://github.com/thoughtstem/game-engine-rpg.git")) (description . "Some useful entities/components/assets for some demo games that we've built for a game design course that we teach at ThoughtSTEM.") (implies . ()) (last-checked . 1632903345) (last-edit . 1519854006) (last-updated . 1570232755) (modules . ((lib "game-engine-demos-common/assets/sound-samples.rkt") (lib "game-engine-demos-common/assets/ore-sprite.rkt") (lib "game-engine-demos-common/character-generator.rkt") (lib "game-engine-demos-common/assets/space-bg-generator.rkt") (lib "game-engine-demos-common/sith-character-generator.rkt") (lib "game-engine-demos-common/character-generators.scrbl") (lib "game-engine-demos-common/assets/spaceship-sprite.rkt") (lib "game-engine-demos-common/game-over-screen.rkt") (lib "game-engine-demos-common/universal-character-generator.rkt") (lib "game-engine-demos-common/instructions.rkt") (lib "game-engine-demos-common/main.rkt") (lib "game-engine-demos-common/borders.rkt") (lib "game-engine-demos-common/sheet-generators.rkt") (lib "game-engine-demos-common/assets/badge-sprite.rkt") (lib "game-engine-demos-common/npc-generators.rkt"))) (name . "game-engine-demos-common") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:stephen@thoughtstem.com . #t) (education . #t) (games . #t) (ring:1 . #t))) (source . "https://github.com/srfoster/game-engine-demos.git?path=game-engine-demos-common") (tags . ("education" "games")) (versions . #hash((default . #hasheq((checksum . "614d1c5fb871f17e4008a26cb42542800457576b") (source . "https://github.com/srfoster/game-engine-demos.git?path=game-engine-demos-common") (source_url . "https://github.com/srfoster/game-engine-demos.git?path=game-engine-demos-common"))))))) ("game-engine-rpg" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/game-engine-rpg.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "d39160dd5dfc8ed80ca17e60b19035e16142b728") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1550864582) (dependencies . ("https://github.com/thoughtstem/game-engine.git" "https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-kata-util")) (description . "Extends the game-engine package with some features for making RPGs ") (implies . ()) (last-checked . 1632903345) (last-edit . 1550864582) (last-updated . 1597098576) (modules . ((lib "game-engine-rpg/lang/weapon.rkt") (lib "game-engine-rpg/lang/crafting.rkt") (lib "game-engine-rpg/lang/combat.rkt") (lib "game-engine-rpg/lang/common.rkt") (lib "game-engine-rpg/lang/links.rkt") (lib "game-engine-rpg/docs/game-engine-rpg.scrbl") (lib "game-engine-rpg/lang/health-bar.rkt") (lib "game-engine-rpg/main.rkt") (lib "game-engine-rpg/lang/avatar-assets.rkt") (lib "game-engine-rpg/lang/assets.rkt") (lib "game-engine-rpg/lang/player-dialog.rkt") (lib "game-engine-rpg/lang/heros.rkt"))) (name . "game-engine-rpg") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:stephen@thoughtstem.com . #t) (games . #t) (ring:1 . #t))) (source . "https://github.com/srfoster/game-engine-rpg.git") (tags . ("games")) (versions . #hash((default . #hasheq((checksum . "d39160dd5dfc8ed80ca17e60b19035e16142b728") (source . "https://github.com/srfoster/game-engine-rpg.git") (source_url . "https://github.com/srfoster/game-engine-rpg.git"))))))) ("game-engine-style-demos" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/game-engine-style-demos.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "614d1c5fb871f17e4008a26cb42542800457576b") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("game-engine-demos-common")) (description . "Package containing demos of using the game-engine package to explore different styles for simple games.") (implies . ()) (last-checked . 1632903347) (last-edit . 1520970874) (last-updated . 1602504003) (modules . ((lib "game-engine-style-demos/style_demo_5.rkt") (lib "game-engine-style-demos/main.rkt") (lib "game-engine-style-demos/style_demo_7.rkt") (lib "game-engine-style-demos/style_demo_3.rkt") (lib "game-engine-style-demos/code-snippets/tsgd_moving_sprite.rkt") (lib "game-engine-style-demos/style_demo_1.rkt") (lib "game-engine-style-demos/code-snippets/tsgd_keep_score.rkt") (lib "game-engine-style-demos/code-snippets/tsgd_score_bg.rkt") (lib "game-engine-style-demos/style_demo_6.rkt") (lib "game-engine-style-demos/style_demo_4.rkt") (lib "game-engine-style-demos/style_demo_2.rkt"))) (name . "game-engine-style-demos") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:stephen@thoughtstem.com . #t) (demos . #t) (game-engine . #t) (ring:1 . #t))) (source . "https://github.com/srfoster/game-engine-demos.git?path=style-demos") (tags . ("demos" "game-engine")) (versions . #hash((default . #hasheq((checksum . "614d1c5fb871f17e4008a26cb42542800457576b") (source . "https://github.com/srfoster/game-engine-demos.git?path=style-demos") (source_url . "https://github.com/srfoster/game-engine-demos.git?path=style-demos"))))))) ("games" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "games" "doc/games@games/index.html") ("main" "cards" "doc/cards@games/index.html") ("main" "gl-board-game" "doc/gl-board-game@games/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "games") (conflicts . ()) (dependencies . ("base" "draw-lib" "drracket" ("gui-lib" #:version "1.16") "net-lib" "htdp-lib" "math-lib" "scribble-lib" "racket-index" "sgl" "srfi-lib" "string-constants-lib" ("data-enumerate-lib" #:version "1.2") "typed-racket-lib" "typed-racket-more" "draw-doc" "gui-doc" "racket-doc" "pict-lib" "rackunit-lib" "htdp-doc")) (description . "Games") (implies . ()) (last-checked . 1632903352) (last-edit . 1417229771) (last-updated . 1626488122) (modules . ((lib "games/jewel/text.rkt") (lib "games/pousse/robot.rkt") (lib "games/scribblings/gcalc.scrbl") (lib "games/parcheesi/best-players.rkt") (lib "games/cards/constants.rkt") (lib "games/parcheesi/play-game.rkt") (lib "games/doors/doors.rkt") (lib "games/gobblet/gobblet.rkt") (lib "games/paint-by-numbers/raw-problems/build-hattori.rkt") (lib "games/cards/snipclass.rkt") (lib "games/scribblings/std-games.scrbl") (lib "games/parcheesi/test/test.rkt") (lib "games/gobblet/test.rkt") (lib "games/cards/cards.scrbl") (lib "games/cards/classes.rkt") (lib "games/chat-noir/chat-noir-literate.rkt") (lib "games/pousse/board-size.rkt") (lib "games/parcheesi/board.rkt") (lib "games/scribblings/ginrummy.scrbl") (lib "games/scribblings/chat-noir.scrbl") (lib "games/parcheesi/make-bitmap.rkt") (lib "games/scribblings/blackjack.scrbl") (lib "games/crazy8s/crazy8s.rkt") (lib "games/cards/generate.rkt") (lib "games/memory/memory.rkt") (lib "games/gobblet/heuristics.rkt") (lib "games/mines/gen-tiles.rkt") (lib "games/scribblings/same.scrbl") (lib "games/scribblings/crazy8s.scrbl") (lib "games/parcheesi/interfaces.rkt") (lib "games/parcheesi/moves.rkt") (lib "games/gcalc/gcalc.rkt") (lib "games/cards/base.rkt") (lib "games/paint-by-numbers/raw-problems/raw-kajitani.rkt") (lib "games/gobblet/sig.rkt") (lib "games/mines/mines.rkt") (lib "games/gobblet/gui.rkt") (lib "games/pousse/board.rkt") (lib "games/paint-by-numbers/raw-problems/build-rows-cols.rkt") (lib "games/pousse/counter.rkt") (lib "games/scribblings/parcheesi.scrbl") (lib "games/gobblet/plays-3x3.rkt") (lib "games/gl-board-game/gl-board-game.scrbl") (lib "games/gobblet/model.rkt") (lib "games/checkers/honu-bitmaps.rkt") (lib "games/parcheesi/admin.rkt") (lib "games/paint-by-numbers/raw-problems/raw-misc.rkt") (lib "games/gofish/gofish.rkt") (lib "games/gobblet/robot.rkt") (lib "games/paint-by-numbers/gui.rkt") (lib "games/gobblet/explore.rkt") (lib "games/scribblings/games.scrbl") (lib "games/scribblings/jewel.scrbl") (lib "games/pousse/utils.rkt") (lib "games/show-help.rkt") (lib "games/gobblet/test-explore.rkt") (lib "games/parcheesi/parcheesi.rkt") (lib "games/doors/private/utils.rkt") (lib "games/jewel/jewel.rkt") (lib "games/tally-maze.rkt") (lib "games/same/same-lib.rkt") (lib "games/paint-by-numbers/solve.rkt") (lib "games/parcheesi/admin-gui.rkt") (lib "games/doors/utils.rkt") (lib "games/paint-by-numbers/raw-problems/raw-problems.rkt") (lib "games/scribblings/gobblet.scrbl") (lib "games/scribblings/paint-by-numbers.scrbl") (lib "games/pousse/pousse.rkt") (lib "games/lights-out/boards.rkt") (lib "games/cards/make-cards.rkt") (lib "games/ginrummy/ginrummy.rkt") (lib "games/paint-by-numbers/raw-problems/build-final.rkt") (lib "games/scribblings/gofish.scrbl") (lib "games/scribblings/tally-maze.scrbl") (lib "games/scribblings/aces.scrbl") (lib "games/paint-by-numbers/raw-problems/build-solution-sets.rkt") (lib "games/tests/test-docs-complete.rkt") (lib "games/cards/region.rkt") (lib "games/slidey/slidey-main.rkt") (lib "games/paint-by-numbers/paint-by-numbers.rkt") (lib "games/blackjack/blackjack.rkt") (lib "games/parcheesi/die.rkt") (lib "games/scribblings/common.rkt") (lib "games/gl-board-game.rkt") (lib "games/aces/aces.rkt") (lib "games/parcheesi/gui.rkt") (lib "games/jewel/shapes.rkt") (lib "games/scribblings/slidey.scrbl") (lib "games/gl-board-game/gl-board.rkt") (lib "games/tally-maze/game.rkt") (lib "games/tally-maze/state.rkt") (lib "games/parcheesi/rules.rkt") (lib "games/scribblings/memory.scrbl") (lib "games/lights-out/board.rkt") (lib "games/same/same.rkt") (lib "games/cards/main.rkt") (lib "games/gobblet/test-model.rkt") (lib "games/paint-by-numbers/raw-problems/size-calculation.rkt") (lib "games/paint-by-numbers/raw-problems/raw-hattori.rkt") (lib "games/chat-noir/chat-noir-unit.rkt") (lib "games/cards.rkt") (lib "games/scribblings/spider.scrbl") (lib "games/paint-by-numbers/all-problems.rkt") (lib "games/cards/utils.rkt") (lib "games/scribblings/pousse.scrbl") (lib "games/slidey/slidey.rkt") (lib "games/jewel/array.rkt") (lib "games/scribblings/mines.scrbl") (lib "games/parcheesi/test/moves-test.rkt") (lib "games/lights-out/lights-out.rkt") (lib "games/spider/spider.rkt") (lib "games/gl-board-game/main.rkt") (lib "games/cards/cards.rkt") (lib "games/paint-by-numbers/problem.rkt") (lib "games/gobblet/check.rkt") (lib "games/scribblings/checkers.scrbl") (lib "games/chat-noir/hash.rkt") (lib "games/scribblings/lights-out.scrbl") (lib "games/doors/graph.rkt") (lib "games/cards/card-class.rkt") (lib "games/main.rkt") (lib "games/checkers/checkers.rkt") (lib "games/tally-maze/maze.rkt") (lib "games/show-scribbling.rkt"))) (name . "games") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "5da4fedad6c86a22f51efebd0b047d422ee53093") (source . "git://github.com/racket/games/") (source_url . "git://github.com/racket/games/"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("gaming" . #hasheq((author . "vervaeck.sam@skynet.be") (authors . ("vervaeck.sam@skynet.be")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/gaming.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "01280d0c64e4b3e43a2dace83c7bfa132fc1b206") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: git://github.com/samvv/racket-gaming\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . (("ramunk" "1.0") ("rx" "0.2"))) (description . "") (implies . ()) (last-checked . 1632903353) (last-edit . 1488409269) (last-updated . 1621814008) (modules . ((lib "gaming/shapes/circle.rkt") (lib "gaming/examples/ball-pool.rkt") (lib "gaming/scribblings/gaming.scrbl") (lib "gaming/main.rkt") (lib "gaming/examples/fireworks.rkt") (lib "gaming/screen.rkt") (lib "gaming/examples/readme.rkt") (lib "gaming/scribblings/devices.scrbl") (lib "gaming/point.rkt") (lib "gaming/timing.rkt") (lib "gaming/game-object.rkt") (lib "gaming/syntax.rkt") (lib "gaming/examples/mario.rkt") (lib "gaming/scribblings/world.scrbl") (lib "gaming/helpers.rkt") (lib "gaming/world.rkt") (lib "gaming/scribblings/objects.scrbl") (lib "gaming/shapes/segment.rkt"))) (name . "gaming") (ring . 1) (search-terms . #hasheq((2d . #t) (:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (author:vervaeck.sam@skynet.be . #t) (framework . #t) (game-engine . #t) (ring:1 . #t))) (source . "git://github.com/samvv/racket-gaming") (tags . ("2d" "framework" "game-engine")) (versions . #hash((default . #hasheq((checksum . "01280d0c64e4b3e43a2dace83c7bfa132fc1b206") (source . "git://github.com/samvv/racket-gaming") (source_url . "http://github.com/samvv/racket-gaming/tree/master"))))))) ("gcstats" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gcstats.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gcstats.txt"))) (checksum . "c1112a07155f2a8e8a8ad999c9980d544d56b970") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Print summary GC statistics after running a program.") (implies . ()) (last-checked . 1632903353) (last-edit . 1352758218) (last-updated . 1502816076) (modules . ((lib "gcstats/main.rkt") (lib "gcstats/core.rkt"))) (name . "gcstats") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (dev . #t) (performance . #t) (ring:1 . #t))) (source . "github://github.com/samth/gcstats/master") (tags . ("dev" "performance")) (versions . #hash((default . #hasheq((checksum . "c1112a07155f2a8e8a8ad999c9980d544d56b970") (source . "github://github.com/samth/gcstats/master") (source_url . "http://github.com/samth/gcstats/tree/master"))))))) ("gdbdump" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gdbdump" "doc/gdbdump@gdbdump/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gdbdump.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gdbdump.txt"))) (checksum . "34e26cb2f32b78ca2804684f587caa9102b7593e") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "compatibility-lib" "racket-doc" "scribble-lib")) (description . "GDB-based Native Thread Backtrace Dumps") (implies . ()) (last-checked . 1632903353) (last-edit . 1456513177) (last-updated . 1601439501) (modules . ((lib "gdbdump/main.rkt") (lib "gdbdump/gdbdump.scrbl"))) (name . "gdbdump") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (debugging . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/gdbdump.zip") (tags . ("debugging")) (versions . #hash((default . #hasheq((checksum . "34e26cb2f32b78ca2804684f587caa9102b7593e") (source . "http://www.neilvandyke.org/racket/gdbdump.zip") (source_url . "http://www.neilvandyke.org/racket/gdbdump.zip"))))))) ("gemtext" . #hasheq((author . "bctnry@outlook.com") (authors . ("bctnry@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gemtext" "doc/gemtext@gemtext/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gemtext.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gemtext.txt"))) (checksum . "479172598771b69fbeb199037929c2ce0b37e22b") (checksum-error . #f) (collection . "gemtext") (conflicts . ()) (date-added . 1627123349) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A text/gemini parser for Racket.") (implies . ()) (last-checked . 1632903354) (last-edit . 1627123349) (last-updated . 1627128931) (modules . ((lib "gemtext/parser.rkt") (lib "gemtext/defn.rkt") (lib "gemtext/main.rkt") (lib "gemtext/scribblings/gemtext.scrbl"))) (name . "gemtext") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bctnry@outlook.com . #t) (gemini . #t) (gemtext . #t) (parser . #t) (ring:1 . #t))) (source . "https://github.com/bctnry/gemtext-racket.git#master") (tags . ("gemini" "gemtext" "parser")) (versions . #hash((default . #hasheq((checksum . "479172598771b69fbeb199037929c2ce0b37e22b") (source . "https://github.com/bctnry/gemtext-racket.git#master") (source_url . "https://github.com/bctnry/gemtext-racket.git#master"))))))) ("gen-queue-lib" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gen-queue-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gen-queue-lib.txt"))) (checksum . "bdc9d8cff7653ac39dbeac9b1a367a882ee8bfcd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563984443) (dependencies . (("base" "6.0") "data-lib")) (description . "Generic interface for some queues. Used by graph-lib") (implies . ()) (last-checked . 1632903354) (last-edit . 1563984443) (last-updated . 1631294147) (modules . ((lib "data/gen-queue/gen-queue.rkt") (lib "data/gen-queue.rkt") (lib "data/gen-queue/priority.rkt") (lib "data/gen-queue/fifo.rkt"))) (name . "gen-queue-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (data . #t) (graph . #t) (queue . #t) (ring:1 . #t))) (source . "https://github.com/stchang/graph.git?path=gen-queue-lib") (tags . ("data" "graph" "queue")) (versions . #hash((default . #hasheq((checksum . "bdc9d8cff7653ac39dbeac9b1a367a882ee8bfcd") (source . "https://github.com/stchang/graph.git?path=gen-queue-lib") (source_url . "https://github.com/stchang/graph.git?path=gen-queue-lib"))))))) ("generator-util" . #hasheq((author . "skasivaj@gmail.com") (authors . ("skasivaj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "generator-util" "doc/generator-util@generator-util/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/generator-util.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/generator-util.txt"))) (checksum . "68b53d805f5f83db4c8dd9fa42734882eb61576a") (checksum-error . #f) (collection . "generator-util") (conflicts . ()) (date-added . 1587611542) (dependencies . ("base" "collections-lib" "relation" "social-contract" "scribble-lib" "scribble-abbrevs" "racket-doc" "rackunit-lib" "sandbox-lib" "cover" "cover-coveralls" "collections-doc")) (description . "Utilities for working with generators") (implies . ()) (last-checked . 1632903355) (last-edit . 1587611542) (last-updated . 1629937090) (modules . ((lib "generator-util/private/util.rkt") (lib "generator-util/main.rkt") (lib "generator-util/scribblings/generator-util.scrbl"))) (name . "generator-util") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:skasivaj@gmail.com . #t) (generators . #t) (lazy . #t) (ring:1 . #t))) (source . "https://github.com/countvajhula/generator-util.git") (tags . ("generators" "lazy")) (versions . #hash((default . #hasheq((checksum . "68b53d805f5f83db4c8dd9fa42734882eb61576a") (source . "https://github.com/countvajhula/generator-util.git") (source_url . "https://github.com/countvajhula/generator-util.git"))))))) ("generic-bind" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "generic-bind" "doc/generic-bind@generic-bind/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/generic-bind.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/generic-bind.txt"))) (checksum . "77e6dd7c87bd1e9ee9bd083a1c47d400ad79c6d1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "5.90.0.9") "rackunit-lib" "racket-doc" "scribble-lib" "math-lib" "compatibility-lib")) (description . "Generic binding forms.") (implies . ()) (last-checked . 1632903355) (last-edit . 1377753498) (last-updated . 1502816077) (modules . ((lib "generic-bind/generic-bind.scrbl") (lib "generic-bind/nested-binds-helper.rkt") (lib "generic-bind/as-rkt-names.rkt") (lib "generic-bind/generic-bind.rkt") (lib "generic-bind/tests/for-tests/for-util.rkt") (lib "generic-bind/syntax-parse-utils.rkt") (lib "generic-bind/tests/maze.rkt") (lib "generic-bind/tests/generic-bind-tests.rkt") (lib "generic-bind/tests/for-tests/run-for-tests.rkt") (lib "generic-bind/main.rkt") (lib "generic-bind/stx-utils.rkt"))) (name . "generic-bind") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "github://github.com/stchang/generic-bind/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "77e6dd7c87bd1e9ee9bd083a1c47d400ad79c6d1") (source . "github://github.com/stchang/generic-bind/master") (source_url . "http://github.com/stchang/generic-bind/tree/master"))))))) ("generic-flonum" . #hasheq((author . "bksaiki@gmail.com") (authors . ("bksaiki@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "generic-flonum" "doc/generic-flonum@generic-flonum/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/generic-flonum.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/generic-flonum.txt"))) (checksum . "eaf44e5099e3225806a39e2dbe5355ab809d41e9") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1610083877) (dependencies . ("math-lib" "base" "scribble-lib" "rackunit-lib" "racket-doc" "math-doc")) (description . "Alternative MPFR interface for emulating IEEE-754 floating-point numbers") (implies . ()) (last-checked . 1632903355) (last-edit . 1615315043) (last-updated . 1618883652) (modules . ((lib "generic-flonum/main.rkt") (lib "generic-flonum/private/mpfr.rkt") (lib "generic-flonum/private/gfl.rkt") (lib "generic-flonum/tests/test.rkt") (lib "generic-flonum/scribblings/generic-flonum.scrbl") (lib "generic-flonum/private/gfl-consts.rkt") (lib "generic-flonum/private/gfl-interface.rkt"))) (name . "generic-flonum") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bksaiki@gmail.com . #t) (floating-point . #t) (math . #t) (ring:1 . #t))) (source . "https://github.com/bksaiki/generic-flonum.git") (tags . ("floating-point" "math")) (versions . #hash((default . #hasheq((checksum . "eaf44e5099e3225806a39e2dbe5355ab809d41e9") (source . "https://github.com/bksaiki/generic-flonum.git") (source_url . "https://github.com/bksaiki/generic-flonum.git"))))))) ("generic-syntax-expanders" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "generic-syntax-expanders" "doc/generic-syntax-expanders@generic-syntax-expanders/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/generic-syntax-expanders.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/generic-syntax-expanders.txt"))) (checksum . "6d3b41875095d0f18d6e1d88bf7a8ed3981fe999") (checksum-error . #f) (collection . "generic-syntax-expanders") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "fancy-app" "reprovide-lang" "lens" "point-free" "predicates" "scribble-lib" "scribble-text-lib" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "Allows definition of macros which include expander-definition forms, like match expanders") (implies . ()) (last-checked . 1632903356) (last-edit . 1500074662) (last-updated . 1502816077) (modules . ((lib "generic-syntax-expanders/private/doc-util.rkt") (lib "generic-syntax-expanders/private/expander-types.scrbl") (lib "generic-syntax-expanders/private/with-identifiers.rkt") (lib "generic-syntax-expanders/test/test-foo-mixin-expander-predicate.rkt") (lib "generic-syntax-expanders/private/scoped-transformers.scrbl") (lib "generic-syntax-expanders/private/define-scoped-transformers.rkt") (lib "generic-syntax-expanders/private/reqprov.scrbl") (lib "generic-syntax-expanders/private/expander-types.rkt") (lib "generic-syntax-expanders/main.rkt") (lib "generic-syntax-expanders/test/test-call-with-dotted-last.rkt") (lib "generic-syntax-expanders/private/expanders.rkt") (lib "generic-syntax-expanders/private/scoped-transformers.rkt") (lib "generic-syntax-expanders/private/define-expanders.scrbl") (lib "generic-syntax-expanders/private/define-expanders.rkt") (lib "generic-syntax-expanders/test/test-define-x-expander-use-site-scope-simple.rkt") (lib "generic-syntax-expanders/private/define-scoped-transformers.scrbl") (lib "generic-syntax-expanders/test/test-arrows.rkt") (lib "generic-syntax-expanders/private/expanders.scrbl") (lib "generic-syntax-expanders/main.scrbl") (lib "generic-syntax-expanders/private/reqprov.rkt"))) (name . "generic-syntax-expanders") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/jackfirth/generic-syntax-expanders") (tags . ("experimental" "syntax")) (versions . #hash((default . #hasheq((checksum . "6d3b41875095d0f18d6e1d88bf7a8ed3981fe999") (source . "git://github.com/jackfirth/generic-syntax-expanders") (source_url . "http://github.com/jackfirth/generic-syntax-expanders/tree/master"))))))) ("geoid" . #hasheq((author . "alexharsanyi@gmail.com") (authors . ("alexharsanyi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "geoid" "doc/geoid@geoid/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/geoid.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/geoid.txt"))) (checksum . "9fc82f571bc214a2883136d46b8a56ecc8dbc4f3") (checksum-error . #f) (collection . "geoid") (conflicts . ()) (date-added . 1599289911) (dependencies . ("base" "math-lib" "rackunit-lib" "typed-racket-lib" "racket-doc" "scribble-lib" "al2-test-runner")) (description . "work efficiently with geographic data") (implies . ()) (last-checked . 1632903356) (last-edit . 1599454340) (last-updated . 1631189752) (modules . ((lib "geoid/scribblings/geoid.scrbl") (lib "geoid/private/geoid.rkt") (lib "geoid/private/waypoint-alignment.rkt") (lib "geoid/waypoint-alignment.rkt") (lib "geoid/main.rkt") (lib "geoid/private/geoid-tests.rkt"))) (name . "geoid") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:alexharsanyi@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/alex-hhh/geoid.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "9fc82f571bc214a2883136d46b8a56ecc8dbc4f3") (source . "https://github.com/alex-hhh/geoid.git") (source_url . "https://github.com/alex-hhh/geoid.git"))))))) ("geoip" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/geoip.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/geoip.txt"))) (checksum . "bcc9bbb2905d0ef93f8c9cc35ed0bb4a6f31285b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("geoip-doc" "geoip-lib")) (description . "Geolocation based on MaxMind's GeoIP databases. (docs and implementation)") (implies . ("geoip-doc" "geoip-lib")) (last-checked . 1632903356) (last-edit . 1543489977) (last-updated . 1622441244) (modules . ()) (name . "geoip") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (geolocation . #t) (ip-address . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-geoip.git?path=geoip") (tags . ("geolocation" "ip-address")) (versions . #hash((default . #hasheq((checksum . "bcc9bbb2905d0ef93f8c9cc35ed0bb4a6f31285b") (source . "https://github.com/Bogdanp/racket-geoip.git?path=geoip") (source_url . "https://github.com/Bogdanp/racket-geoip.git?path=geoip"))))))) ("geoip-doc" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "geoip" "doc/geoip@geoip-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/geoip-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/geoip-doc.txt"))) (checksum . "bcc9bbb2905d0ef93f8c9cc35ed0bb4a6f31285b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "geoip-lib" "racket-doc" "scribble-lib")) (description . "Geolocation based on MaxMind's GeoIP databases. (docs only)") (implies . ()) (last-checked . 1632903357) (last-edit . 1543489947) (last-updated . 1622441245) (modules . ((lib "geoip/geoip.scrbl"))) (name . "geoip-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (geolocation . #t) (ip-address . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-geoip.git?path=geoip-doc") (tags . ("geolocation" "ip-address")) (versions . #hash((default . #hasheq((checksum . "bcc9bbb2905d0ef93f8c9cc35ed0bb4a6f31285b") (source . "https://github.com/Bogdanp/racket-geoip.git?path=geoip-doc") (source_url . "https://github.com/Bogdanp/racket-geoip.git?path=geoip-doc"))))))) ("geoip-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/geoip-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/geoip-lib.txt"))) (checksum . "bcc9bbb2905d0ef93f8c9cc35ed0bb4a6f31285b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "net-ip-lib")) (description . "Geolocation based on MaxMind's GeoIP databases. (implementation only)") (implies . ()) (last-checked . 1632903357) (last-edit . 1543490104) (last-updated . 1622441246) (modules . ((lib "geoip/private/decoder.rkt") (lib "geoip/private/encoder.rkt") (lib "geoip/main.rkt"))) (name . "geoip-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (geolocation . #t) (ip-address . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-geoip.git?path=geoip-lib") (tags . ("geolocation" "ip-address")) (versions . #hash((default . #hasheq((checksum . "bcc9bbb2905d0ef93f8c9cc35ed0bb4a6f31285b") (source . "https://github.com/Bogdanp/racket-geoip.git?path=geoip-lib") (source_url . "https://github.com/Bogdanp/racket-geoip.git?path=geoip-lib"))))))) ("get-bonus" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/get-bonus.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "d9bb88d2940263641c35ad98912c5a2b3136cc96") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("3s" "openal" "lux" "dos" "fector" "opengl" "base" "compatibility-lib" "data-lib" "data-enumerate-lib" "draw-lib" "eli-tester" "gui-lib" "htdp-lib" "math" "pfds" "plot" "rackunit-lib" "redex-lib" "mode-lambda" "apse" "slideshow-lib" "typed-racket-lib" "racket-doc")) (description . "Get Bonus is a project about discovering the best way to program video games.") (implies . ()) (last-checked . 1632903357) (last-edit . 1351829436) (last-updated . 1615422621) (modules . ((lib "gb/gui/world.rkt") (lib "gb/graphics/main.rkt") (lib "gb/lib/component.rkt") (lib "gb/lib/random.rkt") (lib "gb/data/lifo-heap.rkt") (lib "gb/data/fvector.rkt") (lib "gb/data/ltq.rkt") (lib "gb/lib/skal.rkt") (lib "games/rpswar/random.rkt") (lib "gb/lib/gzip.rkt") (lib "gb/lib/godel-seq.rkt") (lib "gb/sys/menu-lib.rkt") (lib "gb/physics/cd-broad.rkt") (lib "games/maze/main.rkt") (lib "gb/lib/ffi.rkt") (lib "gb/lib/evector.rkt") (lib "gb/data/mvector.rkt") (lib "gb/input/keyboard.rkt") (lib "gb/lib/math.rkt") (lib "gb/lib/meta-q.rkt") (lib "gb/meta-help.rkt") (lib "games/rpswar/fst.rkt") (lib "gb/art.rkt") (lib "gb/gui/os.rkt") (lib "gb/ai/path-finding.rkt") (lib "gb/lib/ffi/vector.rkt") (lib "gb/data/fmatrix.rkt") (lib "gb/lib/performance-log.rkt") (lib "gb/main.rkt") (lib "exp/bsp-space.rkt") (lib "gb/lib/fstree.rkt") (lib "games/rpswar/main.rkt") (lib "exp/fern.rkt") (lib "gb/data/psn.rkt") (lib "gb/input/joystick.rkt") (lib "tools/log-display.rkt") (lib "gb/input/controller.rkt") (lib "games/maze/map.rkt") (lib "gb/lib/tr-cheat.rkt") (lib "gb/lib/srs.rkt") (lib "games/tennis/main.rkt") (lib "exp/des.rkt") (lib "games/rpswar/graph.rkt") (lib "gb/graphics/font-lib.rkt") (lib "gb/sys/menu.rkt") (lib "gb/physics/cd-narrow.rkt") (lib "gb/meta.rkt"))) (name . "get-bonus") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (app . #t) (audio . #t) (author:jay.mccarthy@gmail.com . #t) (games . #t) (graphics . #t) (gui . #t) (opengl . #t) (ring:1 . #t))) (source . "github://github.com/get-bonus/get-bonus/master/") (tags . ("app" "audio" "games" "graphics" "gui" "opengl")) (versions . #hash((default . #hasheq((checksum . "d9bb88d2940263641c35ad98912c5a2b3136cc96") (source . "github://github.com/get-bonus/get-bonus/master/") (source_url . "http://github.com/get-bonus/get-bonus/tree/master/"))))))) ("get-pass" . #hasheq((author . "smitchell556@gmail.com") (authors . ("smitchell556@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "get-pass" "doc/get-pass@get-pass/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/get-pass.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/get-pass.txt"))) (checksum . "6733b1094c57bb9d6e1e5e4a415fd4e2d0878d99") (checksum-error . #f) (collection . "get-pass") (conflicts . ()) (date-added . 1552253657) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Utility to get passwords from the command line without echoing input.") (implies . ()) (last-checked . 1632903357) (last-edit . 1552253931) (last-updated . 1601428635) (modules . ((lib "get-pass/main.rkt") (lib "get-pass/scribblings/get-pass.scrbl"))) (name . "get-pass") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:smitchell556@gmail.com . #t) (commandline . #t) (get-pass . #t) (getpass . #t) (password . #t) (ring:1 . #t))) (source . "https://github.com/smitchell556/get-pass.git") (tags . ("commandline" "get-pass" "getpass" "password")) (versions . #hash((default . #hasheq((checksum . "6733b1094c57bb9d6e1e5e4a415fd4e2d0878d99") (source . "https://github.com/smitchell556/get-pass.git") (source_url . "https://github.com/smitchell556/get-pass.git"))))))) ("get-primitive" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/get-primitive.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/get-primitive.txt"))) (checksum . "c69044511178cd544f5ce0c3d672c1e077030282") (checksum-error . #f) (collection . "get-primitive") (conflicts . ()) (dependencies . ("base")) (description . "Extract low-level primitives") (implies . ()) (last-checked . 1632903358) (last-edit . 1541083492) (last-updated . 1558037991) (modules . ((lib "get-primitive/main.rkt"))) (name . "get-primitive") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (linklet . #t) (ring:1 . #t))) (source . "https://github.com/samth/get-primitive.git") (tags . ("linklet")) (versions . #hash((default . #hasheq((checksum . "c69044511178cd544f5ce0c3d672c1e077030282") (source . "https://github.com/samth/get-primitive.git") (source_url . "https://github.com/samth/get-primitive.git"))))))) ("gettext" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gettext" "doc/gettext@gettext/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gettext.txt") (test-failure-log . "server/built/test-fail/gettext.txt") (test-success-log . #f))) (checksum . "fd00d769a9cce03bb8675ee62299c878b9c0d5bb") (checksum-error . #f) (collection . "gettext") (conflicts . ()) (date-added . 1567420335) (dependencies . ("base" "srfi-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "GNU gettext compatible library for internationalization with BSD license") (implies . ()) (last-checked . 1632903358) (last-edit . 1567420335) (last-updated . 1570135721) (modules . ((lib "gettext/main.rkt") (lib "gettext/scribblings/gettext.scrbl"))) (name . "gettext") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (internationalization . #t) (ring:1 . #t))) (source . "https://github.com/Kalimehtar/free-gettext.git") (tags . ("internationalization")) (versions . #hash((default . #hasheq((checksum . "fd00d769a9cce03bb8675ee62299c878b9c0d5bb") (source . "https://github.com/Kalimehtar/free-gettext.git") (source_url . "https://github.com/Kalimehtar/free-gettext.git"))))))) ("gillette" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/gillette.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "c3d50c27dc92eca78427371a63e04aa5cc2c2c51") (checksum-error . #f) (collection . (multi)) (conflicts . ("gillette-doc" "gillette-lib" "gillette-test")) (date-added . 1625029010) (dependencies . ("gillette-lib" "gillette-doc")) (description . "XPath for Racket") (implies . ("gillette-lib" "gillette-doc")) (last-checked . 1632903358) (last-edit . 1625804729) (last-updated . 1630134921) (modules . ((lib "gillette-lib/main.rkt") (lib "gillette-lib/equality.rkt") (lib "gillette-lib/convert.rkt") (lib "gillette-lib/xml.rkt") (lib "gillette-lib/axes.rkt") (lib "gillette-test/gillette/wikipedia.rkt") (lib "gillette-lib/parameters.rkt") (lib "gillette-lib/xpath.rkt") (lib "gillette-doc/gillette.scrbl") (lib "gillette-doc/limitations.scrbl") (lib "gillette-lib/accessors.rkt") (lib "gillette-lib/types.rkt"))) (name . "gillette") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (author:jesse@serverracket.com . #t) (query . #t) (ring:1 . #t) (xml . #t) (xpath . #t))) (source . "https://github.com/jessealama/gillette.git") (tags . ("query" "xml" "xpath")) (versions . #hash((default . #hasheq((checksum . "c3d50c27dc92eca78427371a63e04aa5cc2c2c51") (source . "https://github.com/jessealama/gillette.git") (source_url . "https://github.com/jessealama/gillette.git"))))))) ("gillette-doc" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/gillette-doc.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "c3d50c27dc92eca78427371a63e04aa5cc2c2c51") (checksum-error . #f) (collection . (multi)) (conflicts . ("gillette" "gillette-lib" "gillette-test")) (date-added . 1625029197) (dependencies . ("gillette-lib" "gillette-doc")) (description . "Docs for Gillette") (implies . ("gillette-lib" "gillette-doc")) (last-checked . 1632903358) (last-edit . 1625804765) (last-updated . 1630134922) (modules . ((lib "gillette-lib/main.rkt") (lib "gillette-lib/equality.rkt") (lib "gillette-lib/convert.rkt") (lib "gillette-lib/xml.rkt") (lib "gillette-lib/axes.rkt") (lib "gillette-test/gillette/wikipedia.rkt") (lib "gillette-lib/parameters.rkt") (lib "gillette-lib/xpath.rkt") (lib "gillette-doc/gillette.scrbl") (lib "gillette-doc/limitations.scrbl") (lib "gillette-lib/accessors.rkt") (lib "gillette-lib/types.rkt"))) (name . "gillette-doc") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (author:jesse@serverracket.com . #t) (query . #t) (ring:1 . #t) (xml . #t) (xpath . #t))) (source . "https://github.com/jessealama/gillette.git") (tags . ("query" "xml" "xpath")) (versions . #hash((default . #hasheq((checksum . "c3d50c27dc92eca78427371a63e04aa5cc2c2c51") (source . "https://github.com/jessealama/gillette.git") (source_url . "https://github.com/jessealama/gillette.git"))))))) ("gillette-lib" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/gillette-lib.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "c3d50c27dc92eca78427371a63e04aa5cc2c2c51") (checksum-error . #f) (collection . (multi)) (conflicts . ("gillette" "gillette-doc" "gillette-test")) (date-added . 1625029132) (dependencies . ("gillette-lib" "gillette-doc")) (description . "Implementation for Gillette") (implies . ("gillette-lib" "gillette-doc")) (last-checked . 1632903358) (last-edit . 1625804801) (last-updated . 1630134923) (modules . ((lib "gillette-lib/main.rkt") (lib "gillette-lib/equality.rkt") (lib "gillette-lib/convert.rkt") (lib "gillette-lib/xml.rkt") (lib "gillette-lib/axes.rkt") (lib "gillette-test/gillette/wikipedia.rkt") (lib "gillette-lib/parameters.rkt") (lib "gillette-lib/xpath.rkt") (lib "gillette-doc/gillette.scrbl") (lib "gillette-doc/limitations.scrbl") (lib "gillette-lib/accessors.rkt") (lib "gillette-lib/types.rkt"))) (name . "gillette-lib") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (author:jesse@serverracket.com . #t) (query . #t) (ring:1 . #t) (xml . #t) (xpath . #t))) (source . "https://github.com/jessealama/gillette.git") (tags . ("query" "xml" "xpath")) (versions . #hash((default . #hasheq((checksum . "c3d50c27dc92eca78427371a63e04aa5cc2c2c51") (source . "https://github.com/jessealama/gillette.git") (source_url . "https://github.com/jessealama/gillette.git"))))))) ("gillette-test" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/gillette-test.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "c3d50c27dc92eca78427371a63e04aa5cc2c2c51") (checksum-error . #f) (collection . (multi)) (conflicts . ("gillette" "gillette-doc" "gillette-lib")) (date-added . 1625029250) (dependencies . ("gillette-lib" "gillette-doc")) (description . "Tests for Gillette") (implies . ("gillette-lib" "gillette-doc")) (last-checked . 1632903359) (last-edit . 1625804844) (last-updated . 1630134923) (modules . ((lib "gillette-lib/main.rkt") (lib "gillette-lib/equality.rkt") (lib "gillette-lib/convert.rkt") (lib "gillette-lib/xml.rkt") (lib "gillette-lib/axes.rkt") (lib "gillette-test/gillette/wikipedia.rkt") (lib "gillette-lib/parameters.rkt") (lib "gillette-lib/xpath.rkt") (lib "gillette-doc/gillette.scrbl") (lib "gillette-doc/limitations.scrbl") (lib "gillette-lib/accessors.rkt") (lib "gillette-lib/types.rkt"))) (name . "gillette-test") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (author:jesse@serverracket.com . #t) (query . #t) (ring:1 . #t) (xml . #t) (xpath . #t))) (source . "https://github.com/jessealama/gillette.git") (tags . ("query" "xml" "xpath")) (versions . #hash((default . #hasheq((checksum . "c3d50c27dc92eca78427371a63e04aa5cc2c2c51") (source . "https://github.com/jessealama/gillette.git") (source_url . "https://github.com/jessealama/gillette.git"))))))) ("gir" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gir" "doc/gir@gir/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gir.txt") (test-failure-log . "server/built/test-fail/gir.txt") (test-success-log . #f))) (checksum . "668b693a4e0148ae5305493a3c7440e35f155082") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "GTK/GLib/GIO/... GObjectIntrospection FFI binding") (implies . ()) (last-checked . 1632903359) (last-edit . 1407088887) (last-updated . 1565070688) (modules . ((lib "gir/function.rkt") (lib "gir/utils.rkt") (lib "gir/struct.rkt") (lib "gir/gir.scrbl") (lib "gir/test.rkt") (lib "gir/main.rkt") (lib "gir/glib.rkt") (lib "gir/object.rkt") (lib "gir/enum.rkt") (lib "gir/property.rkt") (lib "gir/minimal-test.rkt") (lib "gir/loadlib.rkt") (lib "gir/base.rkt") (lib "gir/field.rkt") (lib "gir/translator.rkt") (lib "gir/signal.rkt") (lib "gir/gtype.rkt") (lib "gir/contract.rkt") (lib "gir/const.rkt") (lib "gir/interface.rkt"))) (name . "gir") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (ffi . #t) (gui . #t) (ring:1 . #t))) (source . "git://github.com/Kalimehtar/gir") (tags . ("ffi" "gui")) (versions . #hash((default . #hasheq((checksum . "668b693a4e0148ae5305493a3c7440e35f155082") (source . "git://github.com/Kalimehtar/gir") (source_url . "http://github.com/Kalimehtar/gir/tree/master"))))))) ("git-slice" . #hasheq((author . "samth@ccs.neu.edu mflatt@cs.utah.edu") (authors . ("samth@ccs.neu.edu" "mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/git-slice.txt") (test-failure-log . "server/built/test-fail/git-slice.txt") (test-success-log . #f))) (checksum . "110b361425280e61abf8de99e5d41865afc5cddb") (checksum-error . #f) (collection . "git-slice") (conflicts . ()) (dependencies . ("base" "remote-shell" "rackunit-lib")) (description . "For slicing git repositories into pieces") (implies . ()) (last-checked . 1632903359) (last-edit . 1408744731) (last-updated . 1526930327) (modules . ((lib "git-slice/git.rkt") (lib "git-slice/chop.rkt") (lib "git-slice/compute.rkt") (lib "git-slice/tests/test.rkt") (lib "git-slice/main.rkt") (lib "git-slice/filter.rkt") (lib "git-slice/prune.rkt") (lib "git-slice/commit.rkt"))) (name . "git-slice") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@cs.utah.edu . #t) (author:samth@ccs.neu.edu . #t) (git . #t) (ring:1 . #t))) (source . "git://github.com/samth/git-slice") (tags . ("git")) (versions . #hash((default . #hasheq((checksum . "110b361425280e61abf8de99e5d41865afc5cddb") (source . "git://github.com/samth/git-slice") (source_url . "http://github.com/samth/git-slice/tree/master"))))))) ("github" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/github.txt") (test-failure-log . "server/built/test-fail/github.txt") (test-success-log . #f))) (checksum . "3dcabdece43c6f46050966a51ad237c75032cd17") (checksum-error . #f) (collection . "github") (conflicts . ()) (dependencies . ("base" "drracket-plugin-lib" "gui-lib")) (description . "Github Bindings") (implies . ()) (last-checked . 1632903359) (last-edit . 1405267534) (last-updated . 1502816081) (modules . ((lib "github/gui.rkt") (lib "github/tool.rkt") (lib "github/main.rkt"))) (name . "github") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (api . #t) (author:samth@ccs.neu.edu . #t) (github . #t) (ring:1 . #t))) (source . "git://github.com/samth/github.rkt") (tags . ("api" "github")) (versions . #hash((default . #hasheq((checksum . "3dcabdece43c6f46050966a51ad237c75032cd17") (source . "git://github.com/samth/github.rkt") (source_url . "http://github.com/samth/github.rkt/tree/master"))))))) ("github-api" . #hasheq((author . "euler90h@gmail.com") (authors . ("euler90h@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "github-api" "doc/github-api@github-api/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/github-api.txt") (test-failure-log . "server/built/test-fail/github-api.txt") (test-success-log . #f))) (checksum . "2079df4a8a61d6f71722d9e7eb0aff4043995018") (checksum-error . #f) (collection . "github-api") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Bindings for the GitHub API") (implies . ()) (last-checked . 1632903360) (last-edit . 1442099017) (last-updated . 1536641815) (modules . ((lib "github-api/scribblings/github-api.scrbl") (lib "github-api/functional_tests/utils.rkt") (lib "github-api/functional_tests/events.rkt") (lib "github-api/git.rkt") (lib "github-api/events.rkt") (lib "github-api/issues.rkt") (lib "github-api/users.rkt") (lib "github-api/functional_tests/issues.rkt") (lib "github-api/main.rkt") (lib "github-api/functional_tests/gists.rkt") (lib "github-api/functional_tests/identity.rkt") (lib "github-api/gists.rkt") (lib "github-api/functional_tests/webhooks.rkt") (lib "github-api/utils.rkt") (lib "github-api/orgs.rkt") (lib "github-api/webhooks.rkt") (lib "github-api/pull.rkt"))) (name . "github-api") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:euler90h@gmail.com . #t) (github . #t) (ring:1 . #t))) (source . "git://github.com/eu90h/racket-github-api") (tags . ("github")) (versions . #hash((default . #hasheq((checksum . "2079df4a8a61d6f71722d9e7eb0aff4043995018") (source . "git://github.com/eu90h/racket-github-api") (source_url . "http://github.com/eu90h/racket-github-api/tree/master"))))))) ("glass" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "glass" "doc/glass@glass/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glass.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/glass.txt"))) (checksum . "a5b25ed7716598b49ccdb5b6917d0eacd95764cf") (checksum-error . #f) (collection . "glass") (conflicts . ()) (date-added . 1596367396) (dependencies . ("base" "fancy-app" "rebellion" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "An optics (lenses, prisms, traversals, etc.) library.") (implies . ()) (last-checked . 1632903360) (last-edit . 1596367396) (last-updated . 1597984476) (modules . ((lib "glass/indexed-traversal.rkt") (lib "glass/lens.scrbl") (lib "glass/main.rkt") (lib "glass/traversal.scrbl") (lib "glass/prism.scrbl") (lib "glass/lens.rkt") (lib "glass/private/scribble-evaluator-factory.rkt") (lib "glass/traversal.rkt") (lib "glass/main.scrbl") (lib "glass/prism.rkt") (lib "glass/private/scribble-cross-document-tech.rkt"))) (name . "glass") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (lens . #t) (optics . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/glass.git") (tags . ("lens" "optics")) (versions . #hash((default . #hasheq((checksum . "a5b25ed7716598b49ccdb5b6917d0eacd95764cf") (source . "https://github.com/jackfirth/glass.git") (source_url . "https://github.com/jackfirth/glass.git"))))))) ("glc" . #hasheq((author . "byatt.griffin@gmail.com") (authors . ("byatt.griffin@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "glc" "doc/glc@glc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/glc.txt"))) (checksum . "22fd96aa0a11b092cd8aaaeb049e03bea05764d3") (checksum-error . #f) (collection . "glc") (conflicts . ()) (date-added . 1600562503) (dependencies . ("lazy" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A lambda calculus #lang") (implies . ()) (last-checked . 1632903360) (last-edit . 1600562503) (last-updated . 1602202794) (modules . ((lib "glc/shared/cond.rkt") (lib "glc/scratch.rkt") (lib "glc/lib/expander.rkt") (lib "glc/main.rkt") (lib "glc/base/lang/reader.rkt") (lib "glc/shared/numbers.rkt") (lib "glc/lib/reader.rkt") (lib "glc/simply-typed/lang/reader.rkt") (lib "glc/base/expander.rkt") (lib "glc/simply-typed/expander.rkt") (lib "glc/simply-typed/base/expander.rkt") (lib "glc/scribblings/glc.scrbl") (lib "glc/simply-typed/base/lang/reader.rkt") (lib "glc/shared/list.rkt") (lib "glc/shared/core.rkt"))) (name . "glc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:byatt.griffin@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/GriffinMB/glc.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "22fd96aa0a11b092cd8aaaeb049e03bea05764d3") (source . "https://github.com/GriffinMB/glc.git") (source_url . "https://github.com/GriffinMB/glc.git"))))))) ("glfw3" . #hasheq((author . "macocio@gmail.com") (authors . ("macocio@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "glfw3" "doc/glfw3@glfw3/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glfw3.txt") (test-failure-log . "server/built/test-fail/glfw3.txt") (test-success-log . #f))) (checksum . "e52613f60f25aeac7f035b1f11a79401a770af35") (checksum-error . #f) (collection . "glfw3") (conflicts . ()) (dependencies . ("base" "disposable" "fixture" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "GLFW wrapper for Racket") (implies . ()) (last-checked . 1632903360) (last-edit . 1532714699) (last-updated . 1540581276) (modules . ((lib "glfw3/main.rkt") (lib "glfw3/example.rkt") (lib "glfw3/scribblings/glfw3.scrbl") (lib "glfw3/glfw-test.rkt"))) (name . "glfw3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:macocio@gmail.com . #t) (glfw . #t) (ring:1 . #t))) (source . "https://github.com/BourgondAries/rkt-glfw.git") (tags . ("glfw")) (versions . #hash((default . #hasheq((checksum . "e52613f60f25aeac7f035b1f11a79401a770af35") (source . "https://github.com/BourgondAries/rkt-glfw.git") (source_url . "https://github.com/BourgondAries/rkt-glfw.git"))))))) ("glm" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "glm" "doc/glm@glm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glm.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/glm.txt"))) (checksum . "9ab93fe8549f6ce8da29ce651a175bf35a4d996d") (checksum-error . #f) (collection . "glm") (conflicts . ()) (date-added . 1568847749) (dependencies . ("base" "math-lib" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "OpenGL Mathematics") (implies . ()) (last-checked . 1632903361) (last-edit . 1568847749) (last-updated . 1573135638) (modules . ((lib "glm/private/reprovide.rkt") (lib "glm/private/vector.rkt") (lib "glm/mat.rkt") (lib "glm/ivec.rkt") (lib "glm/swizzle-syntax.rkt") (lib "glm/scribblings/glm-core.scrbl") (lib "glm/private/matrix.rkt") (lib "glm/scribblings/glm-matrix-types.scrbl") (lib "glm/dmat.rkt") (lib "glm/vec.rkt") (lib "glm/vector-types.rkt") (lib "glm/bvec.rkt") (lib "glm/swizzle.rkt") (lib "glm/scribblings/glm.scrbl") (lib "glm/main.rkt") (lib "glm/matrix-types.rkt") (lib "glm/dvec.rkt") (lib "glm/scribblings/glm-vector-types.scrbl") (lib "glm/uvec.rkt") (lib "glm/scribblings/glm-includes.rkt"))) (name . "glm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (GLSL . #t) (OpenGL . #t) (author:dedbox@gmail.com . #t) (math . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-glm.git") (tags . ("GLSL" "math" "OpenGL")) (versions . #hash((default . #hasheq((checksum . "9ab93fe8549f6ce8da29ce651a175bf35a4d996d") (source . "https://github.com/dedbox/racket-glm.git") (source_url . "https://github.com/dedbox/racket-glm.git"))))))) ("glob" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "glob" "doc/glob@glob/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glob.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/glob.txt"))) (checksum . "92e261a05d074d7021980bfbe3060f3fa9008686") (checksum-error . #f) (collection . "glob") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Deprecated. Use file/glob instead.") (implies . ()) (last-checked . 1632903361) (last-edit . 1475797107) (last-updated . 1582482926) (modules . ((lib "glob/private/glob.rkt") (lib "glob/typed.rkt") (lib "glob/scribblings/glob.scrbl") (lib "glob/main.rkt") (lib "glob/private/in-new-directory.rkt"))) (name . "glob") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (deprecated . #t) (iterable . #t) (ring:1 . #t) (scripting . #t) (string . #t))) (source . "git://github.com/bennn/glob") (tags . ("deprecated" "iterable" "scripting" "string")) (versions . #hash((default . #hasheq((checksum . "92e261a05d074d7021980bfbe3060f3fa9008686") (source . "git://github.com/bennn/glob") (source_url . "http://github.com/bennn/glob/tree/master"))) ("6.2.1" . #hasheq((checksum . "d717381557272ee8403b1513a83135ae157f6de2") (source . "git://github.com/bennn/glob#6.2") (source_url . "http://github.com/bennn/glob/tree/master#6.2"))) ("6.2" . #hasheq((checksum . "d717381557272ee8403b1513a83135ae157f6de2") (source . "git://github.com/bennn/glob#6.2") (source_url . "http://github.com/bennn/glob/tree/master#6.2"))) ("6.3" . #hasheq((checksum . "b642f0d8ba32f39a7fe51d01199ff0dffbdfed70") (source . "git://github.com/bennn/glob#6.6") (source_url . "http://github.com/bennn/glob/tree/master#6.6"))) ("6.6" . #hasheq((checksum . "b642f0d8ba32f39a7fe51d01199ff0dffbdfed70") (source . "git://github.com/bennn/glob#6.6") (source_url . "http://github.com/bennn/glob/tree/master#6.6"))) ("6.4" . #hasheq((checksum . "b642f0d8ba32f39a7fe51d01199ff0dffbdfed70") (source . "git://github.com/bennn/glob#6.6") (source_url . "http://github.com/bennn/glob/tree/master#6.6"))) ("6.5" . #hasheq((checksum . "b642f0d8ba32f39a7fe51d01199ff0dffbdfed70") (source . "git://github.com/bennn/glob#6.6") (source_url . "http://github.com/bennn/glob/tree/master#6.6"))) ("6.1" . #hasheq((checksum . "d717381557272ee8403b1513a83135ae157f6de2") (source . "git://github.com/bennn/glob#6.2") (source_url . "http://github.com/bennn/glob/tree/master#6.2"))) ("6.1.1" . #hasheq((checksum . "d717381557272ee8403b1513a83135ae157f6de2") (source . "git://github.com/bennn/glob#6.2") (source_url . "http://github.com/bennn/glob/tree/master#6.2"))))))) ("global" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "global" "doc/global@global/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/global.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/global.txt"))) (checksum . "d912b774228e449f19083cba15e37b188a1673b4") (checksum-error . #f) (collection . "global") (conflicts . ()) (date-added . 1605284647) (dependencies . ("text-table" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Define global variables and automatically generate a command line parser.") (implies . ()) (last-checked . 1632903365) (last-edit . 1605284647) (last-updated . 1606999843) (modules . ((lib "global/tests/define-global-stress-test.rkt") (lib "global/tests/out-of-scope.rkt") (lib "global/examples/example.rkt") (lib "global/scribblings/global.scrbl") (lib "global/examples/minimal.rkt") (lib "global/main.rkt"))) (name . "global") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (command-line . #t) (commandline . #t) (ring:1 . #t))) (source . "https://github.com/Metaxal/global.git") (tags . ("command-line" "commandline")) (versions . #hash((default . #hasheq((checksum . "d912b774228e449f19083cba15e37b188a1673b4") (source . "https://github.com/Metaxal/global.git") (source_url . "https://github.com/Metaxal/global.git"))))))) ("glossolalia" . #hasheq((author . "rob.kleffner@gmail.com gamecodeshark@gmail.com") (authors . ("rob.kleffner@gmail.com" "gamecodeshark@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/glossolalia.txt") (docs . (("main" "glossolalia" "doc/glossolalia@glossolalia/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glossolalia.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/glossolalia.txt"))) (checksum . "2f7d6c2865267aaee4709ca6640243b89ecf6c6d") (checksum-error . #f) (collection . "glossolalia") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "math-lib" "brag" "beautiful-racket" "beautiful-racket-lib" "br-parser-tools-lib" "scribble-lib" "racket-doc")) (description . "A language for generating words according to sound and syllable rules. Has features for cross-syllable rules and phoneme occurence frequency.") (implies . ()) (last-checked . 1632903365) (last-edit . 1506451373) (last-updated . 1596547968) (modules . ((lib "glossolalia/colorer.rkt") (lib "glossolalia/examples/hawaiian-like.rkt") (lib "glossolalia/roulette-wheel.rkt") (lib "glossolalia/parser.rkt") (lib "glossolalia/generator.rkt") (lib "glossolalia/examples/japanese-like.rkt") (lib "glossolalia/parser-only.rkt") (lib "glossolalia/to-html.rkt") (lib "glossolalia/entry.rkt") (lib "glossolalia/examples/test.rkt") (lib "glossolalia/tokenize-only.rkt") (lib "glossolalia/examples/rotokas-like.rkt") (lib "glossolalia/examples/finnish-like.rkt") (lib "glossolalia/examples/german-like.rkt") (lib "glossolalia/lexer.rkt") (lib "glossolalia/main.rkt") (lib "glossolalia/tokenizer.rkt") (lib "glossolalia/scribblings/glossolalia.scrbl"))) (name . "glossolalia") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:gamecodeshark@gmail.com . #t) (author:rob.kleffner@gmail.com . #t) (language . #t) (ring:1 . #t))) (source . "git://github.com/robertkleffner/glossolalia") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "2f7d6c2865267aaee4709ca6640243b89ecf6c6d") (source . "git://github.com/robertkleffner/glossolalia") (source_url . "http://github.com/robertkleffner/glossolalia/tree/master"))))))) ("gls" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gls" "doc/gls@gls/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gls.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gls.txt"))) (checksum . "82f2f504a3ccf534126020baedb406f813863143") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "srfi-lite-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Generic Little (Object, Type, Anything, ...) System - multiple dispatch on types") (implies . ()) (last-checked . 1632903366) (last-edit . 1391532833) (last-updated . 1563857935) (modules . ((lib "gls/types.rkt") (lib "gls/test.rkt") (lib "gls/callables.rkt") (lib "gls/utils.rkt") (lib "gls/util-macros.rkt") (lib "gls/callable-macros.rkt") (lib "gls/main.rkt") (lib "gls/gls.scrbl"))) (name . "gls") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (data . #t) (ring:1 . #t))) (source . "github://github.com/Kalimehtar/gls/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "82f2f504a3ccf534126020baedb406f813863143") (source . "github://github.com/Kalimehtar/gls/master") (source_url . "http://github.com/Kalimehtar/gls/tree/master"))))))) ("glsl" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/glsl.txt") (docs . (("main" "glsl" "doc/glsl@glsl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glsl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/glsl.txt"))) (checksum . "6853bcb4324a10deb2cec70e59fb8b401a45e9f3") (checksum-error . #f) (collection . "glsl") (conflicts . ()) (date-added . 1571851283) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "The OpenGL Shader Language 4.5 (GLSL)") (implies . ()) (last-checked . 1632903366) (last-edit . 1571851283) (last-updated . 1572027445) (modules . ((lib "glsl/private.rkt") (lib "glsl/scribblings/glsl.scrbl") (lib "glsl/main.rkt") (lib "glsl/scribblings/glsl-includes.rkt"))) (name . "glsl") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (OpenGL . #t) (author:dedbox@gmail.com . #t) (lang . #t) (ring:1 . #t) (shader . #t))) (source . "https://github.com/dedbox/racket-glsl.git") (tags . ("lang" "OpenGL" "shader")) (versions . #hash((default . #hasheq((checksum . "6853bcb4324a10deb2cec70e59fb8b401a45e9f3") (source . "https://github.com/dedbox/racket-glsl.git") (source_url . "https://github.com/dedbox/racket-glsl.git"))))))) ("glu-tessellate" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "glu-tessellate" "doc/glu-tessellate@glu-tessellate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/glu-tessellate.txt") (test-failure-log . "server/built/test-fail/glu-tessellate.txt") (test-success-log . #f))) (checksum . "8efe65b35a2554be6dc613c016791ef2bf5ffb82") (checksum-error . #f) (collection . "glu-tessellate") (conflicts . ()) (dependencies . ("base" "draw-doc" ("gui-lib" #:version "1.8") "racket-doc" "scribble-lib")) (description . "Converts a set of closed paths to a set of covering triangles covering the region enclosed by the curves") (implies . ()) (last-checked . 1632903366) (last-edit . 1443652898) (last-updated . 1502816084) (modules . ((lib "glu-tessellate/main.rkt") (lib "glu-tessellate/glu-tessellate.scrbl"))) (name . "glu-tessellate") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (graphics . #t) (ring:1 . #t))) (source . "git://github.com/mflatt/glu-tessellate") (tags . ("graphics")) (versions . #hash((default . #hasheq((checksum . "8efe65b35a2554be6dc613c016791ef2bf5ffb82") (source . "git://github.com/mflatt/glu-tessellate") (source_url . "http://github.com/mflatt/glu-tessellate/tree/master"))))))) ("gm-pepm-2018" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gm-pepm-2018" "doc/gm-pepm-2018@gm-pepm-2018/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gm-pepm-2018.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gm-pepm-2018.txt"))) (checksum . "621211c2f40251ce5364c33e72e4067e34a32013") (checksum-error . #f) (collection . "gm-pepm-2018") (conflicts . ()) (dependencies . ("at-exp-lib" "base" "html-parsing" "math-lib" "pict-lib" "plot-lib" "scribble-lib" "slideshow-lib" "sxml" "with-cache" "pict-doc" "racket-doc" "rackunit-abbrevs" "rackunit-lib" "scribble-doc")) (description . "Artifact for On the Cost of Type-Tag Soundness") (implies . ()) (last-checked . 1632903366) (last-edit . 1517439841) (last-updated . 1582997442) (modules . ((lib "gm-pepm-2018/script/system.rkt") (lib "gm-pepm-2018/threats.scrbl") (lib "gm-pepm-2018/src/PyPI-ranking/scrape-PyPI.rkt") (lib "gm-pepm-2018/nepls-2017/nepls.rkt") (lib "gm-pepm-2018/reticulated.scrbl") (lib "gm-pepm-2018/script/plot.rkt") (lib "gm-pepm-2018/docs/reference.scrbl") (lib "gm-pepm-2018/docs/data.scrbl") (lib "gm-pepm-2018/conclusion.scrbl") (lib "gm-pepm-2018/lang/reader.rkt") (lib "gm-pepm-2018/method.scrbl") (lib "gm-pepm-2018/gm-pepm-2018.scrbl") (lib "gm-pepm-2018/script/performance-info.rkt") (lib "gm-pepm-2018/docs/gm-pepm-2018.scrbl") (lib "gm-pepm-2018/main.rkt") (lib "gm-pepm-2018/script/render.rkt") (lib "gm-pepm-2018/evaluation.scrbl") (lib "gm-pepm-2018/introduction.scrbl") (lib "gm-pepm-2018/script/util.rkt") (lib "gm-pepm-2018/bib.rkt") (lib "gm-pepm-2018/appendix.scrbl") (lib "gm-pepm-2018/script/python.rkt") (lib "gm-pepm-2018/nepls-2017/bib.rkt") (lib "gm-pepm-2018/script/sample.rkt") (lib "gm-pepm-2018/script/benchmark-info.rkt") (lib "gm-pepm-2018/script/config.rkt"))) (name . "gm-pepm-2018") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (artifact . #t) (author:types@ccs.neu.edu . #t) (performance . #t) (ring:1 . #t))) (source . "https://github.com/nuprl/retic_performance.git?path=gm-pepm-2018") (tags . ("artifact" "performance")) (versions . #hash((default . #hasheq((checksum . "621211c2f40251ce5364c33e72e4067e34a32013") (source . "https://github.com/nuprl/retic_performance.git?path=gm-pepm-2018") (source_url . "https://github.com/nuprl/retic_performance.git?path=gm-pepm-2018"))))))) ("gmp" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gmp" "doc/gmp@gmp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gmp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gmp.txt"))) (checksum . "768c33615a1c2414ccaf1a1e4ea1064bd5dd46af") (checksum-error . #f) (collection . "gmp") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "binaryio-lib" "gmp-lib" "racket-doc" "scribble-lib")) (description . "Bindings to gmp (the GNU Multiple Precision Arithmetic Library)") (implies . ("gmp-lib")) (last-checked . 1632903367) (last-edit . 1501866209) (last-updated . 1609090001) (modules . ((lib "gmp/tests/bytes.rkt") (lib "gmp/tests/util.rkt") (lib "gmp/tests/misc.rkt") (lib "gmp/gmp.scrbl"))) (name . "gmp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (math . #t) (ring:1 . #t))) (source . "git://github.com/rmculpepper/racket-gmp?path=gmp") (tags . ("math")) (versions . #hash((default . #hasheq((checksum . "768c33615a1c2414ccaf1a1e4ea1064bd5dd46af") (source . "git://github.com/rmculpepper/racket-gmp?path=gmp") (source_url . "http://github.com/rmculpepper/racket-gmp/tree/master?path=gmp"))))))) ("gmp-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gmp-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gmp-lib.txt"))) (checksum . "768c33615a1c2414ccaf1a1e4ea1064bd5dd46af") (checksum-error . #f) (collection . "gmp") (conflicts . ()) (dependencies . ("base")) (description . "Bindings to gmp (the GNU Multiple Precision Arithmetic Library)") (implies . ()) (last-checked . 1632903367) (last-edit . 1501866112) (last-updated . 1609090001) (modules . ((lib "gmp/private/gmp.rkt") (lib "gmp/unsafe.rkt") (lib "gmp/main.rkt"))) (name . "gmp-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (math . #t) (ring:1 . #t))) (source . "git://github.com/rmculpepper/racket-gmp?path=gmp-lib") (tags . ("math")) (versions . #hash((default . #hasheq((checksum . "768c33615a1c2414ccaf1a1e4ea1064bd5dd46af") (source . "git://github.com/rmculpepper/racket-gmp?path=gmp-lib") (source_url . "http://github.com/rmculpepper/racket-gmp/tree/master?path=gmp-lib"))))))) ("gnal-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/gnal-lang.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9ce8615c21ae6e9768d2e5c88609466492a4ac80") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "a #lang that allows relative module paths for reader languages") (implies . ()) (last-checked . 1632903367) (last-edit . 1469581130) (last-updated . 1502816084) (modules . ((lib "gnal/tests/test-turtle-rel.rkt") (lib "gnal/tests/test-fish.rkt") (lib "gnal/tests/test-fish-rel.rkt") (lib "gnal/tests/test-turtle.rkt") (lib "gnal/tests/case-insensitive.rkt") (lib "gnal/tests/test-case-insensitive.rkt") (lib "gnal/lang/reader.rkt"))) (name . "gnal-lang") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:alexander@knauth.org . #t) (lang . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/gnal-lang") (tags . ("lang")) (versions . #hash((default . #hasheq((checksum . "9ce8615c21ae6e9768d2e5c88609466492a4ac80") (source . "git://github.com/AlexKnauth/gnal-lang") (source_url . "http://github.com/AlexKnauth/gnal-lang/tree/master"))))))) ("gnucash" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gnucash" "doc/gnucash@gnucash/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gnucash.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gnucash.txt"))) (checksum . "701dee030a70b778f6de9dae428d6287aecd7a5a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "sxml" "srfi-lib" "srfi-lite-lib" "memoize" "rackunit-lib" "typed-racket-lib" "rackunit-typed" "racket-doc" "scribble-lib")) (description . "parses gnucash XML files") (implies . ()) (last-checked . 1632903367) (last-edit . 1426613240) (last-updated . 1596562181) (modules . ((lib "gnucash/examples/example.rkt") (lib "gnucash/wrapped-parse.rkt") (lib "gnucash/main.rkt") (lib "gnucash/scribblings/gnucash.scrbl") (lib "gnucash/typed-libs.rkt") (lib "gnucash/libs.rkt") (lib "gnucash/parse.rkt"))) (name . "gnucash") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (io . #t) (ring:1 . #t))) (source . "git://github.com/jbclements/gnucash") (tags . ("io")) (versions . #hash((default . #hasheq((checksum . "701dee030a70b778f6de9dae428d6287aecd7a5a") (source . "git://github.com/jbclements/gnucash") (source_url . "http://github.com/jbclements/gnucash/tree/master"))))))) ("goblins" . #hasheq((author . "cwebber@dustycloud.org") (authors . ("cwebber@dustycloud.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/goblins.txt") (docs . (("main" "goblins" "doc/goblins@goblins/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/goblins.txt") (test-failure-log . "server/built/test-fail/goblins.txt") (test-success-log . #f))) (checksum . "2cc18e31503eb40715bf56b060815d330d06b569") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1583354199) (dependencies . ("base" "crypto" "syrup" "pk" "rackunit-lib" "scribble-lib" "sandbox-lib" "racket-doc")) (description . "Goblins is a lightweight actor model library.") (implies . ()) (last-checked . 1632903367) (last-edit . 1600027275) (last-updated . 1627683361) (modules . ((lib "goblins/ocapn/netlayer/onion.rkt") (lib "goblins/vat.rkt") (lib "goblins/actor-lib/ticker2.rkt") (lib "goblins/ocapn/netlayer/onion-socks.rkt") (lib "goblins/core.rkt") (lib "goblins/actor-lib/cell.rkt") (lib "goblins/actor-lib/swappable.rkt") (lib "goblins/actor-lib/methods.rkt") (lib "goblins/utils/simple-dispatcher.rkt") (lib "goblins/actor-lib/imply-method.rkt") (lib "goblins/scribblings/tutorial.scrbl") (lib "goblins/actor-lib/common.rkt") (lib "goblins/actor-lib/hash-st8.rkt") (lib "goblins/actor-lib/env.rkt") (lib "goblins/hash-contracts.rkt") (lib "goblins/ocapn/define-recordable-struct.rkt") (lib "goblins/message.rkt") (lib "goblins/utils/simple-sealers.rkt") (lib "goblins/eventspace-vat.rkt") (lib "goblins/scribblings/captp.scrbl") (lib "goblins/actor-lib/pushdown.rkt") (lib "goblins/scribblings/goblins.scrbl") (lib "goblins/actor-lib/ticker.rkt") (lib "goblins/actor-lib/nonce-registry.rkt") (lib "goblins/scribblings/intro.scrbl") (lib "goblins/actor-lib/selfish-spawn.rkt") (lib "goblins/ocapn.rkt") (lib "goblins/ocapn/captp-test.rkt") (lib "goblins/actor-lib/bootstrap.rkt") (lib "goblins/main.rkt") (lib "goblins/scribblings/actor-lib.scrbl") (lib "goblins/actor-lib/sleep-pr.rkt") (lib "goblins/actor-lib/ward.rkt") (lib "goblins/actor-lib/let-on.rkt") (lib "goblins/actor-lib/sync-pr.rkt") (lib "goblins/actor-lib/pubsub.rkt") (lib "goblins/utils/values-to-list.rkt") (lib "goblins/actor-lib/actor-sealers.rkt") (lib "goblins/actor-lib/add-sub.rkt") (lib "goblins/ocapn/netlayer/fake-intarwebs.rkt") (lib "goblins/actor-lib/joiners.rkt") (lib "goblins/errors.rkt") (lib "goblins/actor-lib/revokeable.rkt") (lib "goblins/scribblings/api.scrbl") (lib "goblins/actor-lib/simple-mint.rkt") (lib "goblins/ocapn/structs-urls.rkt") (lib "goblins/actor-lib/define-actor.rkt") (lib "goblins/utils/install-factory.rkt") (lib "goblins/ocapn/captp.rkt") (lib "goblins/scribblings/eval.rkt") (lib "goblins/utils/url-base64.rkt") (lib "goblins/actor-lib/await.rkt") (lib "goblins/actor-lib/select-swear.rkt") (lib "goblins/actor-lib/facet.rkt"))) (name . "goblins") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (actors . #t) (asynchronous . #t) (author:cwebber@dustycloud.org . #t) (ring:1 . #t))) (source . "https://gitlab.com/spritely/goblins.git?path=goblins") (tags . ("actors" "asynchronous")) (versions . #hash((default . #hasheq((checksum . "2cc18e31503eb40715bf56b060815d330d06b569") (source . "https://gitlab.com/spritely/goblins.git?path=goblins") (source_url . "https://gitlab.com/spritely/goblins.git?path=goblins"))) ("0.7" . #hasheq((checksum . "6382d76e0f635a050aba0f1c74a4e33f21778c4a") (source . "https://gitlab.com/spritely/goblins.git?path=goblins#v0.7") (source_url . "https://gitlab.com/spritely/goblins.git?path=goblins#v0.7"))) ("0.1" . #hasheq((checksum . "60f8caf5594bb142bf111549f6219eb591e39136") (source . "https://gitlab.com/spritely/goblins.git?path=goblins#v0.1") (source_url . "https://gitlab.com/spritely/goblins.git?path=goblins#v0.1"))) ("0.6" . #hasheq((checksum . "fbf9aa7b3d4e8b8988598aa3a24fc8d07e327c60") (source . "https://gitlab.com/spritely/goblins.git?path=goblins#v0.6") (source_url . "https://gitlab.com/spritely/goblins.git?path=goblins#v0.6"))))))) ("google" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/google.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/google.txt"))) (checksum . "236b1fb8bdd0975bf2ce820f6277927c7bc25635") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "gui-lib" "net-lib" "rackunit-lib")) (description . "Google APIs (Drive, Plus, ...) for Racket.") (implies . ()) (last-checked . 1632903369) (last-edit . 1441050883) (last-updated . 1502816085) (modules . ((lib "google/exn.rkt") (lib "google/profile.rkt") (lib "google/calendar.rkt") (lib "google/main.rkt") (lib "google/generic-api.rkt") (lib "google/oauth/cli.rkt") (lib "google/simple-token-store.rkt") (lib "google/json-utils.rkt") (lib "google/drive.rkt") (lib "google/oauth.rkt"))) (name . "google") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (api . #t) (author:tonygarnockjones@gmail.com . #t) (google . #t) (ring:1 . #t) (web . #t))) (source . "github://github.com/tonyg/racket-google/master") (tags . ("api" "google" "web")) (versions . #hash((default . #hasheq((checksum . "236b1fb8bdd0975bf2ce820f6277927c7bc25635") (source . "github://github.com/tonyg/racket-google/master") (source_url . "http://github.com/tonyg/racket-google/tree/master"))))))) ("google-spreadsheet-api" . #hasheq((author . "car.margiotta@icloud.com") (authors . ("car.margiotta@icloud.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "google-spreadsheet-api" "doc/google-spreadsheet-api@google-spreadsheet-api/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/google-spreadsheet-api.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/google-spreadsheet-api.txt"))) (checksum . "081c8a9543b5d1f0a5329de62c87eec5f12e8b9c") (checksum-error . #f) (collection . "google-spreadsheet-api") (conflicts . ()) (date-added . 1588504127) (dependencies . ("base" "crypto" "net-jwt" "scribble-lib" "racket-doc" "rackunit-lib" "scribble-code-examples")) (description . "Racket interface for Google Spreadsheet APIs") (implies . ()) (last-checked . 1632903369) (last-edit . 1588504127) (last-updated . 1620468835) (modules . ((lib "google-spreadsheet-api/core/oauth2.rkt") (lib "google-spreadsheet-api/docs/google-spreadsheet-api.scrbl") (lib "google-spreadsheet-api/interface.rkt") (lib "google-spreadsheet-api/main.rkt"))) (name . "google-spreadsheet-api") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (api . #t) (author:car.margiotta@icloud.com . #t) (google . #t) (google-spreadsheet . #t) (ring:1 . #t) (spreadsheet . #t))) (source . "https://gitlab.com/car.margiotta/google-spreadsheet-api.git") (tags . ("api" "google" "google-spreadsheet" "spreadsheet")) (versions . #hash((default . #hasheq((checksum . "081c8a9543b5d1f0a5329de62c87eec5f12e8b9c") (source . "https://gitlab.com/car.margiotta/google-spreadsheet-api.git") (source_url . "https://gitlab.com/car.margiotta/google-spreadsheet-api.git"))))))) ("gradual-typing-bib" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gradual-typing-bib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gradual-typing-bib.txt"))) (checksum . "4c73669423a6877f37244e2015a0b02c8878f425") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib")) (description . "") (implies . ()) (last-checked . 1632903370) (last-edit . 1522703349) (last-updated . 1623330964) (modules . ((lib "gradual-typing-bib/main.rkt"))) (name . "gradual-typing-bib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:samth@ccs.neu.edu . #t) (ring:1 . #t))) (source . "https://github.com/samth/gradual-typing-bib.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4c73669423a6877f37244e2015a0b02c8878f425") (source . "https://github.com/samth/gradual-typing-bib.git") (source_url . "https://github.com/samth/gradual-typing-bib.git"))))))) ("graph" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graph.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/graph.txt"))) (checksum . "bdc9d8cff7653ac39dbeac9b1a367a882ee8bfcd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563984263) (dependencies . (("base" "6.0") "graph-lib" "graph-doc" "graph-test")) (description . "Generic graph library.") (implies . ("graph-lib" "graph-doc" "graph-test")) (last-checked . 1632903370) (last-edit . 1563984319) (last-updated . 1631294168) (modules . ()) (name . "graph") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (data . #t) (graph . #t) (ring:1 . #t))) (source . "https://github.com/stchang/graph.git?path=graph") (tags . ("data" "graph")) (versions . #hash((default . #hasheq((checksum . "bdc9d8cff7653ac39dbeac9b1a367a882ee8bfcd") (source . "https://github.com/stchang/graph.git?path=graph") (source_url . "https://github.com/stchang/graph.git?path=graph"))))))) ("graph-doc" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "graph" "doc/graph@graph-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graph-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/graph-doc.txt"))) (checksum . "bdc9d8cff7653ac39dbeac9b1a367a882ee8bfcd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563984352) (dependencies . (("base" "6.0") ("graph-lib" "0.5.2") "racket-doc" "math-doc" "math-lib" "scribble-lib")) (description . "Documentation for graph-lib") (implies . ()) (last-checked . 1632903370) (last-edit . 1563984352) (last-updated . 1631294173) (modules . ((lib "graph/scribblings/graph.scrbl"))) (name . "graph-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stchang@racket-lang.org . #t) (data . #t) (docs . #t) (graph . #t) (ring:1 . #t))) (source . "https://github.com/stchang/graph.git?path=graph-doc") (tags . ("data" "docs" "graph")) (versions . #hash((default . #hasheq((checksum . "bdc9d8cff7653ac39dbeac9b1a367a882ee8bfcd") (source . "https://github.com/stchang/graph.git?path=graph-doc") (source_url . "https://github.com/stchang/graph.git?path=graph-doc"))))))) ("graph-lib" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graph-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/graph-lib.txt"))) (checksum . "bdc9d8cff7653ac39dbeac9b1a367a882ee8bfcd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563984308) (dependencies . (("base" "6.0") "gen-queue-lib" "data-lib" "math-lib")) (description . "main graph package") (implies . ()) (last-checked . 1632903371) (last-edit . 1563984308) (last-updated . 1631294178) (modules . ((lib "graph/graph-property.rkt") (lib "graph/adjlist-utils.rkt") (lib "graph/hash-utils.rkt") (lib "graph/graph-weighted.rkt") (lib "graph/graph-fns-allpairs-shortestpaths.rkt") (lib "graph/main.rkt") (lib "graph/graph-fns-graphviz.rkt") (lib "graph/graph-unweighted.rkt") (lib "graph/graph-fns-minspantree.rkt") (lib "graph/graph-fns-maxflow.rkt") (lib "graph/graph-matrix.rkt") (lib "graph/graph-fns-singlesource-shortestpaths.rkt") (lib "graph/utils.rkt") (lib "graph/gen-graph.rkt") (lib "graph/graph-fns-spantree.rkt") (lib "graph/graph-fns-coloring.rkt") (lib "graph/graph-fns-basic.rkt"))) (name . "graph-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (data . #t) (graph . #t) (ring:1 . #t))) (source . "https://github.com/stchang/graph.git?path=graph-lib") (tags . ("data" "graph")) (versions . #hash((default . #hasheq((checksum . "bdc9d8cff7653ac39dbeac9b1a367a882ee8bfcd") (source . "https://github.com/stchang/graph.git?path=graph-lib") (source_url . "https://github.com/stchang/graph.git?path=graph-lib"))))))) ("graph-test" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graph-test.txt") (test-failure-log . "server/built/test-fail/graph-test.txt") (test-success-log . #f))) (checksum . "bdc9d8cff7653ac39dbeac9b1a367a882ee8bfcd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563984380) (dependencies . (("base" "6.0") ("graph-lib" "0.5.2") "rackunit-lib")) (description . "Tests for graph-lib") (implies . ()) (last-checked . 1632903371) (last-edit . 1563984380) (last-updated . 1631294184) (modules . ((lib "tests/graph/graphviz.rkt") (lib "tests/graph/argcontracts.rkt") (lib "tests/graph/pr48bipartite.rkt") (lib "tests/graph/timing-test-in-neighbors.rkt") (lib "tests/graph/graph-fns-singlesource-shortestpaths-tests.rkt") (lib "tests/graph/graph-fns-maxflow-tests.rkt") (lib "tests/graph/graph-fns-spantree-tests.rkt") (lib "tests/graph/graph-fns-coloring-tests.rkt") (lib "tests/graph/timing-tests.rkt") (lib "tests/graph/graph-fns-allpairs-shortestpaths-tests.rkt") (lib "tests/graph/timing-test-scc.rkt") (lib "tests/graph/test-utils.rkt") (lib "tests/graph/graph-fns-basic-tests.rkt") (lib "tests/graph/boost-examples.rkt"))) (name . "graph-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (data . #t) (graph . #t) (ring:1 . #t) (tests . #t))) (source . "https://github.com/stchang/graph.git?path=graph-test") (tags . ("data" "graph" "tests")) (versions . #hash((default . #hasheq((checksum . "bdc9d8cff7653ac39dbeac9b1a367a882ee8bfcd") (source . "https://github.com/stchang/graph.git?path=graph-test") (source_url . "https://github.com/stchang/graph.git?path=graph-test"))))))) ("graphic-block" . #hasheq((author . "djholtby@uwaterloo.ca") (authors . ("djholtby@uwaterloo.ca")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graphic-block.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/graphic-block.txt"))) (checksum . "affae0e2e5317ed2bde06ba83cb83e833f7b8106") (checksum-error . #f) (collection . "graphic-block") (conflicts . ()) (date-added . 1605555242) (dependencies . ("drracket-plugin-lib" "gui-lib" "string-constants-lib" "base" "scribble-lib" "racket-doc")) (description . "A plug-in that prevents inserting non-text content into the editor (can be configured through the general editing panel).") (implies . ()) (last-checked . 1632903371) (last-edit . 1631541034) (last-updated . 1631294189) (modules . ((lib "graphic-block/graphic-block.rkt"))) (name . "graphic-block") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:djholtby@uwaterloo.ca . #t) (plugin . #t) (ring:1 . #t) (wxme . #t))) (source . "https://git.uwaterloo.ca/djholtby/uwaterloo-racket.git?path=graphic-block") (tags . ("plugin" "wxme")) (versions . #hash((default . #hasheq((checksum . "affae0e2e5317ed2bde06ba83cb83e833f7b8106") (source . "https://git.uwaterloo.ca/djholtby/uwaterloo-racket.git?path=graphic-block") (source_url . "https://git.uwaterloo.ca/djholtby/uwaterloo-racket.git?path=graphic-block"))))))) ("graphics" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "png") ("none" "colorspace") ("none" "bitmap"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graphics.txt") (test-failure-log . "server/built/test-fail/graphics.txt") (test-success-log . #f))) (checksum . "57d09f638b2d73e8f36bf358540f3ba2f3ff8ce1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "digimon" "math-lib" "draw-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc" "typed-racket-doc" "digimon" "w3s")) (description . "Essential computer graphics for Typed Racket") (implies . ()) (last-checked . 1632903372) (last-edit . 1501825474) (last-updated . 1627017286) (modules . ((lib "bitmap/digitama/unsafe/font.rkt") (lib "bitmap/digitama/unsafe/constants.rkt") (lib "bitmap/digitama/unsafe/pixman.rkt") (lib "bitmap/tamer/composite/pyramid.rkt") (lib "png/digitama/zlib.rkt") (lib "bitmap/digitama/unsafe/invalid.rkt") (lib "colorspace/tamer/hsb.rkt") (lib "png/digitama/filtering.rkt") (lib "bitmap/tamer/cairo/clip.rkt") (lib "bitmap/tamer/polygon.rkt") (lib "bitmap/base.rkt") (lib "bitmap/font.rkt") (lib "bitmap/tamer/resize.rkt") (lib "png/tamer/hexdump.rkt") (lib "bitmap/tamer/cairo/rectangle.rkt") (lib "png/tamer/png.scrbl") (lib "bitmap/digitama/color.rkt") (lib "bitmap/digitama/source.rkt") (lib "bitmap/tamer/misc.scrbl") (lib "bitmap/tamer/color.scrbl") (lib "bitmap/digitama/stdio.rkt") (lib "bitmap/invalid.rkt") (lib "bitmap/tamer/composite/table/hue.rkt") (lib "bitmap/constructor.rkt") (lib "bitmap/tamer/font.scrbl") (lib "png/digitama/interlace.rkt") (lib "bitmap/tamer/cairo/text.rkt") (lib "png/digitama/crc.rkt") (lib "bitmap/tamer/composite/composite.rkt") (lib "bitmap/tamer/bitmap.scrbl") (lib "bitmap/digitama/unsafe/shape.rkt") (lib "bitmap/digitama/unsafe/paint.rkt") (lib "bitmap/digitama/parser/number.rkt") (lib "colorspace/misc.rkt") (lib "bitmap/tamer/chess.rkt") (lib "bitmap/tamer/composite/table/font.rkt") (lib "bitmap/digitama/unsafe/effect.rkt") (lib "bitmap/tamer/cairo/gradient.rkt") (lib "bitmap/digitama/composite.rkt") (lib "bitmap/digitama/parser/exn.rkt") (lib "bitmap/digitama/unsafe/convert.rkt") (lib "colorspace/digitama/hsb.rkt") (lib "png/digitama/stdin.rkt") (lib "bitmap/tamer/composite/table.rkt") (lib "bitmap/digitama/unsafe/image.rkt") (lib "bitmap/misc.rkt") (lib "bitmap/tamer/font.rkt") (lib "png/tamer/schaik/zlib.rkt") (lib "bitmap/tamer/cairo/curve.rkt") (lib "colorspace/tamer/colorspace.scrbl") (lib "bitmap/tamer/composite/heap.rkt") (lib "bitmap/tamer/cairo/misc.rkt") (lib "bitmap/tamer/composite/pin.rkt") (lib "bitmap/effect.rkt") (lib "png/digitama/chunk.rkt") (lib "bitmap/digitama/unsafe/pangocairo.rkt") (lib "bitmap/digitama/unsafe/version.rkt") (lib "bitmap/composite.rkt") (lib "bitmap/tamer/density.rkt") (lib "bitmap/digitama/resize.rkt") (lib "bitmap/main.rkt") (lib "bitmap/tamer/cairo/mesh.rkt") (lib "bitmap/digitama/parser/stream.rkt") (lib "bitmap/tamer/bridge/font.rkt") (lib "bitmap/digitama/unsafe/text.rkt") (lib "bitmap/tamer/zero.rkt") (lib "bitmap/paint.rkt") (lib "bitmap/digitama/unsafe/source.rkt") (lib "png/base.rkt") (lib "bitmap/digitama/font.rkt") (lib "bitmap/tamer/cairo/image.rkt") (lib "bitmap/tamer/invalid.rkt") (lib "png/digitama/huffman.rkt") (lib "bitmap/digitama/misc.rkt") (lib "bitmap/tamer/composite/multiple-composite.rkt") (lib "colorspace/main.rkt") (lib "bitmap/digitama/base.rkt") (lib "bitmap/digitama/unsafe/resize.rkt") (lib "bitmap/tamer/grayscale.rkt") (lib "png/digitama/png.rkt") (lib "bitmap/tamer/cairo/pango.rkt") (lib "bitmap/digitama/paint.rkt") (lib "png/digitama/enum.rkt") (lib "bitmap/resize.rkt") (lib "colorspace/hsb.rkt") (lib "bitmap/constants.rkt") (lib "bitmap/tamer/cellophane.rkt") (lib "bitmap/stdio.rkt") (lib "bitmap/color.rkt") (lib "bitmap/digitama/unsafe/composite.rkt"))) (name . "graphics") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs-error: . #t) (author:juzhenliang@gmail.com . #t) (colorspace . #t) (graphics . #t) (ring:1 . #t) (typed-racket . #t) (unstable . #t))) (source . "git://github.com/wargrey/graphics") (tags . ("colorspace" "graphics" "typed-racket" "unstable")) (versions . #hash((default . #hasheq((checksum . "57d09f638b2d73e8f36bf358540f3ba2f3ff8ce1") (source . "git://github.com/wargrey/graphics") (source_url . "http://github.com/wargrey/graphics/tree/master"))))))) ("graphics-engine" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "graphics-engine" "doc/graphics-engine@graphics-engine/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graphics-engine.txt") (test-failure-log . "server/built/test-fail/graphics-engine.txt") (test-success-log . #f))) (checksum . "94d492f057e1fa712ceab1823afca31ffc80f04d") (checksum-error . #f) (collection . "graphics-engine") (conflicts . ()) (date-added . 1573518396) (dependencies . ("base" "opengl" "glm" "glsl" "gui-lib" "reprovide-lang-lib" "racket-doc" "scribble-lib")) (description . "An accelerated graphics programming environment.") (implies . ()) (last-checked . 1632903372) (last-edit . 1573518396) (last-updated . 1596547972) (modules . ((lib "graphics-engine/application.rkt") (lib "graphics-engine/scribblings/graphics-engine.scrbl") (lib "graphics-engine/examples/legacy/01-hello-world.rkt") (lib "graphics-engine/examples/legacy/10-triangle.rkt") (lib "graphics-engine/canvas.rkt") (lib "graphics-engine/examples/legacy/09-points.rkt") (lib "graphics-engine/examples/legacy/05-hide-cursor.rkt") (lib "graphics-engine/examples/legacy/04-clear-screen.rkt") (lib "graphics-engine/shader.rkt") (lib "graphics-engine/main.rkt") (lib "graphics-engine/the-lang.rkt") (lib "graphics-engine/vector.rkt") (lib "graphics-engine/examples/legacy/06-trap-cursor.rkt") (lib "graphics-engine/examples/legacy/08-point.rkt") (lib "graphics-engine/examples/legacy/11-shader.rkt") (lib "graphics-engine/drawable.rkt") (lib "graphics-engine/examples/legacy/07-toggle-cursor.rkt") (lib "graphics-engine/private.rkt") (lib "graphics-engine/examples/core/01-triangles.rkt") (lib "graphics-engine/vertex.rkt") (lib "graphics-engine/examples/legacy/02-nothing.rkt") (lib "graphics-engine/color.rkt") (lib "graphics-engine/examples/legacy/03-fps-counter.rkt"))) (name . "graphics-engine") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (OpenGL . #t) (author:dedbox@gmail.com . #t) (environment . #t) (graphics . #t) (prog . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-graphics-engine.git") (tags . ("environment" "graphics" "OpenGL" "prog")) (versions . #hash((default . #hasheq((checksum . "94d492f057e1fa712ceab1823afca31ffc80f04d") (source . "https://github.com/dedbox/racket-graphics-engine.git") (source_url . "https://github.com/dedbox/racket-graphics-engine.git"))))))) ("graphite" . #hasheq((author . "hazel@knightsofthelambdacalcul.us") (authors . ("hazel@knightsofthelambdacalcul.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graphite.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/graphite.txt"))) (checksum . "58a7bc54345e9b0bc5ac080401757f76d3999b0c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1621281750) (dependencies . ("graphite-lib" "graphite-doc" "graphite-tutorial")) (description . "A ggplot2-inspired data visualization library") (implies . ("graphite-lib" "graphite-doc" "graphite-tutorial")) (last-checked . 1632903372) (last-edit . 1621281964) (last-updated . 1629342788) (modules . ()) (name . "graphite") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:hazel@knightsofthelambdacalcul.us . #t) (plot . #t) (ring:1 . #t))) (source . "https://github.com/ralsei/graphite.git?path=graphite") (tags . ("plot")) (versions . #hash((default . #hasheq((checksum . "58a7bc54345e9b0bc5ac080401757f76d3999b0c") (source . "https://github.com/ralsei/graphite.git?path=graphite") (source_url . "https://github.com/ralsei/graphite.git?path=graphite"))))))) ("graphite-doc" . #hasheq((author . "hazel@knightsofthelambdacalcul.us") (authors . ("hazel@knightsofthelambdacalcul.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "graphite" "doc/graphite@graphite-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graphite-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/graphite-doc.txt"))) (checksum . "58a7bc54345e9b0bc5ac080401757f76d3999b0c") (checksum-error . #f) (collection . "graphite-doc") (conflicts . ()) (date-added . 1621281673) (dependencies . ("base" "loess" "draw-doc" "plot-gui-lib" "simple-polynomial" "data-frame" "graphite-lib" "graphite-tutorial" "pict-doc" "pict-lib" "plot-doc" "plot-lib" "sandbox-lib" "scribble-lib" "racket-doc" "gregor")) (description . "Documentation for Graphite") (implies . ()) (last-checked . 1632903372) (last-edit . 1621281998) (last-updated . 1629342794) (modules . ((lib "graphite-doc/graphite.scrbl"))) (name . "graphite-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:hazel@knightsofthelambdacalcul.us . #t) (plot . #t) (ring:1 . #t))) (source . "https://github.com/ralsei/graphite.git?path=graphite-doc") (tags . ("plot")) (versions . #hash((default . #hasheq((checksum . "58a7bc54345e9b0bc5ac080401757f76d3999b0c") (source . "https://github.com/ralsei/graphite.git?path=graphite-doc") (source_url . "https://github.com/ralsei/graphite.git?path=graphite-doc"))))))) ("graphite-lib" . #hasheq((author . "hazel@knightsofthelambdacalcul.us") (authors . ("hazel@knightsofthelambdacalcul.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graphite-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/graphite-lib.txt"))) (checksum . "58a7bc54345e9b0bc5ac080401757f76d3999b0c") (checksum-error . #f) (collection . "graphite") (conflicts . ()) (date-added . 1621281561) (dependencies . (("base" #:version "8.1") "colormaps" "data-frame" "ddict" "fancy-app" "loess" "math-lib" "pict-lib" "plot-gui-lib" "plot-lib" "threading-lib" "simple-polynomial")) (description . "A ggplot2-inspired data visualization library (no documentation)") (implies . ()) (last-checked . 1632903373) (last-edit . 1621282014) (last-updated . 1629342800) (modules . ((lib "graphite/transforms.rkt") (lib "graphite/renderer.rkt") (lib "graphite/boxplot.rkt") (lib "graphite/points.rkt") (lib "graphite/col.rkt") (lib "graphite/error-bars.rkt") (lib "graphite/main.rkt") (lib "graphite/extern/box-and-whiskers.rkt") (lib "graphite/util.rkt") (lib "graphite/qualitative.rkt") (lib "graphite/titles.rkt") (lib "graphite/aes.rkt") (lib "graphite/lines.rkt") (lib "graphite/bar.rkt") (lib "graphite/faceting.rkt") (lib "graphite/fit.rkt") (lib "graphite/density.rkt") (lib "graphite/with-area.rkt") (lib "graphite/themes.rkt") (lib "graphite/parameters.rkt") (lib "graphite/histogram.rkt"))) (name . "graphite-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:hazel@knightsofthelambdacalcul.us . #t) (plot . #t) (ring:1 . #t))) (source . "https://github.com/ralsei/graphite.git?path=graphite-lib") (tags . ("plot")) (versions . #hash((default . #hasheq((checksum . "58a7bc54345e9b0bc5ac080401757f76d3999b0c") (source . "https://github.com/ralsei/graphite.git?path=graphite-lib") (source_url . "https://github.com/ralsei/graphite.git?path=graphite-lib"))))))) ("graphite-test" . #hasheq((author . "hazel@knightsofthelambdacalcul.us") (authors . ("hazel@knightsofthelambdacalcul.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graphite-test.txt") (test-failure-log . "server/built/test-fail/graphite-test.txt") (test-success-log . #f))) (checksum . "58a7bc54345e9b0bc5ac080401757f76d3999b0c") (checksum-error . #f) (collection . "graphite-test") (conflicts . ()) (date-added . 1621281720) (dependencies . ("draw-lib" "plot-gui-lib" "base" "data-frame" "graphite-lib" "plot-lib" "pict-lib" "rackunit-lib")) (description . "Tests for Graphite") (implies . ()) (last-checked . 1632903373) (last-edit . 1621282028) (last-updated . 1629342806) (modules . ((lib "graphite-test/aes.rkt") (lib "graphite-test/transform.rkt") (lib "graphite-test/faceting.rkt") (lib "graphite-test/renderers.rkt") (lib "graphite-test/util.rkt"))) (name . "graphite-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:hazel@knightsofthelambdacalcul.us . #t) (plot . #t) (ring:1 . #t))) (source . "https://github.com/ralsei/graphite.git?path=graphite-test") (tags . ("plot")) (versions . #hash((default . #hasheq((checksum . "58a7bc54345e9b0bc5ac080401757f76d3999b0c") (source . "https://github.com/ralsei/graphite.git?path=graphite-test") (source_url . "https://github.com/ralsei/graphite.git?path=graphite-test"))))))) ("graphite-tutorial" . #hasheq((author . "hazel@knightsofthelambdacalcul.us") (authors . ("hazel@knightsofthelambdacalcul.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "graphite-tutorial" "doc/graphite-tutorial@graphite-tutorial/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/graphite-tutorial.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/graphite-tutorial.txt"))) (checksum . "58a7bc54345e9b0bc5ac080401757f76d3999b0c") (checksum-error . #f) (collection . "graphite-tutorial") (conflicts . ()) (date-added . 1621281619) (dependencies . ("base" "plot-doc" "data-frame" "graphite-doc" "graphite-lib" "racket-doc" "sandbox-lib" "sawzall-doc" "sawzall-lib" "scribble-lib" "threading-doc" "threading-lib")) (description . "A guided tour for Graphite") (implies . ()) (last-checked . 1632903373) (last-edit . 1621282047) (last-updated . 1629342811) (modules . ((lib "graphite-tutorial/graphite-tutorial.scrbl"))) (name . "graphite-tutorial") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:hazel@knightsofthelambdacalcul.us . #t) (plot . #t) (ring:1 . #t))) (source . "https://github.com/ralsei/graphite.git?path=graphite-tutorial") (tags . ("plot")) (versions . #hash((default . #hasheq((checksum . "58a7bc54345e9b0bc5ac080401757f76d3999b0c") (source . "https://github.com/ralsei/graphite.git?path=graphite-tutorial") (source_url . "https://github.com/ralsei/graphite.git?path=graphite-tutorial"))))))) ("gregor" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gregor.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gregor.txt"))) (checksum . "91d71c6082fec4197aaf9ade57aceb148116c11c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1573535924) (dependencies . ("gregor-lib" "gregor-doc" "base")) (description . "Date and time library") (implies . ("gregor-lib" "gregor-doc")) (last-checked . 1632903373) (last-edit . 1574542772) (last-updated . 1614321124) (modules . ()) (name . "gregor") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:zeppieri@gmail.com . #t) (calendar . #t) (date . #t) (ring:1 . #t) (time . #t))) (source . "https://github.com/97jaz/gregor.git?path=gregor") (tags . ("calendar" "date" "time")) (versions . #hash((default . #hasheq((checksum . "91d71c6082fec4197aaf9ade57aceb148116c11c") (source . "https://github.com/97jaz/gregor.git?path=gregor") (source_url . "https://github.com/97jaz/gregor.git?path=gregor"))))))) ("gregor-doc" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gregor" "doc/gregor@gregor-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gregor-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gregor-doc.txt"))) (checksum . "91d71c6082fec4197aaf9ade57aceb148116c11c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1573535947) (dependencies . ("base" "base" "racket-doc" "data-doc" "data-lib" "gregor-lib" "scribble-lib" "sandbox-lib" "tzinfo")) (description . "Documentation part of gregor library") (implies . ()) (last-checked . 1632903373) (last-edit . 1573535947) (last-updated . 1614321126) (modules . ((lib "gregor/scribblings/moment.scrbl") (lib "gregor/scribblings/time-arithmetic-provider.scrbl") (lib "gregor/scribblings/date.scrbl") (lib "gregor/scribblings/gregor.scrbl") (lib "gregor/scribblings/moment-provider.scrbl") (lib "gregor/scribblings/date-arithmetic-provider.scrbl") (lib "gregor/scribblings/date-provider.scrbl") (lib "gregor/scribblings/time.scrbl") (lib "gregor/scribblings/clock.scrbl") (lib "gregor/scribblings/format.scrbl") (lib "gregor/scribblings/exceptions.scrbl") (lib "gregor/scribblings/query.scrbl") (lib "gregor/scribblings/time-provider.scrbl") (lib "gregor/scribblings/period.scrbl") (lib "gregor/scribblings/timezone.scrbl") (lib "gregor/scribblings/datetime-provider.scrbl") (lib "gregor/scribblings/datetime-arithmetic-provider.scrbl") (lib "gregor/scribblings/datetime.scrbl"))) (name . "gregor-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (calendar . #t) (date . #t) (ring:1 . #t) (time . #t))) (source . "https://github.com/97jaz/gregor.git?path=gregor-doc") (tags . ("calendar" "date" "time")) (versions . #hash((default . #hasheq((checksum . "91d71c6082fec4197aaf9ade57aceb148116c11c") (source . "https://github.com/97jaz/gregor.git?path=gregor-doc") (source_url . "https://github.com/97jaz/gregor.git?path=gregor-doc"))))))) ("gregor-lib" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gregor-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gregor-lib.txt"))) (checksum . "91d71c6082fec4197aaf9ade57aceb148116c11c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1573535964) (dependencies . ("base" "data-lib" "memoize" "parser-tools-lib" "tzinfo" "cldr-core" "cldr-bcp47" "cldr-numbers-modern" "cldr-dates-modern" "cldr-localenames-modern")) (description . "Code part of the gregor date and time library") (implies . ()) (last-checked . 1632903374) (last-edit . 1573535964) (last-updated . 1614321127) (modules . ((lib "gregor/private/pattern/ast/weekday.rkt") (lib "gregor/private/pattern/l10n/named-trie.rkt") (lib "gregor/private/pattern/ast/minute.rkt") (lib "gregor/private/datetime.rkt") (lib "gregor/private/difference.rkt") (lib "gregor/private/core/structs.rkt") (lib "gregor/private/pattern/ast/era.rkt") (lib "gregor/private/pattern/l10n/iso-offset.rkt") (lib "gregor/private/parse.rkt") (lib "gregor/period.rkt") (lib "gregor/private/moment-base.rkt") (lib "gregor/private/pattern/l10n/zone-nonloc.rkt") (lib "gregor/private/pattern/ast/separator.rkt") (lib "gregor/private/pattern/ast/second.rkt") (lib "gregor/private/date.rkt") (lib "gregor/private/core/compare.rkt") (lib "gregor/private/pattern/ast/hour.rkt") (lib "gregor/private/time.rkt") (lib "gregor/private/pattern/l10n/metazone.rkt") (lib "gregor/main.rkt") (lib "gregor/private/pattern/ast/zone.rkt") (lib "gregor/private/pattern/l10n/zone-loc.rkt") (lib "gregor/time.rkt") (lib "gregor/private/pattern/ast/day.rkt") (lib "gregor/private/pattern/ast/year.rkt") (lib "gregor/private/pattern/l10n/gmt-offset.rkt") (lib "gregor/private/pattern/lexer.rkt") (lib "gregor/private/exn.rkt") (lib "gregor/private/pattern/l10n/numbers.rkt") (lib "gregor/private/format.rkt") (lib "gregor/private/pattern/ast/month.rkt") (lib "gregor/private/pattern/l10n/zone-id.rkt") (lib "gregor/private/core/hmsn.rkt") (lib "gregor/private/pattern/ast/period.rkt") (lib "gregor/private/period.rkt") (lib "gregor/private/generics.rkt") (lib "gregor/private/core/math.rkt") (lib "gregor/private/pattern/ast/week.rkt") (lib "gregor/private/pattern/ast/quarter.rkt") (lib "gregor/private/pattern/ast/literal.rkt") (lib "gregor/private/pattern/parse-state.rkt") (lib "gregor/private/core/ymd.rkt") (lib "gregor/private/clock.rkt") (lib "gregor/private/iso8601-parse.rkt") (lib "gregor/private/moment.rkt") (lib "gregor/private/pattern/l10n/l10n-week.rkt") (lib "gregor/private/pattern/l10n/zone-util.rkt") (lib "gregor/private/pattern/ast.rkt") (lib "gregor/private/pattern/l10n/symbols.rkt") (lib "gregor/private/pattern/l10n/trie.rkt") (lib "gregor/private/offset-resolvers.rkt"))) (name . "gregor-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:zeppieri@gmail.com . #t) (calendar . #t) (date . #t) (ring:1 . #t) (time . #t))) (source . "https://github.com/97jaz/gregor.git?path=gregor-lib") (tags . ("calendar" "date" "time")) (versions . #hash((default . #hasheq((checksum . "91d71c6082fec4197aaf9ade57aceb148116c11c") (source . "https://github.com/97jaz/gregor.git?path=gregor-lib") (source_url . "https://github.com/97jaz/gregor.git?path=gregor-lib"))))))) ("gregor-test" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gregor-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gregor-test.txt"))) (checksum . "91d71c6082fec4197aaf9ade57aceb148116c11c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1573535977) (dependencies . ("base" "gregor-lib" "rackunit-lib")) (description . "Tests for the gregor library") (implies . ()) (last-checked . 1632903374) (last-edit . 1573535977) (last-updated . 1614321128) (modules . ((lib "gregor/tests/datetime-provider.rkt") (lib "gregor/tests/moment-provider.rkt") (lib "gregor/tests/period.rkt") (lib "gregor/tests/time.rkt") (lib "gregor/tests/datetime.rkt") (lib "gregor/tests/all-tests.rkt") (lib "gregor/tests/moment.rkt") (lib "gregor/tests/date-arithmetic.rkt") (lib "gregor/tests/query.rkt") (lib "gregor/tests/time-arithmetic.rkt") (lib "gregor/tests/datetime-arithmetic.rkt") (lib "gregor/tests/clock.rkt") (lib "gregor/tests/date.rkt") (lib "gregor/tests/parse.rkt") (lib "gregor/tests/date-provider.rkt") (lib "gregor/tests/format.rkt") (lib "gregor/tests/time-provider.rkt"))) (name . "gregor-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:zeppieri@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/97jaz/gregor.git?path=gregor-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "91d71c6082fec4197aaf9ade57aceb148116c11c") (source . "https://github.com/97jaz/gregor.git?path=gregor-test") (source_url . "https://github.com/97jaz/gregor.git?path=gregor-test"))))))) ("grift" . #hasheq((author . "diaa6510@gmail.com akuhlens@iu.edu") (authors . ("diaa6510@gmail.com" "akuhlens@iu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/grift.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/grift.txt") (test-failure-log . "server/built/test-fail/grift.txt") (test-success-log . #f))) (checksum . "57a015b2ed7d4a8425b3d61213567322de9d2573") (checksum-error . #f) (collection . "grift") (conflicts . ()) (dependencies . ()) (description . "A gradually typed language") (implies . ()) (last-checked . 1632903374) (last-edit . 1537065784) (last-updated . 1617688459) (modules . ((lib "grift/src/language/contracts.rkt") (lib "grift/src/growable-vector.rkt") (lib "grift/src/logging.rkt") (lib "grift/tests/rackunit.rkt") (lib "grift/src/form-generics.rkt") (lib "grift/src/configuration.rkt") (lib "grift/src/unsafe-require-typed.rkt") (lib "grift/tests/suite/monovectors/tests.rkt") (lib "grift/tests/suite/core/binding/tests.rkt") (lib "grift/src/casts/label-lambdas.rkt") (lib "grift/src/language/primitives.rkt") (lib "grift/src/language/pprint.rkt") (lib "grift/tests/suite/static/binding/tests.rkt") (lib "grift/src/data/uncover-locals.rkt") (lib "grift/src/backend-c/generate-c.rkt") (lib "grift/src/casts/convert-closures.rkt") (lib "grift/src/grift/syntax-to-grift0.rkt") (lib "grift/src/lib/mutable-set.rkt") (lib "grift/tests/macros.rkt") (lib "grift/src/grift/type-check.rkt") (lib "grift/src/casts/interpret-casts.rkt") (lib "grift/src/casts/define-to-let.rkt") (lib "grift/tests/suite/boxes/tests.rkt") (lib "grift/src/lib/function.rkt") (lib "grift/tests/suite/core/tests.rkt") (lib "grift/src/casts/purify-letrec.rkt") (lib "grift/src/casts/constants-and-codes.rkt") (lib "grift/src/compile.rkt") (lib "grift/src/language/form-map.rkt") (lib "grift/src/language/syntax-with-constants.rkt") (lib "grift/tests/paths.rkt") (lib "grift/src/lib/dhash.rkt") (lib "grift/src/grift/read.rkt") (lib "grift/src/data/normalize-context.rkt") (lib "grift/src/casts/interpret-casts-with-error.rkt") (lib "grift/tests/suite/static/tests.rkt") (lib "grift/tests/suite/large/tests.rkt") (lib "grift/src/grift/reduce-to-cast-calculus.rkt") (lib "grift/tests/suite/tools/tests.rkt") (lib "grift/src/type-equality.rkt") (lib "grift/src/backend-c/runtime/make.rkt") (lib "grift/src/language/forms.rkt") (lib "grift/src/grift/insert-casts.rkt") (lib "grift/src/language/make-begin.rkt") (lib "grift/src/errors.rkt") (lib "grift/src/grift/definer.rkt") (lib "grift/src/casts/cast-profiler.rkt") (lib "grift/src/backend-c/runtime-location.rkt") (lib "grift/src/language/lambda0.rkt") (lib "grift/src/language/grift.rkt") (lib "grift/src/language/forms-equal.rkt") (lib "grift/tests/suite/mu/tests.rkt") (lib "grift/src/casts/hoist-types-and-coercions.rkt") (lib "grift/src/data/simplify-predicates.rkt") (lib "grift/src/language/c-helpers.rkt") (lib "grift/src/macros.rkt") (lib "grift/tests/suite/tests.rkt") (lib "grift/tests/suite/vectors/tests.rkt") (lib "grift/tests/test-compile.rkt") (lib "grift/src/casts/specify-representation.rkt") (lib "grift/src/helpers.rkt") (lib "grift/src/casts/interpret-casts-with-coercions.rkt") (lib "grift/tests/main.rkt") (lib "grift/src/unique-identifiers.rkt") (lib "grift/tests/suite/monoboxes/tests.rkt") (lib "grift/src/language/syntax.rkt") (lib "grift/src/casts/interpret-casts-common.rkt") (lib "grift/src/lib/graph.rkt") (lib "grift/benchmark/bench.rkt") (lib "grift/src/casts/interpret-casts-with-hyper-coercions.rkt") (lib "grift/src/helpers-untyped.rkt") (lib "grift/src/casts/interpret-casts-with-type-based-casts.rkt") (lib "grift/src/casts/memory-layout-helpers.rkt") (lib "grift/src/data/flatten-values.rkt") (lib "grift/src/backend-c/code-generator.rkt") (lib "grift/src/casts/impose-cast-semantics.rkt") (lib "grift/tests/values.rkt") (lib "grift/src/data/convert-representation.rkt") (lib "grift/src/data/remove-complex-opera.rkt") (lib "grift/benchmark/configs.rkt") (lib "grift/src/lib/option-set.rkt") (lib "grift/src/lib/dgraph.rkt") (lib "grift/tests/test-compile-file.rkt") (lib "grift/main.rkt") (lib "grift/tests/suite/program/tests.rkt") (lib "grift/tests/suite/tuples/tests.rkt") (lib "grift/src/unique-counter.rkt"))) (name . "grift") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:akuhlens@iu.edu . #t) (author:diaa6510@gmail.com . #t) (compiler . #t) (gradual-typing . #t) (language . #t) (programming-languages . #t) (ring:1 . #t))) (source . "https://github.com/Gradual-Typing/Grift.git") (tags . ("compiler" "gradual-typing" "language" "programming-languages")) (versions . #hash((default . #hasheq((checksum . "57a015b2ed7d4a8425b3d61213567322de9d2573") (source . "https://github.com/Gradual-Typing/Grift.git") (source_url . "https://github.com/Gradual-Typing/Grift.git"))))))) ("gsl-integration" . #hasheq((author . "petter.pripp@yahoo.com") (authors . ("petter.pripp@yahoo.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gsl-integration" "doc/gsl-integration@gsl-integration/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gsl-integration.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gsl-integration.txt"))) (checksum . "09a045e3bb451c82a52b3a155a07d112fcb6b688") (checksum-error . #f) (collection . "gsl-integration") (conflicts . ()) (date-added . 1558744012) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib" "scribble-math")) (description . "Interface to GNU GSL Numerical Integration.\r\n\r\n") (implies . ()) (last-checked . 1632903374) (last-edit . 1559150310) (last-updated . 1630372561) (modules . ((lib "gsl-integration/integration.rkt") (lib "gsl-integration/scribblings/gsl-integration.scrbl") (lib "gsl-integration/test.rkt") (lib "gsl-integration/pointer.rkt") (lib "gsl-integration/main.rkt") (lib "gsl-integration/example.rkt") (lib "gsl-integration/wrap.rkt"))) (name . "gsl-integration") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:petter.pripp@yahoo.com . #t) (gnu . #t) (gsl . #t) (integration . #t) (math . #t) (numerical . #t) (ring:1 . #t) (science . #t))) (source . "https://github.com/petterpripp/gsl-integration.git") (tags . ("gnu" "gsl" "integration" "math" "numerical" "science")) (versions . #hash((default . #hasheq((checksum . "09a045e3bb451c82a52b3a155a07d112fcb6b688") (source . "https://github.com/petterpripp/gsl-integration.git") (source_url . "https://github.com/petterpripp/gsl-integration.git"))))))) ("gsl-rng" . #hasheq((author . "petter.pripp@yahoo.com") (authors . ("petter.pripp@yahoo.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gsl-rng" "doc/gsl-rng@gsl-rng/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gsl-rng.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gsl-rng.txt"))) (checksum . "915227b889c1056c7b1e2e208a922ffeaa2d1615") (checksum-error . #f) (collection . "gsl-rng") (conflicts . ()) (date-added . 1560043493) (dependencies . ("base" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "Interface to GNU GSL Random Number Generation") (implies . ()) (last-checked . 1632903375) (last-edit . 1560043493) (last-updated . 1630372562) (modules . ((lib "gsl-rng/main.rkt") (lib "gsl-rng/private/rng.rkt") (lib "gsl-rng/scribblings/gsl-rng.scrbl") (lib "gsl-rng/private/test.rkt") (lib "gsl-rng/private/example.rkt"))) (name . "gsl-rng") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:petter.pripp@yahoo.com . #t) (gnu . #t) (gsl . #t) (math . #t) (random . #t) (ring:1 . #t) (rng . #t))) (source . "https://github.com/petterpripp/gsl-rng.git") (tags . ("gnu" "gsl" "math" "random" "rng")) (versions . #hash((default . #hasheq((checksum . "915227b889c1056c7b1e2e208a922ffeaa2d1615") (source . "https://github.com/petterpripp/gsl-rng.git") (source_url . "https://github.com/petterpripp/gsl-rng.git"))))))) ("gtp-benchmarks" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gtp-benchmarks" "doc/gtp-benchmarks@gtp-benchmarks/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gtp-benchmarks.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gtp-benchmarks.txt"))) (checksum . "4f9e9b35aaa530211bd8af78733107146b12de1b") (checksum-error . #f) (collection . "gtp-benchmarks") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "require-typed-check" "scribble-lib" "racket-doc" "rackunit-lib" "typed-racket-doc" "at-exp-lib" "gtp-util" "pict-lib" "scribble-abbrevs" "syntax-sloc" "with-cache")) (description . "gradual typing performance benchmarks") (implies . ()) (last-checked . 1632903375) (last-edit . 1525737422) (last-updated . 1625955198) (modules . ((lib "gtp-benchmarks/benchmarks/quadT/base/quad.rkt") (lib "gtp-benchmarks/benchmarks/acquire/untyped/basics.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/acquire/both/state-adapted.rkt") (lib "gtp-benchmarks/benchmarks/acquire/both/board-adapted.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/array-comprehension.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/syntax-utils.rkt") (lib "gtp-benchmarks/benchmarks/gregor/both/tzinfo-adapter.rkt") (lib "gtp-benchmarks/benchmarks/mbta/untyped/run-t.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/moment-base.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/ocm-struct.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/ocm-struct.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/untyped/structs.rkt") (lib "gtp-benchmarks/benchmarks/acquire/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/untyped/data.rkt") (lib "gtp-benchmarks/benchmarks/quadU/both/penalty-struct-adapted.rkt") (lib "gtp-benchmarks/benchmarks/quadT/both/penalty-struct-adapted.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/zoneinfo.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/adjlist-utils.rkt") (lib "gtp-benchmarks/benchmarks/tetris/untyped/elim.rkt") (lib "gtp-benchmarks/benchmarks/lnm/untyped/lnm-plot.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/datetime.rkt") (lib "gtp-benchmarks/benchmarks/forth/typed/command.rkt") (lib "gtp-benchmarks/benchmarks/snake/untyped/motion-help.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/date.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/base/compiler-zo-parse.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/cldr/scribblings/cldr-core.scrbl") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-fns-minspantree.rkt") (lib "gtp-benchmarks/utilities/count-chaperones.rkt") (lib "gtp-benchmarks/benchmarks/snake/typed/const.rkt") (lib "gtp-benchmarks/benchmarks/snake/untyped/cut-tail.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/render.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/render.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/utils.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/typed/structs.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/typed/jfif.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/untyped/ai.rkt") (lib "gtp-benchmarks/benchmarks/synth/typed/drum.rkt") (lib "gtp-benchmarks/benchmarks/fsm/both/automata-adapted.rkt") (lib "gtp-benchmarks/benchmarks/snake/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/take5/untyped/deck.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/core.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/core.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/hyphenate.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/hyphenate.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/main.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-matrix.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/forth/untyped/command.rkt") (lib "gtp-benchmarks/benchmarks/lnm/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/take5/typed/card-pool.rkt") (lib "gtp-benchmarks/benchmarks/morsecode/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/zombie/both/image-adapted.rkt") (lib "gtp-benchmarks/benchmarks/fsm/typed/population.rkt") (lib "gtp-benchmarks/benchmarks/acquire/both/benchmark-util.rkt") (lib "gtp-benchmarks/benchmarks/take5/untyped/card-pool.rkt") (lib "gtp-benchmarks/benchmarks/fsm/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/forth/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/mbta/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/t-view-types.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/gregor-structs.rkt") (lib "gtp-benchmarks/benchmarks/tetris/untyped/world.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/unsafe.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/acquire/typed/state.rkt") (lib "gtp-benchmarks/benchmarks/lnm/typed/summary.rkt") (lib "gtp-benchmarks/benchmarks/fsm/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/quick-sample.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/quick-sample.rkt") (lib "gtp-benchmarks/benchmarks/snake/untyped/handlers.rkt") (lib "gtp-benchmarks/benchmarks/lnm/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/synth/both/typed-data.rkt") (lib "gtp-benchmarks/utilities/make-configurations.rkt") (lib "gtp-benchmarks/benchmarks/synth/typed/array-transform.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/both/structs-adapted.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/typed/exif.rkt") (lib "gtp-benchmarks/benchmarks/tetris/typed/bset.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/typed/lcs.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/core-structs.rkt") (lib "gtp-benchmarks/benchmarks/acquire/untyped/admin.rkt") (lib "gtp-benchmarks/benchmarks/sieve/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/snake/typed/motion-help.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/untyped/structs.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/ocm-struct.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/ocm-struct.rkt") (lib "gtp-benchmarks/benchmarks/acquire/untyped/board.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/private/tzfile-parser.rkt") (lib "gtp-benchmarks/benchmarks/synth/untyped/sequencer.rkt") (lib "gtp-benchmarks/benchmarks/take5/untyped/stack.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/render.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/render.rkt") (lib "gtp-benchmarks/benchmarks/lnm/untyped/summary.rkt") (lib "gtp-benchmarks/benchmarks/synth/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-fns-maxflow.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/quad-main.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/quad-main.rkt") (lib "gtp-benchmarks/benchmarks/acquire/typed/strategy.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/private/os/unix.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/t-graph-types.rkt") (lib "gtp-benchmarks/benchmarks/synth/untyped/data.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/zombie/untyped/image.rkt") (lib "gtp-benchmarks/benchmarks/tetris/typed/consts.rkt") (lib "gtp-benchmarks/benchmarks/zombie/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-fns-basic.rkt") (lib "gtp-benchmarks/benchmarks/lnm/untyped/spreadsheet.rkt") (lib "gtp-benchmarks/benchmarks/snake/typed/cut-tail.rkt") (lib "gtp-benchmarks/benchmarks/tetris/typed/data.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/array-syntax.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/typed/zo-shell.rkt") (lib "gtp-benchmarks/benchmarks/synth/typed/array-struct.rkt") (lib "gtp-benchmarks/benchmarks/take5/untyped/basics.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph.scrbl") (lib "gtp-benchmarks/benchmarks/gregor/base/cldr/likely-subtags.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/types.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/queue/gen-queue.rkt") (lib "gtp-benchmarks/benchmarks/mbta/typed/run-t.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/hyphenate.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/hyphenate.rkt") (lib "gtp-benchmarks/benchmarks/morsecode/typed/levenshtein.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/untyped/utils.rkt") (lib "gtp-benchmarks/utilities/process-helper.rkt") (lib "gtp-benchmarks/benchmarks/acquire/typed/basics.rkt") (lib "gtp-benchmarks/benchmarks/mbta/untyped/t-graph.rkt") (lib "gtp-benchmarks/benchmarks/take5/typed/basics.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/ymd.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/hash-utils.rkt") (lib "gtp-benchmarks/benchmarks/mbta/typed/t-view.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/csp/helper.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/csp/helper.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/forth/typed/stack.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/csp/solver.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/csp/solver.rkt") (lib "gtp-benchmarks/benchmarks/fsm/typed/automata.rkt") (lib "gtp-benchmarks/benchmarks/fsm/typed/utilities.rkt") (lib "gtp-benchmarks/benchmarks/mbta/typed/t-graph.rkt") (lib "gtp-benchmarks/benchmarks/forth/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/synth/untyped/array-utils.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/untyped/benv.rkt") (lib "gtp-benchmarks/benchmarks/acquire/typed/admin.rkt") (lib "gtp-benchmarks/benchmarks/snake/untyped/motion.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/typed/message-queue.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-fns-singlesource-shortestpaths.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/measure.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/measure.rkt") (lib "gtp-benchmarks/benchmarks/take5/typed/card.rkt") (lib "gtp-benchmarks/benchmarks/mbta/untyped/t-view.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/typed/structs.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/sugar-list.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/sugar-list.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/csp/variable.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/csp/variable.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/array-sequence.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/typed/utilities.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/utils.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/utils.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/untyped/jfif.rkt") (lib "gtp-benchmarks/benchmarks/acquire/typed/player.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/gregor/both/gregor-adapter.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/private/zoneinfo.rkt") (lib "gtp-benchmarks/benchmarks/tetris/untyped/block.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/typed/huffman.rkt") (lib "gtp-benchmarks/benchmarks/tetris/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/lnm/typed/modulegraph.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/gregor-structs.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/offset-resolvers.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/time.rkt") (lib "gtp-benchmarks/benchmarks/acquire/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/bytevectors-6-typed.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/typed/zo-string.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/typed-array-struct.rkt") (lib "gtp-benchmarks/benchmarks/synth/untyped/mixer.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/untyped/huffman.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/typed-utils.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/source.rkt") (lib "gtp-benchmarks/benchmarks/morsecode/typed/morse-code-strings.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/difference.rkt") (lib "gtp-benchmarks/benchmarks/tetris/untyped/aux.rkt") (lib "gtp-benchmarks/benchmarks/fsm/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/private/generics.rkt") (lib "gtp-benchmarks/benchmarks/acquire/both/tree-adapted.rkt") (lib "gtp-benchmarks/utilities/sample-gtp-measure-manifest.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-fns-allpairs-shortestpaths.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/private/os/windows-registry.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/world.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/world.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/typed/automata.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/typed/bit-ports.rkt") (lib "gtp-benchmarks/benchmarks/synth/untyped/drum.rkt") (lib "gtp-benchmarks/benchmarks/zombie/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/utils.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/inline-sort.rkt") (lib "gtp-benchmarks/benchmarks/tetris/both/base-types.rkt") (lib "gtp-benchmarks/benchmarks/take5/both/basics-types.rkt") (lib "gtp-benchmarks/benchmarks/quadU/both/ocm-struct-adapted.rkt") (lib "gtp-benchmarks/benchmarks/quadT/both/ocm-struct-adapted.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/ocm.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/ocm.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/untyped/ukkonen.rkt") (lib "gtp-benchmarks/benchmarks/synth/typed/data.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/zombie/typed/math.rkt") (lib "gtp-benchmarks/benchmarks/morsecode/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/private/os/windows.rkt") (lib "gtp-benchmarks/benchmarks/morsecode/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/base/kcfa-typed.rkt") (lib "gtp-benchmarks/benchmarks/acquire/untyped/strategy.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/penalty-struct.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/penalty-struct.rkt") (lib "gtp-benchmarks/benchmarks/synth/untyped/synth.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/typed-array-transform.rkt") (lib "gtp-benchmarks/benchmarks/gregor/both/core-adapter.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/typed/utils.rkt") (lib "gtp-benchmarks/benchmarks/acquire/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/acquire/typed/board.rkt") (lib "gtp-benchmarks/benchmarks/snake/typed/data.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/both/population-adapted.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/typed/zo-transition.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/synth/untyped/array-struct.rkt") (lib "gtp-benchmarks/benchmarks/fsm/untyped/automata.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/typed/zo-find.rkt") (lib "gtp-benchmarks/benchmarks/tetris/typed/aux.rkt") (lib "gtp-benchmarks/benchmarks/take5/typed/dealer.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/base/cell-types.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/main.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/sugar-list.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/sugar-list.rkt") (lib "gtp-benchmarks/benchmarks/acquire/base/types.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/untyped/zo-shell.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/clock.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/untyped/ui.rkt") (lib "gtp-benchmarks/benchmarks/take5/both/stack-types.rkt") (lib "gtp-benchmarks/benchmarks/snake/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/scribblings/tzinfo.scrbl") (lib "gtp-benchmarks/scribblings/gtp-benchmarks.scrbl") (lib "gtp-benchmarks/benchmarks/acquire/untyped/player.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/moment-base.rkt") (lib "gtp-benchmarks/benchmarks/tetris/typed/world.rkt") (lib "gtp-benchmarks/benchmarks/zombie/untyped/zombie.rkt") (lib "gtp-benchmarks/benchmarks/tetris/untyped/bset.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/typed/ui.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/both/typed-data.rkt") (lib "gtp-benchmarks/benchmarks/tetris/typed/block.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/typed/ai.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/csp/constraint.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/csp/constraint.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/typed/denotable.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/queue/fifo.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/untyped/zo-find.rkt") (lib "gtp-benchmarks/benchmarks/lnm/typed/spreadsheet.rkt") (lib "gtp-benchmarks/benchmarks/take5/untyped/player.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-fns-graphviz.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/take5/both/player-types.rkt") (lib "gtp-benchmarks/benchmarks/lnm/both/modulegraph-adapted.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/my-graph.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/csp/problem.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/csp/problem.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/base/typed-zo-structs.rkt") (lib "gtp-benchmarks/benchmarks/zombie/typed/image.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-fns-coloring.rkt") (lib "gtp-benchmarks/benchmarks/zombie/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/hmsn.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/quick-sample.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/quick-sample.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/untyped/utilities.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/array.rkt") (lib "gtp-benchmarks/benchmarks/synth/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/take5/both/card-pool-types.rkt") (lib "gtp-benchmarks/utilities/modulegraph.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/date.rkt") (lib "gtp-benchmarks/utilities/copy-configuration.rkt") (lib "gtp-benchmarks/benchmarks/forth/typed/eval.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/cldr/file.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/untyped/bit-ports.rkt") (lib "gtp-benchmarks/benchmarks/take5/untyped/card.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/private/os/env.rkt") (lib "gtp-benchmarks/benchmarks/lnm/typed/bitstring.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-weighted.rkt") (lib "gtp-benchmarks/benchmarks/morsecode/typed/morse-code-table.rkt") (lib "gtp-benchmarks/benchmarks/acquire/untyped/auxiliaries.rkt") (lib "gtp-benchmarks/benchmarks/forth/untyped/eval.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/for-each.rkt") (lib "gtp-benchmarks/benchmarks/take5/untyped/dealer.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/core-structs.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/typed-mutable-array.rkt") (lib "gtp-benchmarks/benchmarks/take5/typed/player.rkt") (lib "gtp-benchmarks/benchmarks/snake/untyped/const.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/base/base-constants.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/exception.rkt") (lib "gtp-benchmarks/benchmarks/fsm/both/benchmark-util.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/world.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/world.rkt") (lib "gtp-benchmarks/benchmarks/synth/typed/array-broadcast.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/both/denotable-adapted.rkt") (lib "gtp-benchmarks/benchmarks/synth/untyped/array-broadcast.rkt") (lib "gtp-benchmarks/benchmarks/snake/untyped/data.rkt") (lib "gtp-benchmarks/benchmarks/forth/base/make-history.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/test/zoneinfo.rkt") (lib "gtp-benchmarks/benchmarks/synth/typed/synth.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/array-broadcast.rkt") (lib "gtp-benchmarks/benchmarks/snake/typed/collide.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/typed/ukkonen.rkt") (lib "gtp-benchmarks/benchmarks/sieve/typed/streams.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/private/structs.rkt") (lib "gtp-benchmarks/benchmarks/synth/typed/sequencer.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/both/benv-adapted.rkt") (lib "gtp-benchmarks/benchmarks/take5/both/dealer-types.rkt") (lib "gtp-benchmarks/benchmarks/acquire/untyped/state.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/measure.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/measure.rkt") (lib "gtp-benchmarks/benchmarks/morsecode/untyped/morse-code-strings.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/untyped/label.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/typed-array-sequence.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/gen-graph.rkt") (lib "gtp-benchmarks/benchmarks/fsm/untyped/utilities.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/untyped/zo-transition.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/quads.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/quads.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/typed/label.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/untyped/zo-string.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/base/compiler-zo-structs.rkt") (lib "gtp-benchmarks/benchmarks/zordoz/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/sieve/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/base/base-random.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/untyped/time.rkt") (lib "gtp-benchmarks/benchmarks/tetris/untyped/consts.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/utils.rkt") (lib "gtp-benchmarks/benchmarks/forth/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/typed/grid.rkt") (lib "gtp-benchmarks/benchmarks/synth/untyped/array-transform.rkt") (lib "gtp-benchmarks/scribblings/util.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/quad-main.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/quad-main.rkt") (lib "gtp-benchmarks/benchmarks/lnm/both/summary-adapted.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/core-types.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/core-types.rkt") (lib "gtp-benchmarks/benchmarks/take5/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/acquire/typed/tree.rkt") (lib "gtp-benchmarks/benchmarks/take5/both/deck-types.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/wrap.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/wrap.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/queue/priority.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/private/zoneinfo-search.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/offset-resolvers.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/typed/data.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/typed/time.rkt") (lib "gtp-benchmarks/benchmarks/tetris/typed/elim.rkt") (lib "gtp-benchmarks/utilities/type-info.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/untyped/grid.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/untyped/denotable.rkt") (lib "gtp-benchmarks/benchmarks/snake/both/data-adaptor.rkt") (lib "gtp-benchmarks/benchmarks/synth/typed/array-utils.rkt") (lib "gtp-benchmarks/benchmarks/acquire/untyped/tree.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/array-transform.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/csp/domain.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/csp/domain.rkt") (lib "gtp-benchmarks/benchmarks/lnm/typed/lnm-plot.rkt") (lib "gtp-benchmarks/benchmarks/synth/typed/mixer.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/csp/csp.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/csp/csp.rkt") (lib "gtp-benchmarks/benchmarks/zombie/typed/zombie.rkt") (lib "gtp-benchmarks/benchmarks/morsecode/untyped/levenshtein.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/typedefs.rkt") (lib "gtp-benchmarks/benchmarks/suffixtree/untyped/lcs.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/time.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/ocm.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/ocm.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/wrap.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/wrap.rkt") (lib "gtp-benchmarks/benchmarks/acquire/typed/auxiliaries.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/typed/benv.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/untyped/population.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/cldr/core.rkt") (lib "gtp-benchmarks/benchmarks/gregor/base/tzinfo/private/tabfile-parser.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/untyped/exif.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/hmsn.rkt") (lib "gtp-benchmarks/benchmarks/tetris/typed/tetras.rkt") (lib "gtp-benchmarks/benchmarks/snake/untyped/collide.rkt") (lib "gtp-benchmarks/benchmarks/lnm/untyped/modulegraph.rkt") (lib "gtp-benchmarks/benchmarks/take5/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/snake/typed/handlers.rkt") (lib "gtp-benchmarks/benchmarks/synth/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/zombie/untyped/math.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/untyped/message-queue.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/penalty-struct.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/penalty-struct.rkt") (lib "gtp-benchmarks/benchmarks/quadU/base/quad-types.rkt") (lib "gtp-benchmarks/benchmarks/quadT/base/quad-types.rkt") (lib "gtp-benchmarks/benchmarks/lnm/untyped/bitstring.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/clock.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/both/automata-adapted.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/parameters.rkt") (lib "gtp-benchmarks/benchmarks/tetris/typed/main.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/difference.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/moment.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/typed/cell.rkt") (lib "gtp-benchmarks/benchmarks/take5/both/card-adapted.rkt") (lib "gtp-benchmarks/benchmarks/snake/typed/motion.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-property.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/ymd.rkt") (lib "gtp-benchmarks/benchmarks/take5/typed/deck.rkt") (lib "gtp-benchmarks/benchmarks/take5/typed/stack.rkt") (lib "gtp-benchmarks/benchmarks/kcfa/both/time-adapted.rkt") (lib "gtp-benchmarks/benchmarks/morsecode/untyped/morse-code-table.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/untyped/cell.rkt") (lib "gtp-benchmarks/benchmarks/lnm/both/pict-adapted.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/mutable-array.rkt") (lib "gtp-benchmarks/benchmarks/quadU/untyped/utils.rkt") (lib "gtp-benchmarks/benchmarks/quadT/untyped/utils.rkt") (lib "gtp-benchmarks/benchmarks/jpeg/base/math/private/array/array-struct.rkt") (lib "gtp-benchmarks/benchmarks/dungeon/base/un-types.rkt") (lib "gtp-benchmarks/benchmarks/sieve/untyped/streams.rkt") (lib "gtp-benchmarks/benchmarks/fsm/untyped/population.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/tetris/untyped/data.rkt") (lib "gtp-benchmarks/benchmarks/gregor/untyped/moment.rkt") (lib "gtp-benchmarks/benchmarks/mbta/untyped/main.rkt") (lib "gtp-benchmarks/benchmarks/forth/base/command-types.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/untyped/automata.rkt") (lib "gtp-benchmarks/benchmarks/take5/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/mbta/base/graph/graph/graph-unweighted.rkt") (lib "gtp-benchmarks/benchmarks/quadU/typed/quads.rkt") (lib "gtp-benchmarks/benchmarks/quadT/typed/quads.rkt") (lib "gtp-benchmarks/benchmarks/lnm/base/untyped.rkt") (lib "gtp-benchmarks/benchmarks/forth/untyped/stack.rkt") (lib "gtp-benchmarks/benchmarks/tetris/untyped/tetras.rkt") (lib "gtp-benchmarks/benchmarks/fsmoo/typed/population.rkt") (lib "gtp-benchmarks/benchmarks/gregor/typed/datetime.rkt"))) (name . "gtp-benchmarks") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (benchmarking . #t) (gtp . #t) (ring:1 . #t))) (source . "https://github.com/bennn/gtp-benchmarks.git") (tags . ("benchmarking" "gtp")) (versions . #hash((default . #hasheq((checksum . "4f9e9b35aaa530211bd8af78733107146b12de1b") (source . "https://github.com/bennn/gtp-benchmarks.git") (source_url . "https://github.com/bennn/gtp-benchmarks.git"))))))) ("gtp-checkup" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gtp-checkup" "doc/gtp-checkup@gtp-checkup/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gtp-checkup.txt") (test-failure-log . "server/built/test-fail/gtp-checkup.txt") (test-success-log . #f))) (checksum . "39c36beb3329935b198c73a2010c37314686ab82") (checksum-error . #f) (collection . "gtp-checkup") (conflicts . ()) (dependencies . ("base" "basedir" "data-lib" "draw-lib" "gregor" "gtp-util" "math-lib" "memoize" "pict-lib" "plot-lib" "rackunit-lib" "require-typed-check" "sandbox-lib" "typed-racket-lib" "typed-racket-more" "zo-lib" "scribble-lib" "racket-doc" "rackunit-lib" "typed-racket-doc" "pict-abbrevs")) (description . "Test correctness of typed/untyped interaction.") (implies . ()) (last-checked . 1632903375) (last-edit . 1508861699) (last-updated . 1603301573) (modules . ((lib "gtp-checkup/benchmarks/jpeg/base/math/private/base/base-random.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/ocm.rkt") (lib "gtp-checkup/benchmarks/morsecode/typed/morse-code-strings.rkt") (lib "gtp-checkup/benchmarks/lnm/untyped/spreadsheet.rkt") (lib "gtp-checkup/benchmarks/synth/typed/synth.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/denotable-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/main.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/mutable-array.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/test/zoneinfo.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/quads.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/denotable.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/quick-sample.rkt") (lib "gtp-checkup/benchmarks/dungeon/untyped/message-queue.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/state.rkt") (lib "gtp-checkup/benchmarks/snake/untyped/collide.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/core-adapter.rkt") (lib "gtp-checkup/benchmarks/fsm/typed/main.rkt") (lib "gtp-checkup/data/definition.rkt") (lib "gtp-checkup/benchmarks/snake/typed/const.rkt") (lib "gtp-checkup/benchmarks/tetris/typed-worst-case/base-types.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/modulegraph.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/array-broadcast.rkt") (lib "gtp-checkup/benchmarks/snake/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/take5/untyped/card.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/main.rkt") (lib "gtp-checkup/benchmarks/quadT/base/quad.rkt") (lib "gtp-checkup/benchmarks/quadT/base/csp/helper.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed-worst-case/zo-shell.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/ocm.rkt") (lib "gtp-checkup/benchmarks/forth/untyped/eval.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/tree.rkt") (lib "gtp-checkup/benchmarks/quadU/base/csp/csp.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed/utils.rkt") (lib "gtp-checkup/benchmarks/fsmoo/untyped/main.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/stack-types.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed-worst-case/zo-string.rkt") (lib "gtp-checkup/benchmarks/zordoz/base/typed-zo-structs.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/base/base-constants.rkt") (lib "gtp-checkup/benchmarks/morsecode/typed-worst-case/levenshtein.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/admin.rkt") (lib "gtp-checkup/benchmarks/take5/untyped/basics.rkt") (lib "gtp-checkup/benchmarks/sieve/untyped/streams.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/admin.rkt") (lib "gtp-checkup/benchmarks/dungeon/untyped/grid.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed/zo-string.rkt") (lib "gtp-checkup/benchmarks/snake/untyped/const.rkt") (lib "gtp-checkup/benchmarks/dungeon/base/un-types.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/board.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/ymd.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/elim.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed-worst-case/zo-transition.rkt") (lib "gtp-checkup/benchmarks/zombie/typed-worst-case/image.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/summary-adapted.rkt") (lib "gtp-checkup/benchmarks/suffixtree/untyped/lcs.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/render.rkt") (lib "gtp-checkup/benchmarks/mbta/untyped/run-t.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed-worst-case/label.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/benv.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/ymd.rkt") (lib "gtp-checkup/benchmarks/synth/untyped/synth.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/state-adapted.rkt") (lib "gtp-checkup/benchmarks/quadT/base/csp/csp.rkt") (lib "gtp-checkup/benchmarks/mbta/typed/main.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed/message-queue.rkt") (lib "gtp-checkup/benchmarks/quadU/base/core.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/player.rkt") (lib "gtp-checkup/benchmarks/synth/typed/array-utils.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/consts.rkt") (lib "gtp-checkup/benchmarks/quadT/base/csp/solver.rkt") (lib "gtp-checkup/benchmarks/lnm/untyped/summary.rkt") (lib "gtp-checkup/benchmarks/take5/untyped/main.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/tabfile-parser.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/world.rkt") (lib "gtp-checkup/benchmarks/morsecode/typed/main.rkt") (lib "gtp-checkup/benchmarks/forth/base/make-history.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/core-structs.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/world.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/array-broadcast.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/typed-array-sequence.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed/main.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/ocm.rkt") (lib "gtp-checkup/benchmarks/snake/untyped/data.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/quad-main.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/main.rkt") (lib "gtp-checkup/benchmarks/tetris/typed-worst-case/world.rkt") (lib "gtp-checkup/benchmarks/take5/typed/player-types.rkt") (lib "gtp-checkup/benchmarks/zombie/typed/image-adapted.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/main.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/os/windows.rkt") (lib "gtp-checkup/benchmarks/snake/typed/cut-tail.rkt") (lib "gtp-checkup/benchmarks/morsecode/base/untyped.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/quadT/base/csp/problem.rkt") (lib "gtp-checkup/benchmarks/mbta/base/t-view-types.rkt") (lib "gtp-checkup/benchmarks/take5/typed/stack-types.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/snake/typed-worst-case/motion-help.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/measure.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/denotable.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-property.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/adjlist-utils.rkt") (lib "gtp-checkup/benchmarks/lnm/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/sieve/typed/streams.rkt") (lib "gtp-checkup/benchmarks/lnm/typed-worst-case/summary.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/array.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/render.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/data.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/ocm.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/ocm.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/main.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/quick-sample.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/os/env.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/utils.rkt") (lib "gtp-checkup/benchmarks/zombie/base/untyped.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed-worst-case/lcs.rkt") (lib "gtp-checkup/benchmarks/snake/typed/data.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/time-adapted.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/deck-types.rkt") (lib "gtp-checkup/benchmarks/sieve/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed-worst-case/automata-adapted.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/basics.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/quick-sample.rkt") (lib "gtp-checkup/benchmarks/jpeg/untyped/huffman.rkt") (lib "gtp-checkup/benchmarks/fsm/typed/population.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/unsafe.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/os/windows-registry.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/world.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/sugar-list.rkt") (lib "gtp-checkup/benchmarks/snake/typed-worst-case/collide.rkt") (lib "gtp-checkup/benchmarks/tetris/untyped/data.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/quad-main.rkt") (lib "gtp-checkup/benchmarks/jpeg/typed/exif.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/date.rkt") (lib "gtp-checkup/benchmarks/take5/typed/player.rkt") (lib "gtp-checkup/benchmarks/kcfa/untyped/benv.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/parameters.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/structs.rkt") (lib "gtp-checkup/benchmarks/take5/typed/card-pool.rkt") (lib "gtp-checkup/benchmarks/forth/typed/command.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/quads.rkt") (lib "gtp-checkup/benchmarks/morsecode/untyped/morse-code-table.rkt") (lib "gtp-checkup/benchmarks/jpeg/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/suffixtree/untyped/structs.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/array-struct.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/datetime.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/label.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/quad-main.rkt") (lib "gtp-checkup/benchmarks/gregor/base/cldr/scribblings/cldr-core.scrbl") (lib "gtp-checkup/benchmarks/kcfa/untyped/denotable.rkt") (lib "gtp-checkup/benchmarks/snake/typed/motion.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/zoneinfo.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed/automata-adapted.rkt") (lib "gtp-checkup/benchmarks/quadU/base/csp/helper.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/structs.rkt") (lib "gtp-checkup/benchmarks/synth/typed/array-transform.rkt") (lib "gtp-checkup/benchmarks/forth/typed-worst-case/command.rkt") (lib "gtp-checkup/benchmarks/fsm/untyped/population.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/measure.rkt") (lib "gtp-checkup/benchmarks/take5/untyped/stack.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/player.rkt") (lib "gtp-checkup/benchmarks/mbta/typed-worst-case/run-t.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/bset.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/world.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/utils.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/state-adapted.rkt") (lib "gtp-checkup/benchmarks/take5/typed/basics.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/synth.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/sugar-list.rkt") (lib "gtp-checkup/benchmarks/zombie/typed-worst-case/math.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/card-pool.rkt") (lib "gtp-checkup/benchmarks/lnm/typed-worst-case/spreadsheet.rkt") (lib "gtp-checkup/benchmarks/zordoz/untyped/zo-string.rkt") (lib "gtp-checkup/benchmarks/jpeg/untyped/main.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed-worst-case/typed-data.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/summary.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/quick-sample.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/hyphenate.rkt") (lib "gtp-checkup/benchmarks/synth/typed/array-struct.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/strategy.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/queue/priority.rkt") (lib "gtp-checkup/benchmarks/acquire/untyped/state.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/utils.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/time.rkt") (lib "gtp-checkup/benchmarks/quadU/base/csp/constraint.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed/population-adapted.rkt") (lib "gtp-checkup/nightly.rkt") (lib "gtp-checkup/benchmarks/fsm/typed/benchmark-util.rkt") (lib "gtp-checkup/benchmarks/take5/typed/dealer-types.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/queue/gen-queue.rkt") (lib "gtp-checkup/benchmarks/take5/typed/deck-types.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/source.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/quick-sample.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed/cell.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/tetras.rkt") (lib "gtp-checkup/benchmarks/fsm/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/forth/untyped/command.rkt") (lib "gtp-checkup/benchmarks/fsm/base/untyped.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-allpairs-shortestpaths.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/moment.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/deck.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed/main.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/quad-main.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed-worst-case/cell.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/moment-base.rkt") (lib "gtp-checkup/benchmarks/kcfa/untyped/ai.rkt") (lib "gtp-checkup/benchmarks/jpeg/typed/main.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/array-comprehension.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/moment-base.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/typed-array-struct.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/typedefs.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/date.rkt") (lib "gtp-checkup/benchmarks/snake/typed-worst-case/const.rkt") (lib "gtp-checkup/benchmarks/snake/typed-worst-case/cut-tail.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/wrap.rkt") (lib "gtp-checkup/benchmarks/take5/typed/card-pool-types.rkt") (lib "gtp-checkup/benchmarks/quadU/base/csp/variable.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/array-sequence.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/generics.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/utils.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/main.rkt") (lib "gtp-checkup/benchmarks/mbta/typed/run-t.rkt") (lib "gtp-checkup/benchmarks/quadU/base/csp/domain.rkt") (lib "gtp-checkup/benchmarks/tetris/untyped/world.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/benchmark-util.rkt") (lib "gtp-checkup/benchmarks/fsm/untyped/utilities.rkt") (lib "gtp-checkup/benchmarks/sieve/typed-worst-case/streams.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/array-transform.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/structs-adapted.rkt") (lib "gtp-checkup/benchmarks/forth/typed/main.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/typed-data.rkt") (lib "gtp-checkup/benchmarks/quadT/base/csp/domain.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/time.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/typed-utils.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/acquire/untyped/player.rkt") (lib "gtp-checkup/benchmarks/tetris/untyped/consts.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/measure.rkt") (lib "gtp-checkup/benchmarks/zombie/untyped/image.rkt") (lib "gtp-checkup/benchmarks/synth/untyped/array-utils.rkt") (lib "gtp-checkup/benchmarks/zombie/typed/main.rkt") (lib "gtp-checkup/scribblings/plot.rkt") (lib "gtp-checkup/benchmarks/synth/typed/data.rkt") (lib "gtp-checkup/benchmarks/zordoz/untyped/zo-shell.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/lnm-plot.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/basics-types.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/quick-sample.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/measure.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/main.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/data.rkt") (lib "gtp-checkup/benchmarks/synth/untyped/mixer.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/gregor-structs.rkt") (lib "gtp-checkup/benchmarks/jpeg/untyped/exif.rkt") (lib "gtp-checkup/benchmarks/synth/untyped/data.rkt") (lib "gtp-checkup/benchmarks/mbta/base/t-graph-types.rkt") (lib "gtp-checkup/benchmarks/take5/typed/main.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-minspantree.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed/zo-transition.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/clock.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/exception.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/hmsn.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/structs-adapted.rkt") (lib "gtp-checkup/benchmarks/synth/typed/drum.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/lcs.rkt") (lib "gtp-checkup/benchmarks/acquire/untyped/tree.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/quads.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/tzfile-parser.rkt") (lib "gtp-checkup/benchmarks/zombie/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/array-utils.rkt") (lib "gtp-checkup/benchmarks/synth/untyped/array-broadcast.rkt") (lib "gtp-checkup/benchmarks/tetris/untyped/aux.rkt") (lib "gtp-checkup/benchmarks/fsmoo/untyped/utilities.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/sugar-list.rkt") (lib "gtp-checkup/benchmarks/morsecode/untyped/morse-code-strings.rkt") (lib "gtp-checkup/benchmarks/acquire/untyped/strategy.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/tzinfo-adapter.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/sequencer.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/jpeg/typed-worst-case/exif.rkt") (lib "gtp-checkup/benchmarks/forth/base/untyped.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/wrap.rkt") (lib "gtp-checkup/data/parse.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/zombie/typed-worst-case/image-adapted.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/ui.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/time-adapted.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/render.rkt") (lib "gtp-checkup/benchmarks/synth/typed/sequencer.rkt") (lib "gtp-checkup/benchmarks/fsm/untyped/main.rkt") (lib "gtp-checkup/benchmarks/quadU/base/untyped.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/moment-base.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/board-adapted.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed-worst-case/automata.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed-worst-case/utils.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/structs.rkt") (lib "gtp-checkup/benchmarks/dungeon/untyped/utils.rkt") (lib "gtp-checkup/benchmarks/tetris/untyped/elim.rkt") (lib "gtp-checkup/benchmarks/tetris/typed-worst-case/elim.rkt") (lib "gtp-checkup/benchmarks/quadT/base/csp/constraint.rkt") (lib "gtp-checkup/benchmarks/quadT/base/core.rkt") (lib "gtp-checkup/benchmarks/take5/typed/deck.rkt") (lib "gtp-checkup/benchmarks/synth/typed/typed-data.rkt") (lib "gtp-checkup/benchmarks/snake/typed/handlers.rkt") (lib "gtp-checkup/benchmarks/tetris/typed-worst-case/consts.rkt") (lib "gtp-checkup/benchmarks/forth/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/tetris/untyped/main.rkt") (lib "gtp-checkup/benchmarks/synth/untyped/array-transform.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/quads.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/measure.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/wrap.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/render.rkt") (lib "gtp-checkup/benchmarks/acquire/base/untyped.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-maxflow.rkt") (lib "gtp-checkup/benchmarks/jpeg/untyped/jfif.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-singlesource-shortestpaths.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed-worst-case/zo-find.rkt") (lib "gtp-checkup/benchmarks/take5/base/untyped.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/mbta/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-coloring.rkt") (lib "gtp-checkup/benchmarks/jpeg/typed-worst-case/jfif.rkt") (lib "gtp-checkup/benchmarks/acquire/untyped/board.rkt") (lib "gtp-checkup/benchmarks/zordoz/base/compiler-zo-parse.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed/zo-shell.rkt") (lib "gtp-checkup/benchmarks/forth/typed/eval.rkt") (lib "gtp-checkup/benchmarks/fsm/untyped/automata.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/pict-adapted.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/syntax-utils.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/render.rkt") (lib "gtp-checkup/benchmarks/gregor/base/cldr/file.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/hyphenate.rkt") (lib "gtp-checkup/benchmarks/take5/typed/dealer.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/difference.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/data.rkt") (lib "gtp-checkup/private/logger.rkt") (lib "gtp-checkup/benchmarks/mbta/untyped/t-view.rkt") (lib "gtp-checkup/benchmarks/take5/typed/card-adapted.rkt") (lib "gtp-checkup/benchmarks/zordoz/untyped/main.rkt") (lib "gtp-checkup/benchmarks/take5/untyped/deck.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/hyphenate.rkt") (lib "gtp-checkup/benchmarks/jpeg/untyped/bit-ports.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/array-transform.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/modulegraph-adapted.rkt") (lib "gtp-checkup/benchmarks/morsecode/untyped/levenshtein.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/zordoz/untyped/zo-transition.rkt") (lib "gtp-checkup/benchmarks/zombie/typed/math.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/offset-resolvers.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/quad-main.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/sugar-list.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/main.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/world.rkt") (lib "gtp-checkup/benchmarks/mbta/typed/t-view.rkt") (lib "gtp-checkup/benchmarks/zombie/typed/image.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-unweighted.rkt") (lib "gtp-checkup/benchmarks/zordoz/base/compiler-zo-structs.rkt") (lib "gtp-checkup/benchmarks/lnm/untyped/bitstring.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/strategy.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/array-struct.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/dealer-types.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/player.rkt") (lib "gtp-checkup/benchmarks/take5/untyped/player.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/offset-resolvers.rkt") (lib "gtp-checkup/benchmarks/gregor/base/cldr/core.rkt") (lib "gtp-checkup/benchmarks/tetris/typed-worst-case/aux.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed-worst-case/ukkonen.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed-worst-case/population-adapted.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/utils.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/hyphenate.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/drum.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/moment.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/structs.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/card.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/clock.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed-worst-case/data.rkt") (lib "gtp-checkup/benchmarks/snake/untyped/motion.rkt") (lib "gtp-checkup/benchmarks/snake/typed/collide.rkt") (lib "gtp-checkup/benchmarks/lnm/untyped/lnm-plot.rkt") (lib "gtp-checkup/benchmarks/snake/untyped/cut-tail.rkt") (lib "gtp-checkup/benchmarks/quadU/base/quad-types.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/board.rkt") (lib "gtp-checkup/benchmarks/morsecode/typed/morse-code-table.rkt") (lib "gtp-checkup/benchmarks/morsecode/untyped/main.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/tree-adapted.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-basic.rkt") (lib "gtp-checkup/benchmarks/suffixtree/untyped/main.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/ocm.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-weighted.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed/main.rkt") (lib "gtp-checkup/benchmarks/acquire/base/types.rkt") (lib "gtp-checkup/benchmarks/take5/typed/basics-types.rkt") (lib "gtp-checkup/benchmarks/tetris/typed-worst-case/main.rkt") (lib "gtp-checkup/main.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/snake/untyped/main.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/hyphenate.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/quads.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/basics.rkt") (lib "gtp-checkup/benchmarks/acquire/untyped/auxiliaries.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/spreadsheet.rkt") (lib "gtp-checkup/benchmarks/synth/untyped/drum.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/datetime.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/time.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/utils.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/sugar-list.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/gregor-adapter.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/quad-main.rkt") (lib "gtp-checkup/benchmarks/tetris/typed-worst-case/bset.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/typed-array-transform.rkt") (lib "gtp-checkup/benchmarks/fsmoo/untyped/automata.rkt") (lib "gtp-checkup/benchmarks/morsecode/typed-worst-case/morse-code-table.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/difference.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/benv-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/difference.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/zoneinfo.rkt") (lib "gtp-checkup/benchmarks/jpeg/typed-worst-case/huffman.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/stack.rkt") (lib "gtp-checkup/benchmarks/gregor/base/types.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/auxiliaries.rkt") (lib "gtp-checkup/benchmarks/tetris/untyped/bset.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/dealer.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed-worst-case/message-queue.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/tzinfo-adapter.rkt") (lib "gtp-checkup/benchmarks/kcfa/untyped/time.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/gregor-structs.rkt") (lib "gtp-checkup/benchmarks/mbta/untyped/main.rkt") (lib "gtp-checkup/benchmarks/lnm/typed-worst-case/bitstring.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/mbta/typed/t-graph.rkt") (lib "gtp-checkup/benchmarks/acquire/untyped/admin.rkt") (lib "gtp-checkup/benchmarks/tetris/untyped/tetras.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/array-syntax.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/offset-resolvers.rkt") (lib "gtp-checkup/benchmarks/kcfa/untyped/ui.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/main.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/core-structs.rkt") (lib "gtp-checkup/benchmarks/zombie/typed-worst-case/zombie.rkt") (lib "gtp-checkup/benchmarks/forth/typed-worst-case/stack.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/base-types.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/gen-graph.rkt") (lib "gtp-checkup/benchmarks/tetris/typed-worst-case/tetras.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/time.rkt") (lib "gtp-checkup/benchmarks/morsecode/typed-worst-case/morse-code-strings.rkt") (lib "gtp-checkup/benchmarks/snake/typed/data-adaptor.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/core-adapter.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/hash-utils.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed-worst-case/structs.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/time.rkt") (lib "gtp-checkup/benchmarks/quadU/base/csp/solver.rkt") (lib "gtp-checkup/benchmarks/mbta/typed-worst-case/t-graph.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/for-each.rkt") (lib "gtp-checkup/benchmarks/snake/typed-worst-case/data.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed/grid.rkt") (lib "gtp-checkup/benchmarks/morsecode/typed/levenshtein.rkt") (lib "gtp-checkup/benchmarks/take5/typed/card.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-matrix.rkt") (lib "gtp-checkup/scribblings/gtp-checkup.scrbl") (lib "gtp-checkup/benchmarks/quadT/base/untyped.rkt") (lib "gtp-checkup/benchmarks/tetris/typed-worst-case/data.rkt") (lib "gtp-checkup/benchmarks/lnm/untyped/main.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/gregor-structs.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/ai.rkt") (lib "gtp-checkup/benchmarks/lnm/base/untyped.rkt") (lib "gtp-checkup/benchmarks/fsm/typed-worst-case/automata.rkt") (lib "gtp-checkup/benchmarks/dungeon/typed-worst-case/grid.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/hyphenate.rkt") (lib "gtp-checkup/benchmarks/quadT/base/core-types.rkt") (lib "gtp-checkup/benchmarks/mbta/typed-worst-case/t-view.rkt") (lib "gtp-checkup/benchmarks/mbta/untyped/t-graph.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/snake/untyped/motion-help.rkt") (lib "gtp-checkup/benchmarks/take5/untyped/card-pool.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/clock.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/quads.rkt") (lib "gtp-checkup/benchmarks/synth/typed/main.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/hmsn.rkt") (lib "gtp-checkup/benchmarks/fsm/typed/utilities.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/datetime.rkt") (lib "gtp-checkup/benchmarks/fsm/typed/automata.rkt") (lib "gtp-checkup/benchmarks/kcfa/untyped/structs.rkt") (lib "gtp-checkup/benchmarks/snake/typed/main.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/sugar-list.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/typed-data.rkt") (lib "gtp-checkup/benchmarks/synth/untyped/array-struct.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/tree-adapted.rkt") (lib "gtp-checkup/benchmarks/acquire/untyped/basics.rkt") (lib "gtp-checkup/benchmarks/zombie/typed/zombie.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/main.rkt") (lib "gtp-checkup/benchmarks/dungeon/base/cell-types.rkt") (lib "gtp-checkup/benchmarks/fsm/typed-worst-case/utilities.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/ymd.rkt") (lib "gtp-checkup/benchmarks/forth/typed/stack.rkt") (lib "gtp-checkup/benchmarks/forth/untyped/stack.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/mixer.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/core-structs.rkt") (lib "gtp-checkup/benchmarks/gregor/typed-worst-case/moment.rkt") (lib "gtp-checkup/benchmarks/forth/typed-worst-case/eval.rkt") (lib "gtp-checkup/benchmarks/lnm/typed-worst-case/modulegraph.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed/utilities.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/block.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/world.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed/population.rkt") (lib "gtp-checkup/benchmarks/fsmoo/base/untyped.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph-fns-graphviz.rkt") (lib "gtp-checkup/benchmarks/snake/typed-worst-case/motion.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/penalty-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/wrap.rkt") (lib "gtp-checkup/benchmarks/tetris/typed-worst-case/block.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/graph.scrbl") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/auxiliaries.rkt") (lib "gtp-checkup/benchmarks/lnm/typed-worst-case/pict-adapted.rkt") (lib "gtp-checkup/benchmarks/fsm/typed-worst-case/population.rkt") (lib "gtp-checkup/benchmarks/jpeg/typed/huffman.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/penalty-struct.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/state.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/main.rkt") (lib "gtp-checkup/benchmarks/jpeg/typed/bit-ports.rkt") (lib "gtp-checkup/benchmarks/quadT/base/quad-types.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/scribblings/tzinfo.scrbl") (lib "gtp-checkup/benchmarks/suffixtree/untyped/data.rkt") (lib "gtp-checkup/benchmarks/acquire/typed/basics.rkt") (lib "gtp-checkup/benchmarks/lnm/typed-worst-case/summary-adapted.rkt") (lib "gtp-checkup/benchmarks/fsmoo/untyped/population.rkt") (lib "gtp-checkup/benchmarks/suffixtree/base/untyped.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/date.rkt") (lib "gtp-checkup/benchmarks/fsm/typed-worst-case/automata-adapted.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/zoneinfo-search.rkt") (lib "gtp-checkup/benchmarks/synth/base/untyped.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/hmsn.rkt") (lib "gtp-checkup/benchmarks/dungeon/untyped/cell.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/ai.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/wrap.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/bytevectors-6-typed.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/graph/utils.rkt") (lib "gtp-checkup/benchmarks/sieve/untyped/main.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/ui.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/board-adapted.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/benv-adapted.rkt") (lib "gtp-checkup/benchmarks/morsecode/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/lnm/typed-worst-case/lnm-plot.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/ocm-struct.rkt") (lib "gtp-checkup/benchmarks/fsm/typed/automata-adapted.rkt") (lib "gtp-checkup/benchmarks/lnm/typed-worst-case/modulegraph-adapted.rkt") (lib "gtp-checkup/benchmarks/quadU/typed/ocm-struct-adapted.rkt") (lib "gtp-checkup/benchmarks/suffixtree/typed/ukkonen.rkt") (lib "gtp-checkup/benchmarks/lnm/typed/bitstring.rkt") (lib "gtp-checkup/benchmarks/forth/untyped/main.rkt") (lib "gtp-checkup/benchmarks/suffixtree/untyped/label.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/benchmark-util.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/utils.rkt") (lib "gtp-checkup/benchmarks/mbta/base/my-graph.rkt") (lib "gtp-checkup/benchmarks/tetris/typed/aux.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/world.rkt") (lib "gtp-checkup/benchmarks/gregor/base/cldr/likely-subtags.rkt") (lib "gtp-checkup/benchmarks/gregor/base/untyped.rkt") (lib "gtp-checkup/benchmarks/quadU/base/csp/problem.rkt") (lib "gtp-checkup/benchmarks/tetris/untyped/block.rkt") (lib "gtp-checkup/benchmarks/gregor/typed/gregor-adapter.rkt") (lib "gtp-checkup/benchmarks/snake/typed-worst-case/data-adaptor.rkt") (lib "gtp-checkup/benchmarks/dungeon/untyped/main.rkt") (lib "gtp-checkup/benchmarks/snake/untyped/handlers.rkt") (lib "gtp-checkup/benchmarks/zordoz/typed/zo-find.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/card-pool-types.rkt") (lib "gtp-checkup/benchmarks/zordoz/base/untyped.rkt") (lib "gtp-checkup/benchmarks/quadT/typed/wrap.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/array/typed-mutable-array.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/benv.rkt") (lib "gtp-checkup/benchmarks/forth/base/command-types.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed/denotable-adapted.rkt") (lib "gtp-checkup/benchmarks/take5/untyped/dealer.rkt") (lib "gtp-checkup/benchmarks/take5/typed/stack.rkt") (lib "gtp-checkup/benchmarks/gregor/base/tzinfo/private/os/unix.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed-worst-case/population.rkt") (lib "gtp-checkup/benchmarks/acquire/untyped/main.rkt") (lib "gtp-checkup/benchmarks/jpeg/typed-worst-case/bit-ports.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/math/private/inline-sort.rkt") (lib "gtp-checkup/benchmarks/quadU/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/measure.rkt") (lib "gtp-checkup/benchmarks/quadT/base/csp/variable.rkt") (lib "gtp-checkup/benchmarks/gregor/untyped/main.rkt") (lib "gtp-checkup/benchmarks/jpeg/base/untyped.rkt") (lib "gtp-checkup/benchmarks/synth/typed/array-broadcast.rkt") (lib "gtp-checkup/benchmarks/kcfa/untyped/main.rkt") (lib "gtp-checkup/benchmarks/suffixtree/base/kcfa-typed.rkt") (lib "gtp-checkup/benchmarks/acquire/typed-worst-case/tree.rkt") (lib "gtp-checkup/benchmarks/lnm/untyped/modulegraph.rkt") (lib "gtp-checkup/benchmarks/mbta/base/graph/queue/fifo.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed/automata.rkt") (lib "gtp-checkup/benchmarks/suffixtree/untyped/ukkonen.rkt") (lib "gtp-checkup/benchmarks/quadU/base/core-types.rkt") (lib "gtp-checkup/benchmarks/quadT/untyped/utils.rkt") (lib "gtp-checkup/benchmarks/mbta/base/untyped.rkt") (lib "gtp-checkup/benchmarks/jpeg/typed/jfif.rkt") (lib "gtp-checkup/benchmarks/fsmoo/typed-worst-case/utilities.rkt") (lib "gtp-checkup/benchmarks/zombie/untyped/main.rkt") (lib "gtp-checkup/benchmarks/zombie/untyped/math.rkt") (lib "gtp-checkup/benchmarks/snake/typed-worst-case/handlers.rkt") (lib "gtp-checkup/benchmarks/sieve/typed/main.rkt") (lib "gtp-checkup/benchmarks/snake/typed/motion-help.rkt") (lib "gtp-checkup/benchmarks/quadT/typed-worst-case/render.rkt") (lib "gtp-checkup/benchmarks/synth/untyped/sequencer.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/player-types.rkt") (lib "gtp-checkup/benchmarks/synth/typed/mixer.rkt") (lib "gtp-checkup/benchmarks/zordoz/untyped/zo-find.rkt") (lib "gtp-checkup/benchmarks/synth/untyped/main.rkt") (lib "gtp-checkup/benchmarks/quadU/untyped/main.rkt") (lib "gtp-checkup/benchmarks/synth/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/zombie/untyped/zombie.rkt") (lib "gtp-checkup/benchmarks/kcfa/typed-worst-case/main.rkt") (lib "gtp-checkup/benchmarks/take5/typed-worst-case/card-adapted.rkt"))) (name . "gtp-checkup") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t) (tests . #t) (typed-racket . #t))) (source . "git://github.com/bennn/gtp-checkup") (tags . ("tests" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "39c36beb3329935b198c73a2010c37314686ab82") (source . "git://github.com/bennn/gtp-checkup") (source_url . "http://github.com/bennn/gtp-checkup/tree/master"))))))) ("gtp-measure" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gtp-measure" "doc/gtp-measure@gtp-measure/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gtp-measure.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gtp-measure.txt"))) (checksum . "4411c3575f2f26269dc48fd9005b4ee7a898df26") (checksum-error . #f) (collection . "gtp-measure") (conflicts . ()) (dependencies . ("at-exp-lib" "base" "basedir" "gtp-util" "lang-file" "scribble-lib" ("sandbox-lib" #:version "1.1") "rackunit-lib" "racket-doc" "scribble-doc" "basedir" "require-typed-check" "typed-racket-doc" "typed-racket-lib")) (description . "Runs programs, collects timing info") (implies . ()) (last-checked . 1632903375) (last-edit . 1517970133) (last-updated . 1595352589) (modules . ((lib "gtp-measure/private/task.rkt") (lib "gtp-measure/private/test/sample-task/partially-done/manifest.rkt") (lib "gtp-measure/private/test/sample-manifest-target-config.rkt") (lib "gtp-measure/output/file.rkt") (lib "gtp-measure/manifest.rkt") (lib "gtp-measure/private/test/sample-task/partially-done/0-morsecode/configuration/main.rkt") (lib "gtp-measure/private/configure.rkt") (lib "gtp-measure/private/test/sample-typed-untyped-target/untyped/a1.rkt") (lib "gtp-measure/private/test/sample-typed-untyped-target/typed/main.rkt") (lib "gtp-measure/private/test/sample-task/partially-done/0-morsecode/configuration/levenshtein.rkt") (lib "gtp-measure/private/test/sample-task/partially-done/0-morsecode/base/untyped.rkt") (lib "gtp-measure/output/test/typed-untyped-0.rkt") (lib "gtp-measure/configure.rkt") (lib "gtp-measure/private/test/sample-task/24/0-morsecode/configuration/levenshtein.rkt") (lib "gtp-measure/private/test/sample-file-target.rkt") (lib "gtp-measure/private/test/sample-task/24/0-morsecode/configuration/morse-code-table.rkt") (lib "gtp-measure/output/test/typed-untyped-2.rkt") (lib "gtp-measure/private/test/infinite-loop-file-target.rkt") (lib "gtp-measure/private/test/manifest2.rkt") (lib "gtp-measure/output/test/typed-untyped-3.rkt") (lib "gtp-measure/private/test/sample-task/38/manifest.rkt") (lib "gtp-measure/private/test/sample-task/24/manifest.rkt") (lib "gtp-measure/output/test/typed-untyped-1.rkt") (lib "gtp-measure/private/test/sample-typed-untyped-target/untyped/main.rkt") (lib "gtp-measure/private/test/sample-task/partially-done/0-morsecode/configuration/morse-code-table.rkt") (lib "gtp-measure/private/test/manifest1.rkt") (lib "gtp-measure/private/test/sample-manifest-target-bin.rkt") (lib "gtp-measure/parse.rkt") (lib "gtp-measure/private/test/sample-typed-untyped-target/typed/a1.rkt") (lib "gtp-measure/private/test/sample-manifest-target.rkt") (lib "gtp-measure/private/raco.rkt") (lib "gtp-measure/private/measure.rkt") (lib "gtp-measure/private/parse.rkt") (lib "gtp-measure/private/util.rkt") (lib "gtp-measure/private/test/sample-task/partially-done/0-morsecode/configuration/morse-code-strings.rkt") (lib "gtp-measure/scribblings/gtp-measure.scrbl") (lib "gtp-measure/private/test/sample-task/24/0-morsecode/configuration/main.rkt") (lib "gtp-measure/private/check-pkg-deps.rkt") (lib "gtp-measure/output/typed-untyped.rkt") (lib "gtp-measure/private/test/sample-task/24/0-morsecode/configuration/morse-code-strings.rkt"))) (name . "gtp-measure") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (benchmarking . #t) (gtp . #t) (ring:1 . #t))) (source . "https://github.com/bennn/gtp-measure.git") (tags . ("benchmarking" "gtp")) (versions . #hash((default . #hasheq((checksum . "4411c3575f2f26269dc48fd9005b4ee7a898df26") (source . "https://github.com/bennn/gtp-measure.git") (source_url . "https://github.com/bennn/gtp-measure.git"))))))) ("gtp-paper" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gtp-paper" "doc/gtp-paper@gtp-paper/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gtp-paper.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gtp-paper.txt"))) (checksum . "fe8ecf5bff7a89d80ad54e6f5a3a05281b65efee") (checksum-error . #f) (collection . "gtp-paper") (conflicts . ()) (dependencies . ("base" "scribble-abbrevs" "scribble-lib" "rackunit-lib" "racket-doc" "scribble-doc")) (description . "Quick-start for SIGPLAN Scribble papers") (implies . ()) (last-checked . 1632903375) (last-edit . 1503077916) (last-updated . 1580767521) (modules . ((lib "gtp-paper/scribblings/gtp-paper.scrbl") (lib "gtp-paper/template/bib.rkt") (lib "gtp-paper/template/introduction.scrbl") (lib "gtp-paper/template/parameters.rkt") (lib "gtp-paper/template/paper.scrbl") (lib "gtp-paper/template/reader.rkt") (lib "gtp-paper/main.rkt") (lib "gtp-paper/template/main.rkt") (lib "gtp-paper/template/appendix.scrbl"))) (name . "gtp-paper") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (latex . #t) (ring:1 . #t) (scribble . #t) (utility . #t))) (source . "git://github.com/bennn/gtp-paper") (tags . ("latex" "scribble" "utility")) (versions . #hash((default . #hasheq((checksum . "fe8ecf5bff7a89d80ad54e6f5a3a05281b65efee") (source . "git://github.com/bennn/gtp-paper") (source_url . "http://github.com/bennn/gtp-paper/tree/master"))))))) ("gtp-pict" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gtp-pict" "doc/gtp-pict@gtp-pict/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gtp-pict.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gtp-pict.txt"))) (checksum . "9d17dc9a291e135719de2309bae659dea660cf26") (checksum-error . #f) (collection . "gtp-pict") (conflicts . ()) (dependencies . ("base" "math-lib" "pict-lib" "draw-lib" "images-lib" "pict-abbrevs" "ppict" "rackunit-lib" "racket-doc" "scribble-lib" "scribble-doc" "rackunit-abbrevs" "pict-doc" "draw-doc" "images-doc")) (description . "Picts related to gradual typing / performance") (implies . ()) (last-checked . 1632903376) (last-edit . 1542491436) (last-updated . 1620468839) (modules . ((lib "gtp-pict/scribblings/gtp-pict.scrbl") (lib "gtp-pict/main.rkt") (lib "gtp-pict/private/gtp-pict.rkt"))) (name . "gtp-pict") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (gtp . #t) (pict . #t) (ring:1 . #t) (util . #t))) (source . "https://gitlab.com/gradual-typing-performance/gtp-pict.git") (tags . ("gtp" "pict" "util")) (versions . #hash((default . #hasheq((checksum . "9d17dc9a291e135719de2309bae659dea660cf26") (source . "https://gitlab.com/gradual-typing-performance/gtp-pict.git") (source_url . "https://gitlab.com/gradual-typing-performance/gtp-pict.git"))))))) ("gtp-plot" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gtp-plot" "doc/gtp-plot@gtp-plot/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gtp-plot.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gtp-plot.txt"))) (checksum . "bea5d7347dd850423a6faaad219dadd70f487950") (checksum-error . #f) (collection . "gtp-plot") (conflicts . ()) (dependencies . ("base" "draw-lib" "scribble-abbrevs" "scribble-lib" "math-lib" "pict-lib" "plot-lib" "reprovide-lang" "gtp-util" "rackunit-lib" "racket-doc" "scribble-doc" "pict-lib" "pict-doc" "plot-doc" "rackunit-abbrevs" "typed-racket-doc" "gtp-util")) (description . "Plots for gradual typing performance") (implies . ()) (last-checked . 1632903376) (last-edit . 1503902619) (last-updated . 1619205476) (modules . ((lib "gtp-plot/private/configuration-info.rkt") (lib "gtp-plot/sample-info.rkt") (lib "gtp-plot/configuration-info.rkt") (lib "gtp-plot/private/performance-info.rkt") (lib "gtp-plot/performance-info.rkt") (lib "gtp-plot/util.rkt") (lib "gtp-plot/scribblings/parsing.scrbl") (lib "gtp-plot/private/typed-racket-info.rkt") (lib "gtp-plot/private/sample-info.rkt") (lib "gtp-plot/scribblings/gtp-plot.scrbl") (lib "gtp-plot/plot.rkt") (lib "gtp-plot/scribblings/data-definition.scrbl") (lib "gtp-plot/scribblings/supporting.scrbl") (lib "gtp-plot/private/reticulated-info.rkt") (lib "gtp-plot/reticulated-info.rkt") (lib "gtp-plot/private/raco.rkt") (lib "gtp-plot/private/system.rkt") (lib "gtp-plot/scribblings/plotting.scrbl") (lib "gtp-plot/system.rkt") (lib "gtp-plot/private/plot.rkt") (lib "gtp-plot/private/util.rkt") (lib "gtp-plot/main.rkt") (lib "gtp-plot/typed-racket-info.rkt"))) (name . "gtp-plot") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (gtp . #t) (plot . #t) (ring:1 . #t) (util . #t))) (source . "git://github.com/bennn/gtp-plot") (tags . ("gtp" "plot" "util")) (versions . #hash((default . #hasheq((checksum . "bea5d7347dd850423a6faaad219dadd70f487950") (source . "git://github.com/bennn/gtp-plot") (source_url . "http://github.com/bennn/gtp-plot/tree/master"))))))) ("gtp-util" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gtp-util" "doc/gtp-util@gtp-util/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gtp-util.txt") (test-failure-log . "server/built/test-fail/gtp-util.txt") (test-success-log . #f))) (checksum . "e1c3d7b4ed1128271324201171240e111ce51419") (checksum-error . #f) (collection . "gtp-util") (conflicts . ()) (dependencies . ("base" "math-lib" "pict-lib" "rackunit-lib" "racket-doc" "scribble-lib" "scribble-doc" "rackunit-abbrevs" "pict-doc")) (description . "37 helper functions you won't find anywhere else") (implies . ()) (last-checked . 1632903376) (last-edit . 1525061541) (last-updated . 1613584928) (modules . ((lib "gtp-util/system.rkt") (lib "gtp-util/main.rkt") (lib "gtp-util/scribblings/gtp-util.scrbl"))) (name . "gtp-util") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (gtp . #t) (ring:1 . #t) (util . #t))) (source . "https://github.com/bennn/gtp-util.git") (tags . ("gtp" "util")) (versions . #hash((default . #hasheq((checksum . "e1c3d7b4ed1128271324201171240e111ce51419") (source . "https://github.com/bennn/gtp-util.git") (source_url . "https://github.com/bennn/gtp-util.git"))))))) ("gui" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("gui-lib" "gui-doc")) (description . "Graphical user interface toolkit") (implies . ("gui-lib" "gui-doc")) (last-checked . 1632903376) (last-edit . 1417659583) (last-updated . 1632762998) (modules . ()) (name . "gui") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "eeaa76d5a654b45f81c7c8caf9c39b0ed10a4e55") (source . "git://github.com/racket/gui/?path=gui") (source_url . "git://github.com/racket/gui/?path=gui"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("gui-aarch64-macosx" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gui-aarch64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gui-aarch64-macosx.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for gui package") (implies . ()) (last-checked . 1632903377) (last-edit . 1607103943) (last-updated . 1607103943) (modules . ()) (name . "gui-aarch64-macosx") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "3efcb9bcca2ad3c24c3903229dbd6820559f0d08") (source . "https://pkg-sources.racket-lang.org/pkgs/3efcb9bcca2ad3c24c3903229dbd6820559f0d08/gui-aarch64-macosx.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/3efcb9bcca2ad3c24c3903229dbd6820559f0d08/gui-aarch64-macosx.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("gui-doc" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "framework" "doc/framework@gui-doc/index.html") ("main" "gui" "doc/gui@gui-doc/index.html") ("main" "mrlib" "doc/mrlib@gui-doc/index.html") ("main" "embedded-gui" "doc/embedded-gui@gui-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scheme-lib" "syntax-color-doc" "at-exp-lib" "draw-doc" "draw-lib" "scribble-lib" "snip-lib" "string-constants-lib" "syntax-color-lib" "wxme-lib" "gui-lib" "pict-lib" "racket-doc" "string-constants-doc" "simple-tree-text-markup-doc" "xrepl-doc")) (description . "documentation part of gui") (implies . ()) (last-checked . 1632903377) (last-edit . 1417659583) (last-updated . 1632763001) (modules . ((lib "mrlib/scribblings/aligned-pasteboard/aligned-editor-snip-class.scrbl") (lib "scribblings/gui/group-box-panel-class.scrbl") (lib "scribblings/framework/gui-utils.scrbl") (lib "scribblings/gui/editor-classes.scrbl") (lib "scribblings/framework/color-prefs.scrbl") (lib "scribblings/gui/editor-canvas-class.scrbl") (lib "mrlib/scribblings/mrlib.scrbl") (lib "scribblings/gui/mult-color-intf.scrbl") (lib "scribblings/gui/radio-box-class.scrbl") (lib "embedded-gui/scribblings/embedded-text-button.scrbl") (lib "scribblings/gui/mouse-event-class.scrbl") (lib "scribblings/gui/clipboard-client-class.scrbl") (lib "scribblings/gui/popup-menu-class.scrbl") (lib "mrlib/scribblings/cache-image-snip.scrbl") (lib "scribblings/gui/clipboard-intf.scrbl") (lib "scribblings/framework/editor-snip.scrbl") (lib "scribblings/framework/autosave.scrbl") (lib "mrlib/scribblings/include-bitmap.scrbl") (lib "mrlib/scribblings/graph/graph.scrbl") (lib "scribblings/gui/editor-stream-out-class.scrbl") (lib "scribblings/framework/panel.scrbl") (lib "scribblings/gui/text-class.scrbl") (lib "mrlib/scribblings/switchable-button.scrbl") (lib "scribblings/gui/libs.scrbl") (lib "scribblings/gui/style-list-class.scrbl") (lib "scribblings/gui/snip-class-class.scrbl") (lib "embedded-gui/scribblings/embedded-toggle-button.scrbl") (lib "embedded-gui/scribblings/alignment.scrbl") (lib "mrlib/scribblings/plot.scrbl") (lib "scribblings/gui/editor-stream-out-base-class.scrbl") (lib "mrlib/scribblings/graph/graph-snip-mixin.scrbl") (lib "scribblings/framework/exit.scrbl") (lib "scribblings/gui/selectable-menu-item-intf.scrbl") (lib "mrlib/scribblings/graph/graph-pasteboard-mixin.scrbl") (lib "scribblings/gui/diagrams.rkt") (lib "scribblings/gui/editor-funcs.scrbl") (lib "mrlib/scribblings/expandable-snip.scrbl") (lib "mrlib/scribblings/syntax-browser.scrbl") (lib "scribblings/gui/button-class.scrbl") (lib "scribblings/framework/handler.scrbl") (lib "mrlib/scribblings/panel-wob.scrbl") (lib "mrlib/scribblings/hierlist/item.scrbl") (lib "embedded-gui/scribblings/containers.scrbl") (lib "scribblings/gui/vertical-pane-class.scrbl") (lib "scribblings/gui/dialog-class.scrbl") (lib "mrlib/scribblings/aligned-pasteboard/aligned-pasteboard-intf.scrbl") (lib "embedded-gui/scribblings/text-button-snip.scrbl") (lib "scribblings/gui/editor-overview.scrbl") (lib "scribblings/gui/area-container-intf.scrbl") (lib "scribblings/gui/init.scrbl") (lib "embedded-gui/scribblings/toggle-button-snip.scrbl") (lib "scribblings/framework/mode-helpers.rkt") (lib "scribblings/gui/scroll-event-class.scrbl") (lib "mrlib/scribblings/aligned-pasteboard/vertical-pasteboard-class.scrbl") (lib "embedded-gui/scribblings/control-snips.scrbl") (lib "mrlib/scribblings/matrix-snip.scrbl") (lib "scribblings/gui/snip-admin-class.scrbl") (lib "scribblings/gui/widget-gallery.scrbl") (lib "scribblings/framework/canvas.scrbl") (lib "scribblings/gui/widget-gallery.rkt") (lib "scribblings/framework/color-model.scrbl") (lib "scribblings/gui/message-class.scrbl") (lib "scribblings/gui/choice-class.scrbl") (lib "scribblings/gui/list-box-class.scrbl") (lib "scribblings/gui/reference.scrbl") (lib "scribblings/framework/icon.scrbl") (lib "scribblings/gui/string-snip-class.scrbl") (lib "mrlib/scribblings/interactive-value-port.scrbl") (lib "mrlib/scribblings/aligned-pasteboard/common.rkt") (lib "scribblings/gui/check-box-class.scrbl") (lib "scribblings/gui/miscwin-funcs.scrbl") (lib "mrlib/scribblings/name-message.scrbl") (lib "embedded-gui/scribblings/embedded-message.scrbl") (lib "scribblings/gui/horizontal-pane-class.scrbl") (lib "scribblings/gui/horizontal-panel-class.scrbl") (lib "scribblings/gui/editor-stream-in-base-class.scrbl") (lib "embedded-gui/scribblings/vline.scrbl") (lib "scribblings/gui/key-event-class.scrbl") (lib "scribblings/gui/readable-snip-intf.scrbl") (lib "scribblings/gui/subwindow-intf.scrbl") (lib "scribblings/gui/system-menu-funcs.scrbl") (lib "scribblings/framework/color.scrbl") (lib "scribblings/framework/racket.scrbl") (lib "mrlib/scribblings/aligned-pasteboard/aligned-pasteboard.scrbl") (lib "scribblings/gui/editor-data-class.scrbl") (lib "scribblings/framework/pasteboard.scrbl") (lib "scribblings/gui/menu-bar-class.scrbl") (lib "scribblings/gui/gui.scrbl") (lib "scribblings/gui/wxme.scrbl") (lib "scribblings/gui/printer-dc-class.scrbl") (lib "scribblings/framework/framework.scrbl") (lib "scribblings/gui/window-intf.scrbl") (lib "embedded-gui/scribblings/hline.scrbl") (lib "scribblings/gui/text-field-class.scrbl") (lib "mrlib/scribblings/hierlist/compound-item.scrbl") (lib "embedded-gui/scribblings/stretchable-snip.scrbl") (lib "scribblings/gui/dynamic.scrbl") (lib "scribblings/gui/area-intf.scrbl") (lib "scribblings/gui/snip-class.scrbl") (lib "scribblings/gui/pasteboard-class.scrbl") (lib "scribblings/gui/canvas-class.scrbl") (lib "scribblings/gui/keymap-class.scrbl") (lib "scribblings/gui/editor-wordbreak-map-class.scrbl") (lib "scribblings/gui/tab-snip-class.scrbl") (lib "scribblings/framework/comment-box.scrbl") (lib "scribblings/gui/panel-class.scrbl") (lib "scribblings/gui/snip-example.rkt") (lib "scribblings/gui/blurbs.rkt") (lib "scribblings/gui/tab-panel-class.scrbl") (lib "scribblings/gui/editor-stream-out-bytes-base-class.scrbl") (lib "mrlib/scribblings/hierlist/snips.scrbl") (lib "scribblings/gui/labelled-menu-item-intf.scrbl") (lib "scribblings/gui/win-classes.scrbl") (lib "scribblings/gui/test-snip-example.rkt") (lib "scribblings/gui/canvas-intf.scrbl") (lib "scribblings/gui/style-delta-class.scrbl") (lib "scribblings/gui/snip-example.scrbl") (lib "scribblings/gui/prefs.scrbl") (lib "embedded-gui/scribblings/horizontal-alignment.scrbl") (lib "mrlib/scribblings/hierlist/list.scrbl") (lib "scribblings/gui/combo-field-class.scrbl") (lib "scribblings/gui/area-container-window-intf.scrbl") (lib "scribblings/gui/style-intf.scrbl") (lib "embedded-gui/scribblings/vertical-alignment.scrbl") (lib "mrlib/scribblings/aligned-pasteboard/aligned-editor-canvas-class.scrbl") (lib "mrlib/scribblings/aligned-pasteboard/horizontal-pasteboard-class.scrbl") (lib "scribblings/framework/preferences.scrbl") (lib "scribblings/gui/win-funcs.scrbl") (lib "scribblings/gui/image-snip-class.scrbl") (lib "mrlib/scribblings/bitmap-label.scrbl") (lib "mrlib/scribblings/terminal.scrbl") (lib "scribblings/gui/control-event-class.scrbl") (lib "embedded-gui/scribblings/controls.scrbl") (lib "scribblings/framework/main-extracts.rkt") (lib "embedded-gui/scribblings/embedded-button.scrbl") (lib "scribblings/gui/frame-class.scrbl") (lib "scribblings/gui/global-draw-funcs.scrbl") (lib "embedded-gui/scribblings/snip-wrapper.scrbl") (lib "embedded-gui/scribblings/button-snip.scrbl") (lib "scribblings/gui/editor-snip-class.scrbl") (lib "scribblings/gui/add-color-intf.scrbl") (lib "mrlib/scribblings/common.rkt") (lib "scribblings/framework/finder.scrbl") (lib "mrlib/scribblings/gif.scrbl") (lib "scribblings/framework/mode.scrbl") (lib "scribblings/gui/vertical-panel-class.scrbl") (lib "scribblings/gui/event-class.scrbl") (lib "scribblings/gui/menu-class.scrbl") (lib "mrlib/scribblings/graph/graph-pasteboard-intf.scrbl") (lib "scribblings/gui/editor-admin-class.scrbl") (lib "scribblings/gui/timer-class.scrbl") (lib "scribblings/gui/column-control-event-class.scrbl") (lib "scribblings/framework/preferences-text.scrbl") (lib "embedded-gui/scribblings/snip-procs.scrbl") (lib "scribblings/framework/main.scrbl") (lib "scribblings/framework/menu.scrbl") (lib "scribblings/gui/grow-box-spacer-pane-class.scrbl") (lib "mrlib/scribblings/graph/common.rkt") (lib "mrlib/scribblings/graph/graph-snip-intf.scrbl") (lib "scribblings/gui/dialog-funcs.scrbl") (lib "mrlib/scribblings/hierlist/hierlist.scrbl") (lib "scribblings/framework/text.scrbl") (lib "scribblings/framework/test.scrbl") (lib "scribblings/framework/keymap.scrbl") (lib "scribblings/gui/control-intf.scrbl") (lib "scribblings/gui/gauge-class.scrbl") (lib "scribblings/gui/common.rkt") (lib "mrlib/scribblings/aligned-pasteboard/stretchable-snip-intf.scrbl") (lib "scribblings/framework/frame.scrbl") (lib "scribblings/gui/checkable-menu-item-class.scrbl") (lib "scribblings/gui/top-level-window-intf.scrbl") (lib "scribblings/gui/win-overview.scrbl") (lib "mrlib/scribblings/close-icon.scrbl") (lib "scribblings/gui/slider-class.scrbl") (lib "scribblings/gui/font-funcs.scrbl") (lib "embedded-gui/scribblings/aligned-pasteboard.scrbl") (lib "scribblings/framework/application.scrbl") (lib "scribblings/gui/cursor-class.scrbl") (lib "scribblings/gui/menu-item-container-intf.scrbl") (lib "scribblings/gui/separator-menu-item-class.scrbl") (lib "embedded-gui/scribblings/dllist.scrbl") (lib "scribblings/gui/wxme-circle-snip.rkt") (lib "scribblings/gui/eventspace-funcs.scrbl") (lib "scribblings/framework/editor.scrbl") (lib "scribblings/gui/list-control-intf.scrbl") (lib "scribblings/framework/srcloc-snip.scrbl") (lib "scribblings/gui/guide.scrbl") (lib "scribblings/framework/splash.scrbl") (lib "embedded-gui/scribblings/common.rkt") (lib "scribblings/framework/version.scrbl") (lib "scribblings/gui/menu-item-class.scrbl") (lib "scribblings/gui/menu-item-intf.scrbl") (lib "scribblings/gui/editor-stream-in-bytes-base-class.scrbl") (lib "scribblings/framework/notify.scrbl") (lib "scribblings/gui/snip-classes.scrbl") (lib "mrlib/scribblings/arrow-toggle-snip.scrbl") (lib "scribblings/gui/editor-stream-in-class.scrbl") (lib "mrlib/scribblings/image-core.scrbl") (lib "scribblings/framework/group.scrbl") (lib "scribblings/gui/editor-intf.scrbl") (lib "embedded-gui/scribblings/alignment-parent.scrbl") (lib "scribblings/gui/editor-snip-editor-admin-intf.scrbl") (lib "scribblings/gui/pane-class.scrbl") (lib "mrlib/scribblings/aligned-pasteboard/aligned-pasteboard-parent-intf.scrbl") (lib "scribblings/framework/path-utils.scrbl") (lib "mrlib/scribblings/snip-canvas.scrbl") (lib "scribblings/framework/number-snip.scrbl") (lib "scribblings/gui/editor-data-class-class.scrbl") (lib "scribblings/gui/editor-data-class-list-intf.scrbl") (lib "mrlib/scribblings/tex-table.scrbl") (lib "scribblings/gui/subarea-intf.scrbl") (lib "scribblings/gui/snip-class-list-intf.scrbl") (lib "scribblings/gui/startup.scrbl") (lib "mrlib/scribblings/path-dialog.scrbl") (lib "embedded-gui/scribblings/embedded-gui.scrbl"))) (name . "gui-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "eeaa76d5a654b45f81c7c8caf9c39b0ed10a4e55") (source . "git://github.com/racket/gui/?path=gui-doc") (source_url . "git://github.com/racket/gui/?path=gui-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("gui-easy" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gui-easy" "doc/gui-easy@gui-easy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gui-easy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gui-easy.txt"))) (checksum . "bd640f6d1fbe6f4824d6b08bc59a7e0289c44bcf") (checksum-error . #f) (collection . "racket") (conflicts . ()) (date-added . 1627758799) (dependencies . ("base" "gui-easy-lib" "draw-doc" "gui-doc" "gui-lib" "gui-easy-lib" "pict-doc" "pict-lib" "racket-doc" "scribble-lib")) (description . "A declarative API on top of racket/gui. (docs & implementation)") (implies . ("gui-easy-lib")) (last-checked . 1632903378) (last-edit . 1627758799) (last-updated . 1632507208) (modules . ((lib "racket/gui/easy/scribblings/quickstart.scrbl") (lib "racket/gui/easy/scribblings/custom-views.scrbl") (lib "racket/gui/easy/scribblings/reference.scrbl") (lib "racket/gui/easy/scribblings/gui-easy.scrbl") (lib "racket/gui/easy/scribblings/geometry.scrbl"))) (name . "gui-easy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-gui-easy.git?path=gui-easy") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "bd640f6d1fbe6f4824d6b08bc59a7e0289c44bcf") (source . "https://github.com/Bogdanp/racket-gui-easy.git?path=gui-easy") (source_url . "https://github.com/Bogdanp/racket-gui-easy.git?path=gui-easy"))))))) ("gui-easy-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gui-easy-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gui-easy-lib.txt"))) (checksum . "bd640f6d1fbe6f4824d6b08bc59a7e0289c44bcf") (checksum-error . #f) (collection . "racket") (conflicts . ()) (date-added . 1624518658) (dependencies . ("base" "box-extra-lib" "gui-lib" "pict-lib" "rackunit-lib")) (description . "A declarative API on top of racket/gui. (implementation)") (implies . ()) (last-checked . 1632903378) (last-edit . 1624518658) (last-updated . 1632507209) (modules . ((lib "racket/gui/easy/private/view/dyn.rkt") (lib "racket/gui/easy/view.rkt") (lib "racket/gui/easy/private/view/panel.rkt") (lib "racket/gui/easy/contract.rkt") (lib "racket/gui/easy/private/logger.rkt") (lib "racket/gui/easy/private/view/radios.rkt") (lib "racket/gui/easy/private/view/list.rkt") (lib "racket/gui/easy/private/view/table.rkt") (lib "racket/gui/easy/private/view/checkbox.rkt") (lib "racket/gui/easy/private/view/window.rkt") (lib "racket/gui/easy/private/view/progress.rkt") (lib "racket/gui/easy/private/view/menu.rkt") (lib "racket/gui/easy/private/view/choice.rkt") (lib "racket/gui/easy/private/view/snip.rkt") (lib "racket/gui/easy/private/view/if.rkt") (lib "racket/gui/easy/private/view/keymap.rkt") (lib "racket/gui/easy/renderer.rkt") (lib "racket/gui/easy/private/renderer.rkt") (lib "racket/gui/easy/private/view/text.rkt") (lib "racket/gui/easy.rkt") (lib "racket/gui/easy/font.rkt") (lib "racket/gui/easy/private/view/view.rkt") (lib "racket/gui/easy/observable.rkt") (lib "racket/gui/easy/debugger.rkt") (lib "racket/gui/easy/operator.rkt") (lib "racket/gui/easy/color.rkt") (lib "racket/gui/easy/private/view/spacer.rkt") (lib "racket/gui/easy/private/view/input.rkt") (lib "racket/gui/easy/private/view.rkt") (lib "racket/gui/easy/private/view/common.rkt") (lib "racket/gui/easy/private/executor.rkt") (lib "racket/gui/easy/private/view/button.rkt") (lib "racket/gui/easy/private/view/canvas.rkt") (lib "racket/gui/easy/private/view/tabs.rkt") (lib "racket/gui/easy/private/view/container.rkt") (lib "racket/gui/easy/private/observable.rkt") (lib "racket/gui/easy/private/view/image.rkt") (lib "racket/gui/easy/private/view/slider.rkt"))) (name . "gui-easy-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-gui-easy.git?path=gui-easy-lib") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "bd640f6d1fbe6f4824d6b08bc59a7e0289c44bcf") (source . "https://github.com/Bogdanp/racket-gui-easy.git?path=gui-easy-lib") (source_url . "https://github.com/Bogdanp/racket-gui-easy.git?path=gui-easy-lib"))))))) ("gui-i386-macosx" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for gui package") (implies . ()) (last-checked . 1632903379) (last-edit . 1576860307) (last-updated . 1595021646) (modules . ()) (name . "gui-i386-macosx") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "6c79891f5b987d0922c0fce9f3ba531515838b7c") (source . "https://pkg-sources.racket-lang.org/pkgs/6c79891f5b987d0922c0fce9f3ba531515838b7c/gui-i386-macosx.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/6c79891f5b987d0922c0fce9f3ba531515838b7c/gui-i386-macosx.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("gui-lib" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("srfi-lite-lib" "data-lib" ("icons" #:version "1.3") ("base" #:version "8.2.0.1") "syntax-color-lib" ("draw-lib" #:version "1.18") ("snip-lib" #:version "1.2") "wxme-lib" "pict-lib" "scheme-lib" ("scribble-lib" #:version "1.36") ("string-constants-lib" #:version "1.36") "option-contract-lib" "2d-lib" "compatibility-lib" "tex-table" "simple-tree-text-markup-lib" ("gui-i386-macosx" #:platform "i386-macosx") ("gui-x86_64-macosx" #:platform "x86_64-macosx" #:version "1.3") ("gui-ppc-macosx" #:platform "ppc-macosx") ("gui-aarch64-macosx" #:platform "aarch64-macosx") ("gui-win32-i386" #:platform "win32\\i386") ("gui-win32-x86_64" #:platform "win32\\x86_64") ("gui-x86_64-linux-natipkg" #:platform "x86_64-linux-natipkg") "at-exp-lib" "rackunit-lib")) (description . "implementation (no documentation) part of gui") (implies . ()) (last-checked . 1632903379) (last-edit . 1417659583) (last-updated . 1632763005) (modules . ((lib "mred/private/wx/win32/theme.rkt") (lib "framework/private/autosave.rkt") (lib "framework/preferences.rkt") (lib "framework/private/text-ascii-art.rkt") (lib "framework/private/application.rkt") (lib "mred/private/wx/common/canvas-mixin.rkt") (lib "mred/private/wx/cocoa/init.rkt") (lib "embedded-gui/private/tests/test-show-feature-for-test-case.rkt") (lib "mred/private/seqcontract.rkt") (lib "framework/private/color-prefs.rkt") (lib "mred/private/wx/gtk/style.rkt") (lib "framework/private/logging-timer.rkt") (lib "mred/private/wx/win32/message.rkt") (lib "mred/private/wxme/standard-snip-admin.rkt") (lib "mred/private/wx/cocoa/menu.rkt") (lib "mred/private/wx/win32/queue.rkt") (lib "mred/private/wx/gtk/w32.rkt") (lib "framework/private/sig.rkt") (lib "mred/private/repl.rkt") (lib "mrlib/private/aligned-pasteboard/tests/test.rkt") (lib "mred/private/wx/common/handlers.rkt") (lib "mred/private/wx/gtk/pixbuf.rkt") (lib "embedded-gui/private/tests/unaligned-childless-redux.rkt") (lib "mrlib/terminal.rkt") (lib "mred/private/mrcanvas.rkt") (lib "framework/collapsed-snipclass-wxme.rkt") (lib "mrlib/private/aligned-pasteboard/tests/insertion-without-display.rkt") (lib "mrlib/aligned-pasteboard.rkt") (lib "mred/private/wx/cocoa/image.rkt") (lib "mrlib/private/aligned-pasteboard/tests/more-tests-min-stretchable.rkt") (lib "mred/private/filedialog.rkt") (lib "embedded-gui/private/verthoriz-alignment.rkt") (lib "embedded-gui/private/alignment-helpers.rkt") (lib "mred/private/mrpanel.rkt") (lib "mred/private/wxtabcanvas.rkt") (lib "mrlib/private/aligned-pasteboard/tests/example-min.rkt") (lib "embedded-gui/private/grey-editor.rkt") (lib "mrlib/image-core-wxme.rkt") (lib "framework/private/group.rkt") (lib "mred/private/wx/cocoa/gc.rkt") (lib "mred/private/wx/cocoa/cgl.rkt") (lib "framework/private/text-line-numbers.rkt") (lib "mred/private/wx/win32/hbitmap.rkt") (lib "mred/private/wxme/editor-data.rkt") (lib "framework/framework-unit.rkt") (lib "framework/private/text-basic.rkt") (lib "racket/gui/private/distro-test.rkt") (lib "framework/private/keymap-global.rkt") (lib "mred/private/wx/win32/procs.rkt") (lib "mred/private/wxcanvas.rkt") (lib "mred/private/wx/cocoa/const.rkt") (lib "mred/private/wxme/editor-snip-class.rkt") (lib "embedded-gui/private/dllist.rkt") (lib "mred/private/wx/gtk/button.rkt") (lib "hierlist/hierlist.rkt") (lib "mred/private/misc.rkt") (lib "mred/private/wxme/private.rkt") (lib "mred/private/wx/gtk/panel.rkt") (lib "mred/private/messagebox.rkt") (lib "mred/edit-main.rkt") (lib "framework/private/coroutine.rkt") (lib "mrlib/private/aligned-pasteboard/constants.rkt") (lib "mrlib/gif.rkt") (lib "mred/private/wxmenu.rkt") (lib "racket/gui/lang/reader.rkt") (lib "mred/private/wx/gtk/combo.rkt") (lib "mred/private/wx/win32/gcwin.rkt") (lib "mred/lang/main.rkt") (lib "mred/private/wx/gtk/slider.rkt") (lib "scribble/private/indentation.rkt") (lib "mrlib/private/aligned-pasteboard/tests/edit-sequence-loop.rkt") (lib "mrlib/syntax-browser.rkt") (lib "framework/private/aspell.rkt") (lib "mred/private/wxtop.rkt") (lib "mrlib/private/aligned-pasteboard/tests/old-bugs/missing-min.rkt") (lib "mred/private/wx/win32/init.rkt") (lib "framework/private/editor-sig.rkt") (lib "mrlib/interactive-value-port.rkt") (lib "mred/private/wx/cocoa/choice.rkt") (lib "racket/gui.rkt") (lib "framework/private/standard-menus-items.rkt") (lib "mred/private/kernel.rkt") (lib "mred/private/wxme/undo.rkt") (lib "mred/private/wx/common/keep-forever.rkt") (lib "mred/private/wxme/editor-admin.rkt") (lib "mred/private/editor.rkt") (lib "mrlib/private/image-core-bitmap.rkt") (lib "framework/private/color.rkt") (lib "mred/private/wxitem.rkt") (lib "mred/private/wx/cocoa/message.rkt") (lib "mred/private/wx/gtk/radio-box.rkt") (lib "framework/private/preferences.rkt") (lib "mred/private/wx/gtk/clipboard.rkt") (lib "embedded-gui/private/tests/only-one-child.rkt") (lib "mred/private/wx/common/backing-dc.rkt") (lib "mred/private/wx/cocoa/printer-dc.rkt") (lib "mred/private/wx/cocoa/finfo.rkt") (lib "mred/private/wxwindow.rkt") (lib "mred/private/wx/gtk/win32.rkt") (lib "mrlib/path-dialog.rkt") (lib "mred/private/mrcontainer.rkt") (lib "mrlib/image-core.rkt") (lib "mrlib/private/aligned-pasteboard/tests/actual-bigger.rkt") (lib "framework/private/racket.rkt") (lib "mrlib/private/aligned-pasteboard/tests/more-tests-text.rkt") (lib "mred/private/wx/cocoa/color.rkt") (lib "mred/private/wx/gtk/window.rkt") (lib "mred/private/wx/gtk/choice.rkt") (lib "mred/private/wx/win32/types.rkt") (lib "mred/private/wxme/editor-snip.rkt") (lib "framework/private/text-autocomplete.rkt") (lib "mred/private/helper.rkt") (lib "mred/private/wxme/version.rkt") (lib "embedded-gui/embedded-gui.rkt") (lib "framework/wxme-srcloc-snip.rkt") (lib "mrlib/private/aligned-pasteboard/tests/more-tests.rkt") (lib "mred/private/wx/win32/menu-item.rkt") (lib "mrlib/private/aligned-pasteboard/tests/more-tests-margin-aligned.rkt") (lib "mred/private/wx/gtk/unique.rkt") (lib "mred/private/wx/gtk/dialog.rkt") (lib "embedded-gui/private/tests/test-macro.rkt") (lib "scheme/gui/lang/reader.rkt") (lib "framework/private/keymap.rkt") (lib "mred/private/wx/cocoa/radio-box.rkt") (lib "mred/private/wx/gtk/platform.rkt") (lib "framework/private/comment-box.rkt") (lib "mred/private/wx/gtk/item.rkt") (lib "mred/private/wx/gtk/menu-bar.rkt") (lib "mred/private/wx/common/queue.rkt") (lib "mred/private/wx/gtk/frame.rkt") (lib "racket/gui/installer.rkt") (lib "mred/private/wx/gtk/const.rkt") (lib "mrlib/private/aligned-pasteboard/tests/test-macro.rkt") (lib "mred/private/wx/cocoa/pool.rkt") (lib "mred/private/wx/gtk/gl-context.rkt") (lib "framework/private/early-init.rkt") (lib "mred/private/wxlitem.rkt") (lib "mrlib/switchable-button.rkt") (lib "mrlib/private/aligned-pasteboard/tests/test-pasteboard-lib.rkt") (lib "mred/private/wx/cocoa/panel.rkt") (lib "mred/private/wx/win32/canvas.rkt") (lib "mred/private/wx/win32/sound.rkt") (lib "framework/private/finder.rkt") (lib "mrlib/tab-choice.rkt") (lib "scheme/gui/init.rkt") (lib "mred/private/wx/win32/gauge.rkt") (lib "mrlib/private/aligned-pasteboard/tests/test-locked-pasteboard.rkt") (lib "mrlib/private/aligned-pasteboard/tests/debug.rkt") (lib "mred/private/wx/common/dialog.rkt") (lib "mred/private/wxme/wx.rkt") (lib "mrlib/private/aligned-pasteboard/tests/example.rkt") (lib "embedded-gui/private/tests/not-stetching.rkt") (lib "framework/private/text-classes.rkt") (lib "mred/private/wx/win32/choice.rkt") (lib "mred/private/wx/gtk/menu.rkt") (lib "mred/private/const.rkt") (lib "mrlib/arrow-toggle-snip.rkt") (lib "framework/private/text-misc.rkt") (lib "mred/private/wx/common/local.rkt") (lib "framework/private/interfaces.rkt") (lib "mrlib/private/aligned-pasteboard/stretchable-editor-snip.rkt") (lib "framework/keybinding-lang.rkt") (lib "framework/private/text-inline-overview.rkt") (lib "embedded-gui/private/alignment.rkt") (lib "mred/private/wx/cocoa/filedialog.rkt") (lib "mred/private/wx/gtk/procs.rkt") (lib "mred/private/wx/win32/list-box.rkt") (lib "mred/private/mrmenuintf.rkt") (lib "framework/private/mode.rkt") (lib "mrlib/private/aligned-pasteboard/tests/test-snip-lib.rkt") (lib "mred/private/lock.rkt") (lib "embedded-gui/private/tabbable-text.rkt") (lib "mred/private/wx/win32/item.rkt") (lib "embedded-gui/private/tests/peer-stretchables.rkt") (lib "framework/private/editor-autoload.rkt") (lib "mred/private/wx/cocoa/check-box.rkt") (lib "framework/private/text-first-line.rkt") (lib "mred/private/wx/win32/group-panel.rkt") (lib "framework/comment-snip.rkt") (lib "mred/private/wx/cocoa/button.rkt") (lib "embedded-gui/private/tests/stretching-in-alignment.rkt") (lib "framework/private/number-snip.rkt") (lib "framework/private/text-normalize-paste.rkt") (lib "mred/mred.rkt") (lib "mred/private/wx/cocoa/item.rkt") (lib "mred/private/wx/cocoa/procs.rkt") (lib "mred/private/wx/cocoa/tab-panel.rkt") (lib "mred/private/wx/cocoa/queue.rkt") (lib "framework/private/focus-table.rkt") (lib "mred/private/wx/cocoa/cg.rkt") (lib "mred/private/wx/win32/utils.rkt") (lib "mrlib/plot.rkt") (lib "mred/private/wx/win32/const.rkt") (lib "mred/private/wx/win32/clipboard.rkt") (lib "mred/private/wx/gtk/colordialog.rkt") (lib "embedded-gui/private/tests/target-not-object.rkt") (lib "mrlib/private/aligned-pasteboard/aligned-pasteboard.rkt") (lib "framework/private/unicode-ascii-art.rkt") (lib "mred/private/wx/win32/panel.rkt") (lib "framework/private/handler.rkt") (lib "embedded-gui/private/locked-pasteboard.rkt") (lib "scheme/gui.rkt") (lib "embedded-gui/private/cue-text.rkt") (lib "mred/private/wxme/const.rkt") (lib "mred/private/syntax.rkt") (lib "mred/private/gdi.rkt") (lib "embedded-gui/private/program-editor.rkt") (lib "mred/private/wx/common/cursor.rkt") (lib "mred/mred-sig.rkt") (lib "mred/private/wxme/text.rkt") (lib "mred/edit.rkt") (lib "mrlib/bitmap-label.rkt") (lib "embedded-gui/private/interface.rkt") (lib "mred/private/app.rkt") (lib "framework/private/editor.rkt") (lib "framework/collapsed-snipclass.rkt") (lib "mred/private/wx/win32/filedialog.rkt") (lib "mred/private/wx/win32/tab-panel.rkt") (lib "mred/private/wx/gtk/message.rkt") (lib "mred/private/mred.rkt") (lib "mred/private/check.rkt") (lib "framework/splash.rkt") (lib "framework/private/text.rkt") (lib "mred/private/path-dialog.rkt") (lib "framework/private/srcloc-panel.rkt") (lib "mred/private/wxme/keymap.rkt") (lib "mred/private/wx/win32/slider.rkt") (lib "racket/gui/init.rkt") (lib "mrlib/private/graph.rkt") (lib "framework/framework.rkt") (lib "mred/private/wx/gtk/stddialog.rkt") (lib "framework/test.rkt") (lib "embedded-gui/private/tests/test-alignment.rkt") (lib "mred/private/wx/cocoa/key-translate.rkt") (lib "mred/private/wx/win32/gl-context.rkt") (lib "mred/private/wxme/editor.rkt") (lib "embedded-gui/private/embedded-message.rkt") (lib "framework/private/menu.rkt") (lib "mred/private/wx/common/timer.rkt") (lib "mred/private/wx/win32/icons.rkt") (lib "mrlib/private/aligned-pasteboard/aligned-editor-container.rkt") (lib "embedded-gui/private/tests/test-show-feature.rkt") (lib "mred/private/wx/win32/key.rkt") (lib "framework/private/editor-misc.rkt") (lib "mred/private/wx/common/default-procs.rkt") (lib "mred/private/wx/cocoa/slider.rkt") (lib "mred/private/wx/gtk/init.rkt") (lib "mred/private/mrpopup.rkt") (lib "mred/private/wx.rkt") (lib "mred/private/wx/gtk/group-panel.rkt") (lib "mred/private/wxtextfield.rkt") (lib "mrlib/private/aligned-pasteboard/geometry-managed-pasteboard.rkt") (lib "mred/private/wx/platform.rkt") (lib "mred/private/wxme/cycle.rkt") (lib "mrlib/private/aligned-pasteboard/snip-lib.rkt") (lib "mred/private/wxme/mline.rkt") (lib "mrlib/private/aligned-pasteboard/tests/test-alignment.rkt") (lib "embedded-gui/private/on-show-pasteboard.rkt") (lib "mred/private/wx/win32/button.rkt") (lib "mrlib/name-message.rkt") (lib "mred/private/wx/common/utils.rkt") (lib "mred/private/wx/win32/radio-box.rkt") (lib "mred/private/wx/win32/menu-bar.rkt") (lib "mred/private/wx/cocoa/sound.rkt") (lib "framework/private/text-search.rkt") (lib "racket/gui/interactive.rkt") (lib "mred/private/cycle.rkt") (lib "mred/private/wx/gtk/gtk3.rkt") (lib "mred/private/wx/cocoa/frame.rkt") (lib "framework/gui-utils.rkt") (lib "framework/private/panel.rkt") (lib "mred/private/wx/gtk/canvas.rkt") (lib "mred/private/wx/cocoa/types.rkt") (lib "framework/private/autocomplete.rkt") (lib "mred/private/wx/gtk/keymap.rkt") (lib "mrlib/close-icon.rkt") (lib "mred/private/dynamic.rkt") (lib "embedded-gui/private/suppress-modify-editor.rkt") (lib "embedded-gui/private/snip-wrapper.rkt") (lib "embedded-gui/private/grid-alignment.rkt") (lib "mred/private/wx/gtk/filedialog.rkt") (lib "mred/private/wx/common/procs.rkt") (lib "framework/private/canvas.rkt") (lib "mred/private/wx/win32/colordialog.rkt") (lib "mred/private/wx/gtk/tab-panel.rkt") (lib "mred/private/snipfile.rkt") (lib "framework/private/scheme.rkt") (lib "mred/private/wx/gtk/types.rkt") (lib "framework/private/follow-log.rkt") (lib "mred/private/wx/common/rbtree.rkt") (lib "mrlib/expandable-snip.rkt") (lib "framework/private/search.rkt") (lib "mred/private/wx/cocoa/group-panel.rkt") (lib "framework/private/collapsed-snipclass-helpers.rkt") (lib "racket/gui/base.rkt") (lib "mred/private/wx/win32/window.rkt") (lib "mred/private/wxme/editor-canvas.rkt") (lib "mred/private/panel-wob.rkt") (lib "mrlib/private/panel-wob.rkt") (lib "racket/gui/event.rkt") (lib "framework/private/text-delegate.rkt") (lib "mred/private/wx/gtk/list-box.rkt") (lib "framework/private/color-local-member-name.rkt") (lib "mred/private/wx/gtk/dc.rkt") (lib "mrlib/private/aligned-pasteboard/alignment.rkt") (lib "embedded-gui/private/tests/alignment-test.rkt") (lib "framework/private/pasteboard.rkt") (lib "mred/private/fontdialog.rkt") (lib "mred/installer.rkt") (lib "mred/private/wx/win32/cursor.rkt") (lib "mrlib/matrix-snip.rkt") (lib "mrlib/private/aligned-pasteboard/tests/test2.rkt") (lib "mred/private/wx/gtk/utils.rkt") (lib "mred/private/wx/cocoa/gauge.rkt") (lib "mrlib/hierlist/hierlist-unit.rkt") (lib "mred/private/wx/win32/wndclass.rkt") (lib "framework/framework-sig.rkt") (lib "mrlib/private/aligned-pasteboard/tests/snip-dumper.rkt") (lib "framework/private/srcloc-snip.rkt") (lib "mred/private/wx/cocoa/dialog.rkt") (lib "mred/private/wx/cocoa/cursor.rkt") (lib "mred/private/wx/gtk/x11.rkt") (lib "framework/private/text-port.rkt") (lib "mred/private/wx/cocoa/platform.rkt") (lib "mred/private/wx/win32/platform.rkt") (lib "mrlib/private/aligned-pasteboard/pasteboard-lib.rkt") (lib "framework/decorated-editor-snip.rkt") (lib "mred/private/mrwindow.rkt") (lib "mred/private/wx/win32/dialog.rkt") (lib "mred/private/wx/common/cursor-draw.rkt") (lib "mrlib/private/image-core-snipclass.rkt") (lib "mred/private/wx/win32/printer-dc.rkt") (lib "mred/private/mrmenu.rkt") (lib "mred/private/wx/gtk/check-box.rkt") (lib "mred/mred-unit.rkt") (lib "embedded-gui/private/single-line-text.rkt") (lib "mrlib/private/aligned-pasteboard/interface.rkt") (lib "mred/private/wx/gtk/menu-item.rkt") (lib "embedded-gui/private/lines.rkt") (lib "mred/private/wxpanel.rkt") (lib "embedded-gui/private/fixed-width-label-snip.rkt") (lib "mred/private/wx/cocoa/colordialog.rkt") (lib "mred/private/wx/common/delay.rkt") (lib "mrlib/private/aligned-pasteboard/tests/more-tests-min.rkt") (lib "framework/private/gen-standard-menus.rkt") (lib "mred/private/wxcontainer.rkt") (lib "mrlib/click-forwarding-editor.rkt") (lib "framework/private/main.rkt") (lib "mrlib/graph.rkt") (lib "mred/private/wx/common/event.rkt") (lib "framework/private/decode.rkt") (lib "mred/private/wx/gtk/gcwin.rkt") (lib "mred/private/wx/win32/font.rkt") (lib "framework/private/exit.rkt") (lib "mred/private/wx/common/once.rkt") (lib "mrlib/hierlist.rkt") (lib "framework/private/path-utils.rkt") (lib "mred/private/wxme/pasteboard.rkt") (lib "embedded-gui/private/aligned-pasteboard.rkt") (lib "mred/private/mrtextfield.rkt") (lib "mred/private/wx/win32/check-box.rkt") (lib "mred/private/wx/cocoa/font.rkt") (lib "framework/private/version.rkt") (lib "framework/private/text-column-guide.rkt") (lib "mred/private/wx/common/freeze.rkt") (lib "mred/private/wx/gtk/queue.rkt") (lib "framework/private/encode.rkt") (lib "mred/lang/reader.rkt") (lib "embedded-gui/private/tests/test-case-box.rkt") (lib "mred/private/te.rkt") (lib "mred/private/wx/gtk/gsettings.rkt") (lib "mrlib/private/aligned-pasteboard/tests/stretchable-editor-snip-test-min.rkt") (lib "mred/private/wx/cocoa/keycode.rkt") (lib "mred/private/wx/cocoa/menu-item.rkt") (lib "mrlib/private/aligned-pasteboard/locked-pasteboard.rkt") (lib "embedded-gui/private/on-show-editor.rkt") (lib "mred/private/wx/win32/menu.rkt") (lib "framework/main.rkt") (lib "mred/private/mrtop.rkt") (lib "framework/private/text-sig.rkt") (lib "framework/private/notify.rkt") (lib "mred/private/wx/gtk/gauge.rkt") (lib "framework/private/decorated-editor-snip.rkt") (lib "mrlib/private/aligned-pasteboard/tests/more-tests-margin.rkt") (lib "framework/private/icon.rkt") (lib "framework/private/color-model.rkt") (lib "mred/private/wx/cocoa/canvas.rkt") (lib "mrlib/hierlist/hierlist-sig.rkt") (lib "embedded-gui/private/really-resized-pasteboard.rkt") (lib "mrlib/private/aligned-pasteboard/tests/stretchable-editor-snip-test.rkt") (lib "mred/private/wx/cocoa/dc.rkt") (lib "mrlib/private/dot.rkt") (lib "mred/private/moredialogs.rkt") (lib "mred/private/wx/common/clipboard.rkt") (lib "mred/private/wx/gtk/keycode.rkt") (lib "mred/private/wx/cocoa/utils.rkt") (lib "framework/private/mapdesc.rkt") (lib "mred/private/wx/gtk/widget.rkt") (lib "embedded-gui/private/snip-lib.rkt") (lib "mrlib/text-string-style-desc.rkt") (lib "framework/private/frame.rkt") (lib "mrlib/cache-image-snip.rkt") (lib "mrlib/include-bitmap.rkt") (lib "mred/private/wx/cocoa/menu-bar.rkt") (lib "mred/private/wx/gtk/client-window.rkt") (lib "mred/private/wxme/stream.rkt") (lib "mred/private/wx/win32/dc.rkt") (lib "mred/private/wxme/wordbreak.rkt") (lib "mred/private/wx/gtk/cursor.rkt") (lib "mred/main.rkt") (lib "mred/private/wx/cocoa/list-box.rkt") (lib "embedded-gui/private/button-snip.rkt") (lib "framework/srcloc-snip.rkt") (lib "mred/private/wx/gtk/printer-dc.rkt") (lib "embedded-gui/main.rkt") (lib "embedded-gui/private/stretchable-editor-snip.rkt") (lib "mred/private/wx/cocoa/clipboard.rkt") (lib "scheme/gui/base.rkt") (lib "mred/private/mritem.rkt") (lib "mred/private/wx/win32/frame.rkt") (lib "mrlib/private/regmk.rkt") (lib "mrlib/private/aligned-pasteboard/tests/old-bugs/big-min.rkt") (lib "mrlib/private/aligned-pasteboard/tests/minimal.rkt") (lib "mrlib/snip-canvas.rkt") (lib "framework/notify.rkt") (lib "mred/private/wx/cocoa/window.rkt") (lib "mred/private/wx/gtk/resolution.rkt") (lib "mrlib/panel-wob.rkt"))) (name . "gui-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "eeaa76d5a654b45f81c7c8caf9c39b0ed10a4e55") (source . "git://github.com/racket/gui/?path=gui-lib") (source_url . "git://github.com/racket/gui/?path=gui-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("gui-pkg-manager" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gui-pkg-manager.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gui-pkg-manager.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("gui-pkg-manager-lib" "gui-pkg-manager-doc" "gui-lib" "base")) (description . "Graphical tool for managing Racket package installations") (implies . ("gui-pkg-manager-lib" "gui-pkg-manager-doc")) (last-checked . 1632903380) (last-edit . 1417659583) (last-updated . 1600011217) (modules . ((lib "pkg/gui/start.rkt"))) (name . "gui-pkg-manager") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e975632785a322f86a12f4c0faca73d075d4fb50") (source . "git://github.com/racket/gui-pkg-manager/?path=gui-pkg-manager") (source_url . "git://github.com/racket/gui-pkg-manager/?path=gui-pkg-manager"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("gui-pkg-manager-doc" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gui-pkg-manager" "doc/gui-pkg-manager@gui-pkg-manager-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gui-pkg-manager-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gui-pkg-manager-doc.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "documentation part of gui-pkg-manager") (implies . ()) (last-checked . 1632903380) (last-edit . 1417659583) (last-updated . 1600011218) (modules . ((lib "pkg/gui/scribblings/gui-pkg-manager.scrbl"))) (name . "gui-pkg-manager-doc") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e975632785a322f86a12f4c0faca73d075d4fb50") (source . "git://github.com/racket/gui-pkg-manager/?path=gui-pkg-manager-doc") (source_url . "git://github.com/racket/gui-pkg-manager/?path=gui-pkg-manager-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("gui-pkg-manager-lib" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "gui-lib" ("string-constants-lib" #:version "1.29"))) (description . "implementation (no documentation) part of gui-pkg-manager") (implies . ()) (last-checked . 1632903380) (last-edit . 1417659583) (last-updated . 1600011219) (modules . ((lib "pkg/gui.rkt") (lib "pkg/gui/private/settings.rkt") (lib "pkg/gui/private/by-source.rkt") (lib "pkg/gui/private/by-installed.rkt") (lib "pkg/gui/private/common.rkt") (lib "pkg/gui/private/by-list.rkt") (lib "pkg/gui/private/filter-panel.rkt") (lib "pkg/gui/private/by-migrate.rkt") (lib "pkg/gui/private/catalog-update.rkt"))) (name . "gui-pkg-manager-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "e975632785a322f86a12f4c0faca73d075d4fb50") (source . "git://github.com/racket/gui-pkg-manager/?path=gui-pkg-manager-lib") (source_url . "git://github.com/racket/gui-pkg-manager/?path=gui-pkg-manager-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("gui-ppc-macosx" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for gui package") (implies . ()) (last-checked . 1632903381) (last-edit . 1576860307) (last-updated . 1595021660) (modules . ()) (name . "gui-ppc-macosx") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "a1e1969cc29d4f055a1540fad11369225319d722") (source . "https://pkg-sources.racket-lang.org/pkgs/a1e1969cc29d4f055a1540fad11369225319d722/gui-ppc-macosx.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/a1e1969cc29d4f055a1540fad11369225319d722/gui-ppc-macosx.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("gui-test" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-index" "scheme-lib" "draw-lib" "racket-test" "sgl" "snip-lib" "wxme-lib" "gui-lib" "syntax-color-lib" "rackunit-lib" "pconvert-lib" "compatibility-lib" "sandbox-lib" "simple-tree-text-markup-lib" "pict-lib" "pict-snip-lib")) (description . "tests for gui") (implies . ()) (last-checked . 1632903381) (last-edit . 1417659583) (last-updated . 1632763010) (modules . ((lib "framework/tests/main.rkt") (lib "framework/tests/color-scheme.rkt") (lib "tests/gracket/gl-refresh.rkt") (lib "tests/gracket/item.rkt") (lib "framework/tests/test-suite-utils.rkt") (lib "framework/tests/racket.rkt") (lib "tests/gracket/unflushed-circle.rkt") (lib "framework/tests/framework-test-engine.rkt") (lib "framework/tests/group-test.rkt") (lib "framework/tests/number-snip.rkt") (lib "tests/gracket/pr195.rkt") (lib "tests/gracket/racket-ns.rkt") (lib "framework/tests/color-text.rkt") (lib "framework/tests/color-model.rkt") (lib "framework/tests/handler-test.rkt") (lib "tests/gracket/wxme-random.rkt") (lib "framework/tests/text.rkt") (lib "framework/tests/search.rkt") (lib "framework/tests/modern-racket.rkt") (lib "tests/gracket/flush-stress.rkt") (lib "framework/tests/pasteboard.rkt") (lib "tests/gracket/wxme.rkt") (lib "tests/gracket/image-snip-unmarshalling.rkt") (lib "tests/gracket/draw-mem.rkt") (lib "tests/gracket/wxme-load.rkt") (lib "tests/gracket/test-editor-admin.rkt") (lib "framework/tests/inline-overview.rkt") (lib "mrlib/tests/syntax-browser.rkt") (lib "tests/gracket/test.rkt") (lib "framework/tests/exit.rkt") (lib "framework/tests/private/util.rkt") (lib "framework/tests/keys.rkt") (lib "tests/gracket/gl-bitmap.rkt") (lib "framework/tests/debug.rkt") (lib "tests/gracket/undo.rkt") (lib "tests/gracket/showkey.rkt") (lib "tests/gracket/pasteboard.rkt") (lib "tests/gracket/gc-blits.rkt") (lib "framework/tests/frame.rkt") (lib "framework/tests/panel.rkt") (lib "framework/tests/test-docs-complete.rkt") (lib "framework/tests/private/gui.rkt") (lib "framework/tests/canvas.rkt") (lib "tests/gracket/scheme-ns.rkt") (lib "mrlib/tests/image-core.rkt") (lib "framework/tests/panel-single.rkt") (lib "framework/tests/prefs.rkt") (lib "tests/gracket/sandbox-gui.rkt") (lib "tests/gracket/load-handler.rkt") (lib "framework/tests/load.rkt") (lib "tests/gracket/mem.rkt") (lib "tests/gracket/issue-119.rkt") (lib "framework/tests/mem.rkt") (lib "tests/gracket/wxme-stream.rkt"))) (name . "gui-test") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "eeaa76d5a654b45f81c7c8caf9c39b0ed10a4e55") (source . "git://github.com/racket/gui/?path=gui-test") (source_url . "git://github.com/racket/gui/?path=gui-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("gui-widget-mixins" . #hasheq((author . "alexharsanyi@gmail.com") (authors . ("alexharsanyi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "gui-widget-mixins" "doc/gui-widget-mixins@gui-widget-mixins/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/gui-widget-mixins.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/gui-widget-mixins.txt"))) (checksum . "81f02a227337afcaff434d4c4a5846dcee098b78") (checksum-error . #f) (collection . "gui-widget-mixins") (conflicts . ()) (date-added . 1551414475) (dependencies . ("base" "gui-lib" "scribble-lib" "racket-doc" "rackunit-lib" "gui-doc")) (description . "Tool tips, cue text and validation for text-field% GUI widgets in Racket ") (implies . ()) (last-checked . 1632903381) (last-edit . 1552898814) (last-updated . 1619155079) (modules . ((lib "gui-widget-mixins/private/validate-mixin.rkt") (lib "gui-widget-mixins/private/tooltip-mixin.rkt") (lib "gui-widget-mixins/private/cue-mixin.rkt") (lib "gui-widget-mixins/private/decorate-mixin.rkt") (lib "gui-widget-mixins/scribblings/gui-widget-mixins.scrbl") (lib "gui-widget-mixins/main.rkt"))) (name . "gui-widget-mixins") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexharsanyi@gmail.com . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/alex-hhh/gui-widget-mixins.git") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "81f02a227337afcaff434d4c4a5846dcee098b78") (source . "https://github.com/alex-hhh/gui-widget-mixins.git") (source_url . "https://github.com/alex-hhh/gui-widget-mixins.git"))))))) ("gui-win32-i386" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for gui package") (implies . ()) (last-checked . 1632903381) (last-edit . 1524001652) (last-updated . 1595021668) (modules . ()) (name . "gui-win32-i386") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "2b7aa953bf212cb3901457e77b4fd4cd3ff4bbc3") (source . "https://pkg-sources.racket-lang.org/pkgs/2b7aa953bf212cb3901457e77b4fd4cd3ff4bbc3/gui-win32-i386.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/2b7aa953bf212cb3901457e77b4fd4cd3ff4bbc3/gui-win32-i386.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("gui-win32-x86_64" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for gui package") (implies . ()) (last-checked . 1632903382) (last-edit . 1524001652) (last-updated . 1595021679) (modules . ()) (name . "gui-win32-x86_64") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "c1bbca0ce6b65d2fc46e47593a5ce147bd544a2a") (source . "https://pkg-sources.racket-lang.org/pkgs/c1bbca0ce6b65d2fc46e47593a5ce147bd544a2a/gui-win32-x86_64.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/c1bbca0ce6b65d2fc46e47593a5ce147bd544a2a/gui-win32-x86_64.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("gui-x86_64-linux-natipkg" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for gui package") (implies . ()) (last-checked . 1632903382) (last-edit . 1452304685) (last-updated . 1502816107) (modules . ()) (name . "gui-x86_64-linux-natipkg") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "07f6230c81a57c499b89ad4d4ffb257e73c22b1f") (source . "https://pkg-sources.racket-lang.org/pkgs/07f6230c81a57c499b89ad4d4ffb257e73c22b1f/gui-x86_64-linux-natipkg.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/07f6230c81a57c499b89ad4d4ffb257e73c22b1f/gui-x86_64-linux-natipkg.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("gui-x86_64-macosx" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for gui package") (implies . ()) (last-checked . 1632903383) (last-edit . 1581168925) (last-updated . 1581168925) (modules . ()) (name . "gui-x86_64-macosx") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "24d26fc4b3e7ffaa8f00349fa6ac4e205fe9140c") (source . "https://pkg-sources.racket-lang.org/pkgs/24d26fc4b3e7ffaa8f00349fa6ac4e205fe9140c/gui-x86_64-macosx.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/24d26fc4b3e7ffaa8f00349fa6ac4e205fe9140c/gui-x86_64-macosx.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("hackett" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/hackett.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e90ace9e4a056ec0a2a267f220cb29b756cbefce") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548924769) (dependencies . ("hackett-doc" "hackett-lib")) (description . "") (implies . ("hackett-doc" "hackett-lib")) (last-checked . 1632903383) (last-edit . 1557544235) (last-updated . 1597606197) (modules . ()) (name . "hackett") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-desc: . #t) (author:lexi.lambda@gmail.com . #t) (lang . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/lexi-lambda/hackett.git?path=hackett") (tags . ("lang" "language")) (versions . #hash((default . #hasheq((checksum . "e90ace9e4a056ec0a2a267f220cb29b756cbefce") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett"))) ("6.12" . #hasheq((checksum . "bca810ae7aea1b11e1f9b361d509c25a70d9733b") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett#bca810ae7aea1b11e1f9b361d509c25a70d9733b") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett#bca810ae7aea1b11e1f9b361d509c25a70d9733b"))) ("7.1" . #hasheq((checksum . "f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea"))) ("7.2" . #hasheq((checksum . "f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea"))) ("7.0" . #hasheq((checksum . "f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea"))) ("7.3" . #hasheq((checksum . "f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea"))))))) ("hackett-demo" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/hackett-demo.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e90ace9e4a056ec0a2a267f220cb29b756cbefce") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548924807) (dependencies . ("base" "draw-lib" "hackett-lib" "htdp-lib" "pict-lib" "threading-lib" "web-server-lib")) (description . "") (implies . ()) (last-checked . 1632903384) (last-edit . 1557544253) (last-updated . 1597606199) (modules . ((lib "hackett/demo/web-server.rkt") (lib "hackett/demo/pict/universe.rkt") (lib "hackett/demo/pict.rkt"))) (name . "hackett-demo") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-demo") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e90ace9e4a056ec0a2a267f220cb29b756cbefce") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-demo") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-demo"))) ("6.12" . #hasheq((checksum . "bca810ae7aea1b11e1f9b361d509c25a70d9733b") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-demo#bca810ae7aea1b11e1f9b361d509c25a70d9733b") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-demo#bca810ae7aea1b11e1f9b361d509c25a70d9733b"))) ("7.1" . #hasheq((checksum . "f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-demo#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-demo#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea"))) ("7.2" . #hasheq((checksum . "f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-demo#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-demo#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea"))) ("7.0" . #hasheq((checksum . "f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-demo#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-demo#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea"))) ("7.3" . #hasheq((checksum . "f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-demo#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-demo#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea"))))))) ("hackett-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "hackett"))) (failure-log . "server/built/fail/hackett-doc.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e90ace9e4a056ec0a2a267f220cb29b756cbefce") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548924821) (dependencies . ("base" "hackett-lib" ("scribble-lib" #:version "1.16") "at-exp-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1632903386) (last-edit . 1557544298) (last-updated . 1597606200) (modules . ((lib "scribble/manual/hackett.rkt") (lib "scribblings/hackett/guide.scrbl") (lib "scribble/manual/hackett/private/manual-bind.rkt") (lib "scribblings/hackett/private/util.rkt") (lib "scribblings/hackett/main.scrbl") (lib "scribblings/hackett/reference.scrbl"))) (name . "hackett-doc") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e90ace9e4a056ec0a2a267f220cb29b756cbefce") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-doc") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-doc"))) ("6.12" . #hasheq((checksum . "bca810ae7aea1b11e1f9b361d509c25a70d9733b") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-doc#bca810ae7aea1b11e1f9b361d509c25a70d9733b") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-doc#bca810ae7aea1b11e1f9b361d509c25a70d9733b"))) ("7.1" . #hasheq((checksum . "f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-doc#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-doc#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea"))) ("7.2" . #hasheq((checksum . "f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-doc#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-doc#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea"))) ("7.0" . #hasheq((checksum . "f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-doc#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-doc#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea"))) ("7.3" . #hasheq((checksum . "f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-doc#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-doc#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea"))))))) ("hackett-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/hackett-lib.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e90ace9e4a056ec0a2a267f220cb29b756cbefce") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548924837) (dependencies . (("base" #:version "7.0.0.2") "curly-fn-lib" "data-lib" "syntax-classes-lib" "threading-lib")) (description . "") (implies . ()) (last-checked . 1632903387) (last-edit . 1557544313) (last-updated . 1597606203) (modules . ((lib "hackett/data/either.rkt") (lib "hackett/private/prim/type-provide.rkt") (lib "hackett/monad/trans/error.rkt") (lib "hackett/private/toplevel.rkt") (lib "hackett/private/pattern-alias.rkt") (lib "hackett/monad/reader.rkt") (lib "hackett/private/type-language.rkt") (lib "hackett/monad/trans/signatures.rkt") (lib "hackett/private/infix.rkt") (lib "hackett/private/expand+elaborate.rkt") (lib "hackett/private/prim/base.rkt") (lib "hackett/prelude.rkt") (lib "hackett/private/adt.rkt") (lib "hackett/private/prim/op.rkt") (lib "hackett/private/kernel.rkt") (lib "hackett/private/util/stx.rkt") (lib "hackett/private/util/require.rkt") (lib "hackett/todo.rkt") (lib "hackett/private/type-reqprov.rkt") (lib "hackett/private/util/contract.rkt") (lib "hackett/private/provide.rkt") (lib "hackett/private/base.rkt") (lib "hackett/private/util/list.rkt") (lib "hackett/monad/trans.rkt") (lib "hackett/private/type-alias.rkt") (lib "hackett/private/typecheck.rkt") (lib "hackett/private/prop-case-pattern-expander.rkt") (lib "hackett/monad/error.rkt") (lib "hackett/base.rkt") (lib "hackett/data/identity.rkt") (lib "hackett/private/typeclass.rkt") (lib "hackett/main.rkt") (lib "hackett/monad/base.rkt") (lib "hackett/monad/trans/reader.rkt") (lib "hackett/private/util/cond-expand.rkt") (lib "hackett/private/reader.rkt") (lib "hackett/private/deferred-transformer.rkt") (lib "hackett/data/list.rkt") (lib "hackett/private/prim/type.rkt") (lib "hackett/data/maybe.rkt") (lib "hackett/private/class.rkt") (lib "hackett/private/prim.rkt"))) (name . "hackett-lib") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e90ace9e4a056ec0a2a267f220cb29b756cbefce") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-lib") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-lib"))) ("6.12" . #hasheq((checksum . "bca810ae7aea1b11e1f9b361d509c25a70d9733b") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-lib#bca810ae7aea1b11e1f9b361d509c25a70d9733b") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-lib#bca810ae7aea1b11e1f9b361d509c25a70d9733b"))) ("7.1" . #hasheq((checksum . "f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-lib#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-lib#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea"))) ("7.2" . #hasheq((checksum . "f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-lib#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-lib#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea"))) ("7.0" . #hasheq((checksum . "f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-lib#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-lib#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea"))) ("7.3" . #hasheq((checksum . "f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-lib#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-lib#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea"))))))) ("hackett-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/hackett-test.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e90ace9e4a056ec0a2a267f220cb29b756cbefce") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548924852) (dependencies . ("base" "hackett-lib" "rackunit-lib" "sandbox-lib" "testing-util-lib")) (description . "") (implies . ()) (last-checked . 1632903388) (last-edit . 1557544327) (last-updated . 1597606205) (modules . ((lib "tests/hackett/integration/recursive-unannotated-definition.rkt") (lib "tests/hackett/integration/pattern-app.rkt") (lib "tests/hackett/regression/github-issue-63.rkt") (lib "hackett/private/test.rkt") (lib "tests/hackett/integration/fundeps-arithmetic.rkt") (lib "tests/hackett/regression/lazy-case.rkt") (lib "tests/hackett/integration/type-alias.rkt") (lib "tests/hackett/integration/generalize.rkt") (lib "tests/hackett/regression/github-issue-46.rkt") (lib "tests/hackett/typecheck.rkt") (lib "tests/hackett/integration/laar-lens.rkt") (lib "tests/hackett/integration/pattern-alias.rkt") (lib "tests/hackett/integration/multi-param-typeclasses.rkt") (lib "tests/hackett/integration/top-level-recursive-def.rkt") (lib "tests/hackett/regression/github-issue-85.rkt") (lib "tests/hackett/integration/str-pattern.rkt") (lib "tests/hackett/integration/scoped-type-variables.rkt") (lib "tests/hackett/integration/int-pattern.rkt") (lib "tests/hackett/integration/variadic-list.rkt") (lib "tests/hackett/regression/github-issue-36.rkt") (lib "tests/hackett/integration/typeclass-instance-context-reduction.rkt") (lib "tests/hackett/regression/github-issue-60.rkt"))) (name . "hackett-test") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e90ace9e4a056ec0a2a267f220cb29b756cbefce") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-test") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-test"))) ("6.12" . #hasheq((checksum . "bca810ae7aea1b11e1f9b361d509c25a70d9733b") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-test#bca810ae7aea1b11e1f9b361d509c25a70d9733b") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-test#bca810ae7aea1b11e1f9b361d509c25a70d9733b"))) ("7.1" . #hasheq((checksum . "f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-test#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-test#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea"))) ("7.2" . #hasheq((checksum . "f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-test#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-test#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea"))) ("7.0" . #hasheq((checksum . "f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-test#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-test#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea"))) ("7.3" . #hasheq((checksum . "f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source . "https://github.com/lexi-lambda/hackett.git?path=hackett-test#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea") (source_url . "https://github.com/lexi-lambda/hackett.git?path=hackett-test#f5a080ebcf9e2ca1fbf5be98517f4991ec2405ea"))))))) ("haiku-enum" . #hasheq((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "doc" "doc/doc@haiku-enum/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/haiku-enum.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/haiku-enum.txt"))) (checksum . "6856c4c6bf3c82e30ac453cee9b57bb5ef717888") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1562608272) (dependencies . ("at-exp-lib" "base" "math-lib" "data-enumerate-lib" "data-doc" "racket-doc" "scribble-doc" "scribble-lib")) (description . "A language designed for generating Haiku") (implies . ()) (last-checked . 1632903389) (last-edit . 1563647158) (last-updated . 1563764348) (modules . ((lib "haiku-enum/haiku.rkt") (lib "haiku-enum/very-simple-haiku.rkt") (lib "haiku-enum/simple-haiku.rkt") (lib "haiku-enum/doc.scrbl") (lib "haiku-enum/main.rkt"))) (name . "haiku-enum") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:robby@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/rfindler/haiku-enum.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6856c4c6bf3c82e30ac453cee9b57bb5ef717888") (source . "https://github.com/rfindler/haiku-enum.git") (source_url . "https://github.com/rfindler/haiku-enum.git"))))))) ("hamt" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hamt" "doc/hamt@hamt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hamt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hamt.txt"))) (checksum . "561cb6a447e9766dcb8abf2c01b30b87d91135f5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "r6rs-lib" "collections-lib" "racket-doc" "rackunit-lib" "scribble-lib" "collections-lib")) (description . "Hash array mapped tries") (implies . ()) (last-checked . 1632903390) (last-edit . 1380916167) (last-updated . 1502816110) (modules . ((lib "data/hamt.rkt") (lib "data/hamt/array.rkt") (lib "data/hamt/fast.rkt") (lib "tests/data/hamt/hamt.rkt") (lib "tests/data/hamt/perf.rkt") (lib "data/hamt/hamt.scrbl") (lib "data/hamt/popcount.rkt") (lib "data/hamt/syntax.rkt"))) (name . "hamt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:zeppieri@gmail.com . #t) (ring:1 . #t))) (source . "github://github.com/97jaz/hamt/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "561cb6a447e9766dcb8abf2c01b30b87d91135f5") (source . "github://github.com/97jaz/hamt/master") (source_url . "http://github.com/97jaz/hamt/tree/master"))))))) ("handin" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "handin-server" "doc/handin-server@handin/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/handin.txt") (test-failure-log . "server/built/test-fail/handin.txt") (test-success-log . #f))) (checksum . "3c31daccf0f61bb06aa65e36d72acc0ef2f453da") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "drracket" "drracket-plugin-lib" "gui-lib" "htdp-lib" "net-lib" "pconvert-lib" ("sandbox-lib" #:version "1.2") "rackunit-lib" "web-server-lib" "gui-doc" "racket-doc" "scribble-lib")) (description . "Handin server and client template") (implies . ()) (last-checked . 1632903390) (last-edit . 1365690182) (last-updated . 1632867385) (modules . ((lib "handin-server/private/hooker.rkt") (lib "handin-server/scribblings/handin-server.scrbl") (lib "handin-client/updater.rkt") (lib "handin-client/this-collection.rkt") (lib "handin-server/grading-utils.rkt") (lib "handin-server/overridden-collects/teachpack/htdp/guess.rkt") (lib "handin-server/private/lock.rkt") (lib "handin-client/handin-multi.rkt") (lib "handin-server/scribblings/other-utils.scrbl") (lib "handin-server/run-servlet.rkt") (lib "handin-server/scribblings/wheres-the-collection.scrbl") (lib "handin-server/private/config.rkt") (lib "handin-server/scribblings/server-setup.scrbl") (lib "handin-server/scribblings/grading-utils.scrbl") (lib "handin-server/scribblings/hook-dummy.rkt") (lib "handin-server/checker.rkt") (lib "handin-server/web-status-server.rkt") (lib "handin-server/private/run-status.rkt") (lib "handin-server/scribblings/utils.scrbl") (lib "handin-server/scribblings/quick-start.scrbl") (lib "handin-server/scribblings/multifile.scrbl") (lib "handin-server/scribblings/server-client.scrbl") (lib "handin-client/client-gui.rkt") (lib "handin-server/main.rkt") (lib "handin-server/scribblings/checker-utils.scrbl") (lib "handin-server/sandbox.rkt") (lib "handin-server/scribblings/sandbox.scrbl") (lib "handin-client/client.rkt") (lib "handin-server/scribblings/common.rkt") (lib "handin-server/utils.rkt") (lib "handin-server/scribblings/checker.scrbl") (lib "handin-server/overridden-collects/teachpack/htdp/master.rkt") (lib "handin-server/private/md5.rkt") (lib "handin-server/scribblings/updater.scrbl") (lib "handin-server/private/logger.rkt") (lib "handin-server/private/reloadable.rkt") (lib "handin-server/scribblings/client-customization.scrbl"))) (name . "handin") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@cs.utah.edu . #t) (ring:0 . #t))) (source . "github://github.com/plt/handin/for-v5.3.6") (tags . ()) (versions . #hash((default . #hasheq((checksum . "48f73430d7cd1e981dacd00cf51e5815889bbb05") (source . "github://github.com/plt/handin/master") (source_url . "http://github.com/plt/handin/tree/master"))) ("5.3.6" . #hasheq((checksum . "3c31daccf0f61bb06aa65e36d72acc0ef2f453da") (source . "github://github.com/plt/handin/for-v5.3.6") (source_url . "http://github.com/plt/handin/tree/for-v5.3.6"))) ("5.3.5" . #hasheq((checksum . "3c31daccf0f61bb06aa65e36d72acc0ef2f453da") (source . "github://github.com/plt/handin/for-v5.3.6") (source_url . "http://github.com/plt/handin/tree/for-v5.3.6"))))))) ("handy" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/handy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/handy.txt"))) (checksum . "4e48796cefe4c2294200064fef475dfdeaed3609") (checksum-error . #f) (collection . "handy") (conflicts . ()) (dependencies . ("html-parsing" "base" "db-lib" "rackunit-lib" "sxml" "at-exp-lib")) (description . "Utility functions that are missing from Racket -- e.g. 'say' (variadic displayln), 'multi-partition' (partition into more than two lists), better exception creation / trapping, database management, etc") (implies . ()) (last-checked . 1632903391) (last-edit . 1517612022) (last-updated . 1624486400) (modules . ((lib "handy/try.rkt") (lib "handy/web.rkt") (lib "handy/utils.rkt") (lib "handy/net.rkt") (lib "handy/test-more.rkt") (lib "handy/fsmonitor.rkt") (lib "handy/files/compression.rkt") (lib "handy/json.rkt") (lib "handy/hash.rkt") (lib "handy/deprecated/list-utils.rkt") (lib "handy/sql.rkt") (lib "handy/HTML-Element.rkt") (lib "handy/thread.rkt") (lib "handy/main.rkt") (lib "handy/exceptions.rkt") (lib "handy/struct.rkt") (lib "handy/scribblings/list-utils.scrbl") (lib "handy/db.rkt") (lib "handy/HTML-TreeBuilder.rkt") (lib "handy/list-utils.rkt"))) (name . "handy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:david.storrs@gmail.com . #t) (database . #t) (exceptions . #t) (ring:1 . #t) (utility . #t) (web . #t))) (source . "https://github.com/dstorrs/racket-dstorrs-libs.git") (tags . ("database" "exceptions" "utility" "web")) (versions . #hash((default . #hasheq((checksum . "4e48796cefe4c2294200064fef475dfdeaed3609") (source . "https://github.com/dstorrs/racket-dstorrs-libs.git") (source_url . "https://github.com/dstorrs/racket-dstorrs-libs.git"))))))) ("happy-app" . #hasheq((author . "crystal@panix.com") (authors . ("crystal@panix.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "happy-app" "doc/happy-app@happy-app/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/happy-app.txt") (test-failure-log . "server/built/test-fail/happy-app.txt") (test-success-log . #f))) (checksum . "b14ad656e3f326881adf958bde846073c14d5e5f") (checksum-error . #f) (collection . "happy-app") (conflicts . ()) (date-added . 1621927530) (dependencies . ("base" "ugly-app-lib" "syntax-classes-lib" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "A Toolbox of Syntactic Shortcuts") (implies . ()) (last-checked . 1632903391) (last-edit . 1622061034) (last-updated . 1622282705) (modules . ((lib "happy-app/tests/infix.rkt") (lib "happy-app/tests/infix-placeholder.rkt") (lib "happy-app/tests/curry-ref.rkt") (lib "happy-app/main.rkt") (lib "happy-app/private/happy-app.rkt") (lib "happy-app/tests/arrow-lambda.rkt") (lib "happy-app/happy-app.scrbl") (lib "happy-app/tests/placeholder.rkt") (lib "happy-app/tests/thunk.rkt"))) (name . "happy-app") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (app-syntax . #t) (author:crystal@panix.com . #t) (ring:1 . #t))) (source . "https://github.com/plane/happy-app.git") (tags . ("app-syntax")) (versions . #hash((default . #hasheq((checksum . "b14ad656e3f326881adf958bde846073c14d5e5f") (source . "https://github.com/plane/happy-app.git") (source_url . "https://github.com/plane/happy-app.git"))))))) ("happy-names" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/happy-names.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/happy-names.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/happy-names.txt"))) (checksum . "3a74d689059e77106318b751e65b113233008d19") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("memoize")) (description . "Simple generator for Heroku-like names (random adj + random noun)") (implies . ()) (last-checked . 1632903391) (last-edit . 1529086137) (last-updated . 1529086137) (modules . ((lib "happy-names/nouns.rkt") (lib "happy-names/combiners.rkt") (lib "happy-names/adjectives.rkt") (lib "happy-names/main.rkt"))) (name . "happy-names") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/happy-names.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "3a74d689059e77106318b751e65b113233008d19") (source . "https://github.com/thoughtstem/happy-names.git") (source_url . "https://github.com/thoughtstem/happy-names.git"))))))) ("hash-lambda" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hash-lambda-toc" "doc/hash-lambda-toc@hash-lambda/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hash-lambda.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hash-lambda.txt"))) (checksum . "d65df820d1c16e4d2f8c6e1519f3a0ec838387c8") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "unstable-lib" "unstable-list-lib" "kw-utils" "mutable-match-lambda" "rackunit-lib" "at-exp-lib" "scribble-lib" "sandbox-lib" "racket-doc")) (description . "using hash-tables for rest-arguments that include keyword-arguments") (implies . ()) (last-checked . 1632903392) (last-edit . 1397156000) (last-updated . 1502816111) (modules . ((lib "hash-lambda/prop-object-name.rkt") (lib "hash-lambda/main.rkt") (lib "hash-lambda/all.rkt") (lib "keyword-lambda/docs/keyword-case-lambda.scrbl") (lib "hash-lambda/docs/hash-lambda.scrbl") (lib "hash-lambda/docs/hash-lambda-toc.scrbl") (lib "hash-lambda/docs/mutable-match-lambda.scrbl") (lib "hash-lambda/mutable-match-lambda.rkt") (lib "keyword-lambda/kw-apply.rkt") (lib "keyword-lambda/main.rkt") (lib "keyword-lambda/arity+keywords.rkt") (lib "keyword-lambda/docs/keyword-lambda.scrbl") (lib "keyword-lambda/keyword-apply-sort.rkt") (lib "keyword-lambda/keyword-lambda.rkt") (lib "keyword-lambda/keyword-case-lambda.rkt"))) (name . "hash-lambda") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (deprecated . #t) (keywords . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/hash-lambda") (tags . ("deprecated" "keywords")) (versions . #hash((default . #hasheq((checksum . "d65df820d1c16e4d2f8c6e1519f3a0ec838387c8") (source . "git://github.com/AlexKnauth/hash-lambda") (source_url . "http://github.com/AlexKnauth/hash-lambda/tree/master"))))))) ("hash-view" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hash-view" "doc/hash-view@hash-view/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hash-view.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hash-view.txt"))) (checksum . "7bfad3b89241beaca45f43ec1d70ef3ed268b495") (checksum-error . #f) (collection . "hash-view") (conflicts . ()) (date-added . 1612252731) (dependencies . ("base" "rackunit-lib" "hash-view-lib" "racket-doc" "scribble-lib")) (description . "Struct-like view for hashes") (implies . ("hash-view-lib")) (last-checked . 1632903392) (last-edit . 1612252747) (last-updated . 1612252747) (modules . ((lib "hash-view/hash-view.scrbl") (lib "hash-view/test.rkt"))) (name . "hash-view") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (hash . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-hash-view.git?path=hash-view") (tags . ("hash")) (versions . #hash((default . #hasheq((checksum . "7bfad3b89241beaca45f43ec1d70ef3ed268b495") (source . "https://github.com/rmculpepper/racket-hash-view.git?path=hash-view") (source_url . "https://github.com/rmculpepper/racket-hash-view.git?path=hash-view"))))))) ("hash-view-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hash-view-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hash-view-lib.txt"))) (checksum . "7bfad3b89241beaca45f43ec1d70ef3ed268b495") (checksum-error . #f) (collection . "hash-view") (conflicts . ()) (date-added . 1612252634) (dependencies . ("base")) (description . "Struct-like view for hashes") (implies . ()) (last-checked . 1632903392) (last-edit . 1612252758) (last-updated . 1612252634) (modules . ((lib "hash-view/main.rkt"))) (name . "hash-view-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (hash . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-hash-view.git?path=hash-view-lib") (tags . ("hash")) (versions . #hash((default . #hasheq((checksum . "7bfad3b89241beaca45f43ec1d70ef3ed268b495") (source . "https://github.com/rmculpepper/racket-hash-view.git?path=hash-view-lib") (source_url . "https://github.com/rmculpepper/racket-hash-view.git?path=hash-view-lib"))))))) ("hdf5" . #hasheq((author . "petersamarin@gmail.com") (authors . ("petersamarin@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hdf5.txt") (test-failure-log . "server/built/test-fail/hdf5.txt") (test-success-log . #f))) (checksum . "5836fc438ee36f94c80362b7da79b252a6429009") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit" "math")) (description . "FFI bindings to the hdf5 library") (implies . ()) (last-checked . 1632903393) (last-edit . 1524859998) (last-updated . 1544510595) (modules . ((lib "examples/hl-open.rkt") (lib "hdf5/unsafe.rkt") (lib "examples/h5ex_d_unlimgzip.rkt") (lib "examples/h5ex_t_commit.rkt") (lib "examples/getting-data-format.rkt") (lib "hdf5/unsafe/h5spublic.rkt") (lib "hdf5/unsafe/h5opublic.rkt") (lib "hdf5/unsafe/hdf5.rkt") (lib "hdf5/hl.rkt") (lib "hdf5/unsafe/h5mmpublic.rkt") (lib "examples/h5ex_g_traverse.rkt") (lib "examples/h5ex_t_vlen.rkt") (lib "examples/h5ex_t_enum.rkt") (lib "hdf5/hl/hdf5.rkt") (lib "hdf5/hl/utilities.rkt") (lib "hdf5/unsafe/h5dpublic.rkt") (lib "hdf5/unsafe/h5public.rkt") (lib "examples/h5ex_d_unlimadd.rkt") (lib "hdf5/unsafe/utilities.rkt") (lib "hdf5/unsafe/h5fdpublic.rkt") (lib "hdf5/unsafe/h5cpublic.rkt") (lib "examples/h5ex_t_cmpd.rkt") (lib "hdf5/unsafe/h5ppublic.rkt") (lib "hdf5/unsafe/h5tpublic.rkt") (lib "hdf5/unsafe/h5fpublic.rkt") (lib "hdf5/unsafe/h5acpublic.rkt") (lib "hdf5/unsafe/h5rpublic.rkt") (lib "examples/h5ex_t_array.rkt") (lib "hdf5/unsafe/h5gpublic.rkt") (lib "examples/h5ex_t_int.rkt") (lib "hdf5/unsafe/h5epublic.rkt") (lib "hdf5/unsafe/h5apublic.rkt") (lib "examples/h5ex_t_opaque.rkt") (lib "hdf5/unsafe/h5zpublic.rkt") (lib "hdf5/unsafe/h5lpublic.rkt") (lib "hdf5/unsafe/h5-utilities.rkt") (lib "hdf5/unsafe/h5epubgen.rkt") (lib "hdf5/hl/h5file.rkt") (lib "examples/h5ex_g_iterate.rkt") (lib "examples/h5ex_t_string.rkt") (lib "examples/h5ex_t_cpxcmpd.rkt") (lib "hdf5/unsafe/h5ipublic.rkt"))) (name . "hdf5") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:petersamarin@gmail.com . #t) (data . #t) (ffi . #t) (hdf5 . #t) (ring:1 . #t))) (source . "https://github.com/oetr/racket-hdf5.git") (tags . ("data" "ffi" "hdf5")) (versions . #hash((default . #hasheq((checksum . "5836fc438ee36f94c80362b7da79b252a6429009") (source . "https://github.com/oetr/racket-hdf5.git") (source_url . "https://github.com/oetr/racket-hdf5.git"))))))) ("herbie" . #hasheq((author . "me@pavpanchekha.com") (authors . ("me@pavpanchekha.com")) (build . #hash((conflicts-log . ("indirect" "conflicts.txt")) (dep-failure-log . "server/built/deps/herbie.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/herbie.txt") (test-failure-log . "server/built/test-fail/herbie.txt") (test-success-log . #f))) (checksum . "8e29e90fccb360a9e19019cc534a635a30afcc66") (checksum-error . #f) (collection . "herbie") (conflicts . ()) (date-added . 1561053330) (dependencies . (("base" #:version "7.0") "math-lib" "plot-lib" "profile-lib" "rackunit-lib" "web-server-lib" ("egg-herbie" #:version "1.4") ("regraph" #:version "1.4") ("rival" #:version "1.4") ("fpbench" #:version "2.0.1") "rackunit-lib")) (description . "A tool for automatically improving the accuracy of floating point expressions") (implies . ()) (last-checked . 1632903393) (last-edit . 1626033666) (last-updated . 1627162901) (modules . ((lib "herbie/web/traceback.rkt") (lib "herbie/web/demo.rkt") (lib "herbie/core/alt-table.rkt") (lib "herbie/sampling.rkt") (lib "herbie/interface.rkt") (lib "herbie/core/matcher.rkt") (lib "herbie/core/periodicity.rkt") (lib "herbie/web/plot.rkt") (lib "herbie/syntax/sugar.rkt") (lib "herbie/searchreals.rkt") (lib "herbie/syntax/test-rules.rkt") (lib "herbie/core/taylor.rkt") (lib "herbie/syntax/syntax.rkt") (lib "herbie/syntax/type-check.rkt") (lib "herbie/function-definitions.rkt") (lib "herbie/core/simplify.rkt") (lib "herbie/mainloop.rkt") (lib "herbie/common.rkt") (lib "herbie/syntax/read.rkt") (lib "herbie/float.rkt") (lib "herbie/profile.rkt") (lib "herbie/symmetry.rkt") (lib "herbie/cost.rkt") (lib "herbie/web/run.rkt") (lib "herbie/syntax/types.rkt") (lib "herbie/points.rkt") (lib "herbie/core/reduce.rkt") (lib "herbie/pareto.rkt") (lib "herbie/datafile.rkt") (lib "herbie/errors.rkt") (lib "herbie/syntax/rules.rkt") (lib "herbie/web/thread-pool.rkt") (lib "herbie/alternative.rkt") (lib "herbie/programs.rkt") (lib "herbie/core/localize.rkt") (lib "herbie/config.rkt") (lib "herbie/web/make-report.rkt") (lib "herbie/web/common.rkt") (lib "herbie/preprocess.rkt") (lib "herbie/shell.rkt") (lib "herbie/improve.rkt") (lib "herbie/web/make-graph.rkt") (lib "herbie/debug.rkt") (lib "herbie/timeline.rkt") (lib "herbie/core/regimes.rkt") (lib "herbie/plugin.rkt") (lib "herbie/herbie.rkt") (lib "herbie/sandbox.rkt") (lib "herbie/web/history.rkt") (lib "herbie/syntax/syntax-check.rkt") (lib "herbie/web/pages.rkt") (lib "herbie/conversions.rkt") (lib "herbie/float32.rkt") (lib "herbie/multi-command-line.rkt") (lib "herbie/web/timeline.rkt"))) (name . "herbie") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-dep-fail: . #t) (:build-success: . #t) (author:me@pavpanchekha.com . #t) (floating-point . #t) (ring:1 . #t) (synthesis . #t))) (source . "https://github.com/uwplse/herbie.git?path=src#v1.5") (tags . ("floating-point" "synthesis")) (versions . #hash((default . #hasheq((checksum . "8e29e90fccb360a9e19019cc534a635a30afcc66") (source . "https://github.com/uwplse/herbie.git?path=src#v1.5") (source_url . "https://github.com/uwplse/herbie.git?path=src#v1.5"))))))) ("heresy" . #hasheq((author . "jarcane@gmail.com") (authors . ("jarcane@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "heresy" "doc/heresy@heresy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/heresy.txt") (test-failure-log . "server/built/test-fail/heresy.txt") (test-success-log . #f))) (checksum . "5456b2b9a5fe37c342b45e29f455954eb9ba41a6") (checksum-error . #f) (collection . "heresy") (conflicts . ()) (dependencies . ("base" "unstable-lib" "rackjure" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "A functional Lisp dialect with BASIC-inspired syntax") (implies . ()) (last-checked . 1632903393) (last-edit . 1420033563) (last-updated . 1630098996) (modules . ((lib "heresy/lib/math.rkt") (lib "heresy/examples/brainfuck.rkt") (lib "heresy/lib/things.rkt") (lib "heresy/private/base.rkt") (lib "heresy/examples/99bottles.rkt") (lib "heresy/examples/hole-test.rkt") (lib "heresy/tests/things.rkt") (lib "heresy/examples/collatz.rkt") (lib "heresy/tests/app.rkt") (lib "heresy/examples/cards.rkt") (lib "heresy/tests/Y.rkt") (lib "heresy/examples/id-do.rkt") (lib "heresy/lib/list.rkt") (lib "heresy/lib/theory.rkt") (lib "heresy/tests/infix-math.rkt") (lib "heresy/lang/reader.rkt") (lib "heresy/examples/fizzbuzz.rkt") (lib "heresy/docs/heresy.scrbl") (lib "heresy/lib/identity.rkt") (lib "heresy/lib/string.rkt") (lib "heresy/lib/monadology.rkt") (lib "heresy/lib/require-stuff.rkt") (lib "heresy/private/io.rkt") (lib "heresy/private/random.rkt") (lib "heresy/main.rkt") (lib "heresy/lib/maybe.rkt") (lib "heresy/lib/hole.rkt") (lib "heresy/examples/option-type.rkt") (lib "heresy/lib/pipes.rkt") (lib "heresy/examples/fact.rkt") (lib "heresy/examples/celebrate.rkt") (lib "heresy/examples/do-action.rkt") (lib "heresy/examples/cons-things.rkt") (lib "heresy/examples/pipeland.rkt") (lib "heresy/examples/list-do.rkt") (lib "heresy/lib/infix-math.rkt"))) (name . "heresy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jarcane@gmail.com . #t) (language . #t) (ring:1 . #t))) (source . "git://github.com/jarcane/heresy") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "5456b2b9a5fe37c342b45e29f455954eb9ba41a6") (source . "git://github.com/jarcane/heresy") (source_url . "http://github.com/jarcane/heresy/tree/master"))))))) ("hidapi" . #hasheq((author . "jpathy@lazycons.xyz jiten@lazycons.xyz") (authors . ("jpathy@lazycons.xyz" "jiten@lazycons.xyz")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hidapi" "doc/hidapi@hidapi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hidapi.txt") (test-failure-log . "server/built/test-fail/hidapi.txt") (test-success-log . #f))) (checksum . "91c5e5b8eb7380d3b6031d736e6d8fc9121a7cb0") (checksum-error . #f) (collection . "hidapi") (conflicts . ()) (date-added . 1612849578) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Racket bindings to hidapi library.") (implies . ()) (last-checked . 1632903393) (last-edit . 1612849578) (last-updated . 1508907677) (modules . ((lib "hidapi/private/ffi.rkt") (lib "hidapi/scribblings/hidapi.scrbl") (lib "hidapi/main.rkt"))) (name . "hidapi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jiten@lazycons.xyz . #t) (author:jpathy@lazycons.xyz . #t) (ffi . #t) (hid . #t) (hidapi . #t) (ring:1 . #t) (usb . #t))) (source . "https://github.com/jpathy/hidapi.git") (tags . ("ffi" "hid" "hidapi" "usb")) (versions . #hash((default . #hasheq((checksum . "91c5e5b8eb7380d3b6031d736e6d8fc9121a7cb0") (source . "https://github.com/jpathy/hidapi.git") (source_url . "https://github.com/jpathy/hidapi.git"))))))) ("hive-client" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hive-client.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hive-client.txt"))) (checksum . "5fa5b818d84f3201ae5c5563b83445089d11c041") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "hive-common" "gui-lib" "racket-doc")) (description . "Hive: client-server framework. This is client package.") (implies . ()) (last-checked . 1632903393) (last-edit . 1466352183) (last-updated . 1629692172) (modules . ((lib "hive/client.rkt") (lib "hive/client/receiver.rkt") (lib "hive/client/receivers.rkt") (lib "hive/client/string-constants-en.rkt") (lib "hive/client/defaults.rkt") (lib "hive/client/string-constants.rkt") (lib "hive/client/string-constants-ru.rkt") (lib "hive/client/users.rkt") (lib "hive/client/commands.rkt"))) (name . "hive-client") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:kalimehtar@mail.ru . #t) (client . #t) (ipc . #t) (ring:1 . #t))) (source . "git://github.com/Kalimehtar/hive-client") (tags . ("client" "ipc")) (versions . #hash((default . #hasheq((checksum . "5fa5b818d84f3201ae5c5563b83445089d11c041") (source . "git://github.com/Kalimehtar/hive-client") (source_url . "http://github.com/Kalimehtar/hive-client/tree/master"))))))) ("hive-common" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hive-common" "doc/hive-common@hive-common/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hive-common.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hive-common.txt"))) (checksum . "38d5bffacf8ddc6b8e0680997d23bf0502153bb7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "thread-utils" "racket-doc")) (description . "Hive: client-server framework. This is library for both client and server.") (implies . ()) (last-checked . 1632903394) (last-edit . 1466352121) (last-updated . 1557429608) (modules . ((lib "hive/common/read-write.rkt") (lib "hive/common/users.rkt") (lib "hive/common/serialize.rkt") (lib "hive/common/hive-common.scrbl"))) (name . "hive-common") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (ipc . #t) (ring:1 . #t))) (source . "git://github.com/Kalimehtar/hive-common") (tags . ("ipc")) (versions . #hash((default . #hasheq((checksum . "38d5bffacf8ddc6b8e0680997d23bf0502153bb7") (source . "git://github.com/Kalimehtar/hive-common") (source_url . "http://github.com/Kalimehtar/hive-common/tree/master"))))))) ("hive-server" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hive-server.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hive-server.txt"))) (checksum . "b60f588e9f214faa7b0767047ff20ba962ce935a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "hive-common" "rackunit-lib" "srfi-lib" "racket-doc")) (description . "Hive: client-server framework. This is server-side package.") (implies . ()) (last-checked . 1632903394) (last-edit . 1525272140) (last-updated . 1629717381) (modules . ((lib "hive/server/make-next.rkt") (lib "hive/server/file-store.rkt") (lib "hive/server.rkt") (lib "hive/server/commands.rkt") (lib "hive/server/session.rkt") (lib "hive/server/users.rkt") (lib "hive/server/catalog.rkt"))) (name . "hive-server") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:kalimehtar@mail.ru . #t) (ipc . #t) (ring:1 . #t) (server . #t))) (source . "https://github.com/Kalimehtar/hive-server.git") (tags . ("ipc" "server")) (versions . #hash((default . #hasheq((checksum . "b60f588e9f214faa7b0767047ff20ba962ce935a") (source . "https://github.com/Kalimehtar/hive-server.git") (source_url . "https://github.com/Kalimehtar/hive-server.git"))))))) ("honu" . #hash((author . "mflatt@racket-lang.org rafkind@racket-lang.org") (authors . ("mflatt@racket-lang.org" "rafkind@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "honu" "doc/honu@honu/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/honu.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/honu.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "macro-debugger" "base" "parser-tools-lib" "rackunit-lib" "racket-index" "scribble-lib" "at-exp-lib" "sandbox-lib" "racket-doc")) (description . "The implementation of the Honu language") (implies . ()) (last-checked . 1632903394) (last-edit . 1417659583) (last-updated . 1571887065) (modules . ((lib "honu/tests/test-docs-complete.rkt") (lib "honu/private/lang/reader.rkt") (lib "honu-parse/syntax.rkt") (lib "honu/debug.rkt") (lib "honu-parse/wrap.rkt") (lib "honu-parse/operator.rkt") (lib "honu/syntax-parse.rkt") (lib "honu/core/private/macro.rkt") (lib "honu/core/runtime.rkt") (lib "honu/private/common.rkt") (lib "honu/core/api.rkt") (lib "honu/core/private/struct.rkt") (lib "honu/main.rkt") (lib "honu/tests/linq.rkt") (lib "honu-parse/debug.rkt") (lib "honu/syntax.rkt") (lib "honu-parse/literals.rkt") (lib "honu-parse/macro.rkt") (lib "honu/core/lang/reader.rkt") (lib "honu-parse/transformer.rkt") (lib "honu/lang/reader.rkt") (lib "honu-parse/arithmetic.rkt") (lib "honu-parse/define.rkt") (lib "honu/core/private/honu-top.rkt") (lib "honu/private/main.rkt") (lib "honu-parse/template.rkt") (lib "honu/core/read.rkt") (lib "honu/core/main.rkt") (lib "honu/core/private/util.rkt") (lib "honu/core/private/literals.rkt") (lib "honu-parse/unparsed-begin.rkt") (lib "honu/core/private/honu.rkt") (lib "honu-parse/main.rkt") (lib "honu-parse/old-literals.rkt") (lib "honu/tests/xml.rkt") (lib "honu/scribblings/honu.scrbl") (lib "honu-parse/compile.rkt") (lib "honu/core/private/class.rkt") (lib "honu-parse/parse.rkt") (lib "honu/core/private/operator.rkt") (lib "honu/core/language.rkt") (lib "honu/tests/macros.rkt") (lib "honu/tests/check.rkt"))) (name . "honu") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (author:rafkind@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b36b9aeda8be22bf7fda177e831f42ac1a1de79b") (source . "git://github.com/racket/honu") (source_url . "http://github.com/racket/honu/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("hostname" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hostname" "doc/hostname@hostname/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hostname.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hostname.txt"))) (checksum . "e235b0ed0e00388dfc80c4a20577458885679cdd") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Getting Hostname, FQDN, and IP Addresses") (implies . ()) (last-checked . 1632903395) (last-edit . 1456469042) (last-updated . 1601439589) (modules . ((lib "hostname/main.rkt") (lib "hostname/hostname.scrbl"))) (name . "hostname") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/hostname.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e235b0ed0e00388dfc80c4a20577458885679cdd") (source . "http://www.neilvandyke.org/racket/hostname.zip") (source_url . "http://www.neilvandyke.org/racket/hostname.zip"))))))) ("htdp" . #hash((author . "matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org") (authors . ("matthias@racket-lang.org" "mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("htdp-lib" "htdp-doc")) (description . "Teaching languages for _How to Design Programs_") (implies . ("htdp-lib" "htdp-doc")) (last-checked . 1632903396) (last-edit . 1417659583) (last-updated . 1630379780) (modules . ()) (name . "htdp") (ring . 0) (search-terms . #hasheq((author:matthias@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "bbd7333a13c96ab7a0bb5fd3e6580f0698386270") (source . "git://github.com/racket/htdp/?path=htdp") (source_url . "git://github.com/racket/htdp/?path=htdp"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("htdp-doc" . #hash((author . "matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org") (authors . ("matthias@racket-lang.org" "mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "htdp-ptr" "doc/htdp-ptr@htdp-doc/index.html") ("main" "turtles" "doc/turtles@htdp-doc/index.html") ("main" "graphics" "doc/graphics@htdp-doc/index.html") ("main" "htdp" "doc/htdp@htdp-doc/index.html") ("main" "htdp-langs" "doc/htdp-langs@htdp-doc/index.html") ("main" "stepper" "doc/stepper@htdp-doc/index.html") ("main" "test-engine" "doc/test-engine@htdp-doc/index.html") ("main" "teachpack" "doc/teachpack@htdp-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib" "draw-lib" ("gui-lib" #:version "1.37") "htdp-lib" "plai" "sandbox-lib" "pict-lib" "mzscheme-doc" "scheme-lib" "compatibility-doc" "draw-doc" "drracket" "gui-doc" "pict-doc" "racket-doc")) (description . "documentation part of htdp") (implies . ()) (last-checked . 1632903396) (last-edit . 1417659583) (last-updated . 1630379782) (modules . ((lib "graphics/scribblings/traditional-turtles.scrbl") (lib "teachpack/htdp/scribblings/htdp.scrbl") (lib "teachpack/2htdp/scribblings/port.rkt") (lib "teachpack/htdp/scribblings/show-queen.scrbl") (lib "teachpack/2htdp/scribblings/abstraction.scrbl") (lib "stepper/scribblings/stepper.scrbl") (lib "htdp/htdp.scrbl") (lib "teachpack/2htdp/scribblings/itunes.scrbl") (lib "teachpack/htdp/scribblings/gui.scrbl") (lib "scribblings/htdp-langs/prim-ops.rkt") (lib "scribblings/htdp-langs/common.rkt") (lib "teachpack/2htdp/scribblings/image-guide.scrbl") (lib "teachpack/2htdp/scribblings/web-io.scrbl") (lib "teachpack/htdp/scribblings/hangman-play.scrbl") (lib "teachpack/2htdp/scribblings/port.scrbl") (lib "teachpack/htdp/scribblings/draw.scrbl") (lib "htdp/error-composition.scrbl") (lib "teachpack/2htdp/scribblings/image.scrbl") (lib "scribblings/htdp-langs/beginner.scrbl") (lib "teachpack/2htdp/scribblings/shared.rkt") (lib "scribblings/htdp-langs/htdp-ptr.scrbl") (lib "teachpack/htdp/scribblings/shared.rkt") (lib "teachpack/2htdp/scribblings/image-util.rkt") (lib "teachpack/htdp/scribblings/arrow-gui.scrbl") (lib "graphics/scribblings/common.rkt") (lib "teachpack/htdp/scribblings/matrix.scrbl") (lib "scribblings/htdp-langs/beginner-abbr.scrbl") (lib "teachpack/teachpack.scrbl") (lib "teachpack/htdp/scribblings/image.scrbl") (lib "teachpack/htdp/scribblings/hangman.scrbl") (lib "scribblings/htdp-langs/advanced.scrbl") (lib "scribblings/htdp-langs/htdp-langs.scrbl") (lib "teachpack/htdp/scribblings/master-play.scrbl") (lib "teachpack/htdp/scribblings/graphing.scrbl") (lib "scribblings/htdp-langs/intermediate.scrbl") (lib "graphics/scribblings/turtles.scrbl") (lib "teachpack/htdp/scribblings/master.scrbl") (lib "htdp/error-reporting.scrbl") (lib "teachpack/htdp/scribblings/lkup-gui.scrbl") (lib "teachpack/htdp/scribblings/convert.scrbl") (lib "teachpack/2htdp/scribblings/planetcute.scrbl") (lib "teachpack/htdp/scribblings/elevator.scrbl") (lib "test-engine/test-engine.scrbl") (lib "teachpack/2htdp/scribblings/2htdp.scrbl") (lib "teachpack/htdp/scribblings/guess.scrbl") (lib "teachpack/2htdp/scribblings/batch-io.scrbl") (lib "graphics/scribblings/value-turtles.scrbl") (lib "htdp/testing.scrbl") (lib "teachpack/2htdp/scribblings/universe.scrbl") (lib "teachpack/htdp/scribblings/guess-gui.scrbl") (lib "teachpack/htdp/scribblings/dir.scrbl") (lib "teachpack/htdp/scribblings/docs.scrbl") (lib "scribblings/htdp-langs/std-grammar.rkt") (lib "teachpack/htdp/scribblings/arrow.scrbl") (lib "htdp/htdp-lib.scrbl") (lib "graphics/scribblings/graphics.scrbl") (lib "teachpack/htdp/scribblings/world.scrbl") (lib "scribblings/htdp-langs/intermediate-lambda.scrbl"))) (name . "htdp-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:matthias@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "bbd7333a13c96ab7a0bb5fd3e6580f0698386270") (source . "git://github.com/racket/htdp/?path=htdp-doc") (source_url . "git://github.com/racket/htdp/?path=htdp-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("htdp-json" . #hasheq((author . "samth@ccs.neu.edu ccshan@indiana.edu") (authors . ("samth@ccs.neu.edu" "ccshan@indiana.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "htdp-json" "doc/htdp-json@htdp-json/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/htdp-json.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/htdp-json.txt"))) (checksum . "4685de829cfc51b41b010ab0563ef24b9bcbdf5a") (checksum-error . #f) (collection . "2htdp") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "htdp-lib")) (description . "A library for teaching with JSON") (implies . ()) (last-checked . 1632903396) (last-edit . 1509457385) (last-updated . 1572301207) (modules . ((lib "2htdp/json.rkt") (lib "2htdp/scribblings/htdp-json.scrbl"))) (name . "htdp-json") (ring . 1) (search-terms . #hasheq((2htdp . #t) (:build-success: . #t) (:docs: . #t) (author:ccshan@indiana.edu . #t) (author:samth@ccs.neu.edu . #t) (json . #t) (ring:1 . #t))) (source . "https://github.com/samth/htdp-json.git") (tags . ("2htdp" "json")) (versions . #hash((default . #hasheq((checksum . "4685de829cfc51b41b010ab0563ef24b9bcbdf5a") (source . "https://github.com/samth/htdp-json.git") (source_url . "https://github.com/samth/htdp-json.git"))))))) ("htdp-lib" . #hash((author . "matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org") (authors . ("matthias@racket-lang.org" "mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.8.0.2") "compatibility-lib" "draw-lib" ("drracket-plugin-lib" #:version "1.1") "errortrace-lib" "html-lib" "images-gui-lib" "images-lib" "net-lib" "pconvert-lib" "plai-lib" "r5rs-lib" "sandbox-lib" "scheme-lib" "scribble-lib" ("simple-tree-text-markup-lib" #:version "1.1") "slideshow-lib" "snip-lib" "srfi-lite-lib" ("string-constants-lib" #:version "1.20") "typed-racket-lib" "typed-racket-more" "web-server-lib" "wxme-lib" ("gui-lib" #:version "1.52") "deinprogramm-signature" "pict-lib" "racket-index" "at-exp-lib" ("rackunit-lib" #:version "1.10"))) (description . "implementation (no documentation) part of htdp") (implies . ()) (last-checked . 1632903396) (last-edit . 1417659583) (last-updated . 1630379784) (modules . ((lib "htdp/guess-gui.rkt") (lib "htdp/bsl/lang/reader.rkt") (lib "2htdp/planetcute/shadow-south-east.rkt") (lib "2htdp/planetcute/shadow-north-east.rkt") (lib "lang/htdp-langs-interface.rkt") (lib "lang/plt-pretty-big-text.rkt") (lib "graphics/value-turtles-test.rkt") (lib "2htdp/private/logging-gui.rkt") (lib "stepper/private/display-break-stuff.rkt") (lib "2htdp/planetcute/tree-tall.rkt") (lib "2htdp/planetcute/stone-block.rkt") (lib "2htdp/planetcute/shadow-west.rkt") (lib "lang/htdp-intermediate-lambda-reader.rkt") (lib "stepper/private/step-img.rkt") (lib "lang/private/intermediate-funs.rkt") (lib "2htdp/planetcute/character-horn-girl.rkt") (lib "xml/scheme-snipclass.rkt") (lib "stepper/private/find-tag.rkt") (lib "stepper/drracket-button.rkt") (lib "teachpack/tests/test-docs-complete.rkt") (lib "lang/error.rkt") (lib "2htdp/planetcute/character-pink-girl.rkt") (lib "teachpack/htdp/testing.rkt") (lib "2htdp/universe-syntax-parse.rkt") (lib "htdp/lkup-gui.rkt") (lib "2htdp/private/define-keywords.rkt") (lib "stepper/stepper+xml-tool.rkt") (lib "2htdp/planetcute/roof-north.rkt") (lib "stepper/private/mred-extensions.rkt") (lib "htdp/color-structs.rkt") (lib "graphics/private/value-turtles.rkt") (lib "2htdp/private/timer.rkt") (lib "stepper/private/model.rkt") (lib "teachpack/balls.rkt") (lib "htdp/asl/lang/reader.rkt") (lib "2htdp/planetcute/chest-open.rkt") (lib "2htdp/planetcute/shadow-side-west.rkt") (lib "2htdp/private/stop.rkt") (lib "typed/test-engine/scheme-tests.rkt") (lib "teachpack/htdp/draw.rkt") (lib "htdp/graphing.rkt") (lib "lang/htdp-beginner.rkt") (lib "stepper/private/syntax-hider.rkt") (lib "lang/imageeq.rkt") (lib "2htdp/planetcute/dirt-block.rkt") (lib "2htdp/planetcute/door-tall-open.rkt") (lib "teachpack/htdp/show-queen.rkt") (lib "2htdp/planetcute/character-cat-girl.rkt") (lib "teachpack/htdp/servlet.rkt") (lib "2htdp/planetcute/wall-block.rkt") (lib "2htdp/private/launch-many-worlds.rkt") (lib "htdp/servlet.rkt") (lib "teachpack/htdp/hangman.rkt") (lib "2htdp/planetcute/selector.rkt") (lib "htdp/matrix-unit.rkt") (lib "2htdp/planetcute/chest-closed.rkt") (lib "lang/private/teachprims.rkt") (lib "typed/test-engine/type-env-ext.rkt") (lib "lang/htdp-intermediate-lambda.rkt") (lib "2htdp/planetcute/shadow-south-west.rkt") (lib "2htdp/planetcute/shadow-north-west.rkt") (lib "lang/htdp-beginner-abbr-reader.rkt") (lib "stepper/stepper-tool.rkt") (lib "htdp/guess.rkt") (lib "graphics/turtle-test.rkt") (lib "lang/prim.rkt") (lib "htdp/draw.rkt") (lib "2htdp/planetcute/heart.rkt") (lib "2htdp/image.rkt") (lib "2htdp/private/checked-cell.rkt") (lib "htdp/matrix-invisible.rkt") (lib "stepper/private/marks.rkt") (lib "lang/private/textbook-pls-spec.rkt") (lib "lang/private/intermediate-plus.rkt") (lib "2htdp/private/universe-image.rkt") (lib "2htdp/planetcute/yellow-star.rkt") (lib "lang/private/teach-module-begin.rkt") (lib "stepper/private/xml-snip-helpers.rkt") (lib "lang/stepper-language-interface.rkt") (lib "lang/htdp-advanced-reader.rkt") (lib "htdp/matrix.rkt") (lib "lang/private/sl-eval.rkt") (lib "lang/private/advanced-funs.rkt") (lib "teachpack/2htdp/universe.rkt") (lib "2htdp/private/last.rkt") (lib "2htdp/planetcute/roof-south.rkt") (lib "stepper/private/shared.rkt") (lib "htdp/image.rkt") (lib "2htdp/private/img-err.rkt") (lib "graphics/private/value-turtles-reader.rkt") (lib "2htdp/planetcute/tree-ugly.rkt") (lib "test-engine/srcloc.rkt") (lib "graphics/value-turtles.rkt") (lib "2htdp/planetcute/roof-south-east.rkt") (lib "2htdp/planetcute/roof-north-east.rkt") (lib "2htdp/planetcute/roof-south-west.rkt") (lib "2htdp/planetcute/roof-north-west.rkt") (lib "2htdp/planetcute/shadow-south.rkt") (lib "2htdp/planetcute/shadow-north.rkt") (lib "2htdp/planetcute/ramp-north.rkt") (lib "2htdp/uchat/chatter.rkt") (lib "stepper/examples/bobby.rkt") (lib "lang/private/and-or-map.rkt") (lib "stepper/private/syntax-property.rkt") (lib "test-engine/test-display-gui.rkt") (lib "teachpack/htdp/servlet2.rkt") (lib "stepper/private/view-controller-typed.rkt") (lib "lang/private/sl-stepper-button.rkt") (lib "teachpack/htdp/world.rkt") (lib "stepper/private/xml-box.rkt") (lib "teachpack/htdp/arrow-gui.rkt") (lib "xml/text-snipclass.rkt") (lib "2htdp/planetcute/water-block.rkt") (lib "htdp/matrix-sig.rkt") (lib "htdp/testing.rkt") (lib "htdp/convert.rkt") (lib "2htdp/uchat/auxiliaries.rkt") (lib "test-engine/test-tool.rkt") (lib "2htdp/abstraction.rkt") (lib "lang/htdp-reader.rkt") (lib "graphics/tests/test-docs-complete.rkt") (lib "2htdp/planetcute/brown-block.rkt") (lib "graphics/turtle-examples.rkt") (lib "stepper/external-interface.rkt") (lib "htdp/gui.rkt") (lib "stepper/private/vertical-separator-snip.rkt") (lib "2htdp/private/clauses-spec-and-process.rkt") (lib "lang/private/teach-shared.rkt") (lib "lang/htdp-langs.rkt") (lib "2htdp/planetcute/roof-east.rkt") (lib "2htdp/private/image-core.rkt") (lib "lang/private/todo.rkt") (lib "2htdp/planetcute/ramp-south.rkt") (lib "teachpack/htdp/arrow.rkt") (lib "teachpack/nuworld.rkt") (lib "stepper/private/view-controller.rkt") (lib "test-engine/test-engine.rkt") (lib "graphics/main.rkt") (lib "graphics/private/value-turtles-wxme.rkt") (lib "htdp/arrow.rkt") (lib "stepper/private/reconstruct.rkt") (lib "lang/private/rewrite-error-message.rkt") (lib "2htdp/planetcute/gem-blue.rkt") (lib "stepper/private/macro-unwind.rkt") (lib "xml/text-box-tool.rkt") (lib "teachpack/htdp/guess-gui.rkt") (lib "2htdp/private/world.rkt") (lib "graphics/graphics-sig.rkt") (lib "htdp/draw-sig.rkt") (lib "htdp/master-play.rkt") (lib "teachpack/2htdp/itunes.rkt") (lib "lang/private/firstorder.rkt") (lib "teachpack/2htdp/image.rkt") (lib "graphics/graphics-posn-less-unit.rkt") (lib "stepper/private/my-macros.rkt") (lib "htdp/docs.rkt") (lib "lang/private/tp-dialog.rkt") (lib "stepper/private/shared-typed.rkt") (lib "teachpack/2htdp/abstraction.rkt") (lib "2htdp/web-io.rkt") (lib "2htdp/planetcute/character-princess-girl.rkt") (lib "lang/private/signature-syntax.rkt") (lib "teachpack/htdp/gui.rkt") (lib "typed/test-engine/racket-tests.rkt") (lib "test-engine/test-markup.rkt") (lib "teachpack/world.rkt") (lib "teachpack/htdp/guess.rkt") (lib "2htdp/private/clauses-spec-aux.rkt") (lib "htdp/error.rkt") (lib "2htdp/private/utilities.rkt") (lib "htdp/matrix-render-sig.rkt") (lib "lang/private/continuation-mark-key.rkt") (lib "teachpack/turtles.rkt") (lib "2htdp/planetcute/ramp-west.rkt") (lib "2htdp/planetcute/key.rkt") (lib "2htdp/planetcute/stone-block-tall.rkt") (lib "2htdp/uchat/server.rkt") (lib "lang/test-error.rkt") (lib "teachpack/htdp/dir.rkt") (lib "2htdp/planetcute/ramp-east.rkt") (lib "htdp/isl+/lang/reader.rkt") (lib "htdp/servlet2.rkt") (lib "graphics/value-turtles-examples.rkt") (lib "2htdp/planetcute/chest-lid.rkt") (lib "htdp/hangman-play.rkt") (lib "lang/run-teaching-program.rkt") (lib "2htdp/planetcute/rock.rkt") (lib "2htdp/private/universe.rkt") (lib "htdp/show-queen.rkt") (lib "2htdp/planetcute.rkt") (lib "teachpack/2htdp/scribblings/img-eval.rkt") (lib "stepper/private/annotate.rkt") (lib "teachpack/htdp/elevator.rkt") (lib "2htdp/planetcute/tree-short.rkt") (lib "2htdp/universe.rkt") (lib "2htdp/planetcute/speech-bubble.rkt") (lib "htdp/bsl/reader.rkt") (lib "stepper/command-line-debugger-example.rkt") (lib "lang/htdp-langs-save-file-prefix.rkt") (lib "lang/private/set-result.rkt") (lib "test-engine/syntax.rkt") (lib "2htdp/planetcute/door-tall-closed.rkt") (lib "htdp/hangman.rkt") (lib "lang/r5rs.rkt") (lib "lang/private/teachhelp.rkt") (lib "2htdp/private/planetcute-image-list.rkt") (lib "xml/xml-snipclass.rkt") (lib "lang/private/create-htdp-executable.rkt") (lib "htdp/master.rkt") (lib "2htdp/planetcute/enemy-bug.rkt") (lib "stepper/private/model-settings.rkt") (lib "htdp/isl/lang/reader.rkt") (lib "graphics/turtles.rkt") (lib "teachpack/2htdp/batch-io.rkt") (lib "lang/private/provide-and-scribble.rkt") (lib "graphics/graphics.rkt") (lib "2htdp/planetcute/character-boy.rkt") (lib "2htdp/private/image-more.rkt") (lib "htdp/bsl/print-width.rkt") (lib "stepper/examples/external-interface-example.rkt") (lib "2htdp/itunes.rkt") (lib "2htdp/planetcute/grass-block.rkt") (lib "teachpack/htdp/graphing.rkt") (lib "lang/plt-pretty-big.rkt") (lib "2htdp/private/csv/csv.rkt") (lib "teachpack/htdp/convert.rkt") (lib "teachpack/htdp/image.rkt") (lib "2htdp/private/pad.rkt") (lib "htdp/bsl+/lang/reader.rkt") (lib "htdp/bsl/runtime.rkt") (lib "lang/htdp-intermediate.rkt") (lib "lang/private/teach.rkt") (lib "test-engine/racket-tests.rkt") (lib "2htdp/planetcute/shadow-east.rkt") (lib "test-engine/scheme-tests.rkt") (lib "teachpack/htdp/docs.rkt") (lib "stepper/private/lifting.rkt") (lib "2htdp/planetcute/wall-block-tall.rkt") (lib "2htdp/planetcute/plain-block.rkt") (lib "lang/htdp-beginner-reader.rkt") (lib "lang/htdp-beginner-abbr.rkt") (lib "teachpack/value-turtles.rkt") (lib "lang/htdp-advanced.rkt") (lib "lang/private/beginner-funs.rkt") (lib "htdp/elevator.rkt") (lib "2htdp/planetcute/window-tall.rkt") (lib "lang/htdp-intermediate-reader.rkt") (lib "lang/private/imageeq.rkt") (lib "teachpack/door.rkt") (lib "stepper/private/xml-sig.rkt") (lib "teachpack/htdp/master.rkt") (lib "htdp/big-draw.rkt") (lib "graphics/graphics-unit.rkt") (lib "teachpack/htdp/matrix.rkt") (lib "2htdp/batch-io.rkt") (lib "test-engine/markup-gui.rkt") (lib "stepper/xml-tool.rkt") (lib "2htdp/planetcute/roof-west.rkt") (lib "teachpack/htdp/lkup-gui.rkt") (lib "teachpack/2htdp/web-io.rkt") (lib "htdp/arrow-gui.rkt") (lib "2htdp/planetcute/gem-green.rkt") (lib "htdp/world.rkt") (lib "2htdp/private/check-aux.rkt") (lib "stepper/private/beginner-defined.rkt") (lib "htdp/dir.rkt") (lib "teachpack/server.rkt") (lib "lang/posn.rkt") (lib "2htdp/planetcute/gem-orange.rkt") (lib "2htdp/planetcute/wood-block.rkt"))) (name . "htdp-lib") (ring . 0) (search-terms . #hasheq((author:matthias@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "bbd7333a13c96ab7a0bb5fd3e6580f0698386270") (source . "git://github.com/racket/htdp/?path=htdp-lib") (source_url . "git://github.com/racket/htdp/?path=htdp-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("htdp-test" . #hash((author . "matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org") (authors . ("matthias@racket-lang.org" "mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "htdp-lib" "lazy" "deinprogramm" "pict-lib" "redex-lib" "racket-index" "scheme-lib" "srfi-lite-lib" "compatibility-lib" "gui-lib" "racket-test" "rackunit-lib" "profile-lib" "wxme-lib" "pconvert-lib" "at-exp-lib" "drracket-tool-lib")) (description . "tests for htdp") (implies . ()) (last-checked . 1632903397) (last-edit . 1417659583) (last-updated . 1630379787) (modules . ((lib "2htdp/tests/lauch-many-worlds-proc.rkt") (lib "tests/test-engine/check-satisfied6.rkt") (lib "tests/test-engine/check-satisfied9.rkt") (lib "2htdp/tests/error-in-tick.rkt") (lib "2htdp/tests/jpr-bug.rkt") (lib "tests/htdp-lang/test-htdp.rkt") (lib "2htdp/tests/on-tick-universe-with-limit.rkt") (lib "htdp/tests/arrow-gui.rkt") (lib "2htdp/tests/on-tick-with-limit.rkt") (lib "tests/stepper/find-tag-test.rkt") (lib "2htdp/tests/world-dies-while-receiving.rkt") (lib "2htdp/tests/two-universes-running.rkt") (lib "2htdp/tests/mouse-evt.rkt") (lib "htdp/tests/lkup-gui.rkt") (lib "tests/test-engine/check-satisfied1.rkt") (lib "2htdp/tests/universe-receive.rkt") (lib "tests/test-engine/TestEngineTest.rkt") (lib "htdp/tests/convert.rkt") (lib "2htdp/tests/on-release-no-key.rkt") (lib "htdp/tests/guess3.rkt") (lib "2htdp/tests/full-test.rkt") (lib "tests/test-engine/check-failed-bsl.rkt") (lib "2htdp/tests/image-equality-performance-htdp.rkt") (lib "2htdp/tests/batch-io3.rkt") (lib "tests/stepper/test-engine.rkt") (lib "2htdp/tests/stop-when-error.rkt") (lib "2htdp/tests/universe-restart.rkt") (lib "2htdp/utest/balls.rkt") (lib "2htdp/tests/web-io-manual.rkt") (lib "htdp/tests/guess1.rkt") (lib "tests/test-engine/check-satisfied8.rkt") (lib "2htdp/tests/pad1-handler.rkt") (lib "htdp/tests/world-add-line.rkt") (lib "2htdp/tests/ufo-rename.rkt") (lib "tests/htdp-lang/prim.rkt") (lib "2htdp/tests/mp.rkt") (lib "tests/xml/xml-snip-bug.rkt") (lib "2htdp/tests/bitmap-as-image-in-universe.rkt") (lib "2htdp/utest/sam.rkt") (lib "tests/test-engine/check-error-message.rkt") (lib "2htdp/tests/batch-io.rkt") (lib "2htdp/tests/check-with-test.rkt") (lib "tests/test-engine/check-expect.rkt") (lib "2htdp/tests/test-image.rkt") (lib "tests/test-engine/check-satisfied5.rkt") (lib "2htdp/tests/key-error.rkt") (lib "tests/stepper/jump-to-ui-test.rkt") (lib "htdp/tests/value-turtles.rkt") (lib "htdp/tests/convert-drracket-error.rkt") (lib "2htdp/tests/bad-draw.rkt") (lib "2htdp/tests/planetcute-runs.rkt") (lib "2htdp/tests/batch-io2.rkt") (lib "htdp/tests/guess2.rkt") (lib "2htdp/tests/abstraction-use.rkt") (lib "tests/stepper/test-abbrev.rkt") (lib "2htdp/tests/full-scene-visible.rkt") (lib "tests/stepper/test-cases.rkt") (lib "2htdp/tests/two-ports.rkt") (lib "tests/stepper/big-bang-test.rkt") (lib "2htdp/tests/error-to-draw.rkt") (lib "tests/htdp-lang/test-image.rkt") (lib "2htdp/tests/full-test-width-height.rkt") (lib "htdp/tests/dir.rkt") (lib "tests/test-engine/at-top-level.rkt") (lib "tests/test-engine/check-satisfied.rkt") (lib "2htdp/tests/perform-robby.rkt") (lib "2htdp/tests/struct-universe.rkt") (lib "tests/htdp-lang/syntax.rkt") (lib "htdp/tests/tester.rkt") (lib "tests/htdp-lang/pr/12117.rkt") (lib "tests/stepper/automatic-tests.rkt") (lib "2htdp/tests/image-equality-performance.rkt") (lib "2htdp/tests/profile-robby.rkt") (lib "tests/stepper/annotation.rkt") (lib "2htdp/tests/perform-whack.rkt") (lib "2htdp/tests/error-in-draw.rkt") (lib "2htdp/tests/run-movie.rkt") (lib "2htdp/tests/test-docs-complete.rkt") (lib "htdp/tests/hangman1.rkt") (lib "htdp/tests/test-docs-complete.rkt") (lib "2htdp/tests/name.rkt") (lib "htdp/tests/gui.rkt") (lib "2htdp/tests/stop-when-crash.rkt") (lib "2htdp/tests/world0-stops.rkt") (lib "2htdp/tests/record.rkt") (lib "tests/test-engine/signature-asl.rkt") (lib "tests/test-engine/check-satisfied7.rkt") (lib "tests/htdp-lang/signatures.rkt") (lib "htdp/tests/elevator.rkt") (lib "2htdp/tests/image-too-large.rkt") (lib "htdp/tests/dir-aux.rkt") (lib "2htdp/tests/server-rename.rkt") (lib "tests/test-engine/racket-tests.rkt") (lib "tests/test-engine/check-ordered.rkt") (lib "2htdp/tests/stop-when-not-boolean.rkt") (lib "2htdp/tests/random-seed-works.rkt") (lib "htdp/tests/matrix-client.rkt") (lib "tests/test-engine/check-failed-isl.rkt") (lib "2htdp/tests/error-messages.rkt") (lib "2htdp/tests/stop-when-bad-draw.rkt") (lib "tests/test-engine/check-satisfied3.rkt") (lib "2htdp/tests/record-stop-when.rkt") (lib "2htdp/tests/web-io-automatic.rkt") (lib "htdp/tests/world.rkt") (lib "tests/test-engine/check-satisfied4.rkt") (lib "tests/stepper/through-tests.rkt") (lib "2htdp/tests/perform-record.rkt") (lib "2htdp/tests/batch-io-xexpr.rkt") (lib "2htdp/tests/on-tick-defined.rkt") (lib "2htdp/tests/clause-once.rkt") (lib "2htdp/tests/pad1.rkt") (lib "tests/stepper/run-manual-tests.rkt") (lib "2htdp/tests/abstraction-errors.rkt") (lib "htdp/tests/draw.rkt") (lib "2htdp/tests/universe-disappearing.rkt") (lib "tests/stepper/language-level-model.rkt") (lib "htdp/tests/graphing.rkt") (lib "tests/stepper/annotation-helper.rkt") (lib "2htdp/tests/close-on-stop.rkt") (lib "2htdp/tests/to-draw-error.rkt") (lib "2htdp/utest/shared.rkt") (lib "htdp/tests/docs.rkt") (lib "tests/test-engine/check-satisfied2.rkt") (lib "2htdp/tests/release.rkt") (lib "2htdp/tests/test-aux.rkt") (lib "htdp/tests/world-mouse.rkt") (lib "tests/htdp-lang/arrow-tests.rkt") (lib "2htdp/tests/batch-io-csv-ho.rkt") (lib "2htdp/tests/stop.rkt") (lib "2htdp/tests/proper-hiilite-in-hash-lang.rkt") (lib "htdp/tests/matrix-test.rkt") (lib "2htdp/tests/pad1-in-bsl.rkt") (lib "htdp/tests/matrix-client-racket.rkt") (lib "htdp/tests/arrow.rkt") (lib "htdp/tests/master.rkt") (lib "htdp/tests/hangman-error.rkt") (lib "htdp/tests/matrix-example.rkt"))) (name . "htdp-test") (ring . 0) (search-terms . #hasheq((author:matthias@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "bbd7333a13c96ab7a0bb5fd3e6580f0698386270") (source . "git://github.com/racket/htdp/?path=htdp-test") (source_url . "git://github.com/racket/htdp/?path=htdp-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("htdp-trace" . #hasheq((author . "djholtby@uwaterloo.ca") (authors . ("djholtby@uwaterloo.ca")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "htdp-trace" "doc/htdp-trace@htdp-trace/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/htdp-trace.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/htdp-trace.txt"))) (checksum . "affae0e2e5317ed2bde06ba83cb83e833f7b8106") (checksum-error . #f) (collection . "htdp-trace") (conflicts . ()) (date-added . 1605545342) (dependencies . ("base" "sandbox-lib" "scribble-lib" "racket-doc")) (description . "Wrapper for racket/trace that allows it to be used in HtDP Languages like Beginning Student, where functions cannot be used as first class values.") (implies . ()) (last-checked . 1632903397) (last-edit . 1631540991) (last-updated . 1631288337) (modules . ((lib "htdp-trace/scribblings/htdp-trace.scrbl") (lib "htdp-trace/main.rkt"))) (name . "htdp-trace") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:djholtby@uwaterloo.ca . #t) (htdp . #t) (ring:1 . #t) (traces . #t))) (source . "https://git.uwaterloo.ca/djholtby/uwaterloo-racket.git?path=htdp-trace") (tags . ("htdp" "traces")) (versions . #hash((default . #hasheq((checksum . "affae0e2e5317ed2bde06ba83cb83e833f7b8106") (source . "https://git.uwaterloo.ca/djholtby/uwaterloo-racket.git?path=htdp-trace") (source_url . "https://git.uwaterloo.ca/djholtby/uwaterloo-racket.git?path=htdp-trace"))))))) ("html" . #hash((author . "jay@racket-lang.org mflatt@racket-lang.org") (authors . ("jay@racket-lang.org" "mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("html-lib" "html-doc")) (description . "HTML parsing and generation") (implies . ("html-lib" "html-doc")) (last-checked . 1632903397) (last-edit . 1417659583) (last-updated . 1571880014) (modules . ()) (name . "html") (ring . 0) (search-terms . #hasheq((author:jay@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "537e635fda6138c13475926355c2fd40fe69cabd") (source . "git://github.com/racket/html/?path=html") (source_url . "git://github.com/racket/html/?path=html"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("html-doc" . #hash((author . "jay@racket-lang.org mflatt@racket-lang.org") (authors . ("jay@racket-lang.org" "mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "html" "doc/html@html-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "html-lib" "racket-doc")) (description . "documentation part of html") (implies . ()) (last-checked . 1632903398) (last-edit . 1417659583) (last-updated . 1571880015) (modules . ((lib "html/html.scrbl"))) (name . "html-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:jay@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "537e635fda6138c13475926355c2fd40fe69cabd") (source . "git://github.com/racket/html/?path=html-doc") (source_url . "git://github.com/racket/html/?path=html-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("html-examples" . #hasheq((author . "pmatos@linki.tools") (authors . ("pmatos@linki.tools")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/html-examples.txt") (docs . (("main" "html-examples" "doc/html-examples@html-examples/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/html-examples.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/html-examples.txt"))) (checksum . "d2982629acdfb103d0b7f82bc337ee1d973a9efb") (checksum-error . #f) (collection . "html-examples") (conflicts . ()) (date-added . 1590907129) (dependencies . ("txexpr" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Generate an HTML part out of Scribble Examples") (implies . ()) (last-checked . 1632903398) (last-edit . 1590907129) (last-updated . 1596547987) (modules . ((lib "html-examples/scribblings/html-examples.scrbl") (lib "html-examples/main.rkt"))) (name . "html-examples") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:pmatos@linki.tools . #t) (examples . #t) (html . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/pmatos/html-examples.git") (tags . ("examples" "html" "scribble")) (versions . #hash((default . #hasheq((checksum . "d2982629acdfb103d0b7f82bc337ee1d973a9efb") (source . "https://github.com/pmatos/html-examples.git") (source_url . "https://github.com/pmatos/html-examples.git"))))))) ("html-lib" . #hash((author . "jay@racket-lang.org mflatt@racket-lang.org") (authors . ("jay@racket-lang.org" "mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "implementation (no documentation) part of html") (implies . ()) (last-checked . 1632903398) (last-edit . 1417659583) (last-updated . 1571880015) (modules . ((lib "html/html-spec.rkt") (lib "html/main.rkt") (lib "html/sgml-reader.rkt") (lib "html/html.rkt") (lib "html/html-structs.rkt"))) (name . "html-lib") (ring . 0) (search-terms . #hasheq((author:jay@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "537e635fda6138c13475926355c2fd40fe69cabd") (source . "git://github.com/racket/html/?path=html-lib") (source_url . "git://github.com/racket/html/?path=html-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("html-parsing" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "html-parsing" "doc/html-parsing@html-parsing/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/html-parsing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/html-parsing.txt"))) (checksum . "948da802f479758bbc3ddcda446c0243f1a65fe7") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Permissive Parsing of HTML to SXML") (implies . ()) (last-checked . 1632903398) (last-edit . 1456770495) (last-updated . 1601439654) (modules . ((lib "html-parsing/html-parsing.scrbl") (lib "html-parsing/main.rkt"))) (name . "html-parsing") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (html . #t) (ring:1 . #t) (sxml . #t) (web . #t))) (source . "http://www.neilvandyke.org/racket/html-parsing.zip") (tags . ("html" "sxml" "web")) (versions . #hash((default . #hasheq((checksum . "948da802f479758bbc3ddcda446c0243f1a65fe7") (source . "http://www.neilvandyke.org/racket/html-parsing.zip") (source_url . "http://www.neilvandyke.org/racket/html-parsing.zip"))))))) ("html-template" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "html-template" "doc/html-template@html-template/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/html-template.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/html-template.txt"))) (checksum . "9a51d5dda4dffd81cc9f3e2d7d971c808d4ad2c0") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "html-writing" "racket-doc" "scribble-lib" "overeasy")) (description . "HTML-Writing Template Language in SXML") (implies . ()) (last-checked . 1632903400) (last-edit . 1456718098) (last-updated . 1601439717) (modules . ((lib "html-template/html-template-parse.rkt") (lib "html-template/test-html-template.rkt") (lib "html-template/html-template-generate.rkt") (lib "html-template/html-template.scrbl") (lib "html-template/main.rkt") (lib "html-template/html-template.rkt") (lib "html-template/html-template-generate-helpers.rkt"))) (name . "html-template") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (html . #t) (ring:1 . #t) (sxml . #t) (web . #t))) (source . "http://www.neilvandyke.org/racket/html-template.zip") (tags . ("html" "sxml" "web")) (versions . #hash((default . #hasheq((checksum . "9a51d5dda4dffd81cc9f3e2d7d971c808d4ad2c0") (source . "http://www.neilvandyke.org/racket/html-template.zip") (source_url . "http://www.neilvandyke.org/racket/html-template.zip"))))))) ("html-test" . #hash((author . "jay@racket-lang.org mflatt@racket-lang.org") (authors . ("jay@racket-lang.org" "mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("racket-index" "base" "html-lib" "rackunit-lib")) (description . "tests for html") (implies . ()) (last-checked . 1632903401) (last-edit . 1417659583) (last-updated . 1571880017) (modules . ((lib "tests/html/test-docs-complete.rkt") (lib "tests/html/test.rkt"))) (name . "html-test") (ring . 0) (search-terms . #hasheq((author:jay@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "537e635fda6138c13475926355c2fd40fe69cabd") (source . "git://github.com/racket/html/?path=html-test") (source_url . "git://github.com/racket/html/?path=html-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("html-writing" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "html-writing" "doc/html-writing@html-writing/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/html-writing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/html-writing.txt"))) (checksum . "d0e12121d24dc7f1aebbac048bae09fa1f6507b6") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Writing HTML from SXML") (implies . ()) (last-checked . 1632903401) (last-edit . 1456770509) (last-updated . 1601439781) (modules . ((lib "html-writing/html-writing.scrbl") (lib "html-writing/main.rkt"))) (name . "html-writing") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (html . #t) (ring:1 . #t) (sxml . #t) (web . #t))) (source . "http://www.neilvandyke.org/racket/html-writing.zip") (tags . ("html" "sxml" "web")) (versions . #hash((default . #hasheq((checksum . "d0e12121d24dc7f1aebbac048bae09fa1f6507b6") (source . "http://www.neilvandyke.org/racket/html-writing.zip") (source_url . "http://www.neilvandyke.org/racket/html-writing.zip"))))))) ("html5-lang" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "vr-lang"))) (failure-log . "server/built/fail/html5-lang.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ae39387ef2dfd6b7df630940e1d338e854c10de8") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("hostname" "simple-qr" "urlang")) (description . "Educational language for making simple HTML5, mobile-friendly web apps.") (implies . ()) (last-checked . 1632903402) (last-edit . 1529348272) (last-updated . 1530916995) (modules . ((lib "html5-lang/demos/demo1/testvr.rkt") (lib "html5-lang/styles.rkt") (lib "html5-lang/demos/remote-component-demo4/vr-star-system-demo4.rkt") (lib "html5-lang/html5-lang.rkt") (lib "html5-lang/demos/remote-component-demo3/remote-component-demo3.rkt") (lib "html5-lang/main.rkt") (lib "html5-lang/demos/hello-world/vr-hello-world.rkt") (lib "html5-lang/demos/remote-component-demo2/vr-star-system-demo2.rkt") (lib "html5-lang/my-ip-qr.rkt") (lib "html5-lang/demos/hello-world3/vr-hello-world3.rkt") (lib "html5-lang/demos/remote-component-demo5/vr-star-system-demo.rkt") (lib "html5-lang/demos/hello-world2/vr-hello-world2.rkt") (lib "html5-lang/demos/remote-component-demo/vr-star-system-demo.rkt") (lib "html5-lang/templates.rkt") (lib "html5-lang/test.rkt"))) (name . "html5-lang") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/html5-lang.git?path=html5-lang") (tags . ()) (versions . #hash((default . #hasheq((checksum . "ae39387ef2dfd6b7df630940e1d338e854c10de8") (source . "https://github.com/thoughtstem/html5-lang.git?path=html5-lang") (source_url . "https://github.com/thoughtstem/html5-lang.git?path=html5-lang"))))))) ("http" . #hasheq((author . "racket@greghendershott.com") (authors . ("racket@greghendershott.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "http" "doc/http@http/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/http.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/http.txt"))) (checksum . "bf006350fbbbf6f0d3297200fd607ecd2a2ddef1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.2") "html-lib" "rackunit-lib" "net-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Support for HTTP 1.1 including automatic connection pooling.") (implies . ()) (last-checked . 1632903406) (last-edit . 1504135191) (last-updated . 1613491592) (modules . ((lib "http/main.rkt") (lib "http/head.rkt") (lib "http/request.rkt") (lib "http/http.scrbl") (lib "http/util.rkt"))) (name . "http") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@greghendershott.com . #t) (http . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/greghendershott/http") (tags . ("http" "net" "web")) (versions . #hash((default . #hasheq((checksum . "bf006350fbbbf6f0d3297200fd607ecd2a2ddef1") (source . "git://github.com/greghendershott/http") (source_url . "http://github.com/greghendershott/http/tree/master"))))))) ("http-client" . #hasheq((author . "yanyingwang1@gmail.com") (authors . ("yanyingwang1@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "http-client" "doc/http-client@http-client/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/http-client.txt") (test-failure-log . "server/built/test-fail/http-client.txt") (test-success-log . #f))) (checksum . "183207563adbf371cab073d8ed46bb95d7e972c6") (checksum-error . #f) (collection . "http-client") (conflicts . ()) (date-added . 1599202172) (dependencies . ("base" "html-parsing" "at-exp-lib" "scribble-lib" "racket-doc" "rackunit-lib" "scribble-rainbow-delimiters")) (description . "A practical http client library for sending data to http servers.") (implies . ()) (last-checked . 1632903407) (last-edit . 1621954773) (last-updated . 1623143954) (modules . ((lib "http-client/private/utils.rkt") (lib "http-client/private/core.rkt") (lib "http-client/scribblings/http-client.scrbl") (lib "http-client/main.rkt") (lib "http-client/private/params.rkt"))) (name . "http-client") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:yanyingwang1@gmail.com . #t) (client . #t) (http . #t) (ring:1 . #t))) (source . "https://github.com/yanyingwang/http-client.git") (tags . ("client" "http")) (versions . #hash((default . #hasheq((checksum . "183207563adbf371cab073d8ed46bb95d7e972c6") (source . "https://github.com/yanyingwang/http-client.git") (source_url . "https://github.com/yanyingwang/http-client.git"))))))) ("http-easy" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "http-easy" "doc/http-easy@http-easy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/http-easy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/http-easy.txt"))) (checksum . "9e126b618c346fd91e096073e59c8ec35faadc23") (checksum-error . #f) (collection . "net") (conflicts . ()) (date-added . 1591628489) (dependencies . ("base" "memoize" "net-cookies-lib" ("resource-pool-lib" #:version "0.1") "unix-socket-lib" "net-cookies-doc" "net-doc" "racket-doc" "sandbox-lib" "scribble-lib")) (description . "A high-level HTTP client.") (implies . ()) (last-checked . 1632903407) (last-edit . 1591628489) (last-updated . 1627913628) (modules . ((lib "net/http-easy/private/pool.rkt") (lib "net/http-easy/private/timeout.rkt") (lib "net/http-easy.scrbl") (lib "net/http-easy/private/auth.rkt") (lib "net/http-easy/private/error.rkt") (lib "net/http-easy/private/proxy.rkt") (lib "net/http-easy/private/payload.rkt") (lib "net/http-easy/private/response.rkt") (lib "net/http-easy.rkt") (lib "net/http-easy/private/session.rkt") (lib "net/http-easy/private/user-agent.rkt") (lib "net/http-easy/private/contract.rkt") (lib "net/http-easy/private/reflect.rkt") (lib "net/http-easy/private/url.rkt") (lib "net/http-easy/private/logger.rkt") (lib "net/http-easy/private/common.rkt"))) (name . "http-easy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (client . #t) (http . #t) (https . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-http-easy.git?path=http-easy") (tags . ("client" "http" "https")) (versions . #hash((default . #hasheq((checksum . "9e126b618c346fd91e096073e59c8ec35faadc23") (source . "https://github.com/Bogdanp/racket-http-easy.git?path=http-easy") (source_url . "https://github.com/Bogdanp/racket-http-easy.git?path=http-easy"))))))) ("http-easy-test" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/http-easy-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/http-easy-test.txt"))) (checksum . "9e126b618c346fd91e096073e59c8ec35faadc23") (checksum-error . #f) (collection . "tests") (conflicts . ()) (date-added . 1591628548) (dependencies . ("base" "http-easy" "net-cookies-lib" "rackunit-lib" ("resource-pool-lib" #:version "0.1") "web-server-lib")) (description . "A high-level HTTP client. (tests only)") (implies . ()) (last-checked . 1632903407) (last-edit . 1591628548) (last-updated . 1627913628) (modules . ((lib "tests/net/http-easy/private/url.rkt") (lib "tests/net/http-easy/private/pool.rkt") (lib "tests/net/http-easy/private/payload.rkt") (lib "tests/net/http-easy/private/response.rkt") (lib "tests/net/http-easy/private/common.rkt") (lib "tests/net/http-easy/http-easy.rkt"))) (name . "http-easy-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (client . #t) (http . #t) (https . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-http-easy.git?path=http-easy-test") (tags . ("client" "http" "https")) (versions . #hash((default . #hasheq((checksum . "9e126b618c346fd91e096073e59c8ec35faadc23") (source . "https://github.com/Bogdanp/racket-http-easy.git?path=http-easy-test") (source_url . "https://github.com/Bogdanp/racket-http-easy.git?path=http-easy-test"))))))) ("http11" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "http11" "doc/http11@http11/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/http11.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/http11.txt"))) (checksum . "5d9a2f182168c01ca366cdd45c7bcf78cf8037be") (checksum-error . #f) (collection . "http11") (conflicts . ()) (dependencies . ("uri" "date" "opt" "string-util" "typed-racket-more" "typed-racket-lib" "base" "scribble-lib" "typed-racket-lib" "typed-racket-more" "racket-doc" "rackunit-lib")) (description . "HTTP v1.1  low level protocol library in Typed Racket.") (implies . ()) (last-checked . 1632903407) (last-edit . 1528480830) (last-updated . 1620468872) (modules . ((lib "http11/http/param.rkt") (lib "http11/http/encoding.rkt") (lib "http11/http/header.rkt") (lib "http11/main.rkt") (lib "http11/http/proxy.rkt") (lib "http11/http/heading.rkt") (lib "http11/http/cookie.rkt") (lib "http11/http/encode.rkt") (lib "http11/scribblings/http11.scrbl") (lib "http11/http/mimetype.rkt") (lib "http11/http/parse.rkt") (lib "http11/http/mimetype-const.rkt"))) (name . "http11") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (http . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/http11.git") (tags . ("http")) (versions . #hash((default . #hasheq((checksum . "5d9a2f182168c01ca366cdd45c7bcf78cf8037be") (source . "https://gitlab.com/RayRacine/http11.git") (source_url . "https://gitlab.com/RayRacine/http11.git"))))))) ("http11-server" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "http11-server" "doc/http11-server@http11-server/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/http11-server.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/http11-server.txt"))) (checksum . "f45e745600995225fb492adc86bc31597b6b9b3d") (checksum-error . #f) (collection . "http11-server") (conflicts . ()) (dependencies . ("http11" "string-util" "uri" "base" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc" "rackunit-lib" "typed-racket-lib" "typed-racket-more")) (description . "Minimal low level routines in Typed Racket sufficient to handle a RPC/API HTTP(S) endpoint server.  It is NOT a full blown HTTP Content Server.  Simple endpoint server.") (implies . ()) (last-checked . 1632903407) (last-edit . 1537641673) (last-updated . 1620468872) (modules . ((lib "http11-server/main.rkt") (lib "http11-server/scribblings/http11-server.scrbl") (lib "http11-server/endpoint.rkt") (lib "http11-server/types.rkt"))) (name . "http11-server") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (endpoint . #t) (http . #t) (https . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/http11-server.git") (tags . ("endpoint" "http" "https")) (versions . #hash((default . #hasheq((checksum . "f45e745600995225fb492adc86bc31597b6b9b3d") (source . "https://gitlab.com/RayRacine/http11-server.git") (source_url . "https://gitlab.com/RayRacine/http11-server.git"))))))) ("http123" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "http123" "doc/http123@http123/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/http123.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/http123.txt"))) (checksum . "8dc1e79f3788994ac6866c3c5e53b6ccb95887f2") (checksum-error . #f) (collection . "http123") (conflicts . ()) (date-added . 1626950834) (dependencies . ("base" "http123-lib" "racket-doc" "rackunit-lib" "scribble-lib" "net-doc" "net-cookies-lib" "net-cookies-doc" "web-server-lib")) (description . "HTTP client with support for HTTP/1.1 and HTTP/2.") (implies . ("http123-lib")) (last-checked . 1632903408) (last-edit . 1626950991) (last-updated . 1626950991) (modules . ((lib "http123/scribblings/internal.scrbl") (lib "http123/scribblings/util.scrbl") (lib "http123/scribblings/header.scrbl") (lib "http123/tests/web-server.rkt") (lib "http123/scribblings/exn.scrbl") (lib "http123/scribblings/notes.scrbl") (lib "http123/tests/test11.rkt") (lib "http123/scribblings/http123.scrbl") (lib "http123/scribblings/util.rkt") (lib "http123/scribblings/client-api.scrbl") (lib "http123/tests/test2.rkt") (lib "http123/scribblings/request.scrbl") (lib "http123/tests/test-web.rkt") (lib "http123/scribblings/intro.scrbl") (lib "http123/tests/test.rkt") (lib "http123/scribblings/response.scrbl"))) (name . "http123") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (http . #t) (http2 . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-http123.git?path=http123") (tags . ("http" "http2" "net")) (versions . #hash((default . #hasheq((checksum . "8dc1e79f3788994ac6866c3c5e53b6ccb95887f2") (source . "https://github.com/rmculpepper/racket-http123.git?path=http123") (source_url . "https://github.com/rmculpepper/racket-http123.git?path=http123"))))))) ("http123-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/http123-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/http123-lib.txt"))) (checksum . "8dc1e79f3788994ac6866c3c5e53b6ccb95887f2") (checksum-error . #f) (collection . "http123") (conflicts . ()) (date-added . 1626950771) (dependencies . ("base" "binaryio-lib" "scramble-lib" "net-cookies-lib" "rackunit-lib")) (description . "HTTP client with support for HTTP/1.1 and HTTP/2.") (implies . ()) (last-checked . 1632903408) (last-edit . 1626950967) (last-updated . 1626950967) (modules . ((lib "http123/private/h2-frame.rkt") (lib "http123/util/request.rkt") (lib "http123/private/http11.rkt") (lib "http123/private/hpack.rkt") (lib "http123/util/header.rkt") (lib "http123/private/request.rkt") (lib "http123/private/header.rkt") (lib "http123/private/regexp.rkt") (lib "http123/main.rkt") (lib "http123/util/url.rkt") (lib "http123/private/response.rkt") (lib "http123/internal.rkt") (lib "http123/private/header-base.rkt") (lib "http123/private/interfaces.rkt") (lib "http123/private/h2-stream.rkt") (lib "http123/private/connection.rkt") (lib "http123/private/http2.rkt") (lib "http123/private/client.rkt") (lib "http123/private/util.rkt"))) (name . "http123-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (http . #t) (http2 . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-http123.git?path=http123-lib") (tags . ("http" "http2" "net")) (versions . #hash((default . #hasheq((checksum . "8dc1e79f3788994ac6866c3c5e53b6ccb95887f2") (source . "https://github.com/rmculpepper/racket-http123.git?path=http123-lib") (source_url . "https://github.com/rmculpepper/racket-http123.git?path=http123-lib"))))))) ("http2" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "http2" "doc/http2@http2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/http2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/http2.txt"))) (checksum . "aafdea48a4f1e6f8579531350aee3691f4060129") (checksum-error . #f) (collection . "http2") (conflicts . ()) (date-added . 1572144809) (dependencies . ("base" "rebellion" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A (wildly unimplemented) http2 client and server for Racket") (implies . ()) (last-checked . 1632903408) (last-edit . 1572144809) (last-updated . 1590882865) (modules . ((lib "http2/base.rkt") (lib "http2/main.scrbl") (lib "http2/main.rkt"))) (name . "http2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (http . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/http2.git") (tags . ("http")) (versions . #hash((default . #hasheq((checksum . "aafdea48a4f1e6f8579531350aee3691f4060129") (source . "https://github.com/jackfirth/http2.git") (source_url . "https://github.com/jackfirth/http2.git"))))))) ("hygienic-quote-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hygienic-quote" "doc/hygienic-quote@hygienic-quote-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hygienic-quote-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hygienic-quote-lang.txt"))) (checksum . "82963703d47bafd51c284067771f46ea410dc725") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "hygienic-reader-extension" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "hygienic versions of quote-like racket reader macros") (implies . ()) (last-checked . 1632903408) (last-edit . 1444966530) (last-updated . 1502816131) (modules . ((lib "hygienic-quote/lang/reader.rkt") (lib "hygienic-quote/reader.rkt") (lib "hygienic-quote/scribblings/hygienic-quote.scrbl") (lib "hygienic-quote/private/make-quote-proc.rkt") (lib "hygienic-quote/tests/test.rkt"))) (name . "hygienic-quote-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lang-extension . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/AlexKnauth/hygienic-quote-lang") (tags . ("lang-extension" "syntax")) (versions . #hash((default . #hasheq((checksum . "82963703d47bafd51c284067771f46ea410dc725") (source . "git://github.com/AlexKnauth/hygienic-quote-lang") (source_url . "http://github.com/AlexKnauth/hygienic-quote-lang/tree/master"))))))) ("hygienic-reader-extension" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hygienic-reader-extension" "doc/hygienic-reader-extension@hygienic-reader-extension/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hygienic-reader-extension.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hygienic-reader-extension.txt"))) (checksum . "e00ab648d34f7ea33abd5f9c8b372404bf64aa79") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "adding hygiene to racket reader extensions") (implies . ()) (last-checked . 1632903408) (last-edit . 1466174297) (last-updated . 1553738665) (modules . ((lib "hygienic-reader-extension/tests/hygienically-introduce-unhygienic-macro/test.rkt") (lib "lang-extension/meta-reader-util.rkt") (lib "hygienic-reader-extension/tests/hygienic-quote/test.rkt") (lib "lang-reader/syntax-module-reader/lang/reader.rkt") (lib "hygienic-reader-extension/tests/hygienic-quote/lang/reader.rkt") (lib "lang-reader/lang-reader.rkt") (lib "hygienic-reader-extension/extend-reader.rkt") (lib "hygienic-reader-extension/tests/hygienically-introduce-unhygienic-macro/lang/reader.rkt") (lib "lang-extension/lang-extension-lang.rkt") (lib "hygienic-reader-extension/tests/hygienic-quote/racket/lang/reader.rkt") (lib "lang-reader/lang/reader.rkt") (lib "lang-reader/lang-reader-lang.rkt") (lib "lang-extension/lang/reader.rkt") (lib "hygienic-reader-extension/scribblings/hygienic-reader-extension.scrbl") (lib "hygienic-reader-extension/tests/hygienic-quote/racket/test.rkt") (lib "lang-reader/syntax-module-reader.rkt") (lib "hygienic-reader-extension/tests/hygienically-introduce-unhygienic-macro/unhygienic-macro.rkt"))) (name . "hygienic-reader-extension") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lang-extension . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/hygienic-reader-extension") (tags . ("lang-extension")) (versions . #hash((default . #hasheq((checksum . "e00ab648d34f7ea33abd5f9c8b372404bf64aa79") (source . "git://github.com/AlexKnauth/hygienic-reader-extension") (source_url . "http://github.com/AlexKnauth/hygienic-reader-extension/tree/master"))))))) ("hyper-literate" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "test2.hl" "doc/test2.hl@hyper-literate/index.html") ("main" "test.hl" "doc/test.hl@hyper-literate/index.html") ("main" "hyper-literate" "doc/hyper-literate@hyper-literate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hyper-literate.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hyper-literate.txt"))) (checksum . "24fd9ca7ca9b96e3072d37306dc79edf24ba4ef1") (checksum-error . #f) (collection . "hyper-literate") (conflicts . ()) (date-added . 1614799480) (dependencies . ("base" "rackunit-lib" "at-exp-lib" "scheme-lib" "scribble-lib" "typed-racket-lib" "typed-racket-more" "typed-racket-doc" "scribble-enhanced" "sexp-diff" "tr-immutable" "typed-map-lib" "debug-scopes" "syntax-color-lib" "scribble-lib" "racket-doc" "rackunit-doc" "scribble-doc" "rackunit-doc")) (description . "Some tools which help build hyper-literate programs. For now, this only contains a few changes from scribble/lp2, including support for typed/racket literate programs.") (implies . ()) (last-checked . 1632903409) (last-edit . 1614888899) (last-updated . 1617546888) (modules . ((lib "hyper-literate/private/common.rkt") (lib "hyper-literate/test/comments/same-syntax-typed.rkt") (lib "hyper-literate/comments/syntax-properties.rkt") (lib "hyper-literate/test/test.hl.rkt") (lib "hyper-literate/test/test-doc.rkt") (lib "hyper-literate/private/no-auto-require.rkt") (lib "hyper-literate/test/test2.hl.rkt") (lib "hyper-literate/comments/syntax-properties-typed.rkt") (lib "hyper-literate/spoiler1.rkt") (lib "hyper-literate/test/comments/annotate-syntax-typed.rkt") (lib "hyper-literate/test/comments/annotate-syntax.rkt") (lib "hyper-literate/test/comments/same-syntax.rkt") (lib "hyper-literate/comments/restore-comments.rkt") (lib "hyper-literate/lang.rkt") (lib "hyper-literate/comments/hide-comments.rkt") (lib "hyper-literate/diff1.rkt") (lib "hyper-literate/lang/first-line-utils.rkt") (lib "hyper-literate/comment-reader.rkt") (lib "hyper-literate/test/test-chunks-order.rkt") (lib "hyper-literate/comments/restore-comments-typed.rkt") (lib "hyper-literate/scribblings/diff1-example.hl.rkt") (lib "hyper-literate/main.rkt") (lib "hyper-literate/lang/reader.rkt") (lib "hyper-literate/scribblings/hyper-literate.scrbl") (lib "hyper-literate/comments/hide-comments-typed.rkt") (lib "hyper-literate/test/comments/test-comments-round-trip.rkt") (lib "hyper-literate/private/lp.rkt") (lib "hyper-literate/restore-comments.rkt") (lib "hyper-literate/lang/meta-first-line.rkt") (lib "hyper-literate/private/chunks-toc-prefix.rkt"))) (name . "hyper-literate") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (documentation . #t) (lang . #t) (language . #t) (literate-programming . #t) (ring:1 . #t))) (source . "https://github.com/jsmaniac/hyper-literate.git#main") (tags . ("documentation" "lang" "language" "literate-programming")) (versions . #hash(("6.7.0.4" . #hasheq((checksum . "ae152d4ab9058a77128cad7c7aab839b99f3f5d9") (source . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4") (source_url . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4"))) (default . #hasheq((checksum . "24fd9ca7ca9b96e3072d37306dc79edf24ba4ef1") (source . "https://github.com/jsmaniac/hyper-literate.git#main") (source_url . "https://github.com/jsmaniac/hyper-literate.git#main"))) ("6.2" . #hasheq((checksum . "ae152d4ab9058a77128cad7c7aab839b99f3f5d9") (source . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4") (source_url . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4"))) ("6.3" . #hasheq((checksum . "ae152d4ab9058a77128cad7c7aab839b99f3f5d9") (source . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4") (source_url . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4"))) ("6.0" . #hasheq((checksum . "ae152d4ab9058a77128cad7c7aab839b99f3f5d9") (source . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4") (source_url . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4"))) ("6.6" . #hasheq((checksum . "ae152d4ab9058a77128cad7c7aab839b99f3f5d9") (source . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4") (source_url . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4"))) ("6.7" . #hasheq((checksum . "ae152d4ab9058a77128cad7c7aab839b99f3f5d9") (source . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4") (source_url . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4"))) ("6.4" . #hasheq((checksum . "ae152d4ab9058a77128cad7c7aab839b99f3f5d9") (source . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4") (source_url . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4"))) ("6.5" . #hasheq((checksum . "ae152d4ab9058a77128cad7c7aab839b99f3f5d9") (source . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4") (source_url . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4"))) ("6.1" . #hasheq((checksum . "ae152d4ab9058a77128cad7c7aab839b99f3f5d9") (source . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4") (source_url . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4"))) ("6.1.1" . #hasheq((checksum . "ae152d4ab9058a77128cad7c7aab839b99f3f5d9") (source . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4") (source_url . "https://github.com/jsmaniac/hyper-literate.git#before-6.7.0.4"))))))) ("hyphenate" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "hyphenate" "doc/hyphenate@hyphenate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/hyphenate.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/hyphenate.txt"))) (checksum . "290616ddbf002776397c1f7aeb9b4068e01d54e1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" ("sugar" #:version "0.2") ("txexpr" #:version "0.2") "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Hyphenate X-expressions with the Knuth–Liang hyphenation algorithm") (implies . ()) (last-checked . 1632903411) (last-edit . 1392847109) (last-updated . 1622722107) (modules . ((lib "hyphenate/main.rkt") (lib "hyphenate/fr/patterns.rkt") (lib "hyphenate/us.rkt") (lib "hyphenate/private/exception-prep.rkt") (lib "hyphenate/private/core.rkt") (lib "hyphenate/fr/exceptions.rkt") (lib "hyphenate/fr.rkt") (lib "hyphenate/private/pattern-prep.rkt") (lib "hyphenate/private/bootstrap.rkt") (lib "hyphenate/us/exceptions.rkt") (lib "hyphenate/post-installer.rkt") (lib "hyphenate/tests.rkt") (lib "hyphenate/scribblings/hyphenate.scrbl") (lib "hyphenate/us/patterns.rkt"))) (name . "hyphenate") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t) (scribble . #t) (web . #t))) (source . "git://github.com/mbutterick/hyphenate") (tags . ("scribble" "web")) (versions . #hash((default . #hasheq((checksum . "290616ddbf002776397c1f7aeb9b4068e01d54e1") (source . "git://github.com/mbutterick/hyphenate") (source_url . "http://github.com/mbutterick/hyphenate/tree/master"))))))) ("icfp-2014-contracts-talk" . #hasheq((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/icfp-2014-contracts-talk.txt") (test-failure-log . "server/built/test-fail/icfp-2014-contracts-talk.txt") (test-success-log . #f))) (checksum . "e1df17f23d7cd4fbb4fa78c15d6eb3f79c576ddf") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("plot-lib" "base" "draw-lib" "gui-lib" "pict-lib" "plot-gui-lib" "rackunit-lib" "redex-gui-lib" "redex-lib" "slideshow-lib")) (description . "Slideshow implementation of ICFP 2014 Contracts Keynote Talk") (implies . ()) (last-checked . 1632903411) (last-edit . 1409943076) (last-updated . 1596547999) (modules . ((lib "icfp-2014-contracts-talk/takeaways.rkt") (lib "icfp-2014-contracts-talk/heap-slides.rkt") (lib "icfp-2014-contracts-talk/code-combine.rkt") (lib "icfp-2014-contracts-talk/counts/time-vs-contracts.rkt") (lib "icfp-2014-contracts-talk/boundary.rkt") (lib "icfp-2014-contracts-talk/random-generation.rkt") (lib "icfp-2014-contracts-talk/render-bytes.rkt") (lib "icfp-2014-contracts-talk/faces.rkt") (lib "icfp-2014-contracts-talk/main.rkt") (lib "icfp-2014-contracts-talk/function-machine.rkt") (lib "icfp-2014-contracts-talk/redex-typeset.rkt") (lib "icfp-2014-contracts-talk/util.rkt") (lib "icfp-2014-contracts-talk/intro.rkt") (lib "icfp-2014-contracts-talk/redex-model.rkt") (lib "icfp-2014-contracts-talk/title-lib.rkt") (lib "icfp-2014-contracts-talk/color.rkt") (lib "icfp-2014-contracts-talk/boundaries-not-projections.rkt") (lib "icfp-2014-contracts-talk/heap.rkt") (lib "icfp-2014-contracts-talk/dep.rkt") (lib "icfp-2014-contracts-talk/counts/contracts-vs-commits.rkt") (lib "icfp-2014-contracts-talk/title.rkt") (lib "icfp-2014-contracts-talk/equations.rkt") (lib "icfp-2014-contracts-talk/model-lib.rkt") (lib "icfp-2014-contracts-talk/talk.rkt"))) (name . "icfp-2014-contracts-talk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:robby@racket-lang.org . #t) (ring:1 . #t) (slideshow . #t))) (source . "git://github.com/rfindler/icfp-2014-contracts-talk") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "e1df17f23d7cd4fbb4fa78c15d6eb3f79c576ddf") (source . "git://github.com/rfindler/icfp-2014-contracts-talk") (source_url . "http://github.com/rfindler/icfp-2014-contracts-talk/tree/master"))))))) ("icfp2017-minikanren" . #hasheq((author . "alexander@knauth.org greg.weiqi@gmail.com") (authors . ("alexander@knauth.org" "greg.weiqi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/icfp2017-minikanren.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/icfp2017-minikanren.txt"))) (checksum . "ff9eca58487ec393fc2d8580e5d1aafedcd20808") (checksum-error . #f) (collection . "icfp2017-minikanren") (conflicts . ()) (date-added . 1629226458) (dependencies . (("base" #:version "6.3") "r6rs-lib")) (description . "A racket port of the version of minikanren from the artifact of the ICFP 2017 Pearl, A Unified Approach to Solving Seven Programming Problems by William E. Byrd, Michael Ballantyne, Gregory Rosenblatt, and Matthew Might. Includes evalo-optimized.") (implies . ()) (last-checked . 1632903412) (last-edit . 1629226458) (last-updated . 1596548000) (modules . ((lib "icfp2017-minikanren/mk/test-type-infer.rkt") (lib "icfp2017-minikanren/mk/test-all.rkt") (lib "icfp2017-minikanren/mk/test-quines.rkt") (lib "icfp2017-minikanren/intro-examples.rkt") (lib "icfp2017-minikanren/mk/test-arithmetic.rkt") (lib "icfp2017-minikanren/mk/type-infer.rkt") (lib "icfp2017-minikanren/mk/mk.rkt") (lib "icfp2017-minikanren/evalo-standard.rkt") (lib "icfp2017-minikanren/mk/test-check.rkt") (lib "icfp2017-minikanren/evalo-scoping.rkt") (lib "icfp2017-minikanren/racket-scheme-compat/specialized-scheme-compat.rkt") (lib "icfp2017-minikanren/evalo-small.rkt") (lib "icfp2017-minikanren/evalo-optimized.rkt") (lib "icfp2017-minikanren/mk/evalo.rkt") (lib "icfp2017-minikanren/mk/test-interp.rkt") (lib "icfp2017-minikanren/mk/arithmetic.rkt") (lib "icfp2017-minikanren/racket-scheme-compat/lang/reader.rkt"))) (name . "icfp2017-minikanren") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:greg.weiqi@gmail.com . #t) (logic . #t) (miniKanren . #t) (ring:1 . #t))) (source . "https://github.com/AlexKnauth/icfp2017-artifact-auas7pp.git?path=src#racket") (tags . ("logic" "miniKanren")) (versions . #hash((default . #hasheq((checksum . "ff9eca58487ec393fc2d8580e5d1aafedcd20808") (source . "https://github.com/AlexKnauth/icfp2017-artifact-auas7pp.git?path=src#racket") (source_url . "https://github.com/AlexKnauth/icfp2017-artifact-auas7pp.git?path=src#racket"))))))) ("icns" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "icns" "doc/icns@icns/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/icns.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/icns.txt"))) (checksum . "979cbc32e1d1e245f970e53c2098fbad0f538629") (checksum-error . #f) (collection . "icns") (conflicts . ()) (dependencies . ("base" "pict-lib" "scribble-lib" "racket-doc" "rackunit-lib" "pict-doc")) (description . "A Racket library for working with Apple's .icns icon file format.") (implies . ()) (last-checked . 1632903413) (last-edit . 1534465714) (last-updated . 1622182105) (modules . ((lib "icns/main.rkt") (lib "icns/scribblings/icns.scrbl"))) (name . "icns") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (graphics . #t) (images . #t) (pict . #t) (ring:1 . #t))) (source . "https://github.com/LiberalArtist/icns.git") (tags . ("graphics" "images" "pict")) (versions . #hash((default . #hasheq((checksum . "979cbc32e1d1e245f970e53c2098fbad0f538629") (source . "https://github.com/LiberalArtist/icns.git") (source_url . "https://github.com/LiberalArtist/icns.git"))))))) ("icons" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "icons") (conflicts . ()) (dependencies . ("base")) (description . "An assortment of images") (implies . ()) (last-checked . 1632903413) (last-edit . 1417659583) (last-updated . 1596548000) (modules . ()) (name . "icons") (ring . 0) (search-terms . #hasheq((author:ntoronto@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "aa359e8e25644b9f3290d873ea2fba1bd8159def") (source . "git://github.com/racket/icons") (source_url . "http://github.com/racket/icons/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("identikon" . #hasheq((author . "info@v25media.com") (authors . ("info@v25media.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "identikon" "doc/identikon@identikon/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/identikon.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/identikon.txt"))) (checksum . "d8908ee6955e69466270692599eb9076adc6a28b") (checksum-error . #f) (collection . "identikon") (conflicts . ()) (dependencies . ("draw-lib" "gui-lib" "base" "sugar" "css-tools" "htdp-lib" "quickcheck" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Tiny framework for generating identicons") (implies . ()) (last-checked . 1632903413) (last-edit . 1444010690) (last-updated . 1594627623) (modules . ((lib "identikon/rules/angles.rkt") (lib "identikon/rules/qbert.rkt") (lib "identikon/scribblings/identikon.scrbl") (lib "identikon/utils.rkt") (lib "identikon/main.rkt") (lib "identikon/rules/nineblock.rkt") (lib "identikon/rules/default.rkt") (lib "identikon/transforms.rkt") (lib "identikon/rules/angles2.rkt") (lib "identikon/rules/stars.rkt") (lib "identikon/rules/squares.rkt") (lib "identikon/rules/circles.rkt") (lib "identikon/rules/rings.rkt"))) (name . "identikon") (ring . 1) (search-terms . #hasheq((2htdp . #t) (:build-success: . #t) (:docs: . #t) (author:info@v25media.com . #t) (graphics . #t) (identicon . #t) (ring:1 . #t))) (source . "git://github.com/DarrenN/identikon.git") (tags . ("2htdp" "graphics" "identicon")) (versions . #hash((default . #hasheq((checksum . "d8908ee6955e69466270692599eb9076adc6a28b") (source . "git://github.com/DarrenN/identikon.git") (source_url . "http://github.com/DarrenN/identikon.git/tree/master"))) ("1.0.1" . #hasheq((checksum . "") (source . "https://github.com/DarrenN/identikon/tree/1.0.1") (source_url . "https://github.com/DarrenN/identikon/tree/1.0.1"))))))) ("iloveck101" . #hasheq((author . "Dendoh@gmail.com") (authors . ("Dendoh@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/iloveck101.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "eef2eface1d4882e12b298429ed8739af67b9d16") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "A command-line tool to download images from ck101 threads.") (implies . ()) (last-checked . 1632903414) (last-edit . 1387107040) (last-updated . 1502816135) (modules . ((lib "iloveck101/iloveck101.rkt"))) (name . "iloveck101") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:Dendoh@gmail.com . #t) (ck101 . #t) (ring:1 . #t) (web . #t))) (source . "github://github.com/Domon/iloveck101/master") (tags . ("ck101" "web")) (versions . #hash((default . #hasheq((checksum . "eef2eface1d4882e12b298429ed8739af67b9d16") (source . "github://github.com/Domon/iloveck101/master") (source_url . "http://github.com/Domon/iloveck101/tree/master"))))))) ("image-coloring" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/image-coloring.txt") (docs . (("main" "image-colors" "doc/image-colors@image-coloring/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/image-coloring.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/image-coloring.txt"))) (checksum . "1cd39f2ccacb2d6f12b577184e5b04f775a7bc4d") (checksum-error . #f) (collection . "image-coloring") (conflicts . ()) (date-added . 1570042591) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "For doing bitmap operations on 2htdp/image objects") (implies . ()) (last-checked . 1632903414) (last-edit . 1570043684) (last-updated . 1579817280) (modules . ((lib "image-coloring/test.rkt") (lib "image-coloring/main.rkt") (lib "image-coloring/scribblings/image-colors.scrbl"))) (name . "image-coloring") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/image-coloring.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1cd39f2ccacb2d6f12b577184e5b04f775a7bc4d") (source . "https://github.com/thoughtstem/image-coloring.git") (source_url . "https://github.com/thoughtstem/image-coloring.git"))))))) ("image-colors" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . "server/built/deps/image-colors.txt") (docs . (("extract" "image-colors" "doc/image-colors@image-colors/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/image-colors.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/image-colors.txt"))) (checksum . "1cd39f2ccacb2d6f12b577184e5b04f775a7bc4d") (checksum-error . #f) (collection . "image-coloring") (conflicts . ("image-coloring")) (date-added . 1569792608) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "For doing basic pixel operations on 2htdp/image objects") (implies . ()) (last-checked . 1632903415) (last-edit . 1569792623) (last-updated . 1579817280) (modules . ((lib "image-coloring/test.rkt") (lib "image-coloring/main.rkt") (lib "image-coloring/scribblings/image-colors.scrbl"))) (name . "image-colors") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:2 . #t))) (source . "https://github.com/thoughtstem/image-colors.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1cd39f2ccacb2d6f12b577184e5b04f775a7bc4d") (source . "https://github.com/thoughtstem/image-colors.git") (source_url . "https://github.com/thoughtstem/image-colors.git"))))))) ("images" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("images-lib" "images-gui-lib" "images-doc")) (description . "Functions (and docs and tests) for constructing icons and logos") (implies . ("images-lib" "images-gui-lib" "images-doc")) (last-checked . 1632903415) (last-edit . 1417659583) (last-updated . 1596548001) (modules . ()) (name . "images") (ring . 0) (search-terms . #hasheq((author:ntoronto@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "975f011d41aea2f1d83885cefe333d271b788a62") (source . "git://github.com/racket/images/?path=images") (source_url . "git://github.com/racket/images/?path=images"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("images-doc" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "images" "doc/images@images-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "images-lib" "draw-doc" "gui-doc" "pict-doc" "slideshow-doc" "typed-racket-doc" "draw-lib" "gui-lib" "pict-lib" "racket-doc" "scribble-lib" "slideshow-lib" "typed-racket-lib")) (description . "Documentation for images-lib") (implies . ()) (last-checked . 1632903415) (last-edit . 1417659583) (last-updated . 1596548002) (modules . ((lib "images/scribblings/icons.scrbl") (lib "images/scribblings/flomap.scrbl") (lib "images/scribblings/images.scrbl") (lib "images/scribblings/compile-time.scrbl") (lib "images/scribblings/logos.scrbl"))) (name . "images-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:ntoronto@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "975f011d41aea2f1d83885cefe333d271b788a62") (source . "git://github.com/racket/images/?path=images-doc") (source_url . "git://github.com/racket/images/?path=images-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("images-gui-lib" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "string-constants-lib")) (description . "Functions for constructing icons and logos") (implies . ()) (last-checked . 1632903415) (last-edit . 1417659583) (last-updated . 1596548002) (modules . ((lib "images/gui.rkt"))) (name . "images-gui-lib") (ring . 0) (search-terms . #hasheq((author:ntoronto@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "975f011d41aea2f1d83885cefe333d271b788a62") (source . "git://github.com/racket/images/?path=images-gui-lib") (source_url . "git://github.com/racket/images/?path=images-gui-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("images-lib" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "typed-racket-lib" "scribble-lib")) (description . "Functions for constructing icons and logos") (implies . ()) (last-checked . 1632903416) (last-edit . 1417659583) (last-updated . 1596548002) (modules . ((lib "images/icons/arrow.rkt") (lib "images/private/utils.rkt") (lib "images/private/flomap-gradient.rkt") (lib "images/private/latent-contract.rkt") (lib "images/icons/file.rkt") (lib "images/private/flomap-blur.rkt") (lib "images/private/flomap-stats.rkt") (lib "images/icons/tool.rkt") (lib "images/icons/symbol.rkt") (lib "images/icons/stickman.rkt") (lib "images/private/latent-contract/defthing.rkt") (lib "images/icons/control.rkt") (lib "images/private/deep-flomap-untyped-parameters.rkt") (lib "images/private/flomap-convert.rkt") (lib "images/private/flomap-struct.rkt") (lib "images/private/parameter-group.rkt") (lib "images/private/deep-flomap-render.rkt") (lib "images/private/flomap-composite.rkt") (lib "images/flomap.rkt") (lib "images/compile-time.rkt") (lib "images/private/flomap-resize.rkt") (lib "images/private/flomap-effects.rkt") (lib "images/private/flomap-pointwise.rkt") (lib "images/private/flomap-transform.rkt") (lib "images/icons/style.rkt") (lib "images/icons/misc.rkt") (lib "images/private/deep-flomap-struct.rkt") (lib "images/logos.rkt") (lib "images/private/flomap.rkt") (lib "images/private/deep-flomap-parameters.rkt") (lib "images/private/flonum.rkt") (lib "images/private/deep-flomap.rkt"))) (name . "images-lib") (ring . 0) (search-terms . #hasheq((author:ntoronto@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "975f011d41aea2f1d83885cefe333d271b788a62") (source . "git://github.com/racket/images/?path=images-lib") (source_url . "git://github.com/racket/images/?path=images-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("images-test" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "images-lib" "pict-lib" "slideshow-lib" "racket-doc")) (description . "Tests for images-pkg") (implies . ()) (last-checked . 1632903416) (last-edit . 1417659583) (last-updated . 1596548002) (modules . ((lib "images/tests/effects-tests.rkt") (lib "images/tests/other-tests.rkt") (lib "images/tests/icon-tests.rkt") (lib "images/tests/logo-tests.rkt") (lib "images/tests/latent-contract-tests.rkt"))) (name . "images-test") (ring . 0) (search-terms . #hasheq((author:ntoronto@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "975f011d41aea2f1d83885cefe333d271b788a62") (source . "git://github.com/racket/images/?path=images-test") (source_url . "git://github.com/racket/images/?path=images-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("impl-excl" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/impl-excl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/impl-excl.txt"))) (checksum . "2be491f8acb71ec6115d96070382e1f5f2d3a2a0") (checksum-error . #f) (collection . "impl-excl") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "set-extras")) (description . "Pre-compute procedures for fast checking of transitive implication and exclusion between simple predicates") (implies . ()) (last-checked . 1632903416) (last-edit . 1509647973) (last-updated . 1596548002) (modules . ((lib "impl-excl/main.rkt") (lib "impl-excl/tests.rkt"))) (name . "impl-excl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pcn@cs.umd.edu . #t) (logic . #t) (ring:1 . #t))) (source . "https://github.com/philnguyen/impl-excl.git?path=impl-excl") (tags . ("logic")) (versions . #hash((default . #hasheq((checksum . "2be491f8acb71ec6115d96070382e1f5f2d3a2a0") (source . "https://github.com/philnguyen/impl-excl.git?path=impl-excl") (source_url . "https://github.com/philnguyen/impl-excl.git?path=impl-excl"))))))) ("in-new-directory" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "in-new-directory" "doc/in-new-directory@in-new-directory/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/in-new-directory.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/in-new-directory.txt"))) (checksum . "f7020748288df28ed8371a521781a5d0986582a6") (checksum-error . #f) (collection . "file") (conflicts . ()) (dependencies . ("base" "compatibility-lib" "scribble-lib")) (description . "Run things in new directories") (implies . ()) (last-checked . 1632903416) (last-edit . 1405264770) (last-updated . 1502816137) (modules . ((lib "file/in-new-directory.rkt") (lib "file/in-new-directory.scrbl"))) (name . "in-new-directory") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samth@ccs.neu.edu . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/samth/in-new-directory") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "f7020748288df28ed8371a521781a5d0986582a6") (source . "git://github.com/samth/in-new-directory") (source_url . "http://github.com/samth/in-new-directory/tree/master"))))))) ("in-out-logged" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "a8c43f6a037debc876a8d150e6801c84bc867c93") (checksum-error . #f) (collection . "in-out-logged") (conflicts . ()) (date-added . 1631132222) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Wraps a chunk of code in entering and leaving log messages and returns the result(s) of the code.") (implies . ()) (last-checked . 1632903416) (last-edit . 1631132222) (last-updated . 1632867412) (modules . ((lib "in-out-logged/main.rkt") (lib "in-out-logged/scribblings/in-out-logged.scrbl"))) (name . "in-out-logged") (ring . 1) (search-terms . #hasheq((author:david.storrs@gmail.com . #t) (logger . #t) (logging . #t) (logs . #t) (ring:1 . #t))) (source . "https://github.com/dstorrs/in-out-logged.git") (tags . ("logger" "logging" "logs")) (versions . #hash((default . #hasheq((checksum . "a8c43f6a037debc876a8d150e6801c84bc867c93") (source . "https://github.com/dstorrs/in-out-logged.git") (source_url . "https://github.com/dstorrs/in-out-logged.git"))))))) ("inexact-number-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "inexact-number-lang" "doc/inexact-number-lang@inexact-number-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/inexact-number-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/inexact-number-lang.txt"))) (checksum . "b7821d0871a698af4c3833a7f8e2b49e3625eb4a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548025992) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "A lang-extension that reads every number as inexact") (implies . ()) (last-checked . 1632903417) (last-edit . 1548025992) (last-updated . 1548053902) (modules . ((lib "inexact-number/scribblings/inexact-number-lang.scrbl") (lib "inexact-number/lang/readtable.rkt") (lib "inexact-number/lang/reader.rkt") (lib "inexact-number/test/inexact-number-racket.rkt"))) (name . "inexact-number-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lang-extension . #t) (ring:1 . #t))) (source . "https://github.com/AlexKnauth/inexact-number-lang.git") (tags . ("lang-extension")) (versions . #hash((default . #hasheq((checksum . "b7821d0871a698af4c3833a7f8e2b49e3625eb4a") (source . "https://github.com/AlexKnauth/inexact-number-lang.git") (source_url . "https://github.com/AlexKnauth/inexact-number-lang.git"))))))) ("infix" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "infix-manual" "doc/infix-manual@infix/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/infix.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/infix.txt"))) (checksum . "3f7998e509f201f78eb986de0f09e0542a429ad0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "scheme-lib" "at-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc" "scribble-doc")) (description . "Infix Expressions") (implies . ()) (last-checked . 1632903417) (last-edit . 1429983020) (last-updated . 1513624529) (modules . ((lib "infix/parser.rkt") (lib "infix/scribblings/util.rkt") (lib "infix/main.rkt") (lib "infix/scribblings/infix-manual.scrbl") (lib "infix/parse-string-lexeme.rkt") (lib "infix/parameter.rkt") (lib "infix/scribblings/while.rkt") (lib "infix/tests/example.rkt") (lib "infix/tests/test-dollar.rkt"))) (name . "infix") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jensaxel@soegaard.net . #t) (infix . #t) (ring:1 . #t))) (source . "git://github.com/soegaard/infix") (tags . ("infix")) (versions . #hash((default . #hasheq((checksum . "3f7998e509f201f78eb986de0f09e0542a429ad0") (source . "git://github.com/soegaard/infix") (source_url . "http://github.com/soegaard/infix/tree/master"))))))) ("infix-syntax" . #hasheq((author . "mrmyers.random.suffix@gmail.com") (authors . ("mrmyers.random.suffix@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "infix-syntax" "doc/infix-syntax@infix-syntax/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/infix-syntax.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/infix-syntax.txt"))) (checksum . "8886395e31dc0b5d0db3a77a75255df15492806c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Expansion-time parsing of infix expressions.") (implies . ()) (last-checked . 1632903417) (last-edit . 1505083871) (last-updated . 1537855041) (modules . ((lib "infix-syntax/private/operator/id-tools.rkt") (lib "infix-syntax/test/core/private/stx.rkt") (lib "infix-syntax/scribblings/infix-syntax.scrbl") (lib "infix-syntax/private/core.rkt") (lib "infix-syntax/private/core/parse.rkt") (lib "infix-syntax/test/core/private/util.rkt") (lib "infix-syntax/test/operator/private/stx.rkt") (lib "infix-syntax/test/core/base-test.rkt") (lib "infix-syntax/test/core/op-parse.rkt") (lib "infix-syntax/private/reprovide.rkt") (lib "infix-syntax/private/operator/make.rkt") (lib "infix-syntax/test/operator/private/macro.rkt") (lib "infix-syntax/main.rkt") (lib "infix-macro/main.rkt") (lib "infix-syntax/private/infix/token.rkt") (lib "infix-syntax/test/core/private/base.rkt") (lib "infix-syntax/test/scratch/scratch-test.rkt") (lib "infix-syntax/private/core/scope.rkt") (lib "infix-syntax/private/operator.rkt") (lib "infix-syntax/test/check.rkt") (lib "infix-syntax/private/infix.rkt") (lib "infix-syntax/private/core/props.rkt") (lib "infix-syntax/private/infix/sugar.rkt") (lib "infix-syntax/test/operator/op-proc.rkt") (lib "infix-syntax/test/core/private/macro.rkt") (lib "infix-syntax/private/operator/sugar.rkt") (lib "infix-syntax/test/operator/parse.rkt") (lib "infix-syntax/test/operator/id-test.rkt") (lib "infix-syntax/test/core/props.rkt") (lib "infix-syntax/private/operator/util.rkt"))) (name . "infix-syntax") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mrmyers.random.suffix@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/mromyers/infix-syntax.git") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "8886395e31dc0b5d0db3a77a75255df15492806c") (source . "https://github.com/mromyers/infix-syntax.git") (source_url . "https://github.com/mromyers/infix-syntax.git"))))))) ("intellij" . #hasheq((author . "aymano.osman@gmail.com") (authors . ("aymano.osman@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/intellij.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/intellij.txt"))) (checksum . "22e52e0cc36472cd967e3e463f4d583cde0c2c0b") (checksum-error . #f) (collection . "intellij") (conflicts . ()) (date-added . 1617857425) (dependencies . ("base" "macro-debugger-text-lib")) (description . "Support IntelliJ editor features") (implies . ()) (last-checked . 1632903417) (last-edit . 1617857425) (last-updated . 1619101135) (modules . ((lib "intellij/analysis/unused-requires.rkt") (lib "intellij/analysis/lint-with-expand/find-matching-module-path.rkt") (lib "intellij/lint-with-expand.rkt") (lib "intellij/analysis/lint-with-expand.rkt") (lib "intellij/analysis/find-requires.rkt") (lib "intellij/unused-requires.rkt"))) (name . "intellij") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:aymano.osman@gmail.com . #t) (intellij . #t) (ring:1 . #t) (tools . #t))) (source . "https://github.com/aymanosman/racket-intellij.git") (tags . ("intellij" "tools")) (versions . #hash((default . #hasheq((checksum . "22e52e0cc36472cd967e3e463f4d583cde0c2c0b") (source . "https://github.com/aymanosman/racket-intellij.git") (source_url . "https://github.com/aymanosman/racket-intellij.git"))))))) ("interactive-brokers-api" . #hasheq((author . "evdubs@gmail.com") (authors . ("evdubs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "interactive-brokers-api" "doc/interactive-brokers-api@interactive-brokers-api/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/interactive-brokers-api.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/interactive-brokers-api.txt"))) (checksum . "126e872caa2190e7f37663161a0853575aa92ad8") (checksum-error . #f) (collection . "interactive-brokers-api") (conflicts . ()) (date-added . 1565405340) (dependencies . ("base" "binaryio" "gregor-lib" "racket-doc" "scribble-lib")) (description . "Client API for Interactive Brokers' Trader Workstation") (implies . ()) (last-checked . 1632903417) (last-edit . 1565405340) (last-updated . 1607408671) (modules . ((lib "interactive-brokers-api/response-messages.rkt") (lib "interactive-brokers-api/main.rkt") (lib "interactive-brokers-api/request-messages.rkt") (lib "interactive-brokers-api/interactive-brokers-api.scrbl") (lib "interactive-brokers-api/base-structs.rkt"))) (name . "interactive-brokers-api") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (api . #t) (author:evdubs@gmail.com . #t) (client-api . #t) (ibkr . #t) (interactive-brokers . #t) (ring:1 . #t))) (source . "https://github.com/evdubs/interactive-brokers-api.git") (tags . ("api" "client-api" "ibkr" "interactive-brokers")) (versions . #hash((default . #hasheq((checksum . "126e872caa2190e7f37663161a0853575aa92ad8") (source . "https://github.com/evdubs/interactive-brokers-api.git") (source_url . "https://github.com/evdubs/interactive-brokers-api.git"))))))) ("interactive-syntax" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/interactive-syntax.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/interactive-syntax.txt"))) (checksum . "8c13d83ac0f5dbd624d59083b32f765952d1d440") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" "7.6") "draw-lib" "data-lib" "drracket-plugin-lib" "gui-lib" "images-lib" "math-lib" "syntax-color-lib" "wxme-lib" "scribble-lib" "racket-doc")) (description . "(Early) Prototype for Interactive Syntax") (implies . ()) (last-checked . 1632903418) (last-edit . 1545248754) (last-updated . 1607203653) (modules . ((lib "editor/private/read-editor.rkt") (lib "editor/base.rkt") (lib "editor/private/context-text.rkt") (lib "editor/test.rkt") (lib "editor/private/stdlib.rkt") (lib "editor/private/log.rkt") (lib "editor/main.rkt") (lib "editor/private/background.rkt") (lib "editor/test/raco.rkt") (lib "editor/private/lang.rkt") (lib "editor/lang.rkt") (lib "editor/private/editselect.rkt") (lib "editor/private/editor.rkt") (lib "editor/private/fallback.rkt") (lib "editor/private/event.rkt") (lib "editor/private/surrogate-base.rkt") (lib "editor/private/surrogate.rkt") (lib "editor/private/list.rkt") (lib "editor-test/forge-identifier.rkt") (lib "editor/examples/matrix.rkt") (lib "editor/private/context.rkt") (lib "editor/private/serialize.rkt"))) (name . "interactive-syntax") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "https://github.com/videolang/interactive-syntax.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8c13d83ac0f5dbd624d59083b32f765952d1d440") (source . "https://github.com/videolang/interactive-syntax.git") (source_url . "https://github.com/videolang/interactive-syntax.git"))))))) ("interconfection" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/interconfection.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/interconfection.txt"))) (checksum . "bcd0c4229a05491923550b50c003d432be982028") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1579217826) (dependencies . ("interconfection-doc" "interconfection-lib")) (description . "A library for building extensible systems, especially module systems.") (implies . ("interconfection-doc" "interconfection-lib")) (last-checked . 1632903418) (last-edit . 1615519766) (last-updated . 1615519766) (modules . ()) (name . "interconfection") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (concurrency . #t) (effects . #t) (expression-problem . #t) (extensible . #t) (language . #t) (lathe . #t) (ring:1 . #t))) (source . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection#main") (tags . ("concurrency" "effects" "expression-problem" "extensible" "language" "lathe")) (versions . #hash((default . #hasheq((checksum . "bcd0c4229a05491923550b50c003d432be982028") (source . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection#main") (source_url . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection#main"))))))) ("interconfection-doc" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "interconfection" "doc/interconfection@interconfection-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/interconfection-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/interconfection-doc.txt"))) (checksum . "bcd0c4229a05491923550b50c003d432be982028") (checksum-error . #f) (collection . "interconfection") (conflicts . ()) (date-added . 1579217734) (dependencies . ("base" "interconfection-lib" "lathe-comforts-doc" "lathe-comforts-lib" "parendown-lib" "racket-doc" "scribble-lib")) (description . "A library for building extensible systems, especially module systems. (doc)") (implies . ()) (last-checked . 1632903418) (last-edit . 1615519754) (last-updated . 1615519754) (modules . ((lib "interconfection/scribblings/interconfection.scrbl"))) (name . "interconfection-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:rokitna@hotmail.com . #t) (concurrency . #t) (effects . #t) (expression-problem . #t) (extensible . #t) (language . #t) (lathe . #t) (ring:1 . #t))) (source . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection-doc#main") (tags . ("concurrency" "effects" "expression-problem" "extensible" "language" "lathe")) (versions . #hash((default . #hasheq((checksum . "bcd0c4229a05491923550b50c003d432be982028") (source . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection-doc#main") (source_url . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection-doc#main"))))))) ("interconfection-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/interconfection-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/interconfection-lib.txt"))) (checksum . "bcd0c4229a05491923550b50c003d432be982028") (checksum-error . #f) (collection . "interconfection") (conflicts . ()) (date-added . 1579217666) (dependencies . ("base" "lathe-comforts-lib" "parendown-lib")) (description . "A library for building extensible systems, especially module systems. (lib)") (implies . ()) (last-checked . 1632903418) (last-edit . 1615519742) (last-updated . 1615519742) (modules . ((lib "interconfection/extensibility/unsafe.rkt") (lib "interconfection/order/unsafe.rkt") (lib "interconfection/extensibility/base.rkt") (lib "interconfection/order/base.rkt") (lib "interconfection/private/order.rkt") (lib "interconfection/private/getfx.rkt") (lib "interconfection/order.rkt") (lib "interconfection/private/order-unsafe.rkt"))) (name . "interconfection-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (concurrency . #t) (effects . #t) (expression-problem . #t) (extensible . #t) (language . #t) (lathe . #t) (ring:1 . #t))) (source . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection-lib#main") (tags . ("concurrency" "effects" "expression-problem" "extensible" "language" "lathe")) (versions . #hash((default . #hasheq((checksum . "bcd0c4229a05491923550b50c003d432be982028") (source . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection-lib#main") (source_url . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection-lib#main"))))))) ("interconfection-test" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/interconfection-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/interconfection-test.txt"))) (checksum . "bcd0c4229a05491923550b50c003d432be982028") (checksum-error . #f) (collection . "interconfection") (conflicts . ()) (date-added . 1579217771) (dependencies . ("base" "interconfection-lib" "lathe-comforts-lib" "rackunit-lib" "parendown-lib")) (description . "A library for building extensible systems, especially module systems. (test)") (implies . ()) (last-checked . 1632903419) (last-edit . 1615519730) (last-updated . 1615519730) (modules . ((lib "interconfection/tests.rkt"))) (name . "interconfection-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (concurrency . #t) (effects . #t) (expression-problem . #t) (extensible . #t) (language . #t) (lathe . #t) (ring:1 . #t))) (source . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection-test#main") (tags . ("concurrency" "effects" "expression-problem" "extensible" "language" "lathe")) (versions . #hash((default . #hasheq((checksum . "bcd0c4229a05491923550b50c003d432be982028") (source . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection-test#main") (source_url . "https://github.com/lathe/interconfection-for-racket.git?path=interconfection-test#main"))))))) ("intern" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/intern.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/intern.txt"))) (checksum . "e2b46f803fe9d83368bde168fca8559f1210cfe3") (checksum-error . #f) (collection . "intern") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more")) (description . "Type-safe interning of datatype in Typed Racket as a new sub-type of Index") (implies . ()) (last-checked . 1632903419) (last-edit . 1492825852) (last-updated . 1552453475) (modules . ((lib "intern/main.rkt") (lib "intern/tests.rkt"))) (name . "intern") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pcn@cs.umd.edu . #t) (ring:1 . #t) (typed-racket . #t))) (source . "git://github.com/philnguyen/intern?path=intern") (tags . ("typed-racket")) (versions . #hash((default . #hasheq((checksum . "e2b46f803fe9d83368bde168fca8559f1210cfe3") (source . "git://github.com/philnguyen/intern?path=intern") (source_url . "http://github.com/philnguyen/intern/tree/master?path=intern"))))))) ("io" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/io.txt") (test-failure-log . "server/built/test-fail/io.txt") (test-success-log . #f))) (checksum . "db8413c802782bfc3de706cc1cb8dab6fe4f941e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("srfi-lite-lib" "base" "in-new-directory" "compatibility-lib" "rackunit-gui" "rackunit-lib")) (description . "I/O utilities from dherman's io.plt Planet package") (implies . ()) (last-checked . 1632903419) (last-edit . 1503512193) (last-updated . 1596548004) (modules . ((lib "io/private/tests/tests.rkt") (lib "io/main.rkt") (lib "io/file.rkt") (lib "io/private/tests/file.rkt") (lib "io/private/tests/io.rkt"))) (name . "io") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (io . #t) (ring:1 . #t))) (source . "git://github.com/samth/io.rkt") (tags . ("io")) (versions . #hash((default . #hasheq((checksum . "db8413c802782bfc3de706cc1cb8dab6fe4f941e") (source . "git://github.com/samth/io.rkt") (source_url . "http://github.com/samth/io.rkt/tree/master"))))))) ("ionic" . #hasheq((author . "skasivaj@gmail.com") (authors . ("skasivaj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ionic" "doc/ionic@ionic/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ionic.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ionic.txt"))) (checksum . "9b9326079709441333a2132213b2e302126110b5") (checksum-error . #f) (collection . "ionic") (conflicts . ()) (date-added . 1619235623) (dependencies . ("base" "mischief" "fancy-app" "adjutor" "scribble-lib" "scribble-abbrevs" "racket-doc" "rackunit-lib" "cover" "cover-coveralls" "sandbox-lib" "math-lib" "relation")) (description . "Another way to structure computations") (implies . ()) (last-checked . 1632903419) (last-edit . 1622659964) (last-updated . 1632845819) (modules . ((lib "ionic/dev/profile/ionic.rkt") (lib "ionic/dev/profile/builtin.rkt") (lib "ionic/tests/ionic.rkt") (lib "ionic/dev/profile/forms.rkt") (lib "ionic/tests/private/util.rkt") (lib "ionic/threading.rkt") (lib "ionic/switch.rkt") (lib "ionic/on.rkt") (lib "ionic/main.rkt") (lib "ionic/scribblings/ionic.scrbl") (lib "ionic/private/util.rkt") (lib "ionic/flow.rkt"))) (name . "ionic") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:skasivaj@gmail.com . #t) (conditionals . #t) (dsl . #t) (functional . #t) (predicates . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/countvajhula/ionic.git#main") (tags . ("conditionals" "dsl" "functional" "predicates" "syntax")) (versions . #hash((default . #hasheq((checksum . "9b9326079709441333a2132213b2e302126110b5") (source . "https://github.com/countvajhula/ionic.git#main") (source_url . "https://github.com/countvajhula/ionic.git#main"))))))) ("ipoe" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ipoe" "doc/ipoe@ipoe/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/ipoe.txt") (success-log . "server/built/install/ipoe.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ipoe.txt"))) (checksum . "4a988f6537fb738b4fe842c404f9d78f658ab76f") (checksum-error . #f) (collection . "ipoe") (conflicts . ()) (dependencies . ("base" "basedir" "db-lib" "html-lib" "html-parsing" "levenshtein" "rackunit-lib" "readline-lib" "reprovide-lang" "sxml" "basedir" "net-doc" "racket-doc" "rackunit-abbrevs" "rackunit-lib" "scribble-doc" "scribble-lib")) (description . "interactive poetry editor") (implies . ()) (last-checked . 1632903419) (last-edit . 1483520067) (last-updated . 1595550523) (modules . ((lib "ipoe/private/command/check.rkt") (lib "ipoe/private/scrape/scrape-util.rkt") (lib "ipoe/english.rkt") (lib "ipoe/clerihew/lang/reader.rkt") (lib "ipoe/private/db.rkt") (lib "ipoe/private/util/sequence.rkt") (lib "ipoe/lang/reader.rkt") (lib "ipoe/private/command/update.rkt") (lib "ipoe/main.rkt") (lib "ipoe/tercet/lang/reader.rkt") (lib "ipoe/villanelle/lang/reader.rkt") (lib "ipoe/english-sonnet/lang/reader.rkt") (lib "ipoe/private/command/common.rkt") (lib "ipoe/private/util/string.rkt") (lib "ipoe/sextilla/lang/reader.rkt") (lib "ipoe/docs/ipoe-define.scrbl") (lib "ipoe/private/command/show.rkt") (lib "ipoe/sestina/lang/reader.rkt") (lib "ipoe/scrape.rkt") (lib "ipoe/docs/ipoe-externals.scrbl") (lib "ipoe/docs/ipoe.scrbl") (lib "ipoe/private/scrape/scrape-words.rkt") (lib "ipoe/docs/ipoe-api.scrbl") (lib "ipoe/couplet/lang/reader.rkt") (lib "ipoe/private/command/init.rkt") (lib "ipoe/private/nlp/number.rkt") (lib "ipoe/private/poem/spellcheck.rkt") (lib "ipoe/limerick/lang/reader.rkt") (lib "ipoe/private/command/new.rkt") (lib "ipoe/private/scrape.rkt") (lib "ipoe/private/util/check-print.rkt") (lib "ipoe/private/command.rkt") (lib "ipoe/private/nlp/parse.rkt") (lib "ipoe/private/util/logging.rkt") (lib "ipoe/italian-sonnet/lang/reader.rkt") (lib "ipoe/private/command/dbshell.rkt") (lib "ipoe/private/poem/rhymecheck.rkt") (lib "ipoe/haiku/lang/reader.rkt") (lib "ipoe/tanaga/lang/reader.rkt") (lib "ipoe/private/poem/form.rkt") (lib "ipoe/private/scrape/scrape-rhymes.rkt") (lib "ipoe/private/util/windows-readline.rkt") (lib "ipoe/private/poem.rkt") (lib "ipoe/private/parameters.rkt") (lib "ipoe/quaternion/lang/reader.rkt") (lib "ipoe/free-verse/lang/reader.rkt") (lib "ipoe/private/command/remove.rkt") (lib "ipoe/private/ui.rkt") (lib "ipoe/poetic-form.rkt") (lib "ipoe/private/suggest/spelling.rkt") (lib "ipoe/private/db/migrate.rkt") (lib "ipoe/private/poem/poetic-license.rkt") (lib "ipoe/rondelet/lang/reader.rkt") (lib "ipoe/cinquain/lang/reader.rkt") (lib "ipoe/private/nlp/infer.rkt") (lib "ipoe/private/util/check-os.rkt") (lib "ipoe/private/suggest.rkt") (lib "ipoe/docs/ipoe-use.scrbl"))) (name . "ipoe") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (lang . #t) (language . #t) (poetry . #t) (ring:1 . #t))) (source . "git://github.com/bennn/ipoe?path=ipoe") (tags . ("lang" "language" "poetry")) (versions . #hash((default . #hasheq((checksum . "4a988f6537fb738b4fe842c404f9d78f658ab76f") (source . "git://github.com/bennn/ipoe?path=ipoe") (source_url . "http://github.com/bennn/ipoe/tree/master?path=ipoe"))))))) ("iracket" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "iracket" "doc/iracket@iracket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/iracket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/iracket.txt"))) (checksum . "9af0e87d61565a9ecb41119c481e7e36c0c5287d") (checksum-error . #f) (collection . "iracket") (conflicts . ()) (date-added . 1573059234) (dependencies . ("base" "zeromq-r-lib" "sandbox-lib" "uuid" "sha" "racket-doc" "scribble-lib" "scribble-doc")) (description . "Jupyter kernel for Racket") (implies . ()) (last-checked . 1632903420) (last-edit . 1573059234) (last-updated . 1614943706) (modules . ((lib "iracket/iracket.rkt") (lib "iracket/private/jupyter.rkt") (lib "iracket/private/kernel.rkt") (lib "iracket/lang.rkt") (lib "iracket/install.rkt") (lib "iracket/iracket.scrbl"))) (name . "iracket") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/iracket.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "9af0e87d61565a9ecb41119c481e7e36c0c5287d") (source . "https://github.com/rmculpepper/iracket.git") (source_url . "https://github.com/rmculpepper/iracket.git"))))))) ("irandom" . #hasheq((author . "hari@hkrish.com") (authors . ("hari@hkrish.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "irandom" "doc/irandom@irandom/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/irandom.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/irandom.txt"))) (checksum . "f38e03c69fce7462b81106f567c32ce34f0ed830") (checksum-error . #f) (collection . "irandom") (conflicts . ()) (date-added . 1618674247) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Racket implementation of Bob Jenkins' ISAAC pseudorandom number generator (Indirection, Shift, Accumulate, Add, and Count).") (implies . ()) (last-checked . 1632903420) (last-edit . 1618674247) (last-updated . 1618674247) (modules . ((lib "irandom/test/dieharder-stdout.rkt") (lib "irandom/isaac.rkt") (lib "irandom/test/irandout.rkt") (lib "irandom/main.rkt") (lib "irandom/test/test.rkt") (lib "irandom/scribblings/irandom.scrbl") (lib "irandom/uuid.rkt"))) (name . "irandom") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:hari@hkrish.com . #t) (generators . #t) (random . #t) (ring:1 . #t))) (source . "https://github.com/hkrish/irandom.git") (tags . ("generators" "random")) (versions . #hash((default . #hasheq((checksum . "f38e03c69fce7462b81106f567c32ce34f0ed830") (source . "https://github.com/hkrish/irandom.git") (source_url . "https://github.com/hkrish/irandom.git"))))))) ("irc" . #hasheq((author . "schuster@ccs.neu.edu") (authors . ("schuster@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "irc" "doc/irc@irc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/irc.txt") (test-failure-log . "server/built/test-fail/irc.txt") (test-success-log . #f))) (checksum . "9b5997df2ba1d89f1c386e9ce010614ee63a19e0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "An IRC client library.") (implies . ()) (last-checked . 1632903420) (last-edit . 1495646361) (last-updated . 1632021374) (modules . ((lib "irc/private/numeric-replies.rkt") (lib "irc/main.rkt") (lib "irc/ctcp.rkt") (lib "irc/examples/disconnect-test.rkt") (lib "irc/irc.scrbl") (lib "irc/examples/echobot.rkt"))) (name . "irc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:schuster@ccs.neu.edu . #t) (irc . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/schuster/racket-irc") (tags . ("irc" "net")) (versions . #hash((default . #hasheq((checksum . "9b5997df2ba1d89f1c386e9ce010614ee63a19e0") (source . "git://github.com/schuster/racket-irc") (source_url . "http://github.com/schuster/racket-irc/tree/master"))))))) ("irc-client" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "irc-client" "doc/irc-client@irc-client/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/irc-client.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/irc-client.txt"))) (checksum . "dc3958adf0d8e7a8bf34820cb7bc6630eb18d622") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "irc" "typed-racket-lib" "typed-racket-more" "racket-doc" "scribble-lib" "typed-racket-doc")) (description . "A higher-level, typed wrapper around the irc package") (implies . ("irc")) (last-checked . 1632903420) (last-edit . 1422686391) (last-updated . 1527781442) (modules . ((lib "irc-client/scribblings/irc-client.scrbl") (lib "irc-client/private/typed/irc.rkt") (lib "irc-client/main.rkt"))) (name . "irc-client") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (irc . #t) (net . #t) (ring:1 . #t) (typed-racket . #t))) (source . "git://github.com/lexi-lambda/racket-irc-client") (tags . ("irc" "net" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "dc3958adf0d8e7a8bf34820cb7bc6630eb18d622") (source . "git://github.com/lexi-lambda/racket-irc-client") (source_url . "http://github.com/lexi-lambda/racket-irc-client/tree/master"))) ("6.1.1" . #hasheq((checksum . "705713d2af18c54d176197873269fc7ce5cc2092") (source . "git://github.com/lexi-lambda/racket-irc-client#v6.1.1") (source_url . "http://github.com/lexi-lambda/racket-irc-client/tree/master#v6.1.1"))))))) ("irregex" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "irregex" "doc/irregex@irregex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/irregex.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/irregex.txt"))) (checksum . "3285834dfceab79a0c21e037d26c5cc10bd94444") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (date-added . 1624614993) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Alex Shinn's IrRegular Expressions package. Includes both a character-based syntax and Olin Shivers' SRE regexp syntax.") (implies . ()) (last-checked . 1632903421) (last-edit . 1624615127) (last-updated . 1624662936) (modules . ((lib "irregex/irregex.scrbl") (lib "irregex/main.rkt") (lib "irregex/chibi-test.rkt"))) (name . "irregex") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (SRE . #t) (author:clements@racket-lang.org . #t) (regex . #t) (regular-expressions . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/irregex.git#racket") (tags . ("regex" "regular-expressions" "SRE")) (versions . #hash((default . #hasheq((checksum . "3285834dfceab79a0c21e037d26c5cc10bd94444") (source . "https://github.com/jbclements/irregex.git#racket") (source_url . "https://github.com/jbclements/irregex.git#racket"))))))) ("iswim" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/iswim.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/iswim.txt"))) (checksum . "7d6fe87391475b22828a39b344fd7b983f7018f7") (checksum-error . #f) (collection . "iswim") (conflicts . ()) (dependencies . ("draw-lib" "gui-lib" "pict-lib" "base")) (description . "iswim implementation") (implies . ()) (last-checked . 1632903421) (last-edit . 1539820691) (last-updated . 1596548005) (modules . ((lib "iswim/main.rkt") (lib "iswim/t/lc.rkt") (lib "iswim/t/basic.rkt"))) (name . "iswim") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/jeapostrophe/iswim.git") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "7d6fe87391475b22828a39b344fd7b983f7018f7") (source . "https://github.com/jeapostrophe/iswim.git") (source_url . "https://github.com/jeapostrophe/iswim.git"))))))) ("iu-pict" . #hasheq((author . "david@davidchristiansen.dk") (authors . ("david@davidchristiansen.dk")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/iu-pict.txt") (docs . (("main" "iu-pict" "doc/iu-pict@iu-pict/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/iu-pict.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/iu-pict.txt"))) (checksum . "42072a907d65bbfd09077592a20bfb130fc5a35a") (checksum-error . #f) (collection . "iu-pict") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1632903422) (last-edit . 1484517979) (last-updated . 1502816141) (modules . ((lib "iu-pict/scribblings/iu-pict.scrbl") (lib "iu-pict/main.rkt"))) (name . "iu-pict") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:david@davidchristiansen.dk . #t) (ring:1 . #t))) (source . "git://github.com/david-christiansen/iu-pict") (tags . ()) (versions . #hash((default . #hasheq((checksum . "42072a907d65bbfd09077592a20bfb130fc5a35a") (source . "git://github.com/david-christiansen/iu-pict") (source_url . "http://github.com/david-christiansen/iu-pict/tree/master"))))))) ("j" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "j" "doc/j@j/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/j.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/j.txt"))) (checksum . "021c40382f95d1a6dc0b329a152a171465b9bc75") (checksum-error . #f) (collection . "j") (conflicts . ()) (dependencies . ("base" "data-lib" "math-lib" "parser-tools-lib" "math-doc" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "Racket implementation of J language and related concepts") (implies . ()) (last-checked . 1632903422) (last-edit . 1505821211) (last-updated . 1506918580) (modules . ((lib "j/private/parse.rkt") (lib "j/lang/reader.rkt") (lib "j/private/read.rkt") (lib "j/private/module.rkt") (lib "j/rank/private/frame.rkt") (lib "j/rank.rkt") (lib "j/private/vocab/nouns.rkt") (lib "j/scribblings/j.scrbl") (lib "j/lib/conjunctions.rkt") (lib "j/rank/private/verb.rkt") (lib "j/main.rkt") (lib "j/private/vocab/verbs.rkt") (lib "j/private/parameters.rkt") (lib "j/private/locale.rkt") (lib "j/private/vocab/adverbs.rkt") (lib "j/obverse.rkt") (lib "j/private/executor.rkt") (lib "j/scribblings/number.scrbl") (lib "j/private/vocabulary.rkt") (lib "j/rank/base.rkt") (lib "j/number.rkt") (lib "j/private/type.rkt") (lib "j/rank/item.rkt") (lib "j/scribblings/lib.scrbl") (lib "j/private/lex.rkt") (lib "j/scribblings/main.scrbl") (lib "j/private/bindings.rkt") (lib "j/lib/nouns.rkt") (lib "j/lib/verbs.rkt") (lib "j/private/verb.rkt") (lib "j/private/word.rkt") (lib "j/private/coupla.rkt") (lib "j/private/vocab/conjunctions.rkt") (lib "j/lib/adverbs.rkt") (lib "j/rank/main.rkt") (lib "j/rank/private/noun.rkt") (lib "j/scribblings/rank.scrbl") (lib "j/console.rkt") (lib "j/customize.rkt") (lib "j/private/sentence.rkt") (lib "j/private/eval.rkt"))) (name . "j") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (array . #t) (author:leo@lwh.jp . #t) (j . #t) (language . #t) (math . #t) (ring:1 . #t) (unstable . #t))) (source . "git://github.com/lwhjp/racket-jlang") (tags . ("array" "j" "language" "math" "unstable")) (versions . #hash((default . #hasheq((checksum . "021c40382f95d1a6dc0b329a152a171465b9bc75") (source . "git://github.com/lwhjp/racket-jlang") (source_url . "http://github.com/lwhjp/racket-jlang/tree/master"))))))) ("jack-ease" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ease" "doc/ease@jack-ease/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jack-ease.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jack-ease.txt"))) (checksum . "3a7149ded68be348611e346742feac85fca6d74f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scribble-lib" "base" "sweet-exp" "lens" "fancy-app" "rackunit-lib" "cover" "racket-doc" "scribble-lib" "doc-coverage")) (description . "Library for easing things between start and stop values fluidly") (implies . ()) (last-checked . 1632903423) (last-edit . 1500074753) (last-updated . 1502816141) (modules . ((lib "ease/private/polynomial.rkt") (lib "ease/private/base.scrbl") (lib "ease/private/main.rkt") (lib "ease/main.rkt") (lib "ease/private/polynomial.scrbl") (lib "ease/private/util/scribble-include-no-subsection.rkt") (lib "ease/private/invert.rkt") (lib "ease/private/lens.scrbl") (lib "ease/private/tests/doc-coverage.rkt") (lib "ease/private/lens.rkt") (lib "ease/private/invert.scrbl") (lib "ease/main.scrbl") (lib "ease/private/base.rkt") (lib "ease/private/util/doc.rkt"))) (name . "jack-ease") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (graphics . #t) (personal . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/racket-ease") (tags . ("experimental" "graphics" "personal")) (versions . #hash((default . #hasheq((checksum . "3a7149ded68be348611e346742feac85fca6d74f") (source . "git://github.com/jackfirth/racket-ease") (source_url . "http://github.com/jackfirth/racket-ease/tree/master"))))))) ("jack-posn" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "posn" "doc/posn@jack-posn/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jack-posn.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jack-posn.txt"))) (checksum . "402ca7d3d5db28b04d82ff825a684c4995dcf355") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scribble-lib" "base" "sweet-exp" "fancy-app" "cover" "rackunit-lib" "racket-doc" "scribble-lib" "doc-coverage")) (description . "Library for working with points in 2d space") (implies . ()) (last-checked . 1632903423) (last-edit . 1500074814) (last-updated . 1502816141) (modules . ((lib "posn/private/rotate.rkt") (lib "posn/private/scale.scrbl") (lib "posn/private/add.rkt") (lib "posn/private/scale.rkt") (lib "posn/private/multiply.scrbl") (lib "posn/private/base.rkt") (lib "posn/main.rkt") (lib "posn/private/util/doc.rkt") (lib "posn/tests/doc-coverage.rkt") (lib "posn/private/degrees.rkt") (lib "posn/private/base.scrbl") (lib "posn/private/util/scribble-include-no-subsection.rkt") (lib "posn/private/rotate.scrbl") (lib "posn/private/main.rkt") (lib "posn/main.scrbl") (lib "posn/private/relative.rkt") (lib "posn/private/add.scrbl") (lib "posn/private/multiply.rkt") (lib "posn/private/relative.scrbl"))) (name . "jack-posn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (experimental . #t) (graphics . #t) (personal . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/racket-posn") (tags . ("data" "experimental" "graphics" "personal")) (versions . #hash((default . #hasheq((checksum . "402ca7d3d5db28b04d82ff825a684c4995dcf355") (source . "git://github.com/jackfirth/racket-posn") (source_url . "http://github.com/jackfirth/racket-posn/tree/master"))))))) ("jack-scribble-example" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scribble-example" "doc/scribble-example@jack-scribble-example/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jack-scribble-example.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jack-scribble-example.txt"))) (checksum . "8ea8ae06d859b607fd3600a68a806513580e1867") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scribble-lib" "base" "sweet-exp-lib" "reprovide-lang-lib" "fancy-app" "scribble-doc" "rackunit-lib" "racket-doc" "scribble-lib" "doc-coverage")) (description . "Deprecated. Use the built in scribble/example instead.") (implies . ()) (last-checked . 1632903423) (last-edit . 1468223203) (last-updated . 1563530364) (modules . ((lib "scribble-example/private/base.scrbl") (lib "scribble-example/main.rkt") (lib "scribble-example/private/base.rkt") (lib "scribble-example/private/tests/doc-coverage.rkt") (lib "scribble-example/private/util/doc.rkt") (lib "scribble-example/main.scrbl") (lib "scribble-example/private/util/scribble-include-no-subsection.rkt") (lib "scribble-example/private/main.rkt"))) (name . "jack-scribble-example") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (deprecated . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/jackfirth/scribble-example") (tags . ("deprecated" "scribble")) (versions . #hash((default . #hasheq((checksum . "8ea8ae06d859b607fd3600a68a806513580e1867") (source . "git://github.com/jackfirth/scribble-example") (source_url . "http://github.com/jackfirth/scribble-example/tree/master"))))))) ("java" . #hasheq((author . "clements@racket-lang.org dherman@mozilla.com") (authors . ("clements@racket-lang.org" "dherman@mozilla.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "java" "doc/java@java/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/java.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/java.txt"))) (checksum . "c2d1359b05567fb9352178cedeba2dfc30ddc9ca") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("dherman-struct" "io" "base" "compatibility-lib" "parser-tools-lib" "srfi-lite-lib" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "A port of David Herman's java.plt PLaneT package, without the PLaneT dependencies.") (implies . ()) (last-checked . 1632903424) (last-edit . 1394568871) (last-updated . 1502816142) (modules . ((lib "java/semantics/class-resolver.rkt") (lib "java/syntax/parser.rkt") (lib "java/semantics/resolve-binary.rkt") (lib "java/main.rkt") (lib "java/semantics/standard-resolver.rkt") (lib "java/semantics/utils.rkt") (lib "java/tools/javap.rkt") (lib "java/syntax/lexer.rkt") (lib "java/tests/tests.rkt") (lib "java/semantics/semantic-object.rkt") (lib "java/path-params.rkt") (lib "java/syntax/ast.rkt") (lib "java/inspector/inspector.rkt") (lib "java/java.scrbl") (lib "java/semantics/resolve-source.rkt") (lib "java/syntax/class-file.rkt") (lib "java/contract-utils.rkt"))) (name . "java") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (author:dherman@mozilla.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "git://github.com/jbclements/java") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "c2d1359b05567fb9352178cedeba2dfc30ddc9ca") (source . "git://github.com/jbclements/java") (source_url . "http://github.com/jbclements/java/tree/master"))))))) ("java-lexer" . #hasheq((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/java-lexer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/java-lexer.txt"))) (checksum . "83e12122919d4582d63bea5b051cbeab6ee32c57") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "profj" "scribble-lib")) (description . "Java syntax highlighting for Scribble.") (implies . ()) (last-checked . 1632903424) (last-edit . 1422290537) (last-updated . 1502816142) (modules . ((lib "java-lexer/lang/reader.rkt") (lib "java-lexer/main.rkt"))) (name . "java-lexer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stamourv@racket-lang.org . #t) (java . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/stamourv/java-lexer") (tags . ("java" "scribble")) (versions . #hash((default . #hasheq((checksum . "83e12122919d4582d63bea5b051cbeab6ee32c57") (source . "git://github.com/stamourv/java-lexer") (source_url . "http://github.com/stamourv/java-lexer/tree/master"))))))) ("java-processing" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/java-processing.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/java-processing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/java-processing.txt"))) (checksum . "8a232dac0405edf13067397364c9dbd702addca6") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("racket-to")) (description . "The minimal amount of code necessary to write processing code in DrRacket (so I don't have to switch students to a different IDE in my classes).") (implies . ()) (last-checked . 1632903425) (last-edit . 1515359369) (last-updated . 1515359369) (modules . ((lib "java-processing/processing-module.rkt") (lib "java-processing/main.rkt"))) (name . "java-processing") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/java-processing.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8a232dac0405edf13067397364c9dbd702addca6") (source . "https://github.com/thoughtstem/java-processing.git") (source_url . "https://github.com/thoughtstem/java-processing.git"))))))) ("javascript" . #hasheq((author . "samth@racket-lang.org") (authors . ("samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "javascript" "doc/javascript@javascript/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/javascript.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/javascript.txt"))) (checksum . "327c2de5e09f885b682f80524ff3c12ef6c47543") (checksum-error . #f) (collection . "javascript") (conflicts . ()) (dependencies . ("base" "compatibility-lib" "drracket-plugin-lib" "gui-lib" "parameter" "parser-tools-lib" "planet-lib" "scheme-lib" "set" "srfi-lite-lib" "string-constants-lib" "unstable-contract-lib" "pprint" "in-new-directory" "parser-tools-doc" "racket-doc" "rackunit-lib" "scribble-lib" "unstable-doc")) (description . "An implementation of JavaScript") (implies . ()) (last-checked . 1632903425) (last-edit . 1451684329) (last-updated . 1524366175) (modules . ((lib "javascript/debug.rkt") (lib "javascript/private/evector.rkt") (lib "javascript/lang/lang.rkt") (lib "javascript/lang/module.rkt") (lib "javascript/scribblings/utils.rkt") (lib "javascript/private/syntax/ast-utils.rkt") (lib "javascript/private/runtime/object.rkt") (lib "javascript/private/tests/parse.rkt") (lib "javascript/scribblings/config.scrbl") (lib "javascript/private/runtime/runtime.rkt") (lib "javascript/scribblings/eval.scrbl") (lib "javascript/print.rkt") (lib "javascript/private/runtime/exceptions.rkt") (lib "javascript/private/compiler/compile.rkt") (lib "javascript/drscheme/syntax-color.rkt") (lib "javascript/private/tests/pretty-print.rkt") (lib "javascript/private/syntax/cursor.rkt") (lib "javascript/scribblings/intro.scrbl") (lib "javascript/private/runtime/standard-library.rkt") (lib "javascript/private/runtime/namespace.rkt") (lib "javascript/scribblings/javascript.scrbl") (lib "javascript/drscheme/debug-console.rkt") (lib "javascript/private/syntax/regexps.rkt") (lib "javascript/main.rkt") (lib "javascript/scribblings/compile.scrbl") (lib "javascript/config.rkt") (lib "javascript/private/runtime/operator.rkt") (lib "javascript/private/compiler/hoist-monad.rkt") (lib "javascript/compile.rkt") (lib "javascript/private/runtime/value.rkt") (lib "javascript/drscheme/tool.rkt") (lib "javascript/private/compiler/context.rkt") (lib "javascript/private/syntax/syntax.rkt") (lib "javascript/pjs.rkt") (lib "javascript/scribblings/pjs.scrbl") (lib "javascript/lang/reader.rkt") (lib "javascript/private/syntax/exceptions.rkt") (lib "javascript/private/config.rkt") (lib "javascript/private/syntax/token.rkt") (lib "javascript/ast.rkt") (lib "javascript/private/syntax/lex.rkt") (lib "javascript/private/syntax/parse.rkt") (lib "javascript/private/tests/test.rkt") (lib "javascript/private/syntax/input.rkt") (lib "javascript/runtime.rkt") (lib "javascript/scribblings/print.scrbl") (lib "javascript/scribblings/runtime.scrbl") (lib "javascript/private/runtime/gui-library.rkt") (lib "javascript/scribblings/parse.scrbl") (lib "javascript/drscheme/module-forms.rkt") (lib "javascript/private/runtime/native.rkt") (lib "javascript/private/tests/eval.rkt") (lib "javascript/scribblings/ast.scrbl") (lib "javascript/parse.rkt") (lib "javascript/private/tests/util.rkt") (lib "javascript/eval.rkt") (lib "javascript/private/syntax/abstract-regexps.rkt") (lib "javascript/private/compiler/helpers.rkt") (lib "javascript/private/syntax/ast-core.rkt") (lib "javascript/scribblings/history.scrbl") (lib "javascript/private/tests/array.rkt") (lib "javascript/private/compiler/hoist.rkt") (lib "javascript/private/planet.rkt"))) (name . "javascript") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:samth@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/samth/javascript.plt") (tags . ()) (versions . #hash((default . #hasheq((checksum . "327c2de5e09f885b682f80524ff3c12ef6c47543") (source . "git://github.com/samth/javascript.plt") (source_url . "http://github.com/samth/javascript.plt/tree/master"))))))) ("jen" . #hasheq((author . "helado.de.brownie@gmail.com") (authors . ("helado.de.brownie@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jen.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jen.txt"))) (checksum . "8af59d936c0218d4460eebcbeabc52aae1b6d58e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1577590435) (dependencies . ("jen-lib" "jen-doc" "jen-samples")) (description . "procedural generation DSL embedded in Racket [UNSTABLE]") (implies . ("jen-lib")) (last-checked . 1632903426) (last-edit . 1578180895) (last-updated . 1578359154) (modules . ()) (name . "jen") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:helado.de.brownie@gmail.com . #t) (procgen . #t) (ring:1 . #t) (text . #t))) (source . "https://github.com/HeladoDeBrownie/jen.git?path=jen#Unstable") (tags . ("procgen" "text")) (versions . #hash((default . #hasheq((checksum . "8af59d936c0218d4460eebcbeabc52aae1b6d58e") (source . "https://github.com/HeladoDeBrownie/jen.git?path=jen#Unstable") (source_url . "https://github.com/HeladoDeBrownie/jen.git?path=jen#Unstable"))))))) ("jen-doc" . #hasheq((author . "helado.de.brownie@gmail.com") (authors . ("helado.de.brownie@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "jen" "doc/jen@jen-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jen-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jen-doc.txt"))) (checksum . "8af59d936c0218d4460eebcbeabc52aae1b6d58e") (checksum-error . #f) (collection . "jen") (conflicts . ()) (date-added . 1578005497) (dependencies . ("base" "jen-lib" "racket-doc" "scribble-lib")) (description . "procedural generation DSL embedded in Racket (doc) [UNSTABLE]") (implies . ()) (last-checked . 1632903426) (last-edit . 1578181016) (last-updated . 1578359155) (modules . ((lib "jen/scribblings/jen.scrbl") (lib "jen/scribblings/reference.scrbl") (lib "jen/scribblings/guide.scrbl"))) (name . "jen-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:helado.de.brownie@gmail.com . #t) (procgen . #t) (ring:1 . #t) (text . #t))) (source . "https://github.com/HeladoDeBrownie/jen.git?path=jen-doc#Unstable") (tags . ("procgen" "text")) (versions . #hash((default . #hasheq((checksum . "8af59d936c0218d4460eebcbeabc52aae1b6d58e") (source . "https://github.com/HeladoDeBrownie/jen.git?path=jen-doc#Unstable") (source_url . "https://github.com/HeladoDeBrownie/jen.git?path=jen-doc#Unstable"))))))) ("jen-lib" . #hasheq((author . "helado.de.brownie@gmail.com") (authors . ("helado.de.brownie@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jen-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jen-lib.txt"))) (checksum . "8af59d936c0218d4460eebcbeabc52aae1b6d58e") (checksum-error . #f) (collection . "jen") (conflicts . ()) (date-added . 1578005480) (dependencies . ("base")) (description . "procedural generation DSL embedded in Racket (lib) [UNSTABLE]") (implies . ()) (last-checked . 1632903426) (last-edit . 1578180990) (last-updated . 1578359155) (modules . ((lib "jen/preconditions.rkt") (lib "jen/syntax.rkt") (lib "jen/private/weighted-set.rkt") (lib "jen/sequential.rkt") (lib "jen/base.rkt") (lib "jen/main.rkt"))) (name . "jen-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:helado.de.brownie@gmail.com . #t) (procgen . #t) (ring:1 . #t) (text . #t))) (source . "https://github.com/HeladoDeBrownie/jen.git?path=jen-lib#Unstable") (tags . ("procgen" "text")) (versions . #hash((default . #hasheq((checksum . "8af59d936c0218d4460eebcbeabc52aae1b6d58e") (source . "https://github.com/HeladoDeBrownie/jen.git?path=jen-lib#Unstable") (source_url . "https://github.com/HeladoDeBrownie/jen.git?path=jen-lib#Unstable"))))))) ("jen-samples" . #hasheq((author . "helado.de.brownie@gmail.com") (authors . ("helado.de.brownie@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jen-samples.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jen-samples.txt"))) (checksum . "8af59d936c0218d4460eebcbeabc52aae1b6d58e") (checksum-error . #f) (collection . "jen") (conflicts . ()) (date-added . 1578005525) (dependencies . ("base" "jen-lib" "pict-lib")) (description . "procedural generation DSL embedded in Racket (samples) [UNSTABLE]") (implies . ()) (last-checked . 1632903426) (last-edit . 1578180944) (last-updated . 1578359156) (modules . ((lib "jen/samples/cat-sentences.rkt") (lib "jen/samples/rectangles.rkt"))) (name . "jen-samples") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:helado.de.brownie@gmail.com . #t) (procgen . #t) (ring:1 . #t) (text . #t))) (source . "https://github.com/HeladoDeBrownie/jen.git?path=jen-samples#Unstable") (tags . ("procgen" "text")) (versions . #hash((default . #hasheq((checksum . "8af59d936c0218d4460eebcbeabc52aae1b6d58e") (source . "https://github.com/HeladoDeBrownie/jen.git?path=jen-samples#Unstable") (source_url . "https://github.com/HeladoDeBrownie/jen.git?path=jen-samples#Unstable"))))))) ("job-queue" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/job-queue.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/job-queue.txt"))) (checksum . "0a2c349636aa88b06c9c299ef201494df648b164") (checksum-error . #f) (collection . "job-queue") (conflicts . ()) (dependencies . ("base" "job-queue-lib" "job-queue-doc")) (description . "A library for managing sets of workers and their jobs.") (implies . ()) (last-checked . 1632903427) (last-edit . 1490026009) (last-updated . 1502816142) (modules . ()) (name . "job-queue") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (concurrency . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/job-queue?path=job-queue") (tags . ("concurrency")) (versions . #hash((default . #hasheq((checksum . "0a2c349636aa88b06c9c299ef201494df648b164") (source . "git://github.com/jeapostrophe/job-queue?path=job-queue") (source_url . "http://github.com/jeapostrophe/job-queue/tree/master?path=job-queue"))))))) ("job-queue-doc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "job-queue" "doc/job-queue@job-queue-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/job-queue-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/job-queue-doc.txt"))) (checksum . "0a2c349636aa88b06c9c299ef201494df648b164") (checksum-error . #f) (collection . "job-queue") (conflicts . ()) (dependencies . ("base" "job-queue-lib" "racket-doc" "scribble-lib")) (description . "A library for managing sets of workers and their jobs. (doc)") (implies . ()) (last-checked . 1632903427) (last-edit . 1504535594) (last-updated . 1502816143) (modules . ((lib "job-queue/job-queue.scrbl"))) (name . "job-queue-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (concurrency . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/job-queue?path=job-queue-doc") (tags . ("concurrency")) (versions . #hash((default . #hasheq((checksum . "0a2c349636aa88b06c9c299ef201494df648b164") (source . "git://github.com/jeapostrophe/job-queue?path=job-queue-doc") (source_url . "http://github.com/jeapostrophe/job-queue/tree/master?path=job-queue-doc"))))))) ("job-queue-lib" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/job-queue-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/job-queue-lib.txt"))) (checksum . "0a2c349636aa88b06c9c299ef201494df648b164") (checksum-error . #f) (collection . "job-queue") (conflicts . ()) (dependencies . ("base")) (description . "A library for managing sets of workers and their jobs. (lib)") (implies . ()) (last-checked . 1632903427) (last-edit . 1504535520) (last-updated . 1502816143) (modules . ((lib "job-queue/main.rkt"))) (name . "job-queue-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (concurrency . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/job-queue?path=job-queue-lib") (tags . ("concurrency")) (versions . #hash((default . #hasheq((checksum . "0a2c349636aa88b06c9c299ef201494df648b164") (source . "git://github.com/jeapostrophe/job-queue?path=job-queue-lib") (source_url . "http://github.com/jeapostrophe/job-queue/tree/master?path=job-queue-lib"))))))) ("js-voxel" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "voxel" "doc/voxel@js-voxel/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/js-voxel.txt") (test-failure-log . "server/built/test-fail/js-voxel.txt") (test-success-log . #f))) (checksum . "7a97d657b2d4729c1f79aa2fb52435eadff92650") (checksum-error . #f) (collection . "voxel") (conflicts . ()) (date-added . 1570642534) (dependencies . ("base" "glm" "rfc6455" "web-server-lib" "racket-doc" "scribble-lib")) (description . "A general-purpose voxel programming environment") (implies . ()) (last-checked . 1632903427) (last-edit . 1573161041) (last-updated . 1573161041) (modules . ((lib "voxel/examples/axes.rkt") (lib "voxel/examples/lines.rkt") (lib "voxel/voxel.rkt") (lib "voxel/the-lang.rkt") (lib "voxel/scribblings/voxel.scrbl") (lib "voxel/run.rkt") (lib "voxel/line.rkt") (lib "voxel/vector.rkt") (lib "voxel/color.rkt") (lib "voxel/examples/lines-and-cuboids.rkt") (lib "voxel/main.rkt") (lib "voxel/examples/axes-cube.rkt") (lib "voxel/cuboid.rkt") (lib "voxel/draw.rkt") (lib "voxel/web-server.rkt") (lib "voxel/web-socket-server.rkt"))) (name . "js-voxel") (ring . 1) (search-terms . #hasheq((3D . #t) (:build-success: . #t) (:docs: . #t) (author:dedbox@gmail.com . #t) (graphics . #t) (lang . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-js-voxel.git") (tags . ("3D" "graphics" "lang")) (versions . #hash((default . #hasheq((checksum . "7a97d657b2d4729c1f79aa2fb52435eadff92650") (source . "https://github.com/dedbox/racket-js-voxel.git") (source_url . "https://github.com/dedbox/racket-js-voxel.git"))))))) ("json-parsing" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "json-parsing" "doc/json-parsing@json-parsing/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/json-parsing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/json-parsing.txt"))) (checksum . "28a5d163d4785990b265ff5d3499e8ce594c672d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "JSON Parsing, Folding, and Conversion") (implies . ()) (last-checked . 1632903427) (last-edit . 1456463303) (last-updated . 1601439863) (modules . ((lib "json-parsing/json-parsing.scrbl") (lib "json-parsing/main.rkt"))) (name . "json-parsing") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (json . #t) (ring:1 . #t) (sxml . #t))) (source . "http://www.neilvandyke.org/racket/json-parsing.zip") (tags . ("json" "sxml")) (versions . #hash((default . #hasheq((checksum . "28a5d163d4785990b265ff5d3499e8ce594c672d") (source . "http://www.neilvandyke.org/racket/json-parsing.zip") (source_url . "http://www.neilvandyke.org/racket/json-parsing.zip"))))))) ("json-pointer" . #hasheq((author . "jesse@serverracket.com jesse@lisp.sh") (authors . ("jesse@serverracket.com" "jesse@lisp.sh")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "json-pointer" "doc/json-pointer@json-pointer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/json-pointer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/json-pointer.txt"))) (checksum . "73e97e426eff151ffd705059771c5c92f2da4697") (checksum-error . #f) (collection . "json-pointer") (conflicts . ()) (date-added . 1607664669) (dependencies . ("base" "rackunit-lib" "ejs" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Parse, render, and evaluate JSON Pointers (RFC 6901).") (implies . ()) (last-checked . 1632903428) (last-edit . 1607664669) (last-updated . 1616842507) (modules . ((lib "json-pointer/scribblings/eval.scrbl") (lib "json-pointer/escape.rkt") (lib "json-pointer/scribblings/json-pointer.scrbl") (lib "json-pointer/scribblings/parse.scrbl") (lib "json-pointer/scribblings/expr.scrbl") (lib "json-pointer/json.rkt") (lib "json-pointer/eval.rkt") (lib "json-pointer/scribblings/license.scrbl") (lib "json-pointer/parser.rkt") (lib "json-pointer/expr.rkt") (lib "json-pointer/main.rkt"))) (name . "json-pointer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse@lisp.sh . #t) (author:jesse@serverracket.com . #t) (json . #t) (ring:1 . #t))) (source . "https://github.com/jessealama/json-pointer.git") (tags . ("json")) (versions . #hash((default . #hasheq((checksum . "73e97e426eff151ffd705059771c5c92f2da4697") (source . "https://github.com/jessealama/json-pointer.git") (source_url . "https://github.com/jessealama/json-pointer.git"))))))) ("json-socket" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/json-socket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/json-socket.txt"))) (checksum . "0acf5117ed335133e30a4ab6593278a4534ac42e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1")) (description . "JSON-Talking TCP Sockets") (implies . ()) (last-checked . 1632903429) (last-edit . 1404737271) (last-updated . 1502816144) (modules . ((lib "json-socket/main.rkt"))) (name . "json-socket") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t) (tcp . #t))) (source . "github://github.com/mordae/racket-json-socket/master") (tags . ("tcp")) (versions . #hash((default . #hasheq((checksum . "0acf5117ed335133e30a4ab6593278a4534ac42e") (source . "github://github.com/mordae/racket-json-socket/master") (source_url . "http://github.com/mordae/racket-json-socket/tree/master"))))))) ("json-sourcery" . #hasheq((author . "adjkant@gmail.com") (authors . ("adjkant@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/json-sourcery.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "c6ee9a5de2f8a85dc58159dedeb1d2bb9a3f710f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1552422973) (dependencies . ("base" "json-sourcery-lib" "json-sourcery-doc")) (description . "A library built on top of the json package for improving JSON serialization and adding clearer syntax macros.") (implies . ("json-sourcery-lib" "json-sourcery-doc")) (last-checked . 1632903429) (last-edit . 1610422519) (last-updated . 1610423086) (modules . ()) (name . "json-sourcery") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:adjkant@gmail.com . #t) (json . #t) (racket-sourcery . #t) (ring:1 . #t) (serialization . #t))) (source . "https://github.com/adjkant/json-sourcery.git?path=json-sourcery#c6ee9a5de2f8a85dc58159dedeb1d2bb9a3f710f") (tags . ("json" "racket-sourcery" "serialization")) (versions . #hash((default . #hasheq((checksum . "c6ee9a5de2f8a85dc58159dedeb1d2bb9a3f710f") (source . "https://github.com/adjkant/json-sourcery.git?path=json-sourcery#c6ee9a5de2f8a85dc58159dedeb1d2bb9a3f710f") (source_url . "https://github.com/adjkant/json-sourcery.git?path=json-sourcery#c6ee9a5de2f8a85dc58159dedeb1d2bb9a3f710f"))))))) ("json-sourcery-lib" . #hasheq((author . "adjkant@gmail.com") (authors . ("adjkant@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/json-sourcery-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/json-sourcery-lib.txt"))) (checksum . "b8f98e44a2c98266315f9c8f78156972f6bc649d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1564280548) (dependencies . ("base" "syntax-classes")) (description . "library package for json-sourcery") (implies . ()) (last-checked . 1632903429) (last-edit . 1564280548) (last-updated . 1564280548) (modules . ()) (name . "json-sourcery-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:adjkant@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/adjkant/json-sourcery.git?path=json-sourcery-lib#b8f98e44a2c98266315f9c8f78156972f6bc649d") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b8f98e44a2c98266315f9c8f78156972f6bc649d") (source . "https://github.com/adjkant/json-sourcery.git?path=json-sourcery-lib#b8f98e44a2c98266315f9c8f78156972f6bc649d") (source_url . "https://github.com/adjkant/json-sourcery.git?path=json-sourcery-lib#b8f98e44a2c98266315f9c8f78156972f6bc649d"))))))) ("json-type-provider" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/json-type-provider.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/json-type-provider.txt"))) (checksum . "f96d3f212519f4ff2aef828e7b891971b82babb8") (checksum-error . #f) (collection . "json-comb") (conflicts . ()) (date-added . 1565841512) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "json-type-provider")) (description . "A well-typed JSON parser for Typed Racket inspired by Type Provider") (implies . ()) (last-checked . 1632903429) (last-edit . 1565841581) (last-updated . 1614328374) (modules . ((lib "json-comb/main.rkt") (lib "json-comb/read.rkt") (lib "json-comb/test/coords.rkt") (lib "json-comb/test/cards.rkt") (lib "json-comb/test/complex.rkt") (lib "json-comb/test/london_weather.rkt"))) (name . "json-type-provider") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pcn@cs.umd.edu . #t) (json . #t) (parser . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/philnguyen/json-type-provider.git?path=json-type-provider") (tags . ("json" "parser" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "f96d3f212519f4ff2aef828e7b891971b82babb8") (source . "https://github.com/philnguyen/json-type-provider.git?path=json-type-provider") (source_url . "https://github.com/philnguyen/json-type-provider.git?path=json-type-provider"))))))) ("jsond" . #hasheq((author . "ben.knoble+racket@gmail.com") (authors . ("ben.knoble+racket@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "jsond" "doc/jsond@jsond/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jsond.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jsond.txt"))) (checksum . "27be12948237532135616673aa96cc408b29e4d6") (checksum-error . #f) (collection . "jsond") (conflicts . ()) (date-added . 1628276920) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "A #lang for JSON data") (implies . ()) (last-checked . 1632903430) (last-edit . 1628276920) (last-updated . 1628276920) (modules . ((lib "jsond/examples/lisp.rkt") (lib "jsond/main.rkt") (lib "jsond/scribblings/jsond.scrbl") (lib "jsond/examples/data.rkt"))) (name . "jsond") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ben.knoble+racket@gmail.com . #t) (data . #t) (json . #t) (lang . #t) (ring:1 . #t))) (source . "https://github.com/benknoble/jsond.git#main") (tags . ("data" "json" "lang")) (versions . #hash((default . #hasheq((checksum . "27be12948237532135616673aa96cc408b29e4d6") (source . "https://github.com/benknoble/jsond.git#main") (source_url . "https://github.com/benknoble/jsond.git#main"))))))) ("jsonic-mjz" . #hasheq((author . "") (authors . ()) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/jsonic-mjz.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Package jsonic-mjz is missing a required field: 'source\n  context...:\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (implies . ()) (last-checked . 1632903430) (last-edit . 1632906423) (last-updated . 1621814090) (modules . ()) (name . "jsonic-mjz") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (ring:1 . #t))) (source . "") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "") (source_url . ""))))))) ("jsonrpc" . #hasheq((author . "") (authors . ()) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "jsonrpc" "doc/jsonrpc@jsonrpc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/jsonrpc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/jsonrpc.txt"))) (checksum . "") (checksum-error . "pkg: Package jsonrpc is missing a required field: 'source\n  context...:\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (implies . ()) (last-checked . 1632903430) (last-edit . 1632906423) (last-updated . 1630430392) (modules . ()) (name . "jsonrpc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (ring:1 . #t))) (source . "") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "") (source_url . ""))))))) ("k" . #hasheq((author . "dannypsnl@gmail.com racket@racket.tw cyb.ai.815@gmail.com") (authors . ("dannypsnl@gmail.com" "racket@racket.tw" "cyb.ai.815@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/k.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "43f491fe92037aef8571fcc42cf0638a27996c89") (checksum-error . #f) (collection . "k") (conflicts . ()) (date-added . 1629126585) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "k theorem prover") (implies . ()) (last-checked . 1632903430) (last-edit . 1630431723) (last-updated . 1631935005) (modules . ((lib "k/lib/bind.rkt") (lib "k/lib/check.rkt") (lib "k/base.rkt") (lib "k/scribblings/k.scrbl") (lib "k/lib/core.rkt") (lib "k/test/equality.rkt") (lib "k/lib/data.rkt") (lib "k/data/nat.rkt") (lib "k/data/list.rkt") (lib "k/main.rkt") (lib "k/equality.rkt") (lib "k/lib/def.rkt") (lib "k/example/check-equality.rkt") (lib "k/lib/type.rkt") (lib "k/data/fin.rkt") (lib "k/example/dep-on-term.rkt") (lib "k/example/id.rkt") (lib "k/data/bool.rkt") (lib "k/example/nat-thms.rkt") (lib "k/scribblings/helper.rkt") (lib "k/data/vec.rkt") (lib "k/scribblings/library.scrbl") (lib "k/lib/typeof.rkt") (lib "k/scribblings/language.scrbl"))) (name . "k") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:cyb.ai.815@gmail.com . #t) (author:dannypsnl@gmail.com . #t) (author:racket@racket.tw . #t) (proofs . #t) (ring:1 . #t))) (source . "https://github.com/racket-tw/k.git#develop") (tags . ("proofs")) (versions . #hash((default . #hasheq((checksum . "43f491fe92037aef8571fcc42cf0638a27996c89") (source . "https://github.com/racket-tw/k.git#develop") (source_url . "https://github.com/racket-tw/k.git#develop"))))))) ("k-infix" . #hasheq((author . "macocio@gmail.com") (authors . ("macocio@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "k-infix" "doc/k-infix@k-infix/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/k-infix.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/k-infix.txt"))) (checksum . "07ed4c23905ea8b2b85a5f321d56ad038170766f") (checksum-error . #f) (collection . "k-infix") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "sandbox-lib" "scribble-lib" "racket-doc" "memoize")) (description . "Simple but versatile infix parsing for arbitrary expressions. Fully customizable. Comes with basic math expressions implemented.") (implies . ()) (last-checked . 1632903430) (last-edit . 1511202550) (last-updated . 1511489204) (modules . ((lib "k-infix/private/primitive.rkt") (lib "k-infix/private/parse-lookup-entry.rkt") (lib "k-infix/private/default-parse-table.rkt") (lib "k-infix/custom.rkt") (lib "k-infix/scribblings/k-infix.scrbl") (lib "k-infix/main.rkt") (lib "k-infix/define.rkt") (lib "k-infix/test.rkt") (lib "k-infix/private/helper.rkt"))) (name . "k-infix") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:macocio@gmail.com . #t) (infix . #t) (ring:1 . #t))) (source . "https://github.com/BourgondAries/k-infix.git") (tags . ("infix")) (versions . #hash((default . #hasheq((checksum . "07ed4c23905ea8b2b85a5f321d56ad038170766f") (source . "https://github.com/BourgondAries/k-infix.git") (source_url . "https://github.com/BourgondAries/k-infix.git"))))))) ("k2" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/k2.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9ffa2368aef7ccc9f823fc28f99ba97a2327c4c9") (checksum-error . "pkg: specified directory is not in Git respository\n  path: k2\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:913:0: lift-git-directory-content\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:318:11\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:114:0: stage-package/info\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:720:0: pkg-stage\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:129:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (date-added . 1550851101) (dependencies . ("https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-kata-util" "https://github.com/thoughtstem/TS-Languages.git?path=battlearena-avengers" "https://github.com/thoughtstem/TS-Languages.git?path=survival" "https://github.com/thoughtstem/ratchet.git")) (description . "Some visual and social teaching languages.   ") (implies . ()) (last-checked . 1632903431) (last-edit . 1550852777) (last-updated . 1621814091) (modules . ((lib "k2/lang/base-lang.rkt") (lib "k2/lang/hero/powers.rkt") (lib "k2/lang/hero/basic.rkt") (lib "k2/main.rkt") (lib "k2/lang/zoo/coins.rkt") (lib "k2/examples/sea.rkt") (lib "k2/lang/ocean/fish2.rkt") (lib "k2/examples/zoo.rkt") (lib "k2/test/heros.rkt") (lib "k2/lang/reyouse/recycle.rkt") (lib "k2/lang/farm/foods.rkt") (lib "k2/lang/sea/friends.rkt") (lib "k2/scribblings/manual.scrbl") (lib "k2/lang/animal/foods.rkt") (lib "k2/lang/hero/items.rkt") (lib "k2/lang/animal/animal-lang.rkt") (lib "k2/lang/main.rkt") (lib "k2/assets/all.rkt") (lib "k2/lang/animal/basic.rkt") (lib "k2/lang/zoo/friends.rkt") (lib "k2/examples/farm.rkt") (lib "k2/assets.rkt") (lib "k2/examples.rkt") (lib "k2/lang.rkt") (lib "k2/lang/sea/foods.rkt") (lib "k2/lang/sea/coins.rkt") (lib "k2/examples/animal.rkt") (lib "k2/lang/zoo/foods.rkt") (lib "k2/lang/sea/enemies.rkt") (lib "k2/lang/farm/enemies.rkt") (lib "k2/lang/animal/enemies.rkt") (lib "k2/lang/icons.rkt") (lib "k2/lang/ocean/ocean-lang.rkt") (lib "k2/examples/hero.rkt") (lib "k2/lang/animal/friends.rkt") (lib "k2/lang/animal/animal-asset-friendly-names.rkt") (lib "k2/lang/hero/hero-lang.rkt") (lib "k2/lang/ocean/fish.rkt") (lib "k2/examples/ocean.rkt") (lib "k2/lang/farm/coins.rkt"))) (name . "k2") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/TS-Languages.git?path=k2") (tags . ()) (versions . #hash((default . #hasheq((checksum . "9ffa2368aef7ccc9f823fc28f99ba97a2327c4c9") (source . "https://github.com/thoughtstem/TS-Languages.git?path=k2") (source_url . "https://github.com/thoughtstem/TS-Languages.git?path=k2"))))))) ("kenney-assets" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/kenney-assets.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9aaf058030bd611331b1fcae1bf62f295483dd43") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1569617908) (dependencies . ("https://github.com/thoughtstem/define-assets-from.git" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A package of public domain assets by https://www.kenney.nl/") (implies . ()) (last-checked . 1632903431) (last-edit . 1569618004) (last-updated . 1572995890) (modules . ((lib "kenney-assets/scribblings/kenney-assets.scrbl") (lib "kenney-assets/coins.rkt") (lib "kenney-assets/main.rkt") (lib "kenney-assets/credits.rkt") (lib "kenney-assets/foods.rkt") (lib "kenney-assets/emotes.rkt") (lib "kenney-assets/characters.rkt") (lib "kenney-assets/world-objects.rkt") (lib "kenney-assets/bgs.rkt") (lib "kenney-assets/misc.rkt") (lib "kenney-assets/vehicles.rkt"))) (name . "kenney-assets") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/kenney-assets.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "9aaf058030bd611331b1fcae1bf62f295483dd43") (source . "https://github.com/thoughtstem/kenney-assets.git") (source_url . "https://github.com/thoughtstem/kenney-assets.git"))))))) ("kernel" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kernel.txt") (test-failure-log . "server/built/test-fail/kernel.txt") (test-success-log . #f))) (checksum . "8602042a9d6109399dfa7f492b5af7af6c88f597") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "rtnl" "sysfs")) (description . "Interface to Linux kernel runtime configuration.") (implies . ()) (last-checked . 1632903432) (last-edit . 1405684736) (last-updated . 1502816144) (modules . ((lib "kernel/private/socket.rkt") (lib "kernel/private/ffi.rkt") (lib "kernel/private/sysfs-util.rkt") (lib "kernel/link.rkt") (lib "kernel/main.rkt") (lib "kernel/private/sysfs-net.rkt") (lib "kernel/address.rkt"))) (name . "kernel") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mordae@anilinux.org . #t) (linux . #t) (net . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-kernel/master") (tags . ("linux" "net")) (versions . #hash((default . #hasheq((checksum . "8602042a9d6109399dfa7f492b5af7af6c88f597") (source . "github://github.com/mordae/racket-kernel/master") (source_url . "http://github.com/mordae/racket-kernel/tree/master"))))))) ("keyring" . #hasheq((author . "samdphillips@gmail.com") (authors . ("samdphillips@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "keyring" "doc/keyring@keyring/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/keyring.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/keyring.txt"))) (checksum . "b94d316071f10b14c32bf7398d45d849348e680d") (checksum-error . #f) (collection . "keyring") (conflicts . ()) (date-added . 1602014818) (dependencies . ("base" "keyring-lib" "base" "keyring-lib" "racket-doc" "scribble-lib")) (description . "a library for uniformly accessing secrets") (implies . ("keyring-lib")) (last-checked . 1632903433) (last-edit . 1614377867) (last-updated . 1618772121) (modules . ((lib "keyring/scribblings/keyring.scrbl"))) (name . "keyring") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samdphillips@gmail.com . #t) (keyring . #t) (password . #t) (ring:1 . #t))) (source . "https://github.com/samdphillips/racket-keyring.git?path=keyring#release") (tags . ("keyring" "password")) (versions . #hash((default . #hasheq((checksum . "b94d316071f10b14c32bf7398d45d849348e680d") (source . "https://github.com/samdphillips/racket-keyring.git?path=keyring#release") (source_url . "https://github.com/samdphillips/racket-keyring.git?path=keyring#release"))))))) ("keyring-get-pass-lib" . #hasheq((author . "samdphillips@gmail.com") (authors . ("samdphillips@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/keyring-get-pass-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/keyring-get-pass-lib.txt"))) (checksum . "b94d316071f10b14c32bf7398d45d849348e680d") (checksum-error . #f) (collection . "keyring") (conflicts . ()) (date-added . 1602109435) (dependencies . ("base" "get-pass" "keyring-lib" "base" "rackunit-lib")) (description . "Keyring backend using get-pass") (implies . ()) (last-checked . 1632903433) (last-edit . 1614378013) (last-updated . 1618772122) (modules . ((lib "keyring/backend/get-pass.rkt"))) (name . "keyring-get-pass-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samdphillips@gmail.com . #t) (get-pass . #t) (keyring . #t) (password . #t) (ring:1 . #t))) (source . "https://github.com/samdphillips/racket-keyring.git?path=keyring-get-pass-lib#release") (tags . ("get-pass" "keyring" "password")) (versions . #hash((default . #hasheq((checksum . "b94d316071f10b14c32bf7398d45d849348e680d") (source . "https://github.com/samdphillips/racket-keyring.git?path=keyring-get-pass-lib#release") (source_url . "https://github.com/samdphillips/racket-keyring.git?path=keyring-get-pass-lib#release"))))))) ("keyring-keychain-lib" . #hasheq((author . "samdphillips@gmail.com") (authors . ("samdphillips@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/keyring-keychain-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/keyring-keychain-lib.txt"))) (checksum . "b94d316071f10b14c32bf7398d45d849348e680d") (checksum-error . #f) (collection . "keyring") (conflicts . ()) (date-added . 1614388060) (dependencies . ("base" "keyring-lib" "base" "rackunit-lib")) (description . "Keyring backend using MacOS Keychain") (implies . ()) (last-checked . 1632903433) (last-edit . 1614408209) (last-updated . 1618772123) (modules . ((lib "keyring/backend/keychain.rkt") (lib "keyring/backend/private/keychain.rkt"))) (name . "keyring-keychain-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samdphillips@gmail.com . #t) (keyring . #t) (password . #t) (ring:1 . #t))) (source . "https://github.com/samdphillips/racket-keyring.git?path=keyring-keychain-lib#release") (tags . ("keyring" "password")) (versions . #hash((default . #hasheq((checksum . "b94d316071f10b14c32bf7398d45d849348e680d") (source . "https://github.com/samdphillips/racket-keyring.git?path=keyring-keychain-lib#release") (source_url . "https://github.com/samdphillips/racket-keyring.git?path=keyring-keychain-lib#release"))))))) ("keyring-lib" . #hasheq((author . "samdphillips@gmail.com") (authors . ("samdphillips@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/keyring-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/keyring-lib.txt"))) (checksum . "b94d316071f10b14c32bf7398d45d849348e680d") (checksum-error . #f) (collection . "keyring") (conflicts . ()) (date-added . 1602014647) (dependencies . ("base" "base" "rackunit-lib")) (description . "Implementation of the keyring package.") (implies . ()) (last-checked . 1632903433) (last-edit . 1614378027) (last-updated . 1618772123) (modules . ((lib "keyring/cli.rkt") (lib "keyring/main.rkt") (lib "keyring/backend/env.rkt") (lib "keyring/backend/test-no-constr.rkt") (lib "keyring/interface.rkt") (lib "keyring/private/backends.rkt") (lib "keyring/private/interface.rkt") (lib "keyring/backend/test.rkt") (lib "keyring/private/error.rkt"))) (name . "keyring-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samdphillips@gmail.com . #t) (keyring . #t) (password . #t) (ring:1 . #t))) (source . "https://github.com/samdphillips/racket-keyring.git?path=keyring-lib#release") (tags . ("keyring" "password")) (versions . #hash((default . #hasheq((checksum . "b94d316071f10b14c32bf7398d45d849348e680d") (source . "https://github.com/samdphillips/racket-keyring.git?path=keyring-lib#release") (source_url . "https://github.com/samdphillips/racket-keyring.git?path=keyring-lib#release"))))))) ("keyring-secret-service-lib" . #hasheq((author . "samdphillips@gmail.com") (authors . ("samdphillips@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/keyring-secret-service-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/keyring-secret-service-lib.txt"))) (checksum . "b94d316071f10b14c32bf7398d45d849348e680d") (checksum-error . #f) (collection . "keyring") (conflicts . ()) (date-added . 1602109371) (dependencies . ("base" "dbus" "keyring-lib" "base" "rackunit-lib")) (description . "Keyring backend using Freedesktop Secret Service") (implies . ()) (last-checked . 1632903433) (last-edit . 1614378041) (last-updated . 1618772124) (modules . ((lib "keyring/backend/private/secret-service.rkt") (lib "keyring/backend/secret-service.rkt"))) (name . "keyring-secret-service-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samdphillips@gmail.com . #t) (keyring . #t) (password . #t) (ring:1 . #t))) (source . "https://github.com/samdphillips/racket-keyring.git?path=keyring-secret-service-lib#release") (tags . ("keyring" "password")) (versions . #hash((default . #hasheq((checksum . "b94d316071f10b14c32bf7398d45d849348e680d") (source . "https://github.com/samdphillips/racket-keyring.git?path=keyring-secret-service-lib#release") (source_url . "https://github.com/samdphillips/racket-keyring.git?path=keyring-secret-service-lib#release"))))))) ("kinda-ferpy" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "kinda-ferpy" "doc/kinda-ferpy@kinda-ferpy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kinda-ferpy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/kinda-ferpy.txt"))) (checksum . "1523284752332fa0379a0c25798551e5db760b28") (checksum-error . #f) (collection . "kinda-ferpy") (conflicts . ()) (date-added . 1580076427) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "An implicit functional reactive model based on MaiaVictor's PureState library") (implies . ()) (last-checked . 1632903434) (last-edit . 1613094060) (last-updated . 1627492636) (modules . ((lib "kinda-ferpy/main.rkt") (lib "kinda-ferpy/scribblings/kinda-ferpy.scrbl"))) (name . "kinda-ferpy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sage@sagegerard.com . #t) (frp . #t) (functional . #t) (functional-reactive . #t) (reactive . #t) (ring:1 . #t))) (source . "https://github.com/zyrolasting/kinda-ferpy.git") (tags . ("frp" "functional" "functional-reactive" "reactive")) (versions . #hash((default . #hasheq((checksum . "1523284752332fa0379a0c25798551e5db760b28") (source . "https://github.com/zyrolasting/kinda-ferpy.git") (source_url . "https://github.com/zyrolasting/kinda-ferpy.git"))))))) ("kitco" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "kitco" "doc/kitco@kitco/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kitco.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/kitco.txt"))) (checksum . "f26e9472df8d0fd74c6128d9c342d205c4003916") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Precious Metals Market Info. Access") (implies . ()) (last-checked . 1632903434) (last-edit . 1456713739) (last-updated . 1601439929) (modules . ((lib "kitco/main.rkt") (lib "kitco/kitco.scrbl"))) (name . "kitco") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (finance . #t) (ring:1 . #t) (sxml . #t))) (source . "http://www.neilvandyke.org/racket/kitco.zip") (tags . ("finance" "sxml")) (versions . #hash((default . #hasheq((checksum . "f26e9472df8d0fd74c6128d9c342d205c4003916") (source . "http://www.neilvandyke.org/racket/kitco.zip") (source_url . "http://www.neilvandyke.org/racket/kitco.zip"))))))) ("kittle-buffer" . #hasheq((author . "zhuoql@zoho.com") (authors . ("zhuoql@zoho.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kittle-buffer.txt") (test-failure-log . "server/built/test-fail/kittle-buffer.txt") (test-success-log . #f))) (checksum . "d925aa15f7f89b406982a44ed5c4ea1ec5132102") (checksum-error . #f) (collection . "kittle-buffer") (conflicts . ()) (date-added . 1616041864) (dependencies . ("base" "gui" "draw" "srfi")) (description . "An extended Brainf**k implementation.") (implies . ()) (last-checked . 1632903435) (last-edit . 1616041864) (last-updated . 1619323631) (modules . ((lib "kittle-buffer/kbf.rkt") (lib "kittle-buffer/res/logo-drawing.rkt") (lib "kittle-buffer/main.rkt") (lib "kittle-buffer/kbf-cli.rkt") (lib "kittle-buffer/interpreter.rkt") (lib "kittle-buffer/ui.rkt"))) (name . "kittle-buffer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:zhuoql@zoho.com . #t) (bf . #t) (brainfuck . #t) (ring:1 . #t))) (source . "https://github.com/KDr2/kittle-buffer.git#main") (tags . ("bf" "brainfuck")) (versions . #hash((default . #hasheq((checksum . "d925aa15f7f89b406982a44ed5c4ea1ec5132102") (source . "https://github.com/KDr2/kittle-buffer.git#main") (source_url . "https://github.com/KDr2/kittle-buffer.git#main"))))))) ("koyo" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/koyo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/koyo.txt"))) (checksum . "2b7625f1812478b7f962a0b84a3e6a3106de9f40") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1559472325) (dependencies . ("koyo-doc" "koyo-lib")) (description . "A web application toolkit (docs and implementation).") (implies . ("koyo-doc" "koyo-lib")) (last-checked . 1632903435) (last-edit . 1573763562) (last-updated . 1630225008) (modules . ()) (name . "koyo") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ring:1 . #t) (web . #t) (web-framework . #t) (web-server . #t))) (source . "https://github.com/Bogdanp/koyo.git?path=koyo") (tags . ("web" "web-framework" "web-server")) (versions . #hash((default . #hasheq((checksum . "2b7625f1812478b7f962a0b84a3e6a3106de9f40") (source . "https://github.com/Bogdanp/koyo.git?path=koyo") (source_url . "https://github.com/Bogdanp/koyo.git?path=koyo"))))))) ("koyo-doc" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "koyo" "doc/koyo@koyo-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/koyo-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/koyo-doc.txt"))) (checksum . "2b7625f1812478b7f962a0b84a3e6a3106de9f40") (checksum-error . #f) (collection . "koyo") (conflicts . ()) (date-added . 1559807749) (dependencies . ("base" "component-doc" "component-lib" "db-lib" "gregor-lib" "koyo-lib" "libargon2" "sandbox-lib" "scribble-lib" "srfi-lite-lib" "web-server-lib" "db-doc" "gregor-doc" "net-doc" "racket-doc" "srfi-doc-nonfree" "web-server-doc")) (description . "A web application toolkit (docs only).") (implies . ()) (last-checked . 1632903435) (last-edit . 1559807749) (last-updated . 1630225009) (modules . ((lib "koyo/scribblings/haml.scrbl") (lib "koyo/scribblings/cors.scrbl") (lib "koyo/scribblings/preload.scrbl") (lib "koyo/scribblings/hasher.scrbl") (lib "koyo/scribblings/logging.scrbl") (lib "koyo/scribblings/flash.scrbl") (lib "koyo/scribblings/getting-started.scrbl") (lib "koyo/scribblings/database-url.scrbl") (lib "koyo/scribblings/continuation.scrbl") (lib "koyo/scribblings/random.scrbl") (lib "koyo/scribblings/url.scrbl") (lib "koyo/scribblings/koyo.rkt") (lib "koyo/scribblings/mime.scrbl") (lib "koyo/scribblings/job.scrbl") (lib "koyo/scribblings/csrf.scrbl") (lib "koyo/scribblings/mail.scrbl") (lib "koyo/scribblings/config.scrbl") (lib "koyo/scribblings/dispatch.scrbl") (lib "koyo/scribblings/profiler.scrbl") (lib "koyo/scribblings/database.scrbl") (lib "koyo/scribblings/koyo.scrbl") (lib "koyo/scribblings/server.scrbl") (lib "koyo/scribblings/l10n.scrbl") (lib "koyo/scribblings/console.scrbl") (lib "koyo/scribblings/http.scrbl") (lib "koyo/scribblings/json.scrbl") (lib "koyo/scribblings/session.scrbl") (lib "koyo/scribblings/error.scrbl") (lib "koyo/scribblings/architecture.scrbl") (lib "koyo/scribblings/testing.scrbl") (lib "koyo/scribblings/static.scrbl"))) (name . "koyo-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (ring:1 . #t) (web . #t) (web-framework . #t) (web-server . #t))) (source . "https://github.com/Bogdanp/koyo.git?path=koyo-doc") (tags . ("web" "web-framework" "web-server")) (versions . #hash((default . #hasheq((checksum . "2b7625f1812478b7f962a0b84a3e6a3106de9f40") (source . "https://github.com/Bogdanp/koyo.git?path=koyo-doc") (source_url . "https://github.com/Bogdanp/koyo.git?path=koyo-doc"))))))) ("koyo-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/koyo-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/koyo-lib.txt"))) (checksum . "2b7625f1812478b7f962a0b84a3e6a3106de9f40") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1559472268) (dependencies . ("base" "compatibility-lib" ("component-lib" #:version "1.0") ("crypto-lib" #:version "1.6") "db-lib" "errortrace-lib" "gregor-lib" "html-lib" "net-lib" "readline-lib" "srfi-lite-lib" "unix-socket-lib" "web-server-lib" "at-exp-lib")) (description . "A web application toolkit (implementation only).") (implies . ()) (last-checked . 1632903436) (last-edit . 1559472268) (last-updated . 1630225010) (modules . ((lib "koyo/hasher/generic.rkt") (lib "koyo/profiler.rkt") (lib "blueprints/standard/app-name-here/pages/common.rkt") (lib "blueprints/minimal/app-name-here/pages/common.rkt") (lib "blueprints/minimal/app-name-here/components/template.rkt") (lib "blueprints/minimal/app-name-here/pages/all.rkt") (lib "blueprints/standard/app-name-here/pages/all.rkt") (lib "koyo/database-url.rkt") (lib "blueprints/standard/app-name-here/pages/auth.rkt") (lib "koyo/static.rkt") (lib "koyo/mime.rkt") (lib "koyo/hasher/argon2id.rkt") (lib "koyo/preload.rkt") (lib "koyo/error.rkt") (lib "koyo/job/worker.rkt") (lib "koyo/util.rkt") (lib "koyo/private/zo.rkt") (lib "koyo/server.rkt") (lib "blueprints/standard/app-name-here-tests/app-name-here/common.rkt") (lib "koyo/runner.rkt") (lib "koyo/job/broker.rkt") (lib "blueprints/minimal/app-name-here/pages/home.rkt") (lib "koyo/job/schema.rkt") (lib "koyo/l10n.rkt") (lib "koyo/xexpr.rkt") (lib "koyo/logging.rkt") (lib "koyo/private/mod.rkt") (lib "koyo/job/serialize.rkt") (lib "koyo/job/query.rkt") (lib "koyo/url.rkt") (lib "blueprints/standard/app-name-here/dynamic.rkt") (lib "koyo/config.rkt") (lib "blueprints/standard/app-name-here-tests/app-name-here/components/auth.rkt") (lib "blueprints/standard/app-name-here/components/mail.rkt") (lib "blueprints/minimal/app-name-here/dynamic.rkt") (lib "koyo/csrf.rkt") (lib "koyo/dispatch.rkt") (lib "koyo/continuation.rkt") (lib "blueprints/standard/app-name-here/components/auth.rkt") (lib "koyo/testing.rkt") (lib "koyo/main.rkt") (lib "koyo/haml.rkt") (lib "koyo/flash.rkt") (lib "blueprints/standard/app-name-here/config.rkt") (lib "koyo/generator.rkt") (lib "koyo/mail.rkt") (lib "koyo/session.rkt") (lib "koyo/job.rkt") (lib "koyo/hasher.rkt") (lib "blueprints/standard/app-name-here/pages/forms.rkt") (lib "koyo/console.rkt") (lib "blueprints/standard/app-name-here-tests/app-name-here/components/mail.rkt") (lib "koyo/hasher/argon2id-place.rkt") (lib "koyo/database.rkt") (lib "koyo/hasher/error.rkt") (lib "blueprints/standard/app-name-here/pages/dashboard.rkt") (lib "blueprints/standard/app-name-here/components/app.rkt") (lib "blueprints/standard/app-name-here-tests/app-name-here/components/user.rkt") (lib "blueprints/standard/app-name-here/components/user.rkt") (lib "koyo/private/term.rkt") (lib "koyo/random.rkt") (lib "koyo/job/job.rkt") (lib "koyo/json.rkt") (lib "blueprints/minimal/app-name-here/config.rkt") (lib "koyo/job/admin.rkt") (lib "koyo/http.rkt") (lib "koyo/cli.rkt") (lib "blueprints/standard/app-name-here/components/template.rkt") (lib "koyo/cors.rkt") (lib "koyo/private/tool.rkt") (lib "koyo/private/filesystem.rkt") (lib "koyo/job/registry.rkt") (lib "blueprints/minimal/app-name-here/components/app.rkt"))) (name . "koyo-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ring:1 . #t) (web . #t) (web-framework . #t) (web-server . #t))) (source . "https://github.com/Bogdanp/koyo.git?path=koyo-lib") (tags . ("web" "web-framework" "web-server")) (versions . #hash((default . #hasheq((checksum . "2b7625f1812478b7f962a0b84a3e6a3106de9f40") (source . "https://github.com/Bogdanp/koyo.git?path=koyo-lib") (source_url . "https://github.com/Bogdanp/koyo.git?path=koyo-lib"))))))) ("koyo-north" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/koyo-north.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/koyo-north.txt"))) (checksum . "a552fe709655a15d1a1382a909fe2466f173f27c") (checksum-error . #f) (collection . "koyo") (conflicts . ()) (date-added . 1582191143) (dependencies . ("base" "component-lib" "db-lib" "koyo-lib" "north")) (description . "A north migrator component for koyo.") (implies . ()) (last-checked . 1632903436) (last-edit . 1582191143) (last-updated . 1584961707) (modules . ((lib "koyo/database/migrator.rkt"))) (name . "koyo-north") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (database . #t) (migrations . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/koyo-north.git") (tags . ("database" "migrations" "web")) (versions . #hash((default . #hasheq((checksum . "a552fe709655a15d1a1382a909fe2466f173f27c") (source . "https://github.com/Bogdanp/koyo-north.git") (source_url . "https://github.com/Bogdanp/koyo-north.git"))))))) ("koyo-postmark" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . ("indirect" "conflicts.txt")) (dep-failure-log . #f) (docs . (("extract" "koyo-postmark" "doc/koyo-postmark@koyo-postmark/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/koyo-postmark.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/koyo-postmark.txt"))) (checksum . "ceeb619d555ef49c2cec42c0b890a97fd1377f89") (checksum-error . #f) (collection . "koyo") (conflicts . ()) (date-added . 1573725222) (dependencies . ("base" "koyo-lib" "postmark-client" "koyo-doc" "racket-doc" "scribble-lib")) (description . "A Postmark mail adapter for koyo. (docs and implementation)") (implies . ()) (last-checked . 1632903436) (last-edit . 1573725222) (last-updated . 1584274040) (modules . ((lib "koyo/mail/koyo-postmark.scrbl") (lib "koyo/mail/postmark.rkt"))) (name . "koyo-postmark") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (email . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/koyo-postmark.git") (tags . ("email" "web")) (versions . #hash((default . #hasheq((checksum . "ceeb619d555ef49c2cec42c0b890a97fd1377f89") (source . "https://github.com/Bogdanp/koyo-postmark.git") (source_url . "https://github.com/Bogdanp/koyo-postmark.git"))))))) ("koyo-sentry" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "koyo-sentry" "doc/koyo-sentry@koyo-sentry/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/koyo-sentry.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/koyo-sentry.txt"))) (checksum . "f04efd69d239347bc44cba1587deb1bc3d5ba8c7") (checksum-error . #f) (collection . "koyo") (conflicts . ()) (date-added . 1562741692) (dependencies . ("base" "koyo-lib" "sentry-lib" "web-server-lib" "racket-doc" "scribble-lib" "sentry-doc" "web-server-doc")) (description . "Integrates koyo and racket-sentry.") (implies . ()) (last-checked . 1632903436) (last-edit . 1562741692) (last-updated . 1589136291) (modules . ((lib "koyo/sentry.rkt") (lib "koyo/koyo-sentry.scrbl"))) (name . "koyo-sentry") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (monitoring . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/koyo-sentry.git") (tags . ("monitoring" "web")) (versions . #hash((default . #hasheq((checksum . "f04efd69d239347bc44cba1587deb1bc3d5ba8c7") (source . "https://github.com/Bogdanp/koyo-sentry.git") (source_url . "https://github.com/Bogdanp/koyo-sentry.git"))))))) ("koyo-sessions-redis" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . ("indirect" "conflicts.txt")) (dep-failure-log . #f) (docs . (("extract" "koyo-sessions-redis" "doc/koyo-sessions-redis@koyo-sessions-redis/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/koyo-sessions-redis.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/koyo-sessions-redis.txt"))) (checksum . "4e60b085d9029be311962adaab586ce687744c56") (checksum-error . #f) (collection . "koyo") (conflicts . ()) (date-added . 1617527940) (dependencies . ("base" "koyo-lib" "redis-lib" "koyo-doc" "racket-doc" "redis-doc" "rackunit-lib" "scribble-lib")) (description . "A Redis-based session store for Koyo.") (implies . ()) (last-checked . 1632903437) (last-edit . 1617527940) (last-updated . 1618570361) (modules . ((lib "koyo/session/koyo-sessions-redis.scrbl") (lib "koyo/session/redis.rkt"))) (name . "koyo-sessions-redis") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (koyo . #t) (redis . #t) (ring:1 . #t) (sessions . #t))) (source . "https://github.com/Bogdanp/koyo-sessions-redis.git") (tags . ("koyo" "redis" "sessions")) (versions . #hash((default . #hasheq((checksum . "4e60b085d9029be311962adaab586ce687744c56") (source . "https://github.com/Bogdanp/koyo-sessions-redis.git") (source_url . "https://github.com/Bogdanp/koyo-sessions-redis.git"))))))) ("koyo-test" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/koyo-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/koyo-test.txt"))) (checksum . "2b7625f1812478b7f962a0b84a3e6a3106de9f40") (checksum-error . #f) (collection . "tests") (conflicts . ()) (date-added . 1559472298) (dependencies . ("base" "at-exp-lib" "component-lib" "db-lib" "gregor-lib" "koyo-lib" "libargon2" "rackunit-lib" "srfi-lite-lib" "web-server-lib")) (description . "A web application toolkit (tests only).") (implies . ()) (last-checked . 1632903437) (last-edit . 1559472298) (last-updated . 1630225012) (modules . ((lib "tests/koyo/logging.rkt") (lib "tests/koyo/private/term.rkt") (lib "tests/koyo/database.rkt") (lib "tests/koyo/xexpr.rkt") (lib "tests/koyo/json.rkt") (lib "tests/koyo/hasher.rkt") (lib "tests/koyo/config.rkt") (lib "tests/koyo/continuation.rkt") (lib "tests/koyo/profiler.rkt") (lib "tests/koyo/mime.rkt") (lib "tests/koyo/cors.rkt") (lib "tests/koyo/database-url.rkt") (lib "tests/koyo/session.rkt") (lib "tests/koyo/http.rkt") (lib "tests/koyo/mail.rkt") (lib "tests/koyo/csrf.rkt") (lib "tests/koyo/flash.rkt") (lib "tests/koyo/haml.rkt") (lib "tests/koyo/l10n.rkt") (lib "tests/koyo/testing.rkt") (lib "tests/koyo/common.rkt") (lib "tests/koyo/job.rkt") (lib "tests/koyo/dispatch.rkt"))) (name . "koyo-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ring:1 . #t) (web . #t) (web-framework . #t) (web-server . #t))) (source . "https://github.com/Bogdanp/koyo.git?path=koyo-test") (tags . ("web" "web-framework" "web-server")) (versions . #hash((default . #hasheq((checksum . "2b7625f1812478b7f962a0b84a3e6a3106de9f40") (source . "https://github.com/Bogdanp/koyo.git?path=koyo-test") (source_url . "https://github.com/Bogdanp/koyo.git?path=koyo-test"))))))) ("kw-make-struct" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "kw-make-struct" "doc/kw-make-struct@kw-make-struct/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kw-make-struct.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/kw-make-struct.txt"))) (checksum . "260803074a12bba911646dec8e26b26f674952b3") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563255061) (dependencies . ("base" "kw-make-struct-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Naming struct fields with keywords for constructing and matching") (implies . ("kw-make-struct-lib")) (last-checked . 1632903437) (last-edit . 1563255088) (last-updated . 1563255061) (modules . ((lib "kw-make-struct/docs/kw-make-struct.scrbl"))) (name . "kw-make-struct") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (keywords . #t) (ring:1 . #t) (structs . #t))) (source . "git://github.com/AlexKnauth/kw-make-struct?path=kw-make-struct") (tags . ("keywords" "structs")) (versions . #hash((default . #hasheq((checksum . "260803074a12bba911646dec8e26b26f674952b3") (source . "git://github.com/AlexKnauth/kw-make-struct?path=kw-make-struct") (source_url . "http://github.com/AlexKnauth/kw-make-struct/tree/master?path=kw-make-struct"))))))) ("kw-make-struct-lib" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kw-make-struct-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/kw-make-struct-lib.txt"))) (checksum . "260803074a12bba911646dec8e26b26f674952b3") (checksum-error . #f) (collection . (multi)) (conflicts . ("kw-make-struct")) (date-added . 1563255031) (dependencies . ("base" "syntax-classes-lib" "rackunit-lib")) (description . "Naming struct fields with keywords for constructing and matching") (implies . ()) (last-checked . 1632903437) (last-edit . 1563255031) (last-updated . 1563255031) (modules . ((lib "kw-make-struct/main.rkt"))) (name . "kw-make-struct-lib") (ring . 2) (search-terms . #hasheq((:build-success: . #t) (:conflicts: . #t) (author:alexander@knauth.org . #t) (keywords . #t) (ring:2 . #t) (structs . #t))) (source . "git://github.com/AlexKnauth/kw-make-struct?path=kw-make-struct-lib") (tags . ("keywords" "structs")) (versions . #hash((default . #hasheq((checksum . "260803074a12bba911646dec8e26b26f674952b3") (source . "git://github.com/AlexKnauth/kw-make-struct?path=kw-make-struct-lib") (source_url . "http://github.com/AlexKnauth/kw-make-struct/tree/master?path=kw-make-struct-lib"))))))) ("kw-utils" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "kw-utils" "doc/kw-utils@kw-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/kw-utils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/kw-utils.txt"))) (checksum . "91095643063329146e7d901b864e1438963bbc10") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "sweet-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc" "rackjure")) (description . "misc kw utils") (implies . ()) (last-checked . 1632903437) (last-edit . 1415761892) (last-updated . 1601522278) (modules . ((lib "kw-utils/docs/kw-map.scrbl") (lib "kw-utils/arity+keywords/syntax.rkt") (lib "kw-utils/docs/kw-hash.scrbl") (lib "kw-utils/keyword-apply-sort.rkt") (lib "kw-utils/docs/kw-lists-lambda.scrbl") (lib "kw-utils/partial.rkt") (lib "kw-utils/kw-lists-lambda.rkt") (lib "kw-utils/kw-map.rkt") (lib "kw-utils/docs/keyword-lambda.scrbl") (lib "kw-utils/kw-hash/contract.rkt") (lib "kw-utils/arity+keywords.rkt") (lib "kw-utils/docs/partial.scrbl") (lib "kw-utils/docs/mapper.scrbl") (lib "kw-utils/kw-apply.rkt") (lib "kw-utils/mapper.rkt") (lib "kw-utils/docs/arity+keywords.scrbl") (lib "kw-utils/docs/keyword-apply-sort.scrbl") (lib "kw-utils/docs/kw-utils.scrbl") (lib "kw-utils/kw-hash.rkt") (lib "kw-utils/keyword-lambda.rkt") (lib "kw-utils/keyword-app.rkt") (lib "kw-utils/kw-hash-lambda.rkt"))) (name . "kw-utils") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (keywords . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/kw-utils") (tags . ("keywords")) (versions . #hash((default . #hasheq((checksum . "91095643063329146e7d901b864e1438963bbc10") (source . "git://github.com/AlexKnauth/kw-utils") (source_url . "http://github.com/AlexKnauth/kw-utils/tree/master"))))))) ("lambda-calculus" . #hasheq((author . "oran.simhony@gmail.com") (authors . ("oran.simhony@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lambda-calculus" "doc/lambda-calculus@lambda-calculus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lambda-calculus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lambda-calculus.txt"))) (checksum . "9111401749ef9be7f162eec79961b448024522af") (checksum-error . #f) (collection . "lambda-calculus") (conflicts . ()) (date-added . 1555331717) (dependencies . ("beautiful-racket-lib" "rackunit-lib" "base" "brag" "beautiful-racket" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A lambda-calculus DSL in Racket") (implies . ()) (last-checked . 1632903438) (last-edit . 1555331717) (last-updated . 1617120618) (modules . ((lib "lambda-calculus/reader.rkt") (lib "lambda-calculus/main.rkt") (lib "lambda-calculus/lexer.rkt") (lib "lambda-calculus/expander.rkt") (lib "lambda-calculus/tokenizer.rkt") (lib "lambda-calculus/lc-test.rkt") (lib "lambda-calculus/scribblings/lambda-calculus.scrbl") (lib "lambda-calculus/parser.rkt"))) (name . "lambda-calculus") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:oran.simhony@gmail.com . #t) (dsl . #t) (functional . #t) (lambda-calculus . #t) (ring:1 . #t))) (source . "https://github.com/oransimhony/lambda-calculus.git") (tags . ("dsl" "functional" "lambda-calculus")) (versions . #hash((default . #hasheq((checksum . "9111401749ef9be7f162eec79961b448024522af") (source . "https://github.com/oransimhony/lambda-calculus.git") (source_url . "https://github.com/oransimhony/lambda-calculus.git"))))))) ("lambda-sh" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "tasn1") ("none" "tssh"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lambda-sh.txt") (test-failure-log . "server/built/test-fail/lambda-sh.txt") (test-success-log . #f))) (checksum . "3918cc1c3f0a52487f5ccf1b8f742386d57704ff") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1552095762) (dependencies . ("base" "digimon" "typed-racket-lib" "typed-racket-more" "scribble-lib" "pict-lib" "math-lib" "digimon" "scribble-lib" "pict-lib" "math-lib" "racket-doc")) (description . "Do we really need a Typed Shell? Nevertheless, Unix Shell and Powershell are not friends.") (implies . ()) (last-checked . 1632903438) (last-edit . 1552096269) (last-updated . 1627017352) (modules . ((lib "ssh/digitama/algorithm/pkcs1/primitive.rkt") (lib "ssh/digitama/assignment/connection.rkt") (lib "ssh/tamer/confidentiality.scrbl") (lib "ssh/tamer/tSSH.scrbl") (lib "asni/der.rkt") (lib "asni/digitama/der/sequence.rkt") (lib "ssh/digitama/userauth.rkt") (lib "asni/digitama/der/octets.rkt") (lib "ssh/digitama/authentication/message.rkt") (lib "ssh/digitama/session.rkt") (lib "ssh/digitama/authentication.rkt") (lib "ssh/digitama/algorithm/crypto/aes/pretty.rkt") (lib "ssh/tamer/transport.rkt") (lib "ssh/digitama/connection/chid.rkt") (lib "asni/tamer/der/primitive.rkt") (lib "ssh/digitama/algorithm/rsa.rkt") (lib "ssh/digitama/assignment/application.rkt") (lib "asni/base/der.rkt") (lib "ssh/digitama/algorithm/kex/diffie-hellman.rkt") (lib "ssh/session.rkt") (lib "ssh/digitama/message/connection.rkt") (lib "ssh/tamer/tamer.rkt") (lib "ssh/digitama/transport/newkeys.rkt") (lib "ssh/digitama/fsio/authorized-keys.rkt") (lib "ssh/digitama/assignment/kex.rkt") (lib "ssh/userauth.rkt") (lib "ssh/service.rkt") (lib "ssh/digitama/algorithm/crypto/aes/state.rkt") (lib "ssh/digitama/connection/channel/session.rkt") (lib "ssh/digitama/transport/identification.rkt") (lib "asni/digitama/der/base.rkt") (lib "ssh/configuration.rkt") (lib "ssh/digitama/message/disconnection.rkt") (lib "ssh/kex.rkt") (lib "ssh/digitama/algorithm/hostkey/rsa.rkt") (lib "ssh/digitama/assignment/message.rkt") (lib "ssh/digitama/algorithm/pkcs1/hash.rkt") (lib "ssh/main.rkt") (lib "ssh/digitama/assignment/mac.rkt") (lib "ssh/tamer/confidentiality/inc/aes.rkt") (lib "ssh/digitama/transport/kex.rkt") (lib "ssh/tamer/walkthrough.scrbl") (lib "ssh/tamer/performace/aes-ctr.rkt") (lib "ssh/digitama/fsio/pem.rkt") (lib "ssh/transport.rkt") (lib "ssh/base.rkt") (lib "ssh/digivice/keygen/rsa/keygen.rkt") (lib "ssh/digitama/algorithm/crypto/blowfish/s-box.rkt") (lib "asni/digitama/der/dissection.rkt") (lib "ssh/authentication.rkt") (lib "ssh/digitama/algorithm/hmac.rkt") (lib "ssh/digitama/assignment/channel.rkt") (lib "ssh/digivice/keygen/rsa/cmdenv.rkt") (lib "ssh/digitama/algorithm/kex/oakley-group.rkt") (lib "ssh/digitama/algorithm/crypto/blowfish/pi-box.rkt") (lib "ssh/connection.rkt") (lib "ssh/tamer/confidentiality/aes.rkt") (lib "ssh/digitama/authentication/publickey.rkt") (lib "asni/digitama/der/enumerated.rkt") (lib "asni/digitama/der/real.rkt") (lib "ssh/digitama/message/authentication.rkt") (lib "ssh/digitama/assignment/authentication.rkt") (lib "ssh/channel.rkt") (lib "ssh/tamer/performace/blowfish-cbc.rkt") (lib "ssh/datatype.rkt") (lib "ssh/digitama/algorithm/crypto/utility.rkt") (lib "asni/digitama/der/primitive.rkt") (lib "ssh/digivice/keygen.rkt") (lib "ssh/tamer/authentication.rkt") (lib "ssh/digitama/transport.rkt") (lib "ssh/tamer/message.rkt") (lib "ssh/digitama/diagnostics.rkt") (lib "asni/tamer/der/real.rkt") (lib "ssh/digitama/message/condition.rkt") (lib "ssh/digitama/connection/channel.rkt") (lib "ssh/tamer/architecture.rkt") (lib "shmon/stone/unsafe/user.rkt") (lib "ssh/digitama/transport/message.rkt") (lib "ssh/digitama/assignment/compression.rkt") (lib "ssh/message.rkt") (lib "ssh/digitama/datatype.rkt") (lib "asni/tamer/der/sequence.rkt") (lib "ssh/digitama/connection/channel/tcpip.rkt") (lib "ssh/digitama/algorithm/random.rkt") (lib "asni/tamer/tASN1.scrbl") (lib "ssh/digitama/connection/service.rkt") (lib "ssh/digitama/connection/application.rkt") (lib "ssh/digitama/algorithm/crypto/blowfish.rkt") (lib "ssh/digivice/ssh.rkt") (lib "ssh/digitama/assignment/hostkey.rkt") (lib "ssh/digitama/service.rkt") (lib "ssh/digitama/connection/message.rkt") (lib "ssh/tamer/confidentiality/blowfish.rkt") (lib "ssh/digitama/algorithm/pkcs1/key.rkt") (lib "ssh/daemon.rkt") (lib "ssh/digivice/sshd.rkt") (lib "ssh/digitama/algorithm/fingerprint.rkt") (lib "ssh/digitama/assignment/service.rkt") (lib "ssh/digitama/stdio.rkt") (lib "ssh/digitama/kex.rkt") (lib "ssh/tamer/confidentiality/inc/misc.rkt") (lib "asni/tamer/der.scrbl") (lib "ssh/digitama/message/name.rkt") (lib "ssh/digivice/scp/path.rkt") (lib "asni/tamer/der/enumerated.rkt") (lib "ssh/digitama/connection/channel/application.rkt") (lib "ssh/digitama/fsio/exception.rkt") (lib "asni/digitama/der/metatype.rkt") (lib "ssh/digitama/assignment.rkt") (lib "ssh/digivice/scp.rkt") (lib "ssh/digitama/algorithm/kex/diffie-hellman-group.rkt") (lib "ssh/digivice/scp/application.rkt") (lib "ssh/digitama/algorithm/pkcs1/emsa-v1_5.rkt") (lib "ssh/digivice/keygen/cmdenv.rkt") (lib "ssh/digitama/message/channel.rkt") (lib "ssh/digitama/assignment/cipher.rkt") (lib "ssh/digitama/algorithm/crypto/aes.rkt") (lib "ssh/digitama/algorithm/crypto/aes/s-box.rkt") (lib "ssh/digitama/algorithm/crypto/aes/math.rkt") (lib "ssh/digitama/algorithm/crypto/blowfish/encryption.rkt") (lib "ssh/digitama/message.rkt") (lib "ssh/digitama/authentication/option.rkt") (lib "ssh/assignment.rkt") (lib "ssh/digitama/fsio/rsa.rkt") (lib "ssh/digitama/transport/packet.rkt") (lib "ssh/digitama/assignment/disconnection.rkt") (lib "ssh/digitama/transport/prompt.rkt") (lib "ssh/digitama/authentication/user.rkt") (lib "ssh/digitama/message/transport.rkt") (lib "ssh/digitama/connection/chport.rkt") (lib "ssh/digitama/daemon.rkt"))) (name . "lambda-sh") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs-error: . #t) (author:juzhenliang@gmail.com . #t) (lang . #t) (parser . #t) (ring:1 . #t) (shell . #t) (ssh . #t) (unsafe . #t) (unstable . #t))) (source . "https://github.com/wargrey/lambda-shell.git") (tags . ("lang" "parser" "shell" "ssh" "unsafe" "unstable")) (versions . #hash((default . #hasheq((checksum . "3918cc1c3f0a52487f5ccf1b8f742386d57704ff") (source . "https://github.com/wargrey/lambda-shell.git") (source_url . "https://github.com/wargrey/lambda-shell.git"))))))) ("lambdajam-2015-racket-pl-pl" . #hasheq((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lambdajam-2015-racket-pl-pl.txt") (test-failure-log . "server/built/test-fail/lambdajam-2015-racket-pl-pl.txt") (test-success-log . #f))) (checksum . "4c9001dca9fb72c885d8cc1bef057ac8f56c24d0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "gui-lib" "lazy" "parser-tools-lib" "rackunit-lib" "scheme-lib" "schemeunit" "slideshow-lib" "typed-racket-lib" "lang-slide")) (description . "") (implies . ()) (last-checked . 1632903438) (last-edit . 1445998661) (last-updated . 1502816146) (modules . ((lib "mini-hdl/gc/lang/reader.rkt") (lib "mini-hdl/parser.rkt") (lib "mini-hdl/rca-hdl.rkt") (lib "lambdajam-2015-racket-pl-pl/or.rkt") (lib "lambdajam-2015-racket-pl-pl/intro-code/fibs.rkt") (lib "lambdajam-2015-racket-pl-pl/salad-bar.rkt") (lib "mini-hdl/lang/reader.rkt") (lib "lambdajam-2015-racket-pl-pl/util.rkt") (lib "mini-hdl/gc-runtime.rkt") (lib "lambdajam-2015-racket-pl-pl/title-lib.rkt") (lib "lambdajam-2015-racket-pl-pl/intro-code/fib.scrbl") (lib "lambdajam-2015-racket-pl-pl/enum.rkt") (lib "lambdajam-2015-racket-pl-pl/lang-slide.rkt") (lib "lambdajam-2015-racket-pl-pl/main.rkt") (lib "lambdajam-2015-racket-pl-pl/hdl-ex.rkt") (lib "mini-hdl/runtime.rkt") (lib "lambdajam-2015-racket-pl-pl/intro-code/lazy.rkt") (lib "lambdajam-2015-racket-pl-pl/title.rkt") (lib "lambdajam-2015-racket-pl-pl/thanks.rkt") (lib "mini-hdl/rca-2-hdl.rkt") (lib "lambdajam-2015-racket-pl-pl/open-compiler.rkt"))) (name . "lambdajam-2015-racket-pl-pl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:robby@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/rfindler/lambdajam-2015-racket-pl-pl") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4c9001dca9fb72c885d8cc1bef057ac8f56c24d0") (source . "git://github.com/rfindler/lambdajam-2015-racket-pl-pl") (source_url . "http://github.com/rfindler/lambdajam-2015-racket-pl-pl/tree/master"))))))) ("lang" . #hasheq((author . "zaomir@outlook.com") (authors . ("zaomir@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/lang.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "804a7f5c96d173928205693f244578a19e3cebc5") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/zaoqil/zaoqil.git?path=racket\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ("zaoqil")) (dependencies . ("racket" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "語") (implies . ()) (last-checked . 1632903438) (last-edit . 1517568734) (last-updated . 1621814098) (modules . ((lib "zaoqil/lang/reader.rkt") (lib "zaoqil/main.rkt") (lib "zaoqil/zaoqil.scrbl"))) (name . "lang") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (:error: . #t) (author:zaomir@outlook.com . #t) (compiler . #t) (kernel . #t) (lisp . #t) (os . #t) (ring:2 . #t))) (source . "https://github.com/zaoqil/zaoqil.git?path=racket") (tags . ("compiler" "kernel" "lisp" "os")) (versions . #hash((default . #hasheq((checksum . "804a7f5c96d173928205693f244578a19e3cebc5") (source . "https://github.com/zaoqil/zaoqil.git?path=racket") (source_url . "https://github.com/zaoqil/zaoqil.git?path=racket"))))))) ("lang-file" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "read-lang-file" "doc/read-lang-file@lang-file/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lang-file.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lang-file.txt"))) (checksum . "0e955a5ba575c592c57ceb48371a66d1f83b84d7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563236811) (dependencies . ("base" "lang-file-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Functions for dealing with #lang files") (implies . ("lang-file-lib")) (last-checked . 1632903438) (last-edit . 1563239666) (last-updated . 1618854957) (modules . ((lib "lang-file/scribblings/read-lang-file.scrbl"))) (name . "lang-file") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (file . #t) (lang . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/lang-file?path=lang-file") (tags . ("file" "lang")) (versions . #hash((default . #hasheq((checksum . "0e955a5ba575c592c57ceb48371a66d1f83b84d7") (source . "git://github.com/AlexKnauth/lang-file?path=lang-file") (source_url . "http://github.com/AlexKnauth/lang-file/tree/master?path=lang-file"))))))) ("lang-file-lib" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lang-file-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lang-file-lib.txt"))) (checksum . "0e955a5ba575c592c57ceb48371a66d1f83b84d7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563236788) (dependencies . ("base" "rackunit-lib")) (description . "Functions for dealing with #lang files") (implies . ()) (last-checked . 1632903439) (last-edit . 1563239620) (last-updated . 1618854958) (modules . ((lib "lang-file/test/interp.rkt") (lib "lang-file/test/tuvalu.rkt") (lib "lang-file/read-lang-file.rkt") (lib "lang-file/test/literal.rkt"))) (name . "lang-file-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (file . #t) (lang . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/lang-file?path=lang-file-lib") (tags . ("file" "lang")) (versions . #hash((default . #hasheq((checksum . "0e955a5ba575c592c57ceb48371a66d1f83b84d7") (source . "git://github.com/AlexKnauth/lang-file?path=lang-file-lib") (source_url . "http://github.com/AlexKnauth/lang-file/tree/master?path=lang-file-lib"))))))) ("lang-slide" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lang-slide" "doc/lang-slide@lang-slide/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lang-slide.txt") (test-failure-log . "server/built/test-fail/lang-slide.txt") (test-success-log . #f))) (checksum . "ea86af49c3d7fe2fe0e80c1c9488b3447a0efbdd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "scheme-lib" "slideshow-lib" "unstable-lib" "scribble-lib" "racket-doc" "pict-doc")) (description . "A picture showing all the languages used to implement Racket.") (implies . ()) (last-checked . 1632903439) (last-edit . 1352762812) (last-updated . 1565797912) (modules . ((lib "lang-slide/orig-colors.rkt") (lib "lang-slide/main.rkt") (lib "lang-slide/mk-img.rkt") (lib "lang-slide/pictures.rkt") (lib "lang-slide/scribblings/lang-slide.scrbl") (lib "lang-slide/find.rkt") (lib "lang-slide/draw-plain.rkt") (lib "lang-slide/hudak-quote.rkt"))) (name . "lang-slide") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samth@ccs.neu.edu . #t) (language . #t) (ring:1 . #t) (slideshow . #t))) (source . "github://github.com/samth/lang-slide/master") (tags . ("language" "slideshow")) (versions . #hash((default . #hasheq((checksum . "ea86af49c3d7fe2fe0e80c1c9488b3447a0efbdd") (source . "github://github.com/samth/lang-slide/master") (source_url . "http://github.com/samth/lang-slide/tree/master"))))))) ("laramie" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/laramie.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "7afc9314ff1f363098efeb68ceb25e2e9c419e6e") (checksum-error . #f) (collection . (multi)) (conflicts . ("laramie-doc" "laramie-lib" "laramie-test")) (date-added . 1625168628) (dependencies . ("laramie-lib" "laramie-doc")) (description . "HTML5 parser") (implies . ("laramie-lib" "laramie-doc")) (last-checked . 1632903439) (last-edit . 1625804890) (last-updated . 1626675254) (modules . ((lib "laramie-test/laramie/issue-13.rkt") (lib "laramie-lib/html/convert.rkt") (lib "laramie-lib/tokenizer/tests/doctype.rkt") (lib "laramie-lib/html/util.rkt") (lib "laramie-lib/parser/dom.rkt") (lib "laramie-lib/tokenizer/parameters.rkt") (lib "laramie-lib/parser/main.rkt") (lib "laramie-lib/parser/parser.rkt") (lib "laramie-test/laramie/issue-37.rkt") (lib "laramie-lib/tokenizer/stream.rkt") (lib "laramie-lib/tokenizer/tests/rcdata.rkt") (lib "laramie-lib/tokenizer/tokens.rkt") (lib "laramie-lib/tokenizer/tests/rawtext.rkt") (lib "laramie-lib/parser/parameters.rkt") (lib "laramie-lib/private/xml.rkt") (lib "laramie-lib/tokenizer/predicates.rkt") (lib "laramie-lib/parser/convert.rkt") (lib "laramie-lib/tokenizer/rawtext.rkt") (lib "laramie-lib/tokenizer/tests/comment.rkt") (lib "laramie-test/laramie/issue-38.rkt") (lib "laramie-lib/tokenizer/character-data.rkt") (lib "laramie-lib/tokenizer/data.rkt") (lib "laramie-test/laramie/util.rkt") (lib "laramie-lib/tokenizer/network.rkt") (lib "laramie-lib/parser/types.rkt") (lib "laramie-lib/private/todo.rkt") (lib "laramie-test/laramie/parser.rkt") (lib "laramie-lib/tokenizer/types.rkt") (lib "laramie-test/laramie/issue-14.rkt") (lib "laramie-lib/tokenizer/rcdata.rkt") (lib "laramie-lib/tokenizer/tag.rkt") (lib "laramie-lib/tokenizer/comment.rkt") (lib "laramie-test/laramie/issue-24.rkt") (lib "laramie-lib/html/main.rkt") (lib "laramie-lib/tokenizer/main.rkt") (lib "laramie-lib/tokenizer/tests/cdata.rkt") (lib "laramie-test/laramie/issue-17.rkt") (lib "laramie-lib/tokenizer/tests/data.rkt") (lib "laramie-doc/laramie.scrbl") (lib "laramie-lib/main.rkt") (lib "laramie-lib/tokenizer/tests/plaintext.rkt") (lib "laramie-lib/tokenizer/infrastructure.rkt") (lib "laramie-lib/tokenizer/tests/tag.rkt") (lib "laramie-test/laramie/issue-36.rkt") (lib "laramie-lib/html/types.rkt") (lib "laramie-lib/tokenizer/tests/script.rkt") (lib "laramie-test/laramie/issue-41.rkt") (lib "laramie-lib/tokenizer/script.rkt") (lib "laramie-lib/tokenizer/doctype.rkt") (lib "laramie-lib/tokenizer/tests/characters.rkt") (lib "laramie-test/laramie/issue-47.rkt") (lib "laramie-lib/tokenizer/characters.rkt") (lib "laramie-lib/tokenizer/cdata.rkt") (lib "laramie-lib/tokenizer/plaintext.rkt") (lib "laramie-test/laramie/issue-09.rkt") (lib "laramie-lib/tokenizer/tokenize.rkt") (lib "laramie-lib/tokenizer/generate-character-data.rkt"))) (name . "laramie") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (author:jesse@serverracket.com . #t) (html . #t) (parser . #t) (ring:1 . #t))) (source . "https://github.com/jessealama/laramie.git") (tags . ("html" "parser")) (versions . #hash((default . #hasheq((checksum . "7afc9314ff1f363098efeb68ceb25e2e9c419e6e") (source . "https://github.com/jessealama/laramie.git") (source_url . "https://github.com/jessealama/laramie.git"))))))) ("laramie-doc" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/laramie-doc.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "7afc9314ff1f363098efeb68ceb25e2e9c419e6e") (checksum-error . #f) (collection . (multi)) (conflicts . ("laramie" "laramie-lib" "laramie-test")) (date-added . 1625168696) (dependencies . ("laramie-lib" "laramie-doc")) (description . "Documentation for Laramie") (implies . ("laramie-lib" "laramie-doc")) (last-checked . 1632903439) (last-edit . 1625804913) (last-updated . 1626675255) (modules . ((lib "laramie-test/laramie/issue-13.rkt") (lib "laramie-lib/html/convert.rkt") (lib "laramie-lib/tokenizer/tests/doctype.rkt") (lib "laramie-lib/html/util.rkt") (lib "laramie-lib/parser/dom.rkt") (lib "laramie-lib/tokenizer/parameters.rkt") (lib "laramie-lib/parser/main.rkt") (lib "laramie-lib/parser/parser.rkt") (lib "laramie-test/laramie/issue-37.rkt") (lib "laramie-lib/tokenizer/stream.rkt") (lib "laramie-lib/tokenizer/tests/rcdata.rkt") (lib "laramie-lib/tokenizer/tokens.rkt") (lib "laramie-lib/tokenizer/tests/rawtext.rkt") (lib "laramie-lib/parser/parameters.rkt") (lib "laramie-lib/private/xml.rkt") (lib "laramie-lib/tokenizer/predicates.rkt") (lib "laramie-lib/parser/convert.rkt") (lib "laramie-lib/tokenizer/rawtext.rkt") (lib "laramie-lib/tokenizer/tests/comment.rkt") (lib "laramie-test/laramie/issue-38.rkt") (lib "laramie-lib/tokenizer/character-data.rkt") (lib "laramie-lib/tokenizer/data.rkt") (lib "laramie-test/laramie/util.rkt") (lib "laramie-lib/tokenizer/network.rkt") (lib "laramie-lib/parser/types.rkt") (lib "laramie-lib/private/todo.rkt") (lib "laramie-test/laramie/parser.rkt") (lib "laramie-lib/tokenizer/types.rkt") (lib "laramie-test/laramie/issue-14.rkt") (lib "laramie-lib/tokenizer/rcdata.rkt") (lib "laramie-lib/tokenizer/tag.rkt") (lib "laramie-lib/tokenizer/comment.rkt") (lib "laramie-test/laramie/issue-24.rkt") (lib "laramie-lib/html/main.rkt") (lib "laramie-lib/tokenizer/main.rkt") (lib "laramie-lib/tokenizer/tests/cdata.rkt") (lib "laramie-test/laramie/issue-17.rkt") (lib "laramie-lib/tokenizer/tests/data.rkt") (lib "laramie-doc/laramie.scrbl") (lib "laramie-lib/main.rkt") (lib "laramie-lib/tokenizer/tests/plaintext.rkt") (lib "laramie-lib/tokenizer/infrastructure.rkt") (lib "laramie-lib/tokenizer/tests/tag.rkt") (lib "laramie-test/laramie/issue-36.rkt") (lib "laramie-lib/html/types.rkt") (lib "laramie-lib/tokenizer/tests/script.rkt") (lib "laramie-test/laramie/issue-41.rkt") (lib "laramie-lib/tokenizer/script.rkt") (lib "laramie-lib/tokenizer/doctype.rkt") (lib "laramie-lib/tokenizer/tests/characters.rkt") (lib "laramie-test/laramie/issue-47.rkt") (lib "laramie-lib/tokenizer/characters.rkt") (lib "laramie-lib/tokenizer/cdata.rkt") (lib "laramie-lib/tokenizer/plaintext.rkt") (lib "laramie-test/laramie/issue-09.rkt") (lib "laramie-lib/tokenizer/tokenize.rkt") (lib "laramie-lib/tokenizer/generate-character-data.rkt"))) (name . "laramie-doc") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (author:jesse@serverracket.com . #t) (docs . #t) (html . #t) (parser . #t) (ring:1 . #t))) (source . "https://github.com/jessealama/laramie.git") (tags . ("docs" "html" "parser")) (versions . #hash((default . #hasheq((checksum . "7afc9314ff1f363098efeb68ceb25e2e9c419e6e") (source . "https://github.com/jessealama/laramie.git") (source_url . "https://github.com/jessealama/laramie.git"))))))) ("laramie-lib" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/laramie-lib.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "7afc9314ff1f363098efeb68ceb25e2e9c419e6e") (checksum-error . #f) (collection . (multi)) (conflicts . ("laramie" "laramie-doc" "laramie-test")) (date-added . 1625168665) (dependencies . ("laramie-lib" "laramie-doc")) (description . "Implementation for Laramie") (implies . ("laramie-lib" "laramie-doc")) (last-checked . 1632903439) (last-edit . 1625804940) (last-updated . 1626675256) (modules . ((lib "laramie-test/laramie/issue-13.rkt") (lib "laramie-lib/html/convert.rkt") (lib "laramie-lib/tokenizer/tests/doctype.rkt") (lib "laramie-lib/html/util.rkt") (lib "laramie-lib/parser/dom.rkt") (lib "laramie-lib/tokenizer/parameters.rkt") (lib "laramie-lib/parser/main.rkt") (lib "laramie-lib/parser/parser.rkt") (lib "laramie-test/laramie/issue-37.rkt") (lib "laramie-lib/tokenizer/stream.rkt") (lib "laramie-lib/tokenizer/tests/rcdata.rkt") (lib "laramie-lib/tokenizer/tokens.rkt") (lib "laramie-lib/tokenizer/tests/rawtext.rkt") (lib "laramie-lib/parser/parameters.rkt") (lib "laramie-lib/private/xml.rkt") (lib "laramie-lib/tokenizer/predicates.rkt") (lib "laramie-lib/parser/convert.rkt") (lib "laramie-lib/tokenizer/rawtext.rkt") (lib "laramie-lib/tokenizer/tests/comment.rkt") (lib "laramie-test/laramie/issue-38.rkt") (lib "laramie-lib/tokenizer/character-data.rkt") (lib "laramie-lib/tokenizer/data.rkt") (lib "laramie-test/laramie/util.rkt") (lib "laramie-lib/tokenizer/network.rkt") (lib "laramie-lib/parser/types.rkt") (lib "laramie-lib/private/todo.rkt") (lib "laramie-test/laramie/parser.rkt") (lib "laramie-lib/tokenizer/types.rkt") (lib "laramie-test/laramie/issue-14.rkt") (lib "laramie-lib/tokenizer/rcdata.rkt") (lib "laramie-lib/tokenizer/tag.rkt") (lib "laramie-lib/tokenizer/comment.rkt") (lib "laramie-test/laramie/issue-24.rkt") (lib "laramie-lib/html/main.rkt") (lib "laramie-lib/tokenizer/main.rkt") (lib "laramie-lib/tokenizer/tests/cdata.rkt") (lib "laramie-test/laramie/issue-17.rkt") (lib "laramie-lib/tokenizer/tests/data.rkt") (lib "laramie-doc/laramie.scrbl") (lib "laramie-lib/main.rkt") (lib "laramie-lib/tokenizer/tests/plaintext.rkt") (lib "laramie-lib/tokenizer/infrastructure.rkt") (lib "laramie-lib/tokenizer/tests/tag.rkt") (lib "laramie-test/laramie/issue-36.rkt") (lib "laramie-lib/html/types.rkt") (lib "laramie-lib/tokenizer/tests/script.rkt") (lib "laramie-test/laramie/issue-41.rkt") (lib "laramie-lib/tokenizer/script.rkt") (lib "laramie-lib/tokenizer/doctype.rkt") (lib "laramie-lib/tokenizer/tests/characters.rkt") (lib "laramie-test/laramie/issue-47.rkt") (lib "laramie-lib/tokenizer/characters.rkt") (lib "laramie-lib/tokenizer/cdata.rkt") (lib "laramie-lib/tokenizer/plaintext.rkt") (lib "laramie-test/laramie/issue-09.rkt") (lib "laramie-lib/tokenizer/tokenize.rkt") (lib "laramie-lib/tokenizer/generate-character-data.rkt"))) (name . "laramie-lib") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (author:jesse@serverracket.com . #t) (html . #t) (parser . #t) (ring:1 . #t))) (source . "https://github.com/jessealama/laramie.git") (tags . ("html" "parser")) (versions . #hash((default . #hasheq((checksum . "7afc9314ff1f363098efeb68ceb25e2e9c419e6e") (source . "https://github.com/jessealama/laramie.git") (source_url . "https://github.com/jessealama/laramie.git"))))))) ("laramie-test" . #hasheq((author . "jesse@serverracket.com") (authors . ("jesse@serverracket.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/laramie-test.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "7afc9314ff1f363098efeb68ceb25e2e9c419e6e") (checksum-error . #f) (collection . (multi)) (conflicts . ("laramie" "laramie-doc" "laramie-lib")) (date-added . 1625168727) (dependencies . ("laramie-lib" "laramie-doc")) (description . "Tests for Laramie") (implies . ("laramie-lib" "laramie-doc")) (last-checked . 1632903440) (last-edit . 1625804966) (last-updated . 1626675257) (modules . ((lib "laramie-test/laramie/issue-13.rkt") (lib "laramie-lib/html/convert.rkt") (lib "laramie-lib/tokenizer/tests/doctype.rkt") (lib "laramie-lib/html/util.rkt") (lib "laramie-lib/parser/dom.rkt") (lib "laramie-lib/tokenizer/parameters.rkt") (lib "laramie-lib/parser/main.rkt") (lib "laramie-lib/parser/parser.rkt") (lib "laramie-test/laramie/issue-37.rkt") (lib "laramie-lib/tokenizer/stream.rkt") (lib "laramie-lib/tokenizer/tests/rcdata.rkt") (lib "laramie-lib/tokenizer/tokens.rkt") (lib "laramie-lib/tokenizer/tests/rawtext.rkt") (lib "laramie-lib/parser/parameters.rkt") (lib "laramie-lib/private/xml.rkt") (lib "laramie-lib/tokenizer/predicates.rkt") (lib "laramie-lib/parser/convert.rkt") (lib "laramie-lib/tokenizer/rawtext.rkt") (lib "laramie-lib/tokenizer/tests/comment.rkt") (lib "laramie-test/laramie/issue-38.rkt") (lib "laramie-lib/tokenizer/character-data.rkt") (lib "laramie-lib/tokenizer/data.rkt") (lib "laramie-test/laramie/util.rkt") (lib "laramie-lib/tokenizer/network.rkt") (lib "laramie-lib/parser/types.rkt") (lib "laramie-lib/private/todo.rkt") (lib "laramie-test/laramie/parser.rkt") (lib "laramie-lib/tokenizer/types.rkt") (lib "laramie-test/laramie/issue-14.rkt") (lib "laramie-lib/tokenizer/rcdata.rkt") (lib "laramie-lib/tokenizer/tag.rkt") (lib "laramie-lib/tokenizer/comment.rkt") (lib "laramie-test/laramie/issue-24.rkt") (lib "laramie-lib/html/main.rkt") (lib "laramie-lib/tokenizer/main.rkt") (lib "laramie-lib/tokenizer/tests/cdata.rkt") (lib "laramie-test/laramie/issue-17.rkt") (lib "laramie-lib/tokenizer/tests/data.rkt") (lib "laramie-doc/laramie.scrbl") (lib "laramie-lib/main.rkt") (lib "laramie-lib/tokenizer/tests/plaintext.rkt") (lib "laramie-lib/tokenizer/infrastructure.rkt") (lib "laramie-lib/tokenizer/tests/tag.rkt") (lib "laramie-test/laramie/issue-36.rkt") (lib "laramie-lib/html/types.rkt") (lib "laramie-lib/tokenizer/tests/script.rkt") (lib "laramie-test/laramie/issue-41.rkt") (lib "laramie-lib/tokenizer/script.rkt") (lib "laramie-lib/tokenizer/doctype.rkt") (lib "laramie-lib/tokenizer/tests/characters.rkt") (lib "laramie-test/laramie/issue-47.rkt") (lib "laramie-lib/tokenizer/characters.rkt") (lib "laramie-lib/tokenizer/cdata.rkt") (lib "laramie-lib/tokenizer/plaintext.rkt") (lib "laramie-test/laramie/issue-09.rkt") (lib "laramie-lib/tokenizer/tokenize.rkt") (lib "laramie-lib/tokenizer/generate-character-data.rkt"))) (name . "laramie-test") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (author:jesse@serverracket.com . #t) (html . #t) (parser . #t) (ring:1 . #t) (tests . #t))) (source . "https://github.com/jessealama/laramie.git") (tags . ("html" "parser" "tests")) (versions . #hash((default . #hasheq((checksum . "7afc9314ff1f363098efeb68ceb25e2e9c419e6e") (source . "https://github.com/jessealama/laramie.git") (source_url . "https://github.com/jessealama/laramie.git"))))))) ("latex-pict" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "latex-pict" "doc/latex-pict@latex-pict/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/latex-pict.txt") (test-failure-log . "server/built/test-fail/latex-pict.txt") (test-success-log . #f))) (checksum . "847bd5f42903fa1b357125cee67b9a2addf240c6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1566486953) (dependencies . ("base" "pict-lib" "racket-poppler" "scribble-lib" "racket-doc" "draw-doc" "pict-doc")) (description . "Render LaTeX formulas as picts. The picts are vector based, so you can scale them without problems. The conversion uses pdflatex.") (implies . ()) (last-checked . 1632903440) (last-edit . 1566486953) (last-updated . 1615401118) (modules . ((lib "latex-pict/main.rkt") (lib "latex-pict/tex.rkt") (lib "latex-pict/scribblings/latex-pict.scrbl"))) (name . "latex-pict") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jensaxel@soegaard.net . #t) (formula . #t) (latex . #t) (math . #t) (pict . #t) (ring:1 . #t) (tex . #t))) (source . "https://github.com/soegaard/latex-pict.git") (tags . ("formula" "latex" "math" "pict" "tex")) (versions . #hash((default . #hasheq((checksum . "847bd5f42903fa1b357125cee67b9a2addf240c6") (source . "https://github.com/soegaard/latex-pict.git") (source_url . "https://github.com/soegaard/latex-pict.git"))))))) ("latex-utils" . #hasheq((author . "matias@fortlogic.net") (authors . ("matias@fortlogic.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "utils" "doc/utils@latex-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/latex-utils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/latex-utils.txt"))) (checksum . "631ad9b13b837f4109932252c85bc1bf6f0ae752") (checksum-error . #f) (collection . "latex-utils") (conflicts . ()) (dependencies . ("base" "scheme-lib" "scribble-lib" "seq-no-order" "at-exp-lib" "racket-doc" "scribble-doc")) (description . "Some utilities for generating LaTeX markup of various descriptions.") (implies . ()) (last-checked . 1632903440) (last-edit . 1476262536) (last-updated . 1502816147) (modules . ((lib "latex-utils/scribble.rkt") (lib "latex-utils/scribble/utils.rkt") (lib "latex-utils/scribble/references.rkt") (lib "latex-utils/scribble/math.rkt") (lib "latex-utils/scribble/private/math.rkt") (lib "latex-utils/scribble/private/theorem.rkt") (lib "latex-utils/scribble/homework.rkt") (lib "latex-utils/scribble/theorem.rkt") (lib "latex-utils/scribble/private/unmap.rkt") (lib "latex-utils/scribblings/utils.scrbl") (lib "latex-utils/scribble/private/utils.rkt") (lib "latex-utils/scribble/unmap.rkt") (lib "latex-utils/scribble/private/syntax.rkt"))) (name . "latex-utils") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (LaTeX . #t) (author:matias@fortlogic.net . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/dented42/latex-utils.git#master") (tags . ("LaTeX" "scribble")) (versions . #hash((default . #hasheq((checksum . "631ad9b13b837f4109932252c85bc1bf6f0ae752") (source . "git://github.com/dented42/latex-utils.git#master") (source_url . "http://github.com/dented42/latex-utils.git/tree/master#master"))))))) ("lathe-comforts" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-comforts.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-comforts.txt"))) (checksum . "0a91d936fddf3c356c35782384ec83ceaa29bf0d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1615519690) (dependencies . ("lathe-comforts-doc" "lathe-comforts-lib")) (description . "A collection of utilities.") (implies . ("lathe-comforts-doc" "lathe-comforts-lib")) (last-checked . 1632903440) (last-edit . 1615519690) (last-updated . 1615519690) (modules . ()) (name . "lathe-comforts") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (lathe . #t) (ring:1 . #t) (unstable . #t) (util . #t) (utility . #t))) (source . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts#main") (tags . ("lathe" "unstable" "util" "utility")) (versions . #hash((default . #hasheq((checksum . "0a91d936fddf3c356c35782384ec83ceaa29bf0d") (source . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts#main") (source_url . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts#main"))))))) ("lathe-comforts-doc" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lathe-comforts" "doc/lathe-comforts@lathe-comforts-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-comforts-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-comforts-doc.txt"))) (checksum . "0a91d936fddf3c356c35782384ec83ceaa29bf0d") (checksum-error . #f) (collection . "lathe-comforts") (conflicts . ()) (date-added . 1615519671) (dependencies . ("base" "lathe-comforts-lib" "parendown-doc" "parendown-lib" "racket-doc" "scribble-lib")) (description . "A collection of utilities. (doc)") (implies . ()) (last-checked . 1632903440) (last-edit . 1615519671) (last-updated . 1615519671) (modules . ((lib "lathe-comforts/scribblings/lathe-comforts.scrbl"))) (name . "lathe-comforts-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:rokitna@hotmail.com . #t) (lathe . #t) (ring:1 . #t) (unstable . #t) (util . #t) (utility . #t))) (source . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts-doc#main") (tags . ("lathe" "unstable" "util" "utility")) (versions . #hash((default . #hasheq((checksum . "0a91d936fddf3c356c35782384ec83ceaa29bf0d") (source . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts-doc#main") (source_url . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts-doc#main"))))))) ("lathe-comforts-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-comforts-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-comforts-lib.txt"))) (checksum . "0a91d936fddf3c356c35782384ec83ceaa29bf0d") (checksum-error . #f) (collection . "lathe-comforts") (conflicts . ()) (date-added . 1615519659) (dependencies . ("base" "parendown")) (description . "A collection of utilities. (lib)") (implies . ()) (last-checked . 1632903441) (last-edit . 1615519659) (last-updated . 1615519659) (modules . ((lib "lathe-comforts/main.rkt") (lib "lathe-comforts/list.rkt") (lib "lathe-comforts/trivial.rkt") (lib "lathe-comforts/private.rkt") (lib "lathe-comforts/contract.rkt") (lib "lathe-comforts/string.rkt") (lib "lathe-comforts/match.rkt") (lib "lathe-comforts/private/experimental/match.rkt") (lib "lathe-comforts/struct.rkt") (lib "lathe-comforts/maybe.rkt") (lib "lathe-comforts/hash.rkt"))) (name . "lathe-comforts-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (lathe . #t) (ring:1 . #t) (unstable . #t) (util . #t) (utility . #t))) (source . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts-lib#main") (tags . ("lathe" "unstable" "util" "utility")) (versions . #hash((default . #hasheq((checksum . "0a91d936fddf3c356c35782384ec83ceaa29bf0d") (source . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts-lib#main") (source_url . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts-lib#main"))))))) ("lathe-comforts-test" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-comforts-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-comforts-test.txt"))) (checksum . "0a91d936fddf3c356c35782384ec83ceaa29bf0d") (checksum-error . #f) (collection . "lathe-comforts") (conflicts . ()) (date-added . 1615519648) (dependencies . ("base" "lathe-comforts-lib" "parendown-lib" "rackunit-lib")) (description . "A collection of utilities. (test)") (implies . ()) (last-checked . 1632903441) (last-edit . 1615519648) (last-updated . 1615519648) (modules . ((lib "lathe-comforts/tests.rkt") (lib "lathe-comforts/tests/experimental/cross-phase-utils-b.rkt") (lib "lathe-comforts/tests/experimental/cross-phase-utils.rkt"))) (name . "lathe-comforts-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (lathe . #t) (ring:1 . #t) (unstable . #t) (util . #t) (utility . #t))) (source . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts-test#main") (tags . ("lathe" "unstable" "util" "utility")) (versions . #hash((default . #hasheq((checksum . "0a91d936fddf3c356c35782384ec83ceaa29bf0d") (source . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts-test#main") (source_url . "https://github.com/lathe/lathe-comforts-for-racket.git?path=lathe-comforts-test#main"))))))) ("lathe-morphisms" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-morphisms.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-morphisms.txt"))) (checksum . "422f0c5f5c5bc58d950d54886f26eb27d56d3061") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1578532357) (dependencies . ("lathe-morphisms-doc" "lathe-morphisms-lib")) (description . "Interfaces for category theory concepts.") (implies . ("lathe-morphisms-doc" "lathe-morphisms-lib")) (last-checked . 1632903441) (last-edit . 1615519636) (last-updated . 1615519636) (modules . ()) (name . "lathe-morphisms") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (algebra . #t) (author:rokitna@hotmail.com . #t) (category . #t) (contracts . #t) (equality . #t) (functional . #t) (lathe . #t) (ring:1 . #t) (set . #t))) (source . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms#main") (tags . ("algebra" "category" "contracts" "equality" "functional" "lathe" "set")) (versions . #hash((default . #hasheq((checksum . "422f0c5f5c5bc58d950d54886f26eb27d56d3061") (source . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms#main") (source_url . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms#main"))))))) ("lathe-morphisms-doc" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lathe-morphisms" "doc/lathe-morphisms@lathe-morphisms-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-morphisms-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-morphisms-doc.txt"))) (checksum . "422f0c5f5c5bc58d950d54886f26eb27d56d3061") (checksum-error . #f) (collection . "lathe-morphisms") (conflicts . ()) (date-added . 1578532226) (dependencies . ("base" "lathe-comforts-doc" "lathe-comforts-lib" "lathe-morphisms-lib" "parendown-lib" "racket-doc" "scribble-lib")) (description . "Interfaces for category theory concepts. (doc)") (implies . ()) (last-checked . 1632903441) (last-edit . 1615519624) (last-updated . 1615519624) (modules . ((lib "lathe-morphisms/scribblings/lathe-morphisms.scrbl"))) (name . "lathe-morphisms-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (algebra . #t) (author:rokitna@hotmail.com . #t) (category . #t) (contracts . #t) (equality . #t) (functional . #t) (lathe . #t) (ring:1 . #t) (set . #t))) (source . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms-doc#main") (tags . ("algebra" "category" "contracts" "equality" "functional" "lathe" "set")) (versions . #hash((default . #hasheq((checksum . "422f0c5f5c5bc58d950d54886f26eb27d56d3061") (source . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms-doc#main") (source_url . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms-doc#main"))))))) ("lathe-morphisms-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-morphisms-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-morphisms-lib.txt"))) (checksum . "422f0c5f5c5bc58d950d54886f26eb27d56d3061") (checksum-error . #f) (collection . "lathe-morphisms") (conflicts . ()) (date-added . 1578532146) (dependencies . ("base" "lathe-comforts-lib" "parendown-lib")) (description . "Interfaces for category theory concepts. (lib)") (implies . ()) (last-checked . 1632903442) (last-edit . 1615519612) (last-updated . 1615519612) (modules . ((lib "lathe-morphisms/private/logic.rkt") (lib "lathe-morphisms/private/shim.rkt") (lib "lathe-morphisms/in-fp/set.rkt") (lib "lathe-morphisms/private/in-fp/in-fp.rkt") (lib "lathe-morphisms/in-fp/category.rkt") (lib "lathe-morphisms/in-fp/mediary/set.rkt") (lib "lathe-morphisms/private/algebra/conceptual.rkt") (lib "lathe-morphisms/private/algebra/morphisms-as-values.rkt"))) (name . "lathe-morphisms-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (algebra . #t) (author:rokitna@hotmail.com . #t) (category . #t) (contracts . #t) (equality . #t) (functional . #t) (lathe . #t) (ring:1 . #t) (set . #t))) (source . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms-lib#main") (tags . ("algebra" "category" "contracts" "equality" "functional" "lathe" "set")) (versions . #hash((default . #hasheq((checksum . "422f0c5f5c5bc58d950d54886f26eb27d56d3061") (source . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms-lib#main") (source_url . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms-lib#main"))))))) ("lathe-morphisms-test" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-morphisms-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-morphisms-test.txt"))) (checksum . "422f0c5f5c5bc58d950d54886f26eb27d56d3061") (checksum-error . #f) (collection . "lathe-morphisms") (conflicts . ()) (date-added . 1578532284) (dependencies . ("base" "lathe-morphisms-lib" "parendown-lib" "rackunit-lib")) (description . "Interfaces for category theory concepts. (test)") (implies . ()) (last-checked . 1632903442) (last-edit . 1615519601) (last-updated . 1615519601) (modules . ((lib "lathe-morphisms/tests.rkt"))) (name . "lathe-morphisms-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (algebra . #t) (author:rokitna@hotmail.com . #t) (category . #t) (contracts . #t) (equality . #t) (functional . #t) (lathe . #t) (ring:1 . #t) (set . #t))) (source . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms-test#main") (tags . ("algebra" "category" "contracts" "equality" "functional" "lathe" "set")) (versions . #hash((default . #hasheq((checksum . "422f0c5f5c5bc58d950d54886f26eb27d56d3061") (source . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms-test#main") (source_url . "https://github.com/lathe/lathe-morphisms-for-racket.git?path=lathe-morphisms-test#main"))))))) ("lathe-ordinals" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-ordinals.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-ordinals.txt"))) (checksum . "f9f7b132a7e40a323a39a7c52c4280ae68f33889") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1615519584) (dependencies . ("lathe-ordinals-doc" "lathe-ordinals-lib")) (description . "Ordinal numbers supporting addition, multiplication, and exponentiation.") (implies . ("lathe-ordinals-doc" "lathe-ordinals-lib")) (last-checked . 1632903442) (last-edit . 1615519584) (last-updated . 1628824619) (modules . ()) (name . "lathe-ordinals") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (arithmetic . #t) (author:rokitna@hotmail.com . #t) (data . #t) (lathe . #t) (math . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals#main") (tags . ("arithmetic" "data" "lathe" "math" "unstable")) (versions . #hash((default . #hasheq((checksum . "f9f7b132a7e40a323a39a7c52c4280ae68f33889") (source . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals#main") (source_url . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals#main"))))))) ("lathe-ordinals-doc" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lathe-ordinals" "doc/lathe-ordinals@lathe-ordinals-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-ordinals-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-ordinals-doc.txt"))) (checksum . "f9f7b132a7e40a323a39a7c52c4280ae68f33889") (checksum-error . #f) (collection . "lathe-ordinals") (conflicts . ()) (date-added . 1615519572) (dependencies . ("base" "lathe-comforts-doc" "lathe-comforts-lib" "lathe-ordinals-lib" "parendown-lib" "racket-doc" "scribble-lib")) (description . "Ordinal numbers supporting addition, multiplication, and exponentiation. (doc)") (implies . ()) (last-checked . 1632903442) (last-edit . 1615519572) (last-updated . 1628824620) (modules . ((lib "lathe-ordinals/scribblings/lathe-ordinals.scrbl"))) (name . "lathe-ordinals-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (arithmetic . #t) (author:rokitna@hotmail.com . #t) (data . #t) (lathe . #t) (math . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals-doc#main") (tags . ("arithmetic" "data" "lathe" "math" "unstable")) (versions . #hash((default . #hasheq((checksum . "f9f7b132a7e40a323a39a7c52c4280ae68f33889") (source . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals-doc#main") (source_url . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals-doc#main"))))))) ("lathe-ordinals-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-ordinals-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-ordinals-lib.txt"))) (checksum . "f9f7b132a7e40a323a39a7c52c4280ae68f33889") (checksum-error . #f) (collection . "lathe-ordinals") (conflicts . ()) (date-added . 1615519559) (dependencies . ("base" "lathe-comforts-lib" "parendown")) (description . "Ordinal numbers supporting addition, multiplication, and exponentiation. (lib)") (implies . ()) (last-checked . 1632903442) (last-edit . 1615519559) (last-updated . 1628824621) (modules . ((lib "lathe-ordinals/olist-codata.rkt") (lib "lathe-ordinals/olist.rkt") (lib "lathe-ordinals/main.rkt"))) (name . "lathe-ordinals-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (arithmetic . #t) (author:rokitna@hotmail.com . #t) (data . #t) (lathe . #t) (math . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals-lib#main") (tags . ("arithmetic" "data" "lathe" "math" "unstable")) (versions . #hash((default . #hasheq((checksum . "f9f7b132a7e40a323a39a7c52c4280ae68f33889") (source . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals-lib#main") (source_url . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals-lib#main"))))))) ("lathe-ordinals-test" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lathe-ordinals-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lathe-ordinals-test.txt"))) (checksum . "f9f7b132a7e40a323a39a7c52c4280ae68f33889") (checksum-error . #f) (collection . "lathe-ordinals") (conflicts . ()) (date-added . 1615519547) (dependencies . ("base" "lathe-ordinals-lib" "parendown-lib" "rackunit-lib")) (description . "Ordinal numbers supporting addition, multiplication, and exponentiation. (test)") (implies . ()) (last-checked . 1632903443) (last-edit . 1615519547) (last-updated . 1628824622) (modules . ((lib "lathe-ordinals/tests.rkt"))) (name . "lathe-ordinals-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (arithmetic . #t) (author:rokitna@hotmail.com . #t) (data . #t) (lathe . #t) (math . #t) (ring:1 . #t) (unstable . #t))) (source . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals-test#main") (tags . ("arithmetic" "data" "lathe" "math" "unstable")) (versions . #hash((default . #hasheq((checksum . "f9f7b132a7e40a323a39a7c52c4280ae68f33889") (source . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals-test#main") (source_url . "https://github.com/lathe/lathe-ordinals-for-racket.git?path=lathe-ordinals-test#main"))))))) ("laundry" . #hasheq((author . "tgbugs@gmail.com") (authors . ("tgbugs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "5a396bef98d9a3cd9ee929f21cd47612dd6cb1ac") (checksum-error . #f) (collection . "laundry") (conflicts . ()) (date-added . 1632084577) (dependencies . ("base" "brag")) (description . "Org mode for Racket.") (implies . ()) (last-checked . 1632903443) (last-edit . 1632084577) (last-updated . 1632084578) (modules . ((lib "laundry/timestamp.rkt") (lib "laundry/tokenizer.rkt") (lib "laundry/cli.rkt") (lib "laundry/parser.rkt") (lib "laundry/table.rkt") (lib "laundry/parameters.rkt") (lib "laundry/paragraph.rkt") (lib "laundry/expander.rkt") (lib "laundry/perf.rkt") (lib "laundry/test.rkt") (lib "laundry/heading.rkt") (lib "laundry/block.rkt") (lib "laundry/lex-abbrev.rkt") (lib "laundry/colorer.rkt") (lib "laundry/plain-list.rkt"))) (name . "laundry") (ring . 1) (search-terms . #hasheq((author:tgbugs@gmail.com . #t) (org . #t) (ring:1 . #t))) (source . "https://github.com/tgbugs/laundry.git?path=laundry#next") (tags . ("org")) (versions . #hash((default . #hasheq((checksum . "5a396bef98d9a3cd9ee929f21cd47612dd6cb1ac") (source . "https://github.com/tgbugs/laundry.git?path=laundry#next") (source_url . "https://github.com/tgbugs/laundry.git?path=laundry#next"))))))) ("layout" . #hasheq((author . "schlee.simon@gmail.com") (authors . ("schlee.simon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/layout.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/layout.txt"))) (checksum . "5f7f0832057ea201a3d913ed943b60aaaef452e7") (checksum-error . #f) (collection . "layout") (conflicts . ()) (date-added . 1591036257) (dependencies . ("base" "draw-lib" "pict-lib" "reprovide-lang-lib" "rackunit-chk")) (description . "racket library for creating and rendering layouts, filling them with data, optionally generate example data") (implies . ()) (last-checked . 1632903443) (last-edit . 1591051559) (last-updated . 1591126141) (modules . ((lib "layout/base/modifiers/debug.rkt") (lib "layout/base/primitives/text.rkt") (lib "layout/base/types.rkt") (lib "layout/base/types/pixelratiovec2.rkt") (lib "layout/base/primitives/rect.rkt") (lib "layout/base/data.rkt") (lib "layout/base/renderers.rkt") (lib "layout/base/mode/generator.rkt") (lib "layout/base/types/anchor.rkt") (lib "layout/base/mode/wrap.rkt") (lib "layout/base/modifiers/style.rkt") (lib "layout/base/mode.rkt") (lib "layout/base/modifiers.rkt") (lib "layout/base/mode/debug.rkt") (lib "layout/base/renderers/pdf.rkt") (lib "layout/base/types/pixelratio.rkt") (lib "layout/base/data/path.rkt") (lib "layout/base/types/piece.rkt") (lib "layout/base/data/reference.rkt") (lib "layout/base/types/vec2-variant.rkt") (lib "layout/base/containers/anchored.rkt") (lib "layout/base/mode/current.rkt") (lib "layout/base/modifiers/inset.rkt") (lib "layout/base/mode/reference.rkt") (lib "layout/base/mode/layout.rkt") (lib "layout/base/types/vec2.rkt") (lib "layout/base/mode/patch.rkt") (lib "layout/base/containers/grid.rkt") (lib "layout/base/modifiers/outline.rkt") (lib "layout/base/types/piece/piece.rkt") (lib "layout/base/mode/mode.rkt") (lib "layout/base/types/piece/spacer.rkt") (lib "layout/base/private/drawoutline.rkt") (lib "layout/base/primitives/image.rkt") (lib "layout/base/private/parameter.rkt") (lib "layout/base/primitives/nothing.rkt") (lib "layout/base/mode/ref.rkt") (lib "layout/base/mode/private/syntax.rkt") (lib "layout/base/modifiers/singlepage.rkt") (lib "layout/base/data/data.rkt") (lib "layout/base/private/color.rkt") (lib "layout/base/modifiers/clip.rkt") (lib "layout/base/types/piece/sizeable.rkt") (lib "layout/base/primitives/line.rkt") (lib "layout/base/containers/box.rkt") (lib "layout/base/private/debug.rkt") (lib "layout/base/modifiers/effect.rkt") (lib "layout/base/types/piece/size.rkt") (lib "layout/base/types/direction.rkt") (lib "layout/base/types/piece/bounds.rkt") (lib "layout/base.rkt") (lib "layout/base/mode/resolve.rkt") (lib "layout/base/containers.rkt") (lib "layout/base/types/piece/pos.rkt") (lib "layout/example.rkt") (lib "layout/base/utils/bounds.rkt") (lib "layout/base/primitives.rkt"))) (name . "layout") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:schlee.simon@gmail.com . #t) (drawing . #t) (drawing-context . #t) (geometry . #t) (layout . #t) (pdf . #t) (ring:1 . #t) (svg . #t))) (source . "https://github.com/SimonLSchlee/layout.git") (tags . ("drawing" "drawing-context" "geometry" "layout" "pdf" "svg")) (versions . #hash((default . #hasheq((checksum . "5f7f0832057ea201a3d913ed943b60aaaef452e7") (source . "https://github.com/SimonLSchlee/layout.git") (source_url . "https://github.com/SimonLSchlee/layout.git"))))))) ("layout-interactive" . #hasheq((author . "schlee.simon@gmail.com") (authors . ("schlee.simon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/layout-interactive.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/layout-interactive.txt"))) (checksum . "bf245c3ecbc2c93cc236fd27ea7b37bb8560eccd") (checksum-error . #f) (collection . "layout-interactive") (conflicts . ()) (date-added . 1591044147) (dependencies . ("base" "layout" "gui-lib")) (description . "interact utility for use with 'layout' library ") (implies . ()) (last-checked . 1632903443) (last-edit . 1591044147) (last-updated . 1591131305) (modules . ((lib "layout-interactive/interactive.rkt"))) (name . "layout-interactive") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:schlee.simon@gmail.com . #t) (drawing . #t) (geometry . #t) (gui . #t) (layout . #t) (ring:1 . #t))) (source . "https://github.com/SimonLSchlee/layout-interactive.git") (tags . ("drawing" "geometry" "gui" "layout")) (versions . #hash((default . #hasheq((checksum . "bf245c3ecbc2c93cc236fd27ea7b37bb8560eccd") (source . "https://github.com/SimonLSchlee/layout-interactive.git") (source_url . "https://github.com/SimonLSchlee/layout-interactive.git"))))))) ("lazy" . #hash((author . "eli@racket-lang.org stchang@racket-lang.org") (authors . ("eli@racket-lang.org" "stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lazy" "doc/lazy@lazy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "lazy") (conflicts . ()) (dependencies . ("base" "drracket-plugin-lib" "htdp-lib" "string-constants-lib" "compatibility-lib" "mzscheme-doc" "scheme-lib" "eli-tester" "racket-doc" "scribble-lib")) (description . "The implementation of the Lazy Racket language") (implies . ()) (last-checked . 1632903444) (last-edit . 1417659583) (last-updated . 1576512406) (modules . ((lib "lazy/lazy.scrbl") (lib "lazy/tests/lang.rkt") (lib "lazy/tests/promise.rkt") (lib "lazy/tests/main.rkt") (lib "lazy/lazy.rkt") (lib "lazy/lang/reader.rkt") (lib "lazy/main.rkt") (lib "lazy/tests/space.rkt") (lib "lazy/list.rkt") (lib "lazy/base.rkt") (lib "lazy/lazy-tool.rkt") (lib "lazy/force.rkt") (lib "lazy/base/lang/reader.rkt") (lib "lazy/tests/forcers.rkt"))) (name . "lazy") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:eli@racket-lang.org . #t) (author:stchang@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "2cc3a2434341a1a3a22a36a3fa1d1356086da274") (source . "git://github.com/racket/lazy") (source_url . "http://github.com/racket/lazy/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("lazytree" . #hasheq((author . "skasivaj@gmail.com") (authors . ("skasivaj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lazytree" "doc/lazytree@lazytree/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lazytree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lazytree.txt"))) (checksum . "2cb43e3a629e5eb95ddfcae3d7c25b947eee6a2d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1586998869) (dependencies . ("base" "collections-lib" "relation" "social-contract" "scribble-lib" "scribble-abbrevs" "racket-doc" "collections-doc" "functional-doc" "rackunit-lib" "pict-lib" "cover" "cover-coveralls" "sandbox-lib")) (description . "Lightweight, general-purpose utilities for working with tree-structured data.") (implies . ()) (last-checked . 1632903444) (last-edit . 1586998869) (last-updated . 1630264619) (modules . ((lib "data/lazytree/private/util.rkt") (lib "data/lazytree.rkt") (lib "data/lazytree/scribblings/lazytree.scrbl"))) (name . "lazytree") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:skasivaj@gmail.com . #t) (functional . #t) (lazy . #t) (ring:1 . #t) (tree . #t))) (source . "https://github.com/countvajhula/lazytree.git") (tags . ("functional" "lazy" "tree")) (versions . #hash((default . #hasheq((checksum . "2cb43e3a629e5eb95ddfcae3d7c25b947eee6a2d") (source . "https://github.com/countvajhula/lazytree.git") (source_url . "https://github.com/countvajhula/lazytree.git"))))))) ("ldap" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ldap" "doc/ldap@ldap/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ldap.txt") (test-failure-log . "server/built/test-fail/ldap.txt") (test-success-log . #f))) (checksum . "e7440a2632f01563182f277135ab066c41157639") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.15") "eli-tester" "racket-doc" "scribble-lib")) (description . "A native Racket interface to LDAP authentication.") (implies . ()) (last-checked . 1632903444) (last-edit . 1352832285) (last-updated . 1502816149) (modules . ((lib "net/ldap/ldap.scrbl") (lib "tests/net/test.rkt") (lib "net/ldap.rkt"))) (name . "ldap") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (net . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/ldap/master") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "e7440a2632f01563182f277135ab066c41157639") (source . "github://github.com/jeapostrophe/ldap/master") (source_url . "http://github.com/jeapostrophe/ldap/tree/master"))))))) ("ldap-ffi" . #hasheq((author . "kalimehtar@mail.ru dmitryhertz@gmail.com") (authors . ("kalimehtar@mail.ru" "dmitryhertz@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ldap-ffi" "doc/ldap-ffi@ldap-ffi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ldap-ffi.txt") (test-failure-log . "server/built/test-fail/ldap-ffi.txt") (test-success-log . #f))) (checksum . "e3d610b15e8680642c8d4ee844ffcd38ea1a20e4") (checksum-error . #f) (collection . "ldap-ffi") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "ldap-ffi: a Racket LDAP client built on top of libldap C API") (implies . ()) (last-checked . 1632903444) (last-edit . 1502735833) (last-updated . 1555877074) (modules . ((lib "ldap-ffi/scribblings/ldap-ffi.scrbl") (lib "ldap-ffi/ldap.rkt") (lib "ldap-ffi/test.rkt") (lib "ldap-ffi/ffi.rkt") (lib "ldap-ffi/main.rkt"))) (name . "ldap-ffi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dmitryhertz@gmail.com . #t) (author:kalimehtar@mail.ru . #t) (ffi . #t) (ldap . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/DmHertz/ldap-ffi") (tags . ("ffi" "ldap" "net")) (versions . #hash((default . #hasheq((checksum . "e3d610b15e8680642c8d4ee844ffcd38ea1a20e4") (source . "git://github.com/DmHertz/ldap-ffi") (source_url . "http://github.com/DmHertz/ldap-ffi/tree/master"))))))) ("learn-to-type" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/learn-to-type.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/learn-to-type.txt"))) (checksum . "e92730f9e7c1560a9f1dc82fbed6046c4532d167") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "images-lib")) (description . "A very simple GUI program to learn to type by copying a text.") (implies . ()) (last-checked . 1632903444) (last-edit . 1383320998) (last-updated . 1516438252) (modules . ((lib "learn-to-type/main.rkt") (lib "learn-to-type/ltt-gui.rkt"))) (name . "learn-to-type") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (gui . #t) (ring:1 . #t))) (source . "github://github.com/Metaxal/learn-to-type/master") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "e92730f9e7c1560a9f1dc82fbed6046c4532d167") (source . "github://github.com/Metaxal/learn-to-type/master") (source_url . "http://github.com/Metaxal/learn-to-type/tree/master"))))))) ("left-pad" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "left-pad" "doc/left-pad@left-pad/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/left-pad.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/left-pad.txt"))) (checksum . "2b17c398c033cc0cbf3535144860676ca682027d") (checksum-error . #f) (collection . "left-pad") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "String left pad") (implies . ()) (last-checked . 1632903445) (last-edit . 1480731742) (last-updated . 1582482989) (modules . ((lib "left-pad/docs/left-pad.scrbl") (lib "left-pad/main.rkt") (lib "left-pad/docs/typed-left-pad.scrbl") (lib "left-pad/tests/typed.rkt") (lib "left-pad/private/left-pad.rkt") (lib "left-pad/typed.rkt") (lib "left-pad/tests/untyped.rkt"))) (name . "left-pad") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t) (string . #t))) (source . "git://github.com/bennn/racket-left-pad") (tags . ("string")) (versions . #hash((default . #hasheq((checksum . "2b17c398c033cc0cbf3535144860676ca682027d") (source . "git://github.com/bennn/racket-left-pad") (source_url . "http://github.com/bennn/racket-left-pad/tree/master"))))))) ("leftist-tree" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "leftist-tree" "doc/leftist-tree@leftist-tree/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/leftist-tree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/leftist-tree.txt"))) (checksum . "3e4f55aecdd0978f282dde6964f444b5da71ed52") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "data-enumerate-lib")) (description . "Functional priority queues") (implies . ()) (last-checked . 1632903445) (last-edit . 1440881081) (last-updated . 1502816149) (modules . ((lib "data/leftist-tree/leftist-tree.scrbl") (lib "data/leftist-tree.rkt"))) (name . "leftist-tree") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (data . #t) (ring:1 . #t))) (source . "git://github.com/97jaz/leftist-tree") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "3e4f55aecdd0978f282dde6964f444b5da71ed52") (source . "git://github.com/97jaz/leftist-tree") (source_url . "http://github.com/97jaz/leftist-tree/tree/master"))))))) ("lens" . #hasheq((author . "jackhfirth@gmail.com alexander@knauth.org") (authors . ("jackhfirth@gmail.com" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lens.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lens.txt"))) (checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "lens-common" "lens-data" "lens-lib" "lens-unstable" "lens-doc")) (description . "Composable, functional lenses") (implies . ("lens-common" "lens-data" "lens-lib" "lens-unstable" "lens-doc")) (last-checked . 1632903446) (last-edit . 1500074979) (last-updated . 1568145120) (modules . ()) (name . "lens") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (functional . #t) (lens . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/lens?path=lens") (tags . ("data" "functional" "lens")) (versions . #hash((default . #hasheq((checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (source . "git://github.com/jackfirth/lens?path=lens") (source_url . "http://github.com/jackfirth/lens/tree/master?path=lens"))))))) ("lens-common" . #hasheq((author . "jackhfirth@gmail.com alexander@knauth.org") (authors . ("jackhfirth@gmail.com" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lens-common.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lens-common.txt"))) (checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("racket" #:version "6.3") "base" "fancy-app" "rackunit-lib" "reprovide-lang-lib" "lens-data" "sweet-exp-lib")) (description . "Base lens constructors and additional combinators") (implies . ()) (last-checked . 1632903446) (last-edit . 1500074998) (last-updated . 1568145120) (modules . ((lib "lens/private/test-util/test-multi.rkt") (lib "lens/private/compound/lazy.rkt") (lib "lens/private/compound/identity.rkt") (lib "lens/private/base/contract.rkt") (lib "lens/private/compound/compose.rkt") (lib "lens/private/common/applicable.rkt") (lib "lens/private/compound/arrow.rkt") (lib "lens/private/util/rest-contract.rkt") (lib "lens/private/base/gen-lens.rkt") (lib "lens/private/test-util/test-lens.rkt") (lib "lens/private/compound/thrush.rkt") (lib "lens/private/base/main.rkt") (lib "lens/private/isomorphism/base.rkt") (lib "lens/private/compound/define-nested.rkt") (lib "lens/private/base/view-set.rkt") (lib "lens/private/util/id-append.rkt") (lib "lens/private/base/base.rkt") (lib "lens/private/compound/if.rkt") (lib "lens/common.rkt") (lib "lens/private/compound/main.rkt") (lib "lens/private/base/transform.rkt") (lib "lens/private/compound/zoom.rkt") (lib "lens/private/util/list-pair-contract.rkt") (lib "lens/private/isomorphism/compound.rkt") (lib "lens/private/base/make-lens.rkt"))) (name . "lens-common") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (functional . #t) (lens . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/lens?path=lens-common") (tags . ("data" "functional" "lens")) (versions . #hash((default . #hasheq((checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (source . "git://github.com/jackfirth/lens?path=lens-common") (source_url . "http://github.com/jackfirth/lens/tree/master?path=lens-common"))))))) ("lens-data" . #hasheq((author . "jackhfirth@gmail.com alexander@knauth.org") (authors . ("jackhfirth@gmail.com" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lens-data.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lens-data.txt"))) (checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("racket" #:version "6.3") "base" "lens-common" "rackunit-lib" "fancy-app" "syntax-classes-lib" "struct-update-lib" "kw-make-struct-lib" "reprovide-lang-lib" "sweet-exp-lib")) (description . "Lens constructors for various Racket data structures") (implies . ()) (last-checked . 1632903446) (last-edit . 1500075017) (last-updated . 1568145121) (modules . ((lib "lens/private/match.rkt") (lib "lens/private/util/functional-set.rkt") (lib "lens/private/list/car-cdr.rkt") (lib "lens/private/hash/join-hash.rkt") (lib "lens/private/vector/nested.rkt") (lib "lens/private/stream/stream.rkt") (lib "lens/private/string/substring.rkt") (lib "lens/private/vector/pick.rkt") (lib "lens/private/struct/struct-list.rkt") (lib "lens/private/set/set-filterer.rkt") (lib "lens/data/hash.rkt") (lib "lens/private/dict/dict-nested.rkt") (lib "lens/private/util/functional-dict.rkt") (lib "lens/private/struct/field.rkt") (lib "lens/private/view-set/set-all.rkt") (lib "lens/private/vector/join-vector.rkt") (lib "lens/data/struct.rkt") (lib "lens/private/hash/main.rkt") (lib "lens/private/util/improper-list-length.rkt") (lib "lens/private/struct/struct-nested.rkt") (lib "lens/private/list/multi.rkt") (lib "lens/private/isomorphism/main.rkt") (lib "lens/private/list/main.rkt") (lib "lens/private/list/list-ref-take-drop.rkt") (lib "lens/private/list/join-assoc.rkt") (lib "lens/private/string/join-string.rkt") (lib "lens/private/syntax/main.rkt") (lib "lens/private/string/string-split.rkt") (lib "lens/private/list/join-list.rkt") (lib "lens/private/string/main.rkt") (lib "lens/private/struct/struct.rkt") (lib "lens/private/hash/nested.rkt") (lib "lens/private/list/assoc.rkt") (lib "lens/private/list/append.rkt") (lib "lens/private/hash/ref.rkt") (lib "lens/private/syntax/syntax.rkt") (lib "lens/private/hash/pick.rkt") (lib "lens/private/syntax/srcloc.rkt") (lib "lens/private/syntax/syntax-keyword.rkt") (lib "lens/private/hash/hash-filterer.rkt") (lib "lens/private/vector/main.rkt") (lib "lens/private/tests/gen-lens-fallback-loop.rkt") (lib "lens/data/string.rkt") (lib "lens/data/dict.rkt") (lib "lens/private/struct/struct-join.rkt") (lib "lens/data/vector.rkt") (lib "lens/private/list/flatten.rkt") (lib "lens/private/list/sublist.rkt") (lib "lens/private/struct/main.rkt") (lib "lens/data/stream.rkt") (lib "lens/private/string/string.rkt") (lib "lens/private/list/reverse.rkt") (lib "lens/private/list/map.rkt") (lib "lens/data/list.rkt") (lib "lens/private/isomorphism/data.rkt") (lib "lens/private/vector/ref.rkt") (lib "lens/private/dict/dict.rkt") (lib "lens/private/set/set-member.rkt") (lib "lens/private/list/cadr-etc.rkt") (lib "lens/data.rkt") (lib "lens/private/util/alternating-list.rkt") (lib "lens/private/util/immutable.rkt") (lib "lens/private/syntax/stx.rkt"))) (name . "lens-data") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (functional . #t) (lens . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/lens?path=lens-data") (tags . ("data" "functional" "lens")) (versions . #hash((default . #hasheq((checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (source . "git://github.com/jackfirth/lens?path=lens-data") (source_url . "http://github.com/jackfirth/lens/tree/master?path=lens-data"))))))) ("lens-doc" . #hasheq((author . "jackhfirth@gmail.com alexander@knauth.org") (authors . ("jackhfirth@gmail.com" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lens" "doc/lens@lens-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lens-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lens-doc.txt"))) (checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "lens-lib" "lens-unstable" "scribble-lib" "reprovide-lang-lib" "jack-scribble-example" "at-exp-lib" "doc-coverage" "racket-doc" "sweet-exp-lib")) (description . "Documentation for the lens libraries") (implies . ()) (last-checked . 1632903446) (last-edit . 1500075042) (last-updated . 1568145122) (modules . ((lib "lens/private/scribblings/reference.scrbl") (lib "unstable/lens/sublist.scrbl") (lib "lens/private/scribblings/guide/built-in/ordered.scrbl") (lib "lens/private/doc-util/other-reference.rkt") (lib "lens/private/scribblings/guide/built-in.scrbl") (lib "lens/private/scribblings/guide.scrbl") (lib "unstable/lens/dict-nested.scrbl") (lib "lens/private/list/list-ref-take-drop.scrbl") (lib "lens/private/string/main.scrbl") (lib "lens/private/struct/struct.scrbl") (lib "lens/private/hash/pick.scrbl") (lib "lens/private/list/assoc.scrbl") (lib "unstable/lens/syntax.scrbl") (lib "unstable/lens/struct-provide.scrbl") (lib "lens/private/hash/nested.scrbl") (lib "unstable/lens/set-filterer.scrbl") (lib "unstable/lens/set-all.scrbl") (lib "lens/private/doc-util/deflenses.rkt") (lib "lens/private/base/laws.scrbl") (lib "lens/private/list/flatten.scrbl") (lib "lens/private/hash/main.scrbl") (lib "lens/private/syntax/stx.scrbl") (lib "lens/private/list/multi.scrbl") (lib "lens/private/base/view-set.scrbl") (lib "lens/private/scribblings/reference/common.scrbl") (lib "lens/private/string/string.scrbl") (lib "lens/private/compound/compose.scrbl") (lib "unstable/lens/tests/doc-coverage.rkt") (lib "unstable/lens/match.scrbl") (lib "lens/private/vector/pick.scrbl") (lib "lens/main.scrbl") (lib "lens/private/scribblings/guide/built-in/key-value.scrbl") (lib "lens/private/doc-util/scribble-include-no-subsection.rkt") (lib "lens/private/compound/main.scrbl") (lib "lens/private/vector/join-vector.scrbl") (lib "unstable/lens/zoom.scrbl") (lib "unstable/lens/isomorphism.scrbl") (lib "lens/private/base/base.scrbl") (lib "lens/private/list/main.scrbl") (lib "lens/private/scribblings/guide/user-defined/custom.scrbl") (lib "lens/private/tests/doc-coverage.rkt") (lib "unstable/lens/string-split.scrbl") (lib "lens/private/doc-util/lenses-examples.rkt") (lib "lens/private/string/join-string.scrbl") (lib "unstable/lens/arrow.scrbl") (lib "lens/private/list/car-cdr.scrbl") (lib "lens/private/dict/dict.scrbl") (lib "lens/private/scribblings/guide/user-defined.scrbl") (lib "lens/private/struct/main.scrbl") (lib "lens/private/hash/ref.scrbl") (lib "unstable/lens/main.scrbl") (lib "unstable/lens/lazy.scrbl") (lib "lens/private/stream/stream.scrbl") (lib "unstable/lens/if.scrbl") (lib "lens/private/doc-util/main.rkt") (lib "unstable/lens/substring.scrbl") (lib "lens/private/scribblings/guide/introduction.scrbl") (lib "lens/private/list/join-list.scrbl") (lib "unstable/lens/define-nested.scrbl") (lib "lens/private/vector/main.scrbl") (lib "lens/private/struct/field.scrbl") (lib "unstable/lens/hash-filterer.scrbl") (lib "unstable/lens/struct-list.scrbl") (lib "lens/private/base/transform.scrbl") (lib "lens/private/vector/ref.scrbl") (lib "unstable/lens/set-member.scrbl") (lib "lens/private/scribblings/guide/user-defined/struct.scrbl") (lib "lens/private/vector/nested.scrbl") (lib "lens/private/base/contract.scrbl") (lib "lens/applicable.scrbl") (lib "lens/private/scribblings/reference/data.scrbl") (lib "lens/private/doc-util/include-sections.rkt") (lib "lens/private/doc-util/lens-tech.rkt") (lib "unstable/lens/join-assoc.scrbl") (lib "lens/private/hash/join-hash.scrbl") (lib "unstable/lens/struct-join.scrbl") (lib "unstable/lens/map.scrbl") (lib "lens/private/doc-util/stability-notice.rkt") (lib "lens/private/syntax/srcloc.scrbl") (lib "lens/private/base/main.scrbl") (lib "lens/private/compound/thrush.scrbl") (lib "unstable/lens/struct-nested.scrbl"))) (name . "lens-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (functional . #t) (lens . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/lens?path=lens-doc") (tags . ("data" "functional" "lens")) (versions . #hash((default . #hasheq((checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (source . "git://github.com/jackfirth/lens?path=lens-doc") (source_url . "http://github.com/jackfirth/lens/tree/master?path=lens-doc"))))))) ("lens-lib" . #hasheq((author . "jackhfirth@gmail.com alexander@knauth.org") (authors . ("jackhfirth@gmail.com" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lens-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lens-lib.txt"))) (checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "lens-common" "lens-data" "reprovide-lang-lib" "rackunit-lib" "sweet-exp-lib")) (description . "Implementation (no docs) of the lens library, includes lens-data and lens-common") (implies . ("lens-common" "lens-data")) (last-checked . 1632903446) (last-edit . 1500075070) (last-updated . 1568145122) (modules . ((lib "lens/main.rkt") (lib "lens/applicable.rkt"))) (name . "lens-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (functional . #t) (lens . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/lens?path=lens-lib") (tags . ("data" "functional" "lens")) (versions . #hash((default . #hasheq((checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (source . "git://github.com/jackfirth/lens?path=lens-lib") (source_url . "http://github.com/jackfirth/lens/tree/master?path=lens-lib"))))))) ("lens-unstable" . #hasheq((author . "jackhfirth@gmail.com alexander@knauth.org") (authors . ("jackhfirth@gmail.com" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lens-unstable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lens-unstable.txt"))) (checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "lens-lib" "reprovide-lang-lib" "sweet-exp-lib")) (description . "Unstable and experimental features for lenses") (implies . ()) (last-checked . 1632903447) (last-edit . 1500075095) (last-updated . 1568145123) (modules . ((lib "unstable/lens/map.rkt") (lib "unstable/lens/struct-provide.rkt") (lib "unstable/lens/string-split.rkt") (lib "unstable/lens/syntax/srcloc.rkt") (lib "unstable/lens/set-member.rkt") (lib "unstable/lens/main.rkt") (lib "unstable/lens/flatten.rkt") (lib "unstable/lens/sublist.rkt") (lib "unstable/lens/struct-nested.rkt") (lib "unstable/lens/reverse.rkt") (lib "unstable/lens.rkt") (lib "unstable/lens/set-all.rkt") (lib "unstable/lens/struct-join.rkt") (lib "unstable/lens/syntax.rkt") (lib "unstable/lens/if.rkt") (lib "unstable/lens/isomorphism.rkt") (lib "unstable/lens/substring.rkt") (lib "unstable/lens/lazy.rkt") (lib "unstable/lens/syntax/stx.rkt") (lib "unstable/lens/struct-list.rkt") (lib "unstable/lens/set-filterer.rkt") (lib "unstable/lens/match.rkt") (lib "unstable/lens/dict-nested.rkt") (lib "unstable/lens/hash-filterer.rkt") (lib "unstable/lens/zoom.rkt") (lib "unstable/lens/define-nested.rkt") (lib "unstable/lens/arrow.rkt") (lib "unstable/lens/join-assoc.rkt"))) (name . "lens-unstable") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (functional . #t) (lens . #t) (ring:1 . #t) (unstable . #t))) (source . "git://github.com/jackfirth/lens?path=lens-unstable") (tags . ("data" "functional" "lens" "unstable")) (versions . #hash((default . #hasheq((checksum . "733db7744921409b69ddc78ae5b23ffaa6b91e37") (source . "git://github.com/jackfirth/lens?path=lens-unstable") (source_url . "http://github.com/jackfirth/lens/tree/master?path=lens-unstable"))))))) ("levenshtein" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "levenshtein" "doc/levenshtein@levenshtein/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/levenshtein.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/levenshtein.txt"))) (checksum . "47882e819e941121e4c1873f907502120ebb4382") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Levenshtein Distance Metric") (implies . ()) (last-checked . 1632903447) (last-edit . 1456707768) (last-updated . 1601440013) (modules . ((lib "levenshtein/levenshtein.scrbl") (lib "levenshtein/main.rkt"))) (name . "levenshtein") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/levenshtein.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "47882e819e941121e4c1873f907502120ebb4382") (source . "http://www.neilvandyke.org/racket/levenshtein.zip") (source_url . "http://www.neilvandyke.org/racket/levenshtein.zip"))))))) ("lex-yacc-example" . #hasheq((author . "petter.pripp@yahoo.com") (authors . ("petter.pripp@yahoo.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "d4ea0a56d8eb15b57c070dc55a879f7821af041b") (checksum-error . #f) (collection . "lex-yacc-example") (conflicts . ()) (date-added . 1630705959) (dependencies . ("base" "parser-tools-lib" "racket-doc" "scribble-lib" "parser-tools-doc" "sandbox-lib")) (description . "Examples for lexer and yacc") (implies . ()) (last-checked . 1632903448) (last-edit . 1630801815) (last-updated . 1630873026) (modules . ((lib "lex-yacc-example/mfcalc/lexer-test.rkt") (lib "lex-yacc-example/calc/lexer-test.rkt") (lib "lex-yacc-example/rpcalc/lexer-test.rkt") (lib "lex-yacc-example/rpcalc/lexer.rkt") (lib "lex-yacc-example/mfcalc/mfcalc-test.rkt") (lib "lex-yacc-example/calc/lexer.rkt") (lib "lex-yacc-example/calc.rkt") (lib "lex-yacc-example/calc/reader.rkt") (lib "lex-yacc-example/rpcalc/parser.rkt") (lib "lex-yacc-example/calc/calc-test.rkt") (lib "lex-yacc-example/test/test.rkt") (lib "lex-yacc-example/scribblings/lex-yacc-example.scrbl") (lib "lex-yacc-example/rpcalc/main.rkt") (lib "lex-yacc-example/mfcalc/reader.rkt") (lib "lex-yacc-example/rpcalc/parser-test.rkt") (lib "lex-yacc-example/mfcalc/funs.rkt") (lib "lex-yacc-example/mfcalc.rkt") (lib "lex-yacc-example/calc/parser.rkt") (lib "lex-yacc-example/mfcalc/parser-test.rkt") (lib "lex-yacc-example/rpcalc/rpcalc-test.rkt") (lib "lex-yacc-example/mfcalc/parser.rkt") (lib "lex-yacc-example/mfcalc/main.rkt") (lib "lex-yacc-example/calc/main.rkt") (lib "lex-yacc-example/mfcalc/lexer.rkt") (lib "lex-yacc-example/rpcalc.rkt") (lib "lex-yacc-example/mfcalc/expander.rkt") (lib "lex-yacc-example/mfcalc/s-exp-test.rkt") (lib "lex-yacc-example/rpcalc/reader.rkt") (lib "lex-yacc-example/calc/parser-test.rkt"))) (name . "lex-yacc-example") (ring . 1) (search-terms . #hasheq((author:petter.pripp@yahoo.com . #t) (dsl . #t) (lex . #t) (parse . #t) (ring:1 . #t) (yacc . #t))) (source . "https://github.com/petterpripp/lex-yacc-example.git#master") (tags . ("dsl" "lex" "parse" "yacc")) (versions . #hash((default . #hasheq((checksum . "d4ea0a56d8eb15b57c070dc55a879f7821af041b") (source . "https://github.com/petterpripp/lex-yacc-example.git#master") (source_url . "https://github.com/petterpripp/lex-yacc-example.git#master"))))))) ("libansilove" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "64b6db443406a6b19e3185a6bfee605169ca30c9") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1631573465) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "FFI to Libansilove") (implies . ()) (last-checked . 1632903448) (last-edit . 1632100988) (last-updated . 1632435280) (modules . ((lib "libansilove/main.rkt") (lib "libansilove/scribblings/low.scrbl") (lib "libansilove/scribblings/libansilove.scrbl") (lib "libansilove/private/define.rkt") (lib "libansilove/libansilove.rkt") (lib "libansilove/ansilove.rkt") (lib "libansilove/scribblings/high.scrbl") (lib "libansilove/examples/example.rkt"))) (name . "libansilove") (ring . 1) (search-terms . #hasheq((ansi . #t) (ansilove . #t) (author:xgqt@riseup.net . #t) (bindings . #t) (ffi . #t) (libansilove . #t) (ring:1 . #t))) (source . "https://gitlab.com/xgqt/racket-libansilove.git") (tags . ("ansi" "ansilove" "bindings" "ffi" "libansilove")) (versions . #hash((default . #hasheq((checksum . "64b6db443406a6b19e3185a6bfee605169ca30c9") (source . "https://gitlab.com/xgqt/racket-libansilove.git") (source_url . "https://gitlab.com/xgqt/racket-libansilove.git"))))))) ("libargon2" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libargon2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libargon2.txt"))) (checksum . "fa799ff37ef8864ef8c74c883238086e93ba1af5") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1582277807) (dependencies . ("base" ("libargon2-aarch64-macosx" #:platform #rx"aarch64-macosx") ("libargon2-i386-win32" #:platform #rx"win32.i386") ("libargon2-x86_64-linux" #:platform #rx"x86_64-linux") ("libargon2-x86_64-macosx" #:platform #rx"x86_64-macosx") ("libargon2-x86_64-win32" #:platform #rx"win32.x86_64"))) (description . "Meta-package that installs the appropriate libargon2 shared library for the current platform on Linux, macOS and Windows.") (implies . ()) (last-checked . 1632903448) (last-edit . 1582277807) (last-updated . 1624176962) (modules . ()) (name . "libargon2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (argon2 . #t) (artifact . #t) (author:bogdan@defn.io . #t) (binary . #t) (ffi . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-libargon2.git?path=libargon2") (tags . ("argon2" "artifact" "binary" "ffi")) (versions . #hash((default . #hasheq((checksum . "fa799ff37ef8864ef8c74c883238086e93ba1af5") (source . "https://github.com/Bogdanp/racket-libargon2.git?path=libargon2") (source_url . "https://github.com/Bogdanp/racket-libargon2.git?path=libargon2"))))))) ("libargon2-aarch64-macosx" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libargon2-aarch64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libargon2-aarch64-macosx.txt"))) (checksum . "fe23bb3c3feaa820ec9b0295fed25c43e3c914ae") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1622200706) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903449) (last-edit . 1622200706) (last-updated . 1624176962) (modules . ()) (name . "libargon2-aarch64-macosx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (argon2 . #t) (artifact . #t) (author:bogdan@defn.io . #t) (binary . #t) (ffi . #t) (ring:1 . #t))) (source . "https://racket.defn.io/libargon2-aarch64-macosx-20190702.tar.gz") (tags . ("argon2" "artifact" "binary" "ffi")) (versions . #hash((default . #hasheq((checksum . "fe23bb3c3feaa820ec9b0295fed25c43e3c914ae") (source . "https://racket.defn.io/libargon2-aarch64-macosx-20190702.tar.gz") (source_url . "https://racket.defn.io/libargon2-aarch64-macosx-20190702.tar.gz"))))))) ("libargon2-i386-win32" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libargon2-i386-win32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libargon2-i386-win32.txt"))) (checksum . "df812b0b8a8bef536f7133a9d2b37e761df4f190") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1582277743) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903451) (last-edit . 1582277743) (last-updated . 1624176964) (modules . ()) (name . "libargon2-i386-win32") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (argon2 . #t) (artifact . #t) (author:bogdan@defn.io . #t) (binary . #t) (ffi . #t) (ring:1 . #t))) (source . "https://racket.defn.io/libargon2-i386-win32-20190702.tar.gz") (tags . ("argon2" "artifact" "binary" "ffi")) (versions . #hash((default . #hasheq((checksum . "df812b0b8a8bef536f7133a9d2b37e761df4f190") (source . "https://racket.defn.io/libargon2-i386-win32-20190702.tar.gz") (source_url . "https://racket.defn.io/libargon2-i386-win32-20190702.tar.gz"))))))) ("libargon2-x86_64-linux" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libargon2-x86_64-linux.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libargon2-x86_64-linux.txt"))) (checksum . "54d73188c7a1e60dd746e1d0bbb7a701f7a111e7") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1582200570) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903452) (last-edit . 1583230044) (last-updated . 1624176965) (modules . ()) (name . "libargon2-x86_64-linux") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (argon2 . #t) (artifact . #t) (author:bogdan@defn.io . #t) (binary . #t) (ffi . #t) (ring:1 . #t))) (source . "https://racket.defn.io/libargon2-x86_64-linux-20190702.tar.gz") (tags . ("argon2" "artifact" "binary" "ffi")) (versions . #hash((default . #hasheq((checksum . "54d73188c7a1e60dd746e1d0bbb7a701f7a111e7") (source . "https://racket.defn.io/libargon2-x86_64-linux-20190702.tar.gz") (source_url . "https://racket.defn.io/libargon2-x86_64-linux-20190702.tar.gz"))))))) ("libargon2-x86_64-macosx" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libargon2-x86_64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libargon2-x86_64-macosx.txt"))) (checksum . "dcbfab397732092ee3b4e26f6ec2bbc38077eff9") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1582200597) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903453) (last-edit . 1582200597) (last-updated . 1624176967) (modules . ()) (name . "libargon2-x86_64-macosx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (argon2 . #t) (artifact . #t) (author:bogdan@defn.io . #t) (binary . #t) (ffi . #t) (ring:1 . #t))) (source . "https://racket.defn.io/libargon2-x86_64-macosx-20190702.tar.gz") (tags . ("argon2" "artifact" "binary" "ffi")) (versions . #hash((default . #hasheq((checksum . "dcbfab397732092ee3b4e26f6ec2bbc38077eff9") (source . "https://racket.defn.io/libargon2-x86_64-macosx-20190702.tar.gz") (source_url . "https://racket.defn.io/libargon2-x86_64-macosx-20190702.tar.gz"))))))) ("libargon2-x86_64-win32" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libargon2-x86_64-win32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libargon2-x86_64-win32.txt"))) (checksum . "3f59be8efc96e51f863dd5af33821ef6c857ef88") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1582277708) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903455) (last-edit . 1582277708) (last-updated . 1624176969) (modules . ()) (name . "libargon2-x86_64-win32") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (argon2 . #t) (artifact . #t) (author:bogdan@defn.io . #t) (binary . #t) (ffi . #t) (ring:1 . #t))) (source . "https://racket.defn.io/libargon2-x86_64-win32-20190702.tar.gz") (tags . ("argon2" "artifact" "binary" "ffi")) (versions . #hash((default . #hasheq((checksum . "3f59be8efc96e51f863dd5af33821ef6c857ef88") (source . "https://racket.defn.io/libargon2-x86_64-win32-20190702.tar.gz") (source_url . "https://racket.defn.io/libargon2-x86_64-win32-20190702.tar.gz"))))))) ("libgit2" . #hasheq((author . "clements@racket-lang.org bradley.busching@gmail.com") (authors . ("clements@racket-lang.org" "bradley.busching@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libgit2" "doc/libgit2@libgit2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libgit2.txt") (test-failure-log . "server/built/test-fail/libgit2.txt") (test-success-log . #f))) (checksum . "6d6a007543900eb7a6fbbeba55850288665bdde5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" ("libgit2-x86_64-linux-natipkg" #:platform "x86_64-linux-natipkg") "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Racket bindings for the Libgit2 library.") (implies . ()) (last-checked . 1632903456) (last-edit . 1541465024) (last-updated . 1557181205) (modules . ((lib "libgit2/scribblings/message.scrbl") (lib "libgit2/include/oidarray.rkt") (lib "libgit2/include/filter.rkt") (lib "libgit2/scribblings/signature.scrbl") (lib "libgit2/include/buffer.rkt") (lib "libgit2/include/trace.rkt") (lib "libgit2/include/blame.rkt") (lib "libgit2/scribblings/treebuilder.scrbl") (lib "libgit2/scribblings/stash.scrbl") (lib "libgit2/include/errors.rkt") (lib "libgit2/scribblings/fetch.scrbl") (lib "libgit2/include/checkout.rkt") (lib "libgit2/include/transaction.rkt") (lib "libgit2/scribblings/revert.scrbl") (lib "libgit2/include/branch.rkt") (lib "libgit2/scribblings/errors.scrbl") (lib "libgit2/scribblings/merge.scrbl") (lib "libgit2/scribblings/libgit2.scrbl") (lib "libgit2/scribblings/filter.scrbl") (lib "libgit2/include/net.rkt") (lib "libgit2/test/test-libgit2.rkt") (lib "libgit2/include/pack.rkt") (lib "libgit2/include/indexer.rkt") (lib "libgit2/scribblings/odb.scrbl") (lib "libgit2/include/revert.rkt") (lib "libgit2/scribblings/describe.scrbl") (lib "libgit2/include/describe.rkt") (lib "libgit2/include/strarray.rkt") (lib "libgit2/scribblings/note.scrbl") (lib "libgit2/include/refspec.rkt") (lib "libgit2/scribblings/ignore.scrbl") (lib "libgit2/scribblings/oid_array.scrbl") (lib "libgit2/include/cred_helpers.rkt") (lib "libgit2/scribblings/reset.scrbl") (lib "libgit2/include/revwalk.rkt") (lib "libgit2/scribblings/clone.scrbl") (lib "libgit2/include/odb_backend.rkt") (lib "libgit2/scribblings/patch.scrbl") (lib "libgit2/include/cherrypick.rkt") (lib "libgit2/scribblings/proxy.scrbl") (lib "libgit2/scribblings/commit.scrbl") (lib "libgit2/include/status.rkt") (lib "libgit2/scribblings/tree.scrbl") (lib "libgit2/scribblings/repository.scrbl") (lib "libgit2/include/submodule.rkt") (lib "libgit2/scribblings/tag.scrbl") (lib "libgit2/scribblings/remote.scrbl") (lib "libgit2/scribblings/object.scrbl") (lib "libgit2/scribblings/revparse.scrbl") (lib "libgit2/scribblings/cherrypick.scrbl") (lib "libgit2/scribblings/oid.scrbl") (lib "libgit2/include/reflog.rkt") (lib "libgit2/include/reset.rkt") (lib "libgit2/scribblings/refdb.scrbl") (lib "libgit2/scribblings/global.scrbl") (lib "libgit2/include/index.rkt") (lib "libgit2/scribblings/config.scrbl") (lib "libgit2/scribblings/diff.scrbl") (lib "libgit2/include/define.rkt") (lib "libgit2/include/ignore.rkt") (lib "libgit2/include/types.rkt") (lib "libgit2/include/oid.rkt") (lib "libgit2/include/clone.rkt") (lib "libgit2/scribblings/refs.scrbl") (lib "libgit2/scribblings/refspec.scrbl") (lib "libgit2/scribblings/cherrpick.scrbl") (lib "libgit2/scribblings/indexer.scrbl") (lib "libgit2/scribblings/buffer.scrbl") (lib "libgit2/include/rebase.rkt") (lib "libgit2/scribblings/pathspec.scrbl") (lib "libgit2/include/pathspec.rkt") (lib "libgit2/include/graph.rkt") (lib "libgit2/scribblings/cred.scrbl") (lib "libgit2/include/remote.rkt") (lib "libgit2/include/stash.rkt") (lib "libgit2/scribblings/blob.scrbl") (lib "libgit2/include/merge.rkt") (lib "libgit2/scribblings/push.scrbl") (lib "libgit2/include/signature.rkt") (lib "libgit2/scribblings/branch.scrbl") (lib "libgit2/scribblings/index.scrbl") (lib "libgit2/scribblings/packbuilder.scrbl") (lib "libgit2/scribblings/revwalk.scrbl") (lib "libgit2/include/config.rkt") (lib "libgit2/include/blob.rkt") (lib "libgit2/main.rkt") (lib "libgit2/include/patch.rkt") (lib "libgit2/scribblings/status.scrbl") (lib "libgit2/include/diff.rkt") (lib "libgit2/include/odb.rkt") (lib "libgit2/include/refs.rkt") (lib "libgit2/scribblings/trace.scrbl") (lib "libgit2/include/proxy.rkt") (lib "libgit2/scribblings/rebase.scrbl") (lib "libgit2/include/notes.rkt") (lib "libgit2/include/tag.rkt") (lib "libgit2/include/transport.rkt") (lib "libgit2/include/refdb.rkt") (lib "libgit2/include/utils.rkt") (lib "libgit2/scribblings/submodule.scrbl") (lib "libgit2/scribblings/annotated_commit.scrbl") (lib "libgit2/include/tree.rkt") (lib "libgit2/scribblings/checkout.scrbl") (lib "libgit2/scribblings/strarray.scrbl") (lib "libgit2/scribblings/functions.scrbl") (lib "libgit2/include/repository.rkt") (lib "libgit2/include/revparse.rkt") (lib "libgit2/scribblings/graph.scrbl") (lib "libgit2/include/message.rkt") (lib "libgit2/scribblings/blame.scrbl") (lib "libgit2/scribblings/reflog.scrbl") (lib "libgit2/include/commit.rkt") (lib "libgit2/include/global.rkt") (lib "libgit2/include/object.rkt") (lib "libgit2/include/annotated_commit.rkt"))) (name . "libgit2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bradley.busching@gmail.com . #t) (author:clements@racket-lang.org . #t) (ffi . #t) (git . #t) (ring:1 . #t))) (source . "https://github.com/bbusching/libgit2.git") (tags . ("ffi" "git")) (versions . #hash((default . #hasheq((checksum . "6d6a007543900eb7a6fbbeba55850288665bdde5") (source . "https://github.com/bbusching/libgit2.git") (source_url . "https://github.com/bbusching/libgit2.git"))))))) ("libgit2-x86_64-linux" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libgit2-x86_64-linux.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libgit2-x86_64-linux.txt"))) (checksum . "cc360a4d87c3b861152d13591e99151544cf3998") (checksum-error . #f) (collection . "libgit2") (conflicts . ()) (date-added . 1549747129) (dependencies . ("base")) (description . "native libraries for libgit2 on libgit2-x86_64-linux") (implies . ()) (last-checked . 1632903457) (last-edit . 1549747129) (last-updated . 1549935641) (modules . ()) (name . "libgit2-x86_64-linux") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:philip@philipmcgrath.com . #t) (binary . #t) (git . #t) (ring:1 . #t))) (source . "https://github.com/LiberalArtist/native-libgit2-pkgs.git?path=libgit2-x86_64-linux") (tags . ("binary" "git")) (versions . #hash((default . #hasheq((checksum . "cc360a4d87c3b861152d13591e99151544cf3998") (source . "https://github.com/LiberalArtist/native-libgit2-pkgs.git?path=libgit2-x86_64-linux") (source_url . "https://github.com/LiberalArtist/native-libgit2-pkgs.git?path=libgit2-x86_64-linux"))))))) ("libgit2-x86_64-linux-natipkg" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libgit2-x86_64-linux-natipkg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libgit2-x86_64-linux-natipkg.txt"))) (checksum . "800f798d74af301135f6921bbc914097778b8a20") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "This package contains the x86_64 linux build of the libgit2 library, for use by the libgit2 package.") (implies . ()) (last-checked . 1632903457) (last-edit . 1514333423) (last-updated . 1514333423) (modules . ()) (name . "libgit2-x86_64-linux-natipkg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:clements@racket-lang.org . #t) (git . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/libgit2-x86_64-linux-natipkg.git?path=libgit2-x86_64-linux") (tags . ("git")) (versions . #hash((default . #hasheq((checksum . "800f798d74af301135f6921bbc914097778b8a20") (source . "https://github.com/jbclements/libgit2-x86_64-linux-natipkg.git?path=libgit2-x86_64-linux") (source_url . "https://github.com/jbclements/libgit2-x86_64-linux-natipkg.git?path=libgit2-x86_64-linux"))))))) ("libgit2-x86_64-macosx" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libgit2-x86_64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libgit2-x86_64-macosx.txt"))) (checksum . "cc360a4d87c3b861152d13591e99151544cf3998") (checksum-error . #f) (collection . "libgit2") (conflicts . ()) (date-added . 1549575756) (dependencies . ("base")) (description . "native libraries for libgit2 on x86_64-macosx") (implies . ()) (last-checked . 1632903459) (last-edit . 1549575756) (last-updated . 1549935644) (modules . ()) (name . "libgit2-x86_64-macosx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:philip@philipmcgrath.com . #t) (binary . #t) (git . #t) (ring:1 . #t))) (source . "https://github.com/LiberalArtist/native-libgit2-pkgs.git?path=libgit2-x86_64-macosx") (tags . ("binary" "git")) (versions . #hash((default . #hasheq((checksum . "cc360a4d87c3b861152d13591e99151544cf3998") (source . "https://github.com/LiberalArtist/native-libgit2-pkgs.git?path=libgit2-x86_64-macosx") (source_url . "https://github.com/LiberalArtist/native-libgit2-pkgs.git?path=libgit2-x86_64-macosx"))))))) ("libkenji" . #hasheq((author . "yd2dong@uwaterloo.ca") (authors . ("yd2dong@uwaterloo.ca")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libkenji.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libkenji.txt"))) (checksum . "319a80f51bba4224f87a01e6a368d3a936371f88") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("pfds" "typed-racket-lib" "base" "compatibility-lib" "data-lib" "srfi-lib")) (description . "") (implies . ()) (last-checked . 1632903459) (last-edit . 1415725724) (last-updated . 1502816155) (modules . ((lib "libkenji/logging.rkt") (lib "libkenji/vector.rkt") (lib "libkenji/concurrency.rkt") (lib "libkenji/sockets.rkt") (lib "libkenji/assert.rkt") (lib "libkenji/typed.rkt") (lib "libkenji/ports.rkt") (lib "libkenji/control-flow.rkt") (lib "libkenji/wire-struct.rkt") (lib "libkenji/misc.rkt") (lib "libkenji/main.rkt"))) (name . "libkenji") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:yd2dong@uwaterloo.ca . #t) (ring:1 . #t))) (source . "git://github.com/quantum1423/libkenji") (tags . ()) (versions . #hash((default . #hasheq((checksum . "319a80f51bba4224f87a01e6a368d3a936371f88") (source . "git://github.com/quantum1423/libkenji") (source_url . "http://github.com/quantum1423/libkenji/tree/master"))))))) ("libnotify" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libnotify" "doc/libnotify@libnotify/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libnotify.txt") (test-failure-log . "server/built/test-fail/libnotify.txt") (test-success-log . #f))) (checksum . "c1112e8095f53dde26da994c5d2025871cec9d12") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "draw-lib" "scribble-lib" "racket-doc" "draw-doc")) (description . "FFI bindings for libnotify (desktop notifications)") (implies . ()) (last-checked . 1632903460) (last-edit . 1428255877) (last-updated . 1502816155) (modules . ((lib "libnotify/ffi.rkt") (lib "libnotify/ffi-test.rkt") (lib "libnotify/main.rkt") (lib "libnotify/libnotify.rkt") (lib "libnotify/libnotify.scrbl") (lib "libnotify/example.rkt"))) (name . "libnotify") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (ffi . #t) (gui . #t) (ring:1 . #t))) (source . "git://github.com/takikawa/racket-libnotify") (tags . ("ffi" "gui")) (versions . #hash((default . #hasheq((checksum . "c1112e8095f53dde26da994c5d2025871cec9d12") (source . "git://github.com/takikawa/racket-libnotify") (source_url . "http://github.com/takikawa/racket-libnotify/tree/master"))))))) ("libopenal-racket" . #hasheq((author . "lehi@tosk.in") (authors . ("lehi@tosk.in")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/libopenal-racket.txt") (docs . (("main" "libopenal-racket" "doc/libopenal-racket@libopenal-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libopenal-racket.txt") (test-failure-log . "server/built/test-fail/libopenal-racket.txt") (test-success-log . #f))) (checksum . "30ce8d3f2e225b65d0502a0c4feb75e1dea35cc6") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Racket wrapper for the OpenAL library") (implies . ()) (last-checked . 1632903460) (last-edit . 1471306400) (last-updated . 1513746941) (modules . ((lib "libopenal-racket/doc/libopenal-racket.scrbl") (lib "libopenal-racket/main.rkt") (lib "libopenal-racket/test/openal-test.rkt") (lib "libopenal-racket/libopenal-racket.rkt") (lib "libopenal-racket/test/test.rkt"))) (name . "libopenal-racket") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (audio . #t) (author:lehi@tosk.in . #t) (openal . #t) (ring:1 . #t) (wrapper . #t))) (source . "git://github.com/lehitoskin/libopenal-racket") (tags . ("audio" "openal" "wrapper")) (versions . #hash((default . #hasheq((checksum . "30ce8d3f2e225b65d0502a0c4feb75e1dea35cc6") (source . "git://github.com/lehitoskin/libopenal-racket") (source_url . "http://github.com/lehitoskin/libopenal-racket/tree/master"))))))) ("libquiche" . #hasheq((author . "parnikkapore+rktp@disroot.org") (authors . ("parnikkapore+rktp@disroot.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libquiche" "doc/libquiche@libquiche/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libquiche.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libquiche.txt"))) (checksum . "26aa3ade5feaa8819648c10057ca064c4ec64d85") (checksum-error . #f) (collection . "libquiche") (conflicts . ()) (date-added . 1624329413) (dependencies . ("base" "reprovide-lang-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Functions and other stuff I wrote to complement the Racket standard library which aren’t significant enough to warrant its own package.") (implies . ()) (last-checked . 1632903461) (last-edit . 1624331167) (last-updated . 1624329501) (modules . ((lib "libquiche/xml.rkt") (lib "libquiche/scribblings/libquiche.scrbl") (lib "libquiche/hash.rkt") (lib "libquiche/main.rkt"))) (name . "libquiche") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:parnikkapore+rktp@disroot.org . #t) (ring:1 . #t) (utils . #t))) (source . "https://github.com/parnikkapore/rkt-libquiche.git") (tags . ("utils")) (versions . #hash((default . #hasheq((checksum . "26aa3ade5feaa8819648c10057ca064c4ec64d85") (source . "https://github.com/parnikkapore/rkt-libquiche.git") (source_url . "https://github.com/parnikkapore/rkt-libquiche.git"))))))) ("libsass-i386-win32" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libsass-i386-win32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libsass-i386-win32.txt"))) (checksum . "bd5b9b3067a712591975f3554456ae0eb53504b2") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1569329121) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903462) (last-edit . 1570012008) (last-updated . 1582278159) (modules . ()) (name . "libsass-i386-win32") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (artifact . #t) (author:bogdan@defn.io . #t) (binary . #t) (ffi . #t) (ring:1 . #t) (sass . #t))) (source . "https://racket.defn.io/libsass-i386-win32-3.6.1.tar.gz") (tags . ("artifact" "binary" "ffi" "sass")) (versions . #hash((default . #hasheq((checksum . "bd5b9b3067a712591975f3554456ae0eb53504b2") (source . "https://racket.defn.io/libsass-i386-win32-3.6.1.tar.gz") (source_url . "https://racket.defn.io/libsass-i386-win32-3.6.1.tar.gz"))))))) ("libsass-x86_64-linux" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libsass-x86_64-linux.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libsass-x86_64-linux.txt"))) (checksum . "d896dac88916c119a4cebe2c3c5aed2094e65118") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1569317169) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903463) (last-edit . 1570012013) (last-updated . 1582278161) (modules . ()) (name . "libsass-x86_64-linux") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (artifact . #t) (author:bogdan@defn.io . #t) (binary . #t) (ffi . #t) (ring:1 . #t) (sass . #t))) (source . "https://racket.defn.io/libsass-x86_64-linux-3.6.1.tar.gz") (tags . ("artifact" "binary" "ffi" "sass")) (versions . #hash((default . #hasheq((checksum . "d896dac88916c119a4cebe2c3c5aed2094e65118") (source . "https://racket.defn.io/libsass-x86_64-linux-3.6.1.tar.gz") (source_url . "https://racket.defn.io/libsass-x86_64-linux-3.6.1.tar.gz"))))))) ("libsass-x86_64-macosx" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libsass-x86_64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libsass-x86_64-macosx.txt"))) (checksum . "6eccf0f6125691684932ee67e94e8a8ece7317b4") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1569317195) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903465) (last-edit . 1570012018) (last-updated . 1582278166) (modules . ()) (name . "libsass-x86_64-macosx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (artifact . #t) (author:bogdan@defn.io . #t) (binary . #t) (ffi . #t) (ring:1 . #t) (sass . #t))) (source . "https://racket.defn.io/libsass-x86_64-macosx-3.6.1.tar.gz") (tags . ("artifact" "binary" "ffi" "sass")) (versions . #hash((default . #hasheq((checksum . "6eccf0f6125691684932ee67e94e8a8ece7317b4") (source . "https://racket.defn.io/libsass-x86_64-macosx-3.6.1.tar.gz") (source_url . "https://racket.defn.io/libsass-x86_64-macosx-3.6.1.tar.gz"))))))) ("libsass-x86_64-win32" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libsass-x86_64-win32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libsass-x86_64-win32.txt"))) (checksum . "ccdc5db04ee418049320626a736e588f28e2da16") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1569327856) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903467) (last-edit . 1570012023) (last-updated . 1582278168) (modules . ()) (name . "libsass-x86_64-win32") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (artifact . #t) (author:bogdan@defn.io . #t) (binary . #t) (ffi . #t) (ring:1 . #t) (sass . #t))) (source . "https://racket.defn.io/libsass-x86_64-win32-3.6.1.tar.gz") (tags . ("artifact" "binary" "ffi" "sass")) (versions . #hash((default . #hasheq((checksum . "ccdc5db04ee418049320626a736e588f28e2da16") (source . "https://racket.defn.io/libsass-x86_64-win32-3.6.1.tar.gz") (source_url . "https://racket.defn.io/libsass-x86_64-win32-3.6.1.tar.gz"))))))) ("libscrypt" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "libscrypt"))) (failure-log . "server/built/fail/libscrypt.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "544c692f6d492275002d55fc933049e4abff56d8") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "unstable-lib" "racket-doc" "unstable-lib")) (description . "Colin Percival's scrypt bindings for Racket, uses system library.") (implies . ()) (last-checked . 1632903468) (last-edit . 1406302416) (last-updated . 1502816156) (modules . ((lib "libscrypt/libscrypt.scrbl") (lib "libscrypt/private/ffi.rkt") (lib "libscrypt/main.rkt"))) (name . "libscrypt") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:mordae@anilinux.org . #t) (crypto . #t) (ffi . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-libscrypt/master") (tags . ("crypto" "ffi")) (versions . #hash((default . #hasheq((checksum . "544c692f6d492275002d55fc933049e4abff56d8") (source . "github://github.com/mordae/racket-libscrypt/master") (source_url . "http://github.com/mordae/racket-libscrypt/tree/master"))))))) ("libserialport" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libserialport" "doc/libserialport@libserialport/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libserialport.txt") (test-failure-log . "server/built/test-fail/libserialport.txt") (test-success-log . #f))) (checksum . "b0c01e64796ac2306138022f98b0d654907610ca") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "mordae" "typed-racket-lib" "racket-doc" "typed-racket-lib" "typed-racket-doc" "unstable-lib")) (description . "FFI bindings for the libserialport library.") (implies . ()) (last-checked . 1632903468) (last-edit . 1438605311) (last-updated . 1627035482) (modules . ((lib "libserialport/libserialport.scrbl") (lib "libserialport/private/ffi.rkt") (lib "libserialport/main.rkt"))) (name . "libserialport") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (linux . #t) (ring:1 . #t) (windows . #t))) (source . "git://github.com/mordae/racket-libserialport") (tags . ("ffi" "linux" "windows")) (versions . #hash((default . #hasheq((checksum . "b0c01e64796ac2306138022f98b0d654907610ca") (source . "git://github.com/mordae/racket-libserialport") (source_url . "http://github.com/mordae/racket-libserialport/tree/master"))))))) ("libsqlite3" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libsqlite3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libsqlite3.txt"))) (checksum . "6bb55122a315dee009c479cdad7494ff79aab423") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1619768906) (dependencies . ("base" ("libsqlite3-aarch64-macosx" #:platform #rx"aarch64-macosx") ("libsqlite3-i386-win32" #:platform #rx"win32.i386") ("libsqlite3-x86_64-linux" #:platform #rx"x86_64-linux") ("libsqlite3-x86_64-macosx" #:platform #rx"x86_64-macosx") ("libsqlite3-x86_64-win32" #:platform #rx"win32.x86_64"))) (description . "") (implies . ()) (last-checked . 1632903468) (last-edit . 1619768906) (last-updated . 1626851866) (modules . ()) (name . "libsqlite3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (artifact . #t) (author:bogdan@defn.io . #t) (binary . #t) (ffi . #t) (ring:1 . #t) (sqlite3 . #t))) (source . "https://github.com/Bogdanp/racket-libsqlite3.git?path=libsqlite3") (tags . ("artifact" "binary" "ffi" "sqlite3")) (versions . #hash((default . #hasheq((checksum . "6bb55122a315dee009c479cdad7494ff79aab423") (source . "https://github.com/Bogdanp/racket-libsqlite3.git?path=libsqlite3") (source_url . "https://github.com/Bogdanp/racket-libsqlite3.git?path=libsqlite3"))))))) ("libsqlite3-aarch64-macosx" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libsqlite3-aarch64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libsqlite3-aarch64-macosx.txt"))) (checksum . "c74d2596b85bd47e15e8e99580788cc95e4cd4f6") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1626842118) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903469) (last-edit . 1626842118) (last-updated . 1626842118) (modules . ()) (name . "libsqlite3-aarch64-macosx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (artifact . #t) (author:bogdan@defn.io . #t) (binary . #t) (ffi . #t) (ring:1 . #t) (sqlite3 . #t))) (source . "https://racket.defn.io/libsqlite3-aarch64-macosx-3.36.0.tar.gz") (tags . ("artifact" "binary" "ffi" "sqlite3")) (versions . #hash((default . #hasheq((checksum . "c74d2596b85bd47e15e8e99580788cc95e4cd4f6") (source . "https://racket.defn.io/libsqlite3-aarch64-macosx-3.36.0.tar.gz") (source_url . "https://racket.defn.io/libsqlite3-aarch64-macosx-3.36.0.tar.gz"))))))) ("libsqlite3-i386-win32" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libsqlite3-i386-win32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libsqlite3-i386-win32.txt"))) (checksum . "e88ba248de076d9537c48881c604aa73dba58e13") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1619768807) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903470) (last-edit . 1626842162) (last-updated . 1626842162) (modules . ()) (name . "libsqlite3-i386-win32") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (artifact . #t) (author:bogdan@defn.io . #t) (binary . #t) (ffi . #t) (ring:1 . #t) (sqlite3 . #t))) (source . "https://racket.defn.io/libsqlite3-i386-win32-3.36.0.tar.gz") (tags . ("artifact" "binary" "ffi" "sqlite3")) (versions . #hash((default . #hasheq((checksum . "e88ba248de076d9537c48881c604aa73dba58e13") (source . "https://racket.defn.io/libsqlite3-i386-win32-3.36.0.tar.gz") (source_url . "https://racket.defn.io/libsqlite3-i386-win32-3.36.0.tar.gz"))))))) ("libsqlite3-x86_64-linux" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libsqlite3-x86_64-linux.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libsqlite3-x86_64-linux.txt"))) (checksum . "4288bbf7769c62eac91dd5316dda9c97f45e7485") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1569664157) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903471) (last-edit . 1626842169) (last-updated . 1626842169) (modules . ()) (name . "libsqlite3-x86_64-linux") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (artifact . #t) (author:bogdan@defn.io . #t) (binary . #t) (ffi . #t) (ring:1 . #t) (sqlite3 . #t))) (source . "https://racket.defn.io/libsqlite3-x86_64-linux-3.36.0.tar.gz") (tags . ("artifact" "binary" "ffi" "sqlite3")) (versions . #hash((default . #hasheq((checksum . "4288bbf7769c62eac91dd5316dda9c97f45e7485") (source . "https://racket.defn.io/libsqlite3-x86_64-linux-3.36.0.tar.gz") (source_url . "https://racket.defn.io/libsqlite3-x86_64-linux-3.36.0.tar.gz"))))))) ("libsqlite3-x86_64-macosx" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libsqlite3-x86_64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libsqlite3-x86_64-macosx.txt"))) (checksum . "1bfbe23bcc467fcc3ebefa05b914ea0aab95561c") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1569667336) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903472) (last-edit . 1626842125) (last-updated . 1626842125) (modules . ()) (name . "libsqlite3-x86_64-macosx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (artifact . #t) (author:bogdan@defn.io . #t) (binary . #t) (ffi . #t) (ring:1 . #t) (sqlite3 . #t))) (source . "https://racket.defn.io/libsqlite3-x86_64-macosx-3.36.0.tar.gz") (tags . ("artifact" "binary" "ffi" "sqlite3")) (versions . #hash((default . #hasheq((checksum . "1bfbe23bcc467fcc3ebefa05b914ea0aab95561c") (source . "https://racket.defn.io/libsqlite3-x86_64-macosx-3.36.0.tar.gz") (source_url . "https://racket.defn.io/libsqlite3-x86_64-macosx-3.36.0.tar.gz"))))))) ("libsqlite3-x86_64-win32" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libsqlite3-x86_64-win32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libsqlite3-x86_64-win32.txt"))) (checksum . "4a29f3c35a27d262a7c4b0b468bdce5f29a7fd68") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1619768833) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903473) (last-edit . 1626842175) (last-updated . 1626842175) (modules . ()) (name . "libsqlite3-x86_64-win32") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (artifact . #t) (author:bogdan@defn.io . #t) (binary . #t) (ffi . #t) (ring:1 . #t) (sqlite3 . #t))) (source . "https://racket.defn.io/libsqlite3-x86_64-win32-3.36.0.tar.gz") (tags . ("artifact" "binary" "ffi" "sqlite3")) (versions . #hash((default . #hasheq((checksum . "4a29f3c35a27d262a7c4b0b468bdce5f29a7fd68") (source . "https://racket.defn.io/libsqlite3-x86_64-win32-3.36.0.tar.gz") (source_url . "https://racket.defn.io/libsqlite3-x86_64-win32-3.36.0.tar.gz"))))))) ("libtoxcore-racket" . #hasheq((author . "lehi@tosk.in") (authors . ("lehi@tosk.in")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libtoxcore-racket" "doc/libtoxcore-racket@libtoxcore-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libtoxcore-racket.txt") (test-failure-log . "server/built/test-fail/libtoxcore-racket.txt") (test-success-log . #f))) (checksum . "8baa14d6835ec4371de4ce7aa73237cd509d8f48") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "A Racket wrapper for the Tox libraries.") (implies . ()) (last-checked . 1632903475) (last-edit . 1415417025) (last-updated . 1502816156) (modules . ((lib "libtoxcore-racket/doc/constants.scrbl") (lib "libtoxcore-racket/av.rkt") (lib "libtoxcore-racket/doc/common.rkt") (lib "libtoxcore-racket/functions.rkt") (lib "libtoxcore-racket/main.rkt") (lib "libtoxcore-racket/doc/license.scrbl") (lib "libtoxcore-racket/doc/functions.scrbl") (lib "libtoxcore-racket/dns.rkt") (lib "libtoxcore-racket/doc/libtoxcore-racket.scrbl") (lib "libtoxcore-racket/encrypt.rkt") (lib "libtoxcore-racket/doc/examples.scrbl") (lib "libtoxcore-racket/doc/av.scrbl") (lib "libtoxcore-racket/test/test.rkt") (lib "libtoxcore-racket/enums.rkt"))) (name . "libtoxcore-racket") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (API . #t) (author:lehi@tosk.in . #t) (crypto . #t) (ffi . #t) (ring:1 . #t) (wrapper . #t))) (source . "git://github.com/lehitoskin/libtoxcore-racket.git") (tags . ("API" "crypto" "ffi" "wrapper")) (versions . #hash((default . #hasheq((checksum . "8baa14d6835ec4371de4ce7aa73237cd509d8f48") (source . "git://github.com/lehitoskin/libtoxcore-racket.git") (source_url . "http://github.com/lehitoskin/libtoxcore-racket.git/tree/master"))))))) ("libuuid" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libuuid" "doc/libuuid@libuuid/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libuuid.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libuuid.txt"))) (checksum . "c2d169bd1b4dadea867cd276070021be0d235321") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "FFI bindings for the libuuid library.") (implies . ()) (last-checked . 1632903476) (last-edit . 1408365245) (last-updated . 1622282796) (modules . ((lib "libuuid/main.rkt") (lib "libuuid/libuuid.scrbl"))) (name . "libuuid") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-libuuid/master") (tags . ("ffi")) (versions . #hash((default . #hasheq((checksum . "c2d169bd1b4dadea867cd276070021be0d235321") (source . "github://github.com/mordae/racket-libuuid/master") (source_url . "http://github.com/mordae/racket-libuuid/tree/master"))))))) ("libvid-i386-linux" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-i386-linux.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-i386-linux.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "Library for Video log messages") (implies . ()) (last-checked . 1632903476) (last-edit . 1504986160) (last-updated . 1618603210) (modules . ()) (name . "libvid-i386-linux") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (author:leif@leifandersen.net . #t) (libvid . #t) (ring:1 . #t) (video . #t))) (source . "git://github.com/videolang/native-pkgs?path=libvid-i386-linux") (tags . ("libvid" "video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "git://github.com/videolang/native-pkgs?path=libvid-i386-linux") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=libvid-i386-linux"))))))) ("libvid-i386-linux-0-2" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-i386-linux-0-2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-i386-linux-0-2.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903537) (last-edit . 1528476846) (last-updated . 1621915202) (modules . ()) (name . "libvid-i386-linux-0-2") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-linux") (tags . ("video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-linux") (source_url . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-linux"))))))) ("libvid-i386-macosx-0-2" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/libvid-i386-macosx-0-2.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: specified directory is not in Git respository\n  path: libvid-i386-macosx\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:913:0: lift-git-directory-content\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:318:11\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:114:0: stage-package/info\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:720:0: pkg-stage\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:129:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (description . "") (implies . ()) (last-checked . 1632903659) (last-edit . 1528476876) (last-updated . 1621814321) (modules . ()) (name . "libvid-i386-macosx-0-2") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-macosx") (tags . ("video")) (versions . #hash((default . #hasheq((checksum . "") (source . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-macosx") (source_url . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-macosx"))))))) ("libvid-i386-win32" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-i386-win32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-i386-win32.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "32-bit windows build of libvid") (implies . ()) (last-checked . 1632903659) (last-edit . 1503854359) (last-updated . 1621900808) (modules . ()) (name . "libvid-i386-win32") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (author:leif@leifandersen.net . #t) (libvid . #t) (ring:1 . #t) (video . #t))) (source . "git://github.com/videolang/native-pkgs?path=libvid-i386-win32") (tags . ("libvid" "video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "git://github.com/videolang/native-pkgs?path=libvid-i386-win32") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=libvid-i386-win32"))))))) ("libvid-i386-win32-0-2" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-i386-win32-0-2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-i386-win32-0-2.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903720) (last-edit . 1528476858) (last-updated . 1621814411) (modules . ()) (name . "libvid-i386-win32-0-2") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-win32") (tags . ("video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-win32") (source_url . "https://github.com/videolang/native-pkgs.git?path=libvid-i386-win32"))))))) ("libvid-x86_64-linux" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-x86_64-linux.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-x86_64-linux.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "Libvid for 64-bit linux") (implies . ()) (last-checked . 1632903781) (last-edit . 1504986223) (last-updated . 1618891219) (modules . ()) (name . "libvid-x86_64-linux") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (author:leif@leifandersen.net . #t) (libvid . #t) (ring:1 . #t) (video . #t))) (source . "git://github.com/videolang/native-pkgs?path=libvid-x86_64-linux") (tags . ("libvid" "video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "git://github.com/videolang/native-pkgs?path=libvid-x86_64-linux") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=libvid-x86_64-linux"))))))) ("libvid-x86_64-linux-0-2" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-x86_64-linux-0-2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-x86_64-linux-0-2.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903842) (last-edit . 1528476829) (last-updated . 1617595202) (modules . ()) (name . "libvid-x86_64-linux-0-2") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=libvid-x86_64-linux") (tags . ("video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "https://github.com/videolang/native-pkgs.git?path=libvid-x86_64-linux") (source_url . "https://github.com/videolang/native-pkgs.git?path=libvid-x86_64-linux"))))))) ("libvid-x86_64-macosx" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-x86_64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-x86_64-macosx.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "An optional helper library for Video, to enable ffmpeg level logging.") (implies . ()) (last-checked . 1632903904) (last-edit . 1503584840) (last-updated . 1606608013) (modules . ()) (name . "libvid-x86_64-macosx") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (author:leif@leifandersen.net . #t) (libvid . #t) (ring:1 . #t) (video . #t))) (source . "git://github.com/videolang/native-pkgs?path=libvid-x86_64-macosx") (tags . ("libvid" "video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "git://github.com/videolang/native-pkgs?path=libvid-x86_64-macosx") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=libvid-x86_64-macosx"))))))) ("libvid-x86_64-macosx-0-2" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-x86_64-macosx-0-2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-x86_64-macosx-0-2.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632903965) (last-edit . 1528476786) (last-updated . 1607054421) (modules . ()) (name . "libvid-x86_64-macosx-0-2") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=libvid-x86_64-macosx") (tags . ("video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "https://github.com/videolang/native-pkgs.git?path=libvid-x86_64-macosx") (source_url . "https://github.com/videolang/native-pkgs.git?path=libvid-x86_64-macosx"))))))) ("libvid-x86_64-win32" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-x86_64-win32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-x86_64-win32.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "64-bit windows build of the libvid library.") (implies . ()) (last-checked . 1632904025) (last-edit . 1503854804) (last-updated . 1546557911) (modules . ()) (name . "libvid-x86_64-win32") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (author:leif@leifandersen.net . #t) (libvid . #t) (ring:1 . #t) (video . #t))) (source . "git://github.com/videolang/native-pkgs?path=libvid-x86_64-win32") (tags . ("libvid" "video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "git://github.com/videolang/native-pkgs?path=libvid-x86_64-win32") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=libvid-x86_64-win32"))))))) ("libvid-x86_64-win32-0-2" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libvid-x86_64-win32-0-2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libvid-x86_64-win32-0-2.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632904085) (last-edit . 1528476804) (last-updated . 1602532804) (modules . ()) (name . "libvid-x86_64-win32-0-2") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/videolang/native-pkgs.git?path=libvid-x86_64-win32") (tags . ("video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "https://github.com/videolang/native-pkgs.git?path=libvid-x86_64-win32") (source_url . "https://github.com/videolang/native-pkgs.git?path=libvid-x86_64-win32"))))))) ("libxml2" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "libxml2" "doc/libxml2@libxml2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libxml2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libxml2.txt"))) (checksum . "34f26243e8f35ae84f248e02dfbd7214ec2c619d") (checksum-error . #f) (collection . "libxml2") (conflicts . ()) (dependencies . (("base" #:version "7.0") ("xmllint-win32-x86_64" #:platform "win32\\x86_64" #:version "0.1") ("libxml2-x86_64-linux-natipkg" #:platform "x86_64-linux-natipkg") "scribble-lib" "racket-doc" "rackunit-lib" "rackunit-spec")) (description . "Racket bindings for libxml2") (implies . ()) (last-checked . 1632904145) (last-edit . 1535421176) (last-updated . 1543391193) (modules . ((lib "libxml2/define-fail.rkt") (lib "libxml2/scribblings/libxml2.scrbl") (lib "libxml2/test.rkt") (lib "libxml2/main.rkt"))) (name . "libxml2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (ffi . #t) (ring:1 . #t) (xml . #t))) (source . "https://github.com/LiberalArtist/libxml2-ffi.git") (tags . ("ffi" "xml")) (versions . #hash((default . #hasheq((checksum . "34f26243e8f35ae84f248e02dfbd7214ec2c619d") (source . "https://github.com/LiberalArtist/libxml2-ffi.git") (source_url . "https://github.com/LiberalArtist/libxml2-ffi.git"))))))) ("libxml2-x86_64-linux-natipkg" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/libxml2-x86_64-linux-natipkg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/libxml2-x86_64-linux-natipkg.txt"))) (checksum . "8175b0d1bd6842fb2f1e814f99ad96035e50e734") (checksum-error . #f) (collection . "libxml2-x86_64-linux-natipkg") (conflicts . ()) (dependencies . ("base")) (description . "Packages libxml2 for the package build server") (implies . ()) (last-checked . 1632904146) (last-edit . 1535475662) (last-updated . 1535475662) (modules . ()) (name . "libxml2-x86_64-linux-natipkg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:philip@philipmcgrath.com . #t) (ffi . #t) (ring:1 . #t) (xml . #t))) (source . "https://github.com/LiberalArtist/libxml2-x86_64-linux-natipkg.git") (tags . ("ffi" "xml")) (versions . #hash((default . #hasheq((checksum . "8175b0d1bd6842fb2f1e814f99ad96035e50e734") (source . "https://github.com/LiberalArtist/libxml2-x86_64-linux-natipkg.git") (source_url . "https://github.com/LiberalArtist/libxml2-x86_64-linux-natipkg.git"))))))) ("lindenmayer" . #hasheq((author . "robby@racket-lang.org spencer@florence.io daniel.feltey@eecs.northwestern.edu stamourv@racket-lang.org") (authors . ("robby@racket-lang.org" "spencer@florence.io" "daniel.feltey@eecs.northwestern.edu" "stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lindenmayer" "doc/lindenmayer@lindenmayer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lindenmayer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lindenmayer.txt"))) (checksum . "2ef7b4535d8ae1eb7cc2e16e2b630c30a4b9a34d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "data-lib" "drracket-plugin-lib" "gui-lib" ("htdp-lib" #:version "1.5") "parser-tools-lib" "pict-lib" "pict3d" "syntax-color-lib" "typed-racket-lib" "math-lib" "2d-lib" "rackunit-lib" "pict-doc" "racket-doc" "scribble-lib" "htdp-doc" "syntax-color-doc" "typed-racket-doc" "typed-racket-more")) (description . "") (implies . ()) (last-checked . 1632904146) (last-edit . 1488204750) (last-updated . 1614703474) (modules . ((lib "lindenmayer/private/expression-parse.rkt") (lib "lindenmayer/examples/golden-mean.rkt") (lib "lindenmayer/simple/lang/reader.rkt") (lib "lindenmayer/examples/sunflower.rkt") (lib "lindenmayer/examples/abop-page25-c.rkt") (lib "lindenmayer/examples/skew-tree.rkt") (lib "lindenmayer/scribblings/lindenmayer.scrbl") (lib "lindenmayer/scribblings/3d-turtle.scrbl") (lib "lindenmayer/main.rkt") (lib "lindenmayer/examples/abop-page25-d.rkt") (lib "lindenmayer/examples/better-trees.rkt") (lib "lindenmayer/private/define-arity.rkt") (lib "lindenmayer/simple/parse.rkt") (lib "lindenmayer/simple/compile.rkt") (lib "lindenmayer/syntax-properties.rkt") (lib "lindenmayer/examples/3d-with-leaves.rkt") (lib "lindenmayer/configure-runtime.rkt") (lib "lindenmayer/examples/dragon.rkt") (lib "lindenmayer/search.rkt") (lib "lindenmayer/examples/abop-page25-a.rkt") (lib "lindenmayer/examples/abop-page25-f.rkt") (lib "lindenmayer/examples/trees.rkt") (lib "lindenmayer/examples/leaf-alternating.rkt") (lib "lindenmayer/lexer.rkt") (lib "lindenmayer/3d-turtle.rkt") (lib "lindenmayer/scribblings/simple.scrbl") (lib "lindenmayer/examples/lily-of-the-valley.rkt") (lib "lindenmayer/examples/gaols.rkt") (lib "lindenmayer/simple/structs.rkt") (lib "lindenmayer/runtime.rkt") (lib "lindenmayer/examples/hilbert.rkt") (lib "lindenmayer/process-syntax.rkt") (lib "lindenmayer/examples/serp.rkt") (lib "lindenmayer/scribblings/deflsymbol.rkt") (lib "lindenmayer/examples/wierd-not-really-tree-looking-thing.rkt") (lib "lindenmayer/examples/abop-page-25-d-refactored.rkt") (lib "lindenmayer/examples/abop-page25-e.rkt") (lib "lindenmayer/scribblings/util.rkt") (lib "lindenmayer/simple/lex.rkt") (lib "lindenmayer/examples/flowery-bush.rkt") (lib "lindenmayer/examples/fib.rkt") (lib "lindenmayer/turtle.rkt") (lib "lindenmayer/3d.rkt") (lib "lindenmayer/structs.rkt") (lib "lindenmayer/examples/twisty-trees.rkt") (lib "lindenmayer/examples/normal-trees.rkt") (lib "lindenmayer/tool.rkt") (lib "lindenmayer/lang.rkt") (lib "lindenmayer/examples/abop-page25-f-refactored.rkt") (lib "lindenmayer/examples/abop-page25-b.rkt") (lib "lindenmayer/examples/leaf-fern.rkt") (lib "lindenmayer/examples/3d-leaf.rkt") (lib "lindenmayer/simple/run.rkt") (lib "lindenmayer/examples/leaf.rkt") (lib "lindenmayer/scribblings/turtles.scrbl") (lib "lindenmayer/examples/koch.rkt") (lib "lindenmayer/examples/seaweed.rkt"))) (name . "lindenmayer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:daniel.feltey@eecs.northwestern.edu . #t) (author:robby@racket-lang.org . #t) (author:spencer@florence.io . #t) (author:stamourv@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/rfindler/lindenmayer") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2ef7b4535d8ae1eb7cc2e16e2b630c30a4b9a34d") (source . "git://github.com/rfindler/lindenmayer") (source_url . "http://github.com/rfindler/lindenmayer/tree/master"))))))) ("linea" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "linea" "doc/linea@linea/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/linea.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/linea.txt"))) (checksum . "c40c5adfedf632bc1fdbad3e0e2763b134ee3ff5") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1608151813) (dependencies . ("base" "udelim" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "line-oriented reader") (implies . ()) (last-checked . 1632904147) (last-edit . 1608151813) (last-updated . 1615913286) (modules . ((lib "linea/private/test/test-lexical-line-macro.rkt") (lib "linea/line-macro.rkt") (lib "linea/private/line-macro-definitions.rkt") (lib "linea/private/test/test-lang.rkt") (lib "linea/read.rkt") (lib "linea/line-macro-prop.rkt") (lib "linea/private/line-macro-detect.rkt") (lib "linea/lang/reader.rkt") (lib "linea/defaults.rkt") (lib "linea/scribblings/linea.scrbl") (lib "linea/read-syntax-string.rkt"))) (name . "linea") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (reader . #t) (ring:1 . #t))) (source . "https://github.com/willghatch/racket-rash.git?path=linea") (tags . ("reader")) (versions . #hash((default . #hasheq((checksum . "c40c5adfedf632bc1fdbad3e0e2763b134ee3ff5") (source . "https://github.com/willghatch/racket-rash.git?path=linea") (source_url . "https://github.com/willghatch/racket-rash.git?path=linea"))))))) ("linkeddata" . #hasheq((author . "cwebber@dustycloud.org") (authors . ("cwebber@dustycloud.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "hello"))) (failure-log . "server/built/fail/linkeddata.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "4d59948bb978d6d0abf06ec4de8eb6b946f5f291") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "functional-lib" "megaparsack" "crypto" "rackunit-lib")) (description . "linkeddata is a package that provides various types of linked data tooling, from RDF tooling to json-ld") (implies . ()) (last-checked . 1632904147) (last-edit . 1528326160) (last-updated . 1534874255) (modules . ((lib "linkeddata/date-utils.rkt") (lib "linkeddata/pem.rkt") (lib "linkeddata/n-quads.rkt") (lib "linkeddata/ld-sigs.rkt") (lib "linkeddata/pk.rkt") (lib "linkeddata/rdf.rkt") (lib "linkeddata/json-ld.rkt") (lib "linkeddata/jsonld-tests.rkt") (lib "linkeddata/urdna2015.rkt"))) (name . "linkeddata") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:cwebber@dustycloud.org . #t) (json . #t) (json-ld . #t) (linkeddata . #t) (rdf . #t) (ring:1 . #t))) (source . "https://github.com/cwebber/racket-linkeddata.git?path=linkeddata") (tags . ("json" "json-ld" "linkeddata" "rdf")) (versions . #hash((default . #hasheq((checksum . "4d59948bb978d6d0abf06ec4de8eb6b946f5f291") (source . "https://github.com/cwebber/racket-linkeddata.git?path=linkeddata") (source_url . "https://github.com/cwebber/racket-linkeddata.git?path=linkeddata"))))))) ("linux-shared-libraries" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/linux-shared-libraries.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/linux-shared-libraries.txt"))) (checksum . "f49d1bd6794437482c46d351c71313070e0244d5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1591114108) (dependencies . ("base")) (description . "This package contains the shared libraries needed for `flomat` to run on Linux (including the build server).") (implies . ()) (last-checked . 1632904149) (last-edit . 1591123248) (last-updated . 1591137076) (modules . ()) (name . "linux-shared-libraries") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (blas . #t) (cblas . #t) (flomat . #t) (lapack . #t) (linux . #t) (ring:1 . #t))) (source . "https://github.com/soegaard/linux-shared-libraries.git") (tags . ("blas" "cblas" "flomat" "lapack" "linux")) (versions . #hash((default . #hasheq((checksum . "f49d1bd6794437482c46d351c71313070e0244d5") (source . "https://github.com/soegaard/linux-shared-libraries.git") (source_url . "https://github.com/soegaard/linux-shared-libraries.git"))))))) ("lipics" . #hasheq((author . "asumu@ccs.neu.edu stamourv@racket-lang.org") (authors . ("asumu@ccs.neu.edu" "stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lipics" "doc/lipics@lipics/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lipics.txt") (test-failure-log . "server/built/test-fail/lipics.txt") (test-success-log . #f))) (checksum . "32a8cb9782493e237c25994f70aa7c572d7ea567") (checksum-error . #f) (collection . "lipics") (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib" "sha" "racket-doc" "scribble-doc")) (description . "Scribble languages for the LIPIcs paper format") (implies . ()) (last-checked . 1632904149) (last-edit . 1425674877) (last-updated . 1504309961) (modules . ((lib "lipics/example-abstract.scrbl") (lib "lipics/main.rkt") (lib "lipics/download.rkt") (lib "lipics/example.scrbl") (lib "lipics/lipics.scrbl"))) (name . "lipics") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (author:stamourv@racket-lang.org . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/takikawa/lipics-scribble") (tags . ("scribble")) (versions . #hash((default . #hasheq((checksum . "32a8cb9782493e237c25994f70aa7c572d7ea567") (source . "git://github.com/takikawa/lipics-scribble") (source_url . "http://github.com/takikawa/lipics-scribble/tree/master"))))))) ("list-plus" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "list-plus" "doc/list-plus@list-plus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/list-plus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/list-plus.txt"))) (checksum . "ca3957db266315a0398ad5dff957c58d4f2e8c8f") (checksum-error . #f) (collection . "list-plus") (conflicts . ()) (date-added . 1591455207) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A form that collects values into a list while supporting internal-definitions") (implies . ()) (last-checked . 1632904149) (last-edit . 1591455602) (last-updated . 1607783873) (modules . ((lib "list-plus/main.rkt") (lib "list-plus/scribblings/list-plus.scrbl"))) (name . "list-plus") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (list . #t) (macro . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/list-plus.git") (tags . ("list" "macro")) (versions . #hash((default . #hasheq((checksum . "ca3957db266315a0398ad5dff957c58d4f2e8c8f") (source . "https://github.com/sorawee/list-plus.git") (source_url . "https://github.com/sorawee/list-plus.git"))))))) ("list-util" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "list-util" "doc/list-util@list-util/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/list-util.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/list-util.txt"))) (checksum . "e538fd85b38e7bfcaf2aace75ced7d0183e91073") (checksum-error . #f) (collection . "list-util") (conflicts . ()) (dependencies . ("typed-racket-more" "typed-racket-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Additional List utilities in Typed Racket.") (implies . ()) (last-checked . 1632904149) (last-edit . 1528473038) (last-updated . 1620469693) (modules . ((lib "list-util/main.rkt") (lib "list-util/scribblings/list-util.scrbl"))) (name . "list-util") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (list . #t) (ring:1 . #t) (typed . #t))) (source . "https://gitlab.com/RayRacine/list-util.git") (tags . ("list" "typed")) (versions . #hash((default . #hasheq((checksum . "e538fd85b38e7bfcaf2aace75ced7d0183e91073") (source . "https://gitlab.com/RayRacine/list-util.git") (source_url . "https://gitlab.com/RayRacine/list-util.git"))))))) ("list-utils" . #hasheq((author . "vincentnys@gmail.com") (authors . ("vincentnys@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "list-utils" "doc/list-utils@list-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/list-utils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/list-utils.txt"))) (checksum . "d364b7d3e508abc4da31d6e600ee201f76d05217") (checksum-error . #f) (collection . "list-utils") (conflicts . ()) (dependencies . ("at-exp-lib" "base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Some additional list-processing functions which I have found useful.") (implies . ()) (last-checked . 1632904150) (last-edit . 1513667842) (last-updated . 1513667842) (modules . ((lib "list-utils/scribblings/list-utils.scrbl") (lib "list-utils/main.rkt"))) (name . "list-utils") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:vincentnys@gmail.com . #t) (lists . #t) (ring:1 . #t) (utilities . #t))) (source . "https://github.com/v-nys/list-utils.git") (tags . ("lists" "utilities")) (versions . #hash((default . #hasheq((checksum . "d364b7d3e508abc4da31d6e600ee201f76d05217") (source . "https://github.com/v-nys/list-utils.git") (source_url . "https://github.com/v-nys/list-utils.git"))))))) ("literify" . #hasheq((author . "kludev@gmail.com") (authors . ("kludev@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/literify.txt") (docs . (("main" "literify" "doc/literify@literify/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/literify.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/literify.txt"))) (checksum . "0c574bc88dc9de870063589cc49a7ad41899fc67") (checksum-error . #f) (collection . "literify") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "racket literate programming in scribble to enable simultaneously display and evaluate code chunks") (implies . ()) (last-checked . 1632904150) (last-edit . 1497765715) (last-updated . 1502816158) (modules . ((lib "literify/scribblings/literify.scrbl") (lib "literify/demo/union-find.scrbl") (lib "literify/main.rkt"))) (name . "literify") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:kludev@gmail.com . #t) (documentation . #t) (literate-programming . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/kflu/literify") (tags . ("documentation" "literate-programming" "scribble")) (versions . #hash((default . #hasheq((checksum . "0c574bc88dc9de870063589cc49a7ad41899fc67") (source . "git://github.com/kflu/literify") (source_url . "http://github.com/kflu/literify/tree/master"))))))) ("liturgical-calendar" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "liturgical-calendar" "doc/liturgical-calendar@liturgical-calendar/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/liturgical-calendar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/liturgical-calendar.txt"))) (checksum . "69af60c76b565b5469d94fffe72917e722afdc6a") (checksum-error . #f) (collection . "liturgical-calendar") (conflicts . ()) (date-added . 1622134731) (dependencies . ("base" "adjutor" "typed-racket-lib" "gregor-lib" "scribble-lib" "racket-doc" "adjutor" "gregor-doc" "at-exp-lib" "rackunit-lib")) (description . "Compute the dates of Easter and other feasts") (implies . ()) (last-checked . 1632904150) (last-edit . 1622134731) (last-updated . 1622182844) (modules . ((lib "liturgical-calendar/computus-paschalis.rkt") (lib "liturgical-calendar/typed-demo.rkt") (lib "liturgical-calendar/scribblings/liturgical-calendar.scrbl") (lib "liturgical-calendar/computus-paschalis-typed.rkt") (lib "liturgical-calendar/scribblings/bibliography.rkt") (lib "liturgical-calendar/main.rkt"))) (name . "liturgical-calendar") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (calendar . #t) (date . #t) (ring:1 . #t))) (source . "https://github.com/LiberalArtist/liturgical-calendar.git#main") (tags . ("calendar" "date")) (versions . #hash((default . #hasheq((checksum . "69af60c76b565b5469d94fffe72917e722afdc6a") (source . "https://github.com/LiberalArtist/liturgical-calendar.git#main") (source_url . "https://github.com/LiberalArtist/liturgical-calendar.git#main"))))))) ("live-free-or-die" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "live-free-or-die" "doc/live-free-or-die@live-free-or-die/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/live-free-or-die.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/live-free-or-die.txt"))) (checksum . "b6fbe5364c51eb793a7f88fb916e41506b1d519e") (checksum-error . #f) (collection . "live-free-or-die") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "racket-doc" "scribble-lib")) (description . "Freedom from Typed Racket") (implies . ()) (last-checked . 1632904150) (last-edit . 1474511539) (last-updated . 1509742919) (modules . ((lib "live-free-or-die/live-free-or-die.scrbl") (lib "live-free-or-die/main.rkt") (lib "live-free-or-die/tests/client-safe.rkt") (lib "live-free-or-die/tests/client-unsafe.rkt") (lib "live-free-or-die/tests/server.rkt"))) (name . "live-free-or-die") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (crashing . #t) (performance . #t) (ring:1 . #t) (unsafe . #t))) (source . "git://github.com/jeapostrophe/live-free-or-die") (tags . ("crashing" "performance" "unsafe")) (versions . #hash((default . #hasheq((checksum . "b6fbe5364c51eb793a7f88fb916e41506b1d519e") (source . "git://github.com/jeapostrophe/live-free-or-die") (source_url . "http://github.com/jeapostrophe/live-free-or-die/tree/master"))))))) ("livefrog" . #hasheq((author . "ebzzry@ebzzry.io") (authors . ("ebzzry@ebzzry.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/livefrog.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/livefrog.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/livefrog.txt"))) (checksum . "cde478d1ab11c52f7f23763174ae9ae16402a918") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("sxml" "frog" "find-parent-dir")) (description . "Convert ljdump/ljmigrate files for Frog") (implies . ()) (last-checked . 1632904150) (last-edit . 1506942446) (last-updated . 1613032426) (modules . ((lib "livefrog/symbols.rkt") (lib "livefrog/main.rkt") (lib "livefrog/utils.rkt"))) (name . "livefrog") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:ebzzry@ebzzry.io . #t) (blog . #t) (ring:1 . #t) (terminal . #t) (web . #t))) (source . "git://github.com/ebzzry/livefrog") (tags . ("blog" "terminal" "web")) (versions . #hash((default . #hasheq((checksum . "cde478d1ab11c52f7f23763174ae9ae16402a918") (source . "git://github.com/ebzzry/livefrog") (source_url . "http://github.com/ebzzry/livefrog/tree/master"))))))) ("loci" . #hasheq((author . "pmatos@linki.tools") (authors . ("pmatos@linki.tools")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "loci" "doc/loci@loci/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/loci.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/loci.txt"))) (checksum . "ce063c7e45d5abb7c187766b3ab7045ef2f84099") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1576672418) (dependencies . ("base" "unix-socket-lib" "scribble-lib" "racket-doc" "rackunit-lib" "unix-socket-lib")) (description . "Loci provides access to locus, an entity similar to a place based on OS processes, instead of threads.") (implies . ()) (last-checked . 1632904151) (last-edit . 1578584637) (last-updated . 1610116386) (modules . ((lib "loci/private/locus-transferable_gen.rkt") (lib "loci/private/locus-local.rkt") (lib "loci/private/locus-channel.rkt") (lib "loci/private/utils.rkt") (lib "test/test_locus-messaging.rkt") (lib "loci/private/path.rkt") (lib "loci/scribblings/loci.scrbl") (lib "test/test_locus-error.rkt") (lib "loci/private/loci-log.rkt") (lib "loci/private/locus_gen.rkt") (lib "test/test_locus-print.rkt") (lib "loci/main.rkt") (lib "test/test_locus-context.rkt"))) (name . "loci") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pmatos@linki.tools . #t) (parallel . #t) (places . #t) (ring:1 . #t))) (source . "https://github.com/pmatos/racket-loci.git") (tags . ("parallel" "places")) (versions . #hash((default . #hasheq((checksum . "ce063c7e45d5abb7c187766b3ab7045ef2f84099") (source . "https://github.com/pmatos/racket-loci.git") (source_url . "https://github.com/pmatos/racket-loci.git"))))))) ("loess" . #hasheq((author . "hazel@knightsofthelambdacalcul.us") (authors . ("hazel@knightsofthelambdacalcul.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "loess" "doc/loess@loess/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/loess.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/loess.txt"))) (checksum . "db88acff8c0265768cbd62072a895ef67dbccf37") (checksum-error . #f) (collection . "loess") (conflicts . ()) (date-added . 1623098128) (dependencies . ("base" "math-lib" "plot-lib" "typed-racket-lib" "plot-doc" "plot-gui-lib" "racket-doc" "scribble-lib" "typed-racket-doc")) (description . "Local polynomial regressions for Racket.") (implies . ()) (last-checked . 1632904151) (last-edit . 1623098128) (last-updated . 1623162544) (modules . ((lib "loess/main.rkt") (lib "loess/scribblings/loess.scrbl"))) (name . "loess") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:hazel@knightsofthelambdacalcul.us . #t) (data . #t) (plot . #t) (ring:1 . #t) (statistics . #t))) (source . "https://github.com/ralsei/loess.git") (tags . ("data" "plot" "statistics")) (versions . #hash((default . #hasheq((checksum . "db88acff8c0265768cbd62072a895ef67dbccf37") (source . "https://github.com/ralsei/loess.git") (source_url . "https://github.com/ralsei/loess.git"))))))) ("logbook" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/logbook.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "6772003b5e8663426559d245451b82ec748c07c7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "plot-gui-lib" "plot-lib" "web-server-lib" "csv-reading")) (description . "Tool for recording a database of experimental results") (implies . ()) (last-checked . 1632904151) (last-edit . 1482289778) (last-updated . 1502816159) (modules . ((lib "logbook/plot-utils.rkt") (lib "logbook/store.rkt") (lib "logbook/main.rkt") (lib "logbook/notes.rkt") (lib "logbook/private/raco-logbook-plot.rkt") (lib "logbook/private/raco-logbook-launcher.rkt") (lib "logbook/private/raco-logbook.rkt") (lib "logbook/export.rkt") (lib "logbook/machine-info.rkt") (lib "logbook/private/raco-logbook-serve.rkt"))) (name . "logbook") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/racket-logbook") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6772003b5e8663426559d245451b82ec748c07c7") (source . "git://github.com/tonyg/racket-logbook") (source_url . "http://github.com/tonyg/racket-logbook/tree/master"))))))) ("logger" . #hasheq((author . "macocio@gmail.com") (authors . ("macocio@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "logger" "doc/logger@logger/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/logger.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/logger.txt"))) (checksum . "a4cb492d14d2e65840818ed4fe169011b30be23a") (checksum-error . #f) (collection . "logger") (conflicts . ()) (dependencies . ("base" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A simple logging library with color and 7 log levels.") (implies . ()) (last-checked . 1632904151) (last-edit . 1533978718) (last-updated . 1534589081) (modules . ((lib "logger/scribblings/logger.scrbl") (lib "logger/main.rkt"))) (name . "logger") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:macocio@gmail.com . #t) (logger . #t) (ring:1 . #t))) (source . "https://github.com/BourgondAries/logger.git") (tags . ("logger")) (versions . #hash((default . #hasheq((checksum . "a4cb492d14d2e65840818ed4fe169011b30be23a") (source . "https://github.com/BourgondAries/logger.git") (source_url . "https://github.com/BourgondAries/logger.git"))))))) ("logo" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "logo" "doc/logo@logo/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/logo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/logo.txt"))) (checksum . "2e9f3f7ffb4b8100aeb52943098f150c1cf7441a") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "htdp-lib" "math-lib" "parser-tools-lib" "racket-doc" "scribble-lib")) (description . "A #lang for Logo") (implies . ()) (last-checked . 1632904151) (last-edit . 1544536748) (last-updated . 1549201303) (modules . ((lib "logo/scribblings/logo.scrbl") (lib "logo/lang/reader.rkt") (lib "logo/turtle.rkt") (lib "logo/parser.rkt") (lib "logo/sierpinski.rkt") (lib "logo/language.rkt"))) (name . "logo") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:leo@lwh.jp . #t) (ring:1 . #t))) (source . "https://github.com/lwhjp/logo.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2e9f3f7ffb4b8100aeb52943098f150c1cf7441a") (source . "https://github.com/lwhjp/logo.git") (source_url . "https://github.com/lwhjp/logo.git"))))))) ("loop" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "loop" "doc/loop@loop/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/loop.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/loop.txt"))) (checksum . "c7098540edfbaa7ea8cee3f867ca72391f0f9432") (checksum-error . #f) (collection . "loop") (conflicts . ()) (date-added . 1556792786) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Advanced named let") (implies . ()) (last-checked . 1632904152) (last-edit . 1556792786) (last-updated . 1607783875) (modules . ((lib "loop/main.rkt") (lib "loop/scribblings/loop.scrbl"))) (name . "loop") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (loop . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/loop.git") (tags . ("loop")) (versions . #hash((default . #hasheq((checksum . "c7098540edfbaa7ea8cee3f867ca72391f0f9432") (source . "https://github.com/sorawee/loop.git") (source_url . "https://github.com/sorawee/loop.git"))))))) ("lti-freq-domain-toolbox" . #hasheq((author . "iastefan@outlook.com") (authors . ("iastefan@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lti-freq-domain-toolbox" "doc/lti-freq-domain-toolbox@lti-freq-domain-toolbox/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lti-freq-domain-toolbox.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lti-freq-domain-toolbox.txt"))) (checksum . "1465a3458840a2e0ac58ec2a482e27abf99cb911") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (date-added . 1579616400) (dependencies . ("plot-lib" "base" "math-lib" "plot-gui-lib" "racket-doc" "scribble-lib")) (description . "Functions for studying LTI (linear time-invariant) dynamical systems") (implies . ()) (last-checked . 1632904152) (last-edit . 1611346048) (last-updated . 1602105285) (modules . ((lib "lti-freq-domain-toolbox/auxiliary/metrics.rkt") (lib "lti-freq-domain-toolbox/elements/tf.rkt") (lib "lti-freq-domain-toolbox/auxiliary/display_modes.rkt") (lib "lti-freq-domain-toolbox/main.rkt") (lib "lti-freq-domain-toolbox/functionality/plot_time_domain.rkt") (lib "lti-freq-domain-toolbox/functionality/plot_freq_domain.rkt") (lib "lti-freq-domain-toolbox/math_library/general.rkt") (lib "lti-freq-domain-toolbox/elements/general.rkt") (lib "lti-freq-domain-toolbox/elements/adder.rkt") (lib "lti-freq-domain-toolbox/circuits.rkt") (lib "lti-freq-domain-toolbox/math_library/numerical_analysis.rkt") (lib "lti-freq-domain-toolbox/elements/block.rkt") (lib "lti-freq-domain-toolbox/doc/lti-freq-domain-toolbox.scrbl") (lib "lti-freq-domain-toolbox/functionality/text_generation.rkt") (lib "lti-freq-domain-toolbox/math_library/symbolic_algebra.rkt"))) (name . "lti-freq-domain-toolbox") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:iastefan@outlook.com . #t) (engineering . #t) (ring:1 . #t))) (source . "https://github.com/istefanis/lti-freq-domain-toolbox.git") (tags . ("engineering")) (versions . #hash((default . #hasheq((checksum . "1465a3458840a2e0ac58ec2a482e27abf99cb911") (source . "https://github.com/istefanis/lti-freq-domain-toolbox.git") (source_url . "https://github.com/istefanis/lti-freq-domain-toolbox.git"))))))) ("lua" . #hasheq((author . "shawsumma@gmail.com") (authors . ("shawsumma@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/lua.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lua.txt") (test-failure-log . "server/built/test-fail/lua.txt") (test-success-log . #f))) (checksum . "aa0f0dde617dbe616dc1bb3f2c9e456d6023dae6") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1580347480) (dependencies . ("base" "functional-lib")) (description . "The programming language Lua. Targeting version 5.3.5 (Currently unstable)") (implies . ()) (last-checked . 1632904153) (last-edit . 1604558122) (last-updated . 1627486312) (modules . ((lib "lua/compiler.rkt") (lib "lua/comb/combinator.rkt") (lib "lua/comb/text.rkt") (lib "lua/lang/reader.rkt") (lib "lua/comb/parser.rkt") (lib "lua/locals.rkt") (lib "lua/main.rkt") (lib "lua/comb/base.rkt"))) (name . "lua") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:shawsumma@gmail.com . #t) (language . #t) (lua . #t) (ring:1 . #t))) (source . "https://github.com/shawsumma/lure.git") (tags . ("language" "lua")) (versions . #hash((default . #hasheq((checksum . "aa0f0dde617dbe616dc1bb3f2c9e456d6023dae6") (source . "https://github.com/shawsumma/lure.git") (source_url . "https://github.com/shawsumma/lure.git"))))))) ("lux" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lux" "doc/lux@lux/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lux.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/lux.txt"))) (checksum . "23caa1996bde1a88e53ae0e1cf8d650e18dcbc24") (checksum-error . #f) (collection . "lux") (conflicts . ()) (dependencies . ("draw-lib" "drracket" ("gui-lib" #:version "1.13") "htdp-lib" "pict-lib" ("base" #:version "6.3.0.2") "rackunit-lib" "draw-doc" "gui-doc" "htdp-doc" "pict-doc" "scribble-lib" "racket-doc")) (description . "brilliant interactive programs") (implies . ()) (last-checked . 1632904159) (last-edit . 1416699529) (last-updated . 1622600391) (modules . ((lib "lux/chaos.rkt") (lib "lux/examples/spin.rkt") (lib "lux/chaos/gui/utils.rkt") (lib "lux/chaos/pair.rkt") (lib "lux/word.rkt") (lib "lux/scribblings/lux.scrbl") (lib "lux/main.rkt") (lib "lux/chaos/gui/val.rkt") (lib "lux/chaos/gui.rkt") (lib "lux/examples/val-demo.rkt") (lib "lux/chaos/gui/mouse.rkt") (lib "lux/chaos/gui/key.rkt"))) (name . "lux") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (graphics . #t) (gui . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/lux") (tags . ("graphics" "gui")) (versions . #hash((default . #hasheq((checksum . "23caa1996bde1a88e53ae0e1cf8d650e18dcbc24") (source . "git://github.com/jeapostrophe/lux") (source_url . "http://github.com/jeapostrophe/lux/tree/master"))))))) ("lux-charterm" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "lux-charterm" "doc/lux-charterm@lux-charterm/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lux-charterm.txt") (test-failure-log . "server/built/test-fail/lux-charterm.txt") (test-success-log . #f))) (checksum . "8d3d7c39c4cf2160f3912fea34996fe0177c78d7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("lux" "base" "racket-doc" "scribble-lib")) (description . "a lux chaos for terminal programs") (implies . ()) (last-checked . 1632904159) (last-edit . 1416789148) (last-updated . 1512418034) (modules . ((lib "charterm-fork/charterm.rkt") (lib "lux/examples/charterm.rkt") (lib "lux/chaos/lux-charterm.scrbl") (lib "charterm-fork/main.rkt") (lib "lux/chaos/charterm.rkt") (lib "charterm-fork/test-charterm.rkt"))) (name . "lux-charterm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (terminal . #t))) (source . "git://github.com/jeapostrophe/lux-charterm") (tags . ("terminal")) (versions . #hash((default . #hasheq((checksum . "8d3d7c39c4cf2160f3912fea34996fe0177c78d7") (source . "git://github.com/jeapostrophe/lux-charterm") (source_url . "http://github.com/jeapostrophe/lux-charterm/tree/master"))))))) ("lwc2016" . #hasheq((author . "daniel.feltey@eecs.northwestern.edu") (authors . ("daniel.feltey@eecs.northwestern.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/lwc2016.txt") (test-failure-log . "server/built/test-fail/lwc2016.txt") (test-success-log . #f))) (checksum . "8c0a6e11f14af23dcbd72890a51d4fd77350a3d7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("2d-lib" #:version "1.1") "base" "data-lib" "drracket-plugin-lib" "drracket-tool-lib" "gui-lib" "parser-tools-lib" "pict-lib" "rackunit-lib" "scribble-lib" "syntax-color-lib" "draw-lib" "ppict" "slideshow-lib" "unstable-lib" "at-exp-lib")) (description . "PLT submision to the 2016 language workbench challenge") (implies . ()) (last-checked . 1632904159) (last-edit . 1470110494) (last-updated . 1595108592) (modules . ((lib "talk/slides.rkt") (lib "talk/langs.rkt") (lib "editing/property.rkt") (lib "mini-java/tokens.rkt") (lib "mini-java/lexer-unit.rkt") (lib "paper/intro.scrbl") (lib "mini-java/infix-mini-java.rkt") (lib "paper/check-fonts.rkt") (lib "examples/programs/inheritance3.rkt") (lib "examples/even-odd/even-odd.rkt") (lib "mini-java/state-machine-classes.rkt") (lib "paper/racket.scrbl") (lib "editing/context-table.rkt") (lib "paper/mj-examples.rkt") (lib "test/test.rkt") (lib "test/test-examples.rkt") (lib "mini-java/parser-sig.rkt") (lib "examples/programs/even-odd.rkt") (lib "paper/notation.scrbl") (lib "talk/racket-lwc-pict.rkt") (lib "examples/programs/break-example.rkt") (lib "editing/syntax-info.rkt") (lib "paper/evolution.scrbl") (lib "examples/programs/inheritance2.rkt") (lib "paper/setup.rkt") (lib "mini-java/parser-unit.rkt") (lib "examples/programs/ParityMachine.rkt") (lib "examples/programs/typecheck-test.rkt") (lib "talk/mj-code.rkt") (lib "paper/minijava.scrbl") (lib "talk/util.rkt") (lib "examples/even-odd/even-odd-prefix.rkt") (lib "mini-java/prefix-mini-java.rkt") (lib "paper/conclusion.scrbl") (lib "mini-java/error.rkt") (lib "mini-java/typecheck.rkt") (lib "test/parser-test.rkt") (lib "paper/bib.rkt") (lib "paper/editing.scrbl") (lib "examples/programs/receiver-machine.rkt") (lib "editing/if-refactor.rkt") (lib "examples/programs/inheritance.rkt") (lib "examples/even-odd/expanded-even-odd.rkt") (lib "examples/programs/fact.rkt") (lib "examples/programs/state-machine-example.rkt") (lib "mini-java/lexer-sig.rkt") (lib "editing/refactor-tool.rkt") (lib "paper/paper.scrbl") (lib "mini-java/main.rkt"))) (name . "lwc2016") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:daniel.feltey@eecs.northwestern.edu . #t) (ring:1 . #t))) (source . "git://github.com/dfeltey/lwc2016") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8c0a6e11f14af23dcbd72890a51d4fd77350a3d7") (source . "git://github.com/dfeltey/lwc2016") (source_url . "http://github.com/dfeltey/lwc2016/tree/master"))))))) ("macro-debugger" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "macro-debugger" "doc/macro-debugger@macro-debugger/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "class-iop-lib" "compatibility-lib" "data-lib" "gui-lib" "images-lib" "images-gui-lib" "parser-tools-lib" "macro-debugger-text-lib" "snip-lib" "wxme-lib" ("draw-lib" #:version "1.7") "racket-index" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "The macro debugger tool") (implies . ()) (last-checked . 1632904159) (last-edit . 1417659583) (last-updated . 1618110508) (modules . ((lib "tests/macro-debugger/tests/syntax-modules.rkt") (lib "macro-debugger/syntax-browser/prefs.rkt") (lib "macro-debugger/view/extensions.rkt") (lib "tests/macro-debugger/gui-tests.rkt") (lib "macro-debugger/view/interfaces.rkt") (lib "macro-debugger/syntax-browser/icons/lock.rkt") (lib "macro-debugger/view/stepper.rkt") (lib "macro-debugger/syntax-browser/pretty-printer.rkt") (lib "tests/macro-debugger/check-requires/use-cs.rkt") (lib "macro-debugger/syntax-browser/snip.rkt") (lib "tests/macro-debugger/tests/collects.rkt") (lib "macro-debugger/util/logger.rkt") (lib "tests/macro-debugger/all-tests.rkt") (lib "tests/macro-debugger/gentests.rkt") (lib "tests/macro-debugger/helper/helper.rkt") (lib "macro-debugger/syntax-browser/frame.rkt") (lib "tests/macro-debugger/check-requires/use-a.rkt") (lib "tests/macro-debugger/test-setup.rkt") (lib "macro-debugger/emit.rkt") (lib "macro-debugger/syntax-browser/keymap.rkt") (lib "macro-debugger/syntax-browser.rkt") (lib "macro-debugger/syntax-browser/text.rkt") (lib "macro-debugger/model/trace-raw.rkt") (lib "macro-debugger/syntax-browser/icons/steps-to-arrow.rkt") (lib "macro-debugger/syntax-browser/widget.rkt") (lib "macro-debugger/view/debug.rkt") (lib "macro-debugger/view/prefs.rkt") (lib "macro-debugger/syntax-browser/embed.rkt") (lib "macro-debugger/view/term-record.rkt") (lib "macro-debugger/syntax-browser/icons/base.rkt") (lib "tests/macro-debugger/tests/syntax-errors.rkt") (lib "macro-debugger/view/find.rkt") (lib "macro-debugger/syntax-browser/util.rkt") (lib "tests/macro-debugger/tests/syntax-basic.rkt") (lib "macro-debugger/tests/test-docs-complete.rkt") (lib "macro-debugger/macro-debugger.scrbl") (lib "macro-debugger/view/step-display.rkt") (lib "macro-debugger/syntax-browser/properties.rkt") (lib "tests/macro-debugger/tests/syntax-macros.rkt") (lib "macro-debugger/syntax-browser/icons/tainted.rkt") (lib "macro-debugger/view/process-deriv.rkt") (lib "tests/macro-debugger/gentest-framework.rkt") (lib "macro-debugger/syntax-browser/snip-decorated.rkt") (lib "macro-debugger/view/view.rkt") (lib "macro-debugger/syntax-browser/image.rkt") (lib "tests/macro-debugger/tests/policy.rkt") (lib "macro-debugger/view/frame.rkt") (lib "tests/macro-debugger/tests/hiding.rkt") (lib "macro-debugger/view/hiding-panel.rkt") (lib "macro-debugger/stepper.rkt") (lib "macro-debugger/syntax-browser/display.rkt") (lib "tests/macro-debugger/check-requires/src-c.rkt") (lib "macro-debugger/syntax-browser/controller.rkt") (lib "tests/macro-debugger/tests/regression.rkt") (lib "macro-debugger/view/cursor.rkt") (lib "tests/macro-debugger/check-requires/src-b.rkt") (lib "tests/macro-debugger/tests/perf.rkt") (lib "tests/macro-debugger/check-requires/src-a.rkt") (lib "macro-debugger/syntax-browser/hrule-snip.rkt") (lib "macro-debugger/syntax-browser/interfaces.rkt"))) (name . "macro-debugger") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "d4e2325e6d8eced81badf315048ff54f515110d5") (source . "git://github.com/racket/macro-debugger/?path=macro-debugger") (source_url . "git://github.com/racket/macro-debugger/?path=macro-debugger"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("macro-debugger-text-lib" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "db-lib" "class-iop-lib" "parser-tools-lib")) (description . "The macro debugger tool with a console interface") (implies . ()) (last-checked . 1632904159) (last-edit . 1417659583) (last-updated . 1618110509) (modules . ((lib "macro-debugger/model/trace.rkt") (lib "macro-debugger/expand.rkt") (lib "macro-debugger/analysis/show-dependencies.rkt") (lib "macro-debugger/model/parser-util.rkt") (lib "macro-debugger/model/deriv.rkt") (lib "macro-debugger/model/deriv-c.rkt") (lib "macro-debugger/model/debug.rkt") (lib "macro-debugger/analysis/private/get-references.rkt") (lib "macro-debugger/model/pattern.rkt") (lib "macro-debugger/view/debug-format.rkt") (lib "macro-debugger/analysis/private/nom-use-alg.rkt") (lib "macro-debugger/model/reductions-util.rkt") (lib "macro-debugger/stepper-text.rkt") (lib "macro-debugger/model/deriv-util.rkt") (lib "macro-debugger/model/deriv-parser.rkt") (lib "macro-debugger/analysis/check-requires.rkt") (lib "macro-debugger/analysis/private/refine-alg.rkt") (lib "macro-debugger/syntax-browser/partition.rkt") (lib "macro-debugger/analysis/private/util.rkt") (lib "macro-debugger/util/mpi.rkt") (lib "macro-debugger/model/hiding-policies.rkt") (lib "macro-debugger/model/context.rkt") (lib "macro-debugger/model/reductions-config.rkt") (lib "macro-debugger/model/stx-util.rkt") (lib "macro-debugger/util/eomap.rkt") (lib "macro-debugger/model/tracking.rkt") (lib "macro-debugger/analysis/profile.rkt") (lib "macro-debugger/analysis/private/moduledb.rkt") (lib "macro-debugger/model/steps.rkt") (lib "macro-debugger/model/deriv-tokens.rkt") (lib "macro-debugger/model/reductions.rkt") (lib "macro-debugger/syntax-browser/pretty-helper.rkt"))) (name . "macro-debugger-text-lib") (ring . 0) (search-terms . #hasheq((author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "d4e2325e6d8eced81badf315048ff54f515110d5") (source . "git://github.com/racket/macro-debugger/?path=macro-debugger-text-lib") (source_url . "git://github.com/racket/macro-debugger/?path=macro-debugger-text-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("macrotypes-example" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/macrotypes-example.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/macrotypes-example.txt"))) (checksum . "220552416edf5646d796668176a473e4271205b2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "7.0") ("macrotypes-lib" #:version "0.3.2"))) (description . "") (implies . ()) (last-checked . 1632904160) (last-edit . 1540411876) (last-updated . 1618603903) (modules . ((lib "macrotypes/examples/stlc+reco+var.rkt") (lib "macrotypes/examples/perfsysf.rkt") (lib "macrotypes/examples/stlc+overloading.rkt") (lib "macrotypes/examples/stlc+rec-iso.rkt") (lib "macrotypes/examples/stlc+cons.rkt") (lib "macrotypes/examples/sysf.rkt") (lib "macrotypes/examples/ext-stlc.rkt") (lib "macrotypes/examples/stlc.rkt") (lib "macrotypes/examples/stlc+occurrence.rkt") (lib "macrotypes/examples/stlc+sub.rkt") (lib "macrotypes/examples/stlc+lit.rkt") (lib "macrotypes/examples/infer.rkt") (lib "macrotypes/examples/fsub.rkt") (lib "macrotypes/examples/stlc+reco+sub.rkt") (lib "macrotypes/examples/stlc+box.rkt") (lib "macrotypes/examples/fomega.rkt") (lib "macrotypes/examples/fomega2.rkt") (lib "macrotypes/examples/exist.rkt") (lib "macrotypes/examples/stlc+effect.rkt") (lib "macrotypes/examples/mlish.rkt") (lib "macrotypes/examples/mlish+adhoc.rkt") (lib "macrotypes/examples/mlish-do.rkt") (lib "macrotypes/examples/perf.rkt") (lib "macrotypes/examples/stlc+tup.rkt"))) (name . "macrotypes-example") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/stchang/macrotypes.git?path=macrotypes-example") (tags . ()) (versions . #hash((default . #hasheq((checksum . "220552416edf5646d796668176a473e4271205b2") (source . "https://github.com/stchang/macrotypes.git?path=macrotypes-example") (source_url . "https://github.com/stchang/macrotypes.git?path=macrotypes-example"))))))) ("macrotypes-lib" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/macrotypes-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/macrotypes-lib.txt"))) (checksum . "220552416edf5646d796668176a473e4271205b2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "7.0"))) (description . "Types as macros core api, used to create Turnstile lang") (implies . ()) (last-checked . 1632904160) (last-edit . 1540411854) (last-updated . 1618603904) (modules . ((lib "macrotypes/typecheck.rkt") (lib "macrotypes/variance-constraints.rkt") (lib "macrotypes/postfix-in.rkt") (lib "macrotypes/type-constraints.rkt") (lib "macrotypes/stx-utils.rkt") (lib "macrotypes/typecheck-core.rkt"))) (name . "macrotypes-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/stchang/macrotypes.git?path=macrotypes-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "220552416edf5646d796668176a473e4271205b2") (source . "https://github.com/stchang/macrotypes.git?path=macrotypes-lib") (source_url . "https://github.com/stchang/macrotypes.git?path=macrotypes-lib"))))))) ("macrotypes-nonstx" . #hasheq((author . "alexander@knauth.org iitalics@gmail.com") (authors . ("alexander@knauth.org" "iitalics@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "macrotypes-nonstx" "doc/macrotypes-nonstx@macrotypes-nonstx/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/macrotypes-nonstx.txt") (test-failure-log . "server/built/test-fail/macrotypes-nonstx.txt") (test-success-log . #f))) (checksum . "b3f9839b6f8dcce4bf3fe9c15d5017214300924d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "agile" "rackunit-lib" "syntax-classes-lib" "racket-doc" "scribble-lib")) (description . "A version of the macrotypes / Turnstile idea where types don't have to be syntax objects") (implies . ()) (last-checked . 1632904160) (last-edit . 1523556901) (last-updated . 1525378796) (modules . ((lib "macrotypes-nonstx/expand-check-info.rkt") (lib "macrotypes-nonstx/example/test/test.rkt") (lib "macrotypes-nonstx/type-prop.rkt") (lib "macrotypes-nonstx/id-transformer.rkt") (lib "macrotypes-nonstx/expand-check-sugar-info.rkt") (lib "macrotypes-nonstx/example/testing.rkt") (lib "macrotypes-nonstx/example/test/vec-thing.rkt") (lib "macrotypes-nonstx/type-macros.rkt") (lib "macrotypes-nonstx/scribblings/macrotypes-nonstx.scrbl") (lib "macrotypes-nonstx/example/example-lang.rkt") (lib "macrotypes-nonstx/example/test/def.rkt") (lib "macrotypes-nonstx/expand-check-sugar.rkt") (lib "macrotypes-nonstx/expand-check.rkt") (lib "macrotypes-nonstx/type-check.rkt") (lib "macrotypes-nonstx/stxparse-match.rkt") (lib "macrotypes-nonstx/example/definition-lang.rkt") (lib "macrotypes-nonstx/prop.rkt") (lib "macrotypes-nonstx/scribblings/docs-example.rkt") (lib "macrotypes-nonstx/expand-stop.rkt") (lib "macrotypes-nonstx/example/vec-thing.rkt"))) (name . "macrotypes-nonstx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:alexander@knauth.org . #t) (author:iitalics@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/macrotypefunctors/macrotypes-nonstx.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b3f9839b6f8dcce4bf3fe9c15d5017214300924d") (source . "https://github.com/macrotypefunctors/macrotypes-nonstx.git") (source_url . "https://github.com/macrotypefunctors/macrotypes-nonstx.git"))))))) ("macrotypes-test" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/macrotypes-test.txt") (test-failure-log . "server/built/test-fail/macrotypes-test.txt") (test-success-log . #f))) (checksum . "220552416edf5646d796668176a473e4271205b2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "7.0") ("macrotypes-example" #:version "0.3.2") ("rackunit-macrotypes-lib" #:version "0.3.1"))) (description . "") (implies . ()) (last-checked . 1632904160) (last-edit . 1540411900) (last-updated . 1618603906) (modules . ((lib "tests/macrotypes/rackunit-typechecking.rkt") (lib "tests/macrotypes/stlc+tup-tests.rkt") (lib "tests/macrotypes/mlish-tests.rkt") (lib "tests/macrotypes/fomega2-tests.rkt") (lib "tests/macrotypes/mlish-internal-tests.rkt") (lib "tests/macrotypes/stlc+cons-tests.rkt") (lib "tests/macrotypes/mlish/sweet-map.rkt") (lib "tests/macrotypes/variance-constraints.rkt") (lib "tests/macrotypes/rackunit-kindchecking.rkt") (lib "tests/macrotypes/fomega-tests.rkt") (lib "tests/macrotypes/stlc+reco+var-tests.rkt") (lib "tests/macrotypes/sysf-tests.rkt") (lib "tests/macrotypes/stlc+box-tests.rkt") (lib "tests/macrotypes/stlc+overloading-tests.rkt") (lib "tests/macrotypes/general-tests.rkt") (lib "tests/macrotypes/stlc+effect-tests.rkt") (lib "tests/macrotypes/exist-tests.rkt") (lib "tests/macrotypes/perfsysf.rkt") (lib "tests/macrotypes/do-tests.rkt") (lib "tests/macrotypes/stlc+sub-tests.rkt") (lib "tests/macrotypes/stlc+lit-tests.rkt") (lib "tests/macrotypes/ext-stlc-tests.rkt") (lib "tests/macrotypes/postfix-in.rkt") (lib "tests/macrotypes/perf.rkt") (lib "tests/macrotypes/stlc+occurrence-tests.rkt") (lib "tests/macrotypes/stlc+reco+sub-tests.rkt") (lib "tests/macrotypes/stlc+rec-iso-tests.rkt") (lib "tests/macrotypes/typecheck-core.rkt") (lib "tests/macrotypes/stlc-tests.rkt") (lib "tests/macrotypes/infer-tests.rkt") (lib "tests/macrotypes/fsub-tests.rkt") (lib "tests/macrotypes/issues/issue035.rkt"))) (name . "macrotypes-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/stchang/macrotypes.git?path=macrotypes-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "220552416edf5646d796668176a473e4271205b2") (source . "https://github.com/stchang/macrotypes.git?path=macrotypes-test") (source_url . "https://github.com/stchang/macrotypes.git?path=macrotypes-test"))))))) ("magenc" . #hasheq((author . "cwebber@dustycloud.org") (authors . ("cwebber@dustycloud.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "magenc" "doc/magenc@magenc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/magenc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/magenc.txt"))) (checksum . "f5e011cb3f4fa060623764a4a80860e31ebca9fc") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "crypto-lib" "csexp" "db-lib" "gui-lib" "sql" "web-server-lib" "rackunit-lib" "scribble-lib")) (description . "Symmetric encryption for magnet URIs (code and docs)") (implies . ()) (last-checked . 1632904161) (last-edit . 1536087294) (last-updated . 1620469705) (modules . ((lib "magenc/web-store.rkt") (lib "magenc/install-factory.rkt") (lib "magenc/cas-server.rkt") (lib "magenc/client.rkt") (lib "magenc/hungry-store.rkt") (lib "magenc/url-base64.rkt") (lib "magenc/sqlite-store.rkt") (lib "magenc/scribblings/magenc.scrbl") (lib "magenc/get-put.rkt") (lib "magenc/errors.rkt") (lib "magenc/store-interface.rkt") (lib "magenc/memory-store.rkt") (lib "magenc/sha256d.rkt") (lib "magenc/debug-store.rkt"))) (name . "magenc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:cwebber@dustycloud.org . #t) (crypto . #t) (demos . #t) (ring:1 . #t))) (source . "https://gitlab.com/dustyweb/magenc.git?path=magenc") (tags . ("crypto" "demos")) (versions . #hash((default . #hasheq((checksum . "f5e011cb3f4fa060623764a4a80860e31ebca9fc") (source . "https://gitlab.com/dustyweb/magenc.git?path=magenc") (source_url . "https://gitlab.com/dustyweb/magenc.git?path=magenc"))))))) ("magic-loader" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/magic-loader.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/magic-loader.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/magic-loader.txt"))) (checksum . "ed983737b383bc527e54f6db7044df503baf2a14") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("comm-panel")) (description . "We use this at ThoughtSTEM to help kids get demo code into DrRacket quickly.  I don't recommend using this package directly -- but it could be useful as a  demonstration of extending DrRacket.  ") (implies . ()) (last-checked . 1632904161) (last-edit . 1529089348) (last-updated . 1529088545) (modules . ((lib "magic-loader/tool.rkt"))) (name . "magic-loader") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:stephen@thoughtstem.com . #t) (drracket . #t) (ring:1 . #t) (tools . #t))) (source . "https://github.com/thoughtstem/magic-loader.git") (tags . ("drracket" "tools")) (versions . #hash((default . #hasheq((checksum . "ed983737b383bc527e54f6db7044df503baf2a14") (source . "https://github.com/thoughtstem/magic-loader.git") (source_url . "https://github.com/thoughtstem/magic-loader.git"))))))) ("magnolisp" . #hasheq((author . "tero@hasu.is") (authors . ("tero@hasu.is")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "magnolisp" "doc/magnolisp@magnolisp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/magnolisp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/magnolisp.txt"))) (checksum . "191d529486e688e5dda2be677ad8fe3b654e0d4f") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . (("base" #:version "6.3") "data-lib" "scribble-lib" "unstable-debug-lib" "at-exp-lib" "racket-doc" "rackunit-lib")) (description . "Magnolisp") (implies . ()) (last-checked . 1632904162) (last-edit . 1459903864) (last-updated . 1502816161) (modules . ((lib "magnolisp/tests/test-declare-2.rkt") (lib "magnolisp/tests/test-type-infer-9.rkt") (lib "magnolisp/util/racket-5-compat.rkt") (lib "magnolisp/util/print.rkt") (lib "magnolisp/tests/test-lifts-6.rkt") (lib "magnolisp/app-util.rkt") (lib "magnolisp/tests/test-anno-1.rkt") (lib "magnolisp/tests/test-pretty-1.rkt") (lib "magnolisp/tests/test-assign-3.rkt") (lib "magnolisp/tests/test-packages-2.rkt") (lib "magnolisp/tests/test-foreign-4.rkt") (lib "magnolisp/tests/test-if-2.rkt") (lib "magnolisp/backend-build-writer.rkt") (lib "magnolisp/surface.rkt") (lib "magnolisp/tests/test-for-all-5.rkt") (lib "magnolisp/tests/test-locals-1.rkt") (lib "magnolisp/util/struct.rkt") (lib "magnolisp/tests/test-for-all-4.rkt") (lib "magnolisp/util/module.rkt") (lib "magnolisp/util/let.rkt") (lib "magnolisp/tests/test-locals-3.rkt") (lib "magnolisp/util/bankers-deque.rkt") (lib "magnolisp/tests/run-misc-tests.rkt") (lib "magnolisp/strategy-list.rkt") (lib "magnolisp/tests/test-build-3.rkt") (lib "magnolisp/tests/test-foreign-6.rkt") (lib "magnolisp/tests/test-run-target-1.rkt") (lib "magnolisp/tests/test-modules-3.rkt") (lib "magnolisp/tests/test-export-1.rkt") (lib "magnolisp/tests/test-discard-2.rkt") (lib "magnolisp/tests/lib-cxx-runner.rkt") (lib "magnolisp/tests/test-build-1.rkt") (lib "magnolisp/strategy-term.rkt") (lib "magnolisp/util.rkt") (lib "magnolisp/tests/test-type-infer-c.rkt") (lib "magnolisp/backend-mgl-print.rkt") (lib "magnolisp/tests/test-type-infer-5.rkt") (lib "magnolisp/tests/lib-surface-provide.rkt") (lib "magnolisp/2014/prelude.rkt") (lib "magnolisp/tests/lib-modules-1.rkt") (lib "magnolisp/tests/test-if-4.rkt") (lib "magnolisp/tests/test-sum2-3.rkt") (lib "magnolisp/tests/test-names-3.rkt") (lib "magnolisp/tests/test-run-discard-3.rkt") (lib "magnolisp/tests/test-for-all-1.rkt") (lib "magnolisp/core.rkt") (lib "magnolisp/tests/test-macro-4.rkt") (lib "magnolisp/tests/test-modules-2.rkt") (lib "magnolisp/util/syntax-quote-macros.rkt") (lib "magnolisp/tests/test-modules-1.rkt") (lib "magnolisp/tests/test-predicate-1.rkt") (lib "magnolisp/tests/test-run-letrec-1.rkt") (lib "magnolisp/tests/test-assign-2.rkt") (lib "magnolisp/tests/test-run-lifts-4.rkt") (lib "magnolisp/tests/test-type-infer-3.rkt") (lib "magnolisp/tests/test-packages-3.rkt") (lib "magnolisp/tests/test-type-infer-e.rkt") (lib "magnolisp/tests/test-type-infer-1.rkt") (lib "magnolisp/prelude.rkt") (lib "magnolisp/tests/test-sum2-4.rkt") (lib "magnolisp/tests/test-type-infer-b.rkt") (lib "magnolisp/modbeg.rkt") (lib "magnolisp/tests/test-let-expr-3.rkt") (lib "magnolisp/tests/test-let-expr-2.rkt") (lib "magnolisp/tests/run-ast-tests.rkt") (lib "magnolisp/tests/test-block-expr-2.rkt") (lib "magnolisp/2014.rkt") (lib "magnolisp/backend-cxx-main.rkt") (lib "magnolisp/struct.rkt") (lib "magnolisp/tests/test-type-infer-2.rkt") (lib "magnolisp/tests/test-letrec-1.rkt") (lib "magnolisp/tests/test-lifts-7.rkt") (lib "magnolisp/2014/base.rkt") (lib "magnolisp/tests/run-repr-tests.rkt") (lib "magnolisp/tests/test-literal-1.rkt") (lib "magnolisp/tests/test-run-lifts-3.rkt") (lib "magnolisp/lang/reader.rkt") (lib "magnolisp/tests/test-modules-4.rkt") (lib "magnolisp/tests/test-struct-1.rkt") (lib "magnolisp/tests/test-lifts-8.rkt") (lib "magnolisp/util/assert.rkt") (lib "magnolisp/tests/test-foreign-1.rkt") (lib "magnolisp/tests/test-type-infer-a.rkt") (lib "magnolisp/strategy.rkt") (lib "magnolisp/tests/run-view-tests.rkt") (lib "magnolisp/tests/run-stratego-tests.rkt") (lib "magnolisp/tests/test-anno-2.rkt") (lib "magnolisp/tests/test-struct-2.rkt") (lib "magnolisp/tests/test-if-1.rkt") (lib "magnolisp/tests/test-lifts-5.rkt") (lib "magnolisp/util/order.rkt") (lib "magnolisp/tests/test-pass-2.rkt") (lib "magnolisp/tests/run-cc-on-files.rkt") (lib "magnolisp/tests/test-pass-1.rkt") (lib "magnolisp/tests/test-foreign-2.rkt") (lib "magnolisp/parse.rkt") (lib "magnolisp/tests/test-lifts-2.rkt") (lib "magnolisp/base/main.rkt") (lib "magnolisp/2014/reader-ext.rkt") (lib "magnolisp/base/lang/reader.rkt") (lib "magnolisp/tests/test-for-all-2.rkt") (lib "magnolisp/util/system.rkt") (lib "magnolisp/tests/test-declare-1.rkt") (lib "magnolisp/tests/test-sum2-1.rkt") (lib "magnolisp/manual-src/util.rkt") (lib "magnolisp/tests/test-run-simple-1.rkt") (lib "magnolisp/tests/test-names-2.rkt") (lib "magnolisp/util/syntax-quote-extras.rkt") (lib "magnolisp/tests/test-build-2.rkt") (lib "magnolisp/tests/test-literal-3.rkt") (lib "magnolisp/tests/test-block-expr-3.rkt") (lib "magnolisp/tests/test-type-infer-7.rkt") (lib "magnolisp/module-load.rkt") (lib "magnolisp/tests/test-match-1.rkt") (lib "magnolisp/ast-serialize.rkt") (lib "magnolisp/pp-yield.rkt") (lib "magnolisp/tests/test-locals-2.rkt") (lib "magnolisp/tests/test-simple-1.rkt") (lib "magnolisp/ir-id-coll.rkt") (lib "magnolisp/tests/test-foreign-5.rkt") (lib "magnolisp/ast-repr.rkt") (lib "magnolisp/strategy-stratego.rkt") (lib "magnolisp/tests/test-literal-2.rkt") (lib "magnolisp/tests/test-sum2-5.rkt") (lib "magnolisp/tests/test-let-expr-1.rkt") (lib "magnolisp/tests/test-lifts-1.rkt") (lib "magnolisp/reader-ext.rkt") (lib "magnolisp/tests/test-run-sum3-1.rkt") (lib "magnolisp/manual-src/magnolisp.scrbl") (lib "magnolisp/tests/test-names-1.rkt") (lib "magnolisp/tests/test-run-assign-1.rkt") (lib "magnolisp/backend-build-main.rkt") (lib "magnolisp/tests/lib-declare-1.rkt") (lib "magnolisp/tests/test-run-compsys-1.rkt") (lib "magnolisp/tests/test-macro-2.rkt") (lib "magnolisp/tests/lib-names-3.rkt") (lib "magnolisp/backend-util.rkt") (lib "magnolisp/util/syntax-quote-main.rkt") (lib "magnolisp/tests/test-macro-5.rkt") (lib "magnolisp/tests/test-type-infer-6.rkt") (lib "magnolisp/ast-view.rkt") (lib "magnolisp/tests/test-surface-1.rkt") (lib "magnolisp/tests/test-predicate-2.rkt") (lib "magnolisp/tests/test-type-infer-4.rkt") (lib "magnolisp/compiler-cli.rkt") (lib "magnolisp/tests/test-sum2-2.rkt") (lib "magnolisp/tests/test-for-all-3.rkt") (lib "magnolisp/util/field.rkt") (lib "magnolisp/tests/test-type-infer-8.rkt") (lib "magnolisp/tests/test-macro-1.rkt") (lib "magnolisp/tests/test-packages-4.rkt") (lib "magnolisp/tests/test-foreign-3.rkt") (lib "magnolisp/2014/surface.rkt") (lib "magnolisp/backend-cxx-print.rkt") (lib "magnolisp/tests/test-type-infer-d.rkt") (lib "magnolisp/tests/lib-modules-2.rkt") (lib "magnolisp/ir-transform.rkt") (lib "magnolisp/util/debug.rkt") (lib "magnolisp/tests/test-macro-3.rkt") (lib "magnolisp/tests/run-mglc-on-files.rkt") (lib "magnolisp/std/list.rkt") (lib "magnolisp/type-infer.rkt") (lib "magnolisp/tests/test-closure-1.rkt") (lib "magnolisp/main.rkt") (lib "magnolisp/tests/test-run-begin0-1.rkt") (lib "magnolisp/compiler-api.rkt") (lib "magnolisp/tests/test-if-3.rkt") (lib "magnolisp/ir-ast.rkt") (lib "magnolisp/tests/lib-modules-3.rkt") (lib "magnolisp/tests/test-discard-1.rkt") (lib "magnolisp/backend-cxx-ast.rkt"))) (name . "magnolisp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tero@hasu.is . #t) (language . #t) (ring:1 . #t))) (source . "git://github.com/bldl/magnolisp") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "191d529486e688e5dda2be677ad8fe3b654e0d4f") (source . "git://github.com/bldl/magnolisp") (source_url . "http://github.com/bldl/magnolisp/tree/master"))))))) ("main-distribution" . #hash((author . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org") (authors . ("eli@racket-lang.org" "jay@racket-lang.org" "matthias@racket-lang.org" "mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("2d" "algol60" "at-exp-lib" "compatibility" "contract-profile" "compiler" "data" "datalog" "db" "deinprogramm" "draw" "draw-doc" "draw-lib" "drracket" "drracket-tool" "eopl" "errortrace" "future-visualizer" "future-visualizer-typed" "frtime" "games" "gui" "htdp" "html" "icons" "images" "lazy" "macro-debugger" "macro-debugger-text-lib" "make" "math" "mysterx" "mzcom" "mzscheme" "net" "net-cookies" "optimization-coach" "option-contract" "parser-tools" "pconvert-lib" "pict" "pict-snip" "picturing-programs" "plai" "planet" "plot" "preprocessor" "profile" "r5rs" "r6rs" "racket-doc" "distributed-places" "racket-cheat" "racket-index" "racket-lib" "racklog" "rackunit" "rackunit-typed" "readline" "realm" "redex" "sandbox-lib" "sasl" "schemeunit" "scribble" "serialize-cstruct-lib" "sgl" "shell-completion" "simple-tree-text-markup" "slatex" "slideshow" "snip" "srfi" "string-constants" "swindle" "syntax-color" "trace" "typed-racket" "typed-racket-more" "unix-socket" "web-server" "wxme" "xrepl" "ds-store")) (description . "A package that combines all of the packages in the main Racket distribution") (implies . ()) (last-checked . 1632904163) (last-edit . 1417659583) (last-updated . 1602252970) (modules . ()) (name . "main-distribution") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:matthias@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "2d6bde829e436cbbe2e1c2d5b6eb1b791be5244c") (source . "git://github.com/racket/main-distribution") (source_url . "http://github.com/racket/main-distribution/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("main-distribution-test" . #hash((author . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org") (authors . ("eli@racket-lang.org" "jay@racket-lang.org" "matthias@racket-lang.org" "mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("racket-test" "racket-test-extra" "rackunit-test" "draw-test" "gui-test" "db-test" "htdp-test" "html-test" "redex-test" "drracket-test" "profile-test" "srfi-test" "errortrace-test" "r6rs-test" "web-server-test" "typed-racket-test" "xrepl-test" "scribble-test" "compiler-test" "compatibility-test" "data-test" "net-test" "net-cookies-test" "pconvert-test" "planet-test" "syntax-color-test" "images-test" "plot-test" "pict-test" "pict-snip-test" "math-test" "racket-benchmarks" "drracket-tool-test" "2d-test" "option-contract-test" "sasl-test" "simple-tree-text-markup-test" "wxme-test" "unix-socket-test")) (description . "tests for main-distribution") (implies . ()) (last-checked . 1632904163) (last-edit . 1417659583) (last-updated . 1602252971) (modules . ()) (name . "main-distribution-test") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:matthias@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "85059556354663e7e039b6a1461a3e347fd5c17c") (source . "git://github.com/racket/main-distribution-test") (source_url . "http://github.com/racket/main-distribution-test/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("majordomo" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/majordomo.txt") (docs . (("main" "majordomo" "doc/majordomo@majordomo/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/majordomo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/majordomo.txt"))) (checksum . "b8826dee4233aa314c3a19fed0164b8bc446a115") (checksum-error . #f) (collection . "majordomo") (conflicts . ()) (date-added . 1594162629) (dependencies . ("base" "struct-plus-plus" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A job manager that includes automatic retries with updated state on restart. ") (implies . ()) (last-checked . 1632904163) (last-edit . 1594162629) (last-updated . 1594867673) (modules . ((lib "majordomo/scribblings/majordomo.scrbl") (lib "majordomo/main.rkt") (lib "majordomo/private/task.rkt") (lib "majordomo/tests/test_main.rkt") (lib "majordomo/messages.rkt"))) (name . "majordomo") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:david.storrs@gmail.com . #t) (job-queue . #t) (ring:1 . #t) (task-manager . #t))) (source . "https://github.com/dstorrs/majordomo.git") (tags . ("job-queue" "task-manager")) (versions . #hash((default . #hasheq((checksum . "b8826dee4233aa314c3a19fed0164b8bc446a115") (source . "https://github.com/dstorrs/majordomo.git") (source_url . "https://github.com/dstorrs/majordomo.git"))))))) ("make" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "make" "doc/make@make/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "make") (conflicts . ()) (dependencies . ("scheme-lib" "base" "cext-lib" "compiler-lib" "compatibility-lib" "racket-doc" "scribble-lib")) (description . "Simple timestamp- and dependency-triggered actions") (implies . ()) (last-checked . 1632904164) (last-edit . 1417447869) (last-updated . 1573142971) (modules . ((lib "make/collection-unit.rkt") (lib "make/collection-sig.rkt") (lib "make/main.rkt") (lib "make/make.scrbl") (lib "make/collection.rkt") (lib "make/make-unit.rkt") (lib "make/setup-extension.rkt") (lib "make/make.rkt") (lib "make/make-sig.rkt"))) (name . "make") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "50496f2033320d7f35f2770d5aee4c3ba67c44da") (source . "git://github.com/racket/make") (source_url . "http://github.com/racket/make/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("make-log-interceptor" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "make-log-interceptor" "doc/make-log-interceptor@make-log-interceptor/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/make-log-interceptor.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/make-log-interceptor.txt"))) (checksum . "9fc289c63ac772bf1fbfccfac324fea2845cdba2") (checksum-error . #f) (collection . "make-log-interceptor") (conflicts . ()) (dependencies . (("base" #:version "6.7") "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Collect events for a logger, organized by level") (implies . ()) (last-checked . 1632904164) (last-edit . 1526323995) (last-updated . 1578719249) (modules . ((lib "make-log-interceptor/test/main.rkt") (lib "make-log-interceptor/main.rkt") (lib "make-log-interceptor/scribblings/make-log-interceptor.scrbl"))) (name . "make-log-interceptor") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (logging . #t) (ring:1 . #t) (util . #t))) (source . "https://github.com/bennn/make-log-interceptor.git") (tags . ("logging" "util")) (versions . #hash((default . #hasheq((checksum . "9fc289c63ac772bf1fbfccfac324fea2845cdba2") (source . "https://github.com/bennn/make-log-interceptor.git") (source_url . "https://github.com/bennn/make-log-interceptor.git"))))))) ("map-widget" . #hasheq((author . "alexharsanyi@gmail.com") (authors . ("alexharsanyi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "map-widget" "doc/map-widget@map-widget/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/map-widget.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/map-widget.txt"))) (checksum . "49626f13fd8af53eee732400f60a8ffdcb5f56e9") (checksum-error . #f) (collection . "map-widget") (conflicts . ()) (dependencies . ("draw-lib" "errortrace-lib" "gui-lib" "db-lib" "math-lib" "base" "http-easy" "geoid" "rackunit-lib" "scribble-lib" "draw-doc" "gui-doc" "racket-doc" "al2-test-runner")) (description . "A Racket GUI Widget to display maps based on OpenStreetMap tiles ") (implies . ()) (last-checked . 1632904164) (last-edit . 1528802622) (last-updated . 1620296371) (modules . ((lib "map-widget/private/point-cloud.rkt") (lib "map-widget/private/map-util.rkt") (lib "map-widget/private/map-widget.rkt") (lib "map-widget/main.rkt") (lib "map-widget/private/map-impl.rkt") (lib "map-widget/utils.rkt") (lib "map-widget/private/map-tiles.rkt") (lib "map-widget/private/dbutil.rkt") (lib "map-widget/private/utilities.rkt") (lib "map-widget/scribblings/map-widget.scrbl") (lib "map-widget/private/map-snip.rkt") (lib "map-widget/private/point-cloud-tests.rkt"))) (name . "map-widget") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexharsanyi@gmail.com . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/alex-hhh/map-widget.git") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "49626f13fd8af53eee732400f60a8ffdcb5f56e9") (source . "https://github.com/alex-hhh/map-widget.git") (source_url . "https://github.com/alex-hhh/map-widget.git"))))))) ("margrave" . #hasheq((author . "clements@racket-lang.org tn@cs.brown.edu") (authors . ("clements@racket-lang.org" "tn@cs.brown.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "margrave" "doc/margrave@margrave/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/margrave.txt") (test-failure-log . "server/built/test-fail/margrave.txt") (test-success-log . #f))) (checksum . "09780169700c463def0d6c66192f3b07048671d8") (checksum-error . #f) (collection . "margrave") (conflicts . ()) (dependencies . ("base" "gui-lib" "parser-tools-lib" "rackunit-lib" "scheme-lib" "srfi-lite-lib" "racket-doc" "scribble-lib")) (description . "A policy analyzer") (implies . ()) (last-checked . 1632904164) (last-edit . 1539061496) (last-updated . 1539288900) (modules . ((lib "margrave/extended-examples/iptables-parser/margrave.rkt") (lib "margrave/scribblings/api.scrbl") (lib "margrave/visualization/application/example.rkt") (lib "margrave/visualization/application/test.rkt") (lib "margrave/extra-files/scratch.rkt") (lib "margrave/extra-files/sup-ios-new.rkt") (lib "margrave/scribblings/margrave.scrbl") (lib "margrave/extended-examples/IOS-simple/demo.rkt") (lib "margrave/lang/reader.rkt") (lib "margrave/extra-files/sup-iptables.rkt") (lib "margrave/extra-files/sup-ios.rkt") (lib "margrave/extended-examples/iptables-parser/ip.rkt") (lib "margrave/scribblings/representing-policies.scrbl") (lib "margrave/extended-examples/IOS-example1/forum1.rkt") (lib "margrave/extra-files/lang_test.rkt") (lib "margrave/compiler.rkt") (lib "margrave/helpers.rkt") (lib "margrave/scribblings/commands.scrbl") (lib "margrave/margrave-policy-vocab.rkt") (lib "margrave/racket/runtime-config.rkt") (lib "margrave/racket/language-info.rkt") (lib "margrave/visualization/application/load-netgraph.rkt") (lib "margrave/extended-examples/IOS-simple/network.rkt") (lib "margrave/xml-test.rkt") (lib "margrave/parser.rkt") (lib "margrave/scribblings/getting-started.scrbl") (lib "margrave/visualization/application/netgraph.rkt") (lib "margrave/racket.rkt") (lib "margrave/IOS-parser/ios-compile.rkt") (lib "margrave/examples/scripts/ios-demo.rkt") (lib "margrave/racket/lang/reader.rkt") (lib "margrave/tests.rkt") (lib "margrave/visualization/application/example2.rkt") (lib "margrave/visualization/application/visualize.rkt") (lib "margrave/main.rkt") (lib "margrave/extra-files/margrave-full-main.rkt") (lib "margrave/IOS-parser/ios.rkt") (lib "margrave/lexer.rkt") (lib "margrave/extra-files/margrave-lite-main.rkt") (lib "margrave/extended-examples/iptables-parser/iptables.rkt") (lib "margrave/extended-examples/IOS-example2/forum2.rkt") (lib "margrave/IOS-parser/ios-parse.rkt") (lib "margrave/visualization/application/apply-model.rkt") (lib "margrave/visualization/application/controls.rkt") (lib "margrave/examples/scripts/network.rkt") (lib "margrave/runtime-config.rkt") (lib "margrave/visualization/application/modelgraph.rkt") (lib "margrave/extended-examples/IOS-example1/testack.rkt") (lib "margrave/margrave.rkt") (lib "margrave/examples/scripts/examples.rkt") (lib "margrave/scribblings/helper.rkt") (lib "margrave/extra-files/large-ios.rkt") (lib "margrave/margrave-ios.rkt") (lib "margrave/language-info.rkt") (lib "margrave/margrave-xml.rkt") (lib "margrave/visualization/application/visxml.rkt") (lib "margrave/tests/lang-margrave-tests.rkt"))) (name . "margrave") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:clements@racket-lang.org . #t) (author:tn@cs.brown.edu . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/margrave.git#LISA10-pkg") (tags . ()) (versions . #hash((default . #hasheq((checksum . "09780169700c463def0d6c66192f3b07048671d8") (source . "https://github.com/jbclements/margrave.git#LISA10-pkg") (source_url . "https://github.com/jbclements/margrave.git#LISA10-pkg"))))))) ("mario" . #hasheq((author . "mlang@blind.guru") (authors . ("mlang@blind.guru")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/mario.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mario.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mario.txt"))) (checksum . "4604f58610230176abdde0ffca38c9df77810a49") (checksum-error . #f) (collection . "mario") (conflicts . ()) (dependencies . ()) (description . "An interpreter for the 2d programming language MarioLANG") (implies . ()) (last-checked . 1632904165) (last-edit . 1516019981) (last-updated . 1516105047) (modules . ((lib "mario/semantics.rkt") (lib "mario/99bottles.rkt") (lib "mario/main.rkt"))) (name . "mario") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (MarioLANG . #t) (author:mlang@blind.guru . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/mlang/mario.git") (tags . ("language" "MarioLANG")) (versions . #hash((default . #hasheq((checksum . "4604f58610230176abdde0ffca38c9df77810a49") (source . "https://github.com/mlang/mario.git") (source_url . "https://github.com/mlang/mario.git"))))))) ("marionette" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/marionette.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/marionette.txt"))) (checksum . "0dad4b5d3db974e1c93a2c9a0852d14b8e91d094") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1560002871) (dependencies . ("marionette-doc" "marionette-lib")) (description . "A Racket library that lets you control Firefox via the Marionette Protocol. (docs and implementation)") (implies . ("marionette-doc" "marionette-lib")) (last-checked . 1632904165) (last-edit . 1560002871) (last-updated . 1631788142) (modules . ()) (name . "marionette") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (firefox . #t) (ring:1 . #t) (webdriver . #t))) (source . "https://github.com/Bogdanp/marionette.git?path=marionette") (tags . ("firefox" "webdriver")) (versions . #hash((default . #hasheq((checksum . "0dad4b5d3db974e1c93a2c9a0852d14b8e91d094") (source . "https://github.com/Bogdanp/marionette.git?path=marionette") (source_url . "https://github.com/Bogdanp/marionette.git?path=marionette"))))))) ("marionette-doc" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "marionette" "doc/marionette@marionette-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/marionette-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/marionette-doc.txt"))) (checksum . "0dad4b5d3db974e1c93a2c9a0852d14b8e91d094") (checksum-error . #f) (collection . "marionette") (conflicts . ()) (date-added . 1560007008) (dependencies . ("base" "marionette-lib" "sandbox-lib" "scribble-lib" "net-doc" "racket-doc")) (description . "A Racket library that lets you control Firefox via the Marionette Protocol. (docs only)") (implies . ()) (last-checked . 1632904165) (last-edit . 1560007008) (last-updated . 1631788143) (modules . ((lib "marionette/scribblings/marionette.scrbl"))) (name . "marionette-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (firefox . #t) (ring:1 . #t) (webdriver . #t))) (source . "https://github.com/Bogdanp/marionette.git?path=marionette-doc") (tags . ("firefox" "webdriver")) (versions . #hash((default . #hasheq((checksum . "0dad4b5d3db974e1c93a2c9a0852d14b8e91d094") (source . "https://github.com/Bogdanp/marionette.git?path=marionette-doc") (source_url . "https://github.com/Bogdanp/marionette.git?path=marionette-doc"))))))) ("marionette-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/marionette-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/marionette-lib.txt"))) (checksum . "0dad4b5d3db974e1c93a2c9a0852d14b8e91d094") (checksum-error . #f) (collection . "marionette") (conflicts . ()) (date-added . 1560002949) (dependencies . ("base" "scribble-text-lib")) (description . "A Racket library that lets you control Firefox via the Marionette Protocol. (implementation only)") (implies . ()) (last-checked . 1632904165) (last-edit . 1560002949) (last-updated . 1631788144) (modules . ((lib "marionette/browser.rkt") (lib "marionette/capabilities.rkt") (lib "marionette/private/browser.rkt") (lib "marionette/page.rkt") (lib "marionette/private/json.rkt") (lib "marionette/main.rkt") (lib "marionette/rect.rkt") (lib "marionette/element.rkt") (lib "marionette/private/template.rkt") (lib "marionette/private/marionette.rkt") (lib "marionette/timeouts.rkt"))) (name . "marionette-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (firefox . #t) (ring:1 . #t) (webdriver . #t))) (source . "https://github.com/Bogdanp/marionette.git?path=marionette-lib") (tags . ("firefox" "webdriver")) (versions . #hash((default . #hasheq((checksum . "0dad4b5d3db974e1c93a2c9a0852d14b8e91d094") (source . "https://github.com/Bogdanp/marionette.git?path=marionette-lib") (source_url . "https://github.com/Bogdanp/marionette.git?path=marionette-lib"))))))) ("marionette-test" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/marionette-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/marionette-test.txt"))) (checksum . "0dad4b5d3db974e1c93a2c9a0852d14b8e91d094") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1560002977) (dependencies . ("base" "marionette-lib" "rackunit-lib")) (description . "A Racket library that lets you control Firefox via the Marionette Protocol. (tests only)") (implies . ()) (last-checked . 1632904165) (last-edit . 1560002977) (last-updated . 1631788145) (modules . ((lib "tests/marionette/integration/element.rkt") (lib "tests/marionette/integration/page.rkt") (lib "tests/marionette/integration/common.rkt") (lib "tests/marionette/integration/browser.rkt"))) (name . "marionette-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (firefox . #t) (ring:1 . #t) (webdriver . #t))) (source . "https://github.com/Bogdanp/marionette.git?path=marionette-test") (tags . ("firefox" "webdriver")) (versions . #hash((default . #hasheq((checksum . "0dad4b5d3db974e1c93a2c9a0852d14b8e91d094") (source . "https://github.com/Bogdanp/marionette.git?path=marionette-test") (source_url . "https://github.com/Bogdanp/marionette.git?path=marionette-test"))))))) ("markdown" . #hasheq((author . "racket@greghendershott.com") (authors . ("racket@greghendershott.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "markdown" "doc/markdown@markdown/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markdown.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/markdown.txt"))) (checksum . "fc03a2728b12006b21c90b6c480cfe6ae91a4cbe") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.3") ("parsack" #:version "0.4") "sandbox-lib" "scribble-lib" "srfi-lite-lib" ("threading-lib" #:version "1.1") "at-exp-lib" "html-lib" "racket-doc" "rackunit-lib" "redex-lib" "scribble-doc" "sexp-diff-lib")) (description . "Markdown format parser.") (implies . ()) (last-checked . 1632904166) (last-edit . 1504135050) (last-updated . 1616684932) (modules . ((lib "markdown/xexpr2text.rkt") (lib "markdown/toc.rkt") (lib "markdown/xexpr.rkt") (lib "markdown/redex-test.rkt") (lib "markdown/parsack.rkt") (lib "markdown/ci-environment.rkt") (lib "markdown/suite-test.rkt") (lib "markdown/scrib.rkt") (lib "markdown/perf-test.rkt") (lib "markdown/random-test.rkt") (lib "markdown/main.rkt") (lib "markdown/parse.rkt") (lib "markdown/display-xexpr.rkt") (lib "markdown/entity.rkt") (lib "markdown/markdown.scrbl") (lib "markdown/test.rkt") (lib "markdown/html.rkt") (lib "markdown/example.rkt"))) (name . "markdown") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@greghendershott.com . #t) (markdown . #t) (parser . #t) (ring:1 . #t))) (source . "git://github.com/greghendershott/markdown") (tags . ("markdown" "parser")) (versions . #hash((default . #hasheq((checksum . "fc03a2728b12006b21c90b6c480cfe6ae91a4cbe") (source . "git://github.com/greghendershott/markdown") (source_url . "http://github.com/greghendershott/markdown/tree/master"))))))) ("markdown-ng" . #hasheq((author . "pmatos@linki.tools") (authors . ("pmatos@linki.tools")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "markdown-ng"))) (failure-log . "server/built/fail/markdown-ng.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ef5eb23b8fd554d7230678dfade0541c6c06ae85") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1571860112) (dependencies . (("base" #:version "6.2") ("parsack" #:version "0.4") "sandbox-lib" "scribble-lib" "srfi-lite-lib" ("threading-lib" #:version "1.1") "at-exp-lib" "html-lib" "racket-doc" "rackunit-lib" "redex-lib" "scribble-doc" "sexp-diff")) (description . "New Generation of a Racket Markdown library") (implies . ()) (last-checked . 1632904166) (last-edit . 1571860112) (last-updated . 1598356248) (modules . ((lib "markdown-ng/redex-test.rkt") (lib "markdown-ng/display-xexpr.rkt") (lib "markdown-ng/suite-test.rkt") (lib "markdown-ng/perf-test.rkt") (lib "markdown-ng/html.rkt") (lib "markdown-ng/test.rkt") (lib "markdown-ng/random-test.rkt") (lib "markdown-ng/ci-environment.rkt") (lib "markdown-ng/scrib.rkt") (lib "markdown-ng/example.rkt") (lib "markdown-ng/parsack.rkt") (lib "markdown-ng/main.rkt") (lib "markdown-ng/xexpr.rkt") (lib "markdown-ng/markdown-ng.scrbl") (lib "markdown-ng/parse.rkt") (lib "markdown-ng/entity.rkt") (lib "markdown-ng/toc.rkt") (lib "markdown-ng/xexpr2text.rkt"))) (name . "markdown-ng") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:pmatos@linki.tools . #t) (markdown . #t) (ring:1 . #t))) (source . "https://github.com/pmatos/markdown-ng.git") (tags . ("markdown")) (versions . #hash((default . #hasheq((checksum . "ef5eb23b8fd554d7230678dfade0541c6c06ae85") (source . "https://github.com/pmatos/markdown-ng.git") (source_url . "https://github.com/pmatos/markdown-ng.git"))))))) ("markparam" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markparam.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/markparam.txt"))) (checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("markparam-lib" "markparam-doc")) (description . "a convenience library for continuation marks like parameters") (implies . ("markparam-lib" "markparam-doc")) (last-checked . 1632904166) (last-edit . 1438288079) (last-updated . 1502816163) (modules . ()) (name . "markparam") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (continuation-marks . #t) (ring:1 . #t) (utility . #t))) (source . "git://github.com/jeapostrophe/markparam/?path=markparam") (tags . ("continuation-marks" "utility")) (versions . #hash((default . #hasheq((checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (source . "git://github.com/jeapostrophe/markparam/?path=markparam") (source_url . "git://github.com/jeapostrophe/markparam/?path=markparam"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("markparam-doc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "markparam" "doc/markparam@markparam-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markparam-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/markparam-doc.txt"))) (checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (checksum-error . #f) (collection . "markparam") (conflicts . ()) (dependencies . (("base" #:version "6.2.900.4") "markparam-lib" "scribble-lib" "racket-doc")) (description . "a convenience library for continuation marks like parameters") (implies . ()) (last-checked . 1632904166) (last-edit . 1504535618) (last-updated . 1502816163) (modules . ((lib "markparam/scribblings/markparam.scrbl"))) (name . "markparam-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (continuation-marks . #t) (ring:1 . #t) (utility . #t))) (source . "git://github.com/jeapostrophe/markparam?path=markparam-doc") (tags . ("continuation-marks" "utility")) (versions . #hash((default . #hasheq((checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (source . "git://github.com/jeapostrophe/markparam?path=markparam-doc") (source_url . "http://github.com/jeapostrophe/markparam/tree/master?path=markparam-doc"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("markparam-lib" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markparam-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/markparam-lib.txt"))) (checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (checksum-error . #f) (collection . "markparam") (conflicts . ()) (dependencies . (("base" #:version "6.2.900.4"))) (description . "a convenience library for continuation marks like parameters") (implies . ()) (last-checked . 1632904166) (last-edit . 1504535542) (last-updated . 1502816163) (modules . ((lib "markparam/main.rkt"))) (name . "markparam-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (continuation-marks . #t) (ring:1 . #t) (utility . #t))) (source . "git://github.com/jeapostrophe/markparam?path=markparam-lib") (tags . ("continuation-marks" "utility")) (versions . #hash((default . #hasheq((checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (source . "git://github.com/jeapostrophe/markparam?path=markparam-lib") (source_url . "http://github.com/jeapostrophe/markparam/tree/master?path=markparam-lib"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("markparam-test" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/markparam-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/markparam-test.txt"))) (checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (checksum-error . #f) (collection . "markparam") (conflicts . ()) (dependencies . (("base" #:version "6.2.900.4") "markparam-lib" "racket-index" "eli-tester")) (description . "a convenience library for continuation marks like parameters") (implies . ()) (last-checked . 1632904167) (last-edit . 1504535546) (last-updated . 1502816164) (modules . ((lib "markparam/tests/main.rkt"))) (name . "markparam-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (continuation-marks . #t) (ring:1 . #t) (utility . #t))) (source . "git://github.com/jeapostrophe/markparam?path=markparam-test") (tags . ("continuation-marks" "utility")) (versions . #hash((default . #hasheq((checksum . "f6393494334318ef497606001f2e83bab2c8c15d") (source . "git://github.com/jeapostrophe/markparam?path=markparam-test") (source_url . "http://github.com/jeapostrophe/markparam/tree/master?path=markparam-test"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("match-count" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/match-count.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/match-count.txt"))) (checksum . "99dc72c1dc254602d92d46f12552b95fab6f2ee5") (checksum-error . #f) (collection . "match-count") (conflicts . ()) (dependencies . ("base")) (description . "Instrumented match") (implies . ()) (last-checked . 1632904167) (last-edit . 1383076503) (last-updated . 1502816164) (modules . ((lib "match-count/main.rkt"))) (name . "match-count") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (match . #t) (profiling . #t) (ring:1 . #t))) (source . "git://github.com/samth/match-count") (tags . ("match" "profiling")) (versions . #hash((default . #hasheq((checksum . "99dc72c1dc254602d92d46f12552b95fab6f2ee5") (source . "git://github.com/samth/match-count") (source_url . "http://github.com/samth/match-count/tree/master"))))))) ("match-plus" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "match-plus" "doc/match-plus@match-plus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/match-plus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/match-plus.txt"))) (checksum . "cd72471c582f5c20ec35a96fa08936f4f3fd6c47") (checksum-error . #f) (collection . "match-plus") (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "") (implies . ()) (last-checked . 1632904167) (last-edit . 1449952359) (last-updated . 1502816164) (modules . ((lib "match-plus/main.rkt") (lib "match-plus/scribblings/match-plus.scrbl"))) (name . "match-plus") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-match-plus.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "cd72471c582f5c20ec35a96fa08936f4f3fd6c47") (source . "git://github.com/lexi-lambda/racket-match-plus.git") (source_url . "http://github.com/lexi-lambda/racket-match-plus.git/tree/master"))))))) ("match-string" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "match-string" "doc/match-string@match-string/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/match-string.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/match-string.txt"))) (checksum . "ffc077653b3cdd851fd55589256f1e1177f6ed68") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "anaphoric" "srfi-lite-lib" "rackunit-lib" "htdp-lib" "racket-doc" "scribble-lib" "sandbox-lib")) (description . "string-append and append as a match patterns") (implies . ()) (last-checked . 1632904167) (last-edit . 1408914307) (last-updated . 1624649349) (modules . ((lib "match-string/ooo.rkt") (lib "match-string/docs/match-string.scrbl") (lib "match-string/main.rkt") (lib "match-string/syntax-classes.rkt") (lib "match-string/util/match-bound-vars.rkt") (lib "list-with-splicing/main.rkt") (lib "match-string/util/matcher.rkt") (lib "match-string/util/seq-matcher.rkt") (lib "match-string/util/string-seq-matcher.rkt"))) (name . "match-string") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (match . #t) (ring:1 . #t) (string . #t))) (source . "git://github.com/AlexKnauth/match-string") (tags . ("match" "string")) (versions . #hash((default . #hasheq((checksum . "ffc077653b3cdd851fd55589256f1e1177f6ed68") (source . "git://github.com/AlexKnauth/match-string") (source_url . "http://github.com/AlexKnauth/match-string/tree/master"))))))) ("math" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("math-lib" "math-doc")) (description . "Functions and data structures useful for working with numbers and collections of numbers, along with docs and tests") (implies . ("math-lib" "math-doc")) (last-checked . 1632904168) (last-edit . 1417659583) (last-updated . 1630099798) (modules . ()) (name . "math") (ring . 0) (search-terms . #hasheq((author:ntoronto@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "173a6f040e65bf2b3fb6d0bc4e058ef119f1f2d9") (source . "git://github.com/racket/math/?path=math") (source_url . "git://github.com/racket/math/?path=math"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("math-aarch64-macosx" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/math-aarch64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/math-aarch64-macosx.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for math package") (implies . ()) (last-checked . 1632904168) (last-edit . 1607103943) (last-updated . 1607103946) (modules . ()) (name . "math-aarch64-macosx") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "88e1e2ec3c4cb0de1ab41c6169027fb8aee34951") (source . "https://pkg-sources.racket-lang.org/pkgs/88e1e2ec3c4cb0de1ab41c6169027fb8aee34951/math-aarch64-macosx.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/88e1e2ec3c4cb0de1ab41c6169027fb8aee34951/math-aarch64-macosx.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("math-doc" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "math" "doc/math@math-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "at-exp-lib" "math-lib" "plot-doc" "plot-gui-lib" "racket-doc" "sandbox-lib" "scribble-lib" "typed-racket-doc" "typed-racket-lib" "2d-lib")) (description . "Math library documentation") (implies . ()) (last-checked . 1632904169) (last-edit . 1417659583) (last-updated . 1630099800) (modules . ((lib "math/scribblings/math-number-theory.scrbl") (lib "math/scribblings/math-distributions.scrbl") (lib "math/scribblings/math-utils.scrbl") (lib "math/scribblings/math-special-functions.scrbl") (lib "math/scribblings/math-bigfloat.scrbl") (lib "math/scribblings/math-statistics.scrbl") (lib "math/scribblings/utils.rkt") (lib "math/scribblings/rename-defines.rkt") (lib "math/scribblings/math.scrbl") (lib "math/scribblings/math-flonum.scrbl") (lib "math/scribblings/math-base.scrbl") (lib "math/scribblings/math-matrix.scrbl") (lib "math/scribblings/math-array.scrbl"))) (name . "math-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:ntoronto@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "173a6f040e65bf2b3fb6d0bc4e058ef119f1f2d9") (source . "git://github.com/racket/math/?path=math-doc") (source_url . "git://github.com/racket/math/?path=math-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("math-i386-macosx" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for math package") (implies . ()) (last-checked . 1632904169) (last-edit . 1523466920) (last-updated . 1523466924) (modules . ()) (name . "math-i386-macosx") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "5b0554e969a82c13648d1559686589170659f244") (source . "https://pkg-sources.racket-lang.org/pkgs/5b0554e969a82c13648d1559686589170659f244/math-i386-macosx.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/5b0554e969a82c13648d1559686589170659f244/math-i386-macosx.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("math-lib" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.11.0.6") "r6rs-lib" ("typed-racket-lib" #:version "1.14") ("math-i386-macosx" #:platform "i386-macosx") ("math-x86_64-macosx" #:platform "x86_64-macosx") ("math-ppc-macosx" #:platform "ppc-macosx") ("math-aarch64-macosx" #:platform "aarch64-macosx") ("math-win32-i386" #:platform "win32\\i386") ("math-win32-x86_64" #:platform "win32\\x86_64") ("math-x86_64-linux-natipkg" #:platform "x86_64-linux-natipkg"))) (description . "Math library") (implies . ()) (last-checked . 1632904169) (last-edit . 1417659583) (last-updated . 1630099802) (modules . ((lib "math/private/functions/log-gamma-zeros.rkt") (lib "math/private/array/array-transform.rkt") (lib "math/private/flonum/flonum-bits.rkt") (lib "math/private/matrix/matrix-types.rkt") (lib "math/private/matrix/typed-matrix-arithmetic.rkt") (lib "math/private/functions/lambert.rkt") (lib "math/private/array/array-convert.rkt") (lib "math/private/matrix/untyped-matrix-arithmetic.rkt") (lib "math/private/array/typed-array-fold.rkt") (lib "math/private/matrix/matrix-lu.rkt") (lib "math/private/distributions/impl/beta-utils.rkt") (lib "math/main.rkt") (lib "math/private/functions/gamma.rkt") (lib "math/private/array/typed-array-pointwise.rkt") (lib "math/private/distributions/impl/beta-pdf.rkt") (lib "math/private/statistics/quickselect.rkt") (lib "math/flonum.rkt") (lib "math/private/flonum/flonum-search.rkt") (lib "math/private/distributions/dist-functions.rkt") (lib "math/private/matrix/matrix-qr.rkt") (lib "math/private/base/base-random.rkt") (lib "math/private/flonum/utils.rkt") (lib "math/private/array/array-sequence.rkt") (lib "math/number-theory.rkt") (lib "math/private/array/utils.rkt") (lib "math/private/array/array-fft.rkt") (lib "math/private/array/typed-array-constructors.rkt") (lib "math/private/distributions/bernoulli-dist.rkt") (lib "math/private/flonum/flvector-syntax.rkt") (lib "math/private/distributions/impl/normal-pdf.rkt") (lib "math/private/functions/incomplete-gamma/gamma-utils.rkt") (lib "math/private/bigfloat/mpfr.rkt") (lib "math/private/functions/incomplete-gamma.rkt") (lib "math/private/array/array-syntax.rkt") (lib "math/private/distributions/gamma-dist.rkt") (lib "math/private/number-theory/quadratic-residues.rkt") (lib "math/private/distributions/discrete-dist.rkt") (lib "math/private/array/typed-mutable-array.rkt") (lib "math/private/vector/vector.rkt") (lib "math/private/polynomial/chebyshev.rkt") (lib "math/private/matrix/matrix-arithmetic.rkt") (lib "math/private/statistics/statistics-utils.rkt") (lib "math/private/bigfloat/bigfloat-incomplete-gamma.rkt") (lib "math/private/flonum/flonum-error.rkt") (lib "math/private/syntax-utils.rkt") (lib "math/private/bigfloat/gmp.rkt") (lib "math/private/matrix/matrix-gauss-elim.rkt") (lib "math/private/distributions/dist-struct.rkt") (lib "math/private/matrix/matrix-solve.rkt") (lib "math/private/array/array-parallel.rkt") (lib "math/private/statistics/correlation.rkt") (lib "math/private/array/untyped-array-pointwise.rkt") (lib "math/private/array/typed-array-indexing.rkt") (lib "math/private/inline-sort.rkt") (lib "math/private/distributions/delta-dist.rkt") (lib "math/private/array/array-indexing.rkt") (lib "math/private/statistics/statistics-struct.rkt") (lib "math/private/distributions/cauchy-dist.rkt") (lib "math/private/array/array-broadcast.rkt") (lib "math/private/distributions/impl/delta-dist.rkt") (lib "math/private/statistics/expected-values.rkt") (lib "math/private/bigfloat/bigfloat-struct.rkt") (lib "math/private/matrix/matrix-subspace.rkt") (lib "math/private/distributions/exponential-dist.rkt") (lib "math/statistics.rkt") (lib "math/matrix.rkt") (lib "math/private/flonum/expansion/expansion-log.rkt") (lib "math/private/flonum/flonum-constants.rkt") (lib "math/private/distributions/impl/poisson-random.rkt") (lib "math/private/bigfloat/bigfloat-hurwitz-zeta.rkt") (lib "math/private/matrix/matrix-kronecker.rkt") (lib "math/private/number-theory/quadratic.rkt") (lib "math/private/distributions/utils.rkt") (lib "math/private/vector/vector-mutate.rkt") (lib "math/private/functions/psi.rkt") (lib "math/private/matrix/matrix-expt.rkt") (lib "math/private/array/mutable-array.rkt") (lib "math/private/number-theory/polygonal.rkt") (lib "math/private/number-theory/partitions.rkt") (lib "math/private/functions/zeta.rkt") (lib "math/private/array/typed-array-struct.rkt") (lib "math/private/array/flarray-pointwise.rkt") (lib "math/private/array/fcarray-pointwise.rkt") (lib "math/private/functions/incomplete-gamma/gamma-temme.rkt") (lib "math/private/array/typed-array-convert.rkt") (lib "math/private/distributions/impl/gamma-random.rkt") (lib "math/private/array/array-comprehension.rkt") (lib "math/private/array/array-constructors.rkt") (lib "math/private/flonum/flonum-polyfun.rkt") (lib "math/private/number-theory/modular-arithmetic.rkt") (lib "math/private/functions/incomplete-gamma/gamma-normal.rkt") (lib "math/private/distributions/impl/walker-table.rkt") (lib "math/array.rkt") (lib "math/private/distributions/impl/normal-inv-cdf.rkt") (lib "math/private/statistics/monte-carlo.rkt") (lib "math/private/matrix/matrix-gram-schmidt.rkt") (lib "math/private/array/array-unfold.rkt") (lib "math/private/number-theory/number-theory.rkt") (lib "math/private/array/flarray-struct.rkt") (lib "math/private/array/fcarray-struct.rkt") (lib "math/private/flonum/expansion/expansion-exp.rkt") (lib "math/private/distributions/truncated-dist.rkt") (lib "math/private/functions/log-gamma.rkt") (lib "math/private/matrix/utils.rkt") (lib "math/private/distributions/impl/normal-random.rkt") (lib "math/private/base/base-functions.rkt") (lib "math/private/distributions/binomial-dist.rkt") (lib "math/private/flonum/flvector.rkt") (lib "math/private/distributions/impl/normal-utils.rkt") (lib "math/private/matrix/matrix-comprehension.rkt") (lib "math/private/flonum/flonum-log.rkt") (lib "math/private/functions/incomplete-beta.rkt") (lib "math/private/statistics/order-statistics.rkt") (lib "math/private/number-theory/factorial.rkt") (lib "math/private/number-theory/fibonacci.rkt") (lib "math/private/functions/lanczos.rkt") (lib "math/private/utils/flonum-tests.rkt") (lib "math/private/bigfloat/bigfloat-continued-fraction.rkt") (lib "math/private/distributions/impl/normal-cdf.rkt") (lib "math/private/functions/fresnel.rkt") (lib "math/private/distributions/geometric-dist.rkt") (lib "math/private/statistics/counting.rkt") (lib "math/private/array/typed-utils.rkt") (lib "math/private/functions/erf.rkt") (lib "math/base.rkt") (lib "math/private/array/typed-array-transform.rkt") (lib "math/private/flonum/expansion/expansion-exp-reduction.rkt") (lib "math/private/bigfloat/bigfloat-beta.rkt") (lib "math/distributions.rkt") (lib "math/private/distributions/poisson-dist.rkt") (lib "math/private/matrix/matrix-conversion.rkt") (lib "math/special-functions.rkt") (lib "math/utils.rkt") (lib "math/private/functions/beta.rkt") (lib "math/private/flonum/flonum-brent-dekker.rkt") (lib "math/private/array/typed-array-sequence.rkt") (lib "math/private/number-theory/farey.rkt") (lib "math/private/number-theory/bernoulli.rkt") (lib "math/private/utils.rkt") (lib "math/private/distributions/impl/binomial-pdf.rkt") (lib "math/private/array/array-fold.rkt") (lib "math/private/flonum/expansion/expansion-base.rkt") (lib "math/private/matrix/matrix-basic.rkt") (lib "math/private/functions/stirling-error.rkt") (lib "math/private/array/array-print.rkt") (lib "math/private/parameters.rkt") (lib "math/private/functions/incomplete-gamma/gamma-gautschi.rkt") (lib "math/private/bigfloat/bigfloat-incomplete-beta.rkt") (lib "math/private/unsafe.rkt") (lib "math/private/functions/hurwitz-zeta.rkt") (lib "math/private/bigfloat/bigfloat-constants.rkt") (lib "math/private/distributions/beta-dist.rkt") (lib "math/private/flonum/flonum-exp.rkt") (lib "math/private/matrix/matrix-syntax.rkt") (lib "math/bigfloat.rkt") (lib "math/private/matrix/matrix-2d.rkt") (lib "math/private/matrix/matrix-constructors.rkt") (lib "math/private/distributions/triangle-dist.rkt") (lib "math/private/base/base-constants.rkt") (lib "math/private/statistics/hpd-interval.rkt") (lib "math/private/functions/incomplete-beta-asym.rkt") (lib "math/private/array/array-pointwise.rkt") (lib "math/private/flonum/flonum-functions.rkt") (lib "math/private/vector/vector-fft.rkt") (lib "math/private/functions/incomplete-gamma/gamma-upper-frac.rkt") (lib "math/vector.rkt") (lib "math/private/distributions/impl/beta-inv-cdf.rkt") (lib "math/private/bigfloat/bigfloat-mpfr.rkt") (lib "math/private/bigfloat/bigfloat-syntax.rkt") (lib "math/private/array/array-struct.rkt") (lib "math/private/distributions/impl/binomial-random.rkt") (lib "math/private/bigfloat/utils.rkt") (lib "math/private/matrix/matrix-operator-norm.rkt") (lib "math/private/number-theory/binomial.rkt") (lib "math/private/number-theory/eulerian-number.rkt") (lib "math/private/distributions/impl/gamma-inv-cdf.rkt") (lib "math/private/exception.rkt") (lib "math/private/distributions/uniform-dist.rkt") (lib "math/private/distributions/normal-dist.rkt") (lib "math/private/functions/incomplete-gamma/gamma-lower-series.rkt") (lib "math/private/number-theory/primitive-roots.rkt") (lib "math/private/functions/continued-fraction.rkt") (lib "math/private/flonum/flonum-log1pmx.rkt") (lib "math/private/distributions/impl/poisson-pdf.rkt") (lib "math/private/flonum/flonum-more-functions.rkt") (lib "math/private/number-theory/modular-arithmetic-base.rkt") (lib "math/private/distributions/impl/gamma-pdf.rkt") (lib "math/private/array/untyped-array-convert.rkt") (lib "math/private/functions/tan-diff.rkt") (lib "math/private/number-theory/types.rkt") (lib "math/private/number-theory/small-primes.rkt") (lib "math/private/distributions/logistic-dist.rkt") (lib "math/private/number-theory/tangent-number.rkt") (lib "math/private/number-theory/divisibility.rkt") (lib "math/private/flonum/flonum-factorial.rkt") (lib "math/private/bigfloat/bigfloat-log-arithmetic.rkt") (lib "math/private/array/for-each.rkt"))) (name . "math-lib") (ring . 0) (search-terms . #hasheq((author:ntoronto@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "173a6f040e65bf2b3fb6d0bc4e058ef119f1f2d9") (source . "git://github.com/racket/math/?path=math-lib") (source_url . "git://github.com/racket/math/?path=math-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("math-ppc-macosx" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for math package") (implies . ()) (last-checked . 1632904170) (last-edit . 1523885940) (last-updated . 1523885942) (modules . ()) (name . "math-ppc-macosx") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "e9a344e6ea31fd7aed860415b8f370d1f441f90a") (source . "https://pkg-sources.racket-lang.org/pkgs/e9a344e6ea31fd7aed860415b8f370d1f441f90a/math-ppc-macosx.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/e9a344e6ea31fd7aed860415b8f370d1f441f90a/math-ppc-macosx.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("math-test" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "math-lib" "racket-test" "rackunit-lib" "typed-racket-lib" "typed-racket-more")) (description . "Math library tests") (implies . ()) (last-checked . 1632904170) (last-edit . 1417659583) (last-updated . 1630099805) (modules . ((lib "math/tests/matrix-strictness-tests.rkt") (lib "math/tests/function-tests.rkt") (lib "math/tests/stress/mpfr-ffi-call-vs-racket.rkt") (lib "math/tests/flonum-tests.rkt") (lib "math/tests/matrix-tests.rkt") (lib "math/tests/strictness-memory-leak-test.rkt") (lib "math/tests/number-theory-tests.rkt") (lib "math/tests/test-utils.rkt") (lib "math/tests/bigfloat-custodian.rkt") (lib "math/tests/array-tests.rkt") (lib "math/tests/array-untyped-tests.rkt") (lib "math/tests/array-strictness-tests.rkt") (lib "math/tests/statistics-tests.rkt") (lib "math/tests/mandelbrot-test.rkt") (lib "math/tests/random-tests.rkt") (lib "math/tests/stress/beta-test.rkt") (lib "math/tests/bigfloat-stress-test.rkt") (lib "math/tests/matrix-untyped-tests.rkt") (lib "math/tests/bigfloat-tests.rkt"))) (name . "math-test") (ring . 0) (search-terms . #hasheq((author:ntoronto@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "173a6f040e65bf2b3fb6d0bc4e058ef119f1f2d9") (source . "git://github.com/racket/math/?path=math-test") (source_url . "git://github.com/racket/math/?path=math-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("math-win32-i386" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for math package") (implies . ()) (last-checked . 1632904170) (last-edit . 1523466920) (last-updated . 1523466922) (modules . ()) (name . "math-win32-i386") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "1ad62059d964adfcdab6a81eb2348c69a66c649c") (source . "https://pkg-sources.racket-lang.org/pkgs/1ad62059d964adfcdab6a81eb2348c69a66c649c/math-win32-i386.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/1ad62059d964adfcdab6a81eb2348c69a66c649c/math-win32-i386.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("math-win32-x86_64" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for math package") (implies . ()) (last-checked . 1632904171) (last-edit . 1523466920) (last-updated . 1523466920) (modules . ()) (name . "math-win32-x86_64") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "7e13139328a36447b7d5f29209047e169a0c61d4") (source . "https://pkg-sources.racket-lang.org/pkgs/7e13139328a36447b7d5f29209047e169a0c61d4/math-win32-x86_64.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/7e13139328a36447b7d5f29209047e169a0c61d4/math-win32-x86_64.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("math-x86_64-linux-natipkg" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for math package") (implies . ()) (last-checked . 1632904171) (last-edit . 1523257827) (last-updated . 1597812612) (modules . ()) (name . "math-x86_64-linux-natipkg") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "112442851475e937d835b1d52897078d63c1763c") (source . "https://pkg-sources.racket-lang.org/pkgs/112442851475e937d835b1d52897078d63c1763c/math-x86_64-linux-natipkg.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/112442851475e937d835b1d52897078d63c1763c/math-x86_64-linux-natipkg.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("math-x86_64-macosx" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for math package") (implies . ()) (last-checked . 1632904171) (last-edit . 1581027012) (last-updated . 1581027080) (modules . ()) (name . "math-x86_64-macosx") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "b2f23dc27e4c152ecb93cc3ae5570f053f1f90b7") (source . "https://pkg-sources.racket-lang.org/pkgs/b2f23dc27e4c152ecb93cc3ae5570f053f1f90b7/math-x86_64-macosx.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/b2f23dc27e4c152ecb93cc3ae5570f053f1f90b7/math-x86_64-macosx.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("mboxrd-read" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mboxrd-read" "doc/mboxrd-read@mboxrd-read/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mboxrd-read.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mboxrd-read.txt"))) (checksum . "fe1fa607c8efabe267f30a8c9a321e823c775dbd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "rackunit-lib" "scribble-lib" "net-doc" "racket-doc")) (description . "Racket functions for reading mboxrd and mboxcl2 (used by dovecot) format") (implies . ()) (last-checked . 1632904172) (last-edit . 1540570710) (last-updated . 1568829193) (modules . ((lib "mboxrd-read/mboxrd-read.scrbl") (lib "mboxrd-read/tests.rkt") (lib "mboxrd-read/maildir.rkt") (lib "mboxrd-read/mboxcl2.rkt") (lib "mboxrd-read/mboxrd.rkt") (lib "mboxrd-read/main.rkt"))) (name . "mboxrd-read") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (io . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/mboxrd-read.git") (tags . ("io")) (versions . #hash((default . #hasheq((checksum . "fe1fa607c8efabe267f30a8c9a321e823c775dbd") (source . "https://github.com/jbclements/mboxrd-read.git") (source_url . "https://github.com/jbclements/mboxrd-read.git"))))))) ("mc-coach" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/mc-coach.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "98efd570ebaca58a1c7c03c167d33ba109a0491f") (checksum-error . #f) (collection . "mc-coach") (conflicts . ()) (date-added . 1581359754) (dependencies . ("base" "https://github.com/thoughtstem/website.git" "scribble-lib" "racket-doc" "rackunit-lib")) (description . " ") (implies . ()) (last-checked . 1632904172) (last-edit . 1581529737) (last-updated . 1581529737) (modules . ((lib "mc-coach/scribblings/mc-coach.scrbl") (lib "mc-coach/bio.rkt") (lib "mc-coach/main.rkt"))) (name . "mc-coach") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/mc-coach.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "98efd570ebaca58a1c7c03c167d33ba109a0491f") (source . "https://github.com/thoughtstem/mc-coach.git") (source_url . "https://github.com/thoughtstem/mc-coach.git"))))))) ("mc-coach-assess" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/mc-coach-assess.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "b360621a15ce9467fa7ebd386baa02f5f2bcf3f8") (checksum-error . #f) (collection . "mc-coach-assess") (conflicts . ()) (date-added . 1575324523) (dependencies . ("base" "https://github.com/thoughtstem/flash-card.git" "reprovide-lang-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Assessment flashcards for MetaCoders coach training.") (implies . ()) (last-checked . 1632904172) (last-edit . 1575324523) (last-updated . 1581131252) (modules . ((lib "mc-coach-assess/books/book-1/chapter-9/flash-cards.rkt") (lib "mc-coach-assess/books/book-1/chapter-8/flash-cards.rkt") (lib "mc-coach-assess/books/book-1/chapter-3/flash-cards.rkt") (lib "mc-coach-assess/books/book-1/chapter-1/flash-cards.rkt") (lib "mc-coach-assess/cards/lib.rkt") (lib "mc-coach-assess/books/book-1/chapter-4/flash-cards.rkt") (lib "mc-coach-assess/books/book-1/chapter-7/flash-cards.rkt") (lib "mc-coach-assess/main.rkt") (lib "mc-coach-assess/books/book-1/chapter-2/flash-cards.rkt") (lib "mc-coach-assess/cards.rkt") (lib "mc-coach-assess/scribblings/mc-coach-assess.scrbl") (lib "mc-coach-assess/books/book-1/chapter-5/flash-cards.rkt") (lib "mc-coach-assess/books/book-1/chapter-6/flash-cards.rkt") (lib "mc-coach-assess/cards/lib/main.rkt"))) (name . "mc-coach-assess") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/mc-coach-assess.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b360621a15ce9467fa7ebd386baa02f5f2bcf3f8") (source . "https://github.com/thoughtstem/mc-coach-assess.git") (source_url . "https://github.com/thoughtstem/mc-coach-assess.git"))))))) ("mcfly" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mcfly" "doc/mcfly@mcfly/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mcfly.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mcfly.txt"))) (checksum . "e670b083eefe6ac27c23cc9423bac0f31720d58c") (checksum-error . #f) (collection . "mcfly") (conflicts . ()) (dependencies . ("at-exp-lib" "base" "scribble-lib" "racket-doc")) (description . "Embedded Package Documentation Runtime") (implies . ()) (last-checked . 1632904172) (last-edit . 1456463369) (last-updated . 1601440882) (modules . ((lib "mcfly/mcfly.scrbl") (lib "mcfly/mcfly-spec.rkt") (lib "mcfly/mcfly-format.rkt") (lib "mcfly/mcfly-misc.rkt") (lib "mcfly/test-mcfly-spec.rkt") (lib "mcfly/mcfly-parse.rkt") (lib "mcfly/main.rkt") (lib "mcfly/mcfly-expand.rkt") (lib "mcfly/doc.rkt") (lib "mcfly/mcfly-scribble.rkt"))) (name . "mcfly") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (documentation . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/mcfly.zip") (tags . ("documentation")) (versions . #hash((default . #hasheq((checksum . "e670b083eefe6ac27c23cc9423bac0f31720d58c") (source . "http://www.neilvandyke.org/racket/mcfly.zip") (source_url . "http://www.neilvandyke.org/racket/mcfly.zip"))))))) ("measures" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "measures" "doc/measures@measures/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/measures.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/measures.txt"))) (checksum . "f75e2361a767cab6fb662c761cc93d15b00c964a") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "at-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Units and measures with basic arithmetic operations.") (implies . ()) (last-checked . 1632904173) (last-edit . 1383054219) (last-updated . 1516476620) (modules . ((lib "measures/tests/test-convert.rkt") (lib "measures/private/fetch-parse-elements.rkt") (lib "measures/tests/test-measure.rkt") (lib "measures/chemical-elements.rkt") (lib "measures/lang.rkt") (lib "measures/main.rkt") (lib "measures/measure.rkt") (lib "measures/functions.rkt") (lib "measures/default-units.rkt") (lib "measures/README.scrbl") (lib "measures/convert.rkt"))) (name . "measures") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (math . #t) (ring:1 . #t))) (source . "github://github.com/Metaxal/measures/master") (tags . ("math")) (versions . #hash((default . #hasheq((checksum . "f75e2361a767cab6fb662c761cc93d15b00c964a") (source . "github://github.com/Metaxal/measures/master") (source_url . "http://github.com/Metaxal/measures/tree/master"))))))) ("measures-with-dimensions" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "measures-with-dimensions" "doc/measures-with-dimensions@measures-with-dimensions/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/measures-with-dimensions.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/measures-with-dimensions.txt"))) (checksum . "fc6c78f79ac89cf488a5ccc5fc20391bd254886c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1595019971) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "threading" "math-lib" "htdp-lib" "unstable-lib" "sweet-exp" "reprovide-lang" "predicates" "colon-match" "scribble-lib" "rackunit-lib" "scribble-lib" "sandbox-lib" "racket-doc" "typed-racket-doc" "at-exp-lib")) (description . "based on measures, but with dimensions and types") (implies . ()) (last-checked . 1632904174) (last-edit . 1595019971) (last-updated . 1595036635) (modules . ((lib "typed/measures-with-dimensions/relativity/beta-gamma.rkt") (lib "measures-with-dimensions/main.rkt") (lib "typed/measures-with-dimensions/docs/chemistry.scrbl") (lib "typed/measures-with-dimensions/temperature.rkt") (lib "typed/measures-with-dimensions/exact-tau-pi-eta.rkt") (lib "typed/measures-with-dimensions/dimensions/dimension-operations.rkt") (lib "typed/measures-with-dimensions/docs/short/SI.scrbl") (lib "typed/measures-with-dimensions/docs/chemistry/molar-mass.scrbl") (lib "typed/measures-with-dimensions/untyped-utils.rkt") (lib "typed/measures-with-dimensions/temperature/match-expanders.rkt") (lib "typed/measures-with-dimensions/units/unit-struct.rkt") (lib "measures-with-dimensions/chemistry.rkt") (lib "typed/measures-with-dimensions/measures/typed-operations-1.rkt") (lib "typed/measures-with-dimensions/chemistry/molar-mass.rkt") (lib "typed/measures-with-dimensions/measures/typed-operations.rkt") (lib "typed/measures-with-dimensions/measures/untyped-operations.rkt") (lib "typed/measures-with-dimensions/docs/chemistry/elements.scrbl") (lib "typed/measures-with-dimensions/chemistry/elements.rkt") (lib "typed/measures-with-dimensions/measures/measure-types.rkt") (lib "typed/measures-with-dimensions/chemistry/compound.rkt") (lib "typed/measures-with-dimensions/measures/0-1-measures.rkt") (lib "typed/measures-with-dimensions/dimensions.rkt") (lib "typed/measures-with-dimensions/docs/deftype.rkt") (lib "typed/measures-with-dimensions/short/SI.rkt") (lib "typed/measures-with-dimensions/docs/short/US.scrbl") (lib "typed/measures-with-dimensions/docs/operations-types-structs.scrbl") (lib "typed/measures-with-dimensions/docs/units-and-dimensions.scrbl") (lib "typed/measures-with-dimensions/preds.rkt") (lib "typed/measures-with-dimensions/docs/chemistry/compounds.scrbl") (lib "typed/measures-with-dimensions/docs/measures-with-dimensions.scrbl") (lib "typed/measures-with-dimensions/chemistry/compound-struct.rkt") (lib "typed/measures-with-dimensions/relativity/lorentz-transform.rkt") (lib "typed/measures-with-dimensions/short/US.rkt") (lib "typed/measures-with-dimensions/docs/temperature.scrbl") (lib "typed/measures-with-dimensions/units.rkt") (lib "measures-with-dimensions/temperature.rkt") (lib "typed/measures-with-dimensions.rkt") (lib "typed/measures-with-dimensions/temperature/temperature-functions.rkt") (lib "typed/measures-with-dimensions/old/main.rkt") (lib "typed/measures-with-dimensions/dimensions/dimensions.rkt") (lib "typed/measures-with-dimensions/chemistry.rkt") (lib "typed/measures-with-dimensions/measures.rkt") (lib "typed/measures-with-dimensions/defmulti.rkt") (lib "typed/measures-with-dimensions/docs/short-names.scrbl") (lib "typed/measures-with-dimensions/units/unit-operations.rkt") (lib "typed/measures-with-dimensions/dimensions/dimension-struct.rkt") (lib "typed/measures-with-dimensions/measures/physical-constants.rkt") (lib "typed/measures-with-dimensions/docs/physical-constants.scrbl") (lib "typed/measures-with-dimensions/vector-operations.rkt") (lib "typed/measures-with-dimensions/chemistry/misc.rkt") (lib "typed/measures-with-dimensions/measures/measure-struct.rkt") (lib "typed/measures-with-dimensions/units/units.rkt") (lib "typed/measures-with-dimensions/chemistry/element-struct.rkt"))) (name . "measures-with-dimensions") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (dimensional-analysis . #t) (math . #t) (ring:1 . #t) (units . #t))) (source . "https://github.com/AlexKnauth/measures-with-dimensions.git#main") (tags . ("dimensional-analysis" "math" "units")) (versions . #hash((default . #hasheq((checksum . "fc6c78f79ac89cf488a5ccc5fc20391bd254886c") (source . "https://github.com/AlexKnauth/measures-with-dimensions.git#main") (source_url . "https://github.com/AlexKnauth/measures-with-dimensions.git#main"))))))) ("mediafile" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mediafile" "doc/mediafile@mediafile/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mediafile.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mediafile.txt"))) (checksum . "3d87ac5b4e35a527d7f9263af40e014d1400edb7") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "canonicalize-path" "racket-doc" "scribble-lib" "overeasy")) (description . "Media File Metadata Utilities") (implies . ()) (last-checked . 1632904174) (last-edit . 1456618671) (last-updated . 1601440946) (modules . ((lib "mediafile/mediafile-exif.rkt") (lib "mediafile/mediafile-misc.rkt") (lib "mediafile/mediafile-ogg.rkt") (lib "mediafile/mediafile.scrbl") (lib "mediafile/main.rkt") (lib "mediafile/mediafile.rkt"))) (name . "mediafile") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (jpeg . #t) (media . #t) (ogg . #t) (ring:1 . #t) (tiff . #t))) (source . "http://www.neilvandyke.org/racket/mediafile.zip") (tags . ("jpeg" "media" "ogg" "tiff")) (versions . #hash((default . #hasheq((checksum . "3d87ac5b4e35a527d7f9263af40e014d1400edb7") (source . "http://www.neilvandyke.org/racket/mediafile.zip") (source_url . "http://www.neilvandyke.org/racket/mediafile.zip"))))))) ("medic" . #hasheq((author . "artlessu@gmail.com") (authors . ("artlessu@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "medic" "doc/medic@medic/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/medic.txt") (test-failure-log . "server/built/test-fail/medic.txt") (test-success-log . #f))) (checksum . "0920090d3c77d6873b8481841622a5f2d13a732c") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("at-exp-lib" "base" "scheme-lib" "compatibility-lib" "gui-lib" "images-lib" "pict-lib" "draw-lib" "racket-doc" "scribble-lib" "redex-pict-lib")) (description . "A debugging tool for better printf") (implies . ()) (last-checked . 1632904175) (last-edit . 1422318926) (last-updated . 1502816176) (modules . ((lib "medic/demos/aggregate/fact-iter-medic.rkt") (lib "medic/demos/same/same-medic.rkt") (lib "medic/demos/demo4/src4.rkt") (lib "medic/demos/demo4/src4-medic.rkt") (lib "medic/demos/find-path/debug.rkt") (lib "medic/demos/demo2/src2.rkt") (lib "medic/demos/demo5/src5.rkt") (lib "medic/demos/factorial/fact-medic.rkt") (lib "medic/trace-browser/quadtree.rkt") (lib "medic/trace-browser/browser.rkt") (lib "medic/trace-browser/time-slider.rkt") (lib "medic/demos/aggregate/debug.rkt") (lib "medic/demos/doubly-linked-list/doubly-linked-list-medic.rkt") (lib "medic/trace-browser/scrub-slider.rkt") (lib "medic/core.rkt") (lib "medic/demos/count-length/count.rkt") (lib "medic/demos/demo5/f.rkt") (lib "medic/demos/timeline-event/debug.rkt") (lib "medic/demos/demo5/debug.rkt") (lib "medic/demos/count-length/debug.rkt") (lib "medic/trace-browser/timeline-canvas.rkt") (lib "medic/demos/demo3/src3.rkt") (lib "medic/demos/doubly-linked-list/debug.rkt") (lib "medic/demos/demo4/debug.rkt") (lib "medic/demos/factorial/fact.rkt") (lib "medic/main.rkt") (lib "medic/trace-browser/aggregate-editor.rkt") (lib "medic/syntax-traversal.rkt") (lib "medic/demos/demo3/src3-medic.rkt") (lib "medic/demos/timeline-event/se.rkt") (lib "medic/demos/demo5/src5-medic.rkt") (lib "medic/trace-util.rkt") (lib "medic/demos/timeline-event/event-medic.rkt") (lib "medic/insert.rkt") (lib "medic/scribblings/medic.scrbl") (lib "medic/trace-browser/log-text.rkt") (lib "medic/demos/demo3/debug.rkt") (lib "medic/medic-structs.rkt") (lib "medic/trace-browser/tooltip.rkt") (lib "medic/demos/demo1/src1.rkt") (lib "medic/demos/aggregate/fact-iter.rkt") (lib "medic/demos/demo2/debug.rkt") (lib "medic/load-annotator.rkt") (lib "medic/demos/doubly-linked-list/doubly-linked-list.rkt") (lib "medic/trace-browser/graph-pasteboard.rkt") (lib "medic/demos/demo2/src2-medic.rkt") (lib "medic/demos/demo1/src1-medic.rkt") (lib "medic/demos/same/debug.rkt") (lib "medic/trace.rkt") (lib "medic/trace-browser/time-frame.rkt") (lib "medic/demos/demo1/debug.rkt") (lib "medic/scribblings/language.scrbl") (lib "medic/demos/find-path/find-path.rkt") (lib "medic/demos/find-path/find-path-medic.rkt") (lib "medic/demos/count-length/count-medic.rkt") (lib "medic/demos/factorial/debug.rkt") (lib "medic/scribblings/demo.scrbl") (lib "medic/demos/same/same.rkt"))) (name . "medic") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:artlessu@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lixiangqi/medic") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0920090d3c77d6873b8481841622a5f2d13a732c") (source . "git://github.com/lixiangqi/medic") (source_url . "http://github.com/lixiangqi/medic/tree/master"))))))) ("megaparsack" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/megaparsack.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/megaparsack.txt"))) (checksum . "c4f573c4b41f75f20dfacc2e8cfe7b6bff789fb3") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "megaparsack-lib" "megaparsack-doc" "megaparsack-parser" "megaparsack-parser-tools")) (description . "practical parser combinators") (implies . ("megaparsack-lib" "megaparsack-doc" "megaparsack-parser" "megaparsack-parser-tools")) (last-checked . 1632904176) (last-edit . 1462746746) (last-updated . 1625704213) (modules . ()) (name . "megaparsack") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "c4f573c4b41f75f20dfacc2e8cfe7b6bff789fb3") (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack") (source_url . "http://github.com/lexi-lambda/megaparsack/tree/master?path=megaparsack"))))))) ("megaparsack-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "megaparsack" "doc/megaparsack@megaparsack-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/megaparsack-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/megaparsack-doc.txt"))) (checksum . "c4f573c4b41f75f20dfacc2e8cfe7b6bff789fb3") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "functional-doc" "functional-lib" ("megaparsack-lib" #:version "0.2") "megaparsack-parser-tools" "parser-tools-doc" "parser-tools-lib" "racket-doc" "scribble-lib")) (description . "documentation (no implementation) for “megaparsack”") (implies . ()) (last-checked . 1632904177) (last-edit . 1462746765) (last-updated . 1625704214) (modules . ((lib "scribblings/megaparsack/syntax.scrbl") (lib "scribblings/megaparsack.scrbl") (lib "scribblings/megaparsack/choice.scrbl") (lib "scribblings/megaparsack/reference.scrbl") (lib "scribblings/megaparsack/util.rkt") (lib "scribblings/megaparsack/basics.scrbl") (lib "scribblings/megaparsack/differences-from-parsack.scrbl") (lib "scribblings/megaparsack/state.scrbl"))) (name . "megaparsack-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack-doc") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "c4f573c4b41f75f20dfacc2e8cfe7b6bff789fb3") (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack-doc") (source_url . "http://github.com/lexi-lambda/megaparsack/tree/master?path=megaparsack-doc"))))))) ("megaparsack-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/megaparsack-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/megaparsack-lib.txt"))) (checksum . "c4f573c4b41f75f20dfacc2e8cfe7b6bff789fb3") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.5") "curly-fn-lib" ("functional-lib" #:version "0.6") "match-plus")) (description . "implementation (no documentation) for “megaparsack”") (implies . ()) (last-checked . 1632904177) (last-edit . 1462746781) (last-updated . 1625704214) (modules . ((lib "megaparsack/base.rkt") (lib "megaparsack/main.rkt") (lib "megaparsack/text.rkt") (lib "megaparsack/combinator.rkt"))) (name . "megaparsack-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack-lib") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "c4f573c4b41f75f20dfacc2e8cfe7b6bff789fb3") (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack-lib") (source_url . "http://github.com/lexi-lambda/megaparsack/tree/master?path=megaparsack-lib"))))))) ("megaparsack-parser" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/megaparsack-parser.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/megaparsack-parser.txt"))) (checksum . "c4f573c4b41f75f20dfacc2e8cfe7b6bff789fb3") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "collections-lib" "curly-fn-lib" "functional-lib" "megaparsack-lib")) (description . "built-in parsers implemented using megaparsack") (implies . ()) (last-checked . 1632904177) (last-edit . 1462746808) (last-updated . 1625704215) (modules . ((lib "megaparsack/parser/json.rkt"))) (name . "megaparsack-parser") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack-parser") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "c4f573c4b41f75f20dfacc2e8cfe7b6bff789fb3") (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack-parser") (source_url . "http://github.com/lexi-lambda/megaparsack/tree/master?path=megaparsack-parser"))))))) ("megaparsack-parser-tools" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/megaparsack-parser-tools.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/megaparsack-parser-tools.txt"))) (checksum . "c4f573c4b41f75f20dfacc2e8cfe7b6bff789fb3") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "functional-lib" "megaparsack-lib" "parser-tools-lib")) (description . "helpers for using megaparsack with parser-tools") (implies . ()) (last-checked . 1632904177) (last-edit . 1462746839) (last-updated . 1625704216) (modules . ((lib "megaparsack/parser-tools/lex.rkt"))) (name . "megaparsack-parser-tools") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack-parser-tools") (tags . ("parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "c4f573c4b41f75f20dfacc2e8cfe7b6bff789fb3") (source . "git://github.com/lexi-lambda/megaparsack?path=megaparsack-parser-tools") (source_url . "http://github.com/lexi-lambda/megaparsack/tree/master?path=megaparsack-parser-tools"))))))) ("memcached" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "memcached" "doc/memcached@memcached/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/memcached.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/memcached.txt"))) (checksum . "465d1bfc700140232c4abd0b854d807740895237") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "eli-tester" "racket-doc" "scribble-lib")) (description . "A native Racket interface to memcached") (implies . ()) (last-checked . 1632904177) (last-edit . 1353009237) (last-updated . 1502816178) (modules . ((lib "tests/net/memcached.rkt") (lib "net/memcached/memcached.scrbl") (lib "net/memcached/binary.rkt") (lib "net/memcached.rkt"))) (name . "memcached") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (net . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/memcached/master") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "465d1bfc700140232c4abd0b854d807740895237") (source . "github://github.com/jeapostrophe/memcached/master") (source_url . "http://github.com/jeapostrophe/memcached/tree/master"))))))) ("memo" . #hasheq((author . "macocio@gmail.com") (authors . ("macocio@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "memo" "doc/memo@memo/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/memo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/memo.txt"))) (checksum . "3ecfa4ad20c38ce97fedaed848d08348e92c56d3") (checksum-error . #f) (collection . "memo") (conflicts . ()) (dependencies . ("base" "finalizer" "nested-hash" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib" "thread-utils")) (description . "Memoization with finalizers and cleanup") (implies . ()) (last-checked . 1632904178) (last-edit . 1533987723) (last-updated . 1543063570) (modules . ((lib "memo/main.rkt") (lib "memo/scribblings/memo.scrbl"))) (name . "memo") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:macocio@gmail.com . #t) (memoization . #t) (ring:1 . #t))) (source . "https://github.com/BourgondAries/memo.git") (tags . ("memoization")) (versions . #hash((default . #hasheq((checksum . "3ecfa4ad20c38ce97fedaed848d08348e92c56d3") (source . "https://github.com/BourgondAries/memo.git") (source_url . "https://github.com/BourgondAries/memo.git"))))))) ("memoize" . #hasheq((author . "clements@racket-lang.org dherman@mozilla.com") (authors . ("clements@racket-lang.org" "dherman@mozilla.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "memoize" "doc/memoize@memoize/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/memoize.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/memoize.txt"))) (checksum . "9cdbf7512b8a531b1b26ffc02160aa9e8125f2ed") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Memoization for functions") (implies . ()) (last-checked . 1632904178) (last-edit . 1386376011) (last-updated . 1513624543) (modules . ((lib "memoize/private/tests.rkt") (lib "memoize/main.rkt") (lib "memoize/memoize.scrbl"))) (name . "memoize") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:clements@racket-lang.org . #t) (author:dherman@mozilla.com . #t) (ring:1 . #t))) (source . "github://github.com/jbclements/memoize/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "9cdbf7512b8a531b1b26ffc02160aa9e8125f2ed") (source . "github://github.com/jbclements/memoize/master") (source_url . "http://github.com/jbclements/memoize/tree/master"))))))) ("meow" . #hasheq((author . "racket@fog.pw") (authors . ("racket@fog.pw")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/meow.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "86b2ed46a2cadb04cf6cc3d93610cee6ad6b2af1") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/meows/racket-meow.git\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Personal utilities.") (implies . ()) (last-checked . 1632904178) (last-edit . 1524960784) (last-updated . 1621814806) (modules . ((lib "meow/scribblings/meow.scrbl") (lib "meow/tool.rkt") (lib "meow/main.rkt"))) (name . "meow") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:racket@fog.pw . #t) (ring:1 . #t) (utilities . #t))) (source . "https://github.com/meows/racket-meow.git") (tags . ("utilities")) (versions . #hash((default . #hasheq((checksum . "86b2ed46a2cadb04cf6cc3d93610cee6ad6b2af1") (source . "https://github.com/meows/racket-meow.git") (source_url . "https://github.com/meows/racket-meow.git"))))))) ("metapict" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "metapict" "doc/metapict@metapict/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/metapict.txt") (test-failure-log . "server/built/test-fail/metapict.txt") (test-success-log . #f))) (checksum . "47ae265f73cbb92ff3e7bdd61e49f4af17597fdf") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1564425321) (dependencies . ("base" "draw-lib" "math-lib" "gui-lib" "parser-tools-lib" "pict-lib" "slideshow-lib" "srfi-lite-lib" "ppict" "htdp-lib" "compatibility-lib" "graph-lib" "plot-gui-lib" "plot-lib" "rackunit-lib" "unstable-latent-contract-lib" "unstable-parameter-group-lib" "at-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc" "draw-doc" "pict-doc" "racket-poppler")) (description . "Create beautiful pictures and diagrams") (implies . ()) (last-checked . 1632904178) (last-edit . 1564425321) (last-updated . 1603233845) (modules . ((lib "metapict/angles.rkt") (lib "metapict/adaptive-plot.rkt") (lib "metapict/tests/test-text-path.rkt") (lib "metapict/examples/kmiecik-examples-from-tug-boat.rkt") (lib "metapict/scribblings/metapict.scrbl") (lib "metapict/text.rkt") (lib "metapict/examples/cuboid.rkt") (lib "metapict/axis.rkt") (lib "metapict/line.rkt") (lib "metapict/examples/example-graph.rkt") (lib "metapict/examples/integral-left-sum.rkt") (lib "metapict/examples/graphviz-experiment.rkt") (lib "metapict/domain.rkt") (lib "metapict/node.rkt") (lib "metapict/dc-path.rkt") (lib "metapict/scribblings/moonlanding.rkt") (lib "metapict/extras/function-tables.rkt") (lib "metapict/main.rkt") (lib "metapict/scribblings/examples2.rkt") (lib "metapict/scribblings/utils.rkt") (lib "metapict/scribblings/pt.scrbl") (lib "metapict/scribblings/colors.scrbl") (lib "metapict/function-plot.rkt") (lib "metapict/pt-vec.rkt") (lib "metapict/examples/exercises-angles-in-right-triangle.rkt") (lib "metapict/crop.rkt") (lib "metapict/examples/olympic-rings.rkt") (lib "metapict/pict.rkt") (lib "metapict/label.rkt") (lib "metapict/scribblings/guide.scrbl") (lib "metapict/graph.rkt") (lib "metapict/todo/linear-equations.rkt") (lib "metapict/exp/tex/render-tex-formula.rkt") (lib "metapict/scribblings/device.scrbl") (lib "metapict/tests/test-rotation.rkt") (lib "metapict/scribblings/coordinates.scrbl") (lib "metapict/examples/pointilism2.rkt") (lib "metapict/examples/grapviz-experiment.rkt") (lib "metapict/bitmap.rkt") (lib "metapict/box-and-pointer-diagram.rkt") (lib "metapict/todo/lexer.rkt") (lib "metapict/bez.rkt") (lib "metapict/pen-and-brush.rkt") (lib "metapict/scribblings/examples.scrbl") (lib "metapict/todo/test-grammar-and-lexer.rkt") (lib "metapict/def.rkt") (lib "metapict/examples/asymptote-hobby-control.rkt") (lib "metapict/examples/uml.rkt") (lib "metapict/tests/test-node.rkt") (lib "metapict/scribblings/curves.scrbl") (lib "metapict/examples/glider.rkt") (lib "metapict/metapict.rkt") (lib "metapict/examples/peano.rkt") (lib "metapict/scribblings/draw-and-fill.scrbl") (lib "metapict/examples/triangle-sss.rkt") (lib "metapict/hom.rkt") (lib "metapict/scribblings/examples5.scrbl") (lib "metapict/plot.rkt") (lib "metapict/geometry.rkt") (lib "metapict/path.rkt") (lib "metapict/text-path.rkt") (lib "metapict/scribblings/representation.scrbl") (lib "metapict/mat.rkt") (lib "metapict/exp/render-math-using-picts.rkt") (lib "metapict/font.rkt") (lib "metapict/examples/reuleaux-triangle.rkt") (lib "metapict/histogram.rkt") (lib "metapict/examples/asymptote-venn-diagram.rkt") (lib "metapict/scribblings/construction-of-bezier-curve.rkt") (lib "metapict/scribblings/reference.scrbl") (lib "metapict/examples/geometry-exercises.rkt") (lib "metapict/examples/koch-curve.rkt") (lib "metapict/examples/vector-diagrams.rkt") (lib "metapict/examples/racket-logo.rkt") (lib "metapict/dc.rkt") (lib "metapict/polygons.rkt") (lib "metapict/examples/metafont-book.rkt") (lib "metapict/grid.rkt") (lib "metapict/examples/rectilinear.rkt") (lib "metapict/color.rkt") (lib "metapict/examples/pointilism.rkt") (lib "metapict/examples/rotating-triangle.rkt") (lib "metapict/structs.rkt") (lib "metapict/arrow.rkt") (lib "metapict/tests/test-latex-formulas.rkt") (lib "metapict/todo/grammar.rkt") (lib "metapict/examples/root-spiral.rkt") (lib "metapict/save-pdf.rkt") (lib "metapict/examples/sine-cosine-drawing.rkt") (lib "metapict/list3-sequence.rkt") (lib "metapict/scribblings/curve.scrbl") (lib "metapict/examples/generate-exercises-to-pdf.rkt") (lib "metapict/match-case-lambda.rkt") (lib "metapict/examples/truncated-cone.rkt") (lib "metapict/examples/arbelos.rkt") (lib "metapict/tree.rkt") (lib "metapict/markings.rkt") (lib "metapict/exp/font-root-test.rkt") (lib "metapict/scribblings/examples4.rkt") (lib "metapict/function.rkt") (lib "metapict/todo/grammar-expressions.rkt") (lib "metapict/system.rkt") (lib "metapict/gradient.rkt") (lib "metapict/scribblings/labels.scrbl") (lib "metapict/snake.rkt") (lib "metapict/examples/metapost-manual.rkt") (lib "metapict/examples/venn.rkt") (lib "metapict/examples/pict-finders.rkt") (lib "metapict/examples/polygonal-numbers.rkt") (lib "metapict/window.rkt") (lib "metapict/draw-bezier.rkt") (lib "metapict/exp/framed-table.rkt") (lib "metapict/examples/convex-hull.rkt") (lib "metapict/cubic-equation.rkt") (lib "metapict/pict-lite.rkt") (lib "metapict/scribblings/bez.scrbl") (lib "metapict/path-operations.rkt") (lib "metapict/parameters.rkt") (lib "metapict/trig.rkt") (lib "metapict/trans.rkt") (lib "metapict/examples/gradient-example.rkt") (lib "metapict/shapes.rkt") (lib "metapict/scribblings/trans.scrbl") (lib "metapict/debug.rkt") (lib "metapict/scribblings/guide.rkt") (lib "metapict/scribblings/pict.scrbl") (lib "metapict/tests/test-radial-gradient-for-ellipse.rkt") (lib "metapict/save-svg.rkt") (lib "metapict/draw.rkt") (lib "metapict/examples/missing-square-puzzle.rkt") (lib "metapict/device.rkt") (lib "metapict/examples/metapost-examples.rkt") (lib "metapict/examples/triangles.rkt") (lib "metapict/tests/commutative-diagrams.rkt") (lib "metapict/shade.rkt") (lib "metapict/extras/flags.rkt") (lib "metapict/examples/state-machine-turn-stile.rkt") (lib "metapict/examples/random-curve.rkt") (lib "metapict/curve.rkt") (lib "metapict/todo/tagged-pict.rkt"))) (name . "metapict") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jensaxel@soegaard.net . #t) (graph . #t) (graphics . #t) (images . #t) (metapict . #t) (node . #t) (ring:1 . #t) (tikz . #t))) (source . "https://github.com/soegaard/metapict.git") (tags . ("graph" "graphics" "images" "metapict" "node" "tikz")) (versions . #hash((default . #hasheq((checksum . "47ae265f73cbb92ff3e7bdd61e49f4af17597fdf") (source . "https://github.com/soegaard/metapict.git") (source_url . "https://github.com/soegaard/metapict.git"))))))) ("mf-apply" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mf-apply" "doc/mf-apply@mf-apply/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mf-apply.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mf-apply.txt"))) (checksum . "e7b079c172bd20035a48d50af56e766186568057") (checksum-error . #f) (collection . "mf-apply") (conflicts . ()) (dependencies . ("base" "redex-lib" "scribble-lib" "racket-doc" "rackunit-lib" "redex-doc")) (description . "PLT Redex lang-extension for checked metafunction application") (implies . ()) (last-checked . 1632904178) (last-edit . 1488257334) (last-updated . 1582483084) (modules . ((lib "mf-apply/docs/mf-apply.scrbl") (lib "mf-apply/lang/reader.rkt"))) (name . "mf-apply") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (lang-extension . #t) (redex . #t) (ring:1 . #t) (utility . #t))) (source . "git://github.com/bennn/mf-apply") (tags . ("lang-extension" "redex" "utility")) (versions . #hash((default . #hasheq((checksum . "e7b079c172bd20035a48d50af56e766186568057") (source . "git://github.com/bennn/mf-apply") (source_url . "http://github.com/bennn/mf-apply/tree/master"))))))) ("mic1" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mic1" "doc/mic1@mic1/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mic1.txt") (test-failure-log . "server/built/test-fail/mic1.txt") (test-success-log . #f))) (checksum . "e985f4698f005049643998d28f8173e821acdb6b") (checksum-error . #f) (collection . "mic1") (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "readline-lib" "racket-doc" "scribble-lib" "chk")) (description . "tools for MIC-1 CPU architecture") (implies . ()) (last-checked . 1632904179) (last-edit . 1495592344) (last-updated . 1565124949) (modules . ((lib "mic1/mcc.rkt") (lib "mic1/masm.rkt") (lib "mic1/high-level.rkt") (lib "mic1/mic1.rkt") (lib "mic1/lib.rkt") (lib "mic1/low-level.rkt") (lib "mic1/mic1.scrbl") (lib "mic1/simulator.rkt") (lib "mic1/hdl.rkt") (lib "mic1/mic1-test.rkt"))) (name . "mic1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (hardware . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/mic1?path=rkt") (tags . ("hardware")) (versions . #hash((default . #hasheq((checksum . "e985f4698f005049643998d28f8173e821acdb6b") (source . "git://github.com/jeapostrophe/mic1?path=rkt") (source_url . "http://github.com/jeapostrophe/mic1/tree/master?path=rkt"))))))) ("midi-readwrite" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "midi" "doc/midi@midi-readwrite/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/midi-readwrite.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/midi-readwrite.txt"))) (checksum . "92953cfef013e2c654e8f972b5d55f0da220fae4") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc")) (description . "simple functions to read MIDI (.mid) files") (implies . ()) (last-checked . 1632904179) (last-edit . 1383343365) (last-updated . 1502816180) (modules . ((lib "midi-readwrite/midi.scrbl") (lib "midi-readwrite/midi-write.rkt") (lib "midi-readwrite/main.rkt") (lib "midi-readwrite/controller-name.rkt") (lib "midi-readwrite/notestream.rkt") (lib "midi-readwrite/midi-to-notes.rkt") (lib "midi-readwrite/test/example-read.rkt") (lib "midi-readwrite/midi-structs.rkt") (lib "midi-readwrite/sort-helper.rkt") (lib "midi-readwrite/midi-read.rkt"))) (name . "midi-readwrite") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (io . #t) (midi . #t) (ring:1 . #t))) (source . "github://github.com/jbclements/midi-readwrite/master") (tags . ("audio" "io" "midi")) (versions . #hash((default . #hasheq((checksum . "92953cfef013e2c654e8f972b5d55f0da220fae4") (source . "github://github.com/jbclements/midi-readwrite/master") (source_url . "http://github.com/jbclements/midi-readwrite/tree/master"))))))) ("mike" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mike" "doc/mike@mike/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mike.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mike.txt"))) (checksum . "e2700c9a38742c78637978ce946e45144cf17240") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1624403593) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Micro Make replacement") (implies . ()) (last-checked . 1632904179) (last-edit . 1624403593) (last-updated . 1631597319) (modules . ((lib "mike/scribblings/project.scrbl") (lib "mike/private/rules.rkt") (lib "mike/scribblings/mike.scrbl") (lib "mike/scribblings/about.scrbl") (lib "mike/private/helpers/compile.rkt") (lib "mike/main.rkt") (lib "mike/private/helpers/index.rkt") (lib "mike/private/variables.rkt") (lib "mike/scribblings/cli.scrbl") (lib "mike/private/tests.rkt"))) (name . "mike") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:xgqt@riseup.net . #t) (development . #t) (make . #t) (ring:1 . #t) (utility . #t))) (source . "https://gitlab.com/xgqt/racket-mike.git") (tags . ("development" "make" "utility")) (versions . #hash((default . #hasheq((checksum . "e2700c9a38742c78637978ce946e45144cf17240") (source . "https://gitlab.com/xgqt/racket-mike.git") (source_url . "https://gitlab.com/xgqt/racket-mike.git"))))))) ("mind-map" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mind-map" "doc/mind-map@mind-map/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mind-map.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mind-map.txt"))) (checksum . "8401400f1dbc7956357cd27563b6926f4e429d7c") (checksum-error . #f) (collection . "mind-map") (conflicts . ()) (date-added . 1592414757) (dependencies . ("base" "racket-graphviz" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Write and render mind maps in Racket.") (implies . ()) (last-checked . 1632904179) (last-edit . 1592414757) (last-updated . 1592601463) (modules . ((lib "mind-map/private/lexer.rkt") (lib "mind-map/cli.rkt") (lib "mind-map/examples/tcgs.rkt") (lib "mind-map/private/parser.rkt") (lib "mind-map/main.rkt") (lib "mind-map/scribblings/mind-map.scrbl"))) (name . "mind-map") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sage@sagegerard.com . #t) (mind-map . #t) (mind-mapping . #t) (ring:1 . #t))) (source . "https://github.com/zyrolasting/mind-map.git") (tags . ("mind-map" "mind-mapping")) (versions . #hash((default . #hasheq((checksum . "8401400f1dbc7956357cd27563b6926f4e429d7c") (source . "https://github.com/zyrolasting/mind-map.git") (source_url . "https://github.com/zyrolasting/mind-map.git"))))))) ("minetest" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "minetest" "doc/minetest@minetest/index.html"))) (failure-log . "server/built/fail/minetest.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "74ba2d02511e96bfc477ab6db4937d1732bd1e2b") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Compile-time framework for getting 2htdp/image objects into Minetest (as blocks, items, recipes, and/or schematics).  Only works on Linux.") (implies . ()) (last-checked . 1632904180) (last-edit . 1514502227) (last-updated . 1530218676) (modules . ((lib "minetest/examples/quick-demo.rkt") (lib "minetest/blocks.rkt") (lib "minetest/lua.rkt") (lib "minetest/schematics-writer-raw.rkt") (lib "minetest/schematics.rkt") (lib "minetest/rules.rkt") (lib "minetest/minetest.scrbl") (lib "minetest/items.rkt") (lib "minetest/examples/example-mod.rkt") (lib "minetest/core.rkt") (lib "minetest/main.rkt") (lib "minetest/rocket-module.rkt") (lib "minetest/textures.rkt") (lib "minetest/recipes.rkt") (lib "minetest/mob-api-raw.rkt") (lib "minetest/entities.rkt") (lib "minetest/examples/hello-world.rkt") (lib "minetest/examples/example2.rkt") (lib "minetest/compiler.rkt"))) (name . "minetest") (ring . 1) (search-terms . #hasheq((2htdp . #t) (:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:stephen@thoughtstem.com . #t) (education . #t) (games . #t) (minetest . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/minetest.git") (tags . ("2htdp" "education" "games" "minetest")) (versions . #hash((default . #hasheq((checksum . "74ba2d02511e96bfc477ab6db4937d1732bd1e2b") (source . "https://github.com/thoughtstem/minetest.git") (source_url . "https://github.com/thoughtstem/minetest.git"))))))) ("mini-theme" . #hasheq((author . "dannypsnl@gmail.com") (authors . ("dannypsnl@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mini-theme" "doc/mini-theme@mini-theme/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mini-theme.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mini-theme.txt"))) (checksum . "3410442a1eb9b7ad51d74179df1f92c64637b9c8") (checksum-error . #f) (collection . "mini-theme") (conflicts . ()) (date-added . 1610243211) (dependencies . ("base" "scribble-lib")) (description . "A minimal DrRacket theme") (implies . ()) (last-checked . 1632904181) (last-edit . 1623775567) (last-updated . 1623248992) (modules . ((lib "mini-theme/scribblings/mini-theme.scrbl"))) (name . "mini-theme") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dannypsnl@gmail.com . #t) (drracket-theme . #t) (ring:1 . #t))) (source . "https://github.com/dannypsnl/mini-theme.git#develop") (tags . ("drracket-theme")) (versions . #hash((default . #hasheq((checksum . "3410442a1eb9b7ad51d74179df1f92c64637b9c8") (source . "https://github.com/dannypsnl/mini-theme.git#develop") (source_url . "https://github.com/dannypsnl/mini-theme.git#develop"))))))) ("minikanren" . #hasheq((author . "asumu@ccs.neu.edu jhemann@umail.iu.edu") (authors . ("asumu@ccs.neu.edu" "jhemann@umail.iu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "minikanren" "doc/minikanren@minikanren/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/minikanren.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/minikanren.txt"))) (checksum . "34ca4936f0df0ca07c5869ef95ed10f82b9a879f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "A Planet 2 package for minikanren") (implies . ()) (last-checked . 1632904182) (last-edit . 1358887007) (last-updated . 1632169688) (modules . ((lib "minikanren/minikanren.rkt") (lib "minikanren/minikanren.scrbl") (lib "minikanren/main.rkt"))) (name . "minikanren") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (author:jhemann@umail.iu.edu . #t) (logic . #t) (ring:1 . #t))) (source . "github://github.com/takikawa/minikanren/master") (tags . ("logic")) (versions . #hash((default . #hasheq((checksum . "34ca4936f0df0ca07c5869ef95ed10f82b9a879f") (source . "github://github.com/takikawa/minikanren/master") (source_url . "http://github.com/takikawa/minikanren/tree/master"))))))) ("minikanren-ee" . #hasheq((author . "michael.ballantyne@gmail.com") (authors . ("michael.ballantyne@gmail.com")) (build . #hash((conflicts-log . ("indirect" "conflicts.txt")) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/minikanren-ee.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/minikanren-ee.txt"))) (checksum . "6197816f2660c43acb7352bbbe1af2886d234aca") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1561146929) (dependencies . ("base" "rackunit-lib" ("ee-lib" #:version "1.0"))) (description . "An embedded expander wrapper around faster-minikanren, offering better error messages and some automatic program transformations") (implies . ()) (last-checked . 1632904182) (last-edit . 1628533044) (last-updated . 1629419231) (modules . ((lib "minikanren-ee/private/syntax-classes.rkt") (lib "minikanren-ee/main.rkt") (lib "minikanren-ee/private/compile.rkt") (lib "minikanren-ee/private/env-rep.rkt") (lib "minikanren-ee/test/oopsla-artifact/minikanren-macro.rkt") (lib "minikanren-ee/private/expand.rkt") (lib "minikanren-ee/core.rkt") (lib "minikanren-ee/private/forms.rkt") (lib "minikanren-ee/test/test1.rkt") (lib "minikanren-ee/test/oopsla-artifact/minikanren.rkt") (lib "minikanren-ee/mk/matche.rkt") (lib "minikanren-ee/mk/mk.rkt") (lib "minikanren-ee/test/test2.rkt") (lib "minikanren-ee/mk/numbers.rkt") (lib "minikanren-ee/private/runtime.rkt") (lib "minikanren-ee/mk/main.rkt") (lib "minikanren-ee/test/oopsla-artifact/minikanren-program-transformation.rkt") (lib "minikanren-ee/test/oopsla-artifact/minikanren-compile-time-errors.rkt") (lib "minikanren-ee/mk/simple-interp.rkt") (lib "minikanren-ee/mk/full-interp.rkt") (lib "minikanren-ee/private/interface-macros.rkt"))) (name . "minikanren-ee") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:no-tag: . #t) (author:michael.ballantyne@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/michaelballantyne/minikanren-ee.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6197816f2660c43acb7352bbbe1af2886d234aca") (source . "https://github.com/michaelballantyne/minikanren-ee.git") (source_url . "https://github.com/michaelballantyne/minikanren-ee.git"))) ("8.1" . #hasheq((checksum . "477b3d6969b7b001f5284487259745ee6b03f44d") (source . "https://github.com/michaelballantyne/minikanren-ee.git#pre-8.2.0.7") (source_url . "https://github.com/michaelballantyne/minikanren-ee.git#pre-8.2.0.7"))) ("8.2" . #hasheq((checksum . "477b3d6969b7b001f5284487259745ee6b03f44d") (source . "https://github.com/michaelballantyne/minikanren-ee.git#pre-8.2.0.7") (source_url . "https://github.com/michaelballantyne/minikanren-ee.git#pre-8.2.0.7"))) ("8.0" . #hasheq((checksum . "477b3d6969b7b001f5284487259745ee6b03f44d") (source . "https://github.com/michaelballantyne/minikanren-ee.git#pre-8.2.0.7") (source_url . "https://github.com/michaelballantyne/minikanren-ee.git#pre-8.2.0.7"))) ("7.9" . #hasheq((checksum . "477b3d6969b7b001f5284487259745ee6b03f44d") (source . "https://github.com/michaelballantyne/minikanren-ee.git#pre-8.2.0.7") (source_url . "https://github.com/michaelballantyne/minikanren-ee.git#pre-8.2.0.7"))) ("7.8" . #hasheq((checksum . "477b3d6969b7b001f5284487259745ee6b03f44d") (source . "https://github.com/michaelballantyne/minikanren-ee.git#pre-8.2.0.7") (source_url . "https://github.com/michaelballantyne/minikanren-ee.git#pre-8.2.0.7"))))))) ("minimal-doclang" . #hasheq((author . "") (authors . ()) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/minimal-doclang.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Package minimal-doclang is missing a required field: 'source\n  context...:\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (implies . ()) (last-checked . 1632904184) (last-edit . 1632906423) (last-updated . 1621814810) (modules . ()) (name . "minimal-doclang") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (ring:1 . #t))) (source . "") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "") (source_url . ""))))))) ("minipascal" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/minipascal.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/minipascal.txt"))) (checksum . "646c1cedefc3d269db43b9d186d892655d4efb78") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("ragg" "base" "parser-tools-lib" "base" "parser-tools-lib" "at-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "MiniPascal as a Racket language") (implies . ()) (last-checked . 1632904184) (last-edit . 1359470626) (last-updated . 1632666702) (modules . ((lib "minipascal/semantics-simple.rkt") (lib "minipascal/tests-medium/procedure-with-no-arguments.rkt") (lib "minipascal/tests-basic/negative-index-range.rkt") (lib "minipascal/tests-medium/procedure-with-two-arguments.rkt") (lib "minipascal/tests-basic/long-sum.rkt") (lib "minipascal/tests-medium/array-of-integer.rkt") (lib "minipascal/tests-basic/relational-operators.rkt") (lib "minipascal/tests-basic/fibonacci.rkt") (lib "minipascal/tests-medium/function-with-one-argument.rkt") (lib "minipascal/tests-basic/type-definitions2.rkt") (lib "minipascal/tests-fpc/fpc-test.rkt") (lib "minipascal/semantics.rkt") (lib "minipascal/compiler-simple.rkt") (lib "minipascal/compiler.rkt") (lib "minipascal/types.rkt") (lib "minipascal/experiments/terminal.rkt") (lib "minipascal/tests-medium/horner.rkt") (lib "minipascal/tests-basic/compound-statement.rkt") (lib "minipascal/lang/reader.rkt") (lib "minipascal/tests-basic/const-var-scope.rkt") (lib "minipascal/runtime.rkt") (lib "minipascal/tests-basic/gcd.rkt") (lib "minipascal/tests-medium/nested-functions.rkt") (lib "minipascal/tests-real/stackoverflow-primes.rkt") (lib "minipascal/tests-medium/strings.rkt") (lib "minipascal/tests-medium/array-with-char-index.rkt") (lib "minipascal/tests-real/primes.rkt") (lib "minipascal/tests-medium/hcf.rkt") (lib "minipascal/tests-medium/write-natural.rkt") (lib "minipascal/tests-basic/hello.rkt") (lib "minipascal/tests-basic/negative-constants.rkt") (lib "minipascal/tests-basic/arithmetic.rkt") (lib "minipascal/tests-basic/export-of-global-functions.rkt") (lib "minipascal/tests-medium/function-with-no-arguments.rkt") (lib "minipascal/tests-basic/lowhigh.rkt") (lib "minipascal/tests-basic/for-statement.rkt") (lib "minipascal/compiler-fpc.rkt") (lib "minipascal/tests-basic/type-definitions1.rkt") (lib "minipascal/tests-medium/array-of-char.rkt") (lib "minipascal/tests-basic/char.rkt") (lib "minipascal/tests-basic/constant-definitions.rkt") (lib "minipascal/tests-basic/boolean.rkt") (lib "minipascal/mini-pascal-grammar.rkt") (lib "minipascal/tests-basic/stdlib-chr.rkt") (lib "minipascal/tests-medium/function-with-two-arguments.rkt") (lib "minipascal/mini-pascal-lexer.rkt"))) (name . "minipascal") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (compiler . #t) (language . #t) (pascal . #t) (ring:1 . #t))) (source . "github://github.com/soegaard/minipascal/master") (tags . ("compiler" "language" "pascal")) (versions . #hash((default . #hasheq((checksum . "646c1cedefc3d269db43b9d186d892655d4efb78") (source . "github://github.com/soegaard/minipascal/master") (source_url . "http://github.com/soegaard/minipascal/tree/master"))))))) ("misc1" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "misc1" "doc/misc1@misc1/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/misc1.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/misc1.txt"))) (checksum . "92d66c9c2c5fefe4762acc221b69c5e716a6873d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "unstable-lib" "racket-doc" "unstable-lib" "unstable-doc" "scribble-lib")) (description . "Miscellaneous utilities collection.") (implies . ()) (last-checked . 1632904184) (last-edit . 1401802372) (last-updated . 1502816181) (modules . ((lib "misc1/dict.scrbl") (lib "misc1/syntax.scrbl") (lib "misc1/fast-channel.scrbl") (lib "misc1/misc1.scrbl") (lib "misc1/throw.scrbl") (lib "misc1/async.scrbl") (lib "misc1/syntax.rkt") (lib "misc1/locking.rkt") (lib "misc1/match.rkt") (lib "misc1/throw.rkt") (lib "misc1/dict.rkt") (lib "misc1/fast-channel.rkt") (lib "misc1/evt.scrbl") (lib "misc1/list.rkt") (lib "misc1/locking.scrbl") (lib "misc1/list.scrbl") (lib "misc1/async.rkt") (lib "misc1/evt.rkt") (lib "misc1/match.scrbl"))) (name . "misc1") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-misc1/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "92d66c9c2c5fefe4762acc221b69c5e716a6873d") (source . "github://github.com/mordae/racket-misc1/master") (source_url . "http://github.com/mordae/racket-misc1/tree/master"))))))) ("mischief" . #hasheq((author . "cce@racket-lang.org") (authors . ("cce@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mischief" "doc/mischief@mischief/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mischief.txt") (test-failure-log . "server/built/test-fail/mischief.txt") (test-success-log . #f))) (checksum . "c6f95a774b60950cabd7238e639f7e5f0d8737cd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "macro-debugger" "macro-debugger-text-lib" "pconvert-lib" "sandbox-lib" "scribble-lib" "srfi-lib" "srfi-lite-lib" "compatibility-doc" "data-doc" "racket-doc" "scribble-doc" "racket-index" "rackunit-gui" "rackunit-lib")) (description . "Mischief: A Racketeer's Toolkit") (implies . ()) (last-checked . 1632904184) (last-edit . 1365619321) (last-updated . 1537235893) (modules . ((lib "mischief/stylish.rkt") (lib "mischief/scope.rkt") (lib "mischief/symbol.rkt") (lib "mischief/scribblings/contract.scrbl") (lib "mischief/scribblings/modular.scrbl") (lib "mischief/values.rkt") (lib "mischief/define.rkt") (lib "mischief/string.rkt") (lib "mischief/scribblings/transform.scrbl") (lib "debug/syntax.rkt") (lib "mischief/stylish/print-style.rkt") (lib "mischief/sort.rkt") (lib "debug/racket/base.rkt") (lib "mischief/scribblings/metaprogramming.scrbl") (lib "mischief/module.rkt") (lib "mischief/stepper.rkt") (lib "mischief/error.rkt") (lib "mischief/stylish/expression.rkt") (lib "mischief/scribblings/metaprogramming-moderate.scrbl") (lib "mischief/keyword.rkt") (lib "debug/mischief.rkt") (lib "mischief/scribblings/metaprogramming-simple.scrbl") (lib "mischief/id-table.rkt") (lib "mischief/memoize.rkt") (lib "mischief/kernel-syntax.rkt") (lib "mischief/scribblings/printing.scrbl") (lib "mischief/scribblings/higher-order.scrbl") (lib "mischief/scribblings/id-table.scrbl") (lib "mischief/lang/config.rkt") (lib "debug/racket/base/lang/reader.rkt") (lib "mischief/scribblings/parse.scrbl") (lib "no-debug/racket/lang/reader.rkt") (lib "mischief/explode.rkt") (lib "mischief/match.rkt") (lib "mischief/scribblings/mischief.scrbl") (lib "mischief/fold.rkt") (lib "mischief/scribblings/examples.scrbl") (lib "mischief/function.rkt") (lib "mischief/contract.rkt") (lib "mischief/for.rkt") (lib "mischief/private/render-expression.rkt") (lib "mischief/preserve-expensive-metadata.rkt") (lib "mischief/scribblings/no-debug.scrbl") (lib "mischief/place.rkt") (lib "mischief/stylish/signatures.rkt") (lib "mischief/json.rkt") (lib "mischief/scribblings/fold.scrbl") (lib "mischief/scribblings/dye-pack.scrbl") (lib "mischief/scribblings/datatypes.scrbl") (lib "no-debug/main.rkt") (lib "mischief/transform.rkt") (lib "mischief/quotation.rkt") (lib "no-debug/racket/base.rkt") (lib "mischief/lang/runtime.rkt") (lib "no-debug/racket/base/lang/reader.rkt") (lib "mischief/scribblings/memoize.scrbl") (lib "debug/racket.rkt") (lib "mischief/examples.rkt") (lib "mischief/props/lang/reader.rkt") (lib "mischief/scribblings/typesetting.scrbl") (lib "mischief/scribblings/web.scrbl") (lib "mischief/scribblings/debug.scrbl") (lib "no-debug/syntax.rkt") (lib "mischief/scribblings/metaprogramming-complex.scrbl") (lib "mischief/scribblings/stylish.scrbl") (lib "mischief/scribblings/scope.scrbl") (lib "debug/main.rkt") (lib "mischief/web.rkt") (lib "mischief/scribblings/visitor.scrbl") (lib "mischief/scribblings/for.scrbl") (lib "mischief/parse.rkt") (lib "mischief/maybe.rkt") (lib "mischief/lang/reader.rkt") (lib "no-debug/low-level.rkt") (lib "debug/low-level.rkt") (lib "no-debug/mischief/lang/reader.rkt") (lib "mischief/stylish/expr-style.rkt") (lib "mischief/shorthand.rkt") (lib "mischief/scribblings/debugging.scrbl") (lib "mischief/discrim.rkt") (lib "mischief/require.rkt") (lib "mischief/list.rkt") (lib "no-debug/mischief.rkt") (lib "debug/mischief/lang/reader.rkt") (lib "mischief/visitor.rkt") (lib "mischief/private/reify-value.rkt") (lib "mischief/dye-pack.rkt") (lib "no-debug/racket.rkt") (lib "mischief/stylish/stylish.rkt") (lib "mischief/scribblings/kernel-syntax.scrbl") (lib "mischief/stylish/format.rkt") (lib "debug/racket/lang/reader.rkt") (lib "debug/provide.rkt") (lib "mischief/dict.rkt") (lib "mischief/struct.rkt") (lib "mischief/scribblings/bindings.scrbl") (lib "mischief/tests/stylish.rkt") (lib "mischief/stream.rkt") (lib "mischief/stylish/print.rkt") (lib "mischief/scribblings/function.scrbl") (lib "mischief/main.rkt") (lib "mischief/phrase.rkt") (lib "mischief/boolean.rkt"))) (name . "mischief") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:cce@racket-lang.org . #t) (data . #t) (debug . #t) (dev . #t) (documentation . #t) (language . #t) (ring:1 . #t) (syntax . #t))) (source . "github://github.com/carl-eastlund/mischief/stable") (tags . ("data" "debug" "dev" "documentation" "language" "syntax")) (versions . #hash((default . #hasheq((checksum . "c6f95a774b60950cabd7238e639f7e5f0d8737cd") (source . "github://github.com/carl-eastlund/mischief/stable") (source_url . "http://github.com/carl-eastlund/mischief/tree/stable"))))))) ("mischief-dev" . #hasheq((author . "cce@racket-lang.org") (authors . ("cce@racket-lang.org")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "mischief" "doc/mischief@mischief-dev/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mischief-dev.txt") (test-failure-log . "server/built/test-fail/mischief-dev.txt") (test-success-log . #f))) (checksum . "ce58c3170240f12297e2f98475f53c9514225825") (checksum-error . #f) (collection . (multi)) (conflicts . ("mischief")) (dependencies . ("base" "compatibility-lib" "macro-debugger" "macro-debugger-text-lib" "pconvert-lib" "sandbox-lib" "scribble-lib" "srfi-lib" "srfi-lite-lib" "compatibility-doc" "data-doc" "racket-doc" "scribble-doc" "racket-index" "rackunit-gui" "rackunit-lib")) (description . "Mischief: A Racketeer's Toolkit [development branch]") (implies . ()) (last-checked . 1632904184) (last-edit . 1365619456) (last-updated . 1537034394) (modules . ((lib "mischief/stylish.rkt") (lib "mischief/scope.rkt") (lib "mischief/symbol.rkt") (lib "mischief/scribblings/contract.scrbl") (lib "mischief/scribblings/modular.scrbl") (lib "mischief/values.rkt") (lib "mischief/define.rkt") (lib "mischief/string.rkt") (lib "mischief/scribblings/transform.scrbl") (lib "debug/syntax.rkt") (lib "mischief/stylish/print-style.rkt") (lib "mischief/sort.rkt") (lib "debug/racket/base.rkt") (lib "mischief/scribblings/metaprogramming.scrbl") (lib "mischief/module.rkt") (lib "mischief/stepper.rkt") (lib "mischief/error.rkt") (lib "mischief/stylish/expression.rkt") (lib "mischief/scribblings/metaprogramming-moderate.scrbl") (lib "mischief/keyword.rkt") (lib "debug/mischief.rkt") (lib "mischief/scribblings/metaprogramming-simple.scrbl") (lib "mischief/id-table.rkt") (lib "mischief/memoize.rkt") (lib "mischief/kernel-syntax.rkt") (lib "mischief/scribblings/printing.scrbl") (lib "mischief/scribblings/higher-order.scrbl") (lib "mischief/scribblings/id-table.scrbl") (lib "mischief/lang/config.rkt") (lib "debug/racket/base/lang/reader.rkt") (lib "mischief/scribblings/parse.scrbl") (lib "no-debug/racket/lang/reader.rkt") (lib "mischief/explode.rkt") (lib "mischief/match.rkt") (lib "mischief/scribblings/mischief.scrbl") (lib "mischief/fold.rkt") (lib "mischief/scribblings/examples.scrbl") (lib "mischief/function.rkt") (lib "mischief/contract.rkt") (lib "mischief/for.rkt") (lib "mischief/private/render-expression.rkt") (lib "mischief/preserve-expensive-metadata.rkt") (lib "mischief/scribblings/no-debug.scrbl") (lib "mischief/place.rkt") (lib "mischief/stylish/signatures.rkt") (lib "mischief/json.rkt") (lib "mischief/scribblings/fold.scrbl") (lib "mischief/scribblings/dye-pack.scrbl") (lib "mischief/scribblings/datatypes.scrbl") (lib "no-debug/main.rkt") (lib "mischief/transform.rkt") (lib "mischief/quotation.rkt") (lib "no-debug/racket/base.rkt") (lib "mischief/lang/runtime.rkt") (lib "no-debug/racket/base/lang/reader.rkt") (lib "mischief/scribblings/memoize.scrbl") (lib "debug/racket.rkt") (lib "mischief/examples.rkt") (lib "mischief/props/lang/reader.rkt") (lib "mischief/scribblings/typesetting.scrbl") (lib "mischief/scribblings/web.scrbl") (lib "mischief/scribblings/debug.scrbl") (lib "no-debug/syntax.rkt") (lib "mischief/scribblings/metaprogramming-complex.scrbl") (lib "mischief/scribblings/stylish.scrbl") (lib "mischief/scribblings/scope.scrbl") (lib "debug/main.rkt") (lib "mischief/web.rkt") (lib "mischief/scribblings/visitor.scrbl") (lib "mischief/scribblings/for.scrbl") (lib "mischief/parse.rkt") (lib "mischief/maybe.rkt") (lib "mischief/lang/reader.rkt") (lib "no-debug/low-level.rkt") (lib "debug/low-level.rkt") (lib "no-debug/mischief/lang/reader.rkt") (lib "mischief/stylish/expr-style.rkt") (lib "mischief/shorthand.rkt") (lib "mischief/scribblings/debugging.scrbl") (lib "mischief/discrim.rkt") (lib "mischief/require.rkt") (lib "mischief/list.rkt") (lib "no-debug/mischief.rkt") (lib "debug/mischief/lang/reader.rkt") (lib "mischief/visitor.rkt") (lib "mischief/private/reify-value.rkt") (lib "mischief/dye-pack.rkt") (lib "no-debug/racket.rkt") (lib "mischief/stylish/stylish.rkt") (lib "mischief/scribblings/kernel-syntax.scrbl") (lib "mischief/stylish/format.rkt") (lib "debug/racket/lang/reader.rkt") (lib "debug/provide.rkt") (lib "mischief/dict.rkt") (lib "mischief/struct.rkt") (lib "mischief/scribblings/bindings.scrbl") (lib "mischief/tests/stylish.rkt") (lib "mischief/stream.rkt") (lib "mischief/stylish/print.rkt") (lib "mischief/scribblings/function.scrbl") (lib "mischief/main.rkt") (lib "mischief/phrase.rkt") (lib "mischief/boolean.rkt"))) (name . "mischief-dev") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (author:cce@racket-lang.org . #t) (data . #t) (debug . #t) (dev . #t) (documentation . #t) (language . #t) (ring:2 . #t) (syntax . #t))) (source . "github://github.com/carl-eastlund/mischief/master") (tags . ("data" "debug" "dev" "documentation" "language" "syntax")) (versions . #hash((default . #hasheq((checksum . "ce58c3170240f12297e2f98475f53c9514225825") (source . "github://github.com/carl-eastlund/mischief/master") (source_url . "http://github.com/carl-eastlund/mischief/tree/master"))))))) ("mixfix" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mixfix" "doc/mixfix@mixfix/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mixfix.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mixfix.txt"))) (checksum . "db91d60448adbce889d3c85dd7553274f8db971a") (checksum-error . #f) (collection . "mixfix") (conflicts . ()) (date-added . 1615496468) (dependencies . ("base" "rackunit-doc" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Mixfix for Racket") (implies . ()) (last-checked . 1632904184) (last-edit . 1615496468) (last-updated . 1616082352) (modules . ((lib "mixfix/tests/partial-expansion.rkt") (lib "mixfix/tests/macro-precedence.rkt") (lib "mixfix/main.rkt") (lib "mixfix/scribblings/mixfix.scrbl") (lib "mixfix/tests/id-macro-head.rkt") (lib "mixfix/tests/scope.rkt") (lib "mixfix/tests/import-order.rkt") (lib "mixfix/tests/form.rkt"))) (name . "mixfix") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (mixfix . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/mixfix.git") (tags . ("mixfix")) (versions . #hash((default . #hasheq((checksum . "db91d60448adbce889d3c85dd7553274f8db971a") (source . "https://github.com/sorawee/mixfix.git") (source_url . "https://github.com/sorawee/mixfix.git"))))))) ("mk" . #hasheq((author . "mvc@iu.edu") (authors . ("mvc@iu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/mk.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/.git\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (date-added . 1575410721) (dependencies . ()) (description . "") (implies . ()) (last-checked . 1632904185) (last-edit . 1575410721) (last-updated . 1621814811) (modules . ()) (name . "mk") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (author:mvc@iu.edu . #t) (miniKanren . #t) (ring:1 . #t))) (source . "https://github.com/.git") (tags . ("miniKanren")) (versions . #hash((default . #hasheq((checksum . "") (source . "https://github.com/.git") (source_url . "https://github.com/.git"))))))) ("mm" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mm.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mm.txt"))) (checksum . "9b733818036f340181cb5f5d5083e481f4709cd9") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "gui-lib" "data-lib" "rackunit-chk")) (description . "an environment for exploring memory management") (implies . ()) (last-checked . 1632904185) (last-edit . 1385068728) (last-updated . 1502816182) (modules . ((lib "mm/tests/collectors/mark-and-sweep.rkt") (lib "mm/compiler.rkt") (lib "mm/runtime.rkt") (lib "mm/tests/all.rkt") (lib "mm/tests/suite.rkt") (lib "mm/heap.rkt") (lib "mm/tests/collectors/stop-and-copy.rkt") (lib "mm/main.rkt") (lib "mm/collector.rkt") (lib "mm/tests/collectors/infinite.rkt") (lib "mm/tests/collectors/generic-ms.rkt") (lib "mm/heap-gui.rkt") (lib "mm/id-table.rkt") (lib "mm/ast.rkt"))) (name . "mm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (textbook . #t))) (source . "git://github.com/jeapostrophe/mm") (tags . ("textbook")) (versions . #hash((default . #hasheq((checksum . "9b733818036f340181cb5f5d5083e481f4709cd9") (source . "git://github.com/jeapostrophe/mm") (source_url . "http://github.com/jeapostrophe/mm/tree/master"))))))) ("mmap" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mmap.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mmap.txt"))) (checksum . "8ead18bc73fa629ae352471c63a7b0847b18fb3f") (checksum-error . #f) (collection . "mmap") (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Wrapper for the system mmap() function") (implies . ()) (last-checked . 1632904185) (last-edit . 1503521896) (last-updated . 1609713154) (modules . ((lib "mmap/main.rkt"))) (name . "mmap") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (mmap . #t) (process . #t) (ring:1 . #t))) (source . "git://github.com/samth/mmap") (tags . ("mmap" "process")) (versions . #hash((default . #hasheq((checksum . "8ead18bc73fa629ae352471c63a7b0847b18fb3f") (source . "git://github.com/samth/mmap") (source_url . "http://github.com/samth/mmap/tree/master"))))))) ("mobilpay" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mobilpay.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mobilpay.txt"))) (checksum . "0c75ab1a28c834035fb1d661e3e0390338b9f34a") (checksum-error . #f) (collection . "mobilpay") (conflicts . ()) (date-added . 1561027335) (dependencies . ("base" "crypto-lib" "gregor-lib" "rackunit-lib")) (description . "A barebones implementation of mobilpay's credit card ordering interface in Racket.") (implies . ()) (last-checked . 1632904185) (last-edit . 1561027335) (last-updated . 1561634045) (modules . ((lib "mobilpay/main.rkt"))) (name . "mobilpay") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (payment-gateway . #t) (payments . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/mobilpay.git") (tags . ("payment-gateway" "payments" "web")) (versions . #hash((default . #hasheq((checksum . "0c75ab1a28c834035fb1d661e3e0390338b9f34a") (source . "https://github.com/Bogdanp/mobilpay.git") (source_url . "https://github.com/Bogdanp/mobilpay.git"))))))) ("mock" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mock" "doc/mock@mock/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mock.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mock.txt"))) (checksum . "5e8e2a1dd125e5e437510c87dabf903d0ec25749") (checksum-error . #f) (collection . "mock") (conflicts . ()) (dependencies . ("arguments" ("base" #:version "6.4") "fancy-app" "reprovide-lang" "racket-doc" "scribble-lib" "sweet-exp")) (description . "A library for creating test mocks") (implies . ("arguments")) (last-checked . 1632904186) (last-edit . 1500077019) (last-updated . 1603438946) (modules . ((lib "mock/private/util.rkt") (lib "mock/private/base.rkt") (lib "mock/private/syntax.scrbl") (lib "mock/private/history.rkt") (lib "mock/private/syntax-param.rkt") (lib "mock/private/function.scrbl") (lib "mock/private/stub.scrbl") (lib "mock/private/syntax-util.rkt") (lib "mock/main.scrbl") (lib "mock/private/opaque.scrbl") (lib "mock/private/syntax-test.rkt") (lib "mock/private/base.scrbl") (lib "mock/private/syntax.rkt") (lib "mock/private/reference.scrbl") (lib "mock/private/function.rkt") (lib "mock/private/not-implemented.rkt") (lib "mock/private/util-doc.rkt") (lib "mock/private/opaque.rkt") (lib "mock/private/stub.rkt") (lib "mock/private/history.scrbl") (lib "mock/private/guide.scrbl") (lib "mock/private/stub-class.rkt") (lib "mock/private/syntax-class.rkt") (lib "mock/main.rkt"))) (name . "mock") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (mock . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/jackfirth/racket-mock?path=mock") (tags . ("mock" "testing")) (versions . #hash((default . #hasheq((checksum . "5e8e2a1dd125e5e437510c87dabf903d0ec25749") (source . "git://github.com/jackfirth/racket-mock?path=mock") (source_url . "http://github.com/jackfirth/racket-mock/tree/master?path=mock"))))))) ("mock-rackunit" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mock-rackunit" "doc/mock-rackunit@mock-rackunit/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mock-rackunit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mock-rackunit.txt"))) (checksum . "5e8e2a1dd125e5e437510c87dabf903d0ec25749") (checksum-error . #f) (collection . "mock") (conflicts . ()) (dependencies . (("base" #:version "6.4") ("mock" #:version "2.0") "rackunit-lib" "racket-doc" "rackunit-doc" "scribble-lib" "sweet-exp")) (description . "RackUnit checks for testing with mocks from the mock package") (implies . ()) (last-checked . 1632904186) (last-edit . 1469662289) (last-updated . 1603438946) (modules . ((lib "mock/rackunit.scrbl") (lib "mock/rackunit.rkt"))) (name . "mock-rackunit") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (mock . #t) (rackunit . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/jackfirth/racket-mock?path=mock-rackunit") (tags . ("mock" "rackunit" "testing")) (versions . #hash((default . #hasheq((checksum . "5e8e2a1dd125e5e437510c87dabf903d0ec25749") (source . "git://github.com/jackfirth/racket-mock?path=mock-rackunit") (source_url . "http://github.com/jackfirth/racket-mock/tree/master?path=mock-rackunit"))))))) ("mockfighter" . #hasheq((author . "euler90h@gmail.com") (authors . ("euler90h@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/mockfighter.txt") (docs . (("main" "mockfighter" "doc/mockfighter@mockfighter/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mockfighter.txt") (test-failure-log . "server/built/test-fail/mockfighter.txt") (test-success-log . #f))) (checksum . "63906eff874e90644725dbff5365889d959e2294") (checksum-error . #f) (collection . "mockfighter") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "stockfighter-racket" "scribble-lib" "racket-doc")) (description . "Stockfighter-like API for a limit order exchange") (implies . ()) (last-checked . 1632904186) (last-edit . 1450936598) (last-updated . 1502816182) (modules . ((lib "mockfighter/utils.rkt") (lib "mockfighter/mm.rkt") (lib "mockfighter/server.rkt") (lib "mockfighter/main.rkt") (lib "mockfighter/server-test.rkt") (lib "mockfighter/venue.rkt") (lib "mockfighter/scribblings/mockfighter.scrbl") (lib "mockfighter/matching-engine.rkt") (lib "mockfighter/websocket-test.rkt") (lib "mockfighter/noise-trader.rkt") (lib "mockfighter/game-master.rkt") (lib "mockfighter/orderbook.rkt") (lib "mockfighter/retail-trader.rkt"))) (name . "mockfighter") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:euler90h@gmail.com . #t) (finance . #t) (ring:1 . #t) (stockfighter . #t))) (source . "git://github.com/eu90h/mockfighter") (tags . ("finance" "stockfighter")) (versions . #hash((default . #hasheq((checksum . "63906eff874e90644725dbff5365889d959e2294") (source . "git://github.com/eu90h/mockfighter") (source_url . "http://github.com/eu90h/mockfighter/tree/master"))))))) ("mode-lambda" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mode-lambda" "doc/mode-lambda@mode-lambda/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mode-lambda.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mode-lambda.txt"))) (checksum . "64b5ae81f457ded7664458cd9935ce7d3ebfc449") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("gui-lib" "scheme-lib" "web-server-lib" "lux" "reprovide-lang-lib" "base" "srfi-lite-lib" "draw-lib" "opengl" "htdp-lib" "pict-lib" "draw-lib" "draw-doc" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "2d sprite-based graphics engine") (implies . ()) (last-checked . 1632904186) (last-edit . 1431992260) (last-updated . 1574987530) (modules . ((lib "mode-lambda/korf-bin.rkt") (lib "mode-lambda/text/static.rkt") (lib "mode-lambda/examples/quick.rkt") (lib "mode-lambda/examples/text.rkt") (lib "mode-lambda/util.rkt") (lib "mode-lambda/backend/software.rkt") (lib "mode-lambda/examples/transparency/open-gl-issue.rkt") (lib "mode-lambda/backend/software/2d-hash.rkt") (lib "mode-lambda/backend/gl.rkt") (lib "mode-lambda/examples/jens.rkt") (lib "mode-lambda/sprite-index.rkt") (lib "mode-lambda/scribblings/mode-lambda.scrbl") (lib "mode-lambda/backend/lib.rkt") (lib "mode-lambda/backend/gl/util.rkt") (lib "mode-lambda/examples/one.rkt") (lib "mode-lambda/color.rkt") (lib "mode-lambda/main.rkt") (lib "mode-lambda/static.rkt") (lib "mode-lambda/scribblings/backend-gl.scrbl") (lib "mode-lambda/shot.rkt") (lib "mode-lambda/scribblings/backend-software.scrbl") (lib "mode-lambda/text/runtime.rkt") (lib "mode-lambda/text.rkt") (lib "mode-lambda/core.rkt"))) (name . "mode-lambda") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (OpenGL . #t) (author:jay.mccarthy@gmail.com . #t) (graphics . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/mode-lambda") (tags . ("graphics" "OpenGL")) (versions . #hash((default . #hasheq((checksum . "64b5ae81f457ded7664458cd9935ce7d3ebfc449") (source . "git://github.com/jeapostrophe/mode-lambda") (source_url . "http://github.com/jeapostrophe/mode-lambda/tree/master"))))))) ("molis-hai" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "molis-hai" "doc/molis-hai@molis-hai/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/molis-hai.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/molis-hai.txt"))) (checksum . "6a335ec73c144f9d8ac538752ca8e6fd0b3b3cce") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "typed-racket-lib" "typed-racket-more" "web-server-lib" "pfds" "rackunit-lib" "racket-doc")) (description . "This package includes the code associated with my Dickens-based (or any-corpus-based) password generator, Molis Hai. See also http://www.brinckerhoff.org/molis-hai/pwgen.html") (implies . ()) (last-checked . 1632904186) (last-edit . 1429738549) (last-updated . 1549845730) (modules . ((lib "molis-hai/json-read-write.rkt") (lib "molis-hai/paper/pr-slides.rkt") (lib "molis-hai/word-frequency.rkt") (lib "molis-hai/pw-chars.rkt") (lib "molis-hai/soups-paper/pr-slides.rkt") (lib "molis-hai/huffman-encode-decode.rkt") (lib "molis-hai/huffman.rkt") (lib "molis-hai/experimental/unicode-scrub-lib.rkt") (lib "molis-hai/experimental/extract-crime-and-punishment-text.rkt") (lib "molis-hai/model-comparison.rkt") (lib "molis-hai/user-study-2016/log-analysis.rkt") (lib "molis-hai/js-model/generate-pages.rkt") (lib "molis-hai/experimental/enumeration.rkt") (lib "molis-hai/example-model.rkt") (lib "molis-hai/user-study-2016/delayed-recall.rkt") (lib "molis-hai/user-study-2016/levenshtein-words-paths.rkt") (lib "molis-hai/user-study-2016/string-editing.rkt") (lib "molis-hai/use-model.rkt") (lib "molis-hai/word-model.rkt") (lib "molis-hai/user-study-2016/example-passwords.rkt") (lib "molis-hai/letter-frequency.rkt") (lib "molis-hai/pronounce3.rkt") (lib "molis-hai/user-study-2016/fingerprints.rkt") (lib "molis-hai/molis-hai.scrbl") (lib "molis-hai/cmd-line.rkt") (lib "molis-hai/inverse-mapping.rkt") (lib "molis-hai/user-study-2016/anonymize-log.rkt") (lib "molis-hai/shared-types.rkt") (lib "molis-hai/char-model.rkt") (lib "molis-hai/paper/bib.rkt") (lib "molis-hai/user-study-2016/levenshtein-paths.rkt") (lib "molis-hai/paper/paper.scrbl") (lib "molis-hai/soups-paper/bib.rkt") (lib "molis-hai/user-study-2016/table.rkt") (lib "molis-hai/random-bits.rkt") (lib "molis-hai/user-study-2016/research-protocol.scrbl") (lib "molis-hai/user-study-2016/pre-registration.scrbl") (lib "molis-hai/experimental/unicode-scrub.rkt") (lib "molis-hai/build-model.rkt") (lib "molis-hai/random-password.rkt") (lib "molis-hai/user-study-2016/best-fit.rkt") (lib "molis-hai/huffman-convert.rkt") (lib "molis-hai/soups-paper/paper.scrbl") (lib "molis-hai/experimental/sent-email-text-extraction.rkt"))) (name . "molis-hai") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (Dickens . #t) (author:clements@racket-lang.org . #t) (ring:1 . #t) (security . #t))) (source . "git://github.com/jbclements/molis-hai/") (tags . ("Dickens" "security")) (versions . #hash((default . #hasheq((checksum . "6a335ec73c144f9d8ac538752ca8e6fd0b3b3cce") (source . "git://github.com/jbclements/molis-hai/") (source_url . "git://github.com/jbclements/molis-hai/"))))))) ("monad" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/monad.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/monad.txt"))) (checksum . "e61a1b940cac3e85a0408d4463c9324bb3615413") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "A generic/polymorphic monad library for Racket.") (implies . ()) (last-checked . 1632904187) (last-edit . 1443058483) (last-updated . 1502816184) (modules . ((lib "monad/io.rkt") (lib "monad/state.rkt") (lib "monad/examples/example.rkt") (lib "monad/main.rkt"))) (name . "monad") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (io . #t) (monad . #t) (ring:1 . #t))) (source . "github://github.com/tonyg/racket-monad/master") (tags . ("io" "monad")) (versions . #hash((default . #hasheq((checksum . "e61a1b940cac3e85a0408d4463c9324bb3615413") (source . "github://github.com/tonyg/racket-monad/master") (source_url . "http://github.com/tonyg/racket-monad/tree/master"))))))) ("mongodb" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mongodb" "doc/mongodb@mongodb/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mongodb.txt") (test-failure-log . "server/built/test-fail/mongodb.txt") (test-success-log . #f))) (checksum . "4fbeb1a577ff9a1b8274045a5741d6670d555ac7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.15") "web-server-lib" "srfi-lite-lib" "eli-tester" "racket-doc" "scribble-lib" "srfi-doc" "web-server-doc")) (description . "A native Racket interface to MongoDB & BSON") (implies . ()) (last-checked . 1632904187) (last-edit . 1353196115) (last-updated . 1587136195) (modules . ((lib "tests/db/mongodb/basic.rkt") (lib "net/bson/binio.rkt") (lib "tests/db/mongodb/wire.rkt") (lib "tests/net/bson.rkt") (lib "net/bson/write.rkt") (lib "db/mongodb/wire/driver.rkt") (lib "db/mongodb/orm/struct.rkt") (lib "net/bson.rkt") (lib "db/mongodb/orm/dict.rkt") (lib "net/bson/shared.rkt") (lib "db/mongodb.rkt") (lib "tests/db/mongodb/orm.rkt") (lib "net/bson/mapping.rkt") (lib "db/mongodb/basic/main.rkt") (lib "net/bson/read.rkt") (lib "db/mongodb/basic/driver.rkt") (lib "tests/db/mongodb/quick-start.rkt") (lib "db/mongodb/orm/main.rkt") (lib "net/bson/driver.rkt") (lib "db/mongodb/wire/format.rkt") (lib "db/mongodb/seq.rkt") (lib "db/mongodb/mongodb.scrbl") (lib "db/mongodb/wire/main.rkt") (lib "web-server/dispatch/mongodb.rkt") (lib "tests/db/mongodb/util.rkt"))) (name . "mongodb") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (db . #t) (net . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/mongodb/master") (tags . ("db" "net")) (versions . #hash((default . #hasheq((checksum . "4fbeb1a577ff9a1b8274045a5741d6670d555ac7") (source . "github://github.com/jeapostrophe/mongodb/master") (source_url . "http://github.com/jeapostrophe/mongodb/tree/master"))) ("6.2.1" . #hasheq((checksum . "76b8b080be58e2f641b8bda12c6d08ebcff803a8") (source . "git://github.com/jeapostrophe/mongodb#76b8b080be58e2f641b8bda12c6d08ebcff803a8") (source_url . "http://github.com/jeapostrophe/mongodb/tree/master#76b8b080be58e2f641b8bda12c6d08ebcff803a8"))))))) ("monitors" . #hasheq((author . "samc@ccs.neu.edu") (authors . ("samc@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "monitors" "doc/monitors@monitors/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/monitors.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/monitors.txt"))) (checksum . "928a1b27b15ad46eb0f715b3bccfe06b437edf30") (checksum-error . #f) (collection . "monitors") (conflicts . ()) (dependencies . ("base" "data-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Java style monitors for Racket objects") (implies . ()) (last-checked . 1632904187) (last-edit . 1502996613) (last-updated . 1503002347) (modules . ((lib "monitors/main.rkt") (lib "monitors/monitor.rkt") (lib "monitors/scribblings/monitors.scrbl"))) (name . "monitors") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samc@ccs.neu.edu . #t) (concurrency . #t) (ring:1 . #t))) (source . "git://github.com/howell/monitors") (tags . ("concurrency")) (versions . #hash((default . #hasheq((checksum . "928a1b27b15ad46eb0f715b3bccfe06b437edf30") (source . "git://github.com/howell/monitors") (source_url . "http://github.com/howell/monitors/tree/master"))))))) ("monotonic" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "monotonic" "doc/monotonic@monotonic/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/monotonic.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/monotonic.txt"))) (checksum . "4d2271f47d3c40e121afec4afc37de8adb4cf773") (checksum-error . #f) (collection . "monotonic") (conflicts . ()) (date-added . 1581537372) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Monotonic time for Racket.") (implies . ()) (last-checked . 1632904187) (last-edit . 1581537372) (last-updated . 1603356234) (modules . ((lib "monotonic/monotonic.scrbl") (lib "monotonic/windows.rkt") (lib "monotonic/posix.rkt") (lib "monotonic/cs.rkt") (lib "monotonic/main.rkt") (lib "monotonic/macos.rkt"))) (name . "monotonic") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (clock . #t) (monotonic . #t) (ring:1 . #t) (time . #t))) (source . "https://github.com/Bogdanp/racket-monotonic.git") (tags . ("clock" "monotonic" "time")) (versions . #hash((default . #hasheq((checksum . "4d2271f47d3c40e121afec4afc37de8adb4cf773") (source . "https://github.com/Bogdanp/racket-monotonic.git") (source_url . "https://github.com/Bogdanp/racket-monotonic.git"))))))) ("mordae" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mordae.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mordae.txt"))) (checksum . "01d86a7453241f438b01a37f991a28feeb43df8e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "racket-doc" "typed-racket-lib")) (description . "Personal utilities, do not use directly!") (implies . ()) (last-checked . 1632904188) (last-edit . 1438605357) (last-updated . 1502816185) (modules . ((lib "mordae/syntax.rkt") (lib "mordae/match.rkt") (lib "mordae/async.rkt") (lib "mordae/evt.rkt"))) (name . "mordae") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "git://github.com/mordae/racket-mordae") (tags . ()) (versions . #hash((default . #hasheq((checksum . "01d86a7453241f438b01a37f991a28feeb43df8e") (source . "git://github.com/mordae/racket-mordae") (source_url . "http://github.com/mordae/racket-mordae/tree/master"))))))) ("morsel-doc" . #hasheq((author . "default.kramer@gmail.com") (authors . ("default.kramer@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "morsel" "doc/morsel@morsel-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/morsel-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/morsel-doc.txt"))) (checksum . "10cf376f07755f066cbbfc2d242c104f103b33da") (checksum-error . #f) (collection . "morsel-doc") (conflicts . ()) (date-added . 1578075083) (dependencies . ("base" "morsel-lib" "scribble-lib" "racket-doc" "doc-coverage")) (description . "documentation for morsel-lib") (implies . ()) (last-checked . 1632904188) (last-edit . 1578075226) (last-updated . 1592795745) (modules . ((lib "morsel-doc/racket.rkt") (lib "morsel-doc/doc-coverage.rkt") (lib "morsel-doc/morsel.scrbl"))) (name . "morsel-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:default.kramer@gmail.com . #t) (ring:1 . #t) (tests . #t))) (source . "https://github.com/default-kramer/morsel.git?path=morsel-doc") (tags . ("tests")) (versions . #hash((default . #hasheq((checksum . "10cf376f07755f066cbbfc2d242c104f103b33da") (source . "https://github.com/default-kramer/morsel.git?path=morsel-doc") (source_url . "https://github.com/default-kramer/morsel.git?path=morsel-doc"))))))) ("morsel-lib" . #hasheq((author . "default.kramer@gmail.com") (authors . ("default.kramer@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/morsel-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/morsel-lib.txt"))) (checksum . "10cf376f07755f066cbbfc2d242c104f103b33da") (checksum-error . #f) (collection . "morsel-lib") (conflicts . ()) (date-added . 1578074967) (dependencies . ("base" "rackunit-lib")) (description . "core of Plisqin") (implies . ()) (last-checked . 1632904189) (last-edit . 1578074967) (last-updated . 1592795746) (modules . ((lib "morsel-lib/private/essence/pass-injections.rkt") (lib "morsel-lib/private/sql/clauses.rkt") (lib "morsel-lib/private/sql/sql-token.rkt") (lib "morsel-lib/main.rkt") (lib "morsel-lib/private/essence/pass.rkt") (lib "morsel-lib/private/essence/pass-targeted-joins.rkt") (lib "morsel-lib/private/util.rkt") (lib "morsel-lib/sql.rkt") (lib "morsel-lib/private/essence/pass-join-on-joins.rkt") (lib "morsel-lib/private/essence/from.rkt") (lib "morsel-lib/private/sql/dialect.rkt") (lib "morsel-lib/private/essence/model.rkt") (lib "morsel-lib/private/sql/render.rkt") (lib "morsel-lib/private/_essence.rkt") (lib "morsel-lib/private/sql/to-sql.rkt") (lib "morsel-lib/private/essence/base-query-printer.rkt") (lib "morsel-lib/private/essence/content.rkt") (lib "morsel-lib/sql/dialect.rkt"))) (name . "morsel-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:default.kramer@gmail.com . #t) (db . #t) (ring:1 . #t) (sql . #t) (tabular . #t))) (source . "https://github.com/default-kramer/morsel.git?path=morsel-lib") (tags . ("db" "sql" "tabular")) (versions . #hash((default . #hasheq((checksum . "10cf376f07755f066cbbfc2d242c104f103b33da") (source . "https://github.com/default-kramer/morsel.git?path=morsel-lib") (source_url . "https://github.com/default-kramer/morsel.git?path=morsel-lib"))))))) ("mosquitto-ffi" . #hasheq((author . "bartbes+racket@gmail.com") (authors . ("bartbes+racket@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mosquitto-ffi.txt") (test-failure-log . "server/built/test-fail/mosquitto-ffi.txt") (test-success-log . #f))) (checksum . "03b969b3f8806f7cfeb31b281981628fe8e2ca8b") (checksum-error . #f) (collection . "mosquitto") (conflicts . ()) (dependencies . ("base")) (description . "An FFI binding of libmosquitto for racket") (implies . ()) (last-checked . 1632904189) (last-edit . 1425477234) (last-updated . 1502816185) (modules . ((lib "mosquitto/main.rkt") (lib "mosquitto/api.rkt"))) (name . "mosquitto-ffi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bartbes+racket@gmail.com . #t) (ffi . #t) (mosquitto . #t) (ring:1 . #t))) (source . "git://github.com/bartbes/mosquitto-racket") (tags . ("ffi" "mosquitto")) (versions . #hash((default . #hasheq((checksum . "03b969b3f8806f7cfeb31b281981628fe8e2ca8b") (source . "git://github.com/bartbes/mosquitto-racket") (source_url . "http://github.com/bartbes/mosquitto-racket/tree/master"))))))) ("mox" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "mox"))) (failure-log . "server/built/fail/mox.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "2d7fd6945e4d3eeec076be759f966b0deeb85a3d") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (date-added . 1603469404) (dependencies . ("base" "digimon" "w3s" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc" "typed-racket-doc" "digimon" "graphics")) (description . "Open XML for Microsoft Office") (implies . ()) (last-checked . 1632904189) (last-edit . 1603469404) (last-updated . 1626701544) (modules . ((lib "mox/digitama/moxml.rkt") (lib "mox/tamer/docx.rkt") (lib "mox/xlsx.rkt") (lib "mox/digitama/scribble/docx/datatype.rkt") (lib "mox/digitama/scribble/docx/app.rkt") (lib "mox/digitama/scribble/package/content.type.rkt") (lib "mox/tamer/scribble/docx.scrbl") (lib "mox/digitama/scribble/package/xmlns.rkt") (lib "mox/digitama/drawing/moxml.rkt") (lib "mox/digivice/iana.rkt") (lib "mox/digitama/scribble/package/standards.rkt") (lib "mox/digitama/scribble/package/relationship.rkt") (lib "mox/digitama/scribble/package/core.rkt") (lib "mox/digitama/scribble/shared/scribble.rkt") (lib "mox/digitama/shared/moxml.rkt") (lib "mox/digitama/css/datatype.rkt") (lib "mox/docx-render.rkt") (lib "mox/digitama/scribble/package/partname.rkt") (lib "mox/digitama/scribble/docx/story/document.rkt") (lib "mox/digitama/scribble/docx/metainfo.rkt") (lib "mox/tamer/theme.rkt") (lib "mox/digivice/devimon/format/docx.rkt") (lib "mox/tamer/StormEvents.rkt") (lib "mox/digitama/xlsx/moxml.rkt") (lib "mox/digitama/scribble/shared/render.rkt") (lib "mox/digitama/scribble/docx/misc.rkt") (lib "mox/digitama/package.rkt") (lib "mox/tamer/ooxml.rkt") (lib "mox/docx.rkt") (lib "mox/digitama/scribble/shared/typed/scribble.rkt") (lib "mox/digitama/scribble/docx.rkt") (lib "mox/digivice/devimon.rkt") (lib "mox/digitama/docx/moxml.rkt") (lib "mox/digitama/scribble/docx/style.rkt") (lib "mox/digitama/shared/property.rkt") (lib "mox/scribble.rkt") (lib "mox/tamer/mox.scrbl") (lib "mox/tamer/recognizer.rkt") (lib "mox/digitama/scribble/docx/package.rkt") (lib "mox/digivice/devimon/format.rkt") (lib "mox/digitama/drawing/theme.rkt"))) (name . "mox") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:juzhenliang@gmail.com . #t) (office . #t) (ring:1 . #t) (typed-racket . #t) (unstable . #t) (xml . #t))) (source . "https://github.com/wargrey/mox.git") (tags . ("office" "typed-racket" "unstable" "xml")) (versions . #hash((default . #hasheq((checksum . "2d7fd6945e4d3eeec076be759f966b0deeb85a3d") (source . "https://github.com/wargrey/mox.git") (source_url . "https://github.com/wargrey/mox.git"))))))) ("mred-designer" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mred-designer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mred-designer.txt"))) (checksum . "f88e45905dc0fcb13fa327d9b39a47444384921e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "gui-lib" "net-lib" "planet-lib" "rackunit-lib")) (description . "A WYSIWYG GUI generator for Racket") (implies . ()) (last-checked . 1632904189) (last-edit . 1506853991) (last-updated . 1620311140) (modules . ((lib "mred-designer/widgets/choice/widget.rkt") (lib "mred-designer/main.rkt") (lib "mred-designer/widgets/canvas/widget.rkt") (lib "mred-designer/property-widgets.rkt") (lib "mred-designer/property-frame.rkt") (lib "mred-designer/widgets/menu-item/widget.rkt") (lib "mred-designer/code-generation.rkt") (lib "mred-designer/widgets/radio-box/widget.rkt") (lib "mred-designer/widgets/horizontal-pane/widget.rkt") (lib "mred-designer/tests/mred-designer.rkt") (lib "mred-designer/edit-list.rkt") (lib "mred-designer/widgets/project/preview.rkt") (lib "mred-designer/mred-id.rkt") (lib "mred-designer/mred-plugin.rkt") (lib "mred-designer/template-load.rkt") (lib "mred-designer/widgets/project/widget.rkt") (lib "mred-designer/widgets/text-field/widget.rkt") (lib "mred-designer/widgets/frame/widget.rkt") (lib "mred-designer/controller.rkt") (lib "mred-designer/widgets/message/widget.rkt") (lib "mred-designer/widgets/separator-menu-item/widget.rkt") (lib "mred-designer/widgets/button/widget.rkt") (lib "mred-designer/default-values.rkt") (lib "mred-designer/templates.rkt") (lib "mred-designer/widgets/dialog/widget.rkt") (lib "mred-designer/widgets/combo-field/widget.rkt") (lib "mred-designer/widgets.rkt") (lib "mred-designer/widgets/vertical-pane/widget.rkt") (lib "mred-designer/widgets/frame/preview.rkt") (lib "mred-designer/widgets/horizontal-panel/widget.rkt") (lib "mred-designer/tooltip.rkt") (lib "mred-designer/widgets/menu/widget.rkt") (lib "mred-designer/widgets/panel/widget.rkt") (lib "mred-designer/widgets/gauge/widget.rkt") (lib "mred-designer/widgets/slider/widget.rkt") (lib "mred-designer/misc.rkt") (lib "mred-designer/widgets/menu-bar/widget.rkt") (lib "mred-designer/widgets/tab/widget.rkt") (lib "mred-designer/widgets/list-box/widget.rkt") (lib "mred-designer/widgets/group-box-panel/widget.rkt") (lib "mred-designer/code-write.rkt") (lib "mred-designer/widgets/pane/widget.rkt") (lib "mred-designer/preview-widgets.rkt") (lib "mred-designer/toolbox-frame.rkt") (lib "mred-designer/project-manager.rkt") (lib "mred-designer/plugin.rkt") (lib "mred-designer/widgets/editor-canvas/widget.rkt") (lib "mred-designer/widgets/tab-panel/widget.rkt") (lib "mred-designer/help.rkt") (lib "mred-designer/hierarchy-frame.rkt") (lib "mred-designer/widgets/grow-box-spacer-pane/widget.rkt") (lib "mred-designer/widgets/check-box/widget.rkt") (lib "mred-designer/widgets/vertical-panel/widget.rkt") (lib "mred-designer/properties.rkt"))) (name . "mred-designer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (dev . #t) (gui . #t) (ring:1 . #t))) (source . "git://github.com/Metaxal/MrEd-Designer") (tags . ("dev" "gui")) (versions . #hash((default . #hasheq((checksum . "f88e45905dc0fcb13fa327d9b39a47444384921e") (source . "git://github.com/Metaxal/MrEd-Designer") (source_url . "http://github.com/Metaxal/MrEd-Designer/tree/master"))) ("3.12" . #hasheq((checksum . "89e001c524d2d54cf636be2a77fc128c63ed8e19") (source . "git://github.com/Metaxal/MrEd-Designer#v3.12") (source_url . "http://github.com/Metaxal/MrEd-Designer/tree/master#v3.12"))) ("3.16" . #hasheq((checksum . "34ed02e70f9a757c56c3ae24b83164c34d477565") (source . "git://github.com/Metaxal/MrEd-Designer#v3.16") (source_url . "http://github.com/Metaxal/MrEd-Designer/tree/master#v3.16"))))))) ("msgpack" . #hasheq((author . "hiphish@posteo.de hiphish@openmailbox.org") (authors . ("hiphish@posteo.de" "hiphish@openmailbox.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "msgpack" "doc/msgpack@msgpack/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/msgpack.txt") (test-failure-log . "server/built/test-fail/msgpack.txt") (test-success-log . #f))) (checksum . "64a60986b149703ff9436877da1dd3e86c6e4094") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "quickcheck" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Implementation of the MessagePack protocol.") (implies . ()) (last-checked . 1632904190) (last-edit . 1541764868) (last-updated . 1620469734) (modules . ((lib "msgpack/ext.rkt") (lib "msgpack/scribblings/msgpack.scrbl") (lib "msgpack/test/pack/string.rkt") (lib "msgpack/test/pack/boolean.rkt") (lib "msgpack/pack.rkt") (lib "msgpack/test/pack/integers.rkt") (lib "msgpack/test/pack/binary.rkt") (lib "msgpack/test/unpack/binary.rkt") (lib "msgpack/test/pack/extension.rkt") (lib "msgpack/test/unpack/map.rkt") (lib "msgpack/packable.rkt") (lib "msgpack/test/unpack/integers.rkt") (lib "msgpack/test/unpack/boolean.rkt") (lib "msgpack/test/ext.rkt") (lib "msgpack/test/pack/float.rkt") (lib "msgpack/test/pack/array.rkt") (lib "msgpack/main.rkt") (lib "msgpack/test/unpack/extension.rkt") (lib "msgpack/test/pack/map.rkt") (lib "msgpack/test/unpack/nil.rkt") (lib "msgpack/unpack.rkt") (lib "msgpack/test/unpack/string.rkt") (lib "msgpack/test/unpack/float.rkt") (lib "msgpack/test/pack/nil.rkt") (lib "msgpack/test/unpack/array.rkt"))) (name . "msgpack") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:hiphish@openmailbox.org . #t) (author:hiphish@posteo.de . #t) (binary . #t) (messagepack . #t) (msgpack . #t) (protocol . #t) (ring:1 . #t))) (source . "https://gitlab.com/HiPhish/MsgPack.rkt.git?path=msgpack") (tags . ("binary" "messagepack" "msgpack" "protocol")) (versions . #hash((default . #hasheq((checksum . "64a60986b149703ff9436877da1dd3e86c6e4094") (source . "https://gitlab.com/HiPhish/MsgPack.rkt.git?path=msgpack") (source_url . "https://gitlab.com/HiPhish/MsgPack.rkt.git?path=msgpack"))))))) ("msgpack-rpc" . #hasheq((author . "wbthomason@cs.cornell.edu") (authors . ("wbthomason@cs.cornell.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "msgpack-rpc" "doc/msgpack-rpc@msgpack-rpc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/msgpack-rpc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/msgpack-rpc.txt"))) (checksum . "e605bf9d822a3995745d3739b23fd89c7db859e5") (checksum-error . #f) (collection . "msgpack-rpc") (conflicts . ()) (dependencies . ("base" "msgpack" "unix-socket-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A MessagePack-RPC client for Racket") (implies . ()) (last-checked . 1632904191) (last-edit . 1539054172) (last-updated . 1576886783) (modules . ((lib "msgpack-rpc/main.rkt") (lib "msgpack-rpc/scribblings/msgpack-rpc.scrbl"))) (name . "msgpack-rpc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:wbthomason@cs.cornell.edu . #t) (messagepack . #t) (msgpack . #t) (msgpack-rpc . #t) (protocol . #t) (remote . #t) (ring:1 . #t) (rpc . #t))) (source . "https://github.com/wbthomason/msgpack-rpc-racket.git") (tags . ("messagepack" "msgpack" "msgpack-rpc" "protocol" "remote" "rpc")) (versions . #hash((default . #hasheq((checksum . "e605bf9d822a3995745d3739b23fd89c7db859e5") (source . "https://github.com/wbthomason/msgpack-rpc-racket.git") (source_url . "https://github.com/wbthomason/msgpack-rpc-racket.git"))))))) ("mud" . #hasheq((author . "") (authors . ()) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/mud.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Package mud is missing a required field: 'source\n  context...:\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (implies . ()) (last-checked . 1632904191) (last-edit . 1632906423) (last-updated . 1621814817) (modules . ()) (name . "mud") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (ring:1 . #t))) (source . "") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "") (source_url . ""))))))) ("multi-file-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "multi-file-lang" "doc/multi-file-lang@multi-file-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multi-file-lang.txt") (test-failure-log . "server/built/test-fail/multi-file-lang.txt") (test-success-log . #f))) (checksum . "0975cc27e0003050597da7d9f1fc5e9eac341fc7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "lang-file" "rackunit-lib" "typed-racket-lib" "scribble-lib" "racket-doc")) (description . "a #lang language for multiple files in one") (implies . ()) (last-checked . 1632904191) (last-edit . 1501823181) (last-updated . 1575315224) (modules . ((lib "multi-file/lang.rkt") (lib "multi-file/private/make-parent-directory.rkt") (lib "multi-file/tests/1/multi-test.rkt") (lib "multi-file/lang/reader.rkt") (lib "multi-file/private/fallback-make-parent-directory.rkt") (lib "multi-file/tests/1/d.rkt") (lib "multi-file/scribblings/multi-file-lang.scrbl") (lib "multi-file/tests/2/multi-test.rkt"))) (name . "multi-file-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lang . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/multi-file-lang") (tags . ("lang")) (versions . #hash((default . #hasheq((checksum . "0975cc27e0003050597da7d9f1fc5e9eac341fc7") (source . "git://github.com/AlexKnauth/multi-file-lang") (source_url . "http://github.com/AlexKnauth/multi-file-lang/tree/master"))))))) ("multi-id" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "multi-id.hl" "doc/multi-id.hl@multi-id/index.html") ("main" "multi-id" "doc/multi-id@multi-id/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multi-id.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multi-id.txt"))) (checksum . "6dbea1523d75a353b56d1bb63fbc15535d57f240") (checksum-error . #f) (collection . "multi-id") (conflicts . ()) (date-added . 1614799484) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "phc-toolkit" "type-expander" "scribble-lib" "hyper-literate" "scribble-lib" "racket-doc" "scribble-enhanced" "typed-racket-doc")) (description . "Define identifiers which act as a type-expander and match-expander and macro and identifier macro and set! transformer") (implies . ()) (last-checked . 1632904191) (last-edit . 1614889709) (last-updated . 1617546890) (modules . ((lib "multi-id/scribblings/multi-id.scrbl") (lib "multi-id/test/test-multi-id.rkt") (lib "multi-id/main.rkt") (lib "multi-id/multi-id.hl.rkt"))) (name . "multi-id") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (define . #t) (multimethods . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/multi-id.git#main") (tags . ("define" "multimethods" "syntax")) (versions . #hash((default . #hasheq((checksum . "6dbea1523d75a353b56d1bb63fbc15535d57f240") (source . "https://github.com/jsmaniac/multi-id.git#main") (source_url . "https://github.com/jsmaniac/multi-id.git#main"))))))) ("multicolumn" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multicolumn.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multicolumn.txt"))) (checksum . "916e9acca5ccf56b319bf5e641fac483ed60eac9") (checksum-error . #f) (collection . "multicolumn") (conflicts . ()) (date-added . 1550465815) (dependencies . ("base" "stretchable-snip" "gui-lib")) (description . "GUI widget with multicolumn data table. Columns width may be set in pixels or in percents.") (implies . ()) (last-checked . 1632904191) (last-edit . 1550465815) (last-updated . 1573189782) (modules . ((lib "multicolumn/main.rkt") (lib "multicolumn/multicolumn.rkt"))) (name . "multicolumn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:kalimehtar@mail.ru . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/Kalimehtar/multicolumn.git") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "916e9acca5ccf56b319bf5e641fac483ed60eac9") (source . "https://github.com/Kalimehtar/multicolumn.git") (source_url . "https://github.com/Kalimehtar/multicolumn.git"))))))) ("multimethod" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multimethod.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multimethod.txt"))) (checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "multimethod-lib" "multimethod-doc")) (description . "") (implies . ("multimethod-lib" "multimethod-doc")) (last-checked . 1632904192) (last-edit . 1460257060) (last-updated . 1502816188) (modules . ()) (name . "multimethod") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-multimethod?path=multimethod") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (source . "git://github.com/lexi-lambda/racket-multimethod?path=multimethod") (source_url . "http://github.com/lexi-lambda/racket-multimethod/tree/master?path=multimethod"))))))) ("multimethod-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "multimethod" "doc/multimethod@multimethod-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multimethod-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multimethod-doc.txt"))) (checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "multimethod-lib" "racket-doc" "scribble-lib")) (description . "") (implies . ()) (last-checked . 1632904192) (last-edit . 1461048601) (last-updated . 1502816188) (modules . ((lib "scribblings/multimethod.scrbl"))) (name . "multimethod-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-multimethod?path=multimethod-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (source . "git://github.com/lexi-lambda/racket-multimethod?path=multimethod-doc") (source_url . "http://github.com/lexi-lambda/racket-multimethod/tree/master?path=multimethod-doc"))))))) ("multimethod-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multimethod-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multimethod-lib.txt"))) (checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.3") "rackunit-lib" "rackunit-spec")) (description . "") (implies . ()) (last-checked . 1632904192) (last-edit . 1460256973) (last-updated . 1502816188) (modules . ((lib "multimethod/multimethod.rkt") (lib "multimethod/main.rkt") (lib "multimethod/privilege.rkt"))) (name . "multimethod-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-multimethod?path=multimethod-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (source . "git://github.com/lexi-lambda/racket-multimethod?path=multimethod-lib") (source_url . "http://github.com/lexi-lambda/racket-multimethod/tree/master?path=multimethod-lib"))))))) ("multimethod-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multimethod-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multimethod-test.txt"))) (checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "multimethod-lib" "rackunit-lib")) (description . "") (implies . ()) (last-checked . 1632904192) (last-edit . 1460257049) (last-updated . 1502816189) (modules . ((lib "tests/multimethod/multimethod.rkt") (lib "tests/multimethod/ignored-params.rkt"))) (name . "multimethod-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-multimethod?path=multimethod-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8a0903ebaedd919971c382eeb785f05080c7a8d6") (source . "git://github.com/lexi-lambda/racket-multimethod?path=multimethod-test") (source_url . "http://github.com/lexi-lambda/racket-multimethod/tree/master?path=multimethod-test"))))))) ("multipath-daemon" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "multipath-daemon" "doc/multipath-daemon@multipath-daemon/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multipath-daemon.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multipath-daemon.txt"))) (checksum . "4d8a2644d2641e9d263e83caef28b3bf6af63b88") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "unix-socket-lib" "racket-doc" "unstable-doc" "unix-socket-doc")) (description . "Library for communication with the multipathd process via it's UNIX domain socket.") (implies . ()) (last-checked . 1632904192) (last-edit . 1384508962) (last-updated . 1502816189) (modules . ((lib "multipath-daemon/main.rkt") (lib "multipath-daemon/multipath-daemon.scrbl"))) (name . "multipath-daemon") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-multipath-daemon/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4d8a2644d2641e9d263e83caef28b3bf6af63b88") (source . "github://github.com/mordae/racket-multipath-daemon/master") (source_url . "http://github.com/mordae/racket-multipath-daemon/tree/master"))))))) ("multiscope" . #hasheq((author . "michael.ballantyne@gmail.com") (authors . ("michael.ballantyne@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/multiscope.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/multiscope.txt"))) (checksum . "bc59bd53462a72ed3e67ec2555e94e871bc7e314") (checksum-error . #f) (collection . "multiscope") (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "") (implies . ()) (last-checked . 1632904193) (last-edit . 1470432532) (last-updated . 1506709788) (modules . ((lib "multiscope/test/all-defined-out.rkt") (lib "multiscope/test/macros.rkt") (lib "multiscope/test/macros-broken-sep-comp1.rkt") (lib "multiscope/test/basic.rkt") (lib "multiscope/test/macros-broken-sep-comp2.rkt") (lib "multiscope/test/macros-sep-comp1.rkt") (lib "multiscope/test/macros-sep-comp2.rkt") (lib "multiscope/main.rkt") (lib "multiscope/test/provide.rkt"))) (name . "multiscope") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:michael.ballantyne@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/michaelballantyne/multiscope.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "bc59bd53462a72ed3e67ec2555e94e871bc7e314") (source . "https://github.com/michaelballantyne/multiscope.git") (source_url . "https://github.com/michaelballantyne/multiscope.git"))))))) ("mumble-ping" . #hasheq((author . "winston@ml1.net") (authors . ("winston@ml1.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mumble-ping" "doc/mumble-ping@mumble-ping/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mumble-ping.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mumble-ping.txt"))) (checksum . "dbb24e40b1be0c0065b7000ccff8e9e5be7eda92") (checksum-error . #f) (collection . "mumble-ping") (conflicts . ()) (date-added . 1564908965) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "rackunit-typed" "bitsyntax" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "Ping Mumble servers") (implies . ()) (last-checked . 1632904193) (last-edit . 1564981142) (last-updated . 1603086110) (modules . ((lib "mumble-ping/scribblings/mumble-ping.scrbl") (lib "mumble-ping/main.rkt"))) (name . "mumble-ping") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:winston@ml1.net . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/winny-/mumble-ping.git") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "dbb24e40b1be0c0065b7000ccff8e9e5be7eda92") (source . "https://github.com/winny-/mumble-ping.git") (source_url . "https://github.com/winny-/mumble-ping.git"))))))) ("music" . #hasheq((author . "npfaro@indiana.edu") (authors . ("npfaro@indiana.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "music"))) (failure-log . "server/built/fail/music.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "a5f9a6c456351d1b80950241cb1d82585043bc65") (checksum-error . #f) (collection . "lang-music") (conflicts . ()) (dependencies . ("base" "binaryio-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A music notation language. Outputs MIDI. See more on github.") (implies . ()) (last-checked . 1632904193) (last-edit . 1547598761) (last-updated . 1546446213) (modules . ((lib "lang-music/lang/reader.rkt") (lib "lang-music/examples/algorithms.rkt") (lib "lang-music/examples/example-from-slide.rkt") (lib "lang-music/coroutines.rkt") (lib "lang-music/examples/sweet.rkt") (lib "lang-music/lang.rkt") (lib "lang-music/voices.rkt") (lib "lang-music/examples/more_examples.rkt") (lib "lang-music/examples/allstar.rkt") (lib "lang-music/examples/schtuff.rkt") (lib "lang-music/examples/morecowbell.rkt"))) (name . "music") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (audio . #t) (author:npfaro@indiana.edu . #t) (composition . #t) (midi . #t) (music . #t) (ring:1 . #t) (sound . #t))) (source . "https://github.com/SuperDisk/lang-music.git#a5f9a6c") (tags . ("audio" "composition" "midi" "music" "sound")) (versions . #hash((default . #hasheq((checksum . "a5f9a6c456351d1b80950241cb1d82585043bc65") (source . "https://github.com/SuperDisk/lang-music.git#a5f9a6c") (source_url . "https://github.com/SuperDisk/lang-music.git#a5f9a6c"))))))) ("mutable-match-lambda" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mutable-match-lambda" "doc/mutable-match-lambda@mutable-match-lambda/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mutable-match-lambda.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mutable-match-lambda.txt"))) (checksum . "28ea2c1f4e7a92826308c937608d4d91f2ead051") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "kw-utils" "rackunit-lib" "at-exp-lib" "scribble-lib" "sandbox-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1632904193) (last-edit . 1472014493) (last-updated . 1601516030) (modules . ((lib "mutable-match-lambda/mutable-match-lambda-procedure.rkt") (lib "mutable-match-lambda/main.rkt") (lib "mutable-match-lambda/let-inferred-name.rkt") (lib "mutable-match-lambda/make-clause-proc.rkt") (lib "mutable-match-lambda/communication.rkt") (lib "mutable-match-lambda/prop-object-name.rkt") (lib "mutable-match-lambda/docs/mutable-match-lambda.scrbl") (lib "mutable-match-lambda/syntax-to-string.rkt"))) (name . "mutable-match-lambda") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:alexander@knauth.org . #t) (deprecated . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/mutable-match-lambda") (tags . ("deprecated")) (versions . #hash((default . #hasheq((checksum . "28ea2c1f4e7a92826308c937608d4d91f2ead051") (source . "git://github.com/AlexKnauth/mutable-match-lambda") (source_url . "http://github.com/AlexKnauth/mutable-match-lambda/tree/master"))))))) ("mutt" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mutt" "doc/mutt@mutt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/mutt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/mutt.txt"))) (checksum . "c691ba0ab5ab13aac0f5fe843f3582e6789ee9eb") (checksum-error . #f) (collection . "mutt") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "make-log-interceptor" "scribble-lib" "scribble-doc" "scribble-lib" "racket-doc" "rackunit-lib" "rackunit-abbrevs" "typed-racket-doc")) (description . "Racket API for the Mutt email client") (implies . ()) (last-checked . 1632904194) (last-edit . 1539179405) (last-updated . 1612074781) (modules . ((lib "mutt/typed.rkt") (lib "mutt/test/typed.rkt") (lib "mutt/setup.rkt") (lib "mutt/private/pre-install.rkt") (lib "mutt/test/untyped.rkt") (lib "mutt/private/main.rkt") (lib "mutt/main.rkt") (lib "mutt/test/util.rkt") (lib "mutt/private/parameters.rkt") (lib "mutt/scribblings/typed-mutt.scrbl") (lib "mutt/scribblings/mutt.scrbl"))) (name . "mutt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (api . #t) (author:types@ccs.neu.edu . #t) (email . #t) (ring:1 . #t) (utility . #t))) (source . "https://github.com/bennn/racket-mutt.git") (tags . ("api" "email" "utility")) (versions . #hash((default . #hasheq((checksum . "c691ba0ab5ab13aac0f5fe843f3582e6789ee9eb") (source . "https://github.com/bennn/racket-mutt.git") (source_url . "https://github.com/bennn/racket-mutt.git"))) ("6.6" . #hasheq((checksum . "") (source . "https://github.com/bennn/racket-mutt/archive/0.2.zip") (source_url . "https://github.com/bennn/racket-mutt/archive/0.2.zip"))))))) ("my-cond" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "my-cond-iffy" "doc/my-cond-iffy@my-cond/index.html") ("main" "my-cond" "doc/my-cond@my-cond/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/my-cond.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/my-cond.txt"))) (checksum . "1bb7066f69ba4619ac7d2ea0c292f80b78c5503b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "sweet-exp-lib" "rackunit-lib" "racket-doc" "scribble-lib" "sweet-exp")) (description . "a version of cond that supports cond-expanders and a for/cond-clause form, allowing it to iterate though conditions") (implies . ()) (last-checked . 1632904194) (last-edit . 1415219449) (last-updated . 1576382861) (modules . ((lib "my-cond/my-cond.rkt") (lib "my-cond/failure-sym.rkt") (lib "typed/my-cond/parse-for-cond-clause.rkt") (lib "my-cond/parse-for-cond-clause.rkt") (lib "my-cond/proc+condexp.rkt") (lib "my-cond/main.rkt") (lib "my-cond/docs/my-cond-iffy.scrbl") (lib "typed/my-cond/failure-sym.rkt") (lib "my-cond/typed.rkt") (lib "my-cond/define-syntax-parser.rkt") (lib "my-cond/iffy.rkt") (lib "my-cond/for-cond-clause.rkt") (lib "my-cond/docs/my-cond.scrbl") (lib "my-cond/cond-expander-prop.rkt") (lib "my-cond/cond-expander.rkt") (lib "typed/my-cond.rkt") (lib "my-cond/cond-expander-struct.rkt"))) (name . "my-cond") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (cond . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/my-cond") (tags . ("cond")) (versions . #hash((default . #hasheq((checksum . "1bb7066f69ba4619ac7d2ea0c292f80b78c5503b") (source . "git://github.com/AlexKnauth/my-cond") (source_url . "http://github.com/AlexKnauth/my-cond/tree/master"))))))) ("mysterx" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mysterx" "doc/mysterx@mysterx/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "mysterx") (conflicts . ()) (dependencies . ("scheme-lib" "base" "racket-doc" "at-exp-lib" "scribble-lib")) (description . "Legacy library for working with COM on Windows") (implies . ()) (last-checked . 1632904194) (last-edit . 1417659583) (last-updated . 1571887191) (modules . ((lib "mysterx/scribblings/com-events.scrbl") (lib "mysterx/scribblings/com-types.scrbl") (lib "mysterx/mysterx.rkt") (lib "mysterx/main.rkt") (lib "mysterx/scribblings/dcom.scrbl") (lib "mysterx/tests/tests.rkt") (lib "mysterx/scribblings/common.rkt") (lib "mysterx/scribblings/mysterx.scrbl") (lib "mysterx/scribblings/overview.scrbl") (lib "mysterx/scribblings/com.scrbl") (lib "mysterx/scribblings/version.scrbl") (lib "mysterx/scribblings/methprop.scrbl"))) (name . "mysterx") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "5a80a3fe569c9d2a859b810c1c3ba56eeb181307") (source . "git://github.com/racket/mysterx") (source_url . "http://github.com/racket/mysterx/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("mzcom" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mzcom" "doc/mzcom@mzcom/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "mzcom") (conflicts . ()) (dependencies . ("base" "compatibility-lib" "scheme-lib" "racket-doc" "mysterx" "scribble-lib")) (description . "COM control to instantate a Racket instance") (implies . ()) (last-checked . 1632904194) (last-edit . 1417659583) (last-updated . 1502816191) (modules . ((lib "mzcom/mzcom.scrbl") (lib "mzcom/installer.rkt"))) (name . "mzcom") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "5b83833786eca719f6b73b391520272d1ec3dbd9") (source . "git://github.com/racket/mzcom") (source_url . "http://github.com/racket/mzcom/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("mzscheme" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("mzscheme-lib" "mzscheme-doc")) (description . "The legacy MzScheme language") (implies . ("mzscheme-lib" "mzscheme-doc")) (last-checked . 1632904195) (last-edit . 1417659583) (last-updated . 1627932444) (modules . ()) (name . "mzscheme") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "189652e83ddfe95502abed8f3275329ae872dad8") (source . "git://github.com/racket/mzscheme/?path=mzscheme") (source_url . "git://github.com/racket/mzscheme/?path=mzscheme"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("mzscheme-doc" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mzscheme" "doc/mzscheme@mzscheme-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "r5rs-doc" "r5rs-lib" "racket-doc" "scheme-lib" "scribble-lib")) (description . "documentation part of mzscheme") (implies . ()) (last-checked . 1632904195) (last-edit . 1417659583) (last-updated . 1627932445) (modules . ((lib "mzscheme/mzscheme.scrbl"))) (name . "mzscheme-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "189652e83ddfe95502abed8f3275329ae872dad8") (source . "git://github.com/racket/mzscheme/?path=mzscheme-doc") (source_url . "git://github.com/racket/mzscheme/?path=mzscheme-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("mzscheme-lib" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" ("base" #:version "6.5.0.2"))) (description . "implementation (no documentation) part of mzscheme") (implies . ()) (last-checked . 1632904195) (last-edit . 1417659583) (last-updated . 1627932446) (modules . ((lib "mzscheme/examples/tree-finish.rkt") (lib "mzscheme/examples/curses-demo.rkt") (lib "mzscheme/examples/fmod-ez.rkt") (lib "compiler/main.rkt") (lib "mzscheme/examples/cfile.rkt") (lib "mzscheme/installer.rkt") (lib "mzscheme/examples/msgbox.rkt"))) (name . "mzscheme-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "189652e83ddfe95502abed8f3275329ae872dad8") (source . "git://github.com/racket/mzscheme/?path=mzscheme-lib") (source_url . "git://github.com/racket/mzscheme/?path=mzscheme-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("namespaced-transformer" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/namespaced-transformer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/namespaced-transformer.txt"))) (checksum . "4cdc1bdae09a07b78f23665267f2c7df4be5a7f6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("namespaced-transformer-doc" "namespaced-transformer-lib")) (description . "") (implies . ("namespaced-transformer-doc" "namespaced-transformer-lib")) (last-checked . 1632904196) (last-edit . 1473370456) (last-updated . 1502816193) (modules . ()) (name . "namespaced-transformer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/namespaced-transformer?path=namespaced-transformer") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4cdc1bdae09a07b78f23665267f2c7df4be5a7f6") (source . "git://github.com/lexi-lambda/namespaced-transformer?path=namespaced-transformer") (source_url . "http://github.com/lexi-lambda/namespaced-transformer/tree/master?path=namespaced-transformer"))))))) ("namespaced-transformer-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "namespaced-transformer" "doc/namespaced-transformer@namespaced-transformer-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/namespaced-transformer-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/namespaced-transformer-doc.txt"))) (checksum . "4cdc1bdae09a07b78f23665267f2c7df4be5a7f6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "namespaced-transformer-lib" "racket-doc" "scribble-lib")) (description . "") (implies . ()) (last-checked . 1632904196) (last-edit . 1473370424) (last-updated . 1502816193) (modules . ((lib "scribblings/namespaced-transformer.scrbl"))) (name . "namespaced-transformer-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/namespaced-transformer?path=namespaced-transformer-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4cdc1bdae09a07b78f23665267f2c7df4be5a7f6") (source . "git://github.com/lexi-lambda/namespaced-transformer?path=namespaced-transformer-doc") (source_url . "http://github.com/lexi-lambda/namespaced-transformer/tree/master?path=namespaced-transformer-doc"))))))) ("namespaced-transformer-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/namespaced-transformer-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/namespaced-transformer-lib.txt"))) (checksum . "4cdc1bdae09a07b78f23665267f2c7df4be5a7f6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632904196) (last-edit . 1473370346) (last-updated . 1502816193) (modules . ((lib "namespaced-transformer/main.rkt") (lib "namespaced-transformer/info-key.rkt"))) (name . "namespaced-transformer-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/namespaced-transformer?path=namespaced-transformer-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4cdc1bdae09a07b78f23665267f2c7df4be5a7f6") (source . "git://github.com/lexi-lambda/namespaced-transformer?path=namespaced-transformer-lib") (source_url . "http://github.com/lexi-lambda/namespaced-transformer/tree/master?path=namespaced-transformer-lib"))))))) ("nanopass" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "nanopass" "doc/nanopass@nanopass/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nanopass.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/nanopass.txt"))) (checksum . "deac3a4bf937e1217ec54c5439710712b227fc5a") (checksum-error . "git: could not find requested reference\n  reference: master\n  repo: nanopass/nanopass-framework-racket\n  context...:\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:403:0: select-commits\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . "nanopass") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "compatibility-lib" "unstable-pretty-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1632904196) (last-edit . 1450983821) (last-updated . 1621814822) (modules . ((lib "nanopass/tests/coresheme-to-javascript-compiler.rkt") (lib "nanopass/tests/compiler-test.rkt") (lib "nanopass/tests/test-driver.rkt") (lib "nanopass/private/unparser.rkt") (lib "nanopass/private/language.rkt") (lib "nanopass/private/helpers.rkt") (lib "nanopass/tests/synforms.rkt") (lib "nanopass/private/meta-parser.rkt") (lib "nanopass/private/records.rkt") (lib "nanopass/lang/reader.rkt") (lib "nanopass/private/pass-helper.rkt") (lib "nanopass/tests/alltests.rkt") (lib "nanopass/private/meta-syntax-dispatch.rkt") (lib "nanopass/main.rkt") (lib "nanopass/private/language-node-counter.rkt") (lib "nanopass/private/pass.rkt") (lib "nanopass/tests/test-all.rkt") (lib "nanopass/private/language-helpers.rkt") (lib "nanopass/tests/helpers.rkt") (lib "nanopass/tests/compiler.rkt") (lib "nanopass/tests/unit-tests.rkt") (lib "nanopass/base.rkt") (lib "nanopass/private/nano-syntax-dispatch.rkt") (lib "nanopass/scribblings/nanopass.scrbl") (lib "nanopass/private/syntaxconvert.rkt") (lib "nanopass/private/parser.rkt"))) (name . "nanopass") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:error: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (compiler . #t) (ring:1 . #t))) (source . "git://github.com/nanopass/nanopass-framework-racket") (tags . ("compiler")) (versions . #hash(("6.0.1" . #hasheq((checksum . "1422f5183e0d15492bbba2a77f7ad927f9349681") (source . "git://github.com/nanopass/nanopass-framework-racket#old-racket") (source_url . "http://github.com/nanopass/nanopass-framework-racket/tree/master#old-racket"))) (default . #hasheq((checksum . "deac3a4bf937e1217ec54c5439710712b227fc5a") (source . "git://github.com/nanopass/nanopass-framework-racket") (source_url . "http://github.com/nanopass/nanopass-framework-racket/tree/master"))) ("6.2.1" . #hasheq((checksum . "1422f5183e0d15492bbba2a77f7ad927f9349681") (source . "git://github.com/nanopass/nanopass-framework-racket#old-racket") (source_url . "http://github.com/nanopass/nanopass-framework-racket/tree/master#old-racket"))) ("6.2" . #hasheq((checksum . "1422f5183e0d15492bbba2a77f7ad927f9349681") (source . "git://github.com/nanopass/nanopass-framework-racket#old-racket") (source_url . "http://github.com/nanopass/nanopass-framework-racket/tree/master#old-racket"))) ("6.0" . #hasheq((checksum . "1422f5183e0d15492bbba2a77f7ad927f9349681") (source . "git://github.com/nanopass/nanopass-framework-racket#old-racket") (source_url . "http://github.com/nanopass/nanopass-framework-racket/tree/master#old-racket"))) ("6.1" . #hasheq((checksum . "1422f5183e0d15492bbba2a77f7ad927f9349681") (source . "git://github.com/nanopass/nanopass-framework-racket#old-racket") (source_url . "http://github.com/nanopass/nanopass-framework-racket/tree/master#old-racket"))) ("6.1.1" . #hasheq((checksum . "1422f5183e0d15492bbba2a77f7ad927f9349681") (source . "git://github.com/nanopass/nanopass-framework-racket#old-racket") (source_url . "http://github.com/nanopass/nanopass-framework-racket/tree/master#old-racket"))))))) ("nasa-open-api" . #hasheq((author . "mhugijr@outlook.com") (authors . ("mhugijr@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "nasa-open-api" "doc/nasa-open-api@nasa-open-api/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nasa-open-api.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/nasa-open-api.txt"))) (checksum . "aea1067af82aa4516f192e96bb987751ad2f6316") (checksum-error . #f) (collection . "nasa-open-api") (conflicts . ()) (date-added . 1592817412) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "Library for a handful of NASA's Open APIs") (implies . ()) (last-checked . 1632904196) (last-edit . 1592817449) (last-updated . 1592818047) (modules . ((lib "nasa-open-api/neo.rkt") (lib "nasa-open-api/solar-flare.rkt") (lib "nasa-open-api/apod.rkt") (lib "nasa-open-api/fireball.rkt") (lib "nasa-open-api/scribblings/apod.scrbl") (lib "nasa-open-api/cme.rkt") (lib "nasa-open-api/scribblings/donki-notifications.scrbl") (lib "nasa-open-api/donki.rkt") (lib "nasa-open-api/donki-notifications.rkt") (lib "nasa-open-api/scribblings/solar-flare.scrbl") (lib "nasa-open-api/scribblings/nasa-open-api.scrbl") (lib "nasa-open-api/scribblings/cme.scrbl") (lib "nasa-open-api/scribblings/neo.scrbl") (lib "nasa-open-api/main.rkt") (lib "nasa-open-api/scribblings/fireball.scrbl"))) (name . "nasa-open-api") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (API . #t) (api . #t) (author:mhugijr@outlook.com . #t) (client . #t) (client-api . #t) (data-structures . #t) (ring:1 . #t) (structs . #t))) (source . "https://github.com/m-hugi/nasa-open-api.git") (tags . ("api" "API" "client" "client-api" "data-structures" "structs")) (versions . #hash((default . #hasheq((checksum . "aea1067af82aa4516f192e96bb987751ad2f6316") (source . "https://github.com/m-hugi/nasa-open-api.git") (source_url . "https://github.com/m-hugi/nasa-open-api.git"))))))) ("nat-traversal" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "nat-traversal" "doc/nat-traversal@nat-traversal/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nat-traversal.txt") (test-failure-log . "server/built/test-fail/nat-traversal.txt") (test-success-log . #f))) (checksum . "3983b52e1e23b820da1b90f514ddbe7d6398e0cb") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "bitsyntax" "web-server-lib" "racket-doc" "scribble-lib")) (description . "NAT traversal utilities, including NAT-PMP and UPnP.") (implies . ()) (last-checked . 1632904197) (last-edit . 1520872802) (last-updated . 1520872930) (modules . ((lib "nat-traversal/nat-pmp.rkt") (lib "nat-traversal/timer.rkt") (lib "nat-traversal/upnp.rkt") (lib "nat-traversal/upnp-ip-gateway.rkt") (lib "nat-traversal/examples/example-high-level-udp.rkt") (lib "nat-traversal/examples/example-high-level-tcp.rkt") (lib "nat-traversal/mapping.rkt") (lib "nat-traversal/main.rkt") (lib "nat-traversal/high-level.rkt") (lib "nat-traversal/interfaces.rkt") (lib "nat-traversal/examples/example-upnp-ip-gateway.rkt") (lib "nat-traversal/examples/map-udp-port.rkt") (lib "nat-traversal/scribblings/nat-traversal.scrbl"))) (name . "nat-traversal") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tonygarnockjones@gmail.com . #t) (firewall . #t) (nat . #t) (net . #t) (network . #t) (ring:1 . #t))) (source . "https://github.com/tonyg/racket-nat-traversal.git") (tags . ("firewall" "nat" "net" "network")) (versions . #hash((default . #hasheq((checksum . "3983b52e1e23b820da1b90f514ddbe7d6398e0cb") (source . "https://github.com/tonyg/racket-nat-traversal.git") (source_url . "https://github.com/tonyg/racket-nat-traversal.git"))))))) ("natural-cli" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "natural-cli" "doc/natural-cli@natural-cli/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/natural-cli.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/natural-cli.txt"))) (checksum . "c7abc38d025159128d446ca1a6314ab909ffe920") (checksum-error . #f) (collection . "natural-cli") (conflicts . ()) (date-added . 1573761764) (dependencies . ("base" "compatibility-lib" "scribble-lib" "racket-doc" "rackunit-lib" "compatibility-doc")) (description . "Easily write large command-line interfaces (CLIs)") (implies . ()) (last-checked . 1632904197) (last-edit . 1573761764) (last-updated . 1588723152) (modules . ((lib "natural-cli/scribblings/natural-cli.scrbl") (lib "natural-cli/cli/natural-cli_mklauncher.rkt") (lib "natural-cli/main.rkt") (lib "natural-cli/cli/natural-cli_mkmodule.rkt") (lib "natural-cli/cli/natural-cli.rkt") (lib "natural-cli/skel.rkt"))) (name . "natural-cli") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sage@sagegerard.com . #t) (cli . #t) (command-line . #t) (interface . #t) (ring:1 . #t))) (source . "https://github.com/zyrolasting/natural-cli.git") (tags . ("cli" "command-line" "interface")) (versions . #hash((default . #hasheq((checksum . "c7abc38d025159128d446ca1a6314ab909ffe920") (source . "https://github.com/zyrolasting/natural-cli.git") (source_url . "https://github.com/zyrolasting/natural-cli.git"))))))) ("neo4j-lib" . #hasheq((author . "tomasz.baranski@posteo.net") (authors . ("tomasz.baranski@posteo.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "neo4j" "doc/neo4j@neo4j-lib/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/neo4j-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/neo4j-lib.txt"))) (checksum . "18d50ef8c4a59b5e7b4a2f6ee778fb90782ef777") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1621412901) (dependencies . ("base" "db-lib" "rackunit-lib" "scribble-lib" "racket-doc" "rackunit-lib" "db-doc")) (description . "Neo4j interface") (implies . ()) (last-checked . 1632904197) (last-edit . 1621845905) (last-updated . 1621868889) (modules . ((lib "db/test/neo4j.rkt") (lib "db/neo4j.rkt") (lib "db/scribblings/neo4j.scrbl") (lib "db/private/neo4j.rkt") (lib "db/private/dbsystem.rkt"))) (name . "neo4j-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tomasz.baranski@posteo.net . #t) (database . #t) (db . #t) (neo4j . #t) (ring:1 . #t))) (source . "https://github.com/tomob/neo4j-lib.git#main") (tags . ("database" "db" "neo4j")) (versions . #hash(("0.2" . #hasheq((checksum . "fd2f96c79aeb8571ea066c48cd13f9c4980b2984") (source . "https://github.com/tomob/neo4j-lib.git#fd2f96c79aeb8571ea066c48cd13f9c4980b2984") (source_url . "https://github.com/tomob/neo4j-lib.git#fd2f96c79aeb8571ea066c48cd13f9c4980b2984"))) (default . #hasheq((checksum . "18d50ef8c4a59b5e7b4a2f6ee778fb90782ef777") (source . "https://github.com/tomob/neo4j-lib.git#main") (source_url . "https://github.com/tomob/neo4j-lib.git#main"))))))) ("neologia" . #hasheq((author . "gamecodeshark@gmail.com") (authors . ("gamecodeshark@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/neologia.txt") (docs . (("main" "neologia" "doc/neologia@neologia/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/neologia.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/neologia.txt"))) (checksum . "92d6ccde9041dc07b5c0db1849b4e1c65cb3cf2d") (checksum-error . #f) (collection . "neologia") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "brag" "beautiful-racket" "beautiful-racket-lib" "br-parser-tools-lib" "scribble-lib" "racket-doc")) (description . "A language for creating and managing dictionaries and lexicons") (implies . ()) (last-checked . 1632904198) (last-edit . 1509944026) (last-updated . 1510027329) (modules . ((lib "neologia/scribblings/neologia.scrbl") (lib "neologia/main.rkt") (lib "neologia/examples/test.rkt") (lib "neologia/tokenizer.rkt") (lib "neologia/parser-only.rkt") (lib "neologia/tokenize-only.rkt") (lib "neologia/parser.rkt") (lib "neologia/colorer.rkt") (lib "neologia/lexer.rkt") (lib "neologia/generator.rkt"))) (name . "neologia") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:gamecodeshark@gmail.com . #t) (dictionaries . #t) (lang . #t) (lang-extension . #t) (lexicon . #t) (ring:1 . #t))) (source . "https://github.com/robertkleffner/neologia.git") (tags . ("dictionaries" "lang" "lang-extension" "lexicon")) (versions . #hash((default . #hasheq((checksum . "92d6ccde9041dc07b5c0db1849b4e1c65cb3cf2d") (source . "https://github.com/robertkleffner/neologia.git") (source_url . "https://github.com/robertkleffner/neologia.git"))))))) ("nested-hash" . #hasheq((author . "macocio@gmail.com") (authors . ("macocio@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "nested-hash" "doc/nested-hash@nested-hash/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nested-hash.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/nested-hash.txt"))) (checksum . "c562dbe1cf54d8604e56db14526f03c9b6c75b5b") (checksum-error . #f) (collection . "nested-hash") (conflicts . ()) (dependencies . ("base" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Functions to allow for easy nested hash setting and getting.") (implies . ()) (last-checked . 1632904198) (last-edit . 1533388916) (last-updated . 1543020393) (modules . ((lib "nested-hash/main.rkt") (lib "nested-hash/scribblings/nested-hash.scrbl"))) (name . "nested-hash") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:macocio@gmail.com . #t) (hash . #t) (hash-ref . #t) (hash-set . #t) (nested-hash-ref . #t) (nested-hash-set . #t) (ring:1 . #t))) (source . "https://github.com/BourgondAries/nested-hash.git") (tags . ("hash" "hash-ref" "hash-set" "nested-hash-ref" "nested-hash-set")) (versions . #hash((default . #hasheq((checksum . "c562dbe1cf54d8604e56db14526f03c9b6c75b5b") (source . "https://github.com/BourgondAries/nested-hash.git") (source_url . "https://github.com/BourgondAries/nested-hash.git"))))))) ("net" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("net-lib" "net-doc")) (description . "Networking libraries") (implies . ("net-lib" "net-doc")) (last-checked . 1632904198) (last-edit . 1464388807) (last-updated . 1632666716) (modules . ()) (name . "net") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "git://github.com/racket/racket?path=pkgs/net") (source_url . "http://github.com/racket/racket/tree/master?path=pkgs%2Fnet"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("net-cookies" . #hasheq((author . "jmj@fellowhuman.com jay.mccarthy@gmail.com") (authors . ("jmj@fellowhuman.com" "jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "f6b1a4ab18d09fae70f903663304ecaeb5f1041b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("net-cookies-lib" "net-cookies-doc")) (description . "RFC6265-compliant cookie handling for client and server") (implies . ("net-cookies-lib" "net-cookies-doc")) (last-checked . 1632904199) (last-edit . 1489758265) (last-updated . 1573135809) (modules . ()) (name . "net-cookies") (ring . 1) (search-terms . #hasheq((author:jay.mccarthy@gmail.com . #t) (author:jmj@fellowhuman.com . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/RenaissanceBug/racket-cookies?path=net-cookies") (tags . ("net" "web")) (versions . #hash((default . #hasheq((checksum . "f6b1a4ab18d09fae70f903663304ecaeb5f1041b") (source . "git://github.com/RenaissanceBug/racket-cookies?path=net-cookies") (source_url . "http://github.com/RenaissanceBug/racket-cookies/tree/master?path=net-cookies"))))))) ("net-cookies-doc" . #hasheq((author . "jay.mccarthy@gmail.com jmj@fellowhuman.com") (authors . ("jay.mccarthy@gmail.com" "jmj@fellowhuman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "cookies" "doc/cookies@net-cookies-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "f6b1a4ab18d09fae70f903663304ecaeb5f1041b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "net-cookies-lib" "racket-doc" "web-server-lib" "web-server-doc" "net-doc" "scribble-lib")) (description . "RFC6265-compliant cookie handling for client and server (doc)") (implies . ()) (last-checked . 1632904199) (last-edit . 1489758174) (last-updated . 1573135809) (modules . ((lib "net/cookies/scribblings/cookies.scrbl"))) (name . "net-cookies-doc") (ring . 1) (search-terms . #hasheq((:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (author:jmj@fellowhuman.com . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/RenaissanceBug/racket-cookies?path=net-cookies-doc") (tags . ("net" "web")) (versions . #hash((default . #hasheq((checksum . "f6b1a4ab18d09fae70f903663304ecaeb5f1041b") (source . "git://github.com/RenaissanceBug/racket-cookies?path=net-cookies-doc") (source_url . "http://github.com/RenaissanceBug/racket-cookies/tree/master?path=net-cookies-doc"))))))) ("net-cookies-lib" . #hasheq((author . "jay.mccarthy@gmail.com jmj@fellowhuman.com") (authors . ("jay.mccarthy@gmail.com" "jmj@fellowhuman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "f6b1a4ab18d09fae70f903663304ecaeb5f1041b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("srfi-lite-lib" "base")) (description . "RFC6265-compliant cookie handling for client and server (lib)") (implies . ()) (last-checked . 1632904199) (last-edit . 1489758132) (last-updated . 1573135810) (modules . ((lib "net/cookies/common.rkt") (lib "net/cookies/server.rkt") (lib "net/cookies/user-agent.rkt") (lib "net/cookies.rkt"))) (name . "net-cookies-lib") (ring . 1) (search-terms . #hasheq((author:jay.mccarthy@gmail.com . #t) (author:jmj@fellowhuman.com . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/RenaissanceBug/racket-cookies?path=net-cookies-lib") (tags . ("net" "web")) (versions . #hash((default . #hasheq((checksum . "f6b1a4ab18d09fae70f903663304ecaeb5f1041b") (source . "git://github.com/RenaissanceBug/racket-cookies?path=net-cookies-lib") (source_url . "http://github.com/RenaissanceBug/racket-cookies/tree/master?path=net-cookies-lib"))))))) ("net-cookies-test" . #hasheq((author . "jay.mccarthy@gmail.com jmj@fellowhuman.com") (authors . ("jay.mccarthy@gmail.com" "jmj@fellowhuman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "f6b1a4ab18d09fae70f903663304ecaeb5f1041b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "net-cookies-lib" "rackunit-lib")) (description . "RFC6265-compliant cookie handling for client and server (test)") (implies . ()) (last-checked . 1632904199) (last-edit . 1489758326) (last-updated . 1573135810) (modules . ((lib "tests/net/cookies/server.rkt") (lib "tests/net/cookies/common.rkt") (lib "tests/net/cookies/user-agent.rkt"))) (name . "net-cookies-test") (ring . 1) (search-terms . #hasheq((author:jay.mccarthy@gmail.com . #t) (author:jmj@fellowhuman.com . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/RenaissanceBug/racket-cookies?path=net-cookies-test") (tags . ("net" "web")) (versions . #hash((default . #hasheq((checksum . "f6b1a4ab18d09fae70f903663304ecaeb5f1041b") (source . "git://github.com/RenaissanceBug/racket-cookies?path=net-cookies-test") (source_url . "http://github.com/RenaissanceBug/racket-cookies/tree/master?path=net-cookies-test"))))))) ("net-doc" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "net" "doc/net@net-doc/index.html") ("main" "win32-ssl" "doc/win32-ssl@net-doc/index.html") ("main" "osx-ssl" "doc/osx-ssl@net-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "net-lib" "racket-doc" "scribble-lib" "web-server-doc" "web-server-lib")) (description . "documentation part of net") (implies . ()) (last-checked . 1632904199) (last-edit . 1464388807) (last-updated . 1632666741) (modules . ((lib "net/scribblings/head.scrbl") (lib "net/scribblings/qp.scrbl") (lib "net/scribblings/unihead.scrbl") (lib "net/scribblings/common.rkt") (lib "net/scribblings/cookie.scrbl") (lib "net/scribblings/nntp.scrbl") (lib "net/scribblings/tcp.scrbl") (lib "net/scribblings/imap.scrbl") (lib "net/scribblings/base64.scrbl") (lib "net/scribblings/url.scrbl") (lib "net/scribblings/smtp.scrbl") (lib "net/scribblings/ssl-tcp-unit.scrbl") (lib "net/scribblings/ftp.scrbl") (lib "net/scribblings/uri-codec.scrbl") (lib "net/scribblings/pop3.scrbl") (lib "net/scribblings/sendurl.scrbl") (lib "net/scribblings/http-client.scrbl") (lib "net/scribblings/net.scrbl") (lib "net/scribblings/win32-ssl.scrbl") (lib "net/scribblings/sendmail.scrbl") (lib "net/scribblings/osx-ssl.scrbl") (lib "net/scribblings/mime.scrbl") (lib "net/scribblings/cgi.scrbl") (lib "net/scribblings/dns.scrbl") (lib "net/scribblings/git-checkout.scrbl") (lib "net/scribblings/tcp-redirect.scrbl"))) (name . "net-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "git://github.com/racket/racket?path=pkgs/net-doc") (source_url . "http://github.com/racket/racket/tree/master?path=pkgs%2Fnet-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("net-ip" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/net-ip.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/net-ip.txt"))) (checksum . "fec61684f123f042ae0236e9ee702fb0591bc502") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("net-ip-doc" "net-ip-lib")) (description . "IP address utilities (implementation and docs).") (implies . ("net-ip-doc" "net-ip-lib")) (last-checked . 1632904200) (last-edit . 1542196549) (last-updated . 1602059691) (modules . ()) (name . "net-ip") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ip-address . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip") (tags . ("ip-address" "net")) (versions . #hash((default . #hasheq((checksum . "fec61684f123f042ae0236e9ee702fb0591bc502") (source . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip") (source_url . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip"))))))) ("net-ip-doc" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "net-ip" "doc/net-ip@net-ip-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/net-ip-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/net-ip-doc.txt"))) (checksum . "fec61684f123f042ae0236e9ee702fb0591bc502") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "net-ip-lib" "racket-doc" "scribble-lib")) (description . "IP address utilities (docs only).") (implies . ()) (last-checked . 1632904200) (last-edit . 1542196612) (last-updated . 1602059692) (modules . ((lib "net/scribblings/net-ip.scrbl"))) (name . "net-ip-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (ip-address . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip-doc") (tags . ("ip-address" "net")) (versions . #hash((default . #hasheq((checksum . "fec61684f123f042ae0236e9ee702fb0591bc502") (source . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip-doc") (source_url . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip-doc"))))))) ("net-ip-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/net-ip-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/net-ip-lib.txt"))) (checksum . "fec61684f123f042ae0236e9ee702fb0591bc502") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "IP address utilities (implementation only).") (implies . ()) (last-checked . 1632904200) (last-edit . 1542196581) (last-updated . 1602059692) (modules . ((lib "net/ip.rkt") (lib "net/ip/network.rkt") (lib "net/ip/common.rkt") (lib "net/ip/address.rkt"))) (name . "net-ip-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ip-address . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip-lib") (tags . ("ip-address" "net")) (versions . #hash((default . #hasheq((checksum . "fec61684f123f042ae0236e9ee702fb0591bc502") (source . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip-lib") (source_url . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip-lib"))))))) ("net-ip-test" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/net-ip-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/net-ip-test.txt"))) (checksum . "fec61684f123f042ae0236e9ee702fb0591bc502") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "net-ip-lib" "quickcheck" "rackunit-lib")) (description . "Tests for net-ip-lib.") (implies . ()) (last-checked . 1632904200) (last-edit . 1542215487) (last-updated . 1602059693) (modules . ((lib "tests/net/run-all-tests.rkt") (lib "tests/net/ip/common.rkt") (lib "tests/net/ip/address.rkt") (lib "tests/net/ip/network.rkt"))) (name . "net-ip-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ip-address . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip-test") (tags . ("ip-address" "net")) (versions . #hash((default . #hasheq((checksum . "fec61684f123f042ae0236e9ee702fb0591bc502") (source . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip-test") (source_url . "https://github.com/Bogdanp/racket-net-ip.git?path=net-ip-test"))))))) ("net-jwt" . #hasheq((author . "jmj@fellowhuman.com") (authors . ("jmj@fellowhuman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "jwt" "doc/jwt@net-jwt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/net-jwt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/net-jwt.txt"))) (checksum . "0f747569e878ef14d1f5d2de527efd02af88fcf9") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("srfi-lite-lib" ("base" #:version "6.10") "typed-racket-lib" "typed-racket-more" "sha" "crypto" "rackunit-lib" "web-server-lib" "racket-doc" "scribble-lib" "typed-racket-lib" "typed-racket-more" "typed-racket-doc" "option-bind")) (description . "JSON Web Token / JSON Web Signature codec, verification, signing") (implies . ()) (last-checked . 1632904201) (last-edit . 1439185700) (last-updated . 1607118175) (modules . ((lib "net/jwt/misc.rkt") (lib "tests/net/jwt/base64.rkt") (lib "tests/net/jwt/algorithms.rkt") (lib "net/jwt/encode-decode.rkt") (lib "net/jwt.rkt") (lib "net/jwt/jwt.scrbl") (lib "net/jwt/structs.rkt") (lib "tests/net/jwt/encode-decode.rkt") (lib "net/jwt/base64.rkt") (lib "net/jwt/algorithms.rkt"))) (name . "net-jwt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jmj@fellowhuman.com . #t) (json . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/RenaissanceBug/racket-jwt") (tags . ("json" "net" "web")) (versions . #hash((default . #hasheq((checksum . "0f747569e878ef14d1f5d2de527efd02af88fcf9") (source . "git://github.com/RenaissanceBug/racket-jwt") (source_url . "http://github.com/RenaissanceBug/racket-jwt/tree/master"))))))) ("net-lib" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("srfi-lite-lib" "base")) (description . "implementation (no documentation) part of net") (implies . ()) (last-checked . 1632904201) (last-edit . 1464388807) (last-updated . 1632666767) (modules . ((lib "net/private/rbtree.rkt") (lib "net/private/ip.rkt") (lib "net/mime-util.rkt") (lib "net/mime.rkt") (lib "net/private/rr-generic.rkt") (lib "net/private/rr-srv.rkt") (lib "net/qp.rkt") (lib "net/cgi.rkt") (lib "net/ftp.rkt") (lib "net/tcp-unit.rkt") (lib "net/ssl-tcp-unit.rkt") (lib "net/dns.rkt") (lib "net/pop3.rkt") (lib "net/sendmail.rkt") (lib "net/cookie.rkt") (lib "net/smtp.rkt") (lib "net/sendurl.rkt") (lib "net/imap.rkt") (lib "net/unihead.rkt") (lib "net/tcp-sig.rkt") (lib "net/tcp-redirect.rkt") (lib "net/nntp.rkt"))) (name . "net-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "git://github.com/racket/racket?path=pkgs/net-lib") (source_url . "http://github.com/racket/racket/tree/master?path=pkgs%2Fnet-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("net-pem" . #hasheq((author . "anurag@mendhekar.com") (authors . ("anurag@mendhekar.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/net-pem.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/net-pem.txt"))) (checksum . "6a2add18192a24118b13d0e652d808c270dd1890") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1600280564) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Privacy Enhanced Mail (PEM) Parsing and Unparsing") (implies . ()) (last-checked . 1632904203) (last-edit . 1600280564) (last-updated . 1611780011) (modules . ((lib "net/pem.rkt") (lib "net/pem/pem.rkt") (lib "net/pem/tests/test-pem.rkt") (lib "scribblings/net-pem.scrbl"))) (name . "net-pem") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:anurag@mendhekar.com . #t) (crypto . #t) (pem . #t) (privacy-enhanced-mail . #t) (ring:1 . #t))) (source . "https://github.com/themetaschemer/net-pem.git") (tags . ("crypto" "pem" "privacy-enhanced-mail")) (versions . #hash((default . #hasheq((checksum . "6a2add18192a24118b13d0e652d808c270dd1890") (source . "https://github.com/themetaschemer/net-pem.git") (source_url . "https://github.com/themetaschemer/net-pem.git"))))))) ("net-test" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "at-exp-lib" "compatibility-lib" "eli-tester" "net-lib" "racket-test" "rackunit-lib" "sandbox-lib" "web-server-lib")) (description . "tests for net-lib") (implies . ()) (last-checked . 1632904204) (last-edit . 1464388807) (last-updated . 1632666792) (modules . ((lib "tests/net/http-proxy/proxy-server.rkt") (lib "tests/net/uri-codec.rkt") (lib "tests/net/url-string.rkt") (lib "tests/net/git-checkout.rkt") (lib "tests/net/url-port.rkt") (lib "tests/net/ftp.rkt") (lib "tests/net/pr/pr1.rkt") (lib "tests/net/url.rkt") (lib "tests/net/dns.rkt") (lib "tests/net/http-proxy/https-non-server.rkt") (lib "tests/net/available.rkt") (lib "tests/net/main.rkt") (lib "tests/net/http-proxy/generic-server.rkt") (lib "tests/net/bad-proxy-envvar.rkt") (lib "tests/net/imap.rkt") (lib "tests/net/head.rkt") (lib "tests/net/ip.rkt") (lib "tests/net/mime.rkt") (lib "tests/net/encoders.rkt") (lib "tests/net/cookie.rkt") (lib "tests/net/base64.rkt") (lib "tests/net/http-proxy/echo-server.rkt") (lib "tests/net/cgi.rkt") (lib "tests/net/http-client.rkt"))) (name . "net-test") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "git://github.com/racket/racket?path=pkgs/net-test") (source_url . "http://github.com/racket/racket/tree/master?path=pkgs%2Fnet-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("net2" . #hasheq((author . "jackhfirth@gmail.com dedbox@gmail.com") (authors . ("jackhfirth@gmail.com" "dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "net2" "doc/net2@net2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/net2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/net2.txt"))) (checksum . "b4247d52177120ff246b60c400b070dc962ee24b") (checksum-error . #f) (collection . "net2") (conflicts . ()) (dependencies . ("reprovide-lang" "base" "unix-socket-doc" "unix-socket-lib" "disposable" "racket-doc" "scribble-lib")) (description . "Highly experimental and aspirational networking library. Not yet fit for public consumption.") (implies . ()) (last-checked . 1632904205) (last-edit . 1514952527) (last-updated . 1515041642) (modules . ((lib "net2/transport.rkt") (lib "net2/scribblings/system.scrbl") (lib "net2/system.rkt") (lib "net2/scribblings/transport.scrbl") (lib "net2/scribblings/util.rkt") (lib "net2/main.rkt") (lib "net2/scribblings/listener.scrbl") (lib "net2/scribblings/main.scrbl") (lib "net2/scribblings/tech.rkt") (lib "net2/scribblings/connector.scrbl") (lib "net2/scribblings/base.rkt") (lib "net2/connector.rkt") (lib "net2/data.rkt") (lib "net2/scribblings/data.scrbl") (lib "net2/listener.rkt"))) (name . "net2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dedbox@gmail.com . #t) (author:jackhfirth@gmail.com . #t) (concurrency . #t) (experimental . #t) (io . #t) (network . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/racket-net2.git") (tags . ("concurrency" "experimental" "io" "network")) (versions . #hash((default . #hasheq((checksum . "b4247d52177120ff246b60c400b070dc962ee24b") (source . "https://github.com/jackfirth/racket-net2.git") (source_url . "https://github.com/jackfirth/racket-net2.git"))))))) ("netrc" . #hasheq((author . "me@apgwoz.com") (authors . ("me@apgwoz.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "netrc" "doc/netrc@netrc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/netrc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/netrc.txt"))) (checksum . "af814d20a77910ab6de2161ac37d02586604a192") (checksum-error . #f) (collection . "netrc") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Find entries in ~/.netrc files") (implies . ()) (last-checked . 1632904206) (last-edit . 1437660604) (last-updated . 1502816196) (modules . ((lib "netrc/scribblings/netrc.scrbl") (lib "netrc/main.rkt"))) (name . "netrc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:me@apgwoz.com . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/apg/netrc") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "af814d20a77910ab6de2161ac37d02586604a192") (source . "git://github.com/apg/netrc") (source_url . "http://github.com/apg/netrc/tree/master"))))))) ("neu-cs2500-handin" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/neu-cs2500-handin.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/neu-cs2500-handin.txt"))) (checksum . "d48c433d69d75ea03c029ec0207faa928796e757") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "net-lib" "drracket" "drracket-plugin-lib")) (description . "") (implies . ()) (last-checked . 1632904206) (last-edit . 1471636915) (last-updated . 1502816196) (modules . ((lib "neu-cs2500-handin/updater.rkt") (lib "neu-cs2500-handin/client.rkt") (lib "neu-cs2500-handin/handin-multi.rkt") (lib "neu-cs2500-handin/this-collection.rkt") (lib "neu-cs2500-handin/client-gui.rkt"))) (name . "neu-cs2500-handin") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "git://github.com/nuprl/cs2500-client#f2016") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d48c433d69d75ea03c029ec0207faa928796e757") (source . "git://github.com/nuprl/cs2500-client#f2016") (source_url . "http://github.com/nuprl/cs2500-client/tree/master#f2016"))))))) ("neu-fall18" . #hasheq((author . "") (authors . ()) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/neu-fall18.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Package neu-fall18 is missing a required field: 'source\n  context...:\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (implies . ()) (last-checked . 1632904207) (last-edit . 1632906423) (last-updated . 1621814828) (modules . ()) (name . "neu-fall18") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (ring:1 . #t))) (source . "") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "") (source_url . ""))))))) ("neuron" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/neuron.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/neuron.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/neuron.txt"))) (checksum . "a8ecafec0c6398c35423348cb02ec229869c8b15") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("neuron-lib" "neuron-doc")) (description . "Decentralized Software Organisms") (implies . ("neuron-lib" "neuron-doc")) (last-checked . 1632904207) (last-edit . 1531026540) (last-updated . 1563516050) (modules . ()) (name . "neuron") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:dedbox@gmail.com . #t) (concurrency . #t) (experimental . #t) (network . #t) (ring:1 . #t) (serialization . #t))) (source . "https://github.com/dedbox/racket-neuron.git?path=neuron") (tags . ("concurrency" "experimental" "network" "serialization")) (versions . #hash((default . #hasheq((checksum . "a8ecafec0c6398c35423348cb02ec229869c8b15") (source . "https://github.com/dedbox/racket-neuron.git?path=neuron") (source_url . "https://github.com/dedbox/racket-neuron.git?path=neuron"))))))) ("neuron-doc" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/neuron-doc.txt") (docs . (("main" "neuron" "doc/neuron@neuron-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/neuron-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/neuron-doc.txt"))) (checksum . "a8ecafec0c6398c35423348cb02ec229869c8b15") (checksum-error . #f) (collection . "neuron") (conflicts . ()) (dependencies . ("base" "neuron-lib" "at-exp-lib" "pict-lib" "racket-doc" "sandbox-lib" "scribble-lib")) (description . "Documentation for neuron") (implies . ()) (last-checked . 1632904207) (last-edit . 1523807242) (last-updated . 1563516051) (modules . ((lib "neuron/scribblings/base.rkt") (lib "neuron/scribblings/tech-report/concurrency.scrbl") (lib "neuron/scribblings/main.scrbl") (lib "neuron/scribblings/reference/control-your-resources.scrbl") (lib "neuron/scribblings/reference/concurrency.scrbl") (lib "neuron/scribblings/reference.scrbl") (lib "neuron/scribblings/reference/data-flow.scrbl") (lib "neuron/scribblings/drawings.rkt") (lib "neuron/scribblings/reference/evaluation.scrbl") (lib "neuron/scribblings/tech-report.scrbl") (lib "neuron/scribblings/guide.scrbl"))) (name . "neuron-doc") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:dedbox@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-neuron.git?path=neuron-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a8ecafec0c6398c35423348cb02ec229869c8b15") (source . "https://github.com/dedbox/racket-neuron.git?path=neuron-doc") (source_url . "https://github.com/dedbox/racket-neuron.git?path=neuron-doc"))))))) ("neuron-lib" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/neuron-lib.txt") (test-failure-log . "server/built/test-fail/neuron-lib.txt") (test-success-log . #f))) (checksum . "a8ecafec0c6398c35423348cb02ec229869c8b15") (checksum-error . #f) (collection . "neuron") (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Impelementation of neuron") (implies . ()) (last-checked . 1632904207) (last-edit . 1523807272) (last-updated . 1563516051) (modules . ((lib "neuron/process.rkt") (lib "neuron/process/exchanger.rkt") (lib "neuron/network/tcp.rkt") (lib "neuron/exchanger.rkt") (lib "neuron/process/control.rkt") (lib "neuron/process/messaging.rkt") (lib "neuron/reprovide.rkt") (lib "neuron/evaluation.rkt") (lib "neuron/socket.rkt") (lib "neuron/main.rkt") (lib "neuron/event.rkt") (lib "neuron/codec.rkt") (lib "neuron/syntax.rkt"))) (name . "neuron-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:dedbox@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-neuron.git?path=neuron-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a8ecafec0c6398c35423348cb02ec229869c8b15") (source . "https://github.com/dedbox/racket-neuron.git?path=neuron-lib") (source_url . "https://github.com/dedbox/racket-neuron.git?path=neuron-lib"))))))) ("neuron-shell" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/neuron-shell.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "6f60ede1866a8a419e44972ea11220d0457e8acb") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1555373198) (dependencies . ("base" "scribble-lib")) (description . "Interactive UI for Neuron") (implies . ()) (last-checked . 1632904208) (last-edit . 1555608963) (last-updated . 1555625168) (modules . ((lib "scribblings/neuron-shell.scrbl") (lib "neuron/shell.rkt"))) (name . "neuron-shell") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:dedbox@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-neuron-shell.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6f60ede1866a8a419e44972ea11220d0457e8acb") (source . "https://github.com/dedbox/racket-neuron-shell.git") (source_url . "https://github.com/dedbox/racket-neuron-shell.git"))))))) ("nevermore" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nevermore.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/nevermore.txt"))) (checksum . "20c6533176bd47c56aa94287fada6909b87ff03a") (checksum-error . #f) (collection . "nevermore") (conflicts . ()) (date-added . 1567407940) (dependencies . ("base" "rackunit-lib")) (description . "A silly little Racket package that will never change. Its purpose is to be used to test racket-docker builds.") (implies . ()) (last-checked . 1632904208) (last-edit . 1569046865) (last-updated . 1567414404) (modules . ((lib "nevermore/main.rkt"))) (name . "nevermore") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ci . #t) (nevermore . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/nevermore.git") (tags . ("ci" "nevermore")) (versions . #hash((default . #hasheq((checksum . "20c6533176bd47c56aa94287fada6909b87ff03a") (source . "https://github.com/Bogdanp/nevermore.git") (source_url . "https://github.com/Bogdanp/nevermore.git"))))))) ("nix" . #hasheq((author . "jubnzv@gmail.com") (authors . ("jubnzv@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/nix.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nix.txt") (test-failure-log . "server/built/test-fail/nix.txt") (test-success-log . #f))) (checksum . "a0e4107110c15880606b6098b97b73654e4cb50a") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1551250919) (dependencies . ()) (description . "Racket bindings to common UNIX APIs.") (implies . ()) (last-checked . 1632904208) (last-edit . 1551250919) (last-updated . 1551250919) (modules . ((lib "nix/nix/semaphores.rkt") (lib "nix/nix/main.rkt") (lib "nix/nix/test.rkt") (lib "nix/nix/defines.rkt") (lib "nix/nix/shm.rkt") (lib "nix/nix/private/errors.rkt"))) (name . "nix") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:jubnzv@gmail.com . #t) (ffi . #t) (libc . #t) (ring:1 . #t) (systems . #t) (unix . #t))) (source . "https://github.com/jubnzv/nix.rkt.git") (tags . ("ffi" "libc" "systems" "unix")) (versions . #hash((default . #hasheq((checksum . "a0e4107110c15880606b6098b97b73654e4cb50a") (source . "https://github.com/jubnzv/nix.rkt.git") (source_url . "https://github.com/jubnzv/nix.rkt.git"))))))) ("nlopt" . #hasheq((author . "kominek@gmail.com") (authors . ("kominek@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/nlopt.txt") (docs . (("main" "nlopt" "doc/nlopt@nlopt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nlopt.txt") (test-failure-log . "server/built/test-fail/nlopt.txt") (test-success-log . #f))) (checksum . "52946146fe798bb35d1e601500d87e34f4c7365b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "math-lib" "math-doc" "racket-doc" "scribble-lib")) (description . "FFI wrapper for the NLopt nonlinear optimization library.") (implies . ()) (last-checked . 1632904209) (last-edit . 1430604051) (last-updated . 1547998902) (modules . ((lib "nlopt/docs/nlopt.scrbl") (lib "nlopt/main.rkt") (lib "nlopt/safe.rkt") (lib "nlopt/docs/algorithms.scrbl") (lib "examples/unsafe-example2.rkt") (lib "nlopt/docs/safe.scrbl") (lib "examples/highlevel-example.rkt") (lib "examples/safe-example2.rkt") (lib "examples/unsafe-example1.rkt") (lib "examples/stress-test.rkt") (lib "nlopt/highlevel.rkt") (lib "examples/safe-example1.rkt") (lib "nlopt/docs/unsafe.scrbl") (lib "nlopt/unsafe.rkt") (lib "tests/highlevel.rkt") (lib "nlopt/docs/highlevel.scrbl") (lib "tests/unsafe.rkt"))) (name . "nlopt") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:kominek@gmail.com . #t) (ffi . #t) (numerical . #t) (optimization . #t) (ring:1 . #t))) (source . "git://github.com/jkominek/nlopt") (tags . ("ffi" "numerical" "optimization")) (versions . #hash((default . #hasheq((checksum . "52946146fe798bb35d1e601500d87e34f4c7365b") (source . "git://github.com/jkominek/nlopt") (source_url . "http://github.com/jkominek/nlopt/tree/master"))))))) ("no-vert-bar-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "no-vert-bar-lang" "doc/no-vert-bar-lang@no-vert-bar-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/no-vert-bar-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/no-vert-bar-lang.txt"))) (checksum . "3e31489f2b3aff73f50cade704b724b5578af7fb") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit" "scribble-lib" "racket-doc")) (description . "a lang-extension that reads `|` as a normal character") (implies . ()) (last-checked . 1632904209) (last-edit . 1468330488) (last-updated . 1549910535) (modules . ((lib "no-vert-bar/scribblings/no-vert-bar-lang.scrbl") (lib "no-vert-bar/tests/test.rkt") (lib "no-vert-bar/reader.rkt") (lib "no-backslash/lang/reader.rkt") (lib "no-backslash/tests/test.rkt") (lib "no-backslash/reader.rkt") (lib "no-vert-bar/lang/reader.rkt"))) (name . "no-vert-bar-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lang-extension . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/no-vert-bar-lang") (tags . ("lang-extension")) (versions . #hash((default . #hasheq((checksum . "3e31489f2b3aff73f50cade704b724b5578af7fb") (source . "git://github.com/AlexKnauth/no-vert-bar-lang") (source_url . "http://github.com/AlexKnauth/no-vert-bar-lang/tree/master"))))))) ("noise" . #hasheq((author . "racket@jverkamp.com") (authors . ("racket@jverkamp.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "manual" "doc/manual@noise/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/noise.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/noise.txt"))) (checksum . "435173a377406e3ecc03cc02f39a0a725eb3a87b") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1628194981) (dependencies . ("base" "typed-racket-lib" "images-doc" "images-lib" "racket-doc" "scribble-lib")) (description . "Implements perlin and simplex noise in typed racket based on the implementations from http://webstaff.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf") (implies . ()) (last-checked . 1632904209) (last-edit . 1628194981) (last-updated . 1628282106) (modules . ((lib "noise/manual.scrbl") (lib "noise/main.rkt"))) (name . "noise") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (algorithms . #t) (author:racket@jverkamp.com . #t) (math . #t) (noise . #t) (ring:1 . #t))) (source . "https://github.com/jpverkamp/noise.git#master") (tags . ("algorithms" "math" "noise")) (versions . #hash((default . #hasheq((checksum . "435173a377406e3ecc03cc02f39a0a725eb3a87b") (source . "https://github.com/jpverkamp/noise.git#master") (source_url . "https://github.com/jpverkamp/noise.git#master"))))))) ("non-det" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/non-det.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/non-det.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/non-det.txt"))) (checksum . "e26cdb7cb8152df912e239323fad8bb6b3a8b05f") (checksum-error . #f) (collection . "non-det") (conflicts . ()) (dependencies . ("chk-lib" "base" "text-table")) (description . "Racket non-determinism") (implies . ()) (last-checked . 1632904210) (last-edit . 1511196489) (last-updated . 1512418057) (modules . ((lib "non-det/examples/steam-cart.rkt") (lib "non-det/opt.rkt") (lib "non-det/examples/linear-std.rkt") (lib "non-det/main.rkt") (lib "non-det/logic.rkt"))) (name . "non-det") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (logic . #t) (ring:1 . #t))) (source . "https://github.com/jeapostrophe/non-det.git") (tags . ("logic")) (versions . #hash((default . #hasheq((checksum . "e26cdb7cb8152df912e239323fad8bb6b3a8b05f") (source . "https://github.com/jeapostrophe/non-det.git") (source_url . "https://github.com/jeapostrophe/non-det.git"))))))) ("north" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "north" "doc/north@north/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/north.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/north.txt"))) (checksum . "08353f574489c65907a0dd15c4c1629e18d77027") (checksum-error . #f) (collection . "north") (conflicts . ()) (date-added . 1548674759) (dependencies . ("base" "db-lib" "gregor-lib" "parser-tools-lib" "at-exp-lib" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A database migration tool.") (implies . ()) (last-checked . 1632904210) (last-edit . 1548674759) (last-updated . 1603356250) (modules . ((lib "north/adapter/postgres.rkt") (lib "north/main.rkt") (lib "north/base.rkt") (lib "north/adapter/base.rkt") (lib "north/adapter/sqlite.rkt") (lib "north/cli.rkt") (lib "north/tool/syntax-color.rkt") (lib "north/north.scrbl") (lib "north/lang/reader.rkt"))) (name . "north") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (db . #t) (migrations . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-north.git?path=north") (tags . ("db" "migrations" "web")) (versions . #hash((default . #hasheq((checksum . "08353f574489c65907a0dd15c4c1629e18d77027") (source . "https://github.com/Bogdanp/racket-north.git?path=north") (source_url . "https://github.com/Bogdanp/racket-north.git?path=north"))))))) ("nproc" . #hasheq((author . "davidwil@posteo.de") (authors . ("davidwil@posteo.de")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "nproc" "doc/nproc@nproc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nproc.txt") (test-failure-log . "server/built/test-fail/nproc.txt") (test-success-log . #f))) (checksum . "779fe7db83918a6ade7cf27f64d2fd5f9358f8bc") (checksum-error . #f) (collection . "nproc") (conflicts . ()) (date-added . 1601809529) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A simple wrapper to num_processors in gnulib's nproc module") (implies . ()) (last-checked . 1632904210) (last-edit . 1601822678) (last-updated . 1601822678) (modules . ((lib "nproc/private/install.rkt") (lib "nproc/scribblings/nproc.scrbl") (lib "nproc/main.rkt"))) (name . "nproc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:davidwil@posteo.de . #t) (gnu . #t) (gnulib . #t) (ring:1 . #t))) (source . "https://github.com/jeroanan/nproc.git") (tags . ("gnu" "gnulib")) (versions . #hash((default . #hasheq((checksum . "779fe7db83918a6ade7cf27f64d2fd5f9358f8bc") (source . "https://github.com/jeroanan/nproc.git") (source_url . "https://github.com/jeroanan/nproc.git"))))))) ("numformat-old" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "numformat-old" "doc/numformat-old@numformat-old/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/numformat-old.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/numformat-old.txt"))) (checksum . "e0b44f190a7a8c03169e4671a5d15cec5a619598") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Number Formatting") (implies . ()) (last-checked . 1632904211) (last-edit . 1456794591) (last-updated . 1601441031) (modules . ((lib "numformat-old/numformat-old.scrbl") (lib "numformat-old/main.rkt"))) (name . "numformat-old") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (finance . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/numformat-old.zip") (tags . ("finance")) (versions . #hash((default . #hasheq((checksum . "e0b44f190a7a8c03169e4671a5d15cec5a619598") (source . "http://www.neilvandyke.org/racket/numformat-old.zip") (source_url . "http://www.neilvandyke.org/racket/numformat-old.zip"))))))) ("numspell" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "numspell" "doc/numspell@numspell/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/numspell.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/numspell.txt"))) (checksum . "60f30a535e6e11bb4c3596af14708fb6cd9402ea") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Spelling Numbers as English") (implies . ()) (last-checked . 1632904212) (last-edit . 1456649070) (last-updated . 1502816197) (modules . ((lib "numspell/numspell.scrbl") (lib "numspell/main.rkt"))) (name . "numspell") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (finance . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/numspell.zip") (tags . ("finance")) (versions . #hash((default . #hasheq((checksum . "60f30a535e6e11bb4c3596af14708fb6cd9402ea") (source . "http://www.neilvandyke.org/racket/numspell.zip") (source_url . "http://www.neilvandyke.org/racket/numspell.zip"))))))) ("nvim-client" . #hasheq((author . "hiphish@posteo.de hiphish@openmailbox.org") (authors . ("hiphish@posteo.de" "hiphish@openmailbox.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "nvim-client" "doc/nvim-client@nvim-client/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/nvim-client.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/nvim-client.txt"))) (checksum . "c7d0a3d7ceaebd59955e6d2aee16352098c82d8a") (checksum-error . #f) (collection . "nvim") (conflicts . ()) (dependencies . ("base" "msgpack" "unix-socket-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "unix-socket-doc" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "API client for the Neovim text editor") (implies . ()) (last-checked . 1632904213) (last-edit . 1541802329) (last-updated . 1620469751) (modules . ((lib "nvim/client/exn-fail-rpc.rkt") (lib "nvim/api/tabpage.rkt") (lib "nvim/client/types.rkt") (lib "nvim/scribblings/intro.scrbl") (lib "nvim/scribblings/api.scrbl") (lib "nvim/scribblings/rplugin.scrbl") (lib "nvim/api/buffer.rkt") (lib "nvim/scribblings/nvim-client.scrbl") (lib "nvim/client.rkt") (lib "nvim/client/rpc-session.rkt") (lib "nvim/scribblings/rpc.scrbl") (lib "nvim/rplugin.rkt") (lib "nvim/main.rkt") (lib "nvim/api/window.rkt") (lib "nvim/api.rkt") (lib "nvim/api/nvim.rkt"))) (name . "nvim-client") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:hiphish@openmailbox.org . #t) (author:hiphish@posteo.de . #t) (neovim . #t) (nvim . #t) (ring:1 . #t))) (source . "https://gitlab.com/HiPhish/neovim.rkt.git?path=nvim-client") (tags . ("neovim" "nvim")) (versions . #hash((default . #hasheq((checksum . "c7d0a3d7ceaebd59955e6d2aee16352098c82d8a") (source . "https://gitlab.com/HiPhish/neovim.rkt.git?path=nvim-client") (source_url . "https://gitlab.com/HiPhish/neovim.rkt.git?path=nvim-client"))))))) ("object-backtrace" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/object-backtrace.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/object-backtrace.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/object-backtrace.txt"))) (checksum . "40de72e273b3c8684ebd2be20989203049e2434a") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1586810429) (dependencies . ()) (description . "") (implies . ()) (last-checked . 1632904213) (last-edit . 1586810429) (last-updated . 1586815817) (modules . ((lib "object-backtrace/main.rkt"))) (name . "object-backtrace") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:samth@ccs.neu.edu . #t) (ring:1 . #t))) (source . "https://github.com/samth/object-backtrace.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "40de72e273b3c8684ebd2be20989203049e2434a") (source . "https://github.com/samth/object-backtrace.git") (source_url . "https://github.com/samth/object-backtrace.git"))))))) ("ocelot" . #hasheq((author . "bornholt@cs.washington.edu") (authors . ("bornholt@cs.washington.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "ocelot" "doc/ocelot@ocelot/index.html"))) (failure-log . "server/built/fail/ocelot.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "58b687cdf22f6c1db4b3322fdbc5b82e9d1bce2b") (checksum-error . #f) (collection . "ocelot") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "sandbox-lib" "rosette" "scribble-lib" "racket-doc")) (description . "A solver-aided relational logic DSL") (implies . ()) (last-checked . 1632904214) (last-edit . 1491969739) (last-updated . 1505334600) (modules . ((lib "ocelot/test/symbolic/alloy/test.rkt") (lib "ocelot/engine/interpretation.rkt") (lib "ocelot/test/concrete/concrete-test.rkt") (lib "ocelot/lib/simplify.rkt") (lib "ocelot/main.rkt") (lib "ocelot/test/symbolic/alloy/ceilingsandfloors.rkt") (lib "ocelot/test/symbolic/symmetry-test.rkt") (lib "ocelot/test/symbolic/simplify-solve-test.rkt") (lib "ocelot/scribblings/ocelot.scrbl") (lib "ocelot/lang/bounds.rkt") (lib "ocelot/lang/ast.rkt") (lib "ocelot/lib/print.rkt") (lib "ocelot/test/util.rkt") (lib "ocelot/lib/simplify-solve.rkt") (lib "ocelot/lib/alloy.rkt") (lib "ocelot/engine/engine.rkt") (lib "ocelot/scribblings/log.rkt") (lib "ocelot/engine/matrix.rkt") (lib "ocelot/engine/matrix-ops.rkt") (lib "ocelot/test/symbolic/symbolic-test.rkt") (lib "ocelot/test/symbolic/alloy/basic.rkt") (lib "ocelot/engine/symmetry.rkt") (lib "ocelot/lang/universe.rkt") (lib "ocelot/engine/tuple.rkt") (lib "ocelot/test/symbolic/simplify-test.rkt") (lib "ocelot/ocelot.rkt") (lib "ocelot/lang/sketch.rkt"))) (name . "ocelot") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (alloy . #t) (author:bornholt@cs.washington.edu . #t) (relational . #t) (ring:1 . #t) (rosette . #t))) (source . "git://github.com/jamesbornholt/ocelot") (tags . ("alloy" "relational" "rosette")) (versions . #hash((default . #hasheq((checksum . "58b687cdf22f6c1db4b3322fdbc5b82e9d1bce2b") (source . "git://github.com/jamesbornholt/ocelot") (source_url . "http://github.com/jamesbornholt/ocelot/tree/master"))))))) ("odysseus" . #hasheq((author . "denis.shirshov@gmail.com") (authors . ("denis.shirshov@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/odysseus.txt") (docs . (("main" "odysseus" "doc/odysseus@odysseus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/odysseus.txt") (test-failure-log . "server/built/test-fail/odysseus.txt") (test-success-log . #f))) (checksum . "9cce7d4276e403be2236639190f8a09519cece02") (checksum-error . #f) (collection . "odysseus") (conflicts . ()) (date-added . 1618756902) (dependencies . ("sha" "sxml" "compatibility-lib" "rackunit" "racket-doc" "scribble-lib")) (description . "Library with handy general-purpose functions and macro as well as specific ones") (implies . ()) (last-checked . 1632904214) (last-edit . 1619002704) (last-updated . 1621088833) (modules . ((lib "odysseus/api/html.rkt") (lib "odysseus/optimize.rkt") (lib "odysseus/api/google.rkt") (lib "odysseus/dataframe.rkt") (lib "odysseus/time.rkt") (lib "odysseus/files.rkt") (lib "odysseus/test.rkt") (lib "odysseus/api/teamup.rkt") (lib "odysseus/type.rkt") (lib "odysseus/base.rkt") (lib "odysseus/api/esri-shapefile.rkt") (lib "odysseus/strings.rkt") (lib "odysseus/hash_test.rkt") (lib "odysseus/hashtree.rkt") (lib "odysseus/docs/odysseus.scrbl") (lib "odysseus/http.rkt") (lib "odysseus/controls.rkt") (lib "odysseus/api/vk.rkt") (lib "odysseus/geo.rkt") (lib "odysseus/api/mediawiki.rkt") (lib "odysseus/json.rkt") (lib "odysseus/text_test.rkt") (lib "odysseus/regexp.rkt") (lib "odysseus/graphics/svg-light.rkt") (lib "odysseus/seqs.rkt") (lib "odysseus/debug.rkt") (lib "odysseus/crypto.rkt") (lib "odysseus/api/uniprot.rkt") (lib "odysseus/sxml.rkt") (lib "odysseus/stats.rkt") (lib "odysseus/graphics/piechart.rkt") (lib "odysseus/unicode.rkt") (lib "odysseus/main.rkt") (lib "odysseus/bytes.rkt") (lib "odysseus/persistents.rkt") (lib "odysseus/whereami.rkt") (lib "odysseus/api/csv.rkt") (lib "odysseus/combinatorics.rkt") (lib "odysseus/alist.rkt") (lib "odysseus/graphics/barchart.rkt") (lib "odysseus/io.rkt") (lib "odysseus/graphics/svg.rkt") (lib "odysseus/image.rkt") (lib "odysseus/tree.rkt") (lib "odysseus/text.rkt") (lib "odysseus/checks.rkt") (lib "odysseus/hash.rkt") (lib "odysseus/symbols.rkt") (lib "odysseus/graphics/color.rkt") (lib "odysseus/graphics/fonts.rkt") (lib "odysseus/units.rkt") (lib "odysseus/interval.rkt") (lib "odysseus/math.rkt"))) (name . "odysseus") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:denis.shirshov@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/prozion/odysseus.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "9cce7d4276e403be2236639190f8a09519cece02") (source . "https://github.com/prozion/odysseus.git") (source_url . "https://github.com/prozion/odysseus.git"))))))) ("oii-422-handin-client" . #hasheq((author . "ifigueroap@gmail.com ") (authors . ("ifigueroap@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/oii-422-handin-client.txt") (test-failure-log . "server/built/test-fail/oii-422-handin-client.txt") (test-success-log . #f))) (checksum . "29d62748d335a1ab283efc3e28c5c93c3737501a") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "net-lib")) (description . "Handin Client for PUCV PL course OII-422") (implies . ()) (last-checked . 1632904214) (last-edit . 1440188264) (last-updated . 1502816198) (modules . ((lib "oii-422-handin-client/client.rkt") (lib "oii-422-handin-client/updater.rkt") (lib "oii-422-handin-client/client-gui.rkt") (lib "oii-422-handin-client/this-collection.rkt") (lib "oii-422-handin-client/handin-multi.rkt"))) (name . "oii-422-handin-client") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:ifigueroap@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/ifigueroap/oii-422-handin-client.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "29d62748d335a1ab283efc3e28c5c93c3737501a") (source . "git://github.com/ifigueroap/oii-422-handin-client.git") (source_url . "http://github.com/ifigueroap/oii-422-handin-client.git/tree/master"))))))) ("onlog" . #hasheq((author . "med.hur@gmail.com") (authors . ("med.hur@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "onlog"))) (failure-log . "server/built/fail/onlog.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "d6756ca99c8f647f47126716fb24698a7f77c80f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1555013294) (dependencies . ()) (description . "Perform operations on log files") (implies . ()) (last-checked . 1632904215) (last-edit . 1555055196) (last-updated . 1555055196) (modules . ((lib "onlog/main.rkt") (lib "onlog/onlog.scrbl"))) (name . "onlog") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:med.hur@gmail.com . #t) (commandline . #t) (logging . #t) (ring:1 . #t) (tools . #t))) (source . "https://github.com/fmind/onlog.git") (tags . ("commandline" "logging" "tools")) (versions . #hash((default . #hasheq((checksum . "d6756ca99c8f647f47126716fb24698a7f77c80f") (source . "https://github.com/fmind/onlog.git") (source_url . "https://github.com/fmind/onlog.git"))))))) ("open-app" . #hasheq((author . "schlee.simon@gmail.com") (authors . ("schlee.simon@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "open-app" "doc/open-app@open-app/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/open-app.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/open-app.txt"))) (checksum . "5503f0d2b5e398c864e6bdacfac9c672bf9b9869") (checksum-error . #f) (collection . "open-app") (conflicts . ()) (date-added . 1590543323) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A utility for opening a file or url with the default application.") (implies . ()) (last-checked . 1632904215) (last-edit . 1590608384) (last-updated . 1527871421) (modules . ((lib "open-app/main.rkt") (lib "open-app/scribblings/open-app.scrbl"))) (name . "open-app") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (app . #t) (application . #t) (author:schlee.simon@gmail.com . #t) (ring:1 . #t) (util . #t) (utilities . #t) (utility . #t))) (source . "https://github.com/SimonLSchlee/open-app.git") (tags . ("app" "application" "util" "utilities" "utility")) (versions . #hash((default . #hasheq((checksum . "5503f0d2b5e398c864e6bdacfac9c672bf9b9869") (source . "https://github.com/SimonLSchlee/open-app.git") (source_url . "https://github.com/SimonLSchlee/open-app.git"))))))) ("openal" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "openal" "doc/openal@openal/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/openal.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/openal.txt"))) (checksum . "50b52525426f4bf2e0c3fd4c2ab4d0c59598e99a") (checksum-error . #f) (collection . "openal") (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "FFI for OpenAL") (implies . ()) (last-checked . 1632904215) (last-edit . 1447718757) (last-updated . 1504538990) (modules . ((lib "openal/main.rkt") (lib "openal/openal.scrbl") (lib "openal/path.rkt"))) (name . "openal") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:jay.mccarthy@gmail.com . #t) (ffi . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/openal") (tags . ("audio" "ffi")) (versions . #hash((default . #hasheq((checksum . "50b52525426f4bf2e0c3fd4c2ab4d0c59598e99a") (source . "git://github.com/jeapostrophe/openal") (source_url . "http://github.com/jeapostrophe/openal/tree/master"))))))) ("openapi-type-provider" . #hasheq((author . "kbtpodifo@gmail.com") (authors . ("kbtpodifo@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "openapi-type-provider" "doc/openapi-type-provider@openapi-type-provider/index.html"))) (failure-log . "server/built/fail/openapi-type-provider.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ba298d11271bb08448f7a5d9f018f5f5c1b8f828") (checksum-error . #f) (collection . "openapi-type-provider") (conflicts . ()) (date-added . 1619208925) (dependencies . ("base" "typed-racket-lib" "typed-racket-more")) (description . "Type provider for OpenAPI schemas. Generate well-typed client libraries in Typed Racket.") (implies . ()) (last-checked . 1632904216) (last-edit . 1619208925) (last-updated . 1619209907) (modules . ((lib "openapi-type-provider/examples/use-type-provider.rkt") (lib "openapi-type-provider/examples/use-openapi-provider.rkt") (lib "openapi-type-provider/openapi-type-provider.rkt") (lib "openapi-type-provider/json-schema.rkt") (lib "openapi-type-provider/utils.rkt") (lib "openapi-type-provider/main.rkt") (lib "openapi-type-provider/scribblings/openapi-type-provider.scrbl") (lib "openapi-type-provider/schema-type-provider.rkt") (lib "openapi-type-provider/tests/utils-tests.rkt") (lib "openapi-type-provider/openapi.rkt"))) (name . "openapi-type-provider") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (api . #t) (author:kbtpodifo@gmail.com . #t) (json . #t) (openapi . #t) (ring:1 . #t) (type-provider . #t) (typed-racket . #t))) (source . "https://github.com/stardust66/openapi-type-provider.git#main") (tags . ("api" "json" "openapi" "type-provider" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "ba298d11271bb08448f7a5d9f018f5f5c1b8f828") (source . "https://github.com/stardust66/openapi-type-provider.git#main") (source_url . "https://github.com/stardust66/openapi-type-provider.git#main"))))))) ("opencl" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "opencl" "doc/opencl@opencl/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/opencl.txt") (success-log . "server/built/install/opencl.txt") (test-failure-log . "server/built/test-fail/opencl.txt") (test-success-log . #f))) (checksum . "f984050b0c02beb6df186d1d531c4a92a98df1a1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "superc" "at-exp-lib" "racket-doc")) (description . "A Racket interface to OpenCL using an FFI") (implies . ()) (last-checked . 1632904216) (last-edit . 1353449271) (last-updated . 1502816199) (modules . ((lib "opencl/racket.rkt") (lib "tests/opencl/samples/atiSamples/EigenValue/EigenValue.rkt") (lib "opencl/c/types.rkt") (lib "opencl/c/4-3.rkt") (lib "tests/opencl/examples/pps/scan.rkt") (lib "opencl/c/4-2.rkt") (lib "tests/opencl/samples/nvidiaSamples/oclDeviceQuery/oclDeviceQuery.rkt") (lib "tests/opencl/samples/nvidiaSamples/oclBandwidthTest/oclBandwidthTest.rkt") (lib "tests/opencl/samples/atiSamples/DwtHaar1D/DwtHaar1D.rkt") (lib "opencl/scribblings/c/5.scrbl") (lib "tests/opencl/samples/atiSamples/MatrixMultiplication/MatrixMultiplication.rkt") (lib "opencl/scribblings/c/types.scrbl") (lib "tests/opencl/samples/atiSamples/Template/Template.rkt") (lib "tests/opencl/samples/atiSamples/BitonicSort/BitonicSort.rkt") (lib "tests/opencl/examples/vmult/racket-list.rkt") (lib "tests/opencl/samples/atiSamples/BlackScholes/BlackScholes.rkt") (lib "tests/opencl/samples/nvidiaSamples/oclDotProduct/oclDotProduct.rkt") (lib "opencl/c/5-4.rkt") (lib "tests/opencl/samples/atiSamples/atiUtils/utils.rkt") (lib "tests/opencl/examples/matrix-transpose/transpose.rkt") (lib "opencl/c/include/cl.rkt") (lib "opencl/c/5-5.rkt") (lib "tests/opencl/examples/vmult/c-loop.rkt") (lib "tests/opencl/test.rkt") (lib "tests/opencl/samples/atiSamples/FastWalshTransform/FastWalshTransform.rkt") (lib "opencl/c/5-9.rkt") (lib "tests/opencl/examples/vmult/c-kernel.rkt") (lib "opencl/c/4.rkt") (lib "opencl/c/5-3.rkt") (lib "tests/opencl/examples/vmult/racket-vector.rkt") (lib "opencl/c/5-6.rkt") (lib "opencl/scribblings/c.scrbl") (lib "opencl/c/5.rkt") (lib "tests/opencl/samples/nvidiaSamples/oclMatVecMul/oclMatVecMul.rkt") (lib "opencl/c/util.rkt") (lib "tests/opencl/samples/atiSamples/MatrixTranspose/MatrixTranspose.rkt") (lib "opencl/c/4-1.rkt") (lib "opencl/c/5-8.rkt") (lib "tests/opencl/samples/atiSamples/FloydWarshall/FloydWarshall.rkt") (lib "tests/opencl/samples/nvidiaSamples/utils/utils.rkt") (lib "opencl/c/5-10.rkt") (lib "opencl/c/tsyntax.rkt") (lib "tests/opencl/samples/atiSamples/BinarySearch/BinarySearch.rkt") (lib "opencl/c/syntax.rkt") (lib "opencl/c/5-2.rkt") (lib "tests/opencl/samples/nvidiaSamples/oclVectorAdd/oclVectorAdd.rkt") (lib "opencl/c.rkt") (lib "opencl/c/include/extract-defines.rkt") (lib "opencl/scribblings/c/4.scrbl") (lib "tests/opencl/samples/atiSamples/BinomialOption/BinomialOption.rkt") (lib "tests/opencl/samples/nvidiaSamples/oclTranspose/oclTranspose.rkt") (lib "opencl/c/5-7.rkt") (lib "opencl/c/5-1.rkt") (lib "tests/opencl/examples/vmult/make-data.rkt") (lib "tests/opencl/examples/vmult/racket-unsafe-vector.rkt") (lib "opencl/c/constants.rkt") (lib "opencl/c/lib.rkt") (lib "opencl/scribblings/opencl.scrbl") (lib "tests/opencl/examples/vmult/opencl.rkt"))) (name . "opencl") (ring . 1) (search-terms . #hasheq((|| . #t) (:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ffi . #t) (parallel . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/opencl/master") (tags . ("" "ffi" "parallel")) (versions . #hash((default . #hasheq((checksum . "f984050b0c02beb6df186d1d531c4a92a98df1a1") (source . "github://github.com/jeapostrophe/opencl/master") (source_url . "http://github.com/jeapostrophe/opencl/tree/master"))))))) ("opencpu" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "opencpu"))) (failure-log . "server/built/fail/opencpu.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ab5433418a3a19aeafe239901c3a530d745e2dbd") (checksum-error . #f) (collection . "opencpu") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "adjutor" "scribble-lib" "racket-doc" "net-doc")) (description . "A Racket library for calling R functions through the OpenCPU API.") (implies . ()) (last-checked . 1632904216) (last-edit . 1501019293) (last-updated . 1535932669) (modules . ((lib "opencpu/scribblings/opencpu.scrbl") (lib "opencpu/main.rkt"))) (name . "opencpu") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (API . #t) (R . #t) (api . #t) (author:philip@philipmcgrath.com . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/LiberalArtist/opencpu") (tags . ("API" "api" "net" "R" "web")) (versions . #hash((default . #hasheq((checksum . "ab5433418a3a19aeafe239901c3a530d745e2dbd") (source . "git://github.com/LiberalArtist/opencpu") (source_url . "http://github.com/LiberalArtist/opencpu/tree/master"))))))) ("opencv" . #hasheq((author . "petersamarin@gmail.com") (authors . ("petersamarin@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/opencv.txt") (test-failure-log . "server/built/test-fail/opencv.txt") (test-success-log . #f))) (checksum . "8124eb6b620769137656547e83f9d9587ab37c23") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "FFI bindings to the OpenCV library") (implies . ()) (last-checked . 1632904216) (last-edit . 1496527503) (last-updated . 1502816199) (modules . ((lib "tutorials/06_feature2d/01-Harris-corner-detector.rkt") (lib "tutorials/01_introduction/01-display-image.rkt") (lib "tutorials/03_imgproc/VideoCanny.rkt") (lib "tutorials/03_imgproc/20-2-finding-contours-in-your-video.rkt") (lib "tutorials/08_objdetect/CascadeClassifier.rkt") (lib "opencv/main.rkt") (lib "opencv/objdetect.rkt") (lib "tutorials/01_introduction/02-load-save-image.rkt") (lib "tutorials/03_imgproc/SimpleImageProcessing.rkt") (lib "tutorials/03_imgproc/01-smoothing-images.rkt") (lib "tutorials/03_imgproc/VideoSobel.rkt") (lib "opencv/videoio.rkt") (lib "opencv/imgproc.rkt") (lib "opencv/core.rkt") (lib "tutorials/03_imgproc/VideoSimple.rkt") (lib "opencv/calib3d.rkt") (lib "opencv/utilities.rkt") (lib "opencv/types.rkt") (lib "opencv/highgui.rkt"))) (name . "opencv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:petersamarin@gmail.com . #t) (computer-vision . #t) (ffi . #t) (ring:1 . #t))) (source . "git://github.com/oetr/racket-opencv") (tags . ("computer-vision" "ffi")) (versions . #hash((default . #hasheq((checksum . "8124eb6b620769137656547e83f9d9587ab37c23") (source . "git://github.com/oetr/racket-opencv") (source_url . "http://github.com/oetr/racket-opencv/tree/master"))))))) ("opengl" . #hasheq((author . "stephanh42@gmail.com") (authors . ("stephanh42@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "opengl" "doc/opengl@opengl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/opengl.txt") (test-failure-log . "server/built/test-fail/opengl.txt") (test-success-log . #f))) (checksum . "1aaf2b2836680f807fbec5234ed475585b41b4ab") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "scribble-lib" "srfi-lite-lib" "draw-doc" "gui-doc" "gui-lib" "racket-doc")) (description . "Exhaustive Racket bindings to OpenGL") (implies . ()) (last-checked . 1632904217) (last-edit . 1353008427) (last-updated . 1513718131) (modules . ((lib "tests/opengl/gltest.rkt") (lib "opengl/readspec.rkt") (lib "opengl/util.rkt") (lib "tests/opengl/planet.rkt") (lib "tests/opengl/gears.rkt") (lib "tests/opengl/viewer.rkt") (lib "opengl/main.rkt") (lib "tests/opengl/shadertest.rkt") (lib "tests/opengl/vbotest.rkt") (lib "tests/opengl/bitmaptest.rkt") (lib "opengl/opengl.scrbl"))) (name . "opengl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stephanh42@gmail.com . #t) (ffi . #t) (graphics . #t) (opengl . #t) (ring:1 . #t))) (source . "github://github.com/stephanh42/RacketGL/master") (tags . ("ffi" "graphics" "opengl")) (versions . #hash((default . #hasheq((checksum . "1aaf2b2836680f807fbec5234ed475585b41b4ab") (source . "github://github.com/stephanh42/RacketGL/master") (source_url . "http://github.com/stephanh42/RacketGL/tree/master"))))))) ("openh264-x86_64-macosx" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/openh264-x86_64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/openh264-x86_64-macosx.txt"))) (checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632904217) (last-edit . 1499546884) (last-updated . 1597939202) (modules . ()) (name . "openh264-x86_64-macosx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:leif@leifandersen.net . #t) (openh264 . #t) (ring:1 . #t) (video . #t))) (source . "git://github.com/videolang/native-pkgs?path=openh264-x86_64-macosx") (tags . ("openh264" "video")) (versions . #hash((default . #hasheq((checksum . "61c4b07ffd82127a049cf12f74c09c20730eba1d") (source . "git://github.com/videolang/native-pkgs?path=openh264-x86_64-macosx") (source_url . "http://github.com/videolang/native-pkgs/tree/master?path=openh264-x86_64-macosx"))))))) ("openmpi" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "mpi" "doc/mpi@openmpi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/openmpi.txt") (test-failure-log . "server/built/test-fail/openmpi.txt") (test-success-log . #f))) (checksum . "5aea47a93cf08efdd1bf2cb470c059b5197d04c1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "scribble-lib" "at-exp-lib" "racket-doc")) (description . "A Racket interface to MPI based on an FFI to OpenMPI") (implies . ()) (last-checked . 1632904277) (last-edit . 1353357473) (last-updated . 1502816236) (modules . ((lib "mpi/ffi/types.rkt") (lib "tests/mpi/master_server.rkt") (lib "mpi/ffi/mpi.rkt") (lib "mpi/ffi/parsec.rkt") (lib "mpi/main.rkt") (lib "mpi/ffi/constants.rkt") (lib "mpi/mpi.scrbl") (lib "mpi/ffi.rkt") (lib "mpi/ffi/lib.rkt"))) (name . "openmpi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ffi . #t) (parallel . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/openmpi/master") (tags . ("ffi" "parallel")) (versions . #hash((default . #hasheq((checksum . "5aea47a93cf08efdd1bf2cb470c059b5197d04c1") (source . "github://github.com/jeapostrophe/openmpi/master") (source_url . "http://github.com/jeapostrophe/openmpi/tree/master"))))))) ("openweather" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "openweather" "doc/openweather@openweather/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/openweather.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/openweather.txt"))) (checksum . "a0c4e4832b3ac05c1c38fbf64c6ce3ff583882e7") (checksum-error . #f) (collection . "openweather") (conflicts . ()) (dependencies . ("opt" "uri" "http11" "tjson" "typed-racket-lib" "base" "scribble-lib" "racket-doc" "typed-racket-lib" "typed-racket-more" "rackunit-lib")) (description . "Library for OpenWeatherMap's API.  Only US, with zipcode is currently supported.") (implies . ()) (last-checked . 1632904278) (last-edit . 1544801063) (last-updated . 1620469822) (modules . ((lib "openweather/main.rkt") (lib "openweather/scribblings/openweather.scrbl") (lib "openweather/src/invoke.rkt"))) (name . "openweather") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (api . #t) (author:ray.racine@gmail.com . #t) (ring:1 . #t) (weather . #t))) (source . "https://gitlab.com/RayRacine/openweather.git") (tags . ("api" "weather")) (versions . #hash((default . #hasheq((checksum . "a0c4e4832b3ac05c1c38fbf64c6ce3ff583882e7") (source . "https://gitlab.com/RayRacine/openweather.git") (source_url . "https://gitlab.com/RayRacine/openweather.git"))))))) ("operational-transformation" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/operational-transformation.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/operational-transformation.txt"))) (checksum . "685d60091bff0428c2ec3cd8c4f63c8ef8b28de5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "operational-transformation-demo" "operational-transformation-lib" "profile-lib")) (description . "Operational Transformation (OT) for Racket. Wrapper package for both operational-transformation-lib and operational-transformation-demo.") (implies . ()) (last-checked . 1632904278) (last-edit . 1470267088) (last-updated . 1630596931) (modules . ()) (name . "operational-transformation") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/racket-operational-transformation?path=operational-transformation") (tags . ()) (versions . #hash((default . #hasheq((checksum . "685d60091bff0428c2ec3cd8c4f63c8ef8b28de5") (source . "git://github.com/tonyg/racket-operational-transformation?path=operational-transformation") (source_url . "http://github.com/tonyg/racket-operational-transformation/tree/master?path=operational-transformation"))))))) ("operational-transformation-demo" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/operational-transformation-demo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/operational-transformation-demo.txt"))) (checksum . "685d60091bff0428c2ec3cd8c4f63c8ef8b28de5") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (dependencies . ("base" "operational-transformation-lib" "gui-lib")) (description . "Demo collaborative editor using Operational Transformation (OT).") (implies . ()) (last-checked . 1632904278) (last-edit . 1469237883) (last-updated . 1630596932) (modules . ((lib "operational-transformation-demo/multiserver.rkt") (lib "operational-transformation-demo/server.rkt") (lib "operational-transformation-demo/multiclient.rkt") (lib "operational-transformation-demo/client.rkt"))) (name . "operational-transformation-demo") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/racket-operational-transformation?path=operational-transformation-demo") (tags . ()) (versions . #hash((default . #hasheq((checksum . "685d60091bff0428c2ec3cd8c4f63c8ef8b28de5") (source . "git://github.com/tonyg/racket-operational-transformation?path=operational-transformation-demo") (source_url . "http://github.com/tonyg/racket-operational-transformation/tree/master?path=operational-transformation-demo"))))))) ("operational-transformation-lib" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/operational-transformation-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/operational-transformation-lib.txt"))) (checksum . "685d60091bff0428c2ec3cd8c4f63c8ef8b28de5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "profile-lib")) (description . "Operational Transformation (OT) for Racket. Just the operational-transformation collect, no demo included.") (implies . ()) (last-checked . 1632904278) (last-edit . 1469237930) (last-updated . 1630596932) (modules . ((lib "operational-transformation/main.rkt") (lib "operational-transformation/server.rkt") (lib "operational-transformation/operation.rkt") (lib "operational-transformation/text/simple-document.rkt") (lib "operational-transformation/client.rkt") (lib "operational-transformation/text.rkt"))) (name . "operational-transformation-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/racket-operational-transformation?path=operational-transformation-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "685d60091bff0428c2ec3cd8c4f63c8ef8b28de5") (source . "git://github.com/tonyg/racket-operational-transformation?path=operational-transformation-lib") (source_url . "http://github.com/tonyg/racket-operational-transformation/tree/master?path=operational-transformation-lib"))))))) ("opt" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "opt" "doc/opt@opt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/opt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/opt.txt"))) (checksum . "83544737512709bfbdf5d65a956ee12c4cc7e822") (checksum-error . #f) (collection . "opt") (conflicts . ()) (dependencies . ("typed-racket-lib" "base" "scribble-lib" "typed-racket-lib" "typed-racket-more" "racket-doc" "rackunit-lib")) (description . "Optional and Either data type utilities.\r\nProvides util function for Typed Racket's Option type as well as defines an Either type.") (implies . ()) (last-checked . 1632904279) (last-edit . 1528392570) (last-updated . 1620469823) (modules . ((lib "opt/option.rkt") (lib "opt/either.rkt") (lib "opt/scribblings/opt.scrbl"))) (name . "opt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (datatype . #t) (either . #t) (option . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/opt.git") (tags . ("datatype" "either" "option")) (versions . #hash((default . #hasheq((checksum . "83544737512709bfbdf5d65a956ee12c4cc7e822") (source . "https://gitlab.com/RayRacine/opt.git") (source_url . "https://gitlab.com/RayRacine/opt.git"))))))) ("optimization-coach" . #hasheq((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "optimization-coach" "doc/optimization-coach@optimization-coach/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "eef9474eea0176baa60fc5518943a1429f13cd76") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.6") ("drracket" #:version "1.6") ("typed-racket-lib" #:version "1.7") "profile-lib" "rackunit-lib" "gui-lib" "data-lib" "source-syntax" "images-lib" "sandbox-lib" "string-constants-lib" "scribble-lib")) (description . "Optimization Coach Plug-In for DrRacket") (implies . ()) (last-checked . 1632904279) (last-edit . 1357949062) (last-updated . 1502816237) (modules . ((lib "optimization-coach/utils.rkt") (lib "optimization-coach/structs.rkt") (lib "optimization-coach/hidden-costs.rkt") (lib "optimization-coach/tool.rkt") (lib "optimization-coach/causality-merging.rkt") (lib "optimization-coach/display.rkt") (lib "optimization-coach/locality-merging.rkt") (lib "optimization-coach/sandbox.rkt") (lib "optimization-coach/inlining.rkt") (lib "optimization-coach/report.rkt") (lib "optimization-coach/main.rkt") (lib "optimization-coach/profiling.rkt") (lib "optimization-coach/scribblings/optimization-coach.scrbl") (lib "optimization-coach/instrumentation.rkt") (lib "optimization-coach/typed-racket.rkt"))) (name . "optimization-coach") (ring . 1) (search-terms . #hasheq((:docs: . #t) (author:stamourv@racket-lang.org . #t) (dev . #t) (performance . #t) (ring:1 . #t))) (source . "github://github.com/stamourv/optimization-coach/racket-5.3.6") (tags . ("dev" "performance")) (versions . #hash((default . #hasheq((checksum . "8697352656d07d7319e0b2eddfd73988343548ef") (source . "github://github.com/stamourv/optimization-coach/master") (source_url . "http://github.com/stamourv/optimization-coach/tree/master"))) ("5.3.6" . #hasheq((checksum . "eef9474eea0176baa60fc5518943a1429f13cd76") (source . "github://github.com/stamourv/optimization-coach/racket-5.3.6") (source_url . "http://github.com/stamourv/optimization-coach/tree/racket-5.3.6"))) ("6.2" . #hasheq((checksum . "13d377555821930f238fa3f0a68314b451ad78d4") (source . "github://github.com/stamourv/optimization-coach/racket-6.2") (source_url . "http://github.com/stamourv/optimization-coach/tree/racket-6.2"))) ("6.3" . #hasheq((checksum . "5f03e2c43e276cf51fa370920874721089222498") (source . "github://github.com/stamourv/optimization-coach/racket-6.3") (source_url . "http://github.com/stamourv/optimization-coach/tree/racket-6.3"))))))) ("option-bind" . #hasheq((author . "jmj@fellowhuman.com") (authors . ("jmj@fellowhuman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "option-bind" "doc/option-bind@option-bind/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/option-bind.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/option-bind.txt"))) (checksum . "8d8346d612e401d7b44a04a121881f66e5a43cf6") (checksum-error . #f) (collection . "option-bind") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "scribble-lib" "racket-doc" "typed-racket-lib" "typed-racket-more")) (description . "Monadic shorthand for propagating #f in Option types") (implies . ()) (last-checked . 1632904280) (last-edit . 1439185026) (last-updated . 1502816238) (modules . ((lib "option-bind/main.rkt") (lib "option-bind/scribblings/option-bind.scrbl"))) (name . "option-bind") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:jmj@fellowhuman.com . #t) (ring:1 . #t))) (source . "git://github.com/RenaissanceBug/option-bind") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8d8346d612e401d7b44a04a121881f66e5a43cf6") (source . "git://github.com/RenaissanceBug/option-bind") (source_url . "http://github.com/RenaissanceBug/option-bind/tree/master"))))))) ("option-contract" . #hash((author . "chrdimo@seas.harvard.edu robby@racket-lang.org") (authors . ("chrdimo@seas.harvard.edu" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "399ad3351df83dee3dd2e8c4bec14ad5bcd2be8e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("option-contract-lib" "option-contract-doc")) (description . "Experimental libraries for option contracts") (implies . ()) (last-checked . 1632904280) (last-edit . 1442259513) (last-updated . 1571869188) (modules . ()) (name . "option-contract") (ring . 0) (search-terms . #hasheq((author:chrdimo@seas.harvard.edu . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/option-contract?path=option-contract") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "399ad3351df83dee3dd2e8c4bec14ad5bcd2be8e") (source . "git://github.com/racket/option-contract?path=option-contract") (source_url . "http://github.com/racket/option-contract/tree/master?path=option-contract"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("6.2.1" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("option-contract-doc" . #hash((author . "chrdimo@seas.harvard.edu robby@racket-lang.org") (authors . ("chrdimo@seas.harvard.edu" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "option-contract" "doc/option-contract@option-contract-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "399ad3351df83dee3dd2e8c4bec14ad5bcd2be8e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.17") "option-contract-lib" "scribble-lib" "racket-doc")) (description . "Documentation for option-contract") (implies . ()) (last-checked . 1632904280) (last-edit . 1442259513) (last-updated . 1571869188) (modules . ((lib "scribblings/option-contract.scrbl"))) (name . "option-contract-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:chrdimo@seas.harvard.edu . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/option-contract?path=option-contract-doc") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "399ad3351df83dee3dd2e8c4bec14ad5bcd2be8e") (source . "git://github.com/racket/option-contract?path=option-contract-doc") (source_url . "http://github.com/racket/option-contract/tree/master?path=option-contract-doc"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("6.2.1" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("option-contract-lib" . #hash((author . "chrdimo@seas.harvard.edu robby@racket-lang.org") (authors . ("chrdimo@seas.harvard.edu" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "399ad3351df83dee3dd2e8c4bec14ad5bcd2be8e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.17"))) (description . "Implementation (no documentation) for option-contract") (implies . ()) (last-checked . 1632904280) (last-edit . 1442259513) (last-updated . 1571869189) (modules . ((lib "racket/contract/option.rkt"))) (name . "option-contract-lib") (ring . 0) (search-terms . #hasheq((author:chrdimo@seas.harvard.edu . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/option-contract?path=option-contract-lib") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "399ad3351df83dee3dd2e8c4bec14ad5bcd2be8e") (source . "git://github.com/racket/option-contract?path=option-contract-lib") (source_url . "http://github.com/racket/option-contract/tree/master?path=option-contract-lib"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("6.2.1" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("option-contract-test" . #hash((author . "chrdimo@seas.harvard.edu robby@racket-lang.org") (authors . ("chrdimo@seas.harvard.edu" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "399ad3351df83dee3dd2e8c4bec14ad5bcd2be8e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.17") "rackunit-lib" "option-contract-lib")) (description . "Tests for option-contract") (implies . ()) (last-checked . 1632904281) (last-edit . 1442259513) (last-updated . 1571869189) (modules . ((lib "tests/option-contract.rkt"))) (name . "option-contract-test") (ring . 0) (search-terms . #hasheq((author:chrdimo@seas.harvard.edu . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/option-contract?path=option-contract-test") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "399ad3351df83dee3dd2e8c4bec14ad5bcd2be8e") (source . "git://github.com/racket/option-contract?path=option-contract-test") (source_url . "http://github.com/racket/option-contract/tree/master?path=option-contract-test"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("6.2.1" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("org" . #hasheq((author . "tgbugs@gmail.com") (authors . ("tgbugs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "5a396bef98d9a3cd9ee929f21cd47612dd6cb1ac") (checksum-error . #f) (collection . "org") (conflicts . ()) (date-added . 1632084504) (dependencies . ("base" "laundry")) (description . "Org mode as #lang org and DrRacket support.") (implies . ()) (last-checked . 1632904281) (last-edit . 1632084504) (last-updated . 1632084577) (modules . ((lib "org/main.rkt") (lib "org/mode.rkt"))) (name . "org") (ring . 1) (search-terms . #hasheq((author:tgbugs@gmail.com . #t) (org . #t) (ring:1 . #t))) (source . "https://github.com/tgbugs/laundry.git?path=org#next") (tags . ("org")) (versions . #hash((default . #hasheq((checksum . "5a396bef98d9a3cd9ee929f21cd47612dd6cb1ac") (source . "https://github.com/tgbugs/laundry.git?path=org#next") (source_url . "https://github.com/tgbugs/laundry.git?path=org#next"))))))) ("org-mode" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/org-mode.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/org-mode.txt"))) (checksum . "49b1f46aaccc02fa1cedde36b8eda3ffa6a772ec") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "A native Racket reader and writer for org-mode files.") (implies . ()) (last-checked . 1632904281) (last-edit . 1354315195) (last-updated . 1502816239) (modules . ((lib "file/org-mode.rkt"))) (name . "org-mode") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (file . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/org-mode/master") (tags . ("file")) (versions . #hash((default . #hasheq((checksum . "49b1f46aaccc02fa1cedde36b8eda3ffa6a772ec") (source . "github://github.com/jeapostrophe/org-mode/master") (source_url . "http://github.com/jeapostrophe/org-mode/tree/master"))))))) ("osc" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "osc" "doc/osc@osc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/osc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/osc.txt"))) (checksum . "18caebb14eefe3482976e738654aee2f18c5f88d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Open Sound Control data definitions") (implies . ()) (last-checked . 1632904281) (last-edit . 1389819505) (last-updated . 1513624552) (modules . ((lib "osc/osc-to-bytes.rkt") (lib "osc/examples/send-to-renoise.rkt") (lib "osc/examples/try-sending.rkt") (lib "osc/examples/decode-supercollider.rkt") (lib "osc/main.rkt") (lib "osc/osc.scrbl") (lib "osc/osc-time.rkt") (lib "osc/osc-defns.rkt") (lib "osc/examples/libpcap-read.rkt") (lib "osc/osc-common.rkt") (lib "osc/bytes-to-osc.rkt") (lib "osc/osc-quickcheck.rkt") (lib "osc/examples/decode-helper.rkt"))) (name . "osc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (io . #t) (ring:1 . #t))) (source . "github://github.com/jbclements/osc/master") (tags . ("audio" "io")) (versions . #hash((default . #hasheq((checksum . "18caebb14eefe3482976e738654aee2f18c5f88d") (source . "github://github.com/jbclements/osc/master") (source_url . "http://github.com/jbclements/osc/tree/master"))))))) ("oss" . #hasheq((author . "") (authors . ()) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/oss.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Package oss is missing a required field: 'source\n  context...:\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (implies . ()) (last-checked . 1632904281) (last-edit . 1632906423) (last-updated . 1621814900) (modules . ()) (name . "oss") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (ring:1 . #t))) (source . "") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "") (source_url . ""))))))) ("otp" . #hasheq((author . "yilin@kebab-ca.se") (authors . ("yilin@kebab-ca.se")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/otp.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/otp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/otp.txt"))) (checksum . "0757167eac914c45a756c090c4bdf5410080c145") (checksum-error . #f) (collection . "otp") (conflicts . ()) (date-added . 1612236772) (dependencies . ("base" "otp-lib" "typed-otp-lib" "otp-doc")) (description . "Implementation of one-time passwords as specified by RFC4226 and RFC6238.") (implies . ("otp-lib" "typed-otp-lib" "otp-doc")) (last-checked . 1632904281) (last-edit . 1612286794) (last-updated . 1614117297) (modules . ((lib "otp/test.rkt"))) (name . "otp") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:yilin@kebab-ca.se . #t) (crypto . #t) (otp . #t) (ring:1 . #t))) (source . "https://github.com/yilinwei/otp.git?path=otp") (tags . ("crypto" "otp")) (versions . #hash((default . #hasheq((checksum . "0757167eac914c45a756c090c4bdf5410080c145") (source . "https://github.com/yilinwei/otp.git?path=otp") (source_url . "https://github.com/yilinwei/otp.git?path=otp"))))))) ("otp-doc" . #hasheq((author . "yilin@kebab-ca.se") (authors . ("yilin@kebab-ca.se")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "otp" "doc/otp@otp-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/otp-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/otp-doc.txt"))) (checksum . "0757167eac914c45a756c090c4bdf5410080c145") (checksum-error . #f) (collection . "otp") (conflicts . ()) (date-added . 1612291950) (dependencies . ("base" "racket-doc" "scribble-lib" "otp-lib" "crypto-lib" "crypto-doc")) (description . "") (implies . ()) (last-checked . 1632904282) (last-edit . 1612291950) (last-updated . 1614117298) (modules . ((lib "otp/scribblings/utils.rkt"))) (name . "otp-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:yilin@kebab-ca.se . #t) (ring:1 . #t))) (source . "https://github.com/yilinwei/otp.git?path=otp-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0757167eac914c45a756c090c4bdf5410080c145") (source . "https://github.com/yilinwei/otp.git?path=otp-doc") (source_url . "https://github.com/yilinwei/otp.git?path=otp-doc"))))))) ("otp-lib" . #hasheq((author . "yilin@kebab-ca.se") (authors . ("yilin@kebab-ca.se")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/otp-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/otp-lib.txt"))) (checksum . "0757167eac914c45a756c090c4bdf5410080c145") (checksum-error . #f) (collection . "otp") (conflicts . ()) (date-added . 1612286684) (dependencies . ("base" "crypto-lib" "rackunit-lib")) (description . "") (implies . ()) (last-checked . 1632904282) (last-edit . 1612292077) (last-updated . 1614117299) (modules . ((lib "otp/private/hotp.rkt") (lib "otp/main.rkt") (lib "otp/private/utils.rkt") (lib "otp/private/error.rkt") (lib "otp/private/totp.rkt") (lib "otp/private/checksum.rkt"))) (name . "otp-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:yilin@kebab-ca.se . #t) (ring:1 . #t))) (source . "https://github.com/yilinwei/otp.git?path=otp-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0757167eac914c45a756c090c4bdf5410080c145") (source . "https://github.com/yilinwei/otp.git?path=otp-lib") (source_url . "https://github.com/yilinwei/otp.git?path=otp-lib"))))))) ("overeasy" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "overeasy" "doc/overeasy@overeasy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/overeasy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/overeasy.txt"))) (checksum . "01df274d364d0fd0925c50d87c4caeab19c37c6e") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "mcfly")) (description . "Racket Language Test Engine") (implies . ()) (last-checked . 1632904282) (last-edit . 1456463388) (last-updated . 1594059513) (modules . ((lib "overeasy/main.rkt") (lib "overeasy/overeasy.scrbl") (lib "overeasy/overeasy.rkt") (lib "overeasy/test-overeasy.rkt"))) (name . "overeasy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t) (testing . #t))) (source . "http://www.neilvandyke.org/racket/overeasy.zip") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "01df274d364d0fd0925c50d87c4caeab19c37c6e") (source . "http://www.neilvandyke.org/racket/overeasy.zip") (source_url . "http://www.neilvandyke.org/racket/overeasy.zip"))))))) ("overscan" . #hasheq((author . "mark@markwunsch.com") (authors . ("mark@markwunsch.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/overscan.txt") (docs . (("main" "overscan" "doc/overscan@overscan/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/overscan.txt") (test-failure-log . "server/built/test-fail/overscan.txt") (test-success-log . #f))) (checksum . "f198e6b4c1f64cf5720e66ab5ad27fdc4b9e67e9") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "draw-lib" "gui-lib" "sgl" "scribble-lib" "racket-doc")) (description . "A toolkit and live coding environment for broadcasting video.") (implies . ()) (last-checked . 1632904283) (last-edit . 1530804520) (last-updated . 1537559888) (modules . ((lib "overscan/scribblings/overscan/introspection.scrbl") (lib "gstreamer/gst.rkt") (lib "gstreamer/video.rkt") (lib "gstreamer/event.rkt") (lib "gstreamer/element.rkt") (lib "overscan/scribblings/overscan/gstreamer/pad.scrbl") (lib "overscan/macos.rkt") (lib "gstreamer/private/opengl.rkt") (lib "gstreamer/main.rkt") (lib "gstreamer/draw.rkt") (lib "overscan/video.rkt") (lib "overscan/scribblings/overscan/gstreamer/elements.scrbl") (lib "gstreamer/buffer.rkt") (lib "gstreamer/context.rkt") (lib "overscan/scribblings/overscan/gstreamer/buffer.scrbl") (lib "overscan/scribblings/overscan/gstreamer/bin.scrbl") (lib "overscan/scribblings/overscan/getting-started.scrbl") (lib "gstreamer/caps.rkt") (lib "gstreamer/message.rkt") (lib "gstreamer/clock.rkt") (lib "overscan/scribblings/overscan.scrbl") (lib "overscan/main.rkt") (lib "overscan/scribblings/examples/logo.rkt") (lib "gstreamer/elements.rkt") (lib "overscan/scribblings/overscan/gstreamer/bus.scrbl") (lib "gstreamer/factories.rkt") (lib "gstreamer/bin.rkt") (lib "overscan/scribblings/overscan/gstreamer/caps.scrbl") (lib "overscan/draw.rkt") (lib "gstreamer/private/structure.rkt") (lib "gstreamer/bus.rkt") (lib "overscan/twitch.rkt") (lib "ffi/unsafe/introspection.rkt") (lib "overscan/scribblings/overscan/gstreamer.scrbl") (lib "overscan/scribblings/overscan/gstreamer/element.scrbl") (lib "overscan/scribblings/utilities.rkt") (lib "gstreamer/device.rkt") (lib "overscan/scribblings/overscan/gstreamer/clock.scrbl") (lib "overscan/scribblings/overscan/gstreamer/device.scrbl") (lib "overscan/scribblings/overscan/broadcasting.scrbl") (lib "gstreamer/private/core.rkt") (lib "overscan/youtube.rkt") (lib "gstreamer/appsink.rkt") (lib "gstreamer/gui.rkt") (lib "gstreamer/pipeline.rkt"))) (name . "overscan") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:mark@markwunsch.com . #t) (broadcasting . #t) (ffi . #t) (gobject-introspection . #t) (gstreamer . #t) (media . #t) (ring:1 . #t) (video . #t))) (source . "https://github.com/mwunsch/overscan.git") (tags . ("broadcasting" "ffi" "gobject-introspection" "gstreamer" "media" "video")) (versions . #hash((default . #hasheq((checksum . "f198e6b4c1f64cf5720e66ab5ad27fdc4b9e67e9") (source . "https://github.com/mwunsch/overscan.git") (source_url . "https://github.com/mwunsch/overscan.git"))))))) ("package-analysis" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "package-analysis" "doc/package-analysis@package-analysis/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/package-analysis.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/package-analysis.txt"))) (checksum . "785bc9b1eac503c9359d9d08936422f6f47ce82b") (checksum-error . #f) (collection . "package-analysis") (conflicts . ()) (date-added . 1570856027) (dependencies . ("base" "rebellion" "net-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A package for analyzing the Racket package ecosystem") (implies . ()) (last-checked . 1632904283) (last-edit . 1570856027) (last-updated . 1598748583) (modules . ((lib "package-analysis/client.scrbl") (lib "package-analysis/data-model.rkt") (lib "package-analysis/client.rkt") (lib "package-analysis/main.rkt") (lib "package-analysis/main.scrbl") (lib "package-analysis/package-version.scrbl") (lib "package-analysis/package-dependency.scrbl") (lib "package-analysis/catalog.scrbl") (lib "package-analysis/package-details.scrbl"))) (name . "package-analysis") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (analytics . #t) (author:jackhfirth@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/package-analysis.git") (tags . ("analytics")) (versions . #hash((default . #hasheq((checksum . "785bc9b1eac503c9359d9d08936422f6f47ce82b") (source . "https://github.com/jackfirth/package-analysis.git") (source_url . "https://github.com/jackfirth/package-analysis.git"))))))) ("packet-socket" . #hasheq((author . "tonygarnockjones@gmail.com schuster@ccs.neu.edu") (authors . ("tonygarnockjones@gmail.com" "schuster@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/packet-socket.txt") (success-log . "server/built/install/packet-socket.txt") (test-failure-log . "server/built/test-fail/packet-socket.txt") (test-success-log . #f))) (checksum . "831e638e9aa9b0c3c8ecc2cbb4d1b91f57b93f1b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "dynext-lib")) (description . "Access to raw Ethernet frames from Racket") (implies . ()) (last-checked . 1632904284) (last-edit . 1402690841) (last-updated . 1588009599) (modules . ((lib "packet-socket/main.rkt") (lib "packet-socket/private/install.rkt"))) (name . "packet-socket") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:schuster@ccs.neu.edu . #t) (author:tonygarnockjones@gmail.com . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/racket-packet-socket") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "831e638e9aa9b0c3c8ecc2cbb4d1b91f57b93f1b") (source . "git://github.com/tonyg/racket-packet-socket") (source_url . "http://github.com/tonyg/racket-packet-socket/tree/master"))))))) ("paddle" . #hasheq((author . "matt@jadud.com") (authors . ("matt@jadud.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "paddle" "doc/paddle@paddle/index.html"))) (failure-log . "server/built/fail/paddle.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "38e2ff034635b988549d875bb9d8bd1ab0252ad2") (checksum-error . #f) (collection . "paddle") (conflicts . ()) (date-added . 1547908613) (dependencies . ("base" "draw-lib" "gui-lib" "sgl")) (description . "Paddle is a microworld. ") (implies . ()) (last-checked . 1632904284) (last-edit . 1547908613) (last-updated . 1585051814) (modules . ((lib "paddle/src/types.rkt") (lib "paddle/examples/sheep-wolves.rkt") (lib "paddle/examples/gameoflife.rkt") (lib "paddle/examples/diffusion.rkt") (lib "paddle/examples/direction-test.rkt") (lib "paddle/src/util.rkt") (lib "paddle/scribblings/misc.scrbl") (lib "paddle/examples/termites.rkt") (lib "paddle/src/netlogo.rkt") (lib "paddle/src/agents.rkt") (lib "paddle/src/log.rkt") (lib "paddle/src/patches.rkt") (lib "paddle/scribblings/paddle.scrbl") (lib "paddle/main.rkt") (lib "paddle/examples/boids.rkt") (lib "paddle/src/world.rkt") (lib "paddle/src/gui.rkt") (lib "paddle/src/get-set.rkt") (lib "paddle/examples/rle-patterns.rkt") (lib "paddle/src/state.rkt") (lib "paddle/src/agentsets.rkt") (lib "paddle/src/breeds.rkt") (lib "paddle/src/quadtree.rkt") (lib "paddle/src/plot.rkt") (lib "paddle/examples/rle.rkt"))) (name . "paddle") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (agent-based . #t) (author:matt@jadud.com . #t) (microworld . #t) (ring:1 . #t) (turtles . #t))) (source . "https://github.com/jadudm/paddle.git") (tags . ("agent-based" "microworld" "turtles")) (versions . #hash((default . #hasheq((checksum . "38e2ff034635b988549d875bb9d8bd1ab0252ad2") (source . "https://github.com/jadudm/paddle.git") (source_url . "https://github.com/jadudm/paddle.git"))))))) ("pangu" . #hasheq((author . "mail@kisaragi-hiu.com") (authors . ("mail@kisaragi-hiu.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/pangu.txt") (docs . (("main" "pangu" "doc/pangu@pangu/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pangu.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pangu.txt"))) (checksum . "56c2d70132e0d756dc69f9777eb752ff989f5ede") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1576535118) (dependencies . ("base" "rackunit-lib" "scribble-lib" "rackunit-lib")) (description . "Paranoid text spacing with Racket.") (implies . ()) (last-checked . 1632904284) (last-edit . 1576535118) (last-updated . 1576535118) (modules . ((lib "pangu/main.rkt") (lib "pangu/test.rkt") (lib "pangu/scribblings/pangu.scrbl"))) (name . "pangu") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mail@kisaragi-hiu.com . #t) (ring:1 . #t))) (source . "https://github.com/kisaragi-hiu/pangu.rkt.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "56c2d70132e0d756dc69f9777eb752ff989f5ede") (source . "https://github.com/kisaragi-hiu/pangu.rkt.git") (source_url . "https://github.com/kisaragi-hiu/pangu.rkt.git"))))))) ("parameter" . #hasheq((author . "samth@racket-lang.org") (authors . ("samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/parameter.txt") (docs . (("main" "parameter" "doc/parameter@parameter/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parameter.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parameter.txt"))) (checksum . "d084723e260a133e792317286fb05494aabc29ed") (checksum-error . #f) (collection . "parameter") (conflicts . ()) (dependencies . ("base" "scheme-lib" "scribble-lib")) (description . "Parameter utilities") (implies . ()) (last-checked . 1632904285) (last-edit . 1451684399) (last-updated . 1502816241) (modules . ((lib "parameter/parameter.scrbl") (lib "parameter/main.rkt"))) (name . "parameter") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:samth@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/samth/parameter.plt") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d084723e260a133e792317286fb05494aabc29ed") (source . "git://github.com/samth/parameter.plt") (source_url . "http://github.com/samth/parameter.plt/tree/master"))))))) ("paren-shape" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "paren-shape-pattern-expanders" "doc/paren-shape-pattern-expanders@paren-shape/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/paren-shape.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/paren-shape.txt"))) (checksum . "0ad6a34d3e93088e3e6c5a69b78a0724d5f4290f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" ("syntax-classes-lib" #:version "1.1") "rackunit-lib" "scribble-lib" "racket-doc" "syntax-classes-doc")) (description . "Deprecated. Use syntax-classes-lib instead.") (implies . ()) (last-checked . 1632904285) (last-edit . 1486111652) (last-updated . 1502816241) (modules . ((lib "paren-shape/pattern-expander.rkt") (lib "paren-shape/scribblings/paren-shape-pattern-expanders.scrbl"))) (name . "paren-shape") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (deprecated . #t) (ring:1 . #t) (syntax-parse . #t))) (source . "git://github.com/AlexKnauth/paren-shape") (tags . ("deprecated" "syntax-parse")) (versions . #hash((default . #hasheq((checksum . "0ad6a34d3e93088e3e6c5a69b78a0724d5f4290f") (source . "git://github.com/AlexKnauth/paren-shape") (source_url . "http://github.com/AlexKnauth/paren-shape/tree/master"))) ("6.2.1" . #hasheq((checksum . "a3eba0a54826a9b3d7277fbd983d677fce6c7dd3") (source . "git://github.com/AlexKnauth/paren-shape#up-to-v6.2.1") (source_url . "http://github.com/AlexKnauth/paren-shape/tree/master#up-to-v6.2.1"))) ("6.2" . #hasheq((checksum . "a3eba0a54826a9b3d7277fbd983d677fce6c7dd3") (source . "git://github.com/AlexKnauth/paren-shape#up-to-v6.2.1") (source_url . "http://github.com/AlexKnauth/paren-shape/tree/master#up-to-v6.2.1"))) ("6.1.1" . #hasheq((checksum . "a3eba0a54826a9b3d7277fbd983d677fce6c7dd3") (source . "git://github.com/AlexKnauth/paren-shape#up-to-v6.2.1") (source_url . "http://github.com/AlexKnauth/paren-shape/tree/master#up-to-v6.2.1"))))))) ("parendown" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parendown.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parendown.txt"))) (checksum . "9c846654947f1605df9b318b202202d2ea3c8baf") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1615519535) (dependencies . ("parendown-lib")) (description . "A weak opening parenthesis, good for eliminating indentation.") (implies . ("parendown-lib")) (last-checked . 1632904286) (last-edit . 1615519535) (last-updated . 1615519535) (modules . ()) (name . "parendown") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (lang . #t) (lang-extension . #t) (language . #t) (lathe . #t) (ring:1 . #t))) (source . "https://github.com/lathe/parendown-for-racket.git?path=parendown#main") (tags . ("lang" "lang-extension" "language" "lathe")) (versions . #hash((default . #hasheq((checksum . "9c846654947f1605df9b318b202202d2ea3c8baf") (source . "https://github.com/lathe/parendown-for-racket.git?path=parendown#main") (source_url . "https://github.com/lathe/parendown-for-racket.git?path=parendown#main"))))))) ("parendown-doc" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "parendown" "doc/parendown@parendown-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parendown-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parendown-doc.txt"))) (checksum . "9c846654947f1605df9b318b202202d2ea3c8baf") (checksum-error . #f) (collection . "parendown") (conflicts . ()) (date-added . 1615519523) (dependencies . ("base" "parendown-lib" "racket-doc" "scribble-lib")) (description . "A weak opening parenthesis, good for eliminating indentation. (doc)") (implies . ()) (last-checked . 1632904286) (last-edit . 1615519523) (last-updated . 1615519523) (modules . ((lib "parendown/scribblings/parendown.scrbl"))) (name . "parendown-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:rokitna@hotmail.com . #t) (lang . #t) (lang-extension . #t) (language . #t) (lathe . #t) (ring:1 . #t))) (source . "https://github.com/lathe/parendown-for-racket.git?path=parendown-doc#main") (tags . ("lang" "lang-extension" "language" "lathe")) (versions . #hash((default . #hasheq((checksum . "9c846654947f1605df9b318b202202d2ea3c8baf") (source . "https://github.com/lathe/parendown-for-racket.git?path=parendown-doc#main") (source_url . "https://github.com/lathe/parendown-for-racket.git?path=parendown-doc#main"))))))) ("parendown-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parendown-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parendown-lib.txt"))) (checksum . "9c846654947f1605df9b318b202202d2ea3c8baf") (checksum-error . #f) (collection . "parendown") (conflicts . ()) (date-added . 1615519511) (dependencies . ("base")) (description . "A weak opening parenthesis, good for eliminating indentation. (lib)") (implies . ()) (last-checked . 1632904286) (last-edit . 1615519511) (last-updated . 1615519511) (modules . ((lib "parendown/lang/reader.rkt") (lib "parendown/main.rkt"))) (name . "parendown-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (lang . #t) (lang-extension . #t) (language . #t) (lathe . #t) (ring:1 . #t))) (source . "https://github.com/lathe/parendown-for-racket.git?path=parendown-lib#main") (tags . ("lang" "lang-extension" "language" "lathe")) (versions . #hash((default . #hasheq((checksum . "9c846654947f1605df9b318b202202d2ea3c8baf") (source . "https://github.com/lathe/parendown-for-racket.git?path=parendown-lib#main") (source_url . "https://github.com/lathe/parendown-for-racket.git?path=parendown-lib#main"))))))) ("parendown-test" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parendown-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parendown-test.txt"))) (checksum . "9c846654947f1605df9b318b202202d2ea3c8baf") (checksum-error . #f) (collection . "parendown") (conflicts . ()) (date-added . 1615519498) (dependencies . ("base" "parendown-lib" "rackunit-lib")) (description . "A weak opening parenthesis, good for eliminating indentation. (test)") (implies . ()) (last-checked . 1632904286) (last-edit . 1615519498) (last-updated . 1615519498) (modules . ((lib "parendown/tests.rkt"))) (name . "parendown-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (lang . #t) (lang-extension . #t) (language . #t) (lathe . #t) (ring:1 . #t))) (source . "https://github.com/lathe/parendown-for-racket.git?path=parendown-test#main") (tags . ("lang" "lang-extension" "language" "lathe")) (versions . #hash((default . #hasheq((checksum . "9c846654947f1605df9b318b202202d2ea3c8baf") (source . "https://github.com/lathe/parendown-for-racket.git?path=parendown-test#main") (source_url . "https://github.com/lathe/parendown-for-racket.git?path=parendown-test#main"))))))) ("parenlog" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/parenlog.txt") (docs . (("main" "parenlog" "doc/parenlog@parenlog/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parenlog.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parenlog.txt"))) (checksum . "b02b9960c18b3c238b08a68d334f7ac2641e785c") (checksum-error . #f) (collection . "parenlog") (conflicts . ()) (dependencies . ("base" "chk-lib" "racket-doc" "scribble-lib")) (description . "A language that is like Prolog, but parenthetical.") (implies . ()) (last-checked . 1632904287) (last-edit . 1375448743) (last-updated . 1513635359) (modules . ((lib "parenlog/examples/type-class.rkt") (lib "parenlog/lang/reader.rkt") (lib "parenlog/lang.rkt") (lib "parenlog/core.rkt") (lib "parenlog/examples/linear.rkt") (lib "parenlog/examples/family-tree.rkt") (lib "parenlog/examples/short.rkt") (lib "parenlog/examples/type.rkt") (lib "parenlog/parenlog.scrbl") (lib "parenlog/parenlog.rkt") (lib "parenlog/stx.rkt") (lib "parenlog/main.rkt"))) (name . "parenlog") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (language . #t) (logic . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/parenlog/master") (tags . ("language" "logic")) (versions . #hash((default . #hasheq((checksum . "b02b9960c18b3c238b08a68d334f7ac2641e785c") (source . "github://github.com/jeapostrophe/parenlog/master") (source_url . "http://github.com/jeapostrophe/parenlog/tree/master"))) ("5.3.4.11" . #hasheq((checksum . "8b4167b95636f2fdd86ef6b6df68a0c6f11abcd5") (source . "github://github.com/jeapostrophe/parenlog/old") (source_url . "http://github.com/jeapostrophe/parenlog/tree/old"))))))) ("parquet" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "parquet" "doc/parquet@parquet/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parquet.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parquet.txt"))) (checksum . "19a26155d832d1102003ddd67dcd40c2fb1c5325") (checksum-error . #f) (collection . "parquet") (conflicts . ()) (dependencies . ("base" "thrift" "rackunit-lib" "racket-index" "scribble-lib" "racket-doc" "sandbox-lib" "cover-coveralls")) (description . "Support for the Apache Parquet column-oriented file format. Uses the thrift package for actual file handling.") (implies . ()) (last-checked . 1632904287) (last-edit . 1544220183) (last-updated . 1544047190) (modules . ((lib "parquet/tests/file.rkt") (lib "parquet/scribblings/_parquet.scrbl") (lib "parquet/scribblings/file.scrbl") (lib "parquet/generated/parquet-encode.rkt") (lib "parquet/format.rkt") (lib "parquet/main.rkt") (lib "parquet/tests/test-doc-complete.rkt") (lib "parquet/scribblings/parquet.scrbl") (lib "parquet/generated/parquet-decode.rkt") (lib "parquet/generated/parquet.rkt") (lib "parquet/file.rkt") (lib "parquet/tests/parquet.rkt") (lib "parquet/scribblings/generated-parquet.scrbl"))) (name . "parquet") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johnstonskj@gmail.com . #t) (data . #t) (ring:1 . #t))) (source . "https://github.com/johnstonskj/racket-parquet.git") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "19a26155d832d1102003ddd67dcd40c2fb1c5325") (source . "https://github.com/johnstonskj/racket-parquet.git") (source_url . "https://github.com/johnstonskj/racket-parquet.git"))))))) ("parsack" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "parsack" "doc/parsack@parsack/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parsack.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parsack.txt"))) (checksum . "3a02d3788b7bb5d6b4a05b3b2651d9309005c0fd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "A basic Parsec (Haskell's monadic parser combinator library) implementation.") (implies . ()) (last-checked . 1632904287) (last-edit . 1374792748) (last-updated . 1582911210) (modules . ((lib "parsack/examples/csv-parser-quoted.rkt") (lib "parsack/examples/json-parser.rkt") (lib "parsack/examples/scheme-parser.rkt") (lib "parsack/examples/tests/url-query-parser-tests.rkt") (lib "parsack/examples/csv-parser-basic.rkt") (lib "parsack/examples/tests/csv-parser-quoted-tests.rkt") (lib "parsack/examples/url-query-parser.rkt") (lib "parsack/tests/parse-result-tests.rkt") (lib "parsack/examples/csv-parser-sepBy.rkt") (lib "parsack/examples/tests/json-perf-test.rkt") (lib "parsack/tests/test-utils.rkt") (lib "parsack/main.rkt") (lib "parsack/examples/tests/csv-parser-basic-tests.rkt") (lib "parsack/examples/http-request-parser.rkt") (lib "parsack/tests/parsack-tests.rkt") (lib "parsack/examples/tests/http-request-parser-tests.rkt") (lib "parsack/examples/tests/csv-parser-sepBy-tests.rkt") (lib "parsack/tests/run-all-tests.rkt") (lib "parsack/parsack.rkt") (lib "parsack/tests/bytestring-tests.rkt") (lib "parsack/parsack.scrbl") (lib "parsack/examples/tests/json-parser-tests.rkt"))) (name . "parsack") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stchang@racket-lang.org . #t) (parsing . #t) (ring:1 . #t))) (source . "github://github.com/stchang/parsack/master/") (tags . ("parsing")) (versions . #hash((default . #hasheq((checksum . "3a02d3788b7bb5d6b4a05b3b2651d9309005c0fd") (source . "github://github.com/stchang/parsack/master/") (source_url . "http://github.com/stchang/parsack/tree/master/"))))))) ("parse-qif" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/parse-qif.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parse-qif.txt") (test-failure-log . "server/built/test-fail/parse-qif.txt") (test-success-log . #f))) (checksum . "0e7e061ecc1709d5ebe0cd4fcbd56597e1e5575f") (checksum-error . #f) (collection . "parse-qif") (conflicts . ()) (dependencies . ()) (description . "Basic QIF-parsing code, used to apply categories to downloaded transactions") (implies . ()) (last-checked . 1632904287) (last-edit . 1520224880) (last-updated . 1590984614) (modules . ((lib "parse-qif/parse-qif.rkt") (lib "parse-qif/main.rkt"))) (name . "parse-qif") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:clements@racket-lang.org . #t) (parser . #t) (parsing . #t) (qif . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/parse-qif.git") (tags . ("parser" "parsing" "qif")) (versions . #hash((default . #hasheq((checksum . "0e7e061ecc1709d5ebe0cd4fcbd56597e1e5575f") (source . "https://github.com/jbclements/parse-qif.git") (source_url . "https://github.com/jbclements/parse-qif.git"))))))) ("parser-combinator" . #hasheq((author . "nathan@nixpulvis.com") (authors . ("nathan@nixpulvis.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/parser-combinator.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parser-combinator.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parser-combinator.txt"))) (checksum . "9635c0479c1841e122a75faa35d1d76333ef3cb6") (checksum-error . #f) (collection . "parser-combinator") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "htdp-lib")) (description . "Parser / Lexer Library, and JSON Implementation.") (implies . ()) (last-checked . 1632904288) (last-edit . 1528595197) (last-updated . 1557019310) (modules . ((lib "parser-combinator/json.rkt") (lib "parser-combinator/json-tests.rkt") (lib "parser-combinator/parse.rkt") (lib "parser-combinator/parse-tests.rkt"))) (name . "parser-combinator") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:nathan@nixpulvis.com . #t) (json . #t) (parser . #t) (ring:1 . #t))) (source . "https://github.com/nixpulvis/parser-combinator.git") (tags . ("json" "parser")) (versions . #hash((default . #hasheq((checksum . "9635c0479c1841e122a75faa35d1d76333ef3cb6") (source . "https://github.com/nixpulvis/parser-combinator.git") (source_url . "https://github.com/nixpulvis/parser-combinator.git"))))))) ("parser-tools" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("parser-tools-lib" "parser-tools-doc")) (description . "Lex- and Yacc-style parsing tools") (implies . ("parser-tools-lib" "parser-tools-doc")) (last-checked . 1632904288) (last-edit . 1417659583) (last-updated . 1598694611) (modules . ()) (name . "parser-tools") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "d76cb89c36c22ce569475b628164393c9ed35fb6") (source . "git://github.com/racket/parser-tools/?path=parser-tools") (source_url . "git://github.com/racket/parser-tools/?path=parser-tools"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("parser-tools-doc" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "parser-tools" "doc/parser-tools@parser-tools-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scheme-lib" "racket-doc" "syntax-color-doc" "parser-tools-lib" "scribble-lib")) (description . "documentation part of parser-tools") (implies . ()) (last-checked . 1632904288) (last-edit . 1417659583) (last-updated . 1598694611) (modules . ((lib "parser-tools/parser-tools.scrbl"))) (name . "parser-tools-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "d76cb89c36c22ce569475b628164393c9ed35fb6") (source . "git://github.com/racket/parser-tools/?path=parser-tools-doc") (source_url . "git://github.com/racket/parser-tools/?path=parser-tools-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("parser-tools-lib" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "base" "compatibility-lib" "rackunit-lib")) (description . "implementation (no documentation) part of parser-tools") (implies . ()) (last-checked . 1632904288) (last-edit . 1417659583) (last-updated . 1598694612) (modules . ((lib "parser-tools/private-yacc/lalr.rkt") (lib "parser-tools/examples/read.rkt") (lib "parser-tools/lex-sre.rkt") (lib "parser-tools/examples/calc.rkt") (lib "parser-tools/private-lex/actions.rkt") (lib "parser-tools/private-lex/deriv.rkt") (lib "parser-tools/private-lex/re.rkt") (lib "parser-tools/private-lex/util.rkt") (lib "parser-tools/private-yacc/table.rkt") (lib "parser-tools/private-yacc/yacc-helper.rkt") (lib "parser-tools/private-yacc/graph.rkt") (lib "parser-tools/private-yacc/parser-builder.rkt") (lib "parser-tools/yacc.rkt") (lib "parser-tools/private-yacc/parser-actions.rkt") (lib "parser-tools/private-yacc/grammar.rkt") (lib "parser-tools/yacc-to-scheme.rkt") (lib "parser-tools/private-lex/token.rkt") (lib "parser-tools/private-lex/error-tests.rkt") (lib "parser-tools/private-yacc/lr0.rkt") (lib "parser-tools/private-lex/front.rkt") (lib "parser-tools/lex.rkt") (lib "parser-tools/cfg-parser.rkt") (lib "parser-tools/private-lex/unicode-chars.rkt") (lib "parser-tools/lex-plt-v200.rkt") (lib "parser-tools/private-yacc/input-file-parser.rkt") (lib "parser-tools/private-lex/stx.rkt") (lib "parser-tools/private-lex/token-syntax.rkt"))) (name . "parser-tools-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "d76cb89c36c22ce569475b628164393c9ed35fb6") (source . "git://github.com/racket/parser-tools/?path=parser-tools-lib") (source_url . "git://github.com/racket/parser-tools/?path=parser-tools-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("parted" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "parted" "doc/parted@parted/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/parted.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/parted.txt"))) (checksum . "32e6a6df9f53a568022c1fb7e50d96fc8025fdef") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "mcfly" "overeasy" "sudo")) (description . "Interface to GNU Parted Disk Partion Utility") (implies . ()) (last-checked . 1632904289) (last-edit . 1456470449) (last-updated . 1594059520) (modules . ((lib "parted/parted.scrbl") (lib "parted/parted.rkt") (lib "parted/main.rkt"))) (name . "parted") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/parted.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "32e6a6df9f53a568022c1fb7e50d96fc8025fdef") (source . "http://www.neilvandyke.org/racket/parted.zip") (source_url . "http://www.neilvandyke.org/racket/parted.zip"))))))) ("pcf" . #hasheq((author . "dvanhorn@racket-lang.org") (authors . ("dvanhorn@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "pcf") ("salvage" "redex-to-lang" "doc/redex-to-lang@pcf/index.html"))) (failure-log . "server/built/fail/pcf.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "f04e2ff7f34b89a3dc6c2a70a6a3283f954d3a67") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "redex-lib" "redex-pict-lib" "unstable-lib" "scribble-lib" "racket-doc" "sandbox-lib" "redex-doc" "scribble-doc")) (description . "PCF with Contracts and Symbolic Values") (implies . ()) (last-checked . 1632904290) (last-edit . 1354677836) (last-updated . 1502816244) (modules . ((lib "pcf/lang.rkt") (lib "tests/cpcf/redex.rkt") (lib "pcf/types.rkt") (lib "spcf/heap/lang/reader.rkt") (lib "pcf/heap/test.rkt") (lib "tests/pcf/redex.rkt") (lib "scpcf/heap/lang/reader.rkt") (lib "scpcf/heap/lang.rkt") (lib "pcf/syntax.rkt") (lib "spcf/heap/semantics.rkt") (lib "spcf/heap/syntax.rkt") (lib "pcf/heap/examples/fact5.rkt") (lib "spcf/types.rkt") (lib "scpcf/syntax.rkt") (lib "scpcf/lang.rkt") (lib "cpcf/heap/lang/reader.rkt") (lib "tests/scpcf/make-tests.rkt") (lib "cpcf/syntax.rkt") (lib "tests/spcf/make-tests.rkt") (lib "spcf/heap/test.rkt") (lib "pcf/source/lang.rkt") (lib "pcf/private/racket-pcf.rkt") (lib "scpcf/examples.rkt") (lib "spcf/semantics.rkt") (lib "pcf/private/return.rkt") (lib "pcf/private/prover.rkt") (lib "scpcf/lang/reader.rkt") (lib "scpcf/redex.rkt") (lib "scribblings/redex-to-lang/redex-to-lang.scrbl") (lib "pcf/heap/lang/reader.rkt") (lib "scpcf/heap/test.rkt") (lib "cpcf/heap/syntax.rkt") (lib "cpcf/heap/test.rkt") (lib "pcf/private/subst.rkt") (lib "spcf/redex.rkt") (lib "spcf/lang/reader.rkt") (lib "scpcf/types.rkt") (lib "cpcf/heap/semantics.rkt") (lib "cpcf/lang/reader.rkt") (lib "spcf/examples.rkt") (lib "scpcf/semantics.rkt") (lib "scribblings/pcf/pcf.scrbl") (lib "pcf/redex.rkt") (lib "pcf/private/make-lang.rkt") (lib "pcf/source.rkt") (lib "pcf/private/label.rkt") (lib "tests/cpcf/make-tests.rkt") (lib "pcf/source/lang/reader.rkt") (lib "pcf/heap/lang.rkt") (lib "cpcf/heap/lang.rkt") (lib "cpcf/lang.rkt") (lib "scpcf/heap/semantics.rkt") (lib "spcf/lang.rkt") (lib "tests/pcf/make-tests.rkt") (lib "cpcf/examples.rkt") (lib "pcf/semantics.rkt") (lib "pcf/private/lexical.rkt") (lib "pcf/heap/semantics.rkt") (lib "cpcf/types.rkt") (lib "scpcf/heap/examples.rkt") (lib "tests/spcf/redex.rkt") (lib "tests/scpcf/redex.rkt") (lib "cpcf/test.rkt") (lib "pcf/test.rkt") (lib "cpcf/redex.rkt") (lib "pcf/examples.rkt") (lib "pcf/lang/reader.rkt") (lib "scpcf/heap/syntax.rkt") (lib "pcf/heap/syntax.rkt") (lib "cpcf/semantics.rkt") (lib "spcf/syntax.rkt") (lib "spcf/heap/lang.rkt"))) (name . "pcf") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:dvanhorn@racket-lang.org . #t) (language . #t) (ring:1 . #t))) (source . "github://github.com/dvanhorn/pcf/master/") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "f04e2ff7f34b89a3dc6c2a70a6a3283f954d3a67") (source . "github://github.com/dvanhorn/pcf/master/") (source_url . "http://github.com/dvanhorn/pcf/tree/master/"))))))) ("pcg" . #hasheq((author . "macocio@gmail.com") (authors . ("macocio@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pcg" "doc/pcg@pcg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pcg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pcg.txt"))) (checksum . "4a03a774377ff84aae29c563bc5170edd9a200e0") (checksum-error . #f) (collection . "pcg") (conflicts . ()) (dependencies . ("base" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Permuted congruential generators (PCG) in Racket") (implies . ()) (last-checked . 1632904290) (last-edit . 1514881130) (last-updated . 1529977495) (modules . ((lib "pcg/scribblings/pcg.scrbl") (lib "pcg/main.rkt"))) (name . "pcg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:macocio@gmail.com . #t) (pcg . #t) (random . #t) (ring:1 . #t))) (source . "https://github.com/BourgondAries/pcg.git") (tags . ("pcg" "random")) (versions . #hash((default . #hasheq((checksum . "4a03a774377ff84aae29c563bc5170edd9a200e0") (source . "https://github.com/BourgondAries/pcg.git") (source_url . "https://github.com/BourgondAries/pcg.git"))))))) ("pconvert-lib" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib")) (description . "Legacy library for printing Racket values") (implies . ()) (last-checked . 1632904290) (last-edit . 1482380525) (last-updated . 1571869195) (modules . ((lib "mzlib/pconvert-prop.rkt") (lib "mzlib/pconvert.rkt"))) (name . "pconvert-lib") (ring . 0) (search-terms . #hasheq((author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "c61fb3771251db295e1ef14f55f28f70d7e2982f") (source . "git://github.com/racket/pconvert?path=pconvert-lib") (source_url . "http://github.com/racket/pconvert/tree/master?path=pconvert-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("pconvert-test" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "c61fb3771251db295e1ef14f55f28f70d7e2982f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib")) (description . "Tests for pconvert-lib") (implies . ()) (last-checked . 1632904290) (last-edit . 1482380525) (last-updated . 1571869195) (modules . ()) (name . "pconvert-test") (ring . 0) (search-terms . #hasheq((author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/pconvert?path=pconvert-test") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "c61fb3771251db295e1ef14f55f28f70d7e2982f") (source . "git://github.com/racket/pconvert?path=pconvert-test") (source_url . "http://github.com/racket/pconvert/tree/master?path=pconvert-test"))))))) ("pdf-read" . #hasheq((author . "gcr@sneakygcr.net") (authors . ("gcr@sneakygcr.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pdf-read" "doc/pdf-read@pdf-read/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pdf-read.txt") (test-failure-log . "server/built/test-fail/pdf-read.txt") (test-success-log . #f))) (checksum . "bc442055764128efb06badeac8b4bfd026475106") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "draw-lib" "slideshow-lib" "scribble-lib" "racket-doc" "pict-doc" "draw-doc")) (description . "PDF reading library. Read PDF documents into picts and bitmap%s. You can also gather text and layout information. Requires liboppler.") (implies . ()) (last-checked . 1632904291) (last-edit . 1391289735) (last-updated . 1584929665) (modules . ((lib "pdf-read/ffi.rkt") (lib "pdf-read/pdf-read.scrbl") (lib "pdf-read/main.rkt"))) (name . "pdf-read") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:gcr@sneakygcr.net . #t) (documents . #t) (graphics . #t) (io . #t) (media . #t) (pdf . #t) (ring:1 . #t))) (source . "git://github.com/gcr/pdf-read/") (tags . ("documents" "graphics" "io" "media" "pdf")) (versions . #hash((default . #hasheq((checksum . "bc442055764128efb06badeac8b4bfd026475106") (source . "git://github.com/gcr/pdf-read/") (source_url . "git://github.com/gcr/pdf-read/"))))))) ("peg" . #hasheq((author . "rain1@airmail.cc") (authors . ("rain1@airmail.cc")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "peg" "doc/peg@peg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/peg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/peg.txt"))) (checksum . "5191749fa13686045f2170358097eb81d710a9de") (checksum-error . #f) (collection . "peg") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "PEG parser generator") (implies . ()) (last-checked . 1632904292) (last-edit . 1547239227) (last-updated . 1547239227) (modules . ((lib "peg/scribblings/peg.scrbl") (lib "peg/tests/peg-syntax-harness/peg-test-guile-passwd.rkt") (lib "peg/tests/s-exp/tests.rkt") (lib "peg/tests/docs-example-1.rkt") (lib "peg/tests/peg-syntax/peg-example-named-pattern.rkt") (lib "peg/tests/peg-syntax/peg-example-canopy.rkt") (lib "peg/tests/test-regex-range.rkt") (lib "peg/tests/peg-syntax/peg-example-float.rkt") (lib "peg/tests/peg-syntax-harness/peg-test-peg-in-peg-comments.rkt") (lib "peg/tests/peg-syntax-harness/peg-test-peg-as-peg.rkt") (lib "peg/tests/peg-syntax/peg-example-bracket-expand.rkt") (lib "peg/push-pop-boxes.rkt") (lib "peg/tests/peg-syntax/peg-example-shell.rkt") (lib "peg/tests/docs-example-2.rkt") (lib "peg/tests/peg-syntax/peg-example-peg-as-peg.rkt") (lib "peg/tests/peg-syntax/peg-example-guile-passwd.rkt") (lib "peg/tests/test-shell.rkt") (lib "peg/tests/docs-example-3.rkt") (lib "peg/tests/peg-syntax/peg-example-guile-cfunc.rkt") (lib "peg/tests/test-json.rkt") (lib "peg/tests/test-multibrack.rkt") (lib "peg/peg-to-scheme.rkt") (lib "peg/tests/test-etc-passwd.rkt") (lib "peg/tests/list-monad.rkt") (lib "peg/tests/peg-syntax-harness/test-named-pattern.rkt") (lib "peg/tests/peg-syntax-harness/peg-test-antlr-query-language.rkt") (lib "peg/tests/test-bracket-expand.rkt") (lib "peg/tests/test-unicode.rkt") (lib "peg/tests/test-quests.rkt") (lib "peg/tests/peg-syntax-harness/peg-test-expr.rkt") (lib "peg/tests/peg-syntax-harness/test-comma-separated-number.rkt") (lib "peg/tests/peg-syntax/peg-example-peg-in-peg-comments.rkt") (lib "peg/tests/peg-syntax/peg-example-imp.rkt") (lib "peg/tests/peg-syntax/peg-example-newick.rkt") (lib "peg/tests/peg-syntax-harness/peg-test-guile-cfunc.rkt") (lib "peg/s-exp.rkt") (lib "peg/tests/peg-syntax/peg-example-antlr-query-language.rkt") (lib "peg/tests/peg-syntax/peg-example-expr.rkt") (lib "peg/tests/peg-syntax/peg-example-positive-lookahead.rkt") (lib "peg/tests/peg-syntax-harness/test-imp.rkt") (lib "peg/tests/s-exp/test-dotted-pair.rkt") (lib "peg/tests/peg-syntax/peg-example-empty.rkt") (lib "peg/tests/peg-syntax/peg-example-quests.rkt") (lib "peg/tests/test-blg.rkt") (lib "peg/tests/peg-syntax-harness/peg-test-positive-lookahead.rkt") (lib "peg/tests/test-cfunc.rkt") (lib "peg/tests/test-verbose.rkt") (lib "peg/main.rkt") (lib "peg/tests/peg-syntax-harness/test-newick.rkt") (lib "peg/tests/s-exp/test-chars.rkt") (lib "peg/peg-result.rkt") (lib "peg/tests/test-tiny.rkt") (lib "peg/tests/s-exp/test-numbers.rkt") (lib "peg/tests/peg-syntax/peg-example-n.rkt") (lib "peg/tests/peg-syntax/peg-example-false-action.rkt") (lib "peg/peg.rkt") (lib "peg/tests/peg-syntax-harness/peg-test-false-action.rkt") (lib "peg/tests/peg-syntax/peg-example-comma-separated-number.rkt") (lib "peg/tests/peg-syntax-harness/test-import.rkt") (lib "peg/tests/peg-syntax/peg-example-import.rkt") (lib "peg/tests/peg-syntax-harness/peg-test-canopy.rkt") (lib "peg/tests/test-palindrome.rkt") (lib "peg/peg-in-peg.rkt"))) (name . "peg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:rain1@airmail.cc . #t) (parser . #t) (ring:1 . #t))) (source . "https://github.com/rain-1/racket-peg.git#5191749fa13686045f2170358097eb81d710a9de") (tags . ("parser")) (versions . #hash((default . #hasheq((checksum . "5191749fa13686045f2170358097eb81d710a9de") (source . "https://github.com/rain-1/racket-peg.git#5191749fa13686045f2170358097eb81d710a9de") (source_url . "https://github.com/rain-1/racket-peg.git#5191749fa13686045f2170358097eb81d710a9de"))) ("0.2" . #hasheq((checksum . "acecfd1ad746b90a5833cda547acf63ea4f22d89") (source . "https://github.com/rain-1/racket-peg.git#acecfd1ad746b90a5833cda547acf63ea4f22d89") (source_url . "https://github.com/rain-1/racket-peg.git#acecfd1ad746b90a5833cda547acf63ea4f22d89"))) ("0.3" . #hasheq((checksum . "b15157f762eca7e179862162aa619f3ca92812d9") (source . "https://github.com/rain-1/racket-peg.git#b15157f762eca7e179862162aa619f3ca92812d9") (source_url . "https://github.com/rain-1/racket-peg.git#b15157f762eca7e179862162aa619f3ca92812d9"))) ("0.4" . #hasheq((checksum . "5191749fa13686045f2170358097eb81d710a9de") (source . "https://github.com/rain-1/racket-peg.git#5191749fa13686045f2170358097eb81d710a9de") (source_url . "https://github.com/rain-1/racket-peg.git#5191749fa13686045f2170358097eb81d710a9de"))))))) ("peony" . #hasheq((author . "asaglenister@protonmail.com") (authors . ("asaglenister@protonmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "peony" "doc/peony@peony/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/peony.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/peony.txt"))) (checksum . "cabbb94e5caf786004e9c54dd624fa4ec574998e") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1586947811) (dependencies . ("base" "web-server" "db-doc" "db-lib" "racket-doc" "scribble-lib")) (description . "A small frontend on web-server to make developing some kinds of webapp quicker.") (implies . ()) (last-checked . 1632904293) (last-edit . 1586947811) (last-updated . 1593605997) (modules . ((lib "peony/main.rkt") (lib "peony/peony.scrbl"))) (name . "peony") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asaglenister@protonmail.com . #t) (ring:1 . #t) (web . #t) (web-framework . #t))) (source . "https://github.com/silver-ag/peony.git") (tags . ("web" "web-framework")) (versions . #hash((default . #hasheq((checksum . "cabbb94e5caf786004e9c54dd624fa4ec574998e") (source . "https://github.com/silver-ag/peony.git") (source_url . "https://github.com/silver-ag/peony.git"))))))) ("persistent-array" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "persistent-array" "doc/persistent-array@persistent-array/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/persistent-array.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/persistent-array.txt"))) (checksum . "9299dd5b6b33a953bdc4bfca3edcb956a86a35e2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "A semi-persistent array") (implies . ()) (last-checked . 1632904293) (last-edit . 1399935741) (last-updated . 1503067163) (modules . ((lib "data/p-array.scrbl") (lib "data/p-array.rkt"))) (name . "persistent-array") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samth@ccs.neu.edu . #t) (data . #t) (ring:1 . #t))) (source . "git://github.com/samth/persistent-array") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "9299dd5b6b33a953bdc4bfca3edcb956a86a35e2") (source . "git://github.com/samth/persistent-array") (source_url . "http://github.com/samth/persistent-array/tree/master"))))))) ("persistent-union-find" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/persistent-union-find.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/persistent-union-find.txt"))) (checksum . "f95278e362550a59dae327bd15f9f609009de6d0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "persistent-array" "r6rs-lib")) (description . "A persistent implementation of the union-find data structure") (implies . ()) (last-checked . 1632904293) (last-edit . 1410271570) (last-updated . 1502816246) (modules . ((lib "data/p-union-find.rkt"))) (name . "persistent-union-find") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (data . #t) (ring:1 . #t))) (source . "git://github.com/samth/persistent-union-find") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "f95278e362550a59dae327bd15f9f609009de6d0") (source . "git://github.com/samth/persistent-union-find") (source_url . "http://github.com/samth/persistent-union-find/tree/master"))))))) ("pex" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pex" "doc/pex@pex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pex.txt") (test-failure-log . "server/built/test-fail/pex.txt") (test-success-log . #f))) (checksum . "57997dcdcf5533249d65a9040d55763b22dda57a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "mordae" "libserialport" "racket-doc" "typed-racket-doc" "typed-racket-lib")) (description . "Apollo Art PEx System Control") (implies . ()) (last-checked . 1632904294) (last-edit . 1439717819) (last-updated . 1502816246) (modules . ((lib "pex/pex.scrbl") (lib "pex/main.rkt") (lib "pex/regexp-read.rkt"))) (name . "pex") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "git://github.com/mordae/racket-pex") (tags . ()) (versions . #hash((default . #hasheq((checksum . "57997dcdcf5533249d65a9040d55763b22dda57a") (source . "git://github.com/mordae/racket-pex") (source_url . "http://github.com/mordae/racket-pex/tree/master"))))))) ("pfds" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "functional-data-structures" "doc/functional-data-structures@pfds/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pfds.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pfds.txt"))) (checksum . "a08810bdfc760bb9ed68d08ea222a59135d9a203") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-compatibility" "scheme-lib" "at-exp-lib" "htdp-lib" "racket-doc" "scribble-lib" "typed-racket-more")) (description . "Purely functional data structures for Typed Racket") (implies . ()) (last-checked . 1632904294) (last-edit . 1355169108) (last-updated . 1587161421) (modules . ((lib "pfds/partialstream.rkt") (lib "pfds/scribblings/helper.rkt") (lib "pfds/tests/bankers-deque-tests.rkt") (lib "pfds/red-black-tree.rkt") (lib "pfds/tests/redblacktrees-tests.rkt") (lib "pfds/tests/implicitqueue-performance-tests.rkt") (lib "pfds/scribblings/vlist.scrbl") (lib "pfds/vlist.rkt") (lib "pfds/tests/binomialheap-tests.rkt") (lib "pfds/scribblings/deques.scrbl") (lib "pfds/deque/real-time.rkt") (lib "pfds/tests/bootstrapedqueue-tests.rkt") (lib "pfds/tests/pairingheap-test.rkt") (lib "pfds/tests/lazypairingheap-test.rkt") (lib "pfds/scribblings/bankers-deque.scrbl") (lib "pfds/ralist/binary.rkt") (lib "pfds/tests/stream-tests.rkt") (lib "pfds/scribblings/hood-melville-queue.scrbl") (lib "pfds/queue/real-time.rkt") (lib "pfds/queue/implicit.rkt") (lib "pfds/catenable-list.rkt") (lib "pfds/scribblings/skewbinomialheap.scrbl") (lib "pfds/scribblings/randomaccesslist.scrbl") (lib "pfds/queue/hood-melville.rkt") (lib "pfds/treap.rkt") (lib "pfds/scribblings/tries.scrbl") (lib "pfds/tests/realtimedeque-tests.rkt") (lib "pfds/tests/hood-melville-queue-tests.rkt") (lib "pfds/scribblings/functional-data-structures.scrbl") (lib "pfds/tests/leftistheaps-tests.rkt") (lib "pfds/tests/binary-ran-access-list-tests.rkt") (lib "pfds/heap/splay.rkt") (lib "pfds/scribblings/leftistheap.scrbl") (lib "pfds/scribblings/catenable-list.scrbl") (lib "pfds/heap/leftist.rkt") (lib "pfds/stream.rkt") (lib "pfds/heap/binomial.rkt") (lib "pfds/heap/lazy-pairing.rkt") (lib "pfds/scribblings/bootstrapedqueue.scrbl") (lib "pfds/scribblings/streams.scrbl") (lib "pfds/scribblings/lazypairingheap.scrbl") (lib "pfds/queue/bankers.rkt") (lib "pfds/scribblings/realtimequeue.scrbl") (lib "pfds/tests/realtimequeue-tests.rkt") (lib "pfds/tests/implicitdeque-performance-tests.rkt") (lib "pfds/scribblings/splayheap.scrbl") (lib "pfds/tests/tests-main.rkt") (lib "pfds/scribblings/redblacktrees.scrbl") (lib "pfds/queue/bootstrapped.rkt") (lib "pfds/tests/implicitdeque-tests.rkt") (lib "pfds/tests/vlist-tests.rkt") (lib "pfds/tests/treap-tests.rkt") (lib "pfds/tests/bankers-queue-benchmarks.rkt") (lib "pfds/tests/partialstream-tests.rkt") (lib "pfds/tests/physicists-queue-tests.rkt") (lib "pfds/heap/bootstrapped.rkt") (lib "pfds/scribblings/binaryrandomaccesslist.scrbl") (lib "pfds/scribblings/queues.scrbl") (lib "pfds/scribblings/bootstrapedheap.scrbl") (lib "pfds/deque/implicit.rkt") (lib "pfds/tests/splayheap-tests.rkt") (lib "pfds/scribblings/binomialheap.scrbl") (lib "pfds/ralist/skew.rkt") (lib "pfds/heap/pairing.rkt") (lib "pfds/tests/bootstrapedheap-tests.rkt") (lib "pfds/deque/bankers.rkt") (lib "pfds/scribblings/pairingheap.scrbl") (lib "pfds/scribblings/physicists-queue.scrbl") (lib "pfds/tests/skewbinaryrandomaccesslist-tests.rkt") (lib "pfds/scribblings/implicitdeque.scrbl") (lib "pfds/queue/physicists.rkt") (lib "pfds/scribblings/heaps.scrbl") (lib "pfds/trie.rkt") (lib "pfds/tests/implicitqueue-tests.rkt") (lib "pfds/tests/catenablelist-tests.rkt") (lib "pfds/delay.rkt") (lib "pfds/scribblings/treap.scrbl") (lib "pfds/tests/bankers-deque-benchmarks.rkt") (lib "pfds/tests/tries-test.rkt") (lib "pfds/heap/skew-binomial.rkt") (lib "pfds/scribblings/queue.scrbl") (lib "pfds/scribblings/implicitqueue.scrbl") (lib "pfds/tests/skewbinomialheap-tests.rkt") (lib "pfds/scribblings/realtimedeque.scrbl") (lib "pfds/scribblings/skewbinaryrandomaccesslist.scrbl") (lib "pfds/tests/bankers-queue-tests.rkt"))) (name . "pfds") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (data . #t) (ring:1 . #t))) (source . "github://github.com/takikawa/tr-pfds/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "a08810bdfc760bb9ed68d08ea222a59135d9a203") (source . "github://github.com/takikawa/tr-pfds/master") (source_url . "http://github.com/takikawa/tr-pfds/tree/master"))) ("6.0" . #hasheq((checksum . "cf67d14fc35d21e6f2a33551386bb4dd20599129") (source . "github://github.com/takikawa/tr-pfds/v6.0") (source_url . "http://github.com/takikawa/tr-pfds/tree/v6.0"))))))) ("phc-adt" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/phc-adt.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "36c1047c4899d1b478cc6052f9b2e71168aeefb5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614799597) (dependencies . ("phc-adt-lib" "phc-adt-doc" "phc-adt-test")) (description . "Algebraic Data Types for Typed/Racket, with features tailored to compiler writing. The data types do not have to be declared before they are used, like prefab structs and symbols. Behind the scenes, this library remembers all the data types in a file, and uses it to implicitly pre-declare them. Mostly stable, although some things may change a bit in the future.") (implies . ("phc-adt-lib" "phc-adt-doc" "phc-adt-test")) (last-checked . 1632904294) (last-edit . 1614889698) (last-updated . 1620919579) (modules . ()) (name . "phc-adt") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:racket@suzanne.soy . #t) (data . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt#main") (tags . ("data" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "36c1047c4899d1b478cc6052f9b2e71168aeefb5") (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt#main") (source_url . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt#main"))))))) ("phc-adt-doc" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "phc-adt-implementation" "doc/phc-adt-implementation@phc-adt-doc/index.html") ("salvage" "phc-adt" "doc/phc-adt@phc-adt-doc/index.html"))) (failure-log . "server/built/fail/phc-adt-doc.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "36c1047c4899d1b478cc6052f9b2e71168aeefb5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614799493) (dependencies . ("base" "scribble-lib" "hyper-literate" "phc-adt-lib" "racket-doc" "typed-racket-doc" "typed-racket-lib" "scribble-enhanced" "scribble-math" "type-expander" "xlist" "alexis-util" "extensible-parser-specifications" "multi-id" "phc-toolkit" "remember" "threading" "trivial" "typed-struct-props" "datatype")) (description . "Documentation for phc-adt (and rendering of the literate programming)") (implies . ()) (last-checked . 1632904295) (last-edit . 1614889692) (last-updated . 1620919580) (modules . ((lib "phc-adt/scribblings/phc-adt-tagged.scrbl") (lib "phc-adt/scribblings/phc-adt.scrbl") (lib "phc-adt/scribblings/phc-adt-structure.scrbl") (lib "phc-adt/scribblings/phc-adt-implementation.scrbl") (lib "phc-adt/scribblings/phc-adt-choices.scrbl") (lib "phc-adt/scribblings/phc-adt-variant.scrbl") (lib "phc-adt/scribblings/phc-adt-constructor.scrbl"))) (name . "phc-adt-doc") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (docs . #t) (phc-adt . #t) (ring:1 . #t))) (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-doc#main") (tags . ("docs" "phc-adt")) (versions . #hash((default . #hasheq((checksum . "36c1047c4899d1b478cc6052f9b2e71168aeefb5") (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-doc#main") (source_url . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-doc#main"))))))) ("phc-adt-lib" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/phc-adt-lib.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "36c1047c4899d1b478cc6052f9b2e71168aeefb5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614799498) (dependencies . ("base" "typed-racket-lib" "hyper-literate" "multi-id" "phc-toolkit" "remember" "type-expander" "extensible-parser-specifications" "alexis-util" "typed-struct-props" "match-string" "xlist" "compatibility-lib" "generic-bind" "datatype" "at-exp-lib" "sandbox-lib" "scribble-enhanced" "scribble-lib" "scribble-math")) (description . "Implementation of phc-adt") (implies . ()) (last-checked . 1632904295) (last-edit . 1614889667) (last-updated . 1620919581) (modules . ((lib "phc-adt/declarations.rkt") (lib "phc-adt/main.rkt") (lib "phc-adt/adt.hl.rkt") (lib "phc-adt/constructor.hl.rkt") (lib "phc-adt/check-no-overlap.rkt") (lib "phc-adt/variant.hl.rkt") (lib "phc-adt/tagged.hl.rkt") (lib "phc-adt/node-low-level.hl.rkt") (lib "phc-adt/structure.hl.rkt") (lib "phc-adt/adt-init.rkt") (lib "phc-adt/tagged-supertype.hl.rkt") (lib "phc-adt/adt-second-step.rkt") (lib "phc-adt/ctx.hl.rkt") (lib "phc-adt/tagged-structure-low-level.hl.rkt"))) (name . "phc-adt-lib") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:racket@suzanne.soy . #t) (phc-adt . #t) (ring:1 . #t))) (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-lib#main") (tags . ("phc-adt")) (versions . #hash((default . #hasheq((checksum . "36c1047c4899d1b478cc6052f9b2e71168aeefb5") (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-lib#main") (source_url . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-lib#main"))))))) ("phc-adt-test" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/phc-adt-test.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "36c1047c4899d1b478cc6052f9b2e71168aeefb5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614799505) (dependencies . ("base" "phc-adt-lib" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "multi-id" "phc-toolkit" "type-expander")) (description . "Tests for phc-adt") (implies . ()) (last-checked . 1632904295) (last-edit . 1614889661) (last-updated . 1620919581) (modules . ((lib "phc-adt/test/test-tagged-define.rkt") (lib "phc-adt/test/test-structure-speed.rkt") (lib "phc-adt/test/test-adt-structure-wrapped.rkt") (lib "phc-adt/test/test-adt-init-no-error.rkt") (lib "phc-adt/test/test-tagged-parametric.rkt") (lib "phc-adt/test/row-polymorphism/test-with-plus.rkt") (lib "phc-adt/test/row-polymorphism/adt-pre-declarations.rkt") (lib "phc-adt/test/test-tagged.rkt") (lib "phc-adt/test/test-structure-other.rkt") (lib "phc-adt/test/test-constructor3.rkt") (lib "phc-adt/test/mailing-list-example/example.rkt") (lib "phc-adt/test/test-constructor2.rkt") (lib "phc-adt/test/test-define-adt.rkt") (lib "phc-adt/test/row-polymorphism/test-merge.rkt") (lib "phc-adt/test/test-structure2.rkt") (lib "phc-adt/test/adt-pre-declarations.rkt") (lib "phc-adt/test/mailing-list-example/adt-pre-declarations.rkt") (lib "phc-adt/test/row-polymorphism/test-split.rkt") (lib "phc-adt/test/test-adt.rkt") (lib "phc-adt/test/test-variant.rkt") (lib "phc-adt/test/test-structure-parametric.rkt") (lib "phc-adt/test/test-adt-init-error.rkt") (lib "phc-adt/test/ck.rkt") (lib "phc-adt/test/test-structure-low-level.rkt") (lib "phc-adt/test/row-polymorphism/test-with-update-only.rkt") (lib "phc-adt/test/row-polymorphism/test-with.rkt") (lib "phc-adt/test/node-low-level-quick-test.rkt") (lib "phc-adt/test/test-empty.rkt") (lib "phc-adt/test/test-structure.rkt") (lib "phc-adt/test/test-tagged-call-syntax.rkt") (lib "phc-adt/test/test-constructor.rkt"))) (name . "phc-adt-test") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:racket@suzanne.soy . #t) (phc-adt . #t) (ring:1 . #t) (tests . #t))) (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-test#main") (tags . ("phc-adt" "tests")) (versions . #hash((default . #hasheq((checksum . "36c1047c4899d1b478cc6052f9b2e71168aeefb5") (source . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-test#main") (source_url . "https://github.com/jsmaniac/phc-adt.git?path=phc-adt-test#main"))))))) ("phc-toolkit" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "phc-toolkit" "doc/phc-toolkit@phc-toolkit/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/phc-toolkit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/phc-toolkit.txt"))) (checksum . "694c75444c4151be7069b3a0271650921d86ce51") (checksum-error . #f) (collection . "phc-toolkit") (conflicts . ()) (date-added . 1614799512) (dependencies . ("base" "rackunit-lib" "alexis-util" "typed-racket-lib" "typed-racket-more" "reprovide-lang" "type-expander" "hyper-literate" "version-case" "scribble-lib" "racket-doc" "typed-racket-doc" "predicates" "rackunit-doc" "scribble-math" "drracket")) (description . "Personal collection of utilities. Somewhat unstable and sparsely documented (for now).") (implies . ()) (last-checked . 1632904295) (last-edit . 1614889655) (last-updated . 1617546892) (modules . ((lib "phc-toolkit/scribblings/list.scrbl") (lib "phc-toolkit/todo.rkt") (lib "phc-toolkit/scribblings/multiassoc-syntax.scrbl") (lib "phc-toolkit/untyped/logn-id.rkt") (lib "phc-toolkit/untyped-only/syntax-parse.rkt") (lib "phc-toolkit/in.rkt") (lib "phc-toolkit/scribblings/eval-get-values-untyped.scrbl") (lib "phc-toolkit/scribblings/misc.scrbl") (lib "phc-toolkit/test/test-format-id-record.rkt") (lib "phc-toolkit/untyped/misc.rkt") (lib "phc-toolkit/scribblings/typed-untyped-untyped.scrbl") (lib "phc-toolkit/untyped/main.rkt") (lib "phc-toolkit/scribblings/threading.scrbl") (lib "phc-toolkit/test-framework.rkt") (lib "phc-toolkit/untyped/syntax-parse.rkt") (lib "phc-toolkit/untyped/contract.rkt") (lib "phc-toolkit/contract.rkt") (lib "phc-toolkit/repeat-stx.rkt") (lib "phc-toolkit/untyped/cond-let.rkt") (lib "phc-toolkit/scribblings/test-framework.scrbl") (lib "phc-toolkit/scribblings/typed-rackunit-untyped.scrbl") (lib "phc-toolkit/untyped.rkt") (lib "phc-toolkit/untyped/test-framework.rkt") (lib "phc-toolkit/untyped/meta-struct.rkt") (lib "phc-toolkit/scribblings/phc-toolkit.scrbl") (lib "phc-toolkit/untyped/multiassoc-syntax.rkt") (lib "phc-toolkit/scribblings/values.scrbl") (lib "phc-toolkit/stx.rkt") (lib "phc-toolkit/scribblings/aliases-untyped.scrbl") (lib "phc-toolkit/untyped/typed-untyped.rkt") (lib "phc-toolkit/scribblings/list-untyped.scrbl") (lib "phc-toolkit/typed-untyped.rkt") (lib "phc-toolkit/percent2.rkt") (lib "phc-toolkit/untyped/type-inference-helpers.rkt") (lib "phc-toolkit/untyped/percent.rkt") (lib "phc-toolkit/scribblings/syntax-parse-untyped.scrbl") (lib "phc-toolkit/scribblings/type-inference-helpers.scrbl") (lib "phc-toolkit/test/test-stx.rkt") (lib "phc-toolkit/scribblings/stx-untyped-only.scrbl") (lib "phc-toolkit/eval-get-values.rkt") (lib "phc-toolkit/untyped/generate-indices.rkt") (lib "phc-toolkit/scribblings/stx-patching-srcloc.scrbl") (lib "phc-toolkit/scribblings/values-untyped.scrbl") (lib "phc-toolkit/scribblings/backtrace.scrbl") (lib "phc-toolkit/untyped/typed-rackunit-extensions.rkt") (lib "phc-toolkit/values.rkt") (lib "phc-toolkit/scribblings/not-implemented-yet-untyped.scrbl") (lib "phc-toolkit/scribblings/logn-id-untyped.scrbl") (lib "phc-toolkit/untyped/typed-rackunit.rkt") (lib "phc-toolkit/percent.rkt") (lib "phc-toolkit/misc.rkt") (lib "phc-toolkit/scribblings/cond-let.scrbl") (lib "phc-toolkit/tmpl-multiassoc-syntax.rkt") (lib "phc-toolkit/scribblings/cond-let-untyped.scrbl") (lib "phc-toolkit/meta-struct.rkt") (lib "phc-toolkit/untyped-only/for-star-list-star.rkt") (lib "phc-toolkit/list.rkt") (lib "phc-toolkit/untyped/sequence.rkt") (lib "phc-toolkit/is-typed.rkt") (lib "phc-toolkit/scribblings/compat.scrbl") (lib "phc-toolkit/type-inference-helpers.rkt") (lib "phc-toolkit/scribblings/tmpl-multiassoc-syntax-untyped.scrbl") (lib "phc-toolkit/untyped/compat.rkt") (lib "phc-toolkit/untyped-only.rkt") (lib "phc-toolkit/logn-id.rkt") (lib "phc-toolkit/test/test-format-id-record-inject.rkt") (lib "phc-toolkit/scribblings/typed-untyped.scrbl") (lib "phc-toolkit/scribblings/sequence-untyped.scrbl") (lib "phc-toolkit/scribblings/stx-untyped.scrbl") (lib "phc-toolkit/scribblings/tmpl.scrbl") (lib "phc-toolkit/scribblings/template.scrbl") (lib "phc-toolkit/scribblings/tmpl-multiassoc-syntax.scrbl") (lib "phc-toolkit/scribblings/eval-get-values.scrbl") (lib "phc-toolkit/scribblings/type-inference-helpers-untyped.scrbl") (lib "phc-toolkit/typed-rackunit.rkt") (lib "phc-toolkit/ids.rkt") (lib "phc-toolkit/untyped/for-star-list-star.rkt") (lib "phc-toolkit/backtrace.rkt") (lib "phc-toolkit/test/meta-struct-test.rkt") (lib "phc-toolkit/untyped-only/quasitemplate.rkt") (lib "phc-toolkit/scribblings/ids-untyped.scrbl") (lib "phc-toolkit/fixnum.rkt") (lib "phc-toolkit/light-no-check.rkt") (lib "phc-toolkit/sequence.rkt") (lib "phc-toolkit/scribblings/tmpl-untyped.scrbl") (lib "phc-toolkit/test/list-test.rkt") (lib "phc-toolkit/scribblings/compat-untyped.scrbl") (lib "phc-toolkit/test/test-syntax-parse.rkt") (lib "phc-toolkit/untyped/list.rkt") (lib "phc-toolkit/untyped-only/format-id-record.rkt") (lib "phc-toolkit/untyped-only/stx.rkt") (lib "phc-toolkit/scribblings/typed-rackunit-extensions.scrbl") (lib "phc-toolkit/scribblings/generate-indices.scrbl") (lib "phc-toolkit/is-untyped.rkt") (lib "phc-toolkit/require-provide.rkt") (lib "phc-toolkit/scribblings/aliases.scrbl") (lib "phc-toolkit/scribblings/syntax-parse-pattern-expanders.scrbl") (lib "phc-toolkit/threading.rkt") (lib "phc-toolkit/scribblings/utils.rkt") (lib "phc-toolkit/generate-indices.rkt") (lib "phc-toolkit/stx/prefab.rkt") (lib "phc-toolkit/scribblings/fixnum-untyped.scrbl") (lib "phc-toolkit/untyped/aliases.rkt") (lib "phc-toolkit/scribblings/require-provide.scrbl") (lib "phc-toolkit/scribblings/contract.scrbl") (lib "phc-toolkit/untyped/set.rkt") (lib "phc-toolkit/untyped/format-id-record.rkt") (lib "phc-toolkit/test/test-define-temp-ids.rkt") (lib "phc-toolkit/untyped/not-implemented-yet.rkt") (lib "phc-toolkit/aliases.rkt") (lib "phc-toolkit/scribblings/repeat-stx-untyped.scrbl") (lib "phc-toolkit/scribblings/percent-untyped.scrbl") (lib "phc-toolkit/untyped/fixnum.rkt") (lib "phc-toolkit/untyped/in.rkt") (lib "phc-toolkit/scribblings/backtrace-untyped.scrbl") (lib "phc-toolkit/scribblings/typed-rackunit.scrbl") (lib "phc-toolkit/scribblings/contract-untyped.scrbl") (lib "phc-toolkit/scribblings/stx.scrbl") (lib "phc-toolkit/not-implemented-yet.rkt") (lib "phc-toolkit/compat.rkt") (lib "phc-toolkit/scribblings/require-provide-untyped.scrbl") (lib "phc-toolkit/main.rkt") (lib "phc-toolkit/test/test-percent2.rkt") (lib "phc-toolkit/untyped/tmpl-multiassoc-syntax.rkt") (lib "phc-toolkit/untyped/tmpl.rkt") (lib "phc-toolkit/test/list-lang-test.rkt") (lib "phc-toolkit/scribblings/fixnum.scrbl") (lib "phc-toolkit/set.rkt") (lib "phc-toolkit/scribblings/test-framework-untyped.scrbl") (lib "phc-toolkit/scribblings/meta-struct.scrbl") (lib "phc-toolkit/untyped/threading.rkt") (lib "phc-toolkit/scribblings/format-id-record-untyped.scrbl") (lib "phc-toolkit/scribblings/meta-struct-untyped.scrbl") (lib "phc-toolkit/scribblings/list-lang.scrbl") (lib "phc-toolkit/scribblings/untyped.scrbl") (lib "phc-toolkit/tmpl.rkt") (lib "phc-toolkit/scribblings/in-untyped.scrbl") (lib "phc-toolkit/untyped/stx.rkt") (lib "phc-toolkit/scribblings/syntax-parse.scrbl") (lib "phc-toolkit/unstable.rkt") (lib "phc-toolkit/multiassoc-syntax.rkt") (lib "phc-toolkit/scribblings/threading-untyped.scrbl") (lib "phc-toolkit/untyped/repeat-stx.rkt") (lib "phc-toolkit/scribblings/set-untyped.scrbl") (lib "phc-toolkit/scribblings/percent.scrbl") (lib "phc-toolkit/scribblings/repeat-stx.scrbl") (lib "phc-toolkit/typed-rackunit-extensions.rkt") (lib "phc-toolkit/test/test-ids.rkt") (lib "phc-toolkit/syntax-parse.rkt") (lib "phc-toolkit/scribblings/set.scrbl") (lib "phc-toolkit/untyped/values.rkt") (lib "phc-toolkit/scribblings/sequence.scrbl") (lib "phc-toolkit/scribblings/multiassoc-syntax-untyped.scrbl") (lib "phc-toolkit/scribblings/generate-indices-untyped.scrbl") (lib "phc-toolkit/untyped/ids.rkt") (lib "phc-toolkit/untyped/require-provide.rkt") (lib "phc-toolkit/scribblings/ids.scrbl") (lib "phc-toolkit/scribblings/in.scrbl") (lib "phc-toolkit/scribblings/for-star-list-star.scrbl") (lib "phc-toolkit/scribblings/not-implemented-yet.scrbl") (lib "phc-toolkit/scribblings/misc-untyped.scrbl") (lib "phc-toolkit/cond-let.rkt") (lib "phc-toolkit/partial-include.rkt") (lib "phc-toolkit/scribblings/logn-id.scrbl") (lib "phc-toolkit/stx/fold.rkt") (lib "phc-toolkit/list-lang.rkt") (lib "phc-toolkit/test/test-fixnum.rkt") (lib "phc-toolkit/untyped/eval-get-values.rkt") (lib "phc-toolkit/scribblings/typed-rackunit-extensions-untyped.scrbl") (lib "phc-toolkit/untyped/backtrace.rkt"))) (name . "phc-toolkit") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (experimental . #t) (ring:1 . #t) (util . #t))) (source . "https://github.com/jsmaniac/phc-toolkit.git#main") (tags . ("experimental" "util")) (versions . #hash((default . #hasheq((checksum . "694c75444c4151be7069b3a0271650921d86ce51") (source . "https://github.com/jsmaniac/phc-toolkit.git#main") (source_url . "https://github.com/jsmaniac/phc-toolkit.git#main"))))))) ("phone-number" . #hasheq((author . "yanyingwang1@gmail.com") (authors . ("yanyingwang1@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/phone-number.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "5e81e8b58020063c1df8c22aec802644876ca14a") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://gitlab.com/yanyingwang/phone-number.git\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (date-added . 1567747086) (dependencies . ("base" "srfi" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Get mobile phone number locations and other infos") (implies . ()) (last-checked . 1632904296) (last-edit . 1567747190) (last-updated . 1621814913) (modules . ((lib "phone-number/scribblings/phone-number.scrbl") (lib "phone-number/main.rkt"))) (name . "phone-number") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:yanyingwang1@gmail.com . #t) (location . #t) (mobile . #t) (phone . #t) (phone-number . #t) (ring:1 . #t))) (source . "https://gitlab.com/yanyingwang/phone-number.git") (tags . ("location" "mobile" "phone" "phone-number")) (versions . #hash((default . #hasheq((checksum . "5e81e8b58020063c1df8c22aec802644876ca14a") (source . "https://gitlab.com/yanyingwang/phone-number.git") (source_url . "https://gitlab.com/yanyingwang/phone-number.git"))))))) ("php-parser" . #hasheq((author . "antoine.brand@sfr.fr") (authors . ("antoine.brand@sfr.fr")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/php-parser.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/php-parser.txt"))) (checksum . "159665a9078e46f1ea7712363f83cb8e5d9a2703") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "parser-tools" "rackunit-lib" "scribble-lib")) (description . "A php parser") (implies . ()) (last-checked . 1632904296) (last-edit . 1392482623) (last-updated . 1516648640) (modules . ((lib "php-parser/utils.rkt") (lib "php-parser/parser-utils.rkt") (lib "php-parser/parser.rkt") (lib "php-parser/main.rkt") (lib "php-parser/php-parser.scrbl"))) (name . "php-parser") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:antoine.brand@sfr.fr . #t) (parser . #t) (ring:1 . #t))) (source . "git://github.com/antoineb/php-parser") (tags . ("parser")) (versions . #hash((default . #hasheq((checksum . "159665a9078e46f1ea7712363f83cb8e5d9a2703") (source . "git://github.com/antoineb/php-parser") (source_url . "http://github.com/antoineb/php-parser/tree/master"))))))) ("pict" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("pict-lib" "pict-doc")) (description . "Building pictures with functional combinators") (implies . ("pict-lib" "pict-doc")) (last-checked . 1632904296) (last-edit . 1417659583) (last-updated . 1632446975) (modules . ()) (name . "pict") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "2bdf4b68efa7d19326e673bf3ff1522621e3452a") (source . "git://github.com/racket/pict/?path=pict") (source_url . "git://github.com/racket/pict/?path=pict"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("pict-abbrevs" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pict-abbrevs" "doc/pict-abbrevs@pict-abbrevs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pict-abbrevs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pict-abbrevs.txt"))) (checksum . "397353f7cacfb3cc06f38f6a4a1bf442cbf5f16d") (checksum-error . #f) (collection . "pict-abbrevs") (conflicts . ()) (dependencies . ("base" "pict-lib" "lang-file" "draw-lib" "slideshow-lib" "ppict" "rackunit-lib" "racket-doc" "scribble-doc" "gui-doc" "pict-doc" "draw-doc" "plot-doc" "plot-lib" "scribble-lib" "slideshow-doc")) (description . "Pict helper functions") (implies . ()) (last-checked . 1632904296) (last-edit . 1542491206) (last-updated . 1625938262) (modules . ((lib "pict-abbrevs/scribblings/pict-abbrevs.scrbl") (lib "pict-abbrevs/private/slideshow.rkt") (lib "pict-abbrevs/main.rkt") (lib "pict-abbrevs/private/raco.rkt") (lib "pict-abbrevs/slideshow.rkt") (lib "pict-abbrevs/private/pict-abbrevs.rkt"))) (name . "pict-abbrevs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (pict . #t) (ring:1 . #t) (util . #t))) (source . "https://gitlab.com/bengreenman/pict-abbrevs.git") (tags . ("pict" "util")) (versions . #hash((default . #hasheq((checksum . "397353f7cacfb3cc06f38f6a4a1bf442cbf5f16d") (source . "https://gitlab.com/bengreenman/pict-abbrevs.git") (source_url . "https://gitlab.com/bengreenman/pict-abbrevs.git"))))))) ("pict-balloon2" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pict-balloon2.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pict-balloon2.txt"))) (checksum . "ebe574301cf52c9fc4495c6f502e91ab9e87975a") (checksum-error . #f) (collection . "pict") (conflicts . ()) (date-added . 1623074224) (dependencies . ("base" "draw-lib" "pict-lib" "slideshow-lib")) (description . "Provides `pict/balloon2`, which is intended as an improvement over `pict/balloon`") (implies . ()) (last-checked . 1632904296) (last-edit . 1623074224) (last-updated . 1632591057) (modules . ((lib "pict/balloon2.rkt"))) (name . "pict-balloon2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@cs.utah.edu . #t) (pict . #t) (ring:1 . #t))) (source . "git+https://github.com/mflatt/pict-balloon2") (tags . ("pict")) (versions . #hash((default . #hasheq((checksum . "ebe574301cf52c9fc4495c6f502e91ab9e87975a") (source . "git+https://github.com/mflatt/pict-balloon2") (source_url . "git+https://github.com/mflatt/pict-balloon2"))))))) ("pict-doc" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pict" "doc/pict@pict-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "mzscheme-doc" "draw-doc" "gui-doc" "slideshow-doc" "draw-lib" "gui-lib" "scribble-lib" "slideshow-lib" "pict-lib" "racket-doc" "scribble-doc")) (description . "documentation part of pict") (implies . ()) (last-checked . 1632904297) (last-edit . 1417659583) (last-updated . 1632446976) (modules . ((lib "pict/scribblings/pict-diagram.rkt") (lib "pict/scribblings/pict.scrbl") (lib "pict/scribblings/shadow.scrbl") (lib "pict/scribblings/code.scrbl") (lib "pict/scribblings/conditional.scrbl") (lib "pict/scribblings/color.scrbl") (lib "pict/scribblings/tree-layout.scrbl") (lib "pict/scribblings/anim.scrbl") (lib "pict/scribblings/more.scrbl"))) (name . "pict-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "2bdf4b68efa7d19326e673bf3ff1522621e3452a") (source . "git://github.com/racket/pict/?path=pict-doc") (source_url . "git://github.com/racket/pict/?path=pict-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("pict-lib" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "base" "compatibility-lib" "draw-lib" "syntax-color-lib" "rackunit-lib")) (description . "implementation (no documentation) part of pict") (implies . ()) (last-checked . 1632904297) (last-edit . 1417659583) (last-updated . 1632446977) (modules . ((lib "pict/private/transform.rkt") (lib "pict/private/play-pict.rkt") (lib "pict/private/convertible.rkt") (lib "pict/flash.rkt") (lib "texpict/mrpict.rkt") (lib "pict/convert.rkt") (lib "pict/face.rkt") (lib "texpict/utils.rkt") (lib "pict/color.rkt") (lib "pict/private/tidier.rkt") (lib "pict/conditional.rkt") (lib "texpict/code.rkt") (lib "pict/private/layout.rkt") (lib "pict/private/naive-layered.rkt") (lib "pict/private/hv.rkt") (lib "pict/shadow.rkt") (lib "pict/balloon.rkt") (lib "texpict/balloon.rkt") (lib "pict/private/utils.rkt") (lib "pict/private/main.rkt") (lib "pict/code.rkt") (lib "texpict/flash.rkt") (lib "pict/main.rkt") (lib "pict/private/pict.rkt") (lib "pict/tree-layout.rkt") (lib "texpict/face.rkt"))) (name . "pict-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "2bdf4b68efa7d19326e673bf3ff1522621e3452a") (source . "git://github.com/racket/pict/?path=pict-lib") (source_url . "git://github.com/racket/pict/?path=pict-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("pict-snip" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("pict-snip-lib" "pict-snip-doc")) (description . "Build snips out of picts") (implies . ("pict-snip-lib" "pict-snip-doc")) (last-checked . 1632904297) (last-edit . 1417659583) (last-updated . 1571869200) (modules . ()) (name . "pict-snip") (ring . 0) (search-terms . #hasheq((author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "baffbc28b0b8931242d63a125f5ac790bf349bf4") (source . "git://github.com/racket/pict-snip/?path=pict-snip") (source_url . "git://github.com/racket/pict-snip/?path=pict-snip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("pict-snip-doc" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pict-snip" "doc/pict-snip@pict-snip-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "pict-snip-lib" "gui-doc" "pict-doc" "pict-lib" "racket-doc" "scribble-lib" "snip-lib")) (description . "documentation part of pict") (implies . ()) (last-checked . 1632904297) (last-edit . 1417659583) (last-updated . 1571869200) (modules . ((lib "scribblings/pict-snip/pict-snip.scrbl"))) (name . "pict-snip-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "baffbc28b0b8931242d63a125f5ac790bf349bf4") (source . "git://github.com/racket/pict-snip/?path=pict-snip-doc") (source_url . "git://github.com/racket/pict-snip/?path=pict-snip-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("pict-snip-lib" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("draw-lib" "snip-lib" "pict-lib" "wxme-lib" "base" "rackunit-lib" "gui-lib")) (description . "implementation (no documentation) part of pict-snip") (implies . ()) (last-checked . 1632904298) (last-edit . 1417659583) (last-updated . 1571869201) (modules . ((lib "pict/snip.rkt"))) (name . "pict-snip-lib") (ring . 0) (search-terms . #hasheq((author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "baffbc28b0b8931242d63a125f5ac790bf349bf4") (source . "git://github.com/racket/pict-snip/?path=pict-snip-lib") (source_url . "git://github.com/racket/pict-snip/?path=pict-snip-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("pict-snip-test" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "baffbc28b0b8931242d63a125f5ac790bf349bf4") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "pict-snip-lib" "draw-lib" "pict-lib" "rackunit-lib")) (description . "tests for pict-snip-lib") (implies . ()) (last-checked . 1632904298) (last-edit . 1483040045) (last-updated . 1571869202) (modules . ((lib "tests/pict/snip.rkt"))) (name . "pict-snip-test") (ring . 1) (search-terms . #hasheq((author:robby@racket-lang.org . #t) (main-tests . #t) (ring:1 . #t))) (source . "git://github.com/racket/pict-snip/?path=pict-snip-test") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "baffbc28b0b8931242d63a125f5ac790bf349bf4") (source . "git://github.com/racket/pict-snip/?path=pict-snip-test") (source_url . "git://github.com/racket/pict-snip/?path=pict-snip-test"))))))) ("pict-test" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "2bdf4b68efa7d19326e673bf3ff1522621e3452a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "pict-lib" "rackunit-lib" "htdp-lib" "draw-lib")) (description . "tests for pict-lib") (implies . ()) (last-checked . 1632904298) (last-edit . 1447085176) (last-updated . 1632446979) (modules . ((lib "tests/pict/main.rkt") (lib "tests/pict/code.rkt") (lib "tests/pict/transform.rkt"))) (name . "pict-test") (ring . 1) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-tests . #t) (ring:1 . #t))) (source . "git://github.com/racket/pict/?path=pict-test") (source_url . "git://github.com/racket/pict/?path=pict-test") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "2bdf4b68efa7d19326e673bf3ff1522621e3452a") (source . "git://github.com/racket/pict/?path=pict-test") (source_url . "git://github.com/racket/pict/?path=pict-test"))))))) ("pict3d" . #hasheq((author . "neil.toronto@gmail.com jay.mccarthy@gmail.com mflatt@racket-lang.org alexander@knauth.org") (authors . ("neil.toronto@gmail.com" "jay.mccarthy@gmail.com" "mflatt@racket-lang.org" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "typed-opengl" "doc/typed-opengl@pict3d/index.html") ("main" "pict3d" "doc/pict3d@pict3d/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/pict3d.txt") (success-log . "server/built/install/pict3d.txt") (test-failure-log . "server/built/test-fail/pict3d.txt") (test-success-log . #f))) (checksum . "b73e77c66461081934eaeeb17f079841a0118387") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.3") "draw-lib" "srfi-lite-lib" "typed-racket-lib" "typed-racket-more" "math-lib" "scribble-lib" "gui-lib" "pconvert-lib" "pict-lib" "profile-lib" "pfds" "unstable-lib" "draw-doc" "gui-doc" "gui-lib" "racket-doc" "plot-doc" "plot-lib" "plot-gui-lib" "images-doc" "images-lib" "htdp-doc" "htdp-lib" "pict-doc" "typed-racket-doc")) (description . "Modern 3D engine with a purely functional interface") (implies . ()) (last-checked . 1632904298) (last-edit . 1450551203) (last-updated . 1598622661) (modules . ((lib "pict3d/tests/spinny-cube/player-state.rkt") (lib "pict3d/private/engine/scene/tags.rkt") (lib "pict3d/private/engine/draw/merge-passes.rkt") (lib "pict3d/private/gl.rkt") (lib "pict3d/private/pos/pos-dir.rkt") (lib "pict3d/private/gui/utils/format.rkt") (lib "pict3d/private/math/fllinear3.rkt") (lib "pict3d/tests/camera-ray-trace.rkt") (lib "pict3d/private/gui/invisible-context.rkt") (lib "pict3d/private/math/fl3.rkt") (lib "pict3d/private/math/fls3.rkt") (lib "pict3d/private/gui/typed-pict3d-canvas.rkt") (lib "pict3d/tests/triangle-surface.rkt") (lib "pict3d/tests/opengl/bitmaptest.rkt") (lib "typed/opengl.rkt") (lib "pict3d/tests/spaceship.rkt") (lib "pict3d/private/gl/typed-context.rkt") (lib "pict3d/private/soup/types.rkt") (lib "pict3d/private/math/flt3.rkt") (lib "pict3d/private/engine/draw/draw-passes.rkt") (lib "pict3d/tests/depth-range.rkt") (lib "pict3d/private/universe/big-bang.rkt") (lib "pict3d/private/engine.rkt") (lib "pict3d/tests/nuclear-sausage-plant.rkt") (lib "pict3d/private/math/flprojective3.rkt") (lib "pict3d/tests/fractal-trees.rkt") (lib "pict3d/private/gui/untyped-pict3d-bitmap.rkt") (lib "pict3d/private/gui/pict3d-bitmap.rkt") (lib "pict3d/private/shape/triangle-mesh.rkt") (lib "pict3d/private/gui/shape/light-grid.rkt") (lib "pict3d/private/gl/framebuffer.rkt") (lib "typed/opengl/ffi.rkt") (lib "typed/opengl/typed-opengl.scrbl") (lib "typed/opengl/typed.rkt") (lib "pict3d/private/engine/types.rkt") (lib "pict3d/private/soup/mesh.rkt") (lib "pict3d/private/math/fl.rkt") (lib "pict3d/tests/opengl/gears.rkt") (lib "pict3d/tests/opengl/vbotest.rkt") (lib "typed/opengl/typed-types.rkt") (lib "pict3d/private/engine/scene/scene.rkt") (lib "pict3d/private/engine/draw/draw-pass.rkt") (lib "pict3d/private/shape/sphere/ge_30.rkt") (lib "pict3d/private/engine/shader.rkt") (lib "pict3d/private/gui/pict3d-struct.rkt") (lib "pict3d/tests/snowman.rkt") (lib "typed/opengl/untyped.rkt") (lib "pict3d/private/engine/scene/scene-query.rkt") (lib "pict3d/private/shape/sphere.rkt") (lib "pict3d/private/shape/point-light.rkt") (lib "pict3d/scribblings/sniplike-bitmap.rkt") (lib "pict3d/tests/gen-world-state.rkt") (lib "pict3d/private/shape/composite.rkt") (lib "pict3d/private/gui/typed-pict3d-combinators.rkt") (lib "pict3d/private/gui/utils/camera.rkt") (lib "pict3d/private/gl/face.rkt") (lib "pict3d/private/shape.rkt") (lib "pict3d/private/utils.rkt") (lib "pict3d/tests/shaders.rkt") (lib "pict3d/private/soup.rkt") (lib "pict3d/private/shape/cylinder.rkt") (lib "pict3d/private/shape/directional-light.rkt") (lib "pict3d/private/shape/frozen-scene.rkt") (lib "pict3d/scribblings/serializable-bitmap.rkt") (lib "pict3d/private/soup/group.rkt") (lib "pict3d/scribblings/pict3d.scrbl") (lib "pict3d/tests/spinny-cube/player-state-test.rkt") (lib "pict3d/tests/debug-passes.rkt") (lib "pict3d/private/gl/renderbuffer.rkt") (lib "pict3d/private/gui/untyped-master-context.rkt") (lib "pict3d/tests/spinny-cube/debug-picts.rkt") (lib "pict3d/tests/randomized/randomized-tests.rkt") (lib "pict3d/main.rkt") (lib "pict3d/private/math/flt3-data.rkt") (lib "pict3d/private/gl/buffer.rkt") (lib "pict3d/private/soup/geometry.rkt") (lib "pict3d/tests/spheres-on-canvas.rkt") (lib "pict3d/tests/trace.rkt") (lib "pict3d/private/gui/typed-user-types.rkt") (lib "pict3d/private/math/fl2.rkt") (lib "pict3d/private/math/flrect3.rkt") (lib "pict3d/private/gl/texture.rkt") (lib "pict3d/private/ffi.rkt") (lib "pict3d/tests/opengl/gltest.rkt") (lib "pict3d/private/gui/shape/point-light-shell.rkt") (lib "pict3d/scribblings/utils.rkt") (lib "pict3d/private/engine/shader/shader-code.rkt") (lib "pict3d/tests/randomized/check-tessellate-vs-orig.rkt") (lib "pict3d/private/engine/draw/types.rkt") (lib "pict3d/private/untyped-utils.rkt") (lib "pict3d/private/shape/rectangle.rkt") (lib "pict3d/private/gui/pict3d-combinators.rkt") (lib "pict3d/private/shape/polygon.rkt") (lib "typed/opengl/ffi-types.rkt") (lib "pict3d/tests/pr/33.rkt") (lib "pict3d/tests/docs-complete.rkt") (lib "pict3d/tests/triangle-vertex.rkt") (lib "pict3d/private/gui/parameters.rkt") (lib "pict3d/private/soup/deform.rkt") (lib "pict3d/private/ffi-types.rkt") (lib "pict3d/private/gl/vertex-array.rkt") (lib "pict3d/private/shape/disk.rkt") (lib "pict3d/private/memo.rkt") (lib "pict3d/tests/randomized/regression-tests.rkt") (lib "pict3d/private/gui/utils/center-pointer.rkt") (lib "pict3d/private/math/maybe-flrect3.rkt") (lib "pict3d/private/pos/linear-affine-smooth.rkt") (lib "pict3d/tests/cull.rkt") (lib "pict3d/private/math/flv3-merge.rkt") (lib "pict3d/tests/opengl/shadertest.rkt") (lib "typed/opengl/readspec.rkt") (lib "pict3d/private/gui/utils/scales.rkt") (lib "pict3d/private/gui/untyped-pict3d-canvas.rkt") (lib "pict3d/private/math/fl4.rkt") (lib "pict3d/private/engine/scene.rkt") (lib "pict3d/private/math/flplane3.rkt") (lib "pict3d/private/gl/untyped-context.rkt") (lib "pict3d/private/engine/scene/types.rkt") (lib "typed/opengl/utils.rkt") (lib "pict3d/private/soup/query.rkt") (lib "pict3d/private/pos/affine-combinators.rkt") (lib "pict3d/private/gui/pict3d-canvas.rkt") (lib "pict3d/tests/opengl/viewer.rkt") (lib "pict3d/tests/adaptive-deform.rkt") (lib "pict3d/private/lazy-gui.rkt") (lib "pict3d/tests/math/flv3-tests.rkt") (lib "pict3d/private/math.rkt") (lib "pict3d/private/math/flaffine3.rkt") (lib "pict3d/private/shape/triangle-outline.rkt") (lib "pict3d/private/gui/master-context.rkt") (lib "pict3d/private/gui/pict3d-draw.rkt") (lib "pict3d/private/engine/shader/serialize-vertices.rkt") (lib "pict3d/private/gl/object.rkt") (lib "pict3d/private/gl/cached-vector.rkt") (lib "pict3d/engine.rkt") (lib "pict3d/private/shape/sphere/sphere-type.rkt") (lib "pict3d/tests/randomized/check-ray-trace-vs-opengl.rkt") (lib "pict3d/private/gui/user-types.rkt") (lib "pict3d/private/shape/types.rkt") (lib "pict3d/private/math/flt3-unboxed-ops.rkt") (lib "pict3d/private/engine/utils.rkt") (lib "pict3d/universe.rkt") (lib "pict3d/private/engine/draw.rkt") (lib "pict3d/tests/spinny-cube/player.rkt") (lib "pict3d/private/gui/utils/timeout-timer.rkt") (lib "pict3d/private/gui/typed-pict3d-bitmap.rkt") (lib "pict3d/private/math/flv3.rkt") (lib "pict3d/private/gui/indicators.rkt") (lib "pict3d/tests/opengl/planet.rkt") (lib "pict3d/private/gl/context.rkt") (lib "pict3d/private/shape/sphere/ge_32.rkt") (lib "pict3d/private/gl/program.rkt") (lib "pict3d/tests/deform-groups.rkt") (lib "pict3d/private/math/flv4.rkt") (lib "pict3d/private/gui/pict3d-snip.rkt"))) (name . "pict3d") (ring . 1) (search-terms . #hasheq((3d . #t) (:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (author:jay.mccarthy@gmail.com . #t) (author:mflatt@racket-lang.org . #t) (author:neil.toronto@gmail.com . #t) (games . #t) (graphics . #t) (gui . #t) (opengl . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/pict3d") (tags . ("3d" "games" "graphics" "gui" "opengl")) (versions . #hash((default . #hasheq((checksum . "b73e77c66461081934eaeeb17f079841a0118387") (source . "git://github.com/jeapostrophe/pict3d") (source_url . "http://github.com/jeapostrophe/pict3d/tree/master"))) ("6.2.1" . #hasheq((checksum . "da3d9b084909b643415e6d51cd269c82fd50feb3") (source . "git://github.com/jeapostrophe/pict3d#for-racket-v6.2.1") (source_url . "http://github.com/jeapostrophe/pict3d/tree/master#for-racket-v6.2.1"))) ("6.2" . #hasheq((checksum . "da3d9b084909b643415e6d51cd269c82fd50feb3") (source . "git://github.com/jeapostrophe/pict3d#for-racket-v6.2.1") (source_url . "http://github.com/jeapostrophe/pict3d/tree/master#for-racket-v6.2.1"))) ("6.1.1" . #hasheq((checksum . "da3d9b084909b643415e6d51cd269c82fd50feb3") (source . "git://github.com/jeapostrophe/pict3d#for-racket-v6.2.1") (source_url . "http://github.com/jeapostrophe/pict3d/tree/master#for-racket-v6.2.1"))))))) ("pict3d-die-cut" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pict3d-die-cut" "doc/pict3d-die-cut@pict3d-die-cut/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pict3d-die-cut.txt") (test-failure-log . "server/built/test-fail/pict3d-die-cut.txt") (test-success-log . #f))) (checksum . "29354f8dd2e9f964da834903332318a995d15727") (checksum-error . #f) (collection . "pict3d-die-cut") (conflicts . ()) (dependencies . ("base" ("draw-lib" #:version "1.8") "gui-lib" "pict3d" "glu-tessellate" "draw-doc" "racket-doc" "scribble-lib")) (description . "For Pict3D, generates text and other 2-D shapes from paths") (implies . ()) (last-checked . 1632904300) (last-edit . 1443652999) (last-updated . 1502816255) (modules . ((lib "pict3d-die-cut/main.rkt") (lib "pict3d-die-cut/pict3d-die-cut.scrbl"))) (name . "pict3d-die-cut") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (graphics . #t) (ring:1 . #t))) (source . "git://github.com/mflatt/pict3d-die-cut") (tags . ("graphics")) (versions . #hash((default . #hasheq((checksum . "29354f8dd2e9f964da834903332318a995d15727") (source . "git://github.com/mflatt/pict3d-die-cut") (source_url . "http://github.com/mflatt/pict3d-die-cut/tree/master"))))))) ("pict3d-orig" . #hasheq((author . "neil.toronto@gmail.com") (authors . ("neil.toronto@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "typed-opengl" "doc/typed-opengl@pict3d-orig/index.html") ("none" "pict3d"))) (failure-log . "server/built/fail/pict3d-orig.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "09283c9d930c63b6a6a3f2caa43e029222091bdb") (checksum-error . #f) (collection . (multi)) (conflicts . ("pict3d")) (dependencies . (("base" #:version "6.1.1") "draw-lib" "srfi-lite-lib" "typed-racket-lib" "typed-racket-more" "math-lib" "scribble-lib" "gui-lib" "pconvert-lib" "pict-lib" "profile-lib" "pfds" "draw-doc" "gui-doc" "gui-lib" "racket-doc" "plot-doc" "plot-lib" "plot-gui-lib" "images-doc" "images-lib" "htdp-doc" "htdp-lib" "pict-doc" "typed-racket-doc")) (description . "Modern 3D engine with a purely functional interface") (implies . ()) (last-checked . 1632904301) (last-edit . 1422736009) (last-updated . 1502816255) (modules . ((lib "pict3d/tests/spinny-cube/player-state.rkt") (lib "pict3d/private/engine/scene/tags.rkt") (lib "pict3d/private/engine/draw/merge-passes.rkt") (lib "pict3d/private/gl.rkt") (lib "pict3d/private/gui/utils/format.rkt") (lib "pict3d/private/math/fllinear3.rkt") (lib "pict3d/tests/camera-ray-trace.rkt") (lib "pict3d/private/gui/invisible-context.rkt") (lib "pict3d/private/math/fl3.rkt") (lib "pict3d/private/math/fls3.rkt") (lib "pict3d/private/gui/typed-pict3d-canvas.rkt") (lib "pict3d/tests/triangle-surface.rkt") (lib "pict3d/tests/opengl/bitmaptest.rkt") (lib "typed/opengl.rkt") (lib "pict3d/tests/spaceship.rkt") (lib "pict3d/private/gl/typed-context.rkt") (lib "pict3d/private/soup/types.rkt") (lib "pict3d/private/math/flt3.rkt") (lib "pict3d/private/engine/draw/draw-passes.rkt") (lib "pict3d/tests/depth-range.rkt") (lib "pict3d/private/universe/big-bang.rkt") (lib "pict3d/private/engine.rkt") (lib "pict3d/tests/nuclear-sausage-plant.rkt") (lib "pict3d/private/math/flprojective3.rkt") (lib "pict3d/tests/fractal-trees.rkt") (lib "pict3d/private/gui/untyped-pict3d-bitmap.rkt") (lib "pict3d/private/gui/pict3d-bitmap.rkt") (lib "pict3d/private/shape/triangle-mesh.rkt") (lib "pict3d/private/gui/shape/light-grid.rkt") (lib "pict3d/private/gl/framebuffer.rkt") (lib "typed/opengl/ffi.rkt") (lib "typed/opengl/typed-opengl.scrbl") (lib "typed/opengl/typed.rkt") (lib "pict3d/private/engine/types.rkt") (lib "pict3d/private/soup/mesh.rkt") (lib "pict3d/private/math/fl.rkt") (lib "pict3d/tests/opengl/gears.rkt") (lib "pict3d/tests/opengl/vbotest.rkt") (lib "typed/opengl/typed-types.rkt") (lib "pict3d/private/engine/scene/scene.rkt") (lib "pict3d/private/engine/draw/draw-pass.rkt") (lib "pict3d/private/shape/sphere/ge_30.rkt") (lib "pict3d/private/engine/shader.rkt") (lib "pict3d/private/gui/pict3d-struct.rkt") (lib "pict3d/tests/snowman.rkt") (lib "typed/opengl/untyped.rkt") (lib "pict3d/private/engine/scene/scene-query.rkt") (lib "pict3d/private/shape/sphere.rkt") (lib "pict3d/private/shape/point-light.rkt") (lib "pict3d/scribblings/sniplike-bitmap.rkt") (lib "pict3d/tests/gen-world-state.rkt") (lib "pict3d/private/shape/composite.rkt") (lib "pict3d/private/gui/typed-pict3d-combinators.rkt") (lib "pict3d/private/gui/utils/camera.rkt") (lib "pict3d/private/gl/face.rkt") (lib "pict3d/private/shape.rkt") (lib "pict3d/private/utils.rkt") (lib "pict3d/private/soup.rkt") (lib "pict3d/private/shape/cylinder.rkt") (lib "pict3d/private/shape/directional-light.rkt") (lib "pict3d/private/shape/frozen-scene.rkt") (lib "pict3d/scribblings/serializable-bitmap.rkt") (lib "pict3d/private/soup/group.rkt") (lib "pict3d/scribblings/pict3d.scrbl") (lib "pict3d/tests/spinny-cube/player-state-test.rkt") (lib "pict3d/tests/debug-passes.rkt") (lib "pict3d/private/gl/renderbuffer.rkt") (lib "pict3d/private/gui/untyped-master-context.rkt") (lib "pict3d/tests/spinny-cube/debug-picts.rkt") (lib "pict3d/tests/randomized/randomized-tests.rkt") (lib "pict3d/main.rkt") (lib "pict3d/private/math/flt3-data.rkt") (lib "pict3d/private/gl/buffer.rkt") (lib "pict3d/private/soup/geometry.rkt") (lib "pict3d/tests/spheres-on-canvas.rkt") (lib "pict3d/tests/trace.rkt") (lib "pict3d/private/gui/typed-user-types.rkt") (lib "pict3d/private/math/fl2.rkt") (lib "pict3d/private/math/flrect3.rkt") (lib "pict3d/private/gl/texture.rkt") (lib "pict3d/private/ffi.rkt") (lib "pict3d/tests/opengl/gltest.rkt") (lib "pict3d/private/gui/shape/point-light-shell.rkt") (lib "pict3d/scribblings/utils.rkt") (lib "pict3d/private/engine/shader/shader-code.rkt") (lib "pict3d/tests/randomized/check-tessellate-vs-orig.rkt") (lib "pict3d/private/engine/draw/types.rkt") (lib "pict3d/private/untyped-utils.rkt") (lib "pict3d/private/shape/rectangle.rkt") (lib "pict3d/private/gui/pict3d-combinators.rkt") (lib "pict3d/private/shape/polygon.rkt") (lib "typed/opengl/ffi-types.rkt") (lib "pict3d/tests/docs-complete.rkt") (lib "pict3d/tests/triangle-vertex.rkt") (lib "pict3d/private/gui/parameters.rkt") (lib "pict3d/private/soup/deform.rkt") (lib "pict3d/private/ffi-types.rkt") (lib "pict3d/private/gl/vertex-array.rkt") (lib "pict3d/private/shape/disk.rkt") (lib "pict3d/private/memo.rkt") (lib "pict3d/tests/randomized/regression-tests.rkt") (lib "pict3d/private/gui/utils/center-pointer.rkt") (lib "pict3d/private/math/maybe-flrect3.rkt") (lib "pict3d/tests/cull.rkt") (lib "pict3d/private/math/flv3-merge.rkt") (lib "pict3d/tests/opengl/shadertest.rkt") (lib "typed/opengl/readspec.rkt") (lib "pict3d/private/gui/utils/scales.rkt") (lib "pict3d/private/gui/untyped-pict3d-canvas.rkt") (lib "pict3d/private/math/fl4.rkt") (lib "pict3d/private/engine/scene.rkt") (lib "pict3d/private/math/flplane3.rkt") (lib "pict3d/private/gl/untyped-context.rkt") (lib "pict3d/private/engine/scene/types.rkt") (lib "typed/opengl/utils.rkt") (lib "pict3d/private/soup/query.rkt") (lib "pict3d/private/gui/pict3d-canvas.rkt") (lib "pict3d/tests/opengl/viewer.rkt") (lib "pict3d/tests/adaptive-deform.rkt") (lib "pict3d/private/lazy-gui.rkt") (lib "pict3d/tests/math/flv3-tests.rkt") (lib "pict3d/private/math.rkt") (lib "pict3d/private/math/flaffine3.rkt") (lib "pict3d/private/shape/triangle-outline.rkt") (lib "pict3d/private/gui/master-context.rkt") (lib "pict3d/private/gui/pict3d-draw.rkt") (lib "pict3d/private/engine/shader/serialize-vertices.rkt") (lib "pict3d/private/gl/object.rkt") (lib "pict3d/private/gl/cached-vector.rkt") (lib "pict3d/engine.rkt") (lib "pict3d/private/shape/sphere/sphere-type.rkt") (lib "pict3d/tests/randomized/check-ray-trace-vs-opengl.rkt") (lib "pict3d/private/gui/user-types.rkt") (lib "pict3d/private/shape/types.rkt") (lib "pict3d/private/math/flt3-unboxed-ops.rkt") (lib "pict3d/private/engine/utils.rkt") (lib "pict3d/universe.rkt") (lib "pict3d/private/engine/draw.rkt") (lib "pict3d/tests/spinny-cube/player.rkt") (lib "pict3d/private/gui/utils/timeout-timer.rkt") (lib "pict3d/private/math/flv3.rkt") (lib "pict3d/private/gui/indicators.rkt") (lib "pict3d/tests/opengl/planet.rkt") (lib "pict3d/private/gl/context.rkt") (lib "pict3d/private/shape/sphere/ge_32.rkt") (lib "pict3d/private/gl/program.rkt") (lib "pict3d/tests/deform-groups.rkt") (lib "pict3d/private/math/flv4.rkt") (lib "pict3d/private/gui/pict3d-snip.rkt"))) (name . "pict3d-orig") (ring . 2) (search-terms . #hasheq((3d . #t) (:build-fail: . #t) (:conflicts: . #t) (:docs-error: . #t) (author:neil.toronto@gmail.com . #t) (games . #t) (graphics . #t) (gui . #t) (opengl . #t) (ring:2 . #t))) (source . "git://github.com/ntoronto/pict3d") (tags . ("3d" "games" "graphics" "gui" "opengl")) (versions . #hash((default . #hasheq((checksum . "09283c9d930c63b6a6a3f2caa43e029222091bdb") (source . "git://github.com/ntoronto/pict3d") (source_url . "http://github.com/ntoronto/pict3d/tree/master"))))))) ("picturing-programs" . #hash((author . "sbloch@racket-lang.org") (authors . ("sbloch@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "picturing-programs" "doc/picturing-programs@picturing-programs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "snip-lib" "htdp-lib" "racket-doc" "htdp-doc" "scribble-lib")) (description . "Teaching libraries for _Picturing Programs_") (implies . ()) (last-checked . 1632904301) (last-edit . 1417723029) (last-updated . 1612017390) (modules . ((lib "picturing-programs/tests/random-seed.rkt") (lib "picturing-programs/private/map-image.rkt") (lib "picturing-programs/tests/map-image-isl-tests.rkt") (lib "picturing-programs/private/book-pictures.rkt") (lib "picturing-programs/private/io-stuff.rkt") (lib "picturing-programs/main.rkt") (lib "picturing-programs/tests/map-image-bsl-tests.rkt") (lib "picturing-programs/tests/rotating-triangle.rkt") (lib "picturing-programs/picturing-programs.scrbl") (lib "picturing-programs/tests/test-docs-complete.rkt") (lib "picturing-programs/private/tiles.rkt") (lib "teachpack/picturing-programs.rkt"))) (name . "picturing-programs") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:sbloch@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "9061b6c6f93a2aeba58a785a75c324225e12a47c") (source . "git://github.com/racket/picturing-programs") (source_url . "http://github.com/racket/picturing-programs/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("picturing-programs-typed" . #hasheq((author . "maueroats@gmail.com racket@maueroats.fastmail.fm") (authors . ("maueroats@gmail.com" "racket@maueroats.fastmail.fm")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/picturing-programs-typed.txt") (test-failure-log . "server/built/test-fail/picturing-programs-typed.txt") (test-success-log . #f))) (checksum . "82dd9c1938c0fa9fdb5ea95849f7ca6f3a082edd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1557615550) (dependencies . ("base" "2htdp-typed" "picturing-programs" "draw-lib" "htdp-lib" "typed-racket-lib" "typed-racket-more" "unstable-list-lib" "unstable-contract-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Bloch's picturing-programs package converted to be usable in Typed Racket. Typed utility functions for posns also included.") (implies . ()) (last-checked . 1632904301) (last-edit . 1557615550) (last-updated . 1558196525) (modules . ((lib "scribblings/picturing-programs-typed.scrbl") (lib "typed/posn-util.rkt") (lib "typed/picturing-programs.rkt"))) (name . "picturing-programs-typed") (ring . 1) (search-terms . #hasheq((2htdp . #t) (:build-success: . #t) (author:maueroats@gmail.com . #t) (author:racket@maueroats.fastmail.fm . #t) (picturing-programs . #t) (ring:1 . #t) (student . #t))) (source . "https://github.com/maueroats/picturing-programs-typed.git") (tags . ("2htdp" "picturing-programs" "student")) (versions . #hash((default . #hasheq((checksum . "82dd9c1938c0fa9fdb5ea95849f7ca6f3a082edd") (source . "https://github.com/maueroats/picturing-programs-typed.git") (source_url . "https://github.com/maueroats/picturing-programs-typed.git"))))))) ("pidec" . #hasheq((author . "luis.osa.gdc@gmail.com ") (authors . ("luis.osa.gdc@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pidec" "doc/pidec@pidec/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pidec.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pidec.txt"))) (checksum . "4ec0b094709d83d54cb1de69209ecfd6a642573d") (checksum-error . #f) (collection . "pidec") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "math-lib" "typed-racket-lib" "while-loop" "scribble-lib" "racket-doc")) (description . "Computation of the n-th digit of π with low memory") (implies . ()) (last-checked . 1632904301) (last-edit . 1435507356) (last-updated . 1502816259) (modules . ((lib "pidec/test-main.rkt") (lib "pidec/scribblings/pidec.scrbl") (lib "pidec/main.rkt"))) (name . "pidec") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:luis.osa.gdc@gmail.com . #t) (numerical . #t) (ring:1 . #t))) (source . "git://github.com/logc/pidec.git") (tags . ("numerical")) (versions . #hash((default . #hasheq((checksum . "4ec0b094709d83d54cb1de69209ecfd6a642573d") (source . "git://github.com/logc/pidec.git") (source_url . "http://github.com/logc/pidec.git/tree/master"))))))) ("pie" . #hasheq((author . "david@davidchristiansen.dk dfried00@gmail.com") (authors . ("david@davidchristiansen.dk" "dfried00@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pie" "doc/pie@pie/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pie.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pie.txt"))) (checksum . "2c89553a693ac6688b16d722f416914f2e9aa4c3") (checksum-error . #f) (collection . "pie") (conflicts . ()) (dependencies . (("base" #:version "6.5") "data-lib" "gui-lib" "slideshow-lib" "pict-lib" "typed-racket-lib" "typed-racket-more" "parser-tools-lib" "syntax-color-lib" "rackunit-lib" "todo-list" "scribble-lib" "racket-doc" "sandbox-lib" "rackunit-lib")) (description . "The Pie language, used in The Little Typer") (implies . ()) (last-checked . 1632904302) (last-edit . 1515171354) (last-updated . 1625682883) (modules . ((lib "pie/alpha.rkt") (lib "pie/gui/main.rkt") (lib "pie/rep.rkt") (lib "pie/gui/pie-lexer.rkt") (lib "pie/basics.rkt") (lib "pie/pie-info.rkt") (lib "pie/fresh.rkt") (lib "pie/serialization.rkt") (lib "pie/gui/print-gui.rkt") (lib "pie/typechecker.rkt") (lib "pie/pie-err.rkt") (lib "pie/locations.rkt") (lib "pie/tests.rkt") (lib "pie/resugar.rkt") (lib "pie/show-goal.rkt") (lib "pie/pie.scrbl") (lib "pie/pretty.rkt") (lib "pie/parser.rkt") (lib "pie/test-todo-output.rkt") (lib "pie/interactive-editing.rkt") (lib "pie/slideshow.rkt") (lib "pie/main.rkt") (lib "pie/tooltip.rkt") (lib "pie/normalize.rkt") (lib "pie/gui/pie-styles.rkt"))) (name . "pie") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david@davidchristiansen.dk . #t) (author:dfried00@gmail.com . #t) (lang . #t) (language . #t) (ring:1 . #t) (types . #t))) (source . "https://github.com/the-little-typer/pie.git") (tags . ("lang" "language" "types")) (versions . #hash((default . #hasheq((checksum . "2c89553a693ac6688b16d722f416914f2e9aa4c3") (source . "https://github.com/the-little-typer/pie.git") (source_url . "https://github.com/the-little-typer/pie.git"))))))) ("pie-a-let-mode" . #hasheq((author . "pnwamk@gmail.com") (authors . ("pnwamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pie-a-let-mode" "doc/pie-a-let-mode@pie-a-let-mode/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pie-a-let-mode.txt") (test-failure-log . "server/built/test-fail/pie-a-let-mode.txt") (test-success-log . #f))) (checksum . "77d183629f3d09f2d0b79a5bcd3b16e92ecf5f19") (checksum-error . #f) (collection . "pie-a-let-mode") (conflicts . ()) (dependencies . (("base" #:version "6.5") "data-lib" "gui-lib" "slideshow-lib" "pict-lib" "typed-racket-lib" "typed-racket-more" "parser-tools-lib" "syntax-color-lib" "rackunit-lib" "todo-list" "scribble-lib" "racket-doc" "sandbox-lib")) (description . "A little fork of the Pie language (adds `let` and `equal`).") (implies . ()) (last-checked . 1632904302) (last-edit . 1520729012) (last-updated . 1586275851) (modules . ((lib "pie-a-let-mode/fresh.rkt") (lib "pie-a-let-mode/parser.rkt") (lib "pie-a-let-mode/tooltip.rkt") (lib "pie-a-let-mode/resugar.rkt") (lib "pie-a-let-mode/gui/main.rkt") (lib "pie-a-let-mode/locations.rkt") (lib "pie-a-let-mode/pie-info.rkt") (lib "pie-a-let-mode/basics.rkt") (lib "pie-a-let-mode/slideshow.rkt") (lib "pie-a-let-mode/show-goal.rkt") (lib "pie-a-let-mode/normalize.rkt") (lib "pie-a-let-mode/interactive-editing.rkt") (lib "pie-a-let-mode/tests.rkt") (lib "pie-a-let-mode/pie-a-let-mode.scrbl") (lib "pie-a-let-mode/gui/pie-lexer.rkt") (lib "pie-a-let-mode/main.rkt") (lib "pie-a-let-mode/gui/print-gui.rkt") (lib "pie-a-let-mode/rep.rkt") (lib "pie-a-let-mode/serialization.rkt") (lib "pie-a-let-mode/gui/pie-styles.rkt") (lib "pie-a-let-mode/test-todo-output.rkt") (lib "pie-a-let-mode/alpha.rkt") (lib "pie-a-let-mode/pie-err.rkt") (lib "pie-a-let-mode/pretty.rkt") (lib "pie-a-let-mode/typechecker.rkt"))) (name . "pie-a-let-mode") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pnwamk@gmail.com . #t) (lang . #t) (language . #t) (ring:1 . #t) (types . #t))) (source . "https://github.com/pnwamk/pie.git#a-let-mode") (tags . ("lang" "language" "types")) (versions . #hash((default . #hasheq((checksum . "77d183629f3d09f2d0b79a5bcd3b16e92ecf5f19") (source . "https://github.com/pnwamk/pie.git#a-let-mode") (source_url . "https://github.com/pnwamk/pie.git#a-let-mode"))))))) ("piecrust" . #hasheq((author . "nadeem@acm.org") (authors . ("nadeem@acm.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "piecrust" "doc/piecrust@piecrust/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/piecrust.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/piecrust.txt"))) (checksum . "71761acebc880912a4c688a32baef871dbf9ad94") (checksum-error . #f) (collection . "piecrust") (conflicts . ()) (date-added . 1625020884) (dependencies . ("base" "db" "web-server" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "An automated (RESTful) CRUD API generator for use with the Racket web server.") (implies . ()) (last-checked . 1632904302) (last-edit . 1625067412) (last-updated . 1625326728) (modules . ((lib "piecrust/tests/test-utils.rkt") (lib "piecrust/tests/minimal-example.rkt") (lib "piecrust/tests/book-author-example.rkt") (lib "piecrust/private/handlers.rkt") (lib "piecrust/scribblings/piecrust.scrbl") (lib "piecrust/tests/shopping-list-example.rkt") (lib "piecrust/private/structs.rkt") (lib "piecrust/main.rkt"))) (name . "piecrust") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (api . #t) (author:nadeem@acm.org . #t) (json . #t) (ring:1 . #t) (sql . #t) (web-server . #t))) (source . "https://github.com/nadeemabdulhamid/piecrust.git") (tags . ("api" "json" "sql" "web-server")) (versions . #hash((default . #hasheq((checksum . "71761acebc880912a4c688a32baef871dbf9ad94") (source . "https://github.com/nadeemabdulhamid/piecrust.git") (source_url . "https://github.com/nadeemabdulhamid/piecrust.git"))))))) ("pinyin" . #hasheq((author . "mail@xuchunyang.me") (authors . ("mail@xuchunyang.me")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pinyin" "doc/pinyin@pinyin/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pinyin.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pinyin.txt"))) (checksum . "568e626f8be36c311f40d3f6771cf4f4d1cee677") (checksum-error . #f) (collection . "pinyin") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "汉字转拼音") (implies . ()) (last-checked . 1632904302) (last-edit . 1530118189) (last-updated . 1530290700) (modules . ((lib "pinyin/scribblings/pinyin.scrbl") (lib "pinyin/main.rkt"))) (name . "pinyin") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mail@xuchunyang.me . #t) (chinese . #t) (ring:1 . #t))) (source . "https://github.com/xuchunyang/pinyin.git") (tags . ("chinese")) (versions . #hash((default . #hasheq((checksum . "568e626f8be36c311f40d3f6771cf4f4d1cee677") (source . "https://github.com/xuchunyang/pinyin.git") (source_url . "https://github.com/xuchunyang/pinyin.git"))))))) ("pipe" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pipe" "doc/pipe@pipe/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pipe.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pipe.txt"))) (checksum . "179b8f8ad92ced86ea8dacec607deb24aefc15aa") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("typed-racket-lib" "base" "racket-doc" "typed-racket-doc" "scribble-lib")) (description . "Iteratees in Typed Racket.") (implies . ()) (last-checked . 1632904302) (last-edit . 1528212862) (last-updated . 1620469844) (modules . ((lib "pipe/filetank.rkt") (lib "pipe/tanks.rkt") (lib "pipe/pipes.rkt") (lib "pipe/types.rkt") (lib "pipe/scribblings/pipe.scrbl") (lib "pipe/main.rkt") (lib "pipe/pumps.rkt"))) (name . "pipe") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (control . #t) (iteratee . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/pipe.git") (tags . ("control" "iteratee")) (versions . #hash((default . #hasheq((checksum . "179b8f8ad92ced86ea8dacec607deb24aefc15aa") (source . "https://gitlab.com/RayRacine/pipe.git") (source_url . "https://gitlab.com/RayRacine/pipe.git"))))))) ("pitfall" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pitfall.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pitfall.txt"))) (checksum . "615d3830f03a3d38fe7d4d439391f1dcdaf2b597") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661214) (dependencies . ("draw-lib" "with-cache" "at-exp-lib" ("base" #:version "7.1") "beautiful-racket-lib" "brag" "fontland" "rackunit-lib" "srfi-lite-lib" "sugar" "gregor" "debug")) (description . "PDF generation library [under development]") (implies . ()) (last-checked . 1632904303) (last-edit . 1556661214) (last-updated . 1621355223) (modules . ((lib "pitfall/png.rkt") (lib "ptest/test14.rkt") (lib "ptest/test4.rkt") (lib "ptest/all.rkt") (lib "ptest/test0.rkt") (lib "pitfall/font.rkt") (lib "pitfall/annotation.rkt") (lib "ptest/test13.rkt") (lib "ptest/test2.rkt") (lib "pitfall/main.rkt") (lib "pitfall/pdftest.rkt") (lib "ptest/test20a.rkt") (lib "ptest/test1.rkt") (lib "ptest/test16.rkt") (lib "ptest/test6.rkt") (lib "ptest/log.rkt") (lib "ptest/raco.rkt") (lib "pitfall/font-standard.rkt") (lib "ptest/test10.rkt") (lib "ptest/test15.rkt") (lib "pitfall/pdf.rkt") (lib "ptest/test22.rkt") (lib "pitfall/core.rkt") (lib "ptest/test3.rkt") (lib "ptest/testrkt.rkt") (lib "pitfall/font-embedded.rkt") (lib "pitfall/check-pdf.rkt") (lib "ptest/test9.rkt") (lib "pitfall/reference.rkt") (lib "pitfall/vector.rkt") (lib "pitfall/page-test.rkt") (lib "ptest/test17.rkt") (lib "ptest/test8.rkt") (lib "ptest/test24.rkt") (lib "ptest/test5.rkt") (lib "pitfall/page.rkt") (lib "ptest/test21.rkt") (lib "pitfall/object.rkt") (lib "ptest/test23.rkt") (lib "ptest/test12.rkt") (lib "ptest/test20.rkt") (lib "pitfall/test.rkt") (lib "pitfall/scribblings/pitfall.scrbl") (lib "pitfall/text.rkt") (lib "ptest/test18.rkt") (lib "pitfall/jpeg.rkt") (lib "ptest/test11.rkt") (lib "pitfall/color.rkt") (lib "ptest/test7.rkt") (lib "pitfall/image.rkt") (lib "ptest/test19.rkt"))) (name . "pitfall") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mb@mbtype.com . #t) (pdf . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/pitfall.git") (tags . ("pdf")) (versions . #hash((default . #hasheq((checksum . "615d3830f03a3d38fe7d4d439391f1dcdaf2b597") (source . "https://github.com/mbutterick/pitfall.git") (source_url . "https://github.com/mbutterick/pitfall.git"))))))) ("pk" . #hasheq((author . "cwebber@dustycloud.org") (authors . ("cwebber@dustycloud.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pk.txt"))) (checksum . "f39127f1c23c479390d32a8e32502a0dc14b8f7d") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1560343249) (dependencies . ("base")) (description . "slightly superior print (peek) debugging") (implies . ()) (last-checked . 1632904303) (last-edit . 1560343249) (last-updated . 1620469844) (modules . ((lib "pk/main.rkt"))) (name . "pk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:cwebber@dustycloud.org . #t) (debugging . #t) (ring:1 . #t))) (source . "https://gitlab.com/dustyweb/racket-pk.git?path=pk") (tags . ("debugging")) (versions . #hash((default . #hasheq((checksum . "f39127f1c23c479390d32a8e32502a0dc14b8f7d") (source . "https://gitlab.com/dustyweb/racket-pk.git?path=pk") (source_url . "https://gitlab.com/dustyweb/racket-pk.git?path=pk"))))))) ("pkg-build" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pkg-build" "doc/pkg-build@pkg-build/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pkg-build.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pkg-build.txt"))) (checksum . "fcbdf97462d32bb217d5e86a6e6619ffe511c3e2") (checksum-error . #f) (collection . "pkg-build") (conflicts . ()) (dependencies . (("base" #:version "7.7.0.1") "rackunit" "scribble-html-lib" "web-server-lib" "plt-web-lib" ("remote-shell-lib" #:version "1.5") "at-exp-lib" "scribble-lib" "racket-doc")) (description . "Build server for pkgs") (implies . ()) (last-checked . 1632904304) (last-edit . 1417307461) (last-updated . 1619717130) (modules . ((lib "pkg-build/pkg-build.scrbl") (lib "pkg-build/private/about.rkt") (lib "pkg-build/main.rkt") (lib "pkg-build/private/install-step.rkt") (lib "pkg-build/private/summary.rkt") (lib "pkg-build/private/extract-doc.rkt") (lib "pkg-build/private/status.rkt") (lib "pkg-build/examples/vbox/build.rkt") (lib "pkg-build/private/pkg-list.rkt") (lib "pkg-build/examples/docker/build.rkt") (lib "pkg-build/private/thread.rkt") (lib "pkg-build/private/pkg-adds.rkt") (lib "pkg-build/private/download.rkt") (lib "pkg-build/private/union-find.rkt") (lib "pkg-build/private/config.rkt") (lib "pkg-build/private/vm.rkt"))) (name . "pkg-build") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/pkg-build") (tags . ()) (versions . #hash((default . #hasheq((checksum . "fcbdf97462d32bb217d5e86a6e6619ffe511c3e2") (source . "git://github.com/racket/pkg-build") (source_url . "http://github.com/racket/pkg-build/tree/master"))))))) ("pkg-dep-draw" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pkg-dep-draw" "doc/pkg-dep-draw@pkg-dep-draw/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pkg-dep-draw.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pkg-dep-draw.txt"))) (checksum . "10ccd5208aab1c54cab3fe767c48b98f87f1e79d") (checksum-error . #f) (collection . "pkg-dep-draw") (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "racket-doc" "scribble-lib")) (description . "") (implies . ()) (last-checked . 1632904304) (last-edit . 1408010820) (last-updated . 1502816260) (modules . ((lib "pkg-dep-draw/private/struct.rkt") (lib "pkg-dep-draw/private/config.rkt") (lib "pkg-dep-draw/private/cliques.rkt") (lib "pkg-dep-draw/private/closure.rkt") (lib "pkg-dep-draw/pkg-dep-draw.scrbl") (lib "pkg-dep-draw/main.rkt") (lib "pkg-dep-draw/private/draw.rkt") (lib "pkg-dep-draw/private/get-pkgs.rkt") (lib "pkg-dep-draw/private/gui.rkt"))) (name . "pkg-dep-draw") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:mflatt@cs.utah.edu . #t) (graphics . #t) (gui . #t) (ring:1 . #t))) (source . "git://github.com/mflatt/pkg-dep-draw") (tags . ("graphics" "gui")) (versions . #hash((default . #hasheq((checksum . "10ccd5208aab1c54cab3fe767c48b98f87f1e79d") (source . "git://github.com/mflatt/pkg-dep-draw") (source_url . "http://github.com/mflatt/pkg-dep-draw/tree/master"))))))) ("pkg-index" . #hash((author . "jay@racket-lang.org") (authors . ("jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/pkg-index.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "4ddbe125b9ddb4f950ef0a19420a2ed59dd1beed") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("racket-lib" "base" "compatibility-lib" "net-lib" "web-server-lib" "https://github.com/racket/infrastructure-userdb.git#main" "s3-sync" "plt-service-monitor" "rackunit-lib")) (description . "The Racket package catalog server") (implies . ()) (last-checked . 1632904304) (last-edit . 1417570664) (last-updated . 1619295853) (modules . ((lib "pkg-index/official/build-update.rkt") (lib "pkg-index/official/s3.rkt") (lib "pkg-index/official/configs/tonyg.rkt") (lib "pkg-index/official/update.rkt") (lib "pkg-index/planet-compat/static.rkt") (lib "pkg-index/official/static.rkt") (lib "pkg-index/official/dynamic.rkt") (lib "pkg-index/basic/main.rkt") (lib "pkg-index/official/common.rkt") (lib "pkg-index/official/configs/live.rkt") (lib "pkg-index/official/jsonp.rkt") (lib "pkg-index/official/config.rkt") (lib "pkg-index/planet-compat/common.rkt") (lib "pkg-index/official/modify.rkt") (lib "pkg-index/planet-compat/update.rkt") (lib "pkg-index/official/main.rkt") (lib "pkg-index/official/notify.rkt") (lib "pkg-index/official/upload.rkt"))) (name . "pkg-index") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:jay@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/pkg-index") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4ddbe125b9ddb4f950ef0a19420a2ed59dd1beed") (source . "git://github.com/racket/pkg-index") (source_url . "http://github.com/racket/pkg-index/tree/master"))))))) ("pkg-push" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pkg-push.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pkg-push.txt"))) (checksum . "3fc18d8edb81b854ed98897bef925c73f68597ed") (checksum-error . #f) (collection . "pkg-push") (conflicts . ()) (dependencies . ("aws" "base" "http")) (implies . ()) (last-checked . 1632904305) (last-edit . 1417307461) (last-updated . 1571887220) (modules . ((lib "pkg-push/push-catalog.rkt"))) (name . "pkg-push") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/pkg-push") (tags . ()) (versions . #hash((default . #hasheq((checksum . "3fc18d8edb81b854ed98897bef925c73f68597ed") (source . "git://github.com/racket/pkg-push") (source_url . "http://github.com/racket/pkg-push/tree/master"))))))) ("plai" . #hash((author . "jay@racket-lang.org") (authors . ("jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("plai-doc" "plai-lib" "base")) (description . "Teaching languages for _Programming Languages: Application and Interpretation_") (implies . ("plai-lib" "plai-doc")) (last-checked . 1632904305) (last-edit . 1432141352) (last-updated . 1632540654) (modules . ()) (name . "plai") (ring . 0) (search-terms . #hasheq((author:jay@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "101ffc72e2d3ddeeb45a353b2b1db4ed6003e58a") (source . "git://github.com/racket/plai?path=plai") (source_url . "http://github.com/racket/plai/tree/master?path=plai"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("plai-doc" . #hash((author . "jay@racket-lang.org") (authors . ("jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plai" "doc/plai@plai-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "101ffc72e2d3ddeeb45a353b2b1db4ed6003e58a") (checksum-error . #f) (collection . "plai") (conflicts . ()) (dependencies . ("scheme-lib" "srfi-lite-lib" "base" "gui-lib" "sandbox-lib" "web-server-lib" "plai-lib" "at-exp-lib" "eli-tester" "pconvert-lib" "rackunit-lib" "racket-doc" "web-server-doc" "scribble-lib" "drracket-tool-lib")) (description . "Documentation for teaching languages for _Programming Languages: Application and Interpretation_") (implies . ()) (last-checked . 1632904305) (last-edit . 1432141826) (last-updated . 1632540655) (modules . ((lib "plai/scribblings/lang-names.rkt") (lib "plai/scribblings/fake-mutator.rkt") (lib "plai/scribblings/collector2.scrbl") (lib "plai/scribblings/mutator2.scrbl") (lib "plai/scribblings/mutator.scrbl") (lib "plai/scribblings/plai.scrbl") (lib "plai/scribblings/plai-exports.rkt") (lib "plai/scribblings/rkt-exports.rkt") (lib "plai/scribblings/fake-collector.rkt") (lib "plai/scribblings/collector.scrbl") (lib "plai/scribblings/fake-mutator2.rkt") (lib "plai/scribblings/fake-web.rkt") (lib "plai/scribblings/fake-collector2.rkt"))) (name . "plai-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:jay@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/plai?path=plai-doc") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "101ffc72e2d3ddeeb45a353b2b1db4ed6003e58a") (source . "git://github.com/racket/plai?path=plai-doc") (source_url . "http://github.com/racket/plai/tree/master?path=plai-doc"))))))) ("plai-dynamic" . #hasheq((author . "david@tethera.net") (authors . ("david@tethera.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/plai-dynamic.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plai-dynamic.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plai-dynamic.txt"))) (checksum . "3e0dd86ed95e2a57a279e8334a9cf803159351ed") (checksum-error . #f) (collection . "plai-dynamic") (conflicts . ()) (date-added . 1578845227) (dependencies . ("base")) (description . "Quick and dirty dynamically scoped plai-like language.\r\n\r\nImprovements welcome at\r\n\r\nhttps://gitlab.com/bremner/plai-dynamic\r\n") (implies . ()) (last-checked . 1632904306) (last-edit . 1578845623) (last-updated . 1595764102) (modules . ((lib "plai-dynamic/main.rkt") (lib "plai-dynamic/lang/reader.rkt"))) (name . "plai-dynamic") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:david@tethera.net . #t) (dynamic-scope . #t) (plai . #t) (ring:1 . #t))) (source . "https://pivot.cs.unb.ca/git/plai-dynamic.git") (tags . ("dynamic-scope" "plai")) (versions . #hash((default . #hasheq((checksum . "3e0dd86ed95e2a57a279e8334a9cf803159351ed") (source . "https://pivot.cs.unb.ca/git/plai-dynamic.git") (source_url . "https://pivot.cs.unb.ca/git/plai-dynamic.git"))))))) ("plai-lazy" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plai-lazy" "doc/plai-lazy@plai-lazy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plai-lazy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plai-lazy.txt"))) (checksum . "814aa836ba1b981b9916fbfa9ba7b2683b0350c4") (checksum-error . #f) (collection . "plai-lazy") (conflicts . ()) (dependencies . ("base" "gui-lib" "lazy" "plai" "sandbox-lib" "scheme-lib" "srfi-lite-lib" "racket-doc" "scribble-lib")) (description . "A lazy variant of the plai language") (implies . ()) (last-checked . 1632904306) (last-edit . 1438617273) (last-updated . 1502816261) (modules . ((lib "plai-lazy/private/random-mutator.rkt") (lib "plai-lazy/main.rkt") (lib "plai-lazy/scribblings/plai-lazy.scrbl") (lib "plai-lazy/private/sandbox.rkt") (lib "plai-lazy/private/gc-core.rkt") (lib "plai-lazy/private/command-line.rkt") (lib "plai-lazy/private/gc-transformer.rkt") (lib "plai-lazy/private/gc-gui.rkt") (lib "plai-lazy/private/test.rkt") (lib "plai-lazy/datatype.rkt") (lib "plai-lazy/test-harness.rkt") (lib "plai-lazy/lang/reader.rkt") (lib "plai-lazy/private/collector-exports.rkt"))) (name . "plai-lazy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (language . #t) (ring:1 . #t))) (source . "git://github.com/mflatt/plai-lazy") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "814aa836ba1b981b9916fbfa9ba7b2683b0350c4") (source . "git://github.com/mflatt/plai-lazy") (source_url . "http://github.com/mflatt/plai-lazy/tree/master"))))))) ("plai-lib" . #hash((author . "jay@racket-lang.org") (authors . ("jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "101ffc72e2d3ddeeb45a353b2b1db4ed6003e58a") (checksum-error . #f) (collection . "plai") (conflicts . ()) (dependencies . ("scheme-lib" "srfi-lite-lib" "base" "gui-lib" "draw-lib" "sandbox-lib" "web-server-lib" "at-exp-lib" "eli-tester" "pconvert-lib" "rackunit-lib" "drracket-tool-lib")) (description . "Implementation (no documentation) for teaching languages for _Programming Languages: Application and Interpretation_") (implies . ()) (last-checked . 1632904306) (last-edit . 1432141826) (last-updated . 1632540656) (modules . ((lib "plai/tests/gc2/good-mutators/circular.rkt") (lib "plai/tests/gc/good-mutators/mutator4.rkt") (lib "plai/tests/gc2/good-mutators/student20111116.rkt") (lib "plai/tests/gc/good-mutators/mutator6.rkt") (lib "plai/tests/gc/good-mutators/else.rkt") (lib "plai/tests/gc/good-mutators/repeat-test.rkt") (lib "plai/tests/gc2/good-mutators/case.rkt") (lib "plai/private/collector-exports.rkt") (lib "plai/tests/gc2/good-mutators/else.rkt") (lib "plai/tests/printer.rkt") (lib "plai/tests/gc2/good-mutators/test-moving.rkt") (lib "plai/tests/gc2/good-mutators/sfs.rkt") (lib "plai/tests/gc2/run-test.rkt") (lib "plai/tests/gc2/good-mutators/kathi-bug-1.rkt") (lib "plai/tests/gc2/with-heap.rkt") (lib "plai/tests/gc/other-mutators/top.rkt") (lib "plai/collector/lang/reader.rkt") (lib "plai/tests/gc2/good-collectors/good-collector.rkt") (lib "plai/tests/gc/good-mutators/proc-list.rkt") (lib "plai/datatype.rkt") (lib "plai/private/gc-gui.rkt") (lib "plai/gc2/private/gc-gui.rkt") (lib "plai/tests/gc2/good-mutators/imports.rkt") (lib "plai/tests/gc/good-mutators/imports.rkt") (lib "plai/gc2/mutator/lang/reader.rkt") (lib "plai/tests/gc/good-mutators/mutator7.rkt") (lib "plai/tests/gc/good-mutators/danny-bug.rkt") (lib "plai/tests/gc2/good-mutators/classic-error.rkt") (lib "plai/private/gc-transformer.rkt") (lib "plai/tests/gc2/bad-mutators/setbang.rkt") (lib "plai/gc2/private/gc-transformer.rkt") (lib "plai/tests/gc/good-mutators/empty-mutator.rkt") (lib "plai/tests/gc/good-mutators/case.rkt") (lib "plai/web/lang/reader.rkt") (lib "plai/tests/gc/bad-collectors/no-collection-collector.rkt") (lib "plai/tests/gc/good-mutators/kathi-bug-1.rkt") (lib "plai/tests/gc2/good-mutators/mv.rkt") (lib "plai/gc2/private/collector-exports.rkt") (lib "plai/tests/gc2/set-restriction-test.rkt") (lib "plai/tests/gc2/good-mutators/by-val.rkt") (lib "plai/tests/datatype-state.rkt") (lib "plai/tests/gc2/good-mutators/danny-bug.rkt") (lib "plai/gc2/collector/lang/reader.rkt") (lib "plai/tests/gc/bad-mutators/mutator2.rkt") (lib "plai/tests/gc2/good-mutators/empty-mutator.rkt") (lib "plai/tests/util.rkt") (lib "plai/tests/check-syntax.rkt") (lib "plai/tests/gc/bad-mutators/mutator0.rkt") (lib "plai/tests/gc2/good-mutators/closure-1.rkt") (lib "plai/tests/gc2/other-mutators/printing.rkt") (lib "plai/tests/gc/good-mutators/andor.rkt") (lib "plai/tests/gc/good-mutators/classic-error.rkt") (lib "plai/tests/gc/run-test.rkt") (lib "plai/tests/gc2/other-mutators/quote.rkt") (lib "plai/tests/gc/other-mutators/error.rkt") (lib "plai/tests/datatype-exports.rkt") (lib "plai/private/test.rkt") (lib "plai/tests/gc/good-mutators/student-1.rkt") (lib "plai/tests/gc/bad-mutators/mutator5.rkt") (lib "plai/tests/gc2/good-mutators/thunks.rkt") (lib "plai/tests/gc/good-mutators/bindings.rkt") (lib "plai/tests/shared.rkt") (lib "plai/tests/gc2/other-mutators/top.rkt") (lib "plai/tests/gc2/good-collectors/trivial-moving-collector.rkt") (lib "plai/tests/datatype.rkt") (lib "plai/tests/gc2/bad-mutators/mutator2.rkt") (lib "plai/tests/gc/good-mutators/modpath.rkt") (lib "plai/tests/gc2/other-mutators/morse.rkt") (lib "plai/tests/gc2/other-mutators/error.rkt") (lib "plai/tests/gc/good-mutators/app.rkt") (lib "plai/private/gc-core.rkt") (lib "plai/lang/reader.rkt") (lib "plai/random-mutator.rkt") (lib "plai/tests/gc/good-mutators/thunks.rkt") (lib "plai/tests/gc/good-mutators/global-roots.rkt") (lib "plai/main.rkt") (lib "plai/tests/gc2/good-mutators/yixi.rkt") (lib "plai/tests/gc2/good-mutators/mutator4.rkt") (lib "plai/web.rkt") (lib "plai/tests/gc/good-collectors/good-collector.rkt") (lib "plai/tests/gc/good-mutators/circular.rkt") (lib "plai/tests/gc2/good-mutators/proc-list.rkt") (lib "plai/private/sandbox.rkt") (lib "plai/tests/gc2/good-mutators/modpath.rkt") (lib "plai/tests/gc2/good-mutators/tail-calls.rkt") (lib "plai/tests/gc2/good-mutators/repeat-test.rkt") (lib "plai/tests/gc2/good-mutators/names.rkt") (lib "plai/tests/gc2/good-mutators/nested-lam.rkt") (lib "plai/gc2/private/gc-core.rkt") (lib "plai/tests/gc2/bad-mutators/mutator0.rkt") (lib "plai/tests/gc2/bad-mutators/void-app.rkt") (lib "plai/gc2/mutator.rkt") (lib "plai/tests/gc2/good-mutators/bindings.rkt") (lib "plai/tests/gc/good-mutators/cond.rkt") (lib "plai/private/command-line.rkt") (lib "plai/tests/gc2/good-mutators/global-roots.rkt") (lib "plai/tests/gc2/other-mutators/begin.rkt") (lib "plai/tests/gc/other-mutators/quote.rkt") (lib "plai/tests/gc/good-mutators/tail-calls.rkt") (lib "plai/tests/gc2/good-mutators/closure-2.rkt") (lib "plai/tests/gc2/good-collectors/trivial-collector.rkt") (lib "plai/tests/gc/bad-mutators/void-app.rkt") (lib "plai/tests/gc2/good-mutators/mutator6.rkt") (lib "plai/mutator.rkt") (lib "plai/tests/pr/3.rkt") (lib "plai/tests/gc/good-mutators/me-let.rkt") (lib "plai/tests/gc2/good-mutators/cond.rkt") (lib "plai/tests/test-harness.rkt") (lib "plai/gc2/collector.rkt") (lib "plai/tests/gc2/good-mutators/gc-order.rkt") (lib "plai/tests/gc2/bad-mutators/mutator3.rkt") (lib "plai/tests/gc/other-mutators/printing.rkt") (lib "plai/tests/gc2/good-mutators/andor.rkt") (lib "plai/tests/gc2/roots-test.rkt") (lib "plai/tests/gc2/good-mutators/app.rkt") (lib "plai/tests/gc/good-mutators/student20111116.rkt") (lib "plai/tests/gc/good-mutators/sfs.rkt") (lib "plai/tests/gc2/bad-collectors/no-collection-collector.rkt") (lib "plai/tests/gc/bad-mutators/mut-1.rkt") (lib "plai/tests/gc/good-mutators/closure-2.rkt") (lib "plai/tests/datatype-coverage.rkt") (lib "plai/tests/gc2/bad-mutators/mutator1.rkt") (lib "plai/test-harness.rkt") (lib "plai/collector.rkt") (lib "plai/tests/gc/good-mutators/closure-1.rkt") (lib "plai/tests/gc/bad-mutators/mutator1.rkt") (lib "plai/tests/web.rkt") (lib "plai/private/random-mutator.rkt") (lib "plai/tests/gc/good-mutators/by-val.rkt") (lib "plai/tests/gc/good-collectors/trivial-collector.rkt") (lib "plai/tests/gc/good-mutators/names.rkt") (lib "plai/tests/gc/good-mutators/gc-order.rkt") (lib "plai/tests/test-random-mutator.rkt") (lib "plai/tests/gc2/good-mutators/student-1.rkt") (lib "plai/mutator/lang/reader.rkt") (lib "plai/tests/gc/good-mutators/setbang.rkt") (lib "plai/tests/gc/good-mutators/test-framework.rkt") (lib "plai/tests/gc2/bad-mutators/mutator5.rkt") (lib "plai/tests/gc2/bad-mutators/mut-1.rkt") (lib "plai/tests/gc2/good-mutators/mutator7.rkt") (lib "plai/tests/gc/other-mutators/begin.rkt") (lib "plai/tests/gc/bad-mutators/mutator3.rkt") (lib "plai/tests/gc2/good-mutators/test-framework.rkt"))) (name . "plai-lib") (ring . 0) (search-terms . #hasheq((author:jay@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/plai?path=plai-lib") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "101ffc72e2d3ddeeb45a353b2b1db4ed6003e58a") (source . "git://github.com/racket/plai?path=plai-lib") (source_url . "http://github.com/racket/plai/tree/master?path=plai-lib"))))))) ("plai-math" . #hasheq((author . "jsolum@westmont.edu") (authors . ("jsolum@westmont.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/plai-math.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "a1f9cd5332c9701ded9b0c2e2888842ca1e674ca") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Provides helpful math functions to plai-typed") (implies . ()) (last-checked . 1632904307) (last-edit . 1504636331) (last-updated . 1518053129) (modules . ((lib "plai-math/math.rkt"))) (name . "plai-math") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (Math . #t) (author:jsolum@westmont.edu . #t) (plai-typed . #t) (ring:1 . #t))) (source . "git://github.com/JamesSolum/racket_packages?path=math") (tags . ("Math" "plai-typed")) (versions . #hash((default . #hasheq((checksum . "a1f9cd5332c9701ded9b0c2e2888842ca1e674ca") (source . "git://github.com/JamesSolum/racket_packages?path=math") (source_url . "http://github.com/JamesSolum/racket_packages/tree/master?path=math"))))))) ("plai-typed" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plai-typed" "doc/plai-typed@plai-typed/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plai-typed.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plai-typed.txt"))) (checksum . "e11e7e4cd655b958296055f490ea8eadf5ea5ce7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "plai" "racket-doc" "rackunit-lib" ("scribble-lib" #:version "1.16"))) (description . "The `plai-typed' language for use with Programming Languages: Application and Interpretation, Second Edition\r\n") (implies . ()) (last-checked . 1632904307) (last-edit . 1404888844) (last-updated . 1565931216) (modules . ((lib "plai-typed/tests/untyped.rkt") (lib "plai-typed/private/collapse.rkt") (lib "plai-typed/tests/ta-scope.rkt") (lib "plai-typed/tests/basic.rkt") (lib "plai-typed/tests/use-typed-basic.rkt") (lib "plai-typed/main.rkt") (lib "plai-typed/tests/repl.rkt") (lib "plai-typed/untyped.rkt") (lib "plai-typed/untyped.scrbl") (lib "plai-typed/tests/submod3.rkt") (lib "plai-typed/plai-typed.scrbl") (lib "plai-typed/tests/rename.rkt") (lib "plai-typed/tests/synerror.rkt") (lib "plai-typed/tests/use-basic.rkt") (lib "plai-typed/tests/use-untyped.rkt") (lib "plai-typed/tests/untyped-use-untyped.rkt") (lib "plai-typed/private/fixup-quote.rkt") (lib "plai-typed/tests/parse.rkt") (lib "plai-typed/tests/hygiene.rkt") (lib "plai-typed/tests/values.rkt") (lib "plai-typed/private/types.rkt") (lib "plai-typed/tests/submod.rkt") (lib "plai-typed/tests/submod2.rkt") (lib "plai-typed/private/s-exp.rkt"))) (name . "plai-typed") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (language . #t) (ring:1 . #t) (textbook . #t))) (source . "github://github.com/mflatt/plai-typed/no-deps") (tags . ("language" "textbook")) (versions . #hash((default . #hasheq((checksum . "419102db1e44b74dea9daf7a75e9b0e2b9c97d05") (source . "github://github.com/mflatt/plai-typed/master") (source_url . "http://github.com/mflatt/plai-typed/tree/master"))) ("5.3.6" . #hasheq((checksum . "e11e7e4cd655b958296055f490ea8eadf5ea5ce7") (source . "github://github.com/mflatt/plai-typed/no-deps") (source_url . "http://github.com/mflatt/plai-typed/tree/no-deps"))) ("5.3.5" . #hasheq((checksum . "e11e7e4cd655b958296055f490ea8eadf5ea5ce7") (source . "github://github.com/mflatt/plai-typed/no-deps") (source_url . "http://github.com/mflatt/plai-typed/tree/no-deps"))))))) ("plai-typed-s-exp-match" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plai-typed-s-exp-match" "doc/plai-typed-s-exp-match@plai-typed-s-exp-match/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plai-typed-s-exp-match.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plai-typed-s-exp-match.txt"))) (checksum . "e010d9718916394b1b3545cb2f7a49c27904e873") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "plai-typed" "racket-doc" "scribble-lib")) (description . "Simple S-expression matcher for use with plai-typed") (implies . ()) (last-checked . 1632904308) (last-edit . 1378382808) (last-updated . 1502816263) (modules . ((lib "plai-typed/scribblings/plai-typed-s-exp-match.scrbl") (lib "plai-typed/s-exp-match.rkt"))) (name . "plai-typed-s-exp-match") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@cs.utah.edu . #t) (ring:1 . #t))) (source . "github://github.com/mflatt/plai-typed-s-exp-match/no-deps") (tags . ()) (versions . #hash((default . #hasheq((checksum . "ff05b257cc8739d2f4ad8f33b65440635ab9cce0") (source . "github://github.com/mflatt/plai-typed-s-exp-match/master") (source_url . "http://github.com/mflatt/plai-typed-s-exp-match/tree/master"))) ("5.3.6" . #hasheq((checksum . "e010d9718916394b1b3545cb2f7a49c27904e873") (source . "github://github.com/mflatt/plai-typed-s-exp-match/no-deps") (source_url . "http://github.com/mflatt/plai-typed-s-exp-match/tree/no-deps"))) ("5.3.5" . #hasheq((checksum . "e010d9718916394b1b3545cb2f7a49c27904e873") (source . "github://github.com/mflatt/plai-typed-s-exp-match/no-deps") (source_url . "http://github.com/mflatt/plai-typed-s-exp-match/tree/no-deps"))))))) ("plait" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plait" "doc/plait@plait/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plait.txt") (test-failure-log . "server/built/test-fail/plait.txt") (test-success-log . #f))) (checksum . "98811b30889d9be6b15326d932187dd99037a139") (checksum-error . #f) (collection . "plait") (conflicts . ()) (dependencies . ("base" "lazy" "plai" "racket-doc" "rackunit-lib" ("scribble-lib" #:version "1.16"))) (description . "The Plait language is a hybrid of Racket (concrete syntax) and ML (type system) that is intended for use in an interpreters-based programming-languages course. It's an improved variant of `plai-typed`.") (implies . ()) (last-checked . 1632904309) (last-edit . 1533068156) (last-updated . 1628886734) (modules . ((lib "plait/private/lazy-datatype.rkt") (lib "plait/tests/untyped.rkt") (lib "plait/scribblings/demo.rkt") (lib "plait/tests/hygiene.rkt") (lib "plait/tests/parse.rkt") (lib "plait/tests/lazy.rkt") (lib "plait/private/collapse.rkt") (lib "plait/private/contract-support.rkt") (lib "plait/tests/s-exp-match.rkt") (lib "plait/private/force.rkt") (lib "plait/tests/lazy-values.rkt") (lib "plait/tests/rename.rkt") (lib "plait/private/s-exp.rkt") (lib "plait/scribblings/plait.scrbl") (lib "plait/tests/use-basic.rkt") (lib "plait/main.rkt") (lib "plait/private/fixup-quote.rkt") (lib "plait/private/types.rkt") (lib "plait/tests/submod.rkt") (lib "plait/tests/use-typed-basic.rkt") (lib "plait/private/tuple.rkt") (lib "plait/tests/submod3.rkt") (lib "plait/tests/values.rkt") (lib "plait/scribblings/tutorial.scrbl") (lib "plait/tests/use-untyped.rkt") (lib "plait/tests/ta-scope.rkt") (lib "plait/tests/untyped-use-untyped.rkt") (lib "plait/tests/repl.rkt") (lib "plait/tests/submod2.rkt") (lib "plait/tests/synerror.rkt") (lib "plait/tests/untyped-use-typed.rkt") (lib "plait/tests/basic.rkt") (lib "plait/private/s-exp-match.rkt") (lib "plait/tests/force.rkt"))) (name . "plait") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (language . #t) (ring:1 . #t) (textbook . #t))) (source . "https://github.com/mflatt/plait.git") (tags . ("language" "textbook")) (versions . #hash((default . #hasheq((checksum . "98811b30889d9be6b15326d932187dd99037a139") (source . "https://github.com/mflatt/plait.git") (source_url . "https://github.com/mflatt/plait.git"))))))) ("plaitypus" . #hasheq((author . "stamourv@racket-lang.org") (authors . ("stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plaitypus" "doc/plaitypus@plaitypus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plaitypus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plaitypus.txt"))) (checksum . "cebf78ef1dafd5dc93485c41cf7f6eaab3e60efb") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1566411028) (dependencies . ("base" "plai" "racket-doc" "rackunit-lib" ("scribble-lib" #:version "1.16"))) (description . "Typed variant of #lang plai. Forked from plai-typed, brought closer to #lang plai.") (implies . ()) (last-checked . 1632904309) (last-edit . 1566411028) (last-updated . 1576616992) (modules . ((lib "plaitypus/tests/use-typed-basic.rkt") (lib "plaitypus/untyped.scrbl") (lib "plaitypus/tests/submod2.rkt") (lib "plaitypus/private/collapse.rkt") (lib "plaitypus/tests/hygiene.rkt") (lib "plaitypus/tests/ta-scope.rkt") (lib "plaitypus/tests/submod.rkt") (lib "plaitypus/tests/use-untyped.rkt") (lib "plaitypus/private/fixup-quote.rkt") (lib "plaitypus/tests/implicit-begin.rkt") (lib "plaitypus/tests/submod3.rkt") (lib "plaitypus/plaitypus.scrbl") (lib "plaitypus/private/types.rkt") (lib "plaitypus/tests/synerror.rkt") (lib "plaitypus/tests/repl.rkt") (lib "plaitypus/tests/rename.rkt") (lib "plaitypus/private/s-exp.rkt") (lib "plaitypus/tests/lec18.rkt") (lib "plaitypus/tests/basic.rkt") (lib "plaitypus/untyped.rkt") (lib "plaitypus/main.rkt") (lib "plaitypus/tests/untyped.rkt") (lib "plaitypus/tests/parse.rkt") (lib "plaitypus/tests/use-basic.rkt") (lib "plaitypus/tests/values.rkt") (lib "plaitypus/tests/untyped-use-untyped.rkt"))) (name . "plaitypus") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stamourv@racket-lang.org . #t) (language . #t) (ring:1 . #t) (textbook . #t) (typed . #t))) (source . "https://github.com/stamourv/plaitypus.git") (tags . ("language" "textbook" "typed")) (versions . #hash((default . #hasheq((checksum . "cebf78ef1dafd5dc93485c41cf7f6eaab3e60efb") (source . "https://github.com/stamourv/plaitypus.git") (source_url . "https://github.com/stamourv/plaitypus.git"))))))) ("planet" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("planet-lib" "planet-doc")) (description . "Legacy support for automatic package distribution") (implies . ("planet-lib" "planet-doc")) (last-checked . 1632904309) (last-edit . 1417659583) (last-updated . 1602596778) (modules . ()) (name . "planet") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "ce6efee9365155001a43b1e7c6217233becb4a5a") (source . "git://github.com/racket/planet/?path=planet") (source_url . "git://github.com/racket/planet/?path=planet"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("planet-doc" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "planet" "doc/planet@planet-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("planet-lib" "scribble-lib" "base" "racket-doc" "scribble-doc")) (description . "documentation part of planet") (implies . ()) (last-checked . 1632904309) (last-edit . 1417659583) (last-updated . 1602596779) (modules . ((lib "planet/planet.scrbl") (lib "planet/private/util.scrbl") (lib "planet/scribble.rkt"))) (name . "planet-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "ce6efee9365155001a43b1e7c6217233becb4a5a") (source . "git://github.com/racket/planet/?path=planet-doc") (source_url . "git://github.com/racket/planet/?path=planet-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("planet-lib" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("srfi-lite-lib" ("base" #:version "6.2.900.6"))) (description . "implementation (no documentation) part of planet") (implies . ()) (last-checked . 1632904310) (last-edit . 1417659583) (last-updated . 1602596780) (modules . ((lib "planet/util.rkt") (lib "planet/planet.rkt") (lib "planet/raco.rkt") (lib "planet/private/version.rkt") (lib "planet/private/cmdline-tool.rkt") (lib "planet/syntax.rkt") (lib "planet/version.rkt") (lib "planet/lang/reader.rkt"))) (name . "planet-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "ce6efee9365155001a43b1e7c6217233becb4a5a") (source . "git://github.com/racket/planet/?path=planet-lib") (source_url . "git://github.com/racket/planet/?path=planet-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("planet-test" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-index" "eli-tester" "planet-lib" "rackunit-lib" "scheme-lib")) (description . "tests for planet-lib") (implies . ()) (last-checked . 1632904310) (last-edit . 1417659583) (last-updated . 1602596780) (modules . ((lib "tests/planet/cmdline-tool.rkt") (lib "tests/planet/examples/scribblings-package/reader-four.rkt") (lib "tests/planet/examples/scribblings-package/main.rkt") (lib "tests/planet/examples/dummy-package/lang/reader.rkt") (lib "tests/planet/examples/scribblings-package/lib.rkt") (lib "tests/planet/info-domain.rkt") (lib "tests/planet/test-docs-complete.rkt") (lib "tests/planet/examples/dummy-package/me.rkt") (lib "tests/planet/examples/scribblings-package/reader-one.rkt") (lib "tests/planet/examples/scribblings-package/require-mod.rkt") (lib "tests/planet/examples/scribblings-package/lang-two.rkt") (lib "tests/planet/thread-safe-resolver.rkt") (lib "tests/planet/examples/scribblings-package/lang-three.rkt") (lib "tests/planet/examples/dummy-package/main.rkt") (lib "tests/planet/examples/scribblings-package/require-two.rkt") (lib "tests/planet/version.rkt") (lib "tests/planet/examples/scribblings-package/reader-three.rkt") (lib "tests/planet/examples/scribblings-package/require-one.rkt") (lib "tests/planet/examples/scribblings-package/require-four.rkt") (lib "tests/planet/examples/scribblings-package/reader-mod.rkt") (lib "tests/planet/lang.rkt") (lib "tests/planet/examples/scribblings-package/doc.scrbl") (lib "tests/planet/examples/scribblings-package/lang-mod.rkt") (lib "tests/planet/examples/dummy-module.rkt") (lib "tests/planet/docs-build.rkt") (lib "tests/planet/run-all.rkt") (lib "tests/planet/examples/scribblings-package/require-three.rkt") (lib "tests/planet/examples/scribblings-package/lang-one.rkt") (lib "tests/planet/examples/scribblings-package/lang-four.rkt") (lib "tests/planet/submod.rkt") (lib "tests/planet/examples/scribblings-package/reader-two.rkt"))) (name . "planet-test") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "ce6efee9365155001a43b1e7c6217233becb4a5a") (source . "git://github.com/racket/planet/?path=planet-test") (source_url . "git://github.com/racket/planet/?path=planet-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("planet2-example" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/planet2-example.txt") (test-failure-log . "server/built/test-fail/planet2-example.txt") (test-success-log . #f))) (checksum . "9d9e4dc77adfc7299987a4cbbe8ce43869eec53e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "An example package for testing purposes") (implies . ()) (last-checked . 1632904310) (last-edit . 1504535384) (last-updated . 1502816265) (modules . ((lib "data/frob-nob.rkt"))) (name . "planet2-example") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (examples . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/planet2-example") (tags . ("examples")) (versions . #hash((default . #hasheq((checksum . "9d9e4dc77adfc7299987a4cbbe8ce43869eec53e") (source . "git://github.com/jeapostrophe/planet2-example") (source_url . "http://github.com/jeapostrophe/planet2-example/tree/master"))))))) ("planning" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "planning" "doc/planning@planning/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/planning.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/planning.txt"))) (checksum . "b880f85effd4520e14b815d1dbe0ff7e71f4aaf8") (checksum-error . #f) (collection . "planning") (conflicts . ()) (date-added . 1589271068) (dependencies . ("snip-lib" "draw-lib" "gui-lib" "pict-lib" "slideshow-lib" "chess" "fancy-app" "point-free" "rebellion" "base" "pict-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A library for automated planning.") (implies . ()) (last-checked . 1632904310) (last-edit . 1589271084) (last-updated . 1591313471) (modules . ((lib "planning/examples/chess.rkt") (lib "planning/multiset/condition.rkt") (lib "planning/main.scrbl") (lib "planning/examples/sokoban.rkt") (lib "planning/overview.scrbl") (lib "planning/multiset/test.rkt") (lib "planning/examples/flip.rkt") (lib "planning/multiset/action.rkt") (lib "planning/set.scrbl") (lib "planning/examples/phase-transition.scrbl") (lib "planning/examples/room-world.rkt") (lib "planning/set/plan.rkt") (lib "planning/set/condition.rkt") (lib "planning/multiset/problem.rkt") (lib "planning/hash.scrbl") (lib "planning/hash/visualize.rkt") (lib "planning/hash/action.rkt") (lib "planning/private/animation.rkt") (lib "planning/examples/factorio.rkt") (lib "planning/examples/phase-transition.rkt") (lib "planning/hash/problem.rkt") (lib "planning/private.rkt") (lib "planning/hash/condition.rkt") (lib "planning/examples/sokoban.scrbl") (lib "planning/multiset.scrbl") (lib "planning/set/action.rkt") (lib "planning/main.rkt"))) (name . "planning") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (artificial-intelligence . #t) (author:jackhfirth@gmail.com . #t) (data-structures . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/planning.git") (tags . ("artificial-intelligence" "data-structures")) (versions . #hash((default . #hasheq((checksum . "b880f85effd4520e14b815d1dbe0ff7e71f4aaf8") (source . "https://github.com/jackfirth/planning.git") (source_url . "https://github.com/jackfirth/planning.git"))))))) ("play" . #hasheq((author . "ifigueroap@gmail.com etanter@dcc.uchile.cl") (authors . ("ifigueroap@gmail.com" "etanter@dcc.uchile.cl")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/play.txt") (test-failure-log . "server/built/test-fail/play.txt") (test-success-log . #f))) (checksum . "34a145ffb815110bec33a48004e8897e48d11f51") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1560876873) (dependencies . ("base" "plai" "redex" "rackunit" "parser-tools-lib" "scribble-lib" "racket-doc")) (description . "Variations on #lang plai, the language that accompanies Krishnamurthi's PLAI book.") (implies . ()) (last-checked . 1632904310) (last-edit . 1560877092) (last-updated . 1560876873) (modules . ((lib "play/lang/reader.rkt") (lib "scribblings/main.scrbl") (lib "play/parsers.rkt") (lib "play/defmac.rkt") (lib "play/main.rkt") (lib "scribblings/intl.rkt") (lib "play/redex.rkt") (lib "scribblings/play.scrbl"))) (name . "play") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:etanter@dcc.uchile.cl . #t) (author:ifigueroap@gmail.com . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/pleiad/play.git") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "34a145ffb815110bec33a48004e8897e48d11f51") (source . "https://github.com/pleiad/play.git") (source_url . "https://github.com/pleiad/play.git"))) ("1.0" . #hasheq((checksum . "3c2c1af69087e9190a711df1577cf0e842fecac2") (source . "https://github.com/pleiad/play.git#3c2c1af69087e9190a711df1577cf0e842fecac2") (source_url . "https://github.com/pleiad/play.git#3c2c1af69087e9190a711df1577cf0e842fecac2"))) ("1.1" . #hasheq((checksum . "34a145ffb815110bec33a48004e8897e48d11f51") (source . "https://github.com/pleiad/play.git#34a145ffb815110bec33a48004e8897e48d11f51") (source_url . "https://github.com/pleiad/play.git#34a145ffb815110bec33a48004e8897e48d11f51"))))))) ("plisqin" . #hasheq((author . "default.kramer@gmail.com") (authors . ("default.kramer@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plisqin" "doc/plisqin@plisqin/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plisqin.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plisqin.txt"))) (checksum . "26421c7c42656c873c4e0a4fc7f48c0a3ed7770f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1552667990) (dependencies . ("base" "db-lib" "morsel-lib" "at-exp-lib" "db-doc" "doc-coverage" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "An SQL generator") (implies . ()) (last-checked . 1632904311) (last-edit . 1553359207) (last-updated . 1596998643) (modules . ((lib "plisqin-lib/private2/sql/frags-tests.rkt") (lib "plisqin-lib/strict/operators.rkt") (lib "plisqin-lib/dialect.rkt") (lib "plisqin-lib/private2/sql/interval.rkt") (lib "plisqin-doc/scribblings/adventure-works-checkpoints/6.rkt") (lib "plisqin-doc/scribblings/research-language.scrbl") (lib "plisqin-doc/scribblings/to-table.rkt") (lib "plisqin-lib/private2/rows-result-to-string.rkt") (lib "plisqin-doc/scribblings/adventure-works-checkpoints/final.rkt") (lib "plisqin-doc/scribblings/intro-define-schema.scrbl") (lib "plisqin-doc/scribblings/helpers.rkt") (lib "plisqin-doc/scribblings/null-notes.scrbl") (lib "plisqin/main.rkt") (lib "plisqin-doc/scribblings/adventure-works-checkpoints/2.rkt") (lib "plisqin-doc/scribblings/nullability.scrbl") (lib "plisqin-lib/private2/statement/compile-statements.rkt") (lib "plisqin-examples/adventure-works/statements.rkt") (lib "plisqin-lib/private2/sql/special-clauses.rkt") (lib "plisqin-lib/private2/define-schema.rkt") (lib "plisqin-doc/scribblings/read-first.scrbl") (lib "plisqin-lib/private2/token.rkt") (lib "plisqin-doc/scribblings/tokens-strict.scrbl") (lib "plisqin-doc/doc-coverage.rkt") (lib "plisqin-lib/private2/_dialect.rkt") (lib "plisqin-lib/private2/show-table.rkt") (lib "plisqin-lib/private2/statement/define-statement.rkt") (lib "plisqin-doc/scribblings/for-developers.scrbl") (lib "plisqin-lib/private2/_statement.rkt") (lib "plisqin-doc/scribblings/adventure-works-checkpoints/4.rkt") (lib "plisqin-doc/scribblings/racket.rkt") (lib "plisqin-lib/private2/from.rkt") (lib "plisqin-lib/main.rkt") (lib "plisqin-doc/scribblings/reference.scrbl") (lib "plisqin-lib/private2/sql/frag-bodies.rkt") (lib "plisqin-lib/private2/sql/frag-types.rkt") (lib "plisqin-lib/types.rkt") (lib "plisqin-doc/scribblings/refactoring-recipes.scrbl") (lib "plisqin-doc/scribblings/adventure-works-checkpoints/1.rkt") (lib "plisqin-doc/scribblings/tokens-custom-strict.rkt") (lib "plisqin-doc/scribblings/standard-label.rkt") (lib "plisqin-lib/private2/sql/frag-nullchecks.rkt") (lib "plisqin-lib/private2/types/types.rkt") (lib "plisqin-doc/scribblings/plisqin.scrbl") (lib "plisqin-lib/private2/sql/fragment.rkt") (lib "plisqin-lib/private2/sql/weave.rkt") (lib "plisqin-lib/private2/sql.rkt") (lib "plisqin-lib/private2/sql/check-sql.rkt") (lib "plisqin-doc/scribblings/aw-reference.scrbl") (lib "plisqin-doc/scribblings/tokens-custom-unsafe.rkt") (lib "plisqin-doc/scribblings/racket-require-test.rkt") (lib "plisqin-doc/scribblings/adventure-works-checkpoints/3.rkt") (lib "plisqin-doc/scribblings/aggregates.scrbl") (lib "plisqin-lib/private2/types/lib/guard.rkt") (lib "plisqin-doc/scribblings/plisqin-lib.scrbl") (lib "plisqin-lib/strict.rkt") (lib "plisqin-examples/adventure-works.rkt") (lib "plisqin-lib/private2/statement/param.rkt") (lib "plisqin-lib/private2/sql/frags.rkt") (lib "plisqin-lib/unsafe.rkt") (lib "plisqin-lib/private2/sql/truth.rkt") (lib "plisqin-lib/private2/_null.rkt") (lib "plisqin-lib/private2/_core.rkt") (lib "plisqin-doc/scribblings/tokens-helpers.rkt") (lib "plisqin-doc/scribblings/adventure-works-checkpoints/5.rkt") (lib "plisqin-doc/scribblings/tokens-skeleton.rkt") (lib "plisqin-lib/unsafe/operators.rkt") (lib "plisqin-lib/private2/_types.rkt") (lib "plisqin-examples/adventure-works/schema.rkt") (lib "plisqin-lib/private2/types/lib/core.rkt") (lib "plisqin-lib/private2/sql/frags.helpers.rkt") (lib "plisqin-examples/adventure-works/main.rkt") (lib "plisqin-doc/scribblings/design-notes.scrbl"))) (name . "plisqin") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:default.kramer@gmail.com . #t) (db . #t) (ring:1 . #t) (sql . #t) (tabular . #t))) (source . "https://github.com/default-kramer/plisqin.git") (tags . ("db" "sql" "tabular")) (versions . #hash((default . #hasheq((checksum . "26421c7c42656c873c4e0a4fc7f48c0a3ed7770f") (source . "https://github.com/default-kramer/plisqin.git") (source_url . "https://github.com/default-kramer/plisqin.git"))))))) ("plot" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("plot-lib" "plot-gui-lib" "plot-doc")) (description . "Functions (and docs and tests) for plotting") (implies . ("plot-lib" "plot-gui-lib" "plot-doc")) (last-checked . 1632904311) (last-edit . 1417659583) (last-updated . 1623069099) (modules . ()) (name . "plot") (ring . 0) (search-terms . #hasheq((author:ntoronto@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "6743d6b82337296bbee484c1570bf9948e030ce6") (source . "git://github.com/racket/plot/?path=plot") (source_url . "git://github.com/racket/plot/?path=plot"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("plot-bestfit" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bestfit" "doc/bestfit@plot-bestfit/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plot-bestfit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plot-bestfit.txt"))) (checksum . "dd6ffbef2626d7cc7e6802389ce53d57d36bb21d") (checksum-error . #f) (collection . "bestfit") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "plot-lib" "plot-gui-lib" "math-lib" "racket-doc" "typed-racket-doc" "scribble-lib" "math-doc" "plot-doc")) (description . "") (implies . ()) (last-checked . 1632904312) (last-edit . 1441048148) (last-updated . 1508113918) (modules . ((lib "bestfit/main.rkt") (lib "bestfit/scribblings/base.rkt") (lib "bestfit/scribblings/bestfit.scrbl"))) (name . "plot-bestfit") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:spencer@florence.io . #t) (ring:1 . #t))) (source . "git://github.com/florence/plot-bestfit") (tags . ()) (versions . #hash((default . #hasheq((checksum . "dd6ffbef2626d7cc7e6802389ce53d57d36bb21d") (source . "git://github.com/florence/plot-bestfit") (source_url . "http://github.com/florence/plot-bestfit/tree/master"))))))) ("plot-compat" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "plot-gui-lib" "draw-lib" "plot-lib" "snip-lib")) (description . "Compatibility library for Plot 5.1.3 and earlier") (implies . ()) (last-checked . 1632904312) (last-edit . 1417659583) (last-updated . 1623069120) (modules . ((lib "plot/compat.rkt") (lib "plot/private/compat.rkt"))) (name . "plot-compat") (ring . 0) (search-terms . #hasheq((author:ntoronto@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "6743d6b82337296bbee484c1570bf9948e030ce6") (source . "git://github.com/racket/plot/?path=plot-compat") (source_url . "git://github.com/racket/plot/?path=plot-compat"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("plot-container" . #hasheq((author . "alexharsanyi@gmail.com") (authors . ("alexharsanyi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plot-container" "doc/plot-container@plot-container/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plot-container.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plot-container.txt"))) (checksum . "affdbaeec086a0b639a952368fa85c3b90d05c2d") (checksum-error . #f) (collection . "plot-container") (conflicts . ()) (date-added . 1554899153) (dependencies . ("base" "draw-lib" "gui-lib" "pict-lib" "plot-lib" "pict-snip-lib" "plot-gui-lib" "snip-lib" "gui-doc" "pict-snip-doc" "plot-doc" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Embed plot snips in Racket GUI applications") (implies . ()) (last-checked . 1632904312) (last-edit . 1554899153) (last-updated . 1624156503) (modules . ((lib "plot-container/private/plot-container.rkt") (lib "plot-container/scribblings/plot-container.scrbl") (lib "plot-container/private/hover-util.rkt") (lib "plot-container/hover-util.rkt") (lib "plot-container/main.rkt"))) (name . "plot-container") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexharsanyi@gmail.com . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/alex-hhh/plot-container.git") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "affdbaeec086a0b639a952368fa85c3b90d05c2d") (source . "https://github.com/alex-hhh/plot-container.git") (source_url . "https://github.com/alex-hhh/plot-container.git"))))))) ("plot-doc" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plot" "doc/plot@plot-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "plot-lib" "plot-gui-lib" "db-doc" "db-lib" "draw-doc" "draw-lib" "gui-doc" "gui-lib" "pict-doc" "pict-lib" "plot-compat" "racket-doc" "scribble-lib" "slideshow-doc" "slideshow-lib" "srfi-doc")) (description . "Documentation for plot") (implies . ()) (last-checked . 1632904312) (last-edit . 1417659583) (last-updated . 1623069141) (modules . ((lib "plot/scribblings/plotting.scrbl") (lib "plot/scribblings/contracts.scrbl") (lib "plot/scribblings/renderer3d.scrbl") (lib "plot/scribblings/typed-compat.scrbl") (lib "plot/scribblings/utils.scrbl") (lib "plot/scribblings/intro.scrbl") (lib "plot/scribblings/renderer2d.scrbl") (lib "plot/scribblings/nonrenderer.scrbl") (lib "plot/scribblings/plot.scrbl") (lib "plot/scribblings/ticks.scrbl") (lib "plot/scribblings/porting.scrbl") (lib "plot/scribblings/common.rkt") (lib "plot/scribblings/compat.scrbl") (lib "plot/scribblings/params.scrbl"))) (name . "plot-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:ntoronto@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "6743d6b82337296bbee484c1570bf9948e030ce6") (source . "git://github.com/racket/plot/?path=plot-doc") (source_url . "git://github.com/racket/plot/?path=plot-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("plot-gui-lib" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "plot-lib" "math-lib" ("gui-lib" #:version "1.18") "snip-lib" "typed-racket-lib" "typed-racket-more")) (description . "Plot GUI interface") (implies . ()) (last-checked . 1632904313) (last-edit . 1417659583) (last-updated . 1623069162) (modules . ((lib "plot/private/gui/plot2d.rkt") (lib "plot/main.rkt") (lib "plot/private/gui/gui.rkt") (lib "plot/typed.rkt") (lib "plot/private/gui/worker-thread.rkt") (lib "plot/private/gui/snip.rkt") (lib "plot/private/gui/snip3d.rkt") (lib "plot/private/gui/plot3d.rkt") (lib "plot/private/gui/lazy-snip-types.rkt") (lib "plot/private/gui/snip2d.rkt") (lib "plot/private/gui/lazy-snip-typed.rkt") (lib "plot/snip.rkt") (lib "plot/private/gui/lazy-snip-untyped.rkt"))) (name . "plot-gui-lib") (ring . 0) (search-terms . #hasheq((author:ntoronto@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "6743d6b82337296bbee484c1570bf9948e030ce6") (source . "git://github.com/racket/plot/?path=plot-gui-lib") (source_url . "git://github.com/racket/plot/?path=plot-gui-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("plot-lib" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "pict-lib" "db-lib" "srfi-lite-lib" "typed-racket-lib" "typed-racket-more" "compatibility-lib" "math-lib")) (description . "Plot non-GUI interface") (implies . ()) (last-checked . 1632904313) (last-edit . 1417659583) (last-updated . 1623069183) (modules . ((lib "plot/private/common/color-map.rkt") (lib "plot/private/plot3d/rectangle.rkt") (lib "plot/private/common/sample.rkt") (lib "plot/private/common/parameter-groups.rkt") (lib "plot/private/deprecated/math.rkt") (lib "plot/private/no-gui/plot3d-untyped.rkt") (lib "plot/private/no-gui/plot2d-untyped.rkt") (lib "plot/private/common/math.rkt") (lib "plot/private/deprecated/deprecated.rkt") (lib "plot/private/common/untyped-utils.rkt") (lib "plot/private/plot3d/clip.rkt") (lib "plot/private/plot3d/renderer.rkt") (lib "plot/private/common/plot-device.rkt") (lib "plot/private/common/legend.rkt") (lib "plot/private/common/file-type.rkt") (lib "plot/private/common/marching-utils.rkt") (lib "plot/private/common/currency.rkt") (lib "plot/private/common/deprecation-warning.rkt") (lib "plot/private/plot2d/renderer.rkt") (lib "plot/private/common/draw.rkt") (lib "plot/private/plot3d/bsp-trees.rkt") (lib "plot/private/plot3d/point.rkt") (lib "plot/typed/bitmap.rkt") (lib "plot/private/common/samplers.rkt") (lib "plot/private/common/type-doc.rkt") (lib "plot/private/plot2d/plot-area.rkt") (lib "plot/utils.rkt") (lib "plot/no-gui.rkt") (lib "plot/private/common/contract.rkt") (lib "plot/private/deprecated/renderers.rkt") (lib "plot/private/no-gui/utils.rkt") (lib "plot/private/plot2d/arrows.rkt") (lib "plot/private/no-gui/plot-pict.rkt") (lib "plot/private/plot3d/isosurface.rkt") (lib "plot/private/common/plot-element.rkt") (lib "plot/private/no-gui/evil.rkt") (lib "plot/private/utils-and-no-gui.rkt") (lib "plot/private/plot3d/decoration.rkt") (lib "plot/private/plot3d/bsp.rkt") (lib "plot/private/plot3d/split.rkt") (lib "plot/pict.rkt") (lib "plot/private/common/types.rkt") (lib "plot/private/common/axis-transform.rkt") (lib "plot/private/common/ticks.rkt") (lib "plot/private/common/marching-cubes.rkt") (lib "plot/private/common/leftover-contracts.rkt") (lib "plot/private/no-gui/untyped-utils.rkt") (lib "plot/private/plot3d/line.rkt") (lib "plot/private/no-gui/plot3d.rkt") (lib "plot/private/common/plotmetrics.rkt") (lib "plot/private/plot2d/vector.rkt") (lib "plot/private/no-gui/evil-types.rkt") (lib "plot/private/plot2d/clip.rkt") (lib "plot/private/plot2d/point.rkt") (lib "plot/private/no-gui/plot2d.rkt") (lib "plot/private/plot2d/interval.rkt") (lib "plot/private/plot2d/color-field.rkt") (lib "plot/private/common/format.rkt") (lib "plot/private/common/kde.rkt") (lib "plot/private/plot3d/arrows.rkt") (lib "plot/private/plot2d/decoration.rkt") (lib "plot/private/plot3d/plot-area.rkt") (lib "plot/private/plot3d/vector.rkt") (lib "plot/private/no-gui/plot3d-utils.rkt") (lib "plot/private/no-gui/plot2d-utils.rkt") (lib "plot/private/common/typed-srfi19.rkt") (lib "plot/typed/no-gui.rkt") (lib "plot/private/plot3d/param-surf.rkt") (lib "plot/private/plot2d/rectangle.rkt") (lib "plot/private/plot3d/surface.rkt") (lib "plot/bitmap.rkt") (lib "plot/private/plot2d/contour.rkt") (lib "plot/typed/utils.rkt") (lib "plot/private/plot3d/contour.rkt") (lib "plot/private/no-gui/plot3d-evil-box.rkt") (lib "plot/private/no-gui/plot2d-evil-box.rkt") (lib "plot/private/common/utils.rkt") (lib "plot/private/no-gui/plot-bitmap.rkt") (lib "plot/typed/pict.rkt") (lib "plot/private/common/date-time.rkt") (lib "plot/private/common/draw-attribs.rkt") (lib "plot/private/common/parameter-group.rkt") (lib "plot/private/common/marching-squares.rkt") (lib "plot/private/common/parameters.rkt") (lib "plot/private/plot2d/line.rkt") (lib "plot/private/common/nonrenderer.rkt"))) (name . "plot-lib") (ring . 0) (search-terms . #hasheq((author:ntoronto@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "6743d6b82337296bbee484c1570bf9948e030ce6") (source . "git://github.com/racket/plot/?path=plot-lib") (source_url . "git://github.com/racket/plot/?path=plot-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("plot-test" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "plot-compat" "plot-gui-lib" "plot-lib" "plot-doc" "draw-lib" "pict-lib" "rackunit-lib" "slideshow-lib" "typed-racket-lib" "typed-racket-more" "contract-profile")) (description . "Plot tests") (implies . ()) (last-checked . 1632904313) (last-edit . 1417659583) (last-updated . 1623069204) (modules . ((lib "plot/tests/compat-tests.rkt") (lib "plot/tests/PRs/59.rkt") (lib "plot/tests/PRs/13620.rkt") (lib "plot/tests/typed/plot-no-gui.rkt") (lib "plot/tests/typed/plot-pict.rkt") (lib "plot/tests/plot-bitmap.rkt") (lib "plot/tests/PRs/66.rkt") (lib "plot/tests/PRs/76.rkt") (lib "plot/tests/pen-brush-hsv.rkt") (lib "plot/tests/plot-no-gui.rkt") (lib "plot/tests/typed/parameter-regression-tests.rkt") (lib "plot/tests/helpers.rkt") (lib "plot/tests/PRs/46.rkt") (lib "plot/tests/PRs/5.rkt") (lib "plot/tests/PRs/86.rkt") (lib "plot/tests/PRs/88.rkt") (lib "plot/tests/PRs/13709.rkt") (lib "plot/tests/plot3d-tests.rkt") (lib "plot/tests/PRs/75.rkt") (lib "plot/tests/out-file-tests.rkt") (lib "plot/tests/selection-tests.rkt") (lib "plot/tests/extreme-bounds-tests.rkt") (lib "plot/tests/typed/plot-bitmap.rkt") (lib "plot/tests/slideshow-test.rkt") (lib "plot/tests/animation.rkt") (lib "plot/tests/PRs/81-legend-layout.rkt") (lib "plot/tests/plot2d-tests.rkt") (lib "plot/tests/plot3d-bsp-tests.rkt") (lib "plot/tests/low-level-tests.rkt") (lib "plot/tests/PRs/42.rkt") (lib "plot/tests/tick-tests.rkt") (lib "plot/tests/plot-pict.rkt") (lib "plot/tests/PRs/70-75.rkt") (lib "plot/tests/PRs/68.rkt") (lib "plot/tests/axis-transform-tests.rkt") (lib "plot/tests/PRs/snip-overlay-renderers.rkt") (lib "plot/tests/subdivision-tests.rkt") (lib "plot/tests/isosurface-tests.rkt") (lib "plot/tests/PRs/45.rkt") (lib "plot/tests/typed/plot-tests.rkt") (lib "plot/tests/PRs/24.rkt") (lib "plot/tests/PRs/snip-empty-selection.rkt") (lib "plot/tests/PRs/90.rkt") (lib "plot/tests/PRs/55.rkt") (lib "plot/tests/PRs/58.rkt") (lib "plot/tests/PRs/plot-unsafe-provide.rkt") (lib "plot/tests/PRs/89.rkt"))) (name . "plot-test") (ring . 0) (search-terms . #hasheq((author:ntoronto@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "6743d6b82337296bbee484c1570bf9948e030ce6") (source . "git://github.com/racket/plot/?path=plot-test") (source_url . "git://github.com/racket/plot/?path=plot-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("plplot" . #hasheq((author . "peter.samarin@gmail.com") (authors . ("peter.samarin@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plplot.txt") (test-failure-log . "server/built/test-fail/plplot.txt") (test-success-log . #f))) (checksum . "fab8fe83993506b871eab9f1f6a7f2be3324c0dd") (checksum-error . #f) (collection . "plplot") (conflicts . ()) (date-added . 1584305771) (dependencies . ("base")) (description . "FFI bindings to PLplot") (implies . ()) (last-checked . 1632904313) (last-edit . 1584305771) (last-updated . 1584396627) (modules . ((lib "plplot/examples/x02.rkt") (lib "plplot/examples/utilities.rkt") (lib "plplot/examples/x00.rkt") (lib "plplot/examples/x03.rkt") (lib "plplot/main.rkt") (lib "plplot/examples/x01.rkt") (lib "plplot/examples/x17.rkt"))) (name . "plplot") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (FFI . #t) (author:peter.samarin@gmail.com . #t) (plot . #t) (ring:1 . #t))) (source . "https://github.com/oetr/racket-plplot.git") (tags . ("FFI" "plot")) (versions . #hash((default . #hasheq((checksum . "fab8fe83993506b871eab9f1f6a7f2be3324c0dd") (source . "https://github.com/oetr/racket-plplot.git") (source_url . "https://github.com/oetr/racket-plplot.git"))))))) ("plt-build-plot" . #hasheq((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-build-plot.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-build-plot.txt"))) (checksum . "e8c000f6611833f183f598c9d34380ff9d1bfc96") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "aws" "s3-sync" "draw-lib" "gui-lib" "scribble-html-lib" "plt-web-lib" "plt-service-monitor")) (description . "tools to record and plot `raco setup` memory use") (implies . ()) (last-checked . 1632904314) (last-edit . 1422463149) (last-updated . 1609713268) (modules . ((lib "plt-build-plot/page.rkt") (lib "plt-build-plot/upload.rkt") (lib "plt-build-plot/main.rkt") (lib "plt-build-plot/plot.rkt"))) (name . "plt-build-plot") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/plt-build-plot") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e8c000f6611833f183f598c9d34380ff9d1bfc96") (source . "git://github.com/racket/plt-build-plot") (source_url . "http://github.com/racket/plt-build-plot/tree/master"))))))) ("plt-service-monitor" . #hasheq((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plt-service-monitor" "doc/plt-service-monitor@plt-service-monitor/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-service-monitor.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-service-monitor.txt"))) (checksum . "a40e841223178254948e216ff31e9bd629a66253") (checksum-error . #f) (collection . "plt-service-monitor") (conflicts . ()) (dependencies . ("net-lib" "base" ("aws" #:version "1.6") "http" "racket-doc" "scribble-lib")) (description . "service-monitoring and heartbeat tools") (implies . ()) (last-checked . 1632904314) (last-edit . 1422308276) (last-updated . 1615571234) (modules . ((lib "plt-service-monitor/private/email.rkt") (lib "plt-service-monitor/plt-service-monitor.scrbl") (lib "plt-service-monitor/config.rkt") (lib "plt-service-monitor/take-pulse.rkt") (lib "plt-service-monitor/beat.rkt"))) (name . "plt-service-monitor") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/plt-service-monitor") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a40e841223178254948e216ff31e9bd629a66253") (source . "git://github.com/racket/plt-service-monitor") (source_url . "http://github.com/racket/plt-service-monitor/tree/master"))))))) ("plt-services" . #hash((author . "eli@racket-lang.org mflatt@racket-lang.org") (authors . ("eli@racket-lang.org" "mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-services.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-services.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Miscellaneous management and maintenance tools used by the Racket development team") (implies . ()) (last-checked . 1632904314) (last-edit . 1460066358) (last-updated . 1632666922) (modules . ()) (name . "plt-services") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:eli@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (deprecated . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("deprecated")) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "git://github.com/racket/racket/?path=pkgs/plt-services") (source_url . "git://github.com/racket/racket/?path=pkgs/plt-services"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("plt-web" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-web.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-web.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("plt-web-lib" "plt-web-doc")) (description . "Web-page creation libraries") (implies . ("plt-web-lib" "plt-web-doc")) (last-checked . 1632904340) (last-edit . 1417307461) (last-updated . 1571887227) (modules . ()) (name . "plt-web") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a964124dd29c9d855f45686480414ae5b1dc96fd") (source . "git://github.com/racket/plt-web/?path=plt-web") (source_url . "git://github.com/racket/plt-web/?path=plt-web"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("plt-web-doc" . #hash((author . "eli@racket-lang.org mflatt@racket-lang.org samth@racket-lang.org") (authors . ("eli@racket-lang.org" "mflatt@racket-lang.org" "samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "plt-web" "doc/plt-web@plt-web-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-web-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-web-doc.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "plt-web") (conflicts . ()) (dependencies . ("base" "plt-web-lib" "racket-doc" "scribble-doc" "scribble-lib")) (description . "documentation part of plt-web") (implies . ()) (last-checked . 1632904340) (last-edit . 1417307461) (last-updated . 1571887228) (modules . ((lib "plt-web/plt-web.scrbl"))) (name . "plt-web-doc") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:eli@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a964124dd29c9d855f45686480414ae5b1dc96fd") (source . "git://github.com/racket/plt-web/?path=plt-web-doc") (source_url . "git://github.com/racket/plt-web/?path=plt-web-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("plt-web-lib" . #hash((author . "eli@racket-lang.org mflatt@racket-lang.org samth@racket-lang.org") (authors . ("eli@racket-lang.org" "mflatt@racket-lang.org" "samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/plt-web-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/plt-web-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "plt-web") (conflicts . ()) (dependencies . ("base" "at-exp-lib" "scribble-html-lib")) (description . "PLT web page style and generation") (implies . ()) (last-checked . 1632904340) (last-edit . 1417307461) (last-updated . 1571887229) (modules . ((lib "plt-web/resources/add-logo-text.rkt") (lib "plt-web/style.rkt") (lib "plt-web/main.rkt") (lib "plt-web/build.rkt") (lib "plt-web/indexes.rkt") (lib "plt-web/private/image-version.rkt") (lib "plt-web/private/roots.rkt") (lib "plt-web/resources.rkt") (lib "plt-web/resources/file-icons.rkt") (lib "plt-web/extras.rkt") (lib "plt-web/layout.rkt") (lib "plt-web/links.rkt") (lib "plt-web/utils.rkt"))) (name . "plt-web-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:eli@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a964124dd29c9d855f45686480414ae5b1dc96fd") (source . "git://github.com/racket/plt-web/?path=plt-web-lib") (source_url . "git://github.com/racket/plt-web/?path=plt-web-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("pmap" . #hasheq((author . "andreas8001@hotmail.com") (authors . ("andreas8001@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pmap" "doc/pmap@pmap/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pmap.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pmap.txt"))) (checksum . "e352de9bbc6735b1ca089a21490f87fc2fba5279") (checksum-error . #f) (collection . "pmap") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc" "math-doc")) (description . "Implementations of map using parallel futures and places") (implies . ()) (last-checked . 1632904341) (last-edit . 1493293836) (last-updated . 1502816288) (modules . ((lib "pmap/pmap.scrbl") (lib "pmap/main.rkt") (lib "pmap/pmapp_worker.rkt") (lib "pmap/pmapf.rkt") (lib "pmap/pmapp.rkt"))) (name . "pmap") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (Math . #t) (author:andreas8001@hotmail.com . #t) (futures . #t) (parallel . #t) (places . #t) (ring:1 . #t) (touch . #t))) (source . "git://github.com/APOS80/pmap") (tags . ("futures" "Math" "parallel" "places" "touch")) (versions . #hash((default . #hasheq((checksum . "e352de9bbc6735b1ca089a21490f87fc2fba5279") (source . "git://github.com/APOS80/pmap") (source_url . "http://github.com/APOS80/pmap/tree/master"))))))) ("png-image" . #hasheq((author . "lehi@tosk.in") (authors . ("lehi@tosk.in")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "png-image" "doc/png-image@png-image/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/png-image.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/png-image.txt"))) (checksum . "2515ab0af55f3d9e8aac92aaa3bc6a9dc571f60d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Library to view and modify PNG chunks.") (implies . ()) (last-checked . 1632904341) (last-edit . 1486891563) (last-updated . 1558461883) (modules . ((lib "png-image/txt.rkt") (lib "png-image/doc/png-image.scrbl") (lib "png-image/main.rkt") (lib "png-image/png-image.rkt") (lib "png-image/base.rkt") (lib "png-image/test/png-image-test.rkt"))) (name . "png-image") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lehi@tosk.in . #t) (compression . #t) (decompression . #t) (images . #t) (metadata . #t) (png . #t) (ring:1 . #t))) (source . "git://github.com/lehitoskin/png-image") (tags . ("compression" "decompression" "images" "metadata" "png")) (versions . #hash((default . #hasheq((checksum . "2515ab0af55f3d9e8aac92aaa3bc6a9dc571f60d") (source . "git://github.com/lehitoskin/png-image") (source_url . "http://github.com/lehitoskin/png-image/tree/master"))))))) ("point-free" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "point-free" "doc/point-free@point-free/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/point-free.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/point-free.txt"))) (checksum . "d294a342466d5071dd2c8f16ba9e50f9006b54af") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "doc-coverage" "cover" "doc-coverage" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "A library for easier and more powerful function composition") (implies . ()) (last-checked . 1632904342) (last-edit . 1500077286) (last-updated . 1511370592) (modules . ((lib "point-free/module-doc-test.rkt") (lib "point-free/fixpoint.rkt") (lib "point-free/point-free.scrbl") (lib "point-free/definition-forms.rkt") (lib "point-free/main.rkt") (lib "point-free/parallel-composition.rkt") (lib "point-free/arg-count-syntax.rkt") (lib "point-free/thrush.rkt"))) (name . "point-free") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (functional . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/point-free") (tags . ("functional")) (versions . #hash((default . #hasheq((checksum . "d294a342466d5071dd2c8f16ba9e50f9006b54af") (source . "git://github.com/jackfirth/point-free") (source_url . "http://github.com/jackfirth/point-free/tree/master"))))))) ("pollen" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pollen" "doc/pollen@pollen/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pollen.txt"))) (checksum . "ec4da2e679218b869d3805e4dabe72d20c904dc7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661201) (dependencies . (("base" #:version "6.3") ("txexpr" #:version "0.2") ("sugar" #:version "0.2") ("markdown" #:version "0.18") "htdp" "at-exp-lib" "html-lib" "rackjure" "web-server-lib" "scribble-lib" "scribble-text-lib" "rackunit-lib" "gui-lib" "string-constants-lib" "net-lib" "plot-gui-lib" "scribble-lib" "racket-doc" "rackunit-doc" "plot-doc" "scribble-doc" "slideshow-doc" "web-server-doc" "drracket")) (description . "Publishing system for web-based books") (implies . ()) (last-checked . 1632904342) (last-edit . 1556661201) (last-updated . 1625005919) (modules . ((lib "pollen/private/external/include-template.rkt") (lib "pollen/pagetree.rkt") (lib "pollen/scribblings/utils.rkt") (lib "pollen/test/test-provider.rkt") (lib "pollen/private/main-base.rkt") (lib "pollen/private/cache-utils.rkt") (lib "pollen/scribblings/acknowledgments.scrbl") (lib "pollen/test/test-subtemplate.rkt") (lib "pollen/test/test-quick-tour.rkt") (lib "pollen/scribblings/render.scrbl") (lib "pollen/private/to-string.rkt") (lib "pollen/scribblings/installation.scrbl") (lib "pollen/private/external/doclang-raw.rkt") (lib "pollen/test/test-current-metas.rkt") (lib "pollen/scribblings/template.scrbl") (lib "pollen/setup.rkt") (lib "pollen/scribblings/core.scrbl") (lib "pollen/test/test-ext.rkt") (lib "pollen/private/external/output.rkt") (lib "pollen/render.rkt") (lib "pollen/decode.rkt") (lib "pollen/unstable/typography.rkt") (lib "pollen/scribblings/pagetree.scrbl") (lib "pollen/test/test-poly.rkt") (lib "pollen/scribblings/formats.scrbl") (lib "pollen/test/test-bytes.rkt") (lib "pollen/scribblings/format-test.scrbl") (lib "pollen/main.rkt") (lib "pollen/test/data/escape-ext/pollen.rkt") (lib "pollen/scribblings/tutorial-fourth.scrbl") (lib "pollen/private/project-server-routes.rkt") (lib "pollen/unstable/html.rkt") (lib "pollen/test/test-langs.rkt") (lib "pollen/template/base.rkt") (lib "pollen/private/reader-base.rkt") (lib "pollen/markdown.rkt") (lib "pollen/scribblings/license.scrbl") (lib "pollen/test/test-escape-ext.rkt") (lib "pollen/private/log.rkt") (lib "pollen/test/test-project-port.rkt") (lib "pollen/test/data/poly/pollen.rkt") (lib "pollen/file.rkt") (lib "pollen/private/render-helper.rkt") (lib "pollen/test/pollen.rkt") (lib "pollen/scribblings/module-reference.scrbl") (lib "pollen/private/command.rkt") (lib "pollen/test/test-lang-splice.rkt") (lib "pollen/unstable/pygments.rkt") (lib "pollen/tag.rkt") (lib "pollen/scribblings/third-tutorial-files/pollen.rkt") (lib "pollen/test/test-pollen-mode.rkt") (lib "pollen/pre.rkt") (lib "pollen/test/test-lang-core.rkt") (lib "pollen/scribblings/file.scrbl") (lib "pollen/private/preheat-cache.rkt") (lib "pollen/scribblings/setup.scrbl") (lib "pollen/scribblings/cache.scrbl") (lib "pollen/test/test-runtime-path.rkt") (lib "pollen/test/test-poly-output-path.rkt") (lib "pollen/private/version.rkt") (lib "pollen/cache.rkt") (lib "pollen/scribblings/decode.scrbl") (lib "pollen/test/test-rerequire.rkt") (lib "pollen/test/data/quick-tour/uptown/pollen.rkt") (lib "pollen/scribblings/programming-pollen.scrbl") (lib "pollen/test/test-inline-submodule.rkt") (lib "pollen/scribblings/tag.scrbl") (lib "pollen/private/project-server.rkt") (lib "pollen/scribblings/convert.scrbl") (lib "pollen/private/project.rkt") (lib "pollen/scribblings/tutorial-second.scrbl") (lib "pollen/scribblings/mb-tools.rkt") (lib "pollen/private/runtime-config.rkt") (lib "pollen/private/whitespace.rkt") (lib "pollen/test/data/subtemplate/pollen.rkt") (lib "pollen/test/data/pollen-mode/pollen.rkt") (lib "pollen/scribblings/raco.scrbl") (lib "pollen/unstable/convert/html-to-pollen.rkt") (lib "pollen/test/data/pathup/pollen.rkt") (lib "pollen/core.rkt") (lib "pollen/private/split-metas.rkt") (lib "pollen/private/external/mode-indentation.rkt") (lib "pollen/test/test-output.rkt") (lib "pollen/scribblings/top.scrbl") (lib "pollen/test/data/project-port/pollen.rkt") (lib "pollen/scribblings/tutorial-mini.scrbl") (lib "pollen/template.rkt") (lib "pollen/scribblings/story.scrbl") (lib "pollen/top.rkt") (lib "pollen/unstable/math.rkt") (lib "pollen/private/drracket-buttons.rkt") (lib "pollen/test/test-trim-whitespace.rkt") (lib "pollen/scribblings/typography.scrbl") (lib "pollen/unstable/convert.rkt") (lib "pollen/private/dialect.rkt") (lib "pollen/test/test-third-tutorial-files.rkt") (lib "pollen/test/data/override/pollen.rkt") (lib "pollen/test/data/poly-output-path/pollen.rkt") (lib "pollen/scribblings/quick.scrbl") (lib "pollen/markup.rkt") (lib "pollen/scribblings/version-history.scrbl") (lib "pollen/test/data/pathup/subdir/subdir/pollen.rkt") (lib "pollen/private/splice.rkt") (lib "pollen/test/test-meta.rkt") (lib "pollen/test/test-pagetree-output.rkt") (lib "pollen/ptree.rkt") (lib "pollen/private/constants.rkt") (lib "pollen/test/data/rerequire/pollen.rkt") (lib "pollen/scribblings/pollen.scrbl") (lib "pollen/template/html.rkt") (lib "pollen/scribblings/unstable-module-reference.scrbl") (lib "pollen/test/test-current-metas-none.rkt") (lib "pollen/scribblings/tutorial-third.scrbl") (lib "pollen/private/external/logging.rkt") (lib "pollen/scribblings/pygments.scrbl") (lib "pollen/scribblings/tutorial-first.scrbl") (lib "pollen/misc/tutorial.rkt") (lib "pollen/scribblings/command.scrbl") (lib "pollen/test/test-pathup.rkt") (lib "pollen/scribblings/big-picture.scrbl") (lib "pollen/private/file-utils.rkt") (lib "pollen/test/test-submodule.rkt") (lib "pollen/test/data/whitespace/pollen.rkt") (lib "pollen/mode.rkt"))) (name . "pollen") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (documents . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/pollen.git") (tags . ("documents")) (versions . #hash((default . #hasheq((checksum . "ec4da2e679218b869d3805e4dabe72d20c904dc7") (source . "https://github.com/mbutterick/pollen.git") (source_url . "https://github.com/mbutterick/pollen.git"))))))) ("pollen-citations-mcgill" . #hasheq((author . "sanchom@gmail.com") (authors . ("sanchom@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "citations-mcgill" "doc/citations-mcgill@pollen-citations-mcgill/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen-citations-mcgill.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pollen-citations-mcgill.txt"))) (checksum . "4d510c4098e00e97257b50b6a9189d7e660c3c8c") (checksum-error . #f) (collection . "pollen") (conflicts . ()) (date-added . 1559932822) (dependencies . ("base" "pollen" "txexpr" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A McGill-style citations system that works within the Pollen publishing system.") (implies . ()) (last-checked . 1632904342) (last-edit . 1560048278) (last-updated . 1622476925) (modules . ((lib "pollen/citations-mcgill.rkt") (lib "pollen/scribblings/citations-mcgill.scrbl"))) (name . "pollen-citations-mcgill") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sanchom@gmail.com . #t) (documents . #t) (pollen . #t) (ring:1 . #t) (self-publishing . #t))) (source . "https://github.com/sanchom/pollen-citations-mcgill.git") (tags . ("documents" "pollen" "self-publishing")) (versions . #hash((default . #hasheq((checksum . "4d510c4098e00e97257b50b6a9189d7e660c3c8c") (source . "https://github.com/sanchom/pollen-citations-mcgill.git") (source_url . "https://github.com/sanchom/pollen-citations-mcgill.git"))))))) ("pollen-component" . #hasheq((author . "me@leafac.com") (authors . ("me@leafac.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pollen-component" "doc/pollen-component@pollen-component/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen-component.txt") (test-failure-log . "server/built/test-fail/pollen-component.txt") (test-success-log . #f))) (checksum . "36853a84a58e2889b0e3065d5f1357a596e3c1e6") (checksum-error . #f) (collection . "pollen-component") (conflicts . ()) (dependencies . ("base" "pollen" "sugar" "scribble-lib" "racket-doc")) (description . "Component-based development for Pollen") (implies . ()) (last-checked . 1632904342) (last-edit . 1525863127) (last-updated . 1526214014) (modules . ((lib "pollen-component/examples/with-css-expressions-and-urlang/pollen.rkt") (lib "pollen-component/examples/without-pollen-component/pollen.rkt") (lib "pollen-component/examples/with-pollen-component/pollen.rkt") (lib "pollen-component/documentation/pollen-component.scrbl") (lib "pollen-component/tests/parameter.rkt") (lib "pollen-component/tests/pollen.rkt") (lib "pollen-component/main.rkt") (lib "pollen-component/tests/test.rkt") (lib "pollen-component/examples/with-parameter/component.rkt"))) (name . "pollen-component") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:me@leafac.com . #t) (components . #t) (pollen . #t) (ring:1 . #t))) (source . "https://github.com/leafac/pollen-component.git") (tags . ("components" "pollen")) (versions . #hash((default . #hasheq((checksum . "36853a84a58e2889b0e3065d5f1357a596e3c1e6") (source . "https://github.com/leafac/pollen-component.git") (source_url . "https://github.com/leafac/pollen-component.git"))))))) ("pollen-count" . #hasheq((author . "malcolm.still@gmail.com") (authors . ("malcolm.still@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pollen-count" "doc/pollen-count@pollen-count/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen-count.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pollen-count.txt"))) (checksum . "c4da923debcf40d0558ea4cb97c8a7bd4f35f34b") (checksum-error . #f) (collection . "pollen-count") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "txexpr" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1632904343) (last-edit . 1456768925) (last-updated . 1502816291) (modules . ((lib "pollen-count/scribblings/pollen-count.scrbl") (lib "pollen-count/main.rkt"))) (name . "pollen-count") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:malcolm.still@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/malcolmstill/pollen-count") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c4da923debcf40d0558ea4cb97c8a7bd4f35f34b") (source . "git://github.com/malcolmstill/pollen-count") (source_url . "http://github.com/malcolmstill/pollen-count/tree/master"))))))) ("pollen-rock" . #hasheq((author . "ljs.darkfish@gmail.com") (authors . ("ljs.darkfish@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/pollen-rock.txt") (docs . (("main" "pollen-rock" "doc/pollen-rock@pollen-rock/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen-rock.txt") (test-failure-log . "server/built/test-fail/pollen-rock.txt") (test-success-log . #f))) (checksum . "8107c7c1a1ca1e5ab125650f38002683b15b22c9") (checksum-error . #f) (collection . "pollen-rock") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "web-server-lib" "pollen" "sugar" "scribble-lib" "racket-doc")) (description . "An enhanced Pollen server and an in-browser editor for Pollen files") (implies . ()) (last-checked . 1632904343) (last-edit . 1505460056) (last-updated . 1560726849) (modules . ((lib "pollen-rock/pollen-rock/http-util.rkt") (lib "pollen-rock/pollen-rock/handlers/get-config-handler.rkt") (lib "pollen-rock/pollen-rock/handlers/dump-handler.rkt") (lib "pollen-rock/pollen-rock/handlers/fs-handler.rkt") (lib "pollen-rock/pollen-rock/tests/test.rkt") (lib "pollen-rock/pollen-rock/handlers/render-handler.rkt") (lib "pollen-rock/pollen-rock/scribblings/pollen-rock.scrbl") (lib "pollen-rock/pollen-rock/handlers/search-handler.rkt") (lib "pollen-rock/pollen-rock/restful.rkt") (lib "pollen-rock/pollen-rock/tests/test-utils.rkt") (lib "pollen-rock/pollen-rock/main.rkt") (lib "pollen-rock/pollen-rock/handlers/watch-handler.rkt") (lib "pollen-rock/pollen-rock/config.rkt") (lib "pollen-rock/pollen-rock/handlers/get-contents-handler.rkt") (lib "pollen-rock/pollen-rock/handlers/fs-watch.rkt") (lib "pollen-rock/pollen-rock/handlers/tags-handler.rkt") (lib "pollen-rock/pollen-rock/logger.rkt") (lib "pollen-rock/pollen-rock/handlers/expose-module.rkt"))) (name . "pollen-rock") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:ljs.darkfish@gmail.com . #t) (pollen . #t) (ring:1 . #t))) (source . "https://github.com/lijunsong/pollen-rock.git") (tags . ("pollen")) (versions . #hash((default . #hasheq((checksum . "8107c7c1a1ca1e5ab125650f38002683b15b22c9") (source . "https://github.com/lijunsong/pollen-rock.git") (source_url . "https://github.com/lijunsong/pollen-rock.git"))))))) ("pollen-tfl" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pollen-tfl" "doc/pollen-tfl@pollen-tfl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen-tfl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pollen-tfl.txt"))) (checksum . "d51229e0558f30b522acb6e13858f84a3f8814ce") (checksum-error . #f) (collection . "pollen-tfl") (conflicts . ()) (date-added . 1556661273) (dependencies . ("base" "pollen" "hyphenate" "css-tools" "txexpr" "sugar" "scribble-lib" "rackunit-lib" "racket-doc" "scribble-doc")) (description . "Sample Pollen project: source code for Typography for Lawyers website") (implies . ()) (last-checked . 1632904343) (last-edit . 1556661274) (last-updated . 1621362516) (modules . ((lib "pollen-tfl/scribblings/pollen-rkt.scrbl") (lib "pollen-tfl/pollen.rkt") (lib "pollen-tfl/pollen-test.rkt") (lib "pollen-tfl/main.rkt") (lib "pollen-tfl/fonts/pollen.rkt") (lib "pollen-tfl/scribblings/pollen-tfl.scrbl"))) (name . "pollen-tfl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (demo . #t) (pollen . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/pollen-tfl.git") (tags . ("demo" "pollen")) (versions . #hash((default . #hasheq((checksum . "d51229e0558f30b522acb6e13858f84a3f8814ce") (source . "https://github.com/mbutterick/pollen-tfl.git") (source_url . "https://github.com/mbutterick/pollen-tfl.git"))))))) ("pollen-tuftorial" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pollen-tuftorial" "doc/pollen-tuftorial@pollen-tuftorial/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pollen-tuftorial.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pollen-tuftorial.txt"))) (checksum . "bb50c7bf4544c0013a59a65e38d48bd174231d05") (checksum-error . #f) (collection . "pollen-tuftorial") (conflicts . ()) (date-added . 1578341938) (dependencies . ("base" "pollen" "hyphenate" "css-tools" "txexpr" "sugar" "scribble-lib" "rackunit-lib" "racket-doc" "scribble-doc")) (description . "Pollen tutorial project based on Tufte CSS") (implies . ()) (last-checked . 1632904343) (last-edit . 1578341938) (last-updated . 1621362525) (modules . ((lib "pollen-tuftorial/scribblings/pollen-rkt.scrbl") (lib "pollen-tuftorial/pollen.rkt") (lib "pollen-tuftorial/scribblings/pollen-tuftorial.scrbl"))) (name . "pollen-tuftorial") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/pollen-tuftorial.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "bb50c7bf4544c0013a59a65e38d48bd174231d05") (source . "https://github.com/mbutterick/pollen-tuftorial.git") (source_url . "https://github.com/mbutterick/pollen-tuftorial.git"))))))) ("polyglot" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/polyglot.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/polyglot.txt"))) (checksum . "d27ca7fe90fd4ba2a6c5bcd921fce89e72d2c408") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1566696913) (dependencies . ("base" "polyglot-lib" "polyglot-doc")) (description . "Generate static websites using any mixture of any language for humans or computers.") (implies . ("polyglot-lib" "polyglot-doc")) (last-checked . 1632904343) (last-edit . 1581694753) (last-updated . 1609522871) (modules . ()) (name . "polyglot") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:sage@sagegerard.com . #t) (blog . #t) (markdown . #t) (ring:1 . #t) (static-sites . #t) (web . #t) (web-server . #t))) (source . "https://github.com/zyrolasting/polyglot.git?path=polyglot") (tags . ("blog" "markdown" "static-sites" "web" "web-server")) (versions . #hash((default . #hasheq((checksum . "d27ca7fe90fd4ba2a6c5bcd921fce89e72d2c408") (source . "https://github.com/zyrolasting/polyglot.git?path=polyglot") (source_url . "https://github.com/zyrolasting/polyglot.git?path=polyglot"))))))) ("polyglot-doc" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "polyglot-tutorials" "doc/polyglot-tutorials@polyglot-doc/index.html") ("main" "polyglot-reference" "doc/polyglot-reference@polyglot-doc/index.html") ("main" "polyglot-guide" "doc/polyglot-guide@polyglot-doc/index.html") ("main" "polyglot-how-tos" "doc/polyglot-how-tos@polyglot-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/polyglot-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/polyglot-doc.txt"))) (checksum . "d27ca7fe90fd4ba2a6c5bcd921fce89e72d2c408") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1581694858) (dependencies . ("aws" "base" "css-expr" "file-watchers" "markdown" "polyglot-lib" "txexpr" "unlike-assets-doc" "unlike-assets-lib" "scribble-lib" "racket-doc")) (description . "Documentation for polyglot") (implies . ()) (last-checked . 1632904344) (last-edit . 1581694858) (last-updated . 1609522871) (modules . ((lib "polyglot/scribblings/tutorials/css-preprocessing.scrbl") (lib "polyglot/scribblings/tutorials/multiple-workflows.scrbl") (lib "polyglot/scribblings/macros.rkt") (lib "polyglot/scribblings/reference/contributions.scrbl") (lib "polyglot/scribblings/how-tos/embed-code-examples.scrbl") (lib "polyglot/scribblings/guide/motivation.scrbl") (lib "polyglot/scribblings/reference/polyglot-reference.scrbl") (lib "polyglot/scribblings/guide/get-started.scrbl") (lib "polyglot/scribblings/reference/cli.scrbl") (lib "polyglot/scribblings/reference/builds.scrbl") (lib "polyglot/scribblings/guide/polyglot-guide.scrbl") (lib "polyglot/scribblings/guide/imperative-workflow.scrbl") (lib "polyglot/scribblings/how-tos/polyglot-how-tos.scrbl") (lib "polyglot/scribblings/reference/paths.scrbl") (lib "polyglot/scribblings/reference/imperative.scrbl") (lib "polyglot/scribblings/reference/projects-index.scrbl") (lib "polyglot/scribblings/reference/projects.scrbl") (lib "polyglot/scribblings/guide/now-what.scrbl") (lib "polyglot/scribblings/tutorials/polyglot-tutorials.scrbl") (lib "polyglot/scribblings/guide/macros.scrbl") (lib "polyglot/scribblings/reference/functional.scrbl") (lib "polyglot/scribblings/guide/racket-in-markdown.scrbl") (lib "polyglot/scribblings/reference/base.scrbl") (lib "polyglot/scribblings/reference/elements.scrbl") (lib "polyglot/scribblings/how-tos/before-after-builds.scrbl") (lib "polyglot/scribblings/reference/built-in-workflows.scrbl") (lib "polyglot/scribblings/reference/txexpr.scrbl") (lib "polyglot/scribblings/reference/applying.scrbl") (lib "polyglot/scribblings/how-tos/incorporate-side-effects.scrbl") (lib "polyglot/scribblings/reference/workflows.scrbl") (lib "polyglot/scribblings/guide/functional-workflow.scrbl") (lib "polyglot/scribblings/guide/base-workflow.scrbl"))) (name . "polyglot-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sage@sagegerard.com . #t) (blog . #t) (markdown . #t) (ring:1 . #t) (static-sites . #t) (web . #t) (web-server . #t))) (source . "https://github.com/zyrolasting/polyglot.git?path=polyglot-doc") (tags . ("blog" "markdown" "static-sites" "web" "web-server")) (versions . #hash((default . #hasheq((checksum . "d27ca7fe90fd4ba2a6c5bcd921fce89e72d2c408") (source . "https://github.com/zyrolasting/polyglot.git?path=polyglot-doc") (source_url . "https://github.com/zyrolasting/polyglot.git?path=polyglot-doc"))))))) ("polyglot-lib" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/polyglot-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/polyglot-lib.txt"))) (checksum . "d27ca7fe90fd4ba2a6c5bcd921fce89e72d2c408") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1581694703) (dependencies . ("base" "file-watchers" "txexpr" "unlike-assets-lib" "aws" "markdown" "web-server-lib")) (description . "Implementation for Polyglot") (implies . ()) (last-checked . 1632904344) (last-edit . 1581694703) (last-updated . 1609522872) (modules . ((lib "polyglot/private/cli/demo.rkt") (lib "polyglot/private/server.rkt") (lib "polyglot/elements.rkt") (lib "polyglot/private/dist.rkt") (lib "polyglot/private/skel/imperative/.polyglotrc.rkt") (lib "polyglot/txexpr.rkt") (lib "polyglot/private/dynamic-modules.rkt") (lib "polyglot/private/skel/functional/.polyglotrc.rkt") (lib "polyglot/base.rkt") (lib "polyglot/projects.rkt") (lib "polyglot/private/css.rkt") (lib "polyglot/private/cli/develop.rkt") (lib "polyglot/private/cli/start.rkt") (lib "polyglot/functional.rkt") (lib "polyglot/main.rkt") (lib "polyglot/private/cli/shared.rkt") (lib "polyglot/private/cli/entry.rkt") (lib "polyglot/private/skel/functional/vcomps.rkt") (lib "polyglot/private/cli/publish.rkt") (lib "polyglot/imperative.rkt") (lib "polyglot/paths.rkt") (lib "polyglot/private/skel/imperative/vcomps.rkt") (lib "polyglot/private/cli/build.rkt") (lib "polyglot/builds.rkt"))) (name . "polyglot-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:sage@sagegerard.com . #t) (code-generator . #t) (ring:1 . #t) (static-sites . #t) (web . #t))) (source . "https://github.com/zyrolasting/polyglot.git?path=polyglot-lib") (tags . ("code-generator" "static-sites" "web")) (versions . #hash((default . #hasheq((checksum . "d27ca7fe90fd4ba2a6c5bcd921fce89e72d2c408") (source . "https://github.com/zyrolasting/polyglot.git?path=polyglot-lib") (source_url . "https://github.com/zyrolasting/polyglot.git?path=polyglot-lib"))))))) ("polyglot-test" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/polyglot-test.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/polyglot-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/polyglot-test.txt"))) (checksum . "d27ca7fe90fd4ba2a6c5bcd921fce89e72d2c408") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1581694928) (dependencies . ("base" "polyglot-lib" "aws" "unlike-assets-lib" "markdown" "rackunit-lib")) (description . "Tests for Polyglot") (implies . ()) (last-checked . 1632904344) (last-edit . 1581694928) (last-updated . 1609522873) (modules . ((lib "tests/polyglot/scripts.rkt") (lib "tests/polyglot/projects.rkt") (lib "tests/polyglot/paths.rkt") (lib "tests/polyglot/imperative.rkt") (lib "tests/polyglot/builds.rkt") (lib "tests/polyglot/functional.rkt") (lib "tests/polyglot/dynamic-modules.rkt") (lib "tests/polyglot/publish.rkt") (lib "tests/polyglot/txexpr.rkt"))) (name . "polyglot-test") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:sage@sagegerard.com . #t) (ring:1 . #t))) (source . "https://github.com/zyrolasting/polyglot.git?path=polyglot-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d27ca7fe90fd4ba2a6c5bcd921fce89e72d2c408") (source . "https://github.com/zyrolasting/polyglot.git?path=polyglot-test") (source_url . "https://github.com/zyrolasting/polyglot.git?path=polyglot-test"))))))) ("polysemy" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "polysemy" "doc/polysemy@polysemy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/polysemy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/polysemy.txt"))) (checksum . "5d9838618ae6d6b8c412eaf30bac4bfa9fcf12c9") (checksum-error . #f) (collection . "polysemy") (conflicts . ()) (date-added . 1614799518) (dependencies . (("base" "6.3") "rackunit-lib" ("scribble-lib" "1.16") "racket-doc")) (description . "Highly experimental and unstable. Attach multiple meanings to an identifier (match expander, function overloads, macros, custom ~literal tokens…). Rename parts of identifiers (rename only some meanings, leaving others with the original name). Compose hybrid identifiers by mixing the meanings of two or more independently defined identifiers.") (implies . ()) (last-checked . 1632904344) (last-edit . 1614889648) (last-updated . 1617546893) (modules . ((lib "polysemy/test/test-provide-b.rkt") (lib "polysemy/test/test-require-c.rkt") (lib "polysemy/private/utils.rkt") (lib "polysemy/test/test-require-e-rename-failure.rkt") (lib "polysemy/scribblings/polysemy.scrbl") (lib "polysemy/test/test-provide.rkt") (lib "polysemy/private/ids.rkt") (lib "polysemy/test/test-2-provide.rkt") (lib "polysemy/test/test-2-require.rkt") (lib "polysemy/main.rkt") (lib "polysemy/test/test-require-d.rkt") (lib "polysemy/test/test-require.rkt"))) (name . "polysemy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (experimental . #t) (provide . #t) (require . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/polysemy.git#main") (tags . ("experimental" "provide" "require" "syntax")) (versions . #hash((default . #hasheq((checksum . "5d9838618ae6d6b8c412eaf30bac4bfa9fcf12c9") (source . "https://github.com/jsmaniac/polysemy.git#main") (source_url . "https://github.com/jsmaniac/polysemy.git#main"))))))) ("pop-pl" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pop-pl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pop-pl.txt"))) (checksum . "758f7bff0b5e2810f85cda0b6305c4699ed4fce5") (checksum-error . #f) (collection . "pop-pl") (conflicts . ()) (dependencies . (("base" #:version "6.3") "gui-lib" "pict-lib" "rackunit-lib" "cover-coveralls")) (description . "A Patient-Oriented Prescription Programming Language") (implies . ()) (last-checked . 1632904344) (last-edit . 1426520796) (last-updated . 1516727894) (modules . ((lib "pop-pl/examples/insulin/simulation.rkt") (lib "pop-pl/lang/reader.rkt") (lib "pop-pl/private/shared.rkt") (lib "pop-pl/tests/insulin.rkt") (lib "pop-pl/examples/heparin/simulation.rkt") (lib "pop-pl/tests/harness.rkt") (lib "pop-pl/main.rkt") (lib "pop-pl/lang/parse.rkt") (lib "pop-pl/constants.rkt") (lib "pop-pl/prescription-sig.rkt") (lib "pop-pl/system-unit.rkt") (lib "pop-pl/packrat.rkt") (lib "pop-pl/tests/popa.rkt") (lib "pop-pl/system-sig.rkt") (lib "pop-pl/examples/heparin/sim-gui.rkt") (lib "pop-pl/tests/heparin.rkt") (lib "pop-pl/examples/insulin/sim-gui.rkt") (lib "pop-pl/sexp/lang/reader.rkt") (lib "pop-pl/examples/lurie-heparin/heparin.rkt"))) (name . "pop-pl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:spencer@florence.io . #t) (ring:1 . #t))) (source . "git://github.com/florence/pop-pl") (tags . ()) (versions . #hash((default . #hasheq((checksum . "758f7bff0b5e2810f85cda0b6305c4699ed4fce5") (source . "git://github.com/florence/pop-pl") (source_url . "http://github.com/florence/pop-pl/tree/master"))) ("6.2.1" . #hasheq((checksum . "b11be20b04ec61ea080588cd228bd26195fdb5cc") (source . "git://github.com/florence/pop-pl#old") (source_url . "http://github.com/florence/pop-pl/tree/master#old"))) ("6.2" . #hasheq((checksum . "b11be20b04ec61ea080588cd228bd26195fdb5cc") (source . "git://github.com/florence/pop-pl#old") (source_url . "http://github.com/florence/pop-pl/tree/master#old"))) ("6.1.1" . #hasheq((checksum . "b11be20b04ec61ea080588cd228bd26195fdb5cc") (source . "git://github.com/florence/pop-pl#old") (source_url . "http://github.com/florence/pop-pl/tree/master#old"))))))) ("popl-2012-ryr-talk" . #hasheq((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/popl-2012-ryr-talk.txt") (test-failure-log . "server/built/test-fail/popl-2012-ryr-talk.txt") (test-success-log . #f))) (checksum . "9da05129de004cc1df0ccfbd821e8542a9155021") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "htdp-lib" "redex-gui-lib" "redex-lib" "slideshow-lib")) (description . "") (implies . ()) (last-checked . 1632904345) (last-edit . 1440407946) (last-updated . 1502816300) (modules . ((lib "popl-2012-ryr-talk/main.rkt") (lib "popl-2012-ryr-talk/subst.rkt") (lib "popl-2012-ryr-talk/amb-test.rkt") (lib "popl-2012-ryr-talk/amb.rkt") (lib "popl-2012-ryr-talk/lifecycle.rkt") (lib "popl-2012-ryr-talk/title.rkt") (lib "popl-2012-ryr-talk/color.rkt") (lib "popl-2012-ryr-talk/util.rkt") (lib "popl-2012-ryr-talk/study.rkt") (lib "popl-2012-ryr-talk/fable/fable.rkt") (lib "popl-2012-ryr-talk/typeset-amb.rkt") (lib "popl-2012-ryr-talk/fable-words.rkt") (lib "popl-2012-ryr-talk/subst-test.rkt"))) (name . "popl-2012-ryr-talk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:robby@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/rfindler/popl-2012-ryr-talk") (tags . ()) (versions . #hash((default . #hasheq((checksum . "9da05129de004cc1df0ccfbd821e8542a9155021") (source . "git://github.com/rfindler/popl-2012-ryr-talk") (source_url . "http://github.com/rfindler/popl-2012-ryr-talk/tree/master"))))))) ("poppler-i386-macosx" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/poppler-i386-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/poppler-i386-macosx.txt"))) (checksum . "dbb5cf3e6e225aa8af8abdc815734981682812bd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for racket-poppler package") (implies . ()) (last-checked . 1632904347) (last-edit . 1409089891) (last-updated . 1564844361) (modules . ()) (name . "poppler-i386-macosx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (poppler . #t) (ring:1 . #t))) (source . "git://github.com/soegaard/poppler-libs?path=poppler-i386-macosx") (tags . ("poppler")) (versions . #hash((default . #hasheq((checksum . "dbb5cf3e6e225aa8af8abdc815734981682812bd") (source . "git://github.com/soegaard/poppler-libs?path=poppler-i386-macosx") (source_url . "http://github.com/soegaard/poppler-libs/tree/master?path=poppler-i386-macosx"))))))) ("poppler-ppc-macosx" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/poppler-ppc-macosx.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e063f0463664e0fe4943135020826ff5bbbd3ce9") (checksum-error . "pkg: specified directory is not in Git respository\n  path: poppler-ppc-macosx\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:913:0: lift-git-directory-content\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:318:11\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:114:0: stage-package/info\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:720:0: pkg-stage\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:129:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for racket-poppler package") (implies . ()) (last-checked . 1632904352) (last-edit . 1409089859) (last-updated . 1621814965) (modules . ()) (name . "poppler-ppc-macosx") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:jensaxel@soegaard.net . #t) (poppler . #t) (ring:1 . #t))) (source . "git://github.com/soegaard/poppler-libs?path=poppler-ppc-macosx") (tags . ("poppler")) (versions . #hash((default . #hasheq((checksum . "e063f0463664e0fe4943135020826ff5bbbd3ce9") (source . "git://github.com/soegaard/poppler-libs?path=poppler-ppc-macosx") (source_url . "http://github.com/soegaard/poppler-libs/tree/master?path=poppler-ppc-macosx"))))))) ("poppler-win32-i386" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/poppler-win32-i386.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/poppler-win32-i386.txt"))) (checksum . "dbb5cf3e6e225aa8af8abdc815734981682812bd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for racket-poppler package") (implies . ()) (last-checked . 1632904352) (last-edit . 1409089839) (last-updated . 1564844372) (modules . ()) (name . "poppler-win32-i386") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (poppler . #t) (ring:1 . #t))) (source . "git://github.com/soegaard/poppler-libs?path=poppler-win32-i386") (tags . ("poppler")) (versions . #hash((default . #hasheq((checksum . "dbb5cf3e6e225aa8af8abdc815734981682812bd") (source . "git://github.com/soegaard/poppler-libs?path=poppler-win32-i386") (source_url . "http://github.com/soegaard/poppler-libs/tree/master?path=poppler-win32-i386"))))))) ("poppler-win32-x86-64" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/poppler-win32-x86-64.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/poppler-win32-x86-64.txt"))) (checksum . "dbb5cf3e6e225aa8af8abdc815734981682812bd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for racket-poppler package") (implies . ()) (last-checked . 1632904352) (last-edit . 1409089810) (last-updated . 1564844377) (modules . ()) (name . "poppler-win32-x86-64") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (poppler . #t) (ring:1 . #t))) (source . "git://github.com/soegaard/poppler-libs?path=poppler-win32-x86_64") (tags . ("poppler")) (versions . #hash((default . #hasheq((checksum . "dbb5cf3e6e225aa8af8abdc815734981682812bd") (source . "git://github.com/soegaard/poppler-libs?path=poppler-win32-x86_64") (source_url . "http://github.com/soegaard/poppler-libs/tree/master?path=poppler-win32-x86_64"))))))) ("poppler-x86-64-macosx" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/poppler-x86-64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/poppler-x86-64-macosx.txt"))) (checksum . "dbb5cf3e6e225aa8af8abdc815734981682812bd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for racket-poppler package") (implies . ()) (last-checked . 1632904353) (last-edit . 1409089876) (last-updated . 1564844383) (modules . ()) (name . "poppler-x86-64-macosx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (poppler . #t) (ring:1 . #t))) (source . "git://github.com/soegaard/poppler-libs?path=poppler-x86_64-macosx") (tags . ("poppler")) (versions . #hash((default . #hasheq((checksum . "dbb5cf3e6e225aa8af8abdc815734981682812bd") (source . "git://github.com/soegaard/poppler-libs?path=poppler-x86_64-macosx") (source_url . "http://github.com/soegaard/poppler-libs/tree/master?path=poppler-x86_64-macosx"))))))) ("port-match" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "port-match" "doc/port-match@port-match/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/port-match.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/port-match.txt"))) (checksum . "71fd3e9ed4f5766c46182923b08ff6d514e838a2") (checksum-error . #f) (collection . "port-match") (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "Pattern Matching for Ports") (implies . ()) (last-checked . 1632904353) (last-edit . 1507535112) (last-updated . 1507548594) (modules . ((lib "port-match/main.rkt") (lib "port-match/private/expander.rkt") (lib "port-match/test.rkt") (lib "port-match/private/template.rkt") (lib "port-match/private/pattern.rkt") (lib "port-match/private/forms.rkt") (lib "port-match/private/compile.rkt") (lib "port-match/port-match.scrbl") (lib "port-match/base.rkt"))) (name . "port-match") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:leo@lwh.jp . #t) (binary . #t) (match . #t) (port . #t) (ring:1 . #t))) (source . "git://github.com/lwhjp/port-match") (tags . ("binary" "match" "port")) (versions . #hash((default . #hasheq((checksum . "71fd3e9ed4f5766c46182923b08ff6d514e838a2") (source . "git://github.com/lwhjp/port-match") (source_url . "http://github.com/lwhjp/port-match/tree/master"))))))) ("portaudio" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "portaudio" "doc/portaudio@portaudio/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/portaudio.txt") (test-failure-log . "server/built/test-fail/portaudio.txt") (test-success-log . #f))) (checksum . "74dfaf1d6317a9f5479ae5492e874e9e73888a46") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" ("portaudio-x86_64-macosx" #:platform "x86_64-macosx") ("portaudio-x86_64-linux" #:platform "x86_64-linux") ("portaudio-x86_64-win32" #:platform "win32\\x86_64") "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Bindings for portaudio, a cross-platform audio library.") (implies . ()) (last-checked . 1632904353) (last-edit . 1410457003) (last-updated . 1596563211) (modules . ((lib "portaudio/stream-play.rkt") (lib "portaudio/callback-support.rkt") (lib "portaudio/main.rkt") (lib "portaudio/devices.rkt") (lib "portaudio/test/test-stream-playback.rkt") (lib "portaudio/test/test-stream-callback.rkt") (lib "portaudio/portaudio.scrbl") (lib "portaudio/s16vec-record.rkt") (lib "portaudio/test/test-copying-callbacks.rkt") (lib "portaudio/test/test-s16vec-play.rkt") (lib "portaudio/callbacks-lib.rkt") (lib "portaudio/portaudio.rkt") (lib "portaudio/s16vec-play.rkt") (lib "portaudio/test/test-s16vec-record.rkt") (lib "portaudio/test/test-portaudio.rkt") (lib "portaudio/test/test-hi-level-stream-play.rkt") (lib "portaudio/test/helpers.rkt"))) (name . "portaudio") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (ffi . #t) (io . #t) (ring:1 . #t))) (source . "github://github.com/jbclements/portaudio/pre-6/") (tags . ("audio" "ffi" "io")) (versions . #hash(("5.93" . #hasheq((checksum . "74dfaf1d6317a9f5479ae5492e874e9e73888a46") (source . "github://github.com/jbclements/portaudio/pre-6/") (source_url . "http://github.com/jbclements/portaudio/tree/pre-6/"))) ("5.92" . #hasheq((checksum . "74dfaf1d6317a9f5479ae5492e874e9e73888a46") (source . "github://github.com/jbclements/portaudio/pre-6/") (source_url . "http://github.com/jbclements/portaudio/tree/pre-6/"))) (default . #hasheq((checksum . "77a03c86054a5d7a26ed0082215b61162eb8b651") (source . "github://github.com/jbclements/portaudio/master/") (source_url . "http://github.com/jbclements/portaudio/tree/master/"))) ("5.3.2" . #hasheq((checksum . "74dfaf1d6317a9f5479ae5492e874e9e73888a46") (source . "github://github.com/jbclements/portaudio/pre-6/") (source_url . "http://github.com/jbclements/portaudio/tree/pre-6/"))) ("5.3.4" . #hasheq((checksum . "74dfaf1d6317a9f5479ae5492e874e9e73888a46") (source . "github://github.com/jbclements/portaudio/pre-6/") (source_url . "http://github.com/jbclements/portaudio/tree/pre-6/"))) ("5.3.3" . #hasheq((checksum . "74dfaf1d6317a9f5479ae5492e874e9e73888a46") (source . "github://github.com/jbclements/portaudio/pre-6/") (source_url . "http://github.com/jbclements/portaudio/tree/pre-6/"))) ("5.3.6" . #hasheq((checksum . "74dfaf1d6317a9f5479ae5492e874e9e73888a46") (source . "github://github.com/jbclements/portaudio/pre-6/") (source_url . "http://github.com/jbclements/portaudio/tree/pre-6/"))) ("5.3.5" . #hasheq((checksum . "74dfaf1d6317a9f5479ae5492e874e9e73888a46") (source . "github://github.com/jbclements/portaudio/pre-6/") (source_url . "http://github.com/jbclements/portaudio/tree/pre-6/"))))))) ("portaudio-x86_64-linux" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/portaudio-x86_64-linux.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/portaudio-x86_64-linux.txt"))) (checksum . "a6c792790429078a18822f56f388691f8d3db15e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1594158460) (dependencies . ()) (description . "Linux callback library for portaudio") (implies . ()) (last-checked . 1632904355) (last-edit . 1594158460) (last-updated . 1594158460) (modules . ()) (name . "portaudio-x86_64-linux") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (portaudio . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/portaudio-x86_64-linux.git") (tags . ("audio" "portaudio")) (versions . #hash((default . #hasheq((checksum . "a6c792790429078a18822f56f388691f8d3db15e") (source . "https://github.com/jbclements/portaudio-x86_64-linux.git") (source_url . "https://github.com/jbclements/portaudio-x86_64-linux.git"))))))) ("portaudio-x86_64-macosx" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/portaudio-x86_64-macosx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/portaudio-x86_64-macosx.txt"))) (checksum . "efe992725c3c0bb10dec555bb20812285ac94c39") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1590689453) (dependencies . ()) (description . "macosx libraries for portaudio") (implies . ()) (last-checked . 1632904355) (last-edit . 1590689453) (last-updated . 1590689558) (modules . ()) (name . "portaudio-x86_64-macosx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:clements@racket-lang.org . #t) (portaudio . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/portaudio-x86_64-macosx.git") (tags . ("portaudio")) (versions . #hash((default . #hasheq((checksum . "efe992725c3c0bb10dec555bb20812285ac94c39") (source . "https://github.com/jbclements/portaudio-x86_64-macosx.git") (source_url . "https://github.com/jbclements/portaudio-x86_64-macosx.git"))))))) ("portaudio-x86_64-win32" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/portaudio-x86_64-win32.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/portaudio-x86_64-win32.txt"))) (checksum . "851aebfca64edd7f7a09a0e93a35ba0b59f92a80") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1593884552) (dependencies . ()) (description . "64-bit windows libraries for portaudio") (implies . ()) (last-checked . 1632904355) (last-edit . 1593884552) (last-updated . 1593884552) (modules . ()) (name . "portaudio-x86_64-win32") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (portaudio . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/portaudio-x86_64-win32.git") (tags . ("audio" "portaudio")) (versions . #hash((default . #hasheq((checksum . "851aebfca64edd7f7a09a0e93a35ba0b59f92a80") (source . "https://github.com/jbclements/portaudio-x86_64-win32.git") (source_url . "https://github.com/jbclements/portaudio-x86_64-win32.git"))))))) ("positional-tree-utils" . #hasheq((author . "vincentnys@gmail.com") (authors . ("vincentnys@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/positional-tree-utils.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "1ef3b3d188660b4849788872d6a2b3eaf5d355df") (checksum-error . #f) (collection . "positional-tree-utils") (conflicts . ()) (dependencies . ("at-exp-lib" "base" "racket-doc" "rackunit-lib" "scribble-lib" ("list-utils" #:version "0.3"))) (description . "A collection of functions which I have found useful when working with positional trees.") (implies . ()) (last-checked . 1632904355) (last-edit . 1513667654) (last-updated . 1519916728) (modules . ((lib "positional-tree-utils/main.rkt") (lib "positional-tree-utils/scribblings/positional-tree-utils.scrbl") (lib "positional-tree-utils/printer.rkt"))) (name . "positional-tree-utils") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:vincentnys@gmail.com . #t) (ring:1 . #t) (trees . #t) (utilities . #t))) (source . "https://github.com/v-nys/positional-tree-utils.git") (tags . ("trees" "utilities")) (versions . #hash((default . #hasheq((checksum . "1ef3b3d188660b4849788872d6a2b3eaf5d355df") (source . "https://github.com/v-nys/positional-tree-utils.git") (source_url . "https://github.com/v-nys/positional-tree-utils.git"))))))) ("postfix-dot-notation" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "postfix-dot-notation" "doc/postfix-dot-notation@postfix-dot-notation/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/postfix-dot-notation.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/postfix-dot-notation.txt"))) (checksum . "584ed69de73775e261ecdb7607fc14d9790500ef") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "sweet-exp" "hygienic-reader-extension" "rackunit-lib" "scribble-lib" "racket-doc" "scribble-doc")) (description . "a lang-extension for postfix dot notation") (implies . ()) (last-checked . 1632904355) (last-edit . 1466340964) (last-updated . 1502816324) (modules . ((lib "postfix-dot-notation/lang/reader.rkt") (lib "postfix-dot-notation/lang/runtime-config.rkt") (lib "postfix-dot-notation/tests/test-lang.rkt") (lib "postfix-dot-notation/docs/postfix-dot-notation.scrbl") (lib "postfix-dot-notation/minsec.rkt") (lib "postfix-dot-notation/reader.rkt") (lib "postfix-dot-notation/main.rkt") (lib "postfix-dot-notation/lang/language-info.rkt") (lib "postfix-dot-notation/top-utils.rkt"))) (name . "postfix-dot-notation") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (lang-extension . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/AlexKnauth/postfix-dot-notation") (tags . ("lang-extension" "syntax")) (versions . #hash((default . #hasheq((checksum . "584ed69de73775e261ecdb7607fc14d9790500ef") (source . "git://github.com/AlexKnauth/postfix-dot-notation") (source_url . "http://github.com/AlexKnauth/postfix-dot-notation/tree/master"))))))) ("postmark" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "postmark" "doc/postmark@postmark/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/postmark.txt") (test-failure-log . "server/built/test-fail/postmark.txt") (test-success-log . #f))) (checksum . "6204838d15c5de48389a2a45ee9158493cc76bc8") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A front-end for the Postmark email delivery service API") (implies . ()) (last-checked . 1632904356) (last-edit . 1447189734) (last-updated . 1502816324) (modules . ((lib "postmark/postmark.scrbl") (lib "postmark/main.rkt"))) (name . "postmark") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (email . #t) (ring:1 . #t))) (source . "git://github.com/jbclements/postmark") (tags . ("email")) (versions . #hash((default . #hasheq((checksum . "6204838d15c5de48389a2a45ee9158493cc76bc8") (source . "git://github.com/jbclements/postmark") (source_url . "http://github.com/jbclements/postmark/tree/master"))))))) ("postmark-client" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "postmark" "doc/postmark@postmark-client/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/postmark-client.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/postmark-client.txt"))) (checksum . "163b4e1344c3c402a7ccc9436f0c3123c837b824") (checksum-error . #f) (collection . "postmark") (conflicts . ("postmark")) (date-added . 1548416613) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib" "web-server-lib")) (description . "A client for the Postmark HTTP API.") (implies . ()) (last-checked . 1632904356) (last-edit . 1548418176) (last-updated . 1584274194) (modules . ((lib "postmark/tests.rkt") (lib "postmark/postmark.scrbl") (lib "postmark/main.rkt"))) (name . "postmark-client") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (email . #t) (ring:2 . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-postmark.git?path=postmark") (tags . ("email" "web")) (versions . #hash((default . #hasheq((checksum . "163b4e1344c3c402a7ccc9436f0c3123c837b824") (source . "https://github.com/Bogdanp/racket-postmark.git?path=postmark") (source_url . "https://github.com/Bogdanp/racket-postmark.git?path=postmark"))))))) ("postnet" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "postnet" "doc/postnet@postnet/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/postnet.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/postnet.txt"))) (checksum . "b8a714b8cedd168925c6e1de8dd7cb80fd5391da") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "USPS POSTNET Barcode Encoding") (implies . ()) (last-checked . 1632904356) (last-edit . 1456651795) (last-updated . 1594059577) (modules . ((lib "postnet/postnet.scrbl") (lib "postnet/main.rkt"))) (name . "postnet") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/postnet.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b8a714b8cedd168925c6e1de8dd7cb80fd5391da") (source . "http://www.neilvandyke.org/racket/postnet.zip") (source_url . "http://www.neilvandyke.org/racket/postnet.zip"))))))) ("power-struct" . #hasheq((author . "macocio@gmail.com") (authors . ("macocio@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "power-struct" "doc/power-struct@power-struct/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/power-struct.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/power-struct.txt"))) (checksum . "cb9c521b8d1047d9d60a688b278dee61b301b975") (checksum-error . #f) (collection . "power-struct") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Structure macro that easily defines a tagged default struct.") (implies . ()) (last-checked . 1632904357) (last-edit . 1534612973) (last-updated . 1534618580) (modules . ((lib "power-struct/scribblings/power-struct.scrbl") (lib "power-struct/main.rkt"))) (name . "power-struct") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:macocio@gmail.com . #t) (ring:1 . #t) (structs . #t))) (source . "https://github.com/BourgondAries/power-struct.git") (tags . ("structs")) (versions . #hash((default . #hasheq((checksum . "cb9c521b8d1047d9d60a688b278dee61b301b975") (source . "https://github.com/BourgondAries/power-struct.git") (source_url . "https://github.com/BourgondAries/power-struct.git"))))))) ("ppict" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ppict" "doc/ppict@ppict/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ppict.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ppict.txt"))) (checksum . "5d2d5f9d0a10f0988c7ed1f1986a0a6a15dcdb77") (checksum-error . #f) (collection . "ppict") (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "pict-lib" "slideshow-lib" "racket-doc" "scribble-lib" "pict-doc" "slideshow-doc")) (description . "progressive picts and slideshows") (implies . ()) (last-checked . 1632904357) (last-edit . 1435182981) (last-updated . 1539897346) (modules . ((lib "ppict/ppict.scrbl") (lib "ppict/private/ppict.rkt") (lib "ppict/slideshow.rkt") (lib "ppict/private/tag-pict.rkt") (lib "ppict/private/ppict-syntax.rkt") (lib "ppict/tag.rkt") (lib "ppict/slideshow2.rkt") (lib "ppict/main.rkt") (lib "ppict/2.rkt") (lib "ppict/pict.rkt") (lib "ppict/align.rkt") (lib "ppict/private/tag-pict-regions-gui.rkt"))) (name . "ppict") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (graphics . #t) (ring:1 . #t) (slideshow . #t))) (source . "git://github.com/rmculpepper/ppict") (tags . ("graphics" "slideshow")) (versions . #hash((default . #hasheq((checksum . "5d2d5f9d0a10f0988c7ed1f1986a0a6a15dcdb77") (source . "git://github.com/rmculpepper/ppict") (source_url . "http://github.com/rmculpepper/ppict/tree/master"))))))) ("ppict-slide-grid" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ppict-slide-grid.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ppict-slide-grid.txt"))) (checksum . "1e992183dbfc695882bb612bb5b8b32515adeee2") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "pict-lib" "slideshow-lib" "unstable-lib")) (description . "") (implies . ()) (last-checked . 1632904358) (last-edit . 1399745264) (last-updated . 1502816326) (modules . ((lib "ppict-slide-grid/main.rkt"))) (name . "ppict-slide-grid") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t) (slideshow . #t))) (source . "git://github.com/takikawa/ppict-slide-grid") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "1e992183dbfc695882bb612bb5b8b32515adeee2") (source . "git://github.com/takikawa/ppict-slide-grid") (source_url . "http://github.com/takikawa/ppict-slide-grid/tree/master"))))))) ("pprint" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pprint" "doc/pprint@pprint/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pprint.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pprint.txt"))) (checksum . "f078284e092f98c5c15278b334f9b5b32828e9b6") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "dherman-struct" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "A universal pretty printing library") (implies . ()) (last-checked . 1632904358) (last-edit . 1504809561) (last-updated . 1624656983) (modules . ((lib "pprint/main.rkt") (lib "pprint/tests.rkt") (lib "pprint/haskell.rkt") (lib "pprint/pprint.scrbl"))) (name . "pprint") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (io . #t) (printing . #t) (ring:1 . #t))) (source . "git://github.com/takikawa/pprint.plt") (tags . ("io" "printing")) (versions . #hash((default . #hasheq((checksum . "f078284e092f98c5c15278b334f9b5b32828e9b6") (source . "git://github.com/takikawa/pprint.plt") (source_url . "http://github.com/takikawa/pprint.plt/tree/master"))))))) ("pprint-compact" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "3b632c6366542128306d0b38eba57be167a8c9ea") (checksum-error . #f) (collection . "pprint-compact") (conflicts . ()) (date-added . 1632273373) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A non-greedy pretty printer") (implies . ()) (last-checked . 1632904359) (last-edit . 1632273373) (last-updated . 1632825002) (modules . ((lib "pprint-compact/memoize.rkt") (lib "pprint-compact/scribblings/pprint-compact.scrbl") (lib "pprint-compact/main.rkt") (lib "pprint-compact/process.rkt") (lib "pprint-compact/core.rkt") (lib "pprint-compact/debug.rkt") (lib "pprint-compact/addons.rkt"))) (name . "pprint-compact") (ring . 1) (search-terms . #hasheq((author:sorawee.pwase@gmail.com . #t) (io . #t) (printing . #t) (ring:1 . #t))) (source . "https://github.com/sorawee/pprint-compact.git") (tags . ("io" "printing")) (versions . #hash((default . #hasheq((checksum . "3b632c6366542128306d0b38eba57be167a8c9ea") (source . "https://github.com/sorawee/pprint-compact.git") (source_url . "https://github.com/sorawee/pprint-compact.git"))))))) ("predicates" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "predicates" "doc/predicates@predicates/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/predicates.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/predicates.txt"))) (checksum . "ba6b82864a6bdb2b0aa42d3a493effe54d44e4e1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "Deprecated. A library for constructing predicates in a point-free style. Unmaintained, and racket/function now supplies functions that make parts of this unnecessary.") (implies . ()) (last-checked . 1632904359) (last-edit . 1500077255) (last-updated . 1502816326) (modules . ((lib "predicates/conditional.rkt") (lib "predicates/contract-helpers.rkt") (lib "predicates/main.rkt") (lib "predicates/comparison.rkt") (lib "predicates/predicates.scrbl") (lib "predicates/test-helpers.rkt") (lib "predicates/list.rkt") (lib "predicates/logic.rkt"))) (name . "predicates") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (deprecated . #t) (functional . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/predicates") (tags . ("deprecated" "functional")) (versions . #hash((default . #hasheq((checksum . "ba6b82864a6bdb2b0aa42d3a493effe54d44e4e1") (source . "git://github.com/jackfirth/predicates") (source_url . "http://github.com/jackfirth/predicates/tree/master"))))))) ("prefab-predicate-compat" . #hasheq((author . "pnwamk@gmail.com") (authors . ("pnwamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/prefab-predicate-compat.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "7c6cc40738062f336839b1f63e9b9ceb2a80071a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Provides `define-backwards-compatible-flat-prefab-predicate`which is like `define-predicate` but allows for backwards compatible prefab predicate declarations.") (implies . ()) (last-checked . 1632904360) (last-edit . 1527017470) (last-updated . 1527022321) (modules . ((lib "prefab-predicate-compat/main.rkt"))) (name . "prefab-predicate-compat") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:pnwamk@gmail.com . #t) (prefab . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/pnwamk/prefab-predicate-compat.git") (tags . ("prefab" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "7c6cc40738062f336839b1f63e9b9ceb2a80071a") (source . "https://github.com/pnwamk/prefab-predicate-compat.git") (source_url . "https://github.com/pnwamk/prefab-predicate-compat.git"))))))) ("preprocessor" . #hash((author . "eli@racket-lang.org") (authors . ("eli@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "preprocessor" "doc/preprocessor@preprocessor/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "preprocessor") (conflicts . ()) (dependencies . ("scheme-lib" "base" "compatibility-lib" "racket-doc" "scribble-lib")) (description . "Preprocessors for text with embedded Racket code (mostly replaced by scribble/text)") (implies . ()) (last-checked . 1632904360) (last-edit . 1417447869) (last-updated . 1571880295) (modules . ((lib "preprocessor/scribblings/mzpp.scrbl") (lib "preprocessor/mzpp-run.rkt") (lib "preprocessor/mztext.rkt") (lib "preprocessor/mzpp.rkt") (lib "preprocessor/mztext-run.rkt") (lib "preprocessor/scribblings/mztext.scrbl") (lib "preprocessor/pp-utils.rkt") (lib "preprocessor/scribblings/preprocessor.scrbl") (lib "preprocessor/pp-run.rkt"))) (name . "preprocessor") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:eli@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "2739013da77cb4438aa194cf730fa498f272dc66") (source . "git://github.com/racket/preprocessor") (source_url . "http://github.com/racket/preprocessor/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("preserves" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/preserves.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "1b4064b17c46d82c3f0c88a601bac22b8bc013c4") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1621157765) (dependencies . ("base" "rackunit-lib" "data-lib")) (description . "Preserves is a new data model and serialization format in many ways comparable to JSON, XML, S-expressions, CBOR, ASN.1 BER, and so on.") (implies . ()) (last-checked . 1632904360) (last-edit . 1621627282) (last-updated . 1632565749) (modules . ((lib "preserves-schema/metaschema.rkt") (lib "preserves/tool.rkt") (lib "preserves-schema/parser.rkt") (lib "preserves/embedded.rkt") (lib "preserves/varint.rkt") (lib "preserves/float.rkt") (lib "preserves-schema/methods.rkt") (lib "preserves-schema/type.rkt") (lib "preserves-schema/checker.rkt") (lib "preserves/object-id.rkt") (lib "preserves/struct.rkt") (lib "preserves/tests/test-main.rkt") (lib "preserves/annotation.rkt") (lib "preserves-schema/main.rkt") (lib "preserves-schema/unparser.rkt") (lib "preserves/read-text.rkt") (lib "preserves/jelly.rkt") (lib "preserves/main.rkt") (lib "preserves-schema/bin/preserves-schema-rkt.rkt") (lib "preserves-schema/support.rkt") (lib "preserves-schema/gen/schema.rkt") (lib "preserves-schema/reader.rkt") (lib "preserves/read-binary.rkt") (lib "preserves/write-text.rkt") (lib "preserves-schema/compiler.rkt") (lib "preserves/write-binary.rkt") (lib "preserves/order.rkt") (lib "preserves/record.rkt"))) (name . "preserves") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:tonygarnockjones@gmail.com . #t) (data . #t) (preserves . #t) (ring:1 . #t) (schema . #t) (serialization . #t))) (source . "https://gitlab.com/preserves/preserves.git?path=implementations%2Fracket%2Fpreserves#main") (tags . ("data" "preserves" "schema" "serialization")) (versions . #hash((default . #hasheq((checksum . "1b4064b17c46d82c3f0c88a601bac22b8bc013c4") (source . "https://gitlab.com/preserves/preserves.git?path=implementations%2Fracket%2Fpreserves#main") (source_url . "https://gitlab.com/preserves/preserves.git?path=implementations%2Fracket%2Fpreserves#main"))))))) ("pretty-format" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pretty-format" "doc/pretty-format@pretty-format/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pretty-format.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pretty-format.txt"))) (checksum . "f3c82271fe92e8414d203087727a73543465d27e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.0.0.4") "typed-racket-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Pretty versions of printf, format, etc. that print according to format strings") (implies . ()) (last-checked . 1632904360) (last-edit . 1519447631) (last-updated . 1601516190) (modules . ((lib "typed/pretty-format.rkt") (lib "pretty-format/scribblings/pretty-format.scrbl") (lib "pretty-format/main.rkt"))) (name . "pretty-format") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (io . #t) (printing . #t) (ring:1 . #t))) (source . "https://github.com/AlexKnauth/pretty-format.git") (tags . ("io" "printing")) (versions . #hash((default . #hasheq((checksum . "f3c82271fe92e8414d203087727a73543465d27e") (source . "https://github.com/AlexKnauth/pretty-format.git") (source_url . "https://github.com/AlexKnauth/pretty-format.git"))))))) ("pretty-graphs" . #hasheq((author . "vincentnys@gmail.com") (authors . ("vincentnys@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "pretty-graphs"))) (failure-log . "server/built/fail/pretty-graphs.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "a525fdc779e745b222b9e3d495c9f525290fd4cc") (checksum-error . #f) (collection . "pretty-graphs") (conflicts . ()) (dependencies . ("base" "at-exp-lib" "graph" "pict-doc" "pict-lib" "scribble-lib" "racket-doc")) (description . "For visualizing generic graphs as picts.") (implies . ()) (last-checked . 1632904360) (last-edit . 1506329324) (last-updated . 1512580073) (modules . ((lib "pretty-graphs/main.rkt") (lib "pretty-graphs/scribblings/pretty-graphs.scrbl"))) (name . "pretty-graphs") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:vincentnys@gmail.com . #t) (graph . #t) (pict . #t) (ring:1 . #t) (visualization . #t))) (source . "git://github.com/v-nys/pretty-graphs") (tags . ("graph" "pict" "visualization")) (versions . #hash((default . #hasheq((checksum . "a525fdc779e745b222b9e3d495c9f525290fd4cc") (source . "git://github.com/v-nys/pretty-graphs") (source_url . "http://github.com/v-nys/pretty-graphs/tree/master"))))))) ("print-dbg" . #hasheq((author . "") (authors . ()) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/print-dbg.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Package print-dbg is missing a required field: 'source\n  context...:\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (implies . ()) (last-checked . 1632904361) (last-edit . 1632906423) (last-updated . 1621814973) (modules . ()) (name . "print-dbg") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (ring:1 . #t))) (source . "") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "") (source_url . ""))))))) ("print-debug" . #hasheq((author . "aldis.sarja@gmail.com") (authors . ("aldis.sarja@gmail.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . "server/built/deps/print-debug.txt") (docs . (("extract" "manual" "doc/manual@print-debug/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/print-debug.txt") (test-failure-log . "server/built/test-fail/print-debug.txt") (test-success-log . #f))) (checksum . "39fa9a7ad50099115841e1c05d7c65a4d4f8df4a") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1552409005) (dependencies . ()) (description . "Debugging tool. Use for debug printing variables and expresions.") (implies . ()) (last-checked . 1632904361) (last-edit . 1552478773) (last-updated . 1561558397) (modules . ((lib "print-debug/print-dbg.rkt") (lib "print-debug/manual.scrbl"))) (name . "print-debug") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (author:aldis.sarja@gmail.com . #t) (debug . #t) (debugging . #t) (ring:1 . #t))) (source . "https://github.com/aldis-sarja/print-debug.git") (tags . ("debug" "debugging")) (versions . #hash((default . #hasheq((checksum . "39fa9a7ad50099115841e1c05d7c65a4d4f8df4a") (source . "https://github.com/aldis-sarja/print-debug.git") (source_url . "https://github.com/aldis-sarja/print-debug.git"))))))) ("private-in" . #hasheq((author . "camoy@ccs.neu.edu") (authors . ("camoy@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "private-in" "doc/private-in@private-in/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/private-in.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/private-in.txt"))) (checksum . "d8a8105a70c8940f6a156dc68d035abbcdd2fe08") (checksum-error . #f) (collection . "private-in") (conflicts . ()) (date-added . 1597184149) (dependencies . ("base" "chk-lib" "rackunit-doc" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Require private bindings.") (implies . ()) (last-checked . 1632904361) (last-edit . 1597424300) (last-updated . 1597477594) (modules . ((lib "private-in/main.rkt") (lib "private-in/scribblings/private-in.scrbl") (lib "private-in/test/mod.rkt"))) (name . "private-in") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:camoy@ccs.neu.edu . #t) (require . #t) (ring:1 . #t))) (source . "https://github.com/camoy/private-in.git") (tags . ("require")) (versions . #hash((default . #hasheq((checksum . "d8a8105a70c8940f6a156dc68d035abbcdd2fe08") (source . "https://github.com/camoy/private-in.git") (source_url . "https://github.com/camoy/private-in.git"))))))) ("profile" . #hash((author . "eli@racket-lang.org") (authors . ("eli@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("profile-lib" "profile-doc")) (description . "Libraries for statistical performance profiling") (implies . ("profile-lib" "profile-doc")) (last-checked . 1632904362) (last-edit . 1417659583) (last-updated . 1610296540) (modules . ()) (name . "profile") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "c89119e01810972d8debe352f17c4950a3457020") (source . "git://github.com/racket/profile/?path=profile") (source_url . "git://github.com/racket/profile/?path=profile"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("profile-doc" . #hash((author . "eli@racket-lang.org") (authors . ("eli@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "profile" "doc/profile@profile-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "profile-lib" "errortrace-doc" "errortrace-lib" "racket-doc")) (description . "documentation part of profile") (implies . ()) (last-checked . 1632904362) (last-edit . 1417659583) (last-updated . 1610296541) (modules . ((lib "profile/scribblings/analyzer.scrbl") (lib "profile/scribblings/sampler.scrbl") (lib "profile/scribblings/profile.scrbl") (lib "profile/scribblings/toplevel.scrbl") (lib "profile/scribblings/renderers.scrbl"))) (name . "profile-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:eli@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "c89119e01810972d8debe352f17c4950a3457020") (source . "git://github.com/racket/profile/?path=profile-doc") (source_url . "git://github.com/racket/profile/?path=profile-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("profile-flame-graph" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "profile-flame-graph" "doc/profile-flame-graph@profile-flame-graph/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/profile-flame-graph.txt") (test-failure-log . "server/built/test-fail/profile-flame-graph.txt") (test-success-log . #f))) (checksum . "1364a084256765800e83d93b0db23b2cc801d161") (checksum-error . #f) (collection . "profile-flame-graph") (conflicts . ()) (dependencies . ("base" "pict" "profile-lib" "net-lib" "data-lib" "scribble-lib" "racket-doc" "profile-doc" "net-doc")) (description . "Library that connects the Racket profiler to the flamegraph tool") (implies . ()) (last-checked . 1632904362) (last-edit . 1477803994) (last-updated . 1512155278) (modules . ((lib "profile-flame-graph/profile.rkt") (lib "profile-flame-graph/main.rkt") (lib "profile-flame-graph/flame-graph.rkt") (lib "profile-flame-graph/examples/fizzbuzz-example.rkt") (lib "profile-flame-graph/examples/scribble-example.rkt") (lib "profile-flame-graph/profile-flame-graph.scrbl"))) (name . "profile-flame-graph") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (profiling . #t) (ring:1 . #t))) (source . "git://github.com/takikawa/racket-profile-flamegraph") (tags . ("profiling")) (versions . #hash((default . #hasheq((checksum . "1364a084256765800e83d93b0db23b2cc801d161") (source . "git://github.com/takikawa/racket-profile-flamegraph") (source_url . "http://github.com/takikawa/racket-profile-flamegraph/tree/master"))))))) ("profile-lib" . #hash((author . "eli@racket-lang.org stamourv@racket-lang.org") (authors . ("eli@racket-lang.org" "stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "profile") (conflicts . ()) (dependencies . ("base" "errortrace-lib" "at-exp-lib" "rackunit-lib")) (description . "implementation (no documentation) part of profile") (implies . ()) (last-checked . 1632904362) (last-edit . 1417659583) (last-updated . 1610296541) (modules . ((lib "profile/render-text.rkt") (lib "profile/analyzer.rkt") (lib "profile/main.rkt") (lib "profile/raco.rkt") (lib "profile/render-graphviz.rkt") (lib "profile/utils.rkt") (lib "profile/render-json.rkt") (lib "profile/structs.rkt") (lib "profile/sampler.rkt") (lib "profile/raco-utils.rkt"))) (name . "profile-lib") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (author:stamourv@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "c89119e01810972d8debe352f17c4950a3457020") (source . "git://github.com/racket/profile/?path=profile-lib") (source_url . "git://github.com/racket/profile/?path=profile-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("profile-test" . #hash((author . "eli@racket-lang.org") (authors . ("eli@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "eli-tester" "profile-lib")) (description . "tests for profile") (implies . ()) (last-checked . 1632904363) (last-edit . 1417659583) (last-updated . 1610296542) (modules . ((lib "tests/profile/main.rkt") (lib "tests/profile/analyze.rkt") (lib "tests/profile/topsort.rkt"))) (name . "profile-test") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "c89119e01810972d8debe352f17c4950a3457020") (source . "git://github.com/racket/profile/?path=profile-test") (source_url . "git://github.com/racket/profile/?path=profile-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("profj" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "htdc" "doc/htdc@profj/index.html") ("main" "profj" "doc/profj@profj/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/profj.txt") (test-failure-log . "server/built/test-fail/profj.txt") (test-success-log . #f))) (checksum . "cf2a5bd0c3243b4dd3a72093ae5eee8e8291a41d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("combinator-parser" "base" "compatibility-lib" "drracket-plugin-lib" "errortrace-lib" "gui-lib" "htdp-lib" "parser-tools-lib" "scheme-lib" "srfi-lite-lib" "string-constants-lib" "scribble-lib" "racket-doc")) (description . "ProfessorJ") (implies . ()) (last-checked . 1632904363) (last-edit . 1368288397) (last-updated . 1606849712) (modules . ((lib "profj/intermediate+access.rkt") (lib "profj/ast.rkt") (lib "profj/build-info.rkt") (lib "profj/analysis.rkt") (lib "profj/htdch/graphics/rename.rkt") (lib "profj/parser.rkt") (lib "profj/language.rkt") (lib "profj/parsers/parse-error.rkt") (lib "profj/libs/java/lang/ClassCastException.rkt") (lib "profj/libs/java/lang/Double-native-methods.rkt") (lib "profj/dynamic.rkt") (lib "profj/tests/advanced-tests.rkt") (lib "profj/htdch/draw/World-native-methods.rkt") (lib "profj/restrictions.rkt") (lib "profj/libs/java/tester/installer.rkt") (lib "profj/check.rkt") (lib "profj/tests/profj-testing.rkt") (lib "profj/htdch/idraw/World-native-methods.rkt") (lib "profj/libs/java/lang/RuntimeException.rkt") (lib "profj/installer.rkt") (lib "profj/libs/java/lang/mz.rkt") (lib "profj/htdch/Examples/iblink-java.rkt") (lib "profj/htdch/draw/installer.rkt") (lib "profj/libs/java/lang/array.rkt") (lib "profj/libs/java/lang/Exception.rkt") (lib "profj/libs/java/lang/ArithmeticException.rkt") (lib "profj/error-messaging.rkt") (lib "profj/scribblings/java-scribble.rkt") (lib "profj/htdch/draw/Canvas-native-methods.rkt") (lib "profj/libs/java/runtime.rkt") (lib "profj/libs/java/util/installer.rkt") (lib "profj/libs/java/lang/IndexOutOfBoundsException.rkt") (lib "profj/tests/all-tests.rkt") (lib "profj/parsers/general-parsing.rkt") (lib "profj/libs/java/lang/ArrayStoreException.rkt") (lib "profj/libs/java/lang/ArrayIndexOutOfBoundsException.rkt") (lib "profj/graph-scc.rkt") (lib "profj/parsers/full-parser.rkt") (lib "profj/htdch/idraw/Canvas-native-methods.rkt") (lib "profj/libs/java/io/installer.rkt") (lib "profj/types.rkt") (lib "profj/libs/java/lang/String.rkt") (lib "profj/advanced.rkt") (lib "profj/scribblings/htdc.scrbl") (lib "profj/to-scheme.rkt") (lib "profj/parsers/advanced-parser.rkt") (lib "profj/scribblings/beginner.scrbl") (lib "profj/libs/java/lang/Comparable.rkt") (lib "profj/htdch/geometry/installer.rkt") (lib "profj/compile.rkt") (lib "profj/parameters.rkt") (lib "profj/htdch/draw/pre-installer.rkt") (lib "profj/htdch/Examples/blink-java.rkt") (lib "profj/textbook-pls-spec.rkt") (lib "profj/display-java.rkt") (lib "profj/htdch/graphics/installer.rkt") (lib "profj/full.rkt") (lib "profj/tests/full-tests.rkt") (lib "profj/libs/java/lang/Throwable.rkt") (lib "profj/libs/java/lang/Object-composite.rkt") (lib "profj/pre-installer.rkt") (lib "profj/htdch/idraw/pre-installer.rkt") (lib "profj/intermediate.rkt") (lib "profj/parsers/beginner-parser.rkt") (lib "profj/scribblings/profj.scrbl") (lib "profj/libs/java/lang/installer.rkt") (lib "profj/libs/java/lang/Math-native-methods.rkt") (lib "profj/libs/java/lang/Object.rkt") (lib "profj/parsers/intermediate-parser.rkt") (lib "profj/tests/beginner-tests.rkt") (lib "profj/libs/java/lang/compile-lang-syntax.rkt") (lib "profj/parsers/intermediate-access-parser.rkt") (lib "profj/profj-pref.rkt") (lib "profj/beginner.rkt") (lib "profj/parsers/lexer.rkt") (lib "profj/htdch/colors/installer.rkt") (lib "profj/libs/java/io/Serializable.rkt") (lib "profj/scribblings/intermediate-access.scrbl") (lib "profj/libs/java/lang/NegativeArraySizeException.rkt") (lib "profj/scribblings/advanced.scrbl") (lib "profj/tests/intermediate-tests.rkt") (lib "profj/libs/java/lang/System-native-methods.rkt") (lib "profj/htdch/idraw/installer.rkt") (lib "profj/scribblings/intermediate.scrbl") (lib "profj/tool.rkt") (lib "profj/libs/java/lang/compile-lang.rkt") (lib "profj/libs/java/lang/NullPointerException.rkt"))) (name . "profj") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (language . #t) (ring:1 . #t))) (source . "github://github.com/mflatt/profj/master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "cf2a5bd0c3243b4dd3a72093ae5eee8e8291a41d") (source . "github://github.com/mflatt/profj/master") (source_url . "http://github.com/mflatt/profj/tree/master"))))))) ("progedit" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "progedit" "doc/progedit@progedit/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/progedit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/progedit.txt"))) (checksum . "28f6ce349a1173812a3efd1c95edb569c46e43f7") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Programmatic File Editing") (implies . ()) (last-checked . 1632904363) (last-edit . 1456463405) (last-updated . 1594059585) (modules . ((lib "progedit/progedit.scrbl") (lib "progedit/main.rkt"))) (name . "progedit") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (editor . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/progedit.zip") (tags . ("editor")) (versions . #hash((default . #hasheq((checksum . "28f6ce349a1173812a3efd1c95edb569c46e43f7") (source . "http://www.neilvandyke.org/racket/progedit.zip") (source_url . "http://www.neilvandyke.org/racket/progedit.zip"))))))) ("protobj" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "protobj" "doc/protobj@protobj/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/protobj.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/protobj.txt"))) (checksum . "4e2755403b30e7746fa4ffe4688ba37c11bd2eb5") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "compatibility-lib" "srfi-lib" "overeasy" "racket-doc" "scribble-lib")) (description . "Prototype-Delegation Object Model") (implies . ()) (last-checked . 1632904364) (last-edit . 1456786908) (last-updated . 1594059589) (modules . ((lib "protobj/main.rkt") (lib "protobj/protobj.scrbl"))) (name . "protobj") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/protobj.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4e2755403b30e7746fa4ffe4688ba37c11bd2eb5") (source . "http://www.neilvandyke.org/racket/protobj.zip") (source_url . "http://www.neilvandyke.org/racket/protobj.zip"))))))) ("protobuf" . #hasheq((author . "chust@web.de") (authors . ("chust@web.de")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "generator" "doc/generator@protobuf/index.html") ("main" "main" "doc/main@protobuf/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/protobuf.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/protobuf.txt"))) (checksum . "2b1006f0a15e36b9dc663bccc55d7ec241ff53d0") (checksum-error . #f) (collection . "protobuf") (conflicts . ()) (date-added . 1556568038) (dependencies . ("base" "srfi-lib" "srfi-lite-lib" "racket-doc" "scribble-lib")) (description . "Protocol Buffer serialization library and ProtoC code generator plugin") (implies . ()) (last-checked . 1632904365) (last-edit . 1598998503) (last-updated . 1620026778) (modules . ((lib "protobuf/scribblings/license.scrbl") (lib "protobuf/google/protobuf/descriptor.rkt") (lib "protobuf/scribblings/reflection.scrbl") (lib "protobuf/generator.rkt") (lib "protobuf/scribblings/syntax.scrbl") (lib "protobuf/encoding.rkt") (lib "protobuf/scribblings/main.scrbl") (lib "protobuf/syntax.rkt") (lib "protobuf/extend/protobuf/bigint.rkt") (lib "protobuf/main.rkt") (lib "protobuf/reflection.rkt") (lib "protobuf/google/protobuf/compiler/plugin.rkt") (lib "protobuf/scribblings/generator.scrbl") (lib "protobuf/scribblings/encoding.scrbl"))) (name . "protobuf") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:chust@web.de . #t) (io . #t) (net . #t) (ring:1 . #t))) (source . "https://chust.org/repos/racket-protobuf/uv/protobuf-1.1.3.zip") (tags . ("io" "net")) (versions . #hash((default . #hasheq((checksum . "2b1006f0a15e36b9dc663bccc55d7ec241ff53d0") (source . "https://chust.org/repos/racket-protobuf/uv/protobuf-1.1.3.zip") (source_url . "https://chust.org/repos/racket-protobuf/uv/protobuf-1.1.3.zip"))) ("1.1.1" . #hasheq((checksum . "264bacd08a0f73906fbfbdfe6962f576cca82ec8") (source . "https://chust.org/repos/racket-protobuf/uv/protobuf-1.1.1.zip") (source_url . "https://chust.org/repos/racket-protobuf/uv/protobuf-1.1.1.zip"))) ("1.1.2" . #hasheq((checksum . "e3cff6f35e23ab879064126de7b37c20dfb26f57") (source . "https://chust.org/repos/racket-protobuf/uv/protobuf-1.1.2.zip") (source_url . "https://chust.org/repos/racket-protobuf/uv/protobuf-1.1.2.zip"))) ("1.1.3" . #hasheq((checksum . "2b1006f0a15e36b9dc663bccc55d7ec241ff53d0") (source . "https://chust.org/repos/racket-protobuf/uv/protobuf-1.1.3.zip") (source_url . "https://chust.org/repos/racket-protobuf/uv/protobuf-1.1.3.zip"))))))) ("psd" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "psd"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/psd.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/psd.txt"))) (checksum . "73b16a52e0777250d02e977f7dcbd7c1d98ef772") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "draw-lib" "scribble-lib" "racket-doc")) (description . "Read (and will write) Photoshop Documents") (implies . ()) (last-checked . 1632904369) (last-edit . 1500119085) (last-updated . 1531745110) (modules . ((lib "psd/digitama/resources/id1036.rkt") (lib "psd/digitama/resources/id1023.rkt") (lib "psd/tamer/psd.rkt") (lib "psd/digitama/resources/id1028.rkt") (lib "psd/base.rkt") (lib "psd/layer.rkt") (lib "psd/digitama/layer/blocks/txt2.rkt") (lib "psd/digitama/resources/format.rkt") (lib "psd/digitama/resources/id1002.rkt") (lib "psd/profile.rkt") (lib "psd/digitama/layer/bitmap.rkt") (lib "psd/tamer/psd.scrbl") (lib "psd/digitama/resources/id1060.rkt") (lib "psd/digitama/resources/id1011.rkt") (lib "psd/main.rkt") (lib "psd/digitama/resources/id1057.rkt") (lib "psd/digitama/resources/id1003.rkt") (lib "psd/digitama/layer/blocks/lyid.rkt") (lib "psd/digitama/resource.rkt") (lib "psd/tamer/packbits.rkt") (lib "psd/digitama/resources/id1007.rkt") (lib "psd/digitama/stdin.rkt") (lib "psd/village/packbits.rkt") (lib "psd/digitama/draw.rkt") (lib "psd/digitama/exn.rkt") (lib "psd/digitama/parser.rkt") (lib "psd/digitama/unsafe/bitmap.rkt") (lib "psd/digitama/layer/parser.rkt") (lib "psd/digitama/unsafe/resource.rkt") (lib "psd/digitama/image.rkt") (lib "psd/digitama/psd.rkt") (lib "psd/digitama/resources/id1032.rkt") (lib "psd/digitama/resources/id1027.rkt") (lib "psd/digitama/layer/blocks/luni.rkt") (lib "psd/digitama/unsafe/layer.rkt") (lib "psd/digitama/misc.rkt") (lib "psd/digitama/bitmap.rkt") (lib "psd/digitama/resources/id1077.rkt") (lib "psd/digitama/layer.rkt") (lib "psd/digitama/resources/id1020.rkt") (lib "psd/digitama/layer/format.rkt") (lib "psd/digitama/integer.rkt") (lib "psd/digitama/resources/id1000.rkt") (lib "psd/digitama/layer/blocks/lsct.rkt"))) (name . "psd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs-error: . #t) (author:juzhenliang@gmail.com . #t) (bitmap . #t) (file . #t) (parser . #t) (photoshop . #t) (ring:1 . #t) (typed-racket . #t) (unstable . #t))) (source . "git://github.com/wargrey/psd") (tags . ("bitmap" "file" "parser" "photoshop" "typed-racket" "unstable")) (versions . #hash((default . #hasheq((checksum . "73b16a52e0777250d02e977f7dcbd7c1d98ef772") (source . "git://github.com/wargrey/psd") (source_url . "http://github.com/wargrey/psd/tree/master"))))))) ("punctaffy" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/punctaffy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/punctaffy.txt"))) (checksum . "06ff449b11f50788f7b6267ade01b51e8e5274e7") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614043112) (dependencies . ("punctaffy-doc" "punctaffy-lib")) (description . "A library for working with higher-dimensional brackets, such as quasiquotation syntax.") (implies . ("punctaffy-doc" "punctaffy-lib")) (last-checked . 1632904369) (last-edit . 1615519485) (last-updated . 1631928741) (modules . ()) (name . "punctaffy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (experimental . #t) (extensible . #t) (lathe . #t) (macro . #t) (quasiquotation . #t) (ring:1 . #t) (syntax . #t) (unstable . #t))) (source . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy#main") (tags . ("experimental" "extensible" "lathe" "macro" "quasiquotation" "syntax" "unstable")) (versions . #hash((default . #hasheq((checksum . "06ff449b11f50788f7b6267ade01b51e8e5274e7") (source . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy#main") (source_url . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy#main"))))))) ("punctaffy-doc" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "punctaffy" "doc/punctaffy@punctaffy-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/punctaffy-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/punctaffy-doc.txt"))) (checksum . "06ff449b11f50788f7b6267ade01b51e8e5274e7") (checksum-error . #f) (collection . "punctaffy") (conflicts . ()) (date-added . 1603004787) (dependencies . ("base" "at-exp-lib" "brag" "lathe-comforts-doc" "lathe-comforts-lib" "lathe-morphisms-doc" "lathe-morphisms-lib" "net-doc" "parendown-doc" "parendown-lib" "punctaffy-lib" "racket-doc" "ragg" "scribble-lib")) (description . "A library for working with higher-dimensional brackets, such as quasiquotation syntax. (doc)") (implies . ()) (last-checked . 1632904369) (last-edit . 1615519471) (last-updated . 1631928742) (modules . ((lib "punctaffy/scribblings/private/shim.rkt") (lib "punctaffy/scribblings/punctaffy/hypersnippet.scrbl") (lib "punctaffy/scribblings/punctaffy/hyperbracketed-util.scrbl") (lib "punctaffy/scribblings/punctaffy/intro.scrbl") (lib "punctaffy/scribblings/punctaffy/defining-hyperbracket.scrbl") (lib "punctaffy/scribblings/punctaffy.scrbl") (lib "punctaffy/scribblings/punctaffy/motivation.scrbl") (lib "punctaffy/scribblings/punctaffy/baseline-hyperbracket.scrbl"))) (name . "punctaffy-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:rokitna@hotmail.com . #t) (experimental . #t) (extensible . #t) (lathe . #t) (macro . #t) (quasiquotation . #t) (ring:1 . #t) (syntax . #t) (unstable . #t))) (source . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy-doc#main") (tags . ("experimental" "extensible" "lathe" "macro" "quasiquotation" "syntax" "unstable")) (versions . #hash((default . #hasheq((checksum . "06ff449b11f50788f7b6267ade01b51e8e5274e7") (source . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy-doc#main") (source_url . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy-doc#main"))))))) ("punctaffy-lib" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/punctaffy-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/punctaffy-lib.txt"))) (checksum . "06ff449b11f50788f7b6267ade01b51e8e5274e7") (checksum-error . #f) (collection . "punctaffy") (conflicts . ()) (date-added . 1614043167) (dependencies . ("base" "lathe-comforts-lib" "lathe-morphisms-lib" "parendown-lib")) (description . "A library for working with higher-dimensional brackets, such as quasiquotation syntax. (lib)") (implies . ()) (last-checked . 1632904369) (last-edit . 1615519458) (last-updated . 1631928743) (modules . ((lib "punctaffy/hypersnippet/dim.rkt") (lib "punctaffy/private/hypertee-as-brackets.rkt") (lib "punctaffy/private/hypertee-unsafe.rkt") (lib "punctaffy/private/experimental/hypertee-hypermonad.rkt") (lib "punctaffy/quote.rkt") (lib "punctaffy/private/experimental/monad.rkt") (lib "punctaffy/main.rkt") (lib "punctaffy/hypersnippet/hypertee.rkt") (lib "punctaffy/private/experimental/hyprid.rkt") (lib "punctaffy/private/experimental/monoid.rkt") (lib "punctaffy/private/experimental/hypermonad.rkt") (lib "punctaffy/hyperbracket.rkt") (lib "punctaffy/private/hypernest-as-ast.rkt") (lib "punctaffy/private/suppress-internal-errors.rkt") (lib "punctaffy/hypersnippet/hyperstack.rkt") (lib "punctaffy/private/experimental/macro/hypernest-macro.rkt") (lib "punctaffy/hypersnippet/hyperparameter.rkt") (lib "punctaffy/let.rkt") (lib "punctaffy/hypersnippet/snippet.rkt") (lib "punctaffy/private/shim.rkt") (lib "punctaffy/hypersnippet/hypernest.rkt"))) (name . "punctaffy-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (experimental . #t) (extensible . #t) (lathe . #t) (macro . #t) (quasiquotation . #t) (ring:1 . #t) (syntax . #t) (unstable . #t))) (source . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy-lib#main") (tags . ("experimental" "extensible" "lathe" "macro" "quasiquotation" "syntax" "unstable")) (versions . #hash((default . #hasheq((checksum . "06ff449b11f50788f7b6267ade01b51e8e5274e7") (source . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy-lib#main") (source_url . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy-lib#main"))))))) ("punctaffy-test" . #hasheq((author . "rokitna@hotmail.com") (authors . ("rokitna@hotmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/punctaffy-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/punctaffy-test.txt"))) (checksum . "06ff449b11f50788f7b6267ade01b51e8e5274e7") (checksum-error . #f) (collection . "punctaffy") (conflicts . ()) (date-added . 1614043178) (dependencies . ("base" "lathe-comforts-lib" "parendown" "profile-lib" "punctaffy-lib" "rackunit-lib")) (description . "A library for working with higher-dimensional brackets, such as quasiquotation syntax. (test)") (implies . ()) (last-checked . 1632904370) (last-edit . 1615519434) (last-updated . 1631928744) (modules . ((lib "punctaffy/tests/test-readme.rkt") (lib "punctaffy/tests/profile-hypernest-qq.rkt") (lib "punctaffy/tests/experimental/test-hyprid.rkt") (lib "punctaffy/tests/test-hypernest.rkt") (lib "punctaffy/tests/test-hypertee.rkt") (lib "punctaffy/tests/test-hypertee-2.rkt") (lib "punctaffy/tests/test-let.rkt") (lib "punctaffy/tests/test-hypernest-qq.rkt") (lib "punctaffy/tests/test-hypernest-2.rkt"))) (name . "punctaffy-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:rokitna@hotmail.com . #t) (experimental . #t) (extensible . #t) (lathe . #t) (macro . #t) (quasiquotation . #t) (ring:1 . #t) (syntax . #t) (unstable . #t))) (source . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy-test#main") (tags . ("experimental" "extensible" "lathe" "macro" "quasiquotation" "syntax" "unstable")) (versions . #hash((default . #hasheq((checksum . "06ff449b11f50788f7b6267ade01b51e8e5274e7") (source . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy-test#main") (source_url . "https://github.com/lathe/punctaffy-for-racket.git?path=punctaffy-test#main"))))))) ("pure-crypto" . #hasheq((author . "chenxiao770117@gmail.com") (authors . ("chenxiao770117@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pure-crypto" "doc/pure-crypto@pure-crypto/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pure-crypto.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pure-crypto.txt"))) (checksum . "797f643b39c714b8d67e899f659a01dd676a69a1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1585411688) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib" "detail")) (description . "a pure crypto implementation for racket") (implies . ()) (last-checked . 1632904370) (last-edit . 1586812203) (last-updated . 1613119118) (modules . ((lib "pure-crypto/src/cipher/des/des-key-lists.rkt") (lib "pure-crypto/test/openssl/openssl.rkt") (lib "pure-crypto/example/example.rkt") (lib "pure-crypto/src/cipher/aes/add-round-key.rkt") (lib "pure-crypto/test/cipher/des/undes-test.rkt") (lib "pure-crypto/src/encrypt.rkt") (lib "pure-crypto/src/cipher/aes/s-box.rkt") (lib "pure-crypto/src/lib/process-data.rkt") (lib "pure-crypto/test/decrypt/aes/unaes-test.rkt") (lib "pure-crypto/test/encrypt/tdes/tdes-test.rkt") (lib "pure-crypto/test/cipher/des/des-key-lists-test.rkt") (lib "pure-crypto/test/lib/padding-test.rkt") (lib "pure-crypto/src/cipher/aes/mix-columns.rkt") (lib "pure-crypto/src/cipher/aes/lib.rkt") (lib "pure-crypto/test/cipher/aes/add-round-key-test.rkt") (lib "pure-crypto/src/lib/constants.rkt") (lib "pure-crypto/src/lib/lib.rkt") (lib "pure-crypto/test/cipher/aes/shift-rows-test.rkt") (lib "pure-crypto/test/cipher/aes/aes-test.rkt") (lib "pure-crypto/src/cipher/aes/shift-rows.rkt") (lib "pure-crypto/test/cipher/aes/lib-test.rkt") (lib "pure-crypto/main.rkt") (lib "pure-crypto/test/decrypt/tdes/untdes-test.rkt") (lib "pure-crypto/test/decrypt/des/undes-test.rkt") (lib "pure-crypto/test/lib/process-data-test.rkt") (lib "pure-crypto/test/cipher/des/des-test.rkt") (lib "pure-crypto/src/cipher/des/des.rkt") (lib "pure-crypto/test/encrypt/aes/aes-test.rkt") (lib "pure-crypto/src/lib/to-hex-key.rkt") (lib "pure-crypto/test/cipher/aes/key-expansion-test.rkt") (lib "pure-crypto/test/encrypt/des/des-test.rkt") (lib "pure-crypto/src/lib/padding.rkt") (lib "pure-crypto/scribble/pure-crypto.scrbl") (lib "pure-crypto/test/lib/lib-test.rkt") (lib "pure-crypto/test/cipher/aes/mix-columns-test.rkt") (lib "pure-crypto/src/cipher/aes/key-expansion.rkt") (lib "pure-crypto/test/cipher/aes/s-box-test.rkt") (lib "pure-crypto/src/decrypt.rkt") (lib "pure-crypto/src/cipher/aes/aes.rkt"))) (name . "pure-crypto") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (AES . #t) (DES . #t) (TDES . #t) (author:chenxiao770117@gmail.com . #t) (crypto . #t) (decryption . #t) (encryption . #t) (ring:1 . #t))) (source . "https://github.com/simmone/racket-pure-crypto.git") (tags . ("AES" "crypto" "decryption" "DES" "encryption" "TDES")) (versions . #hash((default . #hasheq((checksum . "797f643b39c714b8d67e899f659a01dd676a69a1") (source . "https://github.com/simmone/racket-pure-crypto.git") (source_url . "https://github.com/simmone/racket-pure-crypto.git"))))))) ("puresuri" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "puresuri" "doc/puresuri@puresuri/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/puresuri.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/puresuri.txt"))) (checksum . "9744e849989867e7e002507cd1dfe18ffdf5b5e3") (checksum-error . #f) (collection . "puresuri") (conflicts . ()) (dependencies . ("lux" "base" "gui-lib" "pict-lib" "ppict" "unstable-lib" "ppict" "gui-doc" "pict-doc" "racket-doc" "slideshow-doc" "unstable-doc" "scribble-lib")) (description . "puresuri presentation system") (implies . ()) (last-checked . 1632904370) (last-edit . 1401798151) (last-updated . 1502816339) (modules . ((lib "puresuri/private/state.rkt") (lib "puresuri/main.rkt") (lib "puresuri/lib/title.rkt") (lib "puresuri/gui.rkt") (lib "puresuri/pict.rkt") (lib "puresuri/command.rkt") (lib "puresuri/private/param.rkt") (lib "puresuri/plpict.rkt") (lib "puresuri/puresuri.scrbl") (lib "puresuri/lib/cmds.rkt") (lib "puresuri/lib/slide-numbers.rkt") (lib "puresuri/lib/grid.rkt") (lib "puresuri/tests/example.rkt"))) (name . "puresuri") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (slideshow . #t))) (source . "github://github.com/jeapostrophe/puresuri/master") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "9744e849989867e7e002507cd1dfe18ffdf5b5e3") (source . "github://github.com/jeapostrophe/puresuri/master") (source_url . "http://github.com/jeapostrophe/puresuri/tree/master"))))))) ("puzzler" . #hasheq((author . "aowens5189@gmail.com") (authors . ("aowens5189@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "puzzler" "doc/puzzler@puzzler/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/puzzler.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/puzzler.txt"))) (checksum . "be84df0049795acddf4eee0cc0225f0659df0445") (checksum-error . #f) (collection . "puzzler") (conflicts . ()) (date-added . 1553537012) (dependencies . ("beautiful-racket" "brag" "draw-lib" "gui-lib" "base" "parser-tools-lib" "racket-doc" "scribble-lib")) (description . "A language for building 2D grid-based puzzle games.") (implies . ()) (last-checked . 1632904370) (last-edit . 1586735601) (last-updated . 1586945465) (modules . ((lib "puzzler/examples/free-the-chick.rkt") (lib "puzzler/examples/sokoban.rkt") (lib "puzzler/scribblings/example-sokoban.scrbl") (lib "puzzler/scribblings/conclusion.scrbl") (lib "puzzler/expander.rkt") (lib "puzzler/scribblings/win-lose-section.scrbl") (lib "puzzler/main.rkt") (lib "puzzler/expander-helpers/renderer.rkt") (lib "puzzler/tokenizer.rkt") (lib "puzzler/parser.rkt") (lib "puzzler/examples/trail-example.rkt") (lib "puzzler/scribblings/map-section.scrbl") (lib "puzzler/examples/multi-level-sokoban.rkt") (lib "puzzler/parse-tree-test.rkt") (lib "puzzler/scribblings/draw-section.scrbl") (lib "puzzler/scribblings/puzzler.scrbl") (lib "puzzler/scribblings/action-section.scrbl") (lib "puzzler/scribblings/interaction-section.scrbl") (lib "puzzler/expander-helpers/game.rkt") (lib "puzzler/examples/sneaking-example.rkt"))) (name . "puzzler") (ring . 1) (search-terms . #hasheq((2d . #t) (:build-success: . #t) (:docs: . #t) (author:aowens5189@gmail.com . #t) (game . #t) (lang . #t) (ring:1 . #t))) (source . "https://github.com/aowens-21/puzzler.git") (tags . ("2d" "game" "lang")) (versions . #hash((default . #hasheq((checksum . "be84df0049795acddf4eee0cc0225f0659df0445") (source . "https://github.com/aowens-21/puzzler.git") (source_url . "https://github.com/aowens-21/puzzler.git"))))))) ("pvector" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pvector" "doc/pvector@pvector/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pvector.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/pvector.txt"))) (checksum . "d0132809b4da6e48c3e3087dc35cda1c47565e5e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "collections" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Fast, immutable, persistent vectors") (implies . ()) (last-checked . 1632904370) (last-edit . 1449354873) (last-updated . 1526570495) (modules . ((lib "data/pvector/for.rkt") (lib "data/private/test/main.rkt") (lib "data/pvector/base.rkt") (lib "data/scribblings/pvector.scrbl") (lib "data/pvector.rkt"))) (name . "pvector") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (collections . #t) (data . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-pvector") (tags . ("collections" "data")) (versions . #hash((default . #hasheq((checksum . "d0132809b4da6e48c3e3087dc35cda1c47565e5e") (source . "git://github.com/lexi-lambda/racket-pvector") (source_url . "http://github.com/lexi-lambda/racket-pvector/tree/master"))))))) ("py-fizz" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/py-fizz.txt") (docs . (("main" "py-fizz" "doc/py-fizz@py-fizz/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/py-fizz.txt") (test-failure-log . "server/built/test-fail/py-fizz.txt") (test-success-log . #f))) (checksum . "46047397ab9bbac86ab15a3e6e952777f5754fdf") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("racket-to-python")) (description . "Physics sandbox for racket.  Compiles to Python and uses the Pymunk physics engine.  High level tool for creating physics simulations and digital toys.   \r\n\r\nPygame and pymunk are dependencies.  (Python too, obviously)") (implies . ()) (last-checked . 1632904371) (last-edit . 1527780523) (last-updated . 1616356812) (modules . ((lib "py-fizz/main.rkt") (lib "py-fizz/py-fizz.scrbl") (lib "py-fizz/demos/hello-world.rkt") (lib "py-fizz/demos/builder-test2.rkt") (lib "py-fizz/compiler.rkt") (lib "py-fizz/toys/lose-screen-generator.rkt") (lib "py-fizz/toys/toys.rkt") (lib "py-fizz/demos/car-swap.rkt") (lib "py-fizz/demos/on-click.rkt") (lib "py-fizz/toys/Untitled.rkt") (lib "py-fizz/demos/balloons-hit-fan.rkt") (lib "py-fizz/demos/cannon-shooter.rkt") (lib "py-fizz/demos/catapult.rkt") (lib "py-fizz/demos/builder-test.rkt"))) (name . "py-fizz") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:stephen@thoughtstem.com . #t) (physics . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/py-fizz.git") (tags . ("physics")) (versions . #hash((default . #hasheq((checksum . "46047397ab9bbac86ab15a3e6e952777f5754fdf") (source . "https://github.com/thoughtstem/py-fizz.git") (source_url . "https://github.com/thoughtstem/py-fizz.git"))))))) ("pydrnlp" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pydrnlp" "doc/pydrnlp@pydrnlp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/pydrnlp.txt") (test-failure-log . "server/built/test-fail/pydrnlp.txt") (test-success-log . #f))) (checksum . "666c1e00b67c0cc1ee6b5e3fbcfbec498b3173ac") (checksum-error . #f) (collection . "pydrnlp") (conflicts . ()) (date-added . 1569547008) (dependencies . (("base" #:version "7.4") ("ricoeur-kernel" #:version "0.0.2") ("ricoeur-tei-utils" #:version "0.5.91") ("adjutor" #:version "0.3") "python-tokenizer" "math-lib" "pict-lib" "draw-lib" "typed-racket-lib" "typed-racket-more" "reprovide-lang" ("db-lib" #:version "1.4") ("sql" #:version "1.5") "gregor-lib" "scribble-lib" "racket-doc" "rackunit-lib" "markdown" "rackunit-typed" "_-exp" "at-exp-lib" "rackjure")) (description . "NLP Library for Digital Ricoeur") (implies . ()) (last-checked . 1632904402) (last-edit . 1569547119) (last-updated . 1625610967) (modules . ((lib "pydrnlp/word-cloud/pict.rkt") (lib "pydrnlp/word-cloud/old/word-cloud.rkt") (lib "pydrnlp/main.rkt") (lib "pydrnlp/word-cloud/world.rkt") (lib "pydrnlp/scribblings/pydrnlp.scrbl") (lib "pydrnlp/word-cloud/scratch.rkt") (lib "pydrnlp/support.rkt") (lib "pydrnlp/trends/debugging-report.rkt") (lib "pydrnlp/support/conda.rkt") (lib "pydrnlp/support/python-lang/prefabs.rkt") (lib "pydrnlp/support/python-lang/read.rkt") (lib "pydrnlp/py/environment.rkt") (lib "pydrnlp/word-cloud/bspt.rkt") (lib "pydrnlp/word-cloud/test-data.rkt") (lib "pydrnlp/trends/cache-tokenize-corpus.rkt") (lib "pydrnlp/word-cloud/broken-quadtree/word-cloud.rkt") (lib "pydrnlp/trends/worker.rkt") (lib "pydrnlp/word-cloud/stream.rkt") (lib "pydrnlp/support/python-lang/stx.rkt") (lib "pydrnlp/trends/types/rb-tree.rkt") (lib "pydrnlp/trends/corpus.rkt") (lib "pydrnlp/word-cloud/broken-quadtree/pict.rkt") (lib "pydrnlp/support/revision-contract.rkt") (lib "pydrnlp/scribblings/bibliography.rkt") (lib "pydrnlp/scribblings/markdown.rkt") (lib "pydrnlp/scribblings/trends.scrbl") (lib "pydrnlp/scribblings/support.scrbl") (lib "pydrnlp/trends/types.rkt") (lib "pydrnlp/scribblings/bug.rkt") (lib "pydrnlp/support/worker.rkt") (lib "pydrnlp/support/python-lang.rkt") (lib "pydrnlp/py/write-env-vars.rkt") (lib "pydrnlp/trends/tokenize-one-doc.rkt") (lib "pydrnlp/scribblings/lib.rkt") (lib "pydrnlp/trends/analyze.rkt") (lib "pydrnlp/word-cloud/rect.rkt") (lib "pydrnlp/trends/types/lemma-table.rkt") (lib "pydrnlp/trends.rkt") (lib "pydrnlp/word-cloud/old/intersect.rkt") (lib "pydrnlp/trends/test.rkt") (lib "pydrnlp/trends/types/types.rkt") (lib "pydrnlp/word-cloud/old/collision.rkt") (lib "pydrnlp/word-cloud/broken-quadtree/quadtree.rkt") (lib "pydrnlp/scribblings/python-doc-lang.rkt") (lib "pydrnlp/scribblings/include-python.rkt"))) (name . "pydrnlp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (DigitalRicoeur . #t) (application . #t) (author:philip@philipmcgrath.com . #t) (nlp . #t) (ring:1 . #t))) (source . "https://bitbucket.org/digitalricoeur/pydrnlp.git") (tags . ("application" "DigitalRicoeur" "nlp")) (versions . #hash((default . #hasheq((checksum . "666c1e00b67c0cc1ee6b5e3fbcfbec498b3173ac") (source . "https://bitbucket.org/digitalricoeur/pydrnlp.git") (source_url . "https://bitbucket.org/digitalricoeur/pydrnlp.git"))))))) ("python" . #hasheq((author . "pedropramos@tecnico.ulisboa.pt") (authors . ("pedropramos@tecnico.ulisboa.pt")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/python.txt") (test-failure-log . "server/built/test-fail/python.txt") (test-success-log . #f))) (checksum . "16edd14f3950fd5a01f8b0237e023536ef48d17b") (checksum-error . #f) (collection . "python") (conflicts . ()) (dependencies . ("base" "parser-tools" "compatibility-lib" "srfi-lite-lib")) (description . "An implementation of the Python programming language for Racket") (implies . ()) (last-checked . 1632904402) (last-edit . 1440945925) (last-updated . 1502816339) (modules . ((lib "python/ast-node-stmt.rkt") (lib "python/examples/fibonacci/fib.rkt") (lib "python/debug/lang/python.rkt") (lib "python/engine/strings.rkt") (lib "python/engine/bools.rkt") (lib "python/libpython.rkt") (lib "python/engine/descriptors.rkt") (lib "python/compile.rkt") (lib "python/engine/racket_values.rkt") (lib "python/lang/runtime-config.rkt") (lib "python/engine/files.rkt") (lib "python/engine/iterators.rkt") (lib "python/cpy-importing.rkt") (lib "python/examples/mandelbrot/mandelbrot.rkt") (lib "python/runtime_FFI.rkt") (lib "python/sandbox.rkt") (lib "python/examples/ackermann/ackermann.rkt") (lib "python/lang/python.rkt") (lib "python/engine/singletons.rkt") (lib "python/config.rkt") (lib "python/examples/datetime/datetime_racket.rkt") (lib "python/debug/lang/reader.rkt") (lib "python/bindings-mixin.rkt") (lib "python/main.rkt") (lib "python/ast-node.rkt") (lib "python/name-mangling.rkt") (lib "python/ast-node-expr.rkt") (lib "python/ast-node-target.rkt") (lib "python/parse.rkt") (lib "python/engine/collections.rkt") (lib "python/engine/engine.rkt") (lib "python/paths.rkt") (lib "python/lex+yacc.rkt") (lib "python/engine/numbers.rkt") (lib "python/engine/modules.rkt") (lib "python/lang/lang-info.rkt") (lib "python/examples/eratosthenes/sieve.rkt") (lib "python/lang/reader.rkt") (lib "python/runtime.rkt") (lib "python/engine/exceptions.rkt") (lib "python/engine/functions.rkt"))) (name . "python") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pedropramos@tecnico.ulisboa.pt . #t) (language . #t) (ring:1 . #t))) (source . "git://github.com/pedropramos/PyonR.git#master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "16edd14f3950fd5a01f8b0237e023536ef48d17b") (source . "git://github.com/pedropramos/PyonR.git#master") (source_url . "http://github.com/pedropramos/PyonR.git/tree/master#master"))))))) ("python-tokenizer" . #hasheq((author . "clements@racket-lang.org dyoo@hashcollision.org") (authors . ("clements@racket-lang.org" "dyoo@hashcollision.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "python-tokenizer" "doc/python-tokenizer@python-tokenizer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/python-tokenizer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/python-tokenizer.txt"))) (checksum . "beadda52525c78f4b3aa0c8adcf42bf5e1033c5a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "data-lib" "while-loop" "at-exp-lib" "parser-tools-doc" "racket-doc" "scribble-lib")) (description . "A fairly direct translation of tokenize.py") (implies . ()) (last-checked . 1632904403) (last-edit . 1399597456) (last-updated . 1502816340) (modules . ((lib "python-tokenizer/main.rkt") (lib "python-tokenizer/python-tokenizer.rkt") (lib "python-tokenizer/python-tokenizer.scrbl") (lib "python-tokenizer/test-more.rkt") (lib "python-tokenizer/test-tokenize.rkt"))) (name . "python-tokenizer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (author:dyoo@hashcollision.org . #t) (parser . #t) (ring:1 . #t))) (source . "github://github.com/jbclements/python-tokenizer/master/") (tags . ("parser")) (versions . #hash((default . #hasheq((checksum . "beadda52525c78f4b3aa0c8adcf42bf5e1033c5a") (source . "github://github.com/jbclements/python-tokenizer/master/") (source_url . "http://github.com/jbclements/python-tokenizer/tree/master/"))))))) ("qiniu-sdk" . #hasheq((author . "1227847322@qq.com") (authors . ("1227847322@qq.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/qiniu-sdk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/qiniu-sdk.txt"))) (checksum . "27ca32071cd03a1dc955ec396efa120f0d4b2759") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "web-server-lib")) (description . "A simple library for qiniu.com") (implies . ()) (last-checked . 1632904403) (last-edit . 1532483533) (last-updated . 1532483506) (modules . ((lib "qiniu-sdk/main.rkt"))) (name . "qiniu-sdk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:1227847322@qq.com . #t) (qiniu . #t) (ring:1 . #t))) (source . "https://github.com/MatrixForChange/qiniu-sdk.git") (tags . ("qiniu")) (versions . #hash((default . #hasheq((checksum . "27ca32071cd03a1dc955ec396efa120f0d4b2759") (source . "https://github.com/MatrixForChange/qiniu-sdk.git") (source_url . "https://github.com/MatrixForChange/qiniu-sdk.git"))))))) ("qresults-list" . #hasheq((author . "alexharsanyi@gmail.com") (authors . ("alexharsanyi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "qresults-list" "doc/qresults-list@qresults-list/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/qresults-list.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/qresults-list.txt"))) (checksum . "b680a09a8e83cc72fb306e3d9a8ebaff91a7040d") (checksum-error . #f) (collection . "qresults-list") (conflicts . ()) (date-added . 1558142198) (dependencies . ("base" "draw-lib" "gui-lib" "scribble-lib" "racket-doc" "rackunit-lib" "gui-doc")) (description . "enhanced list-box% control") (implies . ()) (last-checked . 1632904404) (last-edit . 1558142198) (last-updated . 1579338524) (modules . ((lib "qresults-list/private/qresults-list.rkt") (lib "qresults-list/main.rkt") (lib "qresults-list/scribblings/qresults-list.scrbl") (lib "qresults-list/private/widget-utilities.rkt") (lib "qresults-list/private/edit-dialog-base.rkt") (lib "qresults-list/private/icon-resources.rkt") (lib "qresults-list/private/utilities.rkt"))) (name . "qresults-list") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexharsanyi@gmail.com . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/alex-hhh/qresults-list.git") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "b680a09a8e83cc72fb306e3d9a8ebaff91a7040d") (source . "https://github.com/alex-hhh/qresults-list.git") (source_url . "https://github.com/alex-hhh/qresults-list.git"))))))) ("qtops" . #hasheq((author . "emsenn@emsenn.net") (authors . ("emsenn@emsenn.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/qtops.txt") (docs . (("main" "qtops" "doc/qtops@qtops/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/qtops.txt") (test-failure-log . "server/built/test-fail/qtops.txt") (test-success-log . #f))) (checksum . "ef9950feed1435514911f731303c6e4fd4198ca6") (checksum-error . #f) (collection . "qtops") (conflicts . ()) (date-added . 1600784764) (dependencies . ()) (description . "Perform operations on things with qualities") (implies . ()) (last-checked . 1632904404) (last-edit . 1600787443) (last-updated . 1601822247) (modules . ((lib "qtops/qualities/lit.rkt") (lib "qtops/scribblings/qualities/trivia.scrbl") (lib "qtops/scribblings/things.scrbl") (lib "qtops/qualities/noise.rkt") (lib "qtops/qualities/mudsocket-speech.rkt") (lib "qtops/scribblings/qualities/universe-thing.scrbl") (lib "qtops/qualities/pronouns.rkt") (lib "qtops/qualities/area.rkt") (lib "qtops/scribblings/qualities/mudsocket-client.scrbl") (lib "qtops/qualities/mudsocket-client.rkt") (lib "qtops/scribblings/qualities/region-area.scrbl") (lib "qtops/scribblings/qualities/noise.scrbl") (lib "qtops/qualities/notable.rkt") (lib "qtops/scribblings/qualities/noun.scrbl") (lib "qtops/scribblings/qualities/sight.scrbl") (lib "qtops/qualities/fillable.rkt") (lib "qtops/qualities/trivia.rkt") (lib "qtops/utilities/lists.rkt") (lib "qtops/qualities/contents.rkt") (lib "qtops/things.rkt") (lib "qtops/scribblings/qualities/mudsocket-contents.scrbl") (lib "qtops/scribblings/qualities/rpg-mudsocket-server.scrbl") (lib "qtops/scribblings/qualities/universe.scrbl") (lib "qtops/scribblings/qualities/exits.scrbl") (lib "qtops/scribblings/qualities/time.scrbl") (lib "qtops/qualities/lookable.rkt") (lib "qtops/main.rkt") (lib "qtops/qualities/rpg-mudsocket-server.rkt") (lib "qtops/qualities/sight.rkt") (lib "qtops/qualities/mudsocket-basic-self-modification.rkt") (lib "qtops/qualities/mudsocket-server.rkt") (lib "qtops/scribblings/qtops.scrbl") (lib "qtops/qualities/radiation.rkt") (lib "qtops/qualities/universe.rkt") (lib "qtops/qualities/region.rkt") (lib "qtops/qualities/mass.rkt") (lib "qtops/qualities/noun.rkt") (lib "qtops/scribblings/qualities/lookable.scrbl") (lib "qtops/scribblings/qualities/mudsocket-sight.scrbl") (lib "qtops/scribblings/qualities/notable.scrbl") (lib "qtops/scribblings/qualities/mudsocket-speech.scrbl") (lib "qtops/scribblings/qualities/fillable.scrbl") (lib "qtops/scribblings/qualities/mudsocket-server.scrbl") (lib "qtops/qualities/region-noise.rkt") (lib "qtops/scribblings/qualities/npc.scrbl") (lib "qtops/scribblings/qualities/object.scrbl") (lib "qtops/scribblings/qualities/contents.scrbl") (lib "qtops/qualities/universe-thing.rkt") (lib "qtops/scribblings/qualities/brightness.scrbl") (lib "qtops/scribblings/qualities/client.scrbl") (lib "qtops/qualities/exits.rkt") (lib "qtops/qualities/mudsocket-contents.rkt") (lib "qtops/qualities/region-area.rkt") (lib "qtops/scribblings/qualities/mass.scrbl") (lib "qtops/qualities/npc.rkt") (lib "qtops/qualities/brightness.rkt") (lib "qtops/qualities/description.rkt") (lib "qtops/qualities/energetic.rkt") (lib "qtops/qualities/mudsocket-sight.rkt") (lib "qtops/scribblings/qualities/animation.scrbl") (lib "qtops/scribblings/qualities/lit.scrbl") (lib "qtops/qualities/object.rkt") (lib "qtops/scribblings/qualities/qualities.scrbl") (lib "qtops/scribblings/qualities/description.scrbl") (lib "qtops/run-tests.rkt") (lib "qtops/scribblings/qualities/region.scrbl") (lib "qtops/qualities/mudsocket-trivia.rkt") (lib "qtops/scribblings/qualities/pronouns.scrbl") (lib "qtops/qualities/animation.rkt") (lib "qtops/qualities/client.rkt") (lib "qtops/scribblings/qualities/radiation.scrbl") (lib "qtops/scribblings/qualities/area.scrbl") (lib "qtops/qualities/time.rkt") (lib "qtops/scribblings/qualities/mudsocket-trivia.scrbl") (lib "qtops/scribblings/qualities/energetic.scrbl") (lib "qtops/qualities/main.rkt") (lib "qtops/scribblings/qualities/region-noise.scrbl"))) (name . "qtops") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:emsenn@emsenn.net . #t) (experimental . #t) (ring:1 . #t))) (source . "https://github.com/emsenn/qtops.git") (tags . ("experimental")) (versions . #hash((default . #hasheq((checksum . "ef9950feed1435514911f731303c6e4fd4198ca6") (source . "https://github.com/emsenn/qtops.git") (source_url . "https://github.com/emsenn/qtops.git"))))))) ("quad" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "quad" "doc/quad@quad/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quad.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/quad.txt"))) (checksum . "9060de1330853dc206bbf57d75a1d261b7bc4816") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1555965305) (dependencies . ("at-exp-lib" ("base" #:version "7.1") "beautiful-racket-lib" "fontland" "hyphenate" "pitfall" "pollen" "rackunit-lib" "sugar" "txexpr" "markdown" "pict-lib" "debug" "words" "draw-lib" "draw-doc" "racket-doc" "scribble-lib")) (description . "Document processor (unstable)") (implies . ()) (last-checked . 1632904404) (last-edit . 1556661191) (last-updated . 1621376625) (modules . ((lib "qtest/test-metadata.rkt") (lib "quadwriter/keep.rkt") (lib "quadwriter/log.rkt") (lib "quadwriter/break.rkt") (lib "quad/get-info.rkt") (lib "quad/rebase.rkt") (lib "quadwriter/line.rkt") (lib "quadwriter/main.rkt") (lib "quad/ocm.rkt") (lib "qtest/update-tests.rkt") (lib "quadwriter/page.rkt") (lib "quadwriter/draw.rkt") (lib "quadwriter/core.rkt") (lib "qtest/demo-footnotes.rkt") (lib "quadwriter/query.rkt") (lib "quad/position.rkt") (lib "qtest/fark.rkt") (lib "quad/pict.rkt") (lib "quad/quad.rkt") (lib "quad/unicode/math.rkt") (lib "qtest/test-fallback-super.rkt") (lib "qtest/test-font-tracking.rkt") (lib "quad/scribblings/quad.scrbl") (lib "quad/util.rkt") (lib "qtest/test-symbol.rkt") (lib "qtest/test-baseline-shift.rkt") (lib "qtest/docs.rkt") (lib "quadwriter/html.rkt") (lib "quad/atomize.rkt") (lib "qtest/test-fancy-sauce.rkt") (lib "quadwriter/markdown.rkt") (lib "quadwriter/font.rkt") (lib "quadwriter/struct.rkt") (lib "quad/scribblings/pollen-example/pollen.rkt") (lib "qtest/sample-main.rkt") (lib "qtest/test-adjustment-sizing.rkt") (lib "quadwriter/string.rkt") (lib "quadwriter/para.rkt") (lib "qtest/mydraw.rkt") (lib "qtest/test-docs.rkt") (lib "quadwriter/debug.rkt") (lib "quad/unicode/emoji.rkt") (lib "qtest/test-keep-with-next.rkt") (lib "qtest/test-hello.rkt") (lib "quad/base.rkt") (lib "quad/wrap.rkt") (lib "quadwriter/block.rkt") (lib "quad/qexpr.rkt") (lib "quadwriter/test.rkt") (lib "fontproof/command.rkt") (lib "quadwriter/image.rkt") (lib "fontproof/main.rkt") (lib "quadwriter/lang.rkt") (lib "qtest/paths-to-test.rkt") (lib "qtest/test-image.rkt") (lib "quadwriter/attrs.rkt") (lib "quadwriter/tags.rkt") (lib "qtest/test-ot-features.rkt") (lib "qtest/test-emoji.rkt") (lib "qtest/test-sections.rkt") (lib "quad/log.rkt") (lib "quadwriter/doc.rkt") (lib "quadwriter/param.rkt") (lib "quadwriter/column.rkt") (lib "qtest/log.rkt") (lib "qtest/test-kafka.rkt") (lib "quad/reader.rkt") (lib "quad/param.rkt") (lib "quad/main.rkt") (lib "quad/unicode/unicode-class-prep.rkt") (lib "quadwriter/markup.rkt") (lib "quadwriter/section.rkt") (lib "qtest/test-breaks.rkt") (lib "quadwriter/render.rkt") (lib "qtest/test-font-setup.rkt") (lib "quad/lang.rkt") (lib "qtest/all.rkt") (lib "quadwriter/lang-helper.rkt") (lib "quad/doclang-raw.rkt") (lib "qtest/raco.rkt") (lib "quad/checksum.rkt") (lib "qtest/test-fallback-mini.rkt"))) (name . "quad") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t) (typesetting . #t))) (source . "https://github.com/mbutterick/quad.git") (tags . ("typesetting")) (versions . #hash((default . #hasheq((checksum . "9060de1330853dc206bbf57d75a1d261b7bc4816") (source . "https://github.com/mbutterick/quad.git") (source_url . "https://github.com/mbutterick/quad.git"))))))) ("quad-tree" . #hasheq((author . "matias@fortlogic.net") (authors . ("matias@fortlogic.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quad-tree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/quad-tree.txt"))) (checksum . "2cdb598e6c79e8499e545abc078d6f9a572ca8b0") (checksum-error . #f) (collection . "quad-tree") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "scribble-lib" "racket-doc")) (description . "A fairly simple quad-tree implementation. Nothing terribly fancy. Currently rather unstable.") (implies . ()) (last-checked . 1632904405) (last-edit . 1476256469) (last-updated . 1502816341) (modules . ((lib "quad-tree/scribblings/quad-tree.scrbl") (lib "quad-tree/shared.rkt") (lib "quad-tree/main.rkt") (lib "quad-tree/misc/dispatch-case.rkt") (lib "quad-tree/quad-tree.rkt") (lib "quad-tree/quad-fruit-tree.rkt"))) (name . "quad-tree") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:matias@fortlogic.net . #t) (data . #t) (geometry . #t) (graphics . #t) (ring:1 . #t))) (source . "https://github.com/dented42/racket-quad-tree.git/?path=quad-tree") (tags . ("data" "geometry" "graphics")) (versions . #hash((default . #hasheq((checksum . "2cdb598e6c79e8499e545abc078d6f9a572ca8b0") (source . "https://github.com/dented42/racket-quad-tree.git/?path=quad-tree") (source_url . "https://github.com/dented42/racket-quad-tree.git/?path=quad-tree"))))))) ("qualified-in" . #hasheq((author . "michaelmmacleod@gmail.com") (authors . ("michaelmmacleod@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "qualified-in" "doc/qualified-in@qualified-in/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/qualified-in.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/qualified-in.txt"))) (checksum . "779feda6a5fe30ff861971c894ae4a301c334150") (checksum-error . #f) (collection . "qualified-in") (conflicts . ()) (date-added . 1565833830) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Provides qualified-in, a require form which prefixes its subforms with their module names and a `:`.") (implies . ()) (last-checked . 1632904405) (last-edit . 1565833830) (last-updated . 1565833899) (modules . ((lib "qualified-in/scribblings/qualified-in.scrbl") (lib "qualified-in/main.rkt"))) (name . "qualified-in") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:michaelmmacleod@gmail.com . #t) (require . #t) (ring:1 . #t))) (source . "https://github.com/michaelmmacleod/qualified-in.git") (tags . ("require")) (versions . #hash((default . #hasheq((checksum . "779feda6a5fe30ff861971c894ae4a301c334150") (source . "https://github.com/michaelmmacleod/qualified-in.git") (source_url . "https://github.com/michaelmmacleod/qualified-in.git"))))))) ("quickcheck" . #hasheq((author . "ifigueroap@gmail.com sperber@deinprogramm.de") (authors . ("ifigueroap@gmail.com" "sperber@deinprogramm.de")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "quickcheck" "doc/quickcheck@quickcheck/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quickcheck.txt") (test-failure-log . "server/built/test-fail/quickcheck.txt") (test-success-log . #f))) (checksum . "902eb30fa8f5c0df7910df22c1442ff866b3920d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit" "doc-coverage" "scribble-lib" "racket-doc")) (description . "Quickcheck Clone") (implies . ()) (last-checked . 1632904405) (last-edit . 1394124887) (last-updated . 1594670252) (modules . ((lib "quickcheck/private/generator.rkt") (lib "quickcheck/arbitrary.rkt") (lib "quickcheck/private/result.rkt") (lib "quickcheck/raco-quickcheck.rkt") (lib "quickcheck/private/random.rkt") (lib "quickcheck/private/arbitrary.rkt") (lib "quickcheck/result.rkt") (lib "rackunit/quickcheck.rkt") (lib "quickcheck/testing.rkt") (lib "quickcheck/generator.rkt") (lib "quickcheck/private/test/doc-coverage.rkt") (lib "quickcheck/main.rkt") (lib "quickcheck/private/error.rkt") (lib "quickcheck/private/property.rkt") (lib "quickcheck/property.rkt") (lib "quickcheck/private/glue.rkt") (lib "quickcheck/private/text-input-output.rkt") (lib "quickcheck/scribblings/quickcheck.scrbl") (lib "quickcheck/private/test/main.rkt"))) (name . "quickcheck") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ifigueroap@gmail.com . #t) (author:sperber@deinprogramm.de . #t) (ring:1 . #t) (testing . #t))) (source . "github://github.com/ifigueroap/racket-quickcheck/master") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "902eb30fa8f5c0df7910df22c1442ff866b3920d") (source . "github://github.com/ifigueroap/racket-quickcheck/master") (source_url . "http://github.com/ifigueroap/racket-quickcheck/tree/master"))))))) ("quickscript" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "quickscript" "doc/quickscript@quickscript/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "c6923c424aea60e80c836c6b6414ff7698f0cfde") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1593519450) (dependencies . ("base" "drracket-plugin-lib" "drracket" "gui-lib" "net-lib" "scribble-lib" "at-exp-lib" "drracket" "gui-doc" "racket-doc" "draw-doc" "rackunit-lib")) (description . "Scripting engine for DrRacket.\r\nExtends DrRacket with scripting capabilities and menu items. The package quickscript-extra contains additional sample scripts.") (implies . ()) (last-checked . 1632904405) (last-edit . 1593519450) (last-updated . 1627925765) (modules . ((lib "quickscript/library-gui.rkt") (lib "quickscript/base.rkt") (lib "quickscript/main.rkt") (lib "quickscript/library.rkt") (lib "quickscript/exn-gobbler.rkt") (lib "quickscript/tool.rkt") (lib "quickscript/scribblings/quickscript.scrbl") (lib "quickscript/script.rkt") (lib "quickscript/tests/library.rkt") (lib "quickscript/utils.rkt") (lib "quickscript/shadow-script.rkt"))) (name . "quickscript") (ring . 1) (search-terms . #hasheq((:docs: . #t) (author:laurent.orseau@gmail.com . #t) (drracket . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/Metaxal/quickscript.git") (tags . ("drracket" "gui")) (versions . #hash((default . #hasheq((checksum . "c6923c424aea60e80c836c6b6414ff7698f0cfde") (source . "https://github.com/Metaxal/quickscript.git") (source_url . "https://github.com/Metaxal/quickscript.git"))))))) ("quickscript-competition-2020" . #hasheq((author . "spdegabrielle@gmail.com") (authors . ("spdegabrielle@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "quickscript-competition-2020" "doc/quickscript-competition-2020@quickscript-competition-2020/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quickscript-competition-2020.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/quickscript-competition-2020.txt"))) (checksum . "b6406a4f021671bccb6b464042ba6c91221286fe") (checksum-error . #f) (collection . "quickscript-competition-2020") (conflicts . ()) (date-added . 1597331830) (dependencies . ("data-lib" "base" "drracket" "gui-lib" "htdp-lib" "markdown" "net-lib" "plot-gui-lib" "plot-lib" "quickscript" "rackunit-lib" "scribble-lib" "search-list-box" "syntax-color-lib" "at-exp-lib")) (description . "Scripts from the Quickscript Competition July 2020") (implies . ()) (last-checked . 1632904406) (last-edit . 1597331964) (last-updated . 1612175850) (modules . ((lib "quickscript-competition-2020/scripts/format-selection.rkt") (lib "quickscript-competition-2020/scribblings/quickscript-competition-2020.scrbl") (lib "quickscript-competition-2020/scripts/cs111-course-links.rkt") (lib "quickscript-competition-2020/scripts/design-recipe-template.rkt") (lib "quickscript-competition-2020/scripts/letterfall.rkt") (lib "quickscript-competition-2020/scripts/rot13.rkt") (lib "quickscript-competition-2020/scripts/fishy-completion.rkt") (lib "quickscript-competition-2020/scripts/breakout.rkt") (lib "quickscript-competition-2020/scripts/open-recent.rkt") (lib "quickscript-competition-2020/scripts/plot-selected-numbers.rkt") (lib "quickscript-competition-2020/scripts/count-lines.rkt") (lib "quickscript-competition-2020/scripts/robopat.rkt") (lib "quickscript-competition-2020/scripts/colorscheme2package.rkt") (lib "quickscript-competition-2020/scripts/show-highlighted.rkt") (lib "quickscript-competition-2020/scripts/preview-markdown.rkt") (lib "quickscript-competition-2020/scripts/copy-selection-as-html.rkt") (lib "quickscript-competition-2020/scripts/sort-lines.rkt") (lib "quickscript-competition-2020/scripts/cve-search.rkt") (lib "quickscript-competition-2020/scripts/defines.rkt") (lib "quickscript-competition-2020/scripts/eyes.rkt") (lib "quickscript-competition-2020/register.rkt") (lib "quickscript-competition-2020/scripts/racket-news.rkt") (lib "quickscript-competition-2020/scripts/visit-url.rkt"))) (name . "quickscript-competition-2020") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (DrRacket . #t) (Quickscript . #t) (author:spdegabrielle@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/Quickscript-Competiton/July2020entries.git") (tags . ("DrRacket" "Quickscript")) (versions . #hash((default . #hasheq((checksum . "b6406a4f021671bccb6b464042ba6c91221286fe") (source . "https://github.com/Quickscript-Competiton/July2020entries.git") (source_url . "https://github.com/Quickscript-Competiton/July2020entries.git"))))))) ("quickscript-extra" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "quickscript-extra" "doc/quickscript-extra@quickscript-extra/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quickscript-extra.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/quickscript-extra.txt"))) (checksum . "f69aa014b4c1c305beb65748c135f9229ce180bd") (checksum-error . #f) (collection . "quickscript-extra") (conflicts . ()) (date-added . 1614433768) (dependencies . ("base" "quickscript" "at-exp-lib" "drracket" "gui-lib" "pict-lib" "racket-index" "scribble-lib" "srfi-lite-lib" "web-server-lib" "racket-doc" "rackunit-lib")) (description . "Some scripts for DrRacket's Quickscript.") (implies . ()) (last-checked . 1632904407) (last-edit . 1614433768) (last-updated . 1627828376) (modules . ((lib "quickscript-extra/scripts/color-chooser.rkt") (lib "quickscript-extra/scripts/def-signatures.rkt") (lib "quickscript-extra/scripts/backup-file.rkt") (lib "quickscript-extra/scripts/add-menu.rkt") (lib "quickscript-extra/scripts/reorder-tabs.rkt") (lib "quickscript-extra/scripts/sort-lines.rkt") (lib "quickscript-extra/scripts/bookmarks.rkt") (lib "quickscript-extra/scripts/surround-selection.rkt") (lib "quickscript-extra/scripts/persistent-counter.rkt") (lib "quickscript-extra/scripts/indent-table.rkt") (lib "quickscript-extra/scripts/open-terminal.rkt") (lib "quickscript-extra/scripts/gui-tools.rkt") (lib "quickscript-extra/scripts/filepath-to-clipboard.rkt") (lib "quickscript-extra/scripts/enter-submod.rkt") (lib "quickscript-extra/scripts/goto-line.rkt") (lib "quickscript-extra/scripts/open-collect-file.rkt") (lib "quickscript-extra/scripts/color-theme.rkt") (lib "quickscript-extra/scripts/tweet.rkt") (lib "quickscript-extra/scripts/all-tabs.rkt") (lib "quickscript-extra/scribblings/quickscript-extra.scrbl") (lib "quickscript-extra/scripts/insert-pict.rkt") (lib "quickscript-extra/scripts/abstract-variable.rkt") (lib "quickscript-extra/unregister.rkt") (lib "quickscript-extra/scripts/current-file-example.rkt") (lib "quickscript-extra/scripts/reverse-selection.rkt") (lib "quickscript-extra/register.rkt") (lib "quickscript-extra/scripts/dynamic-abbrev.rkt") (lib "quickscript-extra/scripts/git.rkt") (lib "quickscript-extra/scripts/extract-function.rkt") (lib "quickscript-extra/scripts/number-tabs.rkt") (lib "quickscript-extra/scripts/provided-by.rkt") (lib "quickscript-extra/scripts/regexp-replace.rkt") (lib "quickscript-extra/scripts/author-date.rkt") (lib "quickscript-extra/scripts/open-dir.rkt") (lib "quickscript-extra/scripts/complete-word.rkt") (lib "quickscript-extra/scripts/sections.rkt") (lib "quickscript-extra/scripts/pasterack.rkt"))) (name . "quickscript-extra") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (drracket . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/Metaxal/quickscript-extra.git") (tags . ("drracket" "gui")) (versions . #hash((default . #hasheq((checksum . "f69aa014b4c1c305beb65748c135f9229ce180bd") (source . "https://github.com/Metaxal/quickscript-extra.git") (source_url . "https://github.com/Metaxal/quickscript-extra.git"))))))) ("quickscript-test" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "quickscript-test" "doc/quickscript-test@quickscript-test/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quickscript-test.txt") (test-failure-log . "server/built/test-fail/quickscript-test.txt") (test-success-log . #f))) (checksum . "595b3aa04c2ffd34117ff044ecd760d8db55fbca") (checksum-error . #f) (collection . "quickscript-test") (conflicts . ()) (date-added . 1588923886) (dependencies . ("drracket-test" "gui-lib" "quickscript" "rackunit-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Tests for the quickscript package") (implies . ()) (last-checked . 1632904407) (last-edit . 1604226712) (last-updated . 1627634005) (modules . ((lib "quickscript-test/drracket.rkt") (lib "quickscript-test/base.rkt") (lib "quickscript-test/scripts/unbound-id.rkt") (lib "quickscript-test/scripts/string-reverse.rkt") (lib "quickscript-test/drracket-no-write.rkt") (lib "quickscript-test/drracket-no-quickscript-dir.rkt") (lib "quickscript-test/scripts/unbound-id-not-skipped.rkt") (lib "quickscript-test/scripts/test-compile-cs.rkt") (lib "quickscript-test/main.rkt") (lib "quickscript-test/scripts/test-compile.rkt") (lib "quickscript-test/scripts/output-to-new-tab.rkt") (lib "quickscript-test/scripts/persistent-counter.rkt") (lib "quickscript-test/scripts/open-me.rkt") (lib "quickscript-test/scripts/string-insert.rkt") (lib "quickscript-test/scripts/close-current-tab.rkt") (lib "quickscript-test/scribblings/quickscript-test.scrbl"))) (name . "quickscript-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (drracket . #t) (gui . #t) (quickscript . #t) (ring:1 . #t) (tests . #t))) (source . "https://github.com/Metaxal/quickscript-test.git") (tags . ("drracket" "gui" "quickscript" "tests")) (versions . #hash((default . #hasheq((checksum . "595b3aa04c2ffd34117ff044ecd760d8db55fbca") (source . "https://github.com/Metaxal/quickscript-test.git") (source_url . "https://github.com/Metaxal/quickscript-test.git"))))))) ("quote-bad" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "quote-bad" "doc/quote-bad@quote-bad/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/quote-bad.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/quote-bad.txt"))) (checksum . "f7b81540acad204535b993806aca04a4692ec4d5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "pconvert-lib" "unstable-lib" "hygienic-quote-lang" "rackunit-lib" "unstable-macro-testing-lib" "scribble-lib" "racket-doc")) (description . "A version of quote that helps to rid programs of bad uses of quote") (implies . ()) (last-checked . 1632904407) (last-edit . 1464562044) (last-updated . 1502816341) (modules . ((lib "quote-bad/translate-quoted.rkt") (lib "constructor-style-print/lang/language-info.rkt") (lib "quote-bad/quote-bad.rkt") (lib "constructor-style-print/tests/constructor-style-print-lang.rkt") (lib "quote-bad/quote-bad-error.rkt") (lib "constructor-style-print/constructor-style-print.rkt") (lib "constructor-style-print/lang/reader.rkt") (lib "quote-bad/constructor-style-print/lang/reader.rkt") (lib "constructor-style-print/racket/init.rkt") (lib "quote-bad/scribblings/quote-bad.scrbl") (lib "constructor-style-print/lang/runtime-config.rkt"))) (name . "quote-bad") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/quote-bad") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f7b81540acad204535b993806aca04a4692ec4d5") (source . "git://github.com/AlexKnauth/quote-bad") (source_url . "http://github.com/AlexKnauth/quote-bad/tree/master"))))))) ("qweather" . #hasheq((author . "yanyingwang1@gmail.com") (authors . ("yanyingwang1@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "qweather" "doc/qweather@qweather/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/qweather.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/qweather.txt"))) (checksum . "7288f7deeb3d7f5a7f1f59ec48eb6e03850e75d3") (checksum-error . #f) (collection . "qweather") (conflicts . ()) (date-added . 1614424940) (dependencies . ("base" "at-exp-lib" "http-client" "scribble-lib" "racket-doc" "rackunit-lib" "scribble-rainbow-delimiters")) (description . "Racket wrapper of Qweather(和风天气)  API") (implies . ()) (last-checked . 1632904407) (last-edit . 1614444622) (last-updated . 1621959904) (modules . ((lib "qweather/city.rkt") (lib "qweather/private/params.rkt") (lib "qweather/warning.rkt") (lib "qweather/scribblings/qweather.scrbl") (lib "qweather/private/core.rkt") (lib "qweather/forecast.rkt") (lib "qweather/main.rkt"))) (name . "qweather") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:yanyingwang1@gmail.com . #t) (forecasting . #t) (ring:1 . #t) (weather . #t))) (source . "https://github.com/yanyingwang/qweather.git") (tags . ("forecasting" "weather")) (versions . #hash((default . #hasheq((checksum . "7288f7deeb3d7f5a7f1f59ec48eb6e03850e75d3") (source . "https://github.com/yanyingwang/qweather.git") (source_url . "https://github.com/yanyingwang/qweather.git"))))))) ("r-cade" . #hasheq((author . "massung@gmail.com") (authors . ("massung@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/r-cade.txt") (docs . (("main" "r-cade" "doc/r-cade@r-cade/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/r-cade.txt") (test-failure-log . "server/built/test-fail/r-cade.txt") (test-success-log . #f))) (checksum . "aede5ea5b019775d5beba219baf6a19ef4d4bfca") (checksum-error . #f) (collection . "r-cade") (conflicts . ()) (date-added . 1580498839) (dependencies . ("base" "csfml")) (description . "Retro game engine.") (implies . ()) (last-checked . 1632904407) (last-edit . 1581032849) (last-updated . 1621528309) (modules . ((lib "r-cade/examples/snake.rkt") (lib "r-cade/examples/centipede.rkt") (lib "r-cade/video.rkt") (lib "r-cade/examples/invaders.rkt") (lib "r-cade/palette.rkt") (lib "r-cade/riff.rkt") (lib "r-cade/anim.rkt") (lib "r-cade/examples/derby.rkt") (lib "r-cade/scribblings/r-cade.scrbl") (lib "r-cade/examples/twinkle.rkt") (lib "r-cade/examples/shooter.rkt") (lib "r-cade/examples/columns.rkt") (lib "r-cade/input.rkt") (lib "r-cade/examples/fonts.rkt") (lib "r-cade/draw.rkt") (lib "r-cade/time.rkt") (lib "r-cade/examples/defender.rkt") (lib "r-cade/sound.rkt") (lib "r-cade/examples/flappy.rkt") (lib "r-cade/shader.rkt") (lib "r-cade/music.rkt") (lib "r-cade/examples/breakout.rkt") (lib "r-cade/audio.rkt") (lib "r-cade/main.rkt") (lib "r-cade/examples/tetris.rkt") (lib "r-cade/game.rkt") (lib "r-cade/voice.rkt") (lib "r-cade/font.rkt"))) (name . "r-cade") (ring . 1) (search-terms . #hasheq((2d . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:massung@gmail.com . #t) (csfml . #t) (game . #t) (game-engine . #t) (ring:1 . #t))) (source . "https://github.com/massung/r-cade.git") (tags . ("2d" "csfml" "game" "game-engine")) (versions . #hash((default . #hasheq((checksum . "aede5ea5b019775d5beba219baf6a19ef4d4bfca") (source . "https://github.com/massung/r-cade.git") (source_url . "https://github.com/massung/r-cade.git"))))))) ("r-lexer" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "r-lexer" "doc/r-lexer@r-lexer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/r-lexer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/r-lexer.txt"))) (checksum . "0f19dd7364b69507a6f5d41ea4d77f85b24d5449") (checksum-error . #f) (collection . "r-lexer") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "parser-tools-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1632904408) (last-edit . 1441985570) (last-updated . 1502816341) (modules . ((lib "r-lexer/main.rkt") (lib "r-lexer/scribblings/r-lexer.scrbl") (lib "r-lexer/lang/reader.rkt"))) (name . "r-lexer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "git://github.com/LeifAndersen/racket-r-lexer") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0f19dd7364b69507a6f5d41ea4d77f85b24d5449") (source . "git://github.com/LeifAndersen/racket-r-lexer") (source_url . "http://github.com/LeifAndersen/racket-r-lexer/tree/master"))))))) ("r-linq" . #hasheq((author . "trajafri@gmail.com pkoronke@iu.edu") (authors . ("trajafri@gmail.com" "pkoronke@iu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "r-linq" "doc/r-linq@r-linq/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/r-linq.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/r-linq.txt"))) (checksum . "e41a733b91fc32001d09fe8ff25a0b2c0a06e34c") (checksum-error . #f) (collection . "r-linq") (conflicts . ()) (date-added . 1561339779) (dependencies . ("base" "rackunit" "racket-doc" "scribble-lib")) (description . "LINQ implemented in Racket.") (implies . ()) (last-checked . 1632904408) (last-edit . 1561603499) (last-updated . 1629531204) (modules . ((lib "r-linq/main.rkt") (lib "r-linq/main.scrbl") (lib "r-linq/linq-tests.rkt"))) (name . "r-linq") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:pkoronke@iu.edu . #t) (author:trajafri@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/trajafri/r-linq.git") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "e41a733b91fc32001d09fe8ff25a0b2c0a06e34c") (source . "https://github.com/trajafri/r-linq.git") (source_url . "https://github.com/trajafri/r-linq.git"))))))) ("r16" . #hasheq((author . "williewillus@vincent-lee.net") (authors . ("williewillus@vincent-lee.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/r16.txt") (docs . (("main" "r16" "doc/r16@r16/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/r16.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/r16.txt"))) (checksum . "00b4ba8325670cfe5c4bdd4d9116dc69cf1cf206") (checksum-error . #f) (collection . "r16") (conflicts . ()) (date-added . 1614541039) (dependencies . ("base" "racket-cord" "sandbox-lib" "slideshow-lib" "threading-lib" "racket-doc" "rackunit-lib" "scribble-lib" "threading-doc")) (description . "A Discord trick bot in Racket") (implies . ()) (last-checked . 1632904408) (last-edit . 1614542565) (last-updated . 1632882781) (modules . ((lib "r16/scribblings/r16.scrbl") (lib "r16/presentation/main.rkt") (lib "r16/trick.rkt") (lib "r16/interface.rkt") (lib "r16/common.rkt") (lib "r16/log.rkt") (lib "r16/evaluator.rkt") (lib "r16/frontends/discord.rkt") (lib "r16/main.rkt") (lib "r16/backend.rkt") (lib "r16/config.rkt") (lib "r16/utils.rkt") (lib "r16/trick-db.rkt"))) (name . "r16") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:williewillus@vincent-lee.net . #t) (bot . #t) (discord . #t) (ring:1 . #t) (sandbox . #t))) (source . "https://github.com/williewillus/r16.git") (tags . ("bot" "discord" "sandbox")) (versions . #hash((default . #hasheq((checksum . "00b4ba8325670cfe5c4bdd4d9116dc69cf1cf206") (source . "https://github.com/williewillus/r16.git") (source_url . "https://github.com/williewillus/r16.git"))))))) ("r5rs" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("r5rs-lib" "r5rs-doc")) (description . "Legacy R5RS (Scheme) language") (implies . ("r5rs-lib" "r5rs-doc")) (last-checked . 1632904408) (last-edit . 1417659583) (last-updated . 1571887253) (modules . ()) (name . "r5rs") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "905eb5dd53765eae8ed9a3ad3b6d3d4a859654e1") (source . "git://github.com/racket/r5rs/?path=r5rs") (source_url . "git://github.com/racket/r5rs/?path=r5rs"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("r5rs-doc" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "r5rs" "doc/r5rs@r5rs-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "mzscheme-doc" "scheme-lib" "scribble-lib" "r5rs-lib" "compatibility-lib" "racket-doc")) (description . "documentation part of r5rs") (implies . ()) (last-checked . 1632904408) (last-edit . 1417659583) (last-updated . 1571887254) (modules . ((lib "r5rs/r5rs.scrbl"))) (name . "r5rs-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "905eb5dd53765eae8ed9a3ad3b6d3d4a859654e1") (source . "git://github.com/racket/r5rs/?path=r5rs-doc") (source_url . "git://github.com/racket/r5rs/?path=r5rs-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("r5rs-lib" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "base" "compatibility-lib")) (description . "implementation (no documentation) part of r5rs") (implies . ()) (last-checked . 1632904409) (last-edit . 1417659583) (last-updated . 1571887255) (modules . ((lib "r5rs/r5rs.rkt") (lib "r5rs/init.rkt") (lib "r5rs/lang.rkt") (lib "r5rs/main.rkt") (lib "r5rs/run.rkt") (lib "r5rs/lang/reader.rkt") (lib "r5rs/private/r5rs-trans.rkt"))) (name . "r5rs-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "905eb5dd53765eae8ed9a3ad3b6d3d4a859654e1") (source . "git://github.com/racket/r5rs/?path=r5rs-lib") (source_url . "git://github.com/racket/r5rs/?path=r5rs-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("r6rs" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("r6rs-lib" "r6rs-doc")) (description . "Legacy R6RS (Scheme) language") (implies . ("r6rs-lib" "r6rs-doc")) (last-checked . 1632904409) (last-edit . 1417659583) (last-updated . 1572906057) (modules . ()) (name . "r6rs") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "f27fb987f6e9268ce28892d269eb21b5a66677f8") (source . "git://github.com/racket/r6rs/?path=r6rs") (source_url . "git://github.com/racket/r6rs/?path=r6rs"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("r6rs-doc" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "r6rs" "doc/r6rs@r6rs-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("racket-index" "r5rs-doc" "base" "scribble-lib" "r6rs-lib" "racket-doc")) (description . "documentation part of r6rs") (implies . ()) (last-checked . 1632904409) (last-edit . 1417659583) (last-updated . 1572906058) (modules . ((lib "r6rs/tests/test-docs-complete.rkt") (lib "r6rs/scribblings/r6rs.scrbl"))) (name . "r6rs-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "f27fb987f6e9268ce28892d269eb21b5a66677f8") (source . "git://github.com/racket/r6rs/?path=r6rs-doc") (source_url . "git://github.com/racket/r6rs/?path=r6rs-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("r6rs-lib" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "base" "r5rs-lib" "compatibility-lib")) (description . "implementation (no documentation) part of r6rs") (implies . ()) (last-checked . 1632904410) (last-edit . 1417659583) (last-updated . 1572906059) (modules . ((lib "rnrs/io/ports-6.rkt") (lib "r6rs/private/io-conds.rkt") (lib "rnrs/unicode-6.rkt") (lib "rnrs/enums-6.rkt") (lib "r6rs/private/inline-rules.rkt") (lib "r6rs/private/find-version.rkt") (lib "rnrs/base-6.rkt") (lib "rnrs/r5rs-6.rkt") (lib "r6rs/private/records-core.rkt") (lib "rnrs/hashtables-6.rkt") (lib "rnrs/lists-6.rkt") (lib "r6rs/private/encode-name.rkt") (lib "r6rs/private/exns.rkt") (lib "rnrs/control-6.rkt") (lib "rnrs/main.rkt") (lib "r6rs/private/ports.rkt") (lib "rnrs/bytevectors-6.rkt") (lib "rnrs/mutable-strings-6.rkt") (lib "rnrs/programs-6.rkt") (lib "r6rs/private/identifier-syntax.rkt") (lib "r6rs/private/records-explicit.rkt") (lib "rnrs/exceptions-6.rkt") (lib "rnrs/eval-6.rkt") (lib "rnrs/conditions-6.rkt") (lib "r6rs/private/reconstruct.rkt") (lib "r6rs/lang/reader.rkt") (lib "r6rs/private/no-set.rkt") (lib "rnrs/io/simple-6.rkt") (lib "r6rs/private/check-pattern.rkt") (lib "rnrs/sorting-6.rkt") (lib "r6rs/private/qq-gen.rkt") (lib "r6rs/run.rkt") (lib "r6rs/private/num-inline.rkt") (lib "r6rs/private/conds.rkt") (lib "rnrs/records/syntactic-6.rkt") (lib "rnrs/arithmetic/bitwise-6.rkt") (lib "rnrs/main-6.rkt") (lib "rnrs/records/inspection-6.rkt") (lib "rnrs/arithmetic/flonums-6.rkt") (lib "rnrs/syntax-case-6.rkt") (lib "r6rs/private/readtable.rkt") (lib "rnrs/arithmetic/fixnums-6.rkt") (lib "rnrs/files-6.rkt") (lib "r6rs/private/parse-ref.rkt") (lib "rnrs/mutable-pairs-6.rkt") (lib "r6rs/private/vector-types.rkt") (lib "r6rs/private/prelims.rkt") (lib "r6rs/main.rkt") (lib "r6rs/private/base-for-syntax.rkt") (lib "rnrs/records/procedural-6.rkt"))) (name . "r6rs-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "f27fb987f6e9268ce28892d269eb21b5a66677f8") (source . "git://github.com/racket/r6rs/?path=r6rs-lib") (source_url . "git://github.com/racket/r6rs/?path=r6rs-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("r6rs-test" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "r6rs-lib")) (description . "tests for r6rs") (implies . ()) (last-checked . 1632904410) (last-edit . 1417659583) (last-updated . 1572906060) (modules . ((lib "tests/r6rs/io/sync.rkt"))) (name . "r6rs-test") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "f27fb987f6e9268ce28892d269eb21b5a66677f8") (source . "git://github.com/racket/r6rs/?path=r6rs-test") (source_url . "git://github.com/racket/r6rs/?path=r6rs-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("r7rs" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/r7rs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/r7rs.txt"))) (checksum . "5834ec6e66f63c61589130aaebd0f25ab3eefc2b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "r7rs-lib")) (description . "An implementation of R7RS as a #lang") (implies . ("r7rs-lib")) (last-checked . 1632904410) (last-edit . 1462746878) (last-updated . 1566471212) (modules . ()) (name . "r7rs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-r7rs?path=r7rs") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5834ec6e66f63c61589130aaebd0f25ab3eefc2b") (source . "git://github.com/lexi-lambda/racket-r7rs?path=r7rs") (source_url . "http://github.com/lexi-lambda/racket-r7rs/tree/master?path=r7rs"))))))) ("r7rs-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/r7rs-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/r7rs-lib.txt"))) (checksum . "5834ec6e66f63c61589130aaebd0f25ab3eefc2b") (checksum-error . #f) (collection . "r7rs") (conflicts . ()) (dependencies . ("base" "compatibility-lib" "r5rs-lib" "r6rs-lib" "rackunit-lib")) (description . "") (implies . ()) (last-checked . 1632904410) (last-edit . 1446266165) (last-updated . 1566471213) (modules . ((lib "r7rs/private/exception.rkt") (lib "r7rs/private/case.rkt") (lib "r7rs/base.rkt") (lib "r7rs/char.rkt") (lib "r7rs/private/mutability.rkt") (lib "r7rs/case-lambda.rkt") (lib "r7rs/private/math.rkt") (lib "r7rs/inexact.rkt") (lib "r7rs/private/bytevector.rkt") (lib "r7rs/main.rkt") (lib "r7rs/lang/private/symbol.rkt") (lib "r7rs/r5rs.rkt") (lib "r7rs/lang/private/bytevector.rkt") (lib "r7rs/load.rkt") (lib "r7rs/lang/private/char.rkt") (lib "r7rs/private/strip-prefix.rkt") (lib "r7rs/process-context.rkt") (lib "r7rs/private/import.rkt") (lib "r7rs/load/lang/language.rkt") (lib "r7rs/private/string.rkt") (lib "r7rs/private/record.rkt") (lib "r7rs/lang/reader.rkt") (lib "r7rs/private/cond-expand.rkt") (lib "r7rs/private/library.rkt") (lib "r7rs/load/lang/reader.rkt") (lib "r7rs/private/list.rkt") (lib "r7rs/cxr.rkt") (lib "r7rs/private/export.rkt") (lib "r7rs/repl.rkt") (lib "r7rs/lang/private/string.rkt") (lib "r7rs/lazy.rkt") (lib "r7rs/complex.rkt") (lib "r7rs/write.rkt") (lib "r7rs/time.rkt") (lib "r7rs/eval.rkt") (lib "r7rs/read.rkt") (lib "r7rs/private/define-values.rkt") (lib "r7rs/lang/private/directive.rkt") (lib "r7rs/private/vector.rkt") (lib "r7rs/file.rkt"))) (name . "r7rs-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-r7rs?path=r7rs-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5834ec6e66f63c61589130aaebd0f25ab3eefc2b") (source . "git://github.com/lexi-lambda/racket-r7rs?path=r7rs-lib") (source_url . "http://github.com/lexi-lambda/racket-r7rs/tree/master?path=r7rs-lib"))))))) ("raart" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/raart.txt") (docs . (("main" "raart" "doc/raart@raart/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/raart.txt") (success-log . "server/built/install/raart.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raart.txt"))) (checksum . "9d82f2f8ad0052c2f4a6a75a00d957b9806f33df") (checksum-error . #f) (collection . "raart") (conflicts . ()) (dependencies . ("lux" "unix-signals" "reprovide-lang" "ansi" "struct-define" "base" "sandbox-lib" "htdp-doc" "racket-doc" "scribble-lib")) (description . "racket ansi art") (implies . ()) (last-checked . 1632904411) (last-edit . 1514852717) (last-updated . 1587050136) (modules . ((lib "raart/main.rkt") (lib "raart/kitty.rkt") (lib "raart/raart.scrbl") (lib "raart/buffer.rkt") (lib "raart/t/key.rkt") (lib "raart/t/hack.rkt") (lib "raart/t/kitty.rkt") (lib "raart/draw.rkt") (lib "raart/t/draw.rkt") (lib "raart/kitty-init.rkt") (lib "raart/lux-chaos.rkt") (lib "raart/size.rkt"))) (name . "raart") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (ansi . #t) (art . #t) (author:jay.mccarthy@gmail.com . #t) (graphics . #t) (ring:1 . #t) (terminal . #t) (ui . #t))) (source . "https://github.com/jeapostrophe/raart.git") (tags . ("ansi" "art" "graphics" "terminal" "ui")) (versions . #hash((default . #hasheq((checksum . "9d82f2f8ad0052c2f4a6a75a00d957b9806f33df") (source . "https://github.com/jeapostrophe/raart.git") (source_url . "https://github.com/jeapostrophe/raart.git"))))))) ("rackcheck" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackcheck" "doc/rackcheck@rackcheck/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackcheck.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackcheck.txt"))) (checksum . "c24e53d44391f7c764973afa4be7dd955dd8bd15") (checksum-error . #f) (collection . "rackcheck") (conflicts . ()) (date-added . 1583921387) (dependencies . ("base" "rackunit-lib" "racket-doc" "rackunit-doc" "rackunit-lib" "scribble-lib")) (description . "A property-based testing library with shrinking support.") (implies . ()) (last-checked . 1632904411) (last-edit . 1583921387) (last-updated . 1631950371) (modules . ((lib "rackcheck/examples/json.rkt") (lib "rackcheck/examples/ring.rkt") (lib "rackcheck/prop.rkt") (lib "rackcheck/examples/coin.rkt") (lib "rackcheck/gen/core.rkt") (lib "rackcheck/examples/distance.rkt") (lib "rackcheck/private/stream.rkt") (lib "rackcheck/examples/list.rkt") (lib "rackcheck/main.rkt") (lib "rackcheck/rackcheck.scrbl") (lib "rackcheck/gen/unicode.rkt") (lib "rackcheck/gen/base.rkt") (lib "rackcheck/rackunit.rkt") (lib "rackcheck/gen/syntax.rkt") (lib "rackcheck/examples/web-api.rkt"))) (name . "rackcheck") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (quickcheck . #t) (ring:1 . #t) (testing . #t))) (source . "https://github.com/Bogdanp/rackcheck.git") (tags . ("quickcheck" "testing")) (versions . #hash((default . #hasheq((checksum . "c24e53d44391f7c764973afa4be7dd955dd8bd15") (source . "https://github.com/Bogdanp/rackcheck.git") (source_url . "https://github.com/Bogdanp/rackcheck.git"))))))) ("rackdis" . #hasheq((author . "euler90h@gmail.com") (authors . ("euler90h@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackdis" "doc/rackdis@rackdis/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackdis.txt") (test-failure-log . "server/built/test-fail/rackdis.txt") (test-success-log . #f))) (checksum . "975aeb46b6432d2359fb1c625f69ae5b97f450d1") (checksum-error . #f) (collection . "rackdis") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Redis bindings") (implies . ()) (last-checked . 1632904411) (last-edit . 1440124617) (last-updated . 1502816347) (modules . ((lib "rackdis/scribblings/rackdis.scrbl") (lib "rackdis/resp.rkt") (lib "rackdis/main.rkt") (lib "rackdis/test.rkt"))) (name . "rackdis") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (Redis . #t) (author:euler90h@gmail.com . #t) (db . #t) (ring:1 . #t))) (source . "git://github.com/eu90h/rackdis") (tags . ("db" "Redis")) (versions . #hash((default . #hasheq((checksum . "975aeb46b6432d2359fb1c625f69ae5b97f450d1") (source . "git://github.com/eu90h/rackdis") (source_url . "http://github.com/eu90h/rackdis/tree/master"))))))) ("racket-aarch64-macosx-3" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-aarch64-macosx-3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-aarch64-macosx-3.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . "download-checksum: error from server\n  URL: https://pkg-sources.racket-lang.org/pkgs/88af0fa35da0cbc0ca242e4e89c84912f8b524a6/racket-aarch64-macosx-3.zip.CHECKSUM\n  status code: 403\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/network.rkt:59:3\n   /home/pkgserver/pkg-index/official/update.rkt:92:22\n   /home/pkgserver/racket/collects/racket/private/more-scheme.rkt:343:2: do-hash-update\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for racket package") (implies . ()) (last-checked . 1632904412) (last-edit . 1607103943) (last-updated . 1623886389) (modules . ()) (name . "racket-aarch64-macosx-3") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:error: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f0932cc3ef7c5d26b325bc1ac0826811e77a3fc3") (source . "https://pkg-sources.racket-lang.org/pkgs/f0932cc3ef7c5d26b325bc1ac0826811e77a3fc3/racket-aarch64-macosx-3.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/f0932cc3ef7c5d26b325bc1ac0826811e77a3fc3/racket-aarch64-macosx-3.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("racket-benchmarks" . #hasheq((author . "eli@racket-lang.org jay@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org samth@racket-lang.org stamourv@racket-lang.org") (authors . ("eli@racket-lang.org" "jay@racket-lang.org" "mflatt@racket-lang.org" "robby@racket-lang.org" "samth@racket-lang.org" "stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "r5rs-lib" "scheme-lib" "racket-test" "typed-racket-lib" "plot" "draw-lib" "gui-lib" "pict-lib")) (implies . ()) (last-checked . 1632904412) (last-edit . 1460066358) (last-updated . 1632667020) (modules . ((lib "tests/racket/benchmarks/shootout/auto.rkt") (lib "tests/racket/benchmarks/common/scheme2.rkt") (lib "tests/racket/benchmarks/common/typed/cpstak-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/hello.rkt") (lib "tests/racket/benchmarks/shootout/typed/cheapconcurrency-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/ackermann.rkt") (lib "tests/racket/benchmarks/common/maze2.rkt") (lib "tests/racket/benchmarks/shootout/typed/lists-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/hash2-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/fasta-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/earley.rkt") (lib "tests/racket/benchmarks/shootout/typed/echo-optimizing.rkt") (lib "tests/racket/benchmarks/places/symbols.rkt") (lib "tests/racket/benchmarks/shootout/fasta-new.rkt") (lib "tests/racket/benchmarks/common/typed/wrapper.rkt") (lib "tests/racket/benchmarks/common/nfa.rkt") (lib "tests/racket/benchmarks/shootout/recursive.rkt") (lib "tests/racket/benchmarks/shootout/pidigits.rkt") (lib "tests/racket/benchmarks/rx/pcre.rkt") (lib "tests/racket/benchmarks/shootout/binarytrees-places.rkt") (lib "tests/racket/benchmarks/common/typed/paraffins-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/collatz.rkt") (lib "tests/racket/benchmarks/shootout/mandelbrot.rkt") (lib "tests/racket/benchmarks/common/triangle.rkt") (lib "tests/racket/benchmarks/common/typed/takr2-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/maze2-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/nqueens.rkt") (lib "tests/racket/benchmarks/common/lattice2.rkt") (lib "tests/racket/benchmarks/common/scheme-i2.rkt") (lib "tests/racket/benchmarks/common/scheme-c2.rkt") (lib "tests/racket/benchmarks/shootout/typed/reversefile-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/binarytrees-normal.rkt") (lib "tests/racket/benchmarks/shootout/fibo.rkt") (lib "tests/racket/benchmarks/common/typed/graphs-optimizing.rkt") (lib "mini-bar-plot/bm.rkt") (lib "tests/racket/benchmarks/shootout/typed/nbody-generic-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/nucleic3-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/deriv-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/nfa-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/fft-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/nfa-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/fft-optimizing.rkt") (lib "tests/racket/benchmarks/hash/remove.rkt") (lib "tests/racket/benchmarks/shootout/typed/nsievebits-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/takr.rkt") (lib "tests/racket/benchmarks/common/graphs.rkt") (lib "tests/racket/benchmarks/shootout/typed/reversecomplement-optimizing.rkt") (lib "tests/racket/benchmarks/common/wrap.rkt") (lib "tests/racket/benchmarks/shootout/typed/sumcol-optimizing.rkt") (lib "tests/racket/benchmarks/redrawing-ala-drracket.rkt") (lib "tests/racket/benchmarks/common/deriv.rkt") (lib "tests/racket/benchmarks/shootout/typed/fannkuch-optimizing.rkt") (lib "tests/racket/benchmarks/places/place-channel.rkt") (lib "tests/racket/benchmarks/common/typed/collatz-q-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/fibo-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/mandelbrot-generic-optimizing.rkt") (lib "tests/racket/benchmarks/common/dderiv.rkt") (lib "tests/racket/benchmarks/shootout/typed/nbody-vec-generic-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/hash.rkt") (lib "tests/racket/benchmarks/common/collatz-q.rkt") (lib "tests/racket/benchmarks/common/nestedloop.rkt") (lib "tests/racket/benchmarks/common/typed/takr-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/takl-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/regexmatch.rkt") (lib "tests/racket/benchmarks/shootout/typed/regexmatch-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/nothing.rkt") (lib "tests/racket/benchmarks/shootout/typed/pidigits1-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/except-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/nestedloop-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/strcat-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/strcat.rkt") (lib "tests/racket/benchmarks/common/psyntax.rkt") (lib "tests/racket/benchmarks/shootout/cheapconcurrency.rkt") (lib "tests/racket/benchmarks/control/param.rkt") (lib "tests/racket/benchmarks/common/cmdline.rkt") (lib "tests/racket/benchmarks/control/thread.rkt") (lib "tests/racket/benchmarks/common/sort1.rkt") (lib "tests/racket/benchmarks/common/typed/deriv-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/ackermann-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/except.rkt") (lib "tests/racket/benchmarks/shootout/k-nucleotide-bytes-par.rkt") (lib "tests/racket/benchmarks/shootout/typed/nbody-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/graphs-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/takl.rkt") (lib "tests/racket/benchmarks/common/nothing.rkt") (lib "tests/racket/benchmarks/shootout/k-nucleotide.rkt") (lib "tests/racket/benchmarks/common/typed/nqueens-optimizing.rkt") (lib "tests/racket/benchmarks/common/sboyer.rkt") (lib "tests/racket/benchmarks/mz/parsing.rkt") (lib "tests/racket/benchmarks/common/typed/collatz-q-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/collatz-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/regexpdna-places.rkt") (lib "tests/racket/benchmarks/common/typed/nucleic3-optimizing.rkt") (lib "tests/racket/benchmarks/control/immediate.rkt") (lib "tests/racket/benchmarks/common/typed/triangle-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/mandelbrot-non-optimizing.rkt") (lib "tests/racket/benchmarks/hash/set.rkt") (lib "tests/racket/benchmarks/shootout/typed/sieve-optimizing.rkt") (lib "tests/racket/benchmarks/common/puzzle.rkt") (lib "tests/racket/benchmarks/common/div.rkt") (lib "tests/racket/benchmarks/common/tabulate.rkt") (lib "tests/racket/benchmarks/shootout/sieve.rkt") (lib "tests/racket/benchmarks/control/cell.rkt") (lib "tests/racket/benchmarks/common/typed/mazefun-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/pidigits-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/cheapconcurrency-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/partialsums-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/regexpdna-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/nbody-vec-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/collatz-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/fannkuch-redux.rkt") (lib "tests/racket/benchmarks/common/paraffins.rkt") (lib "tests/racket/benchmarks/control/hasheq.rkt") (lib "tests/racket/benchmarks/shootout/matrix.rkt") (lib "tests/racket/benchmarks/shootout/ary.rkt") (lib "tests/racket/benchmarks/shootout/typed/sieve-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/spellcheck-optimizing.rkt") (lib "tests/racket/benchmarks/rx/auto.rkt") (lib "tests/racket/benchmarks/shootout/nsieve.rkt") (lib "tests/racket/benchmarks/shootout/typed/echo-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/meteor-optimizing.rkt") (lib "tests/racket/benchmarks/common/dynamic.rkt") (lib "tests/racket/benchmarks/control/baseline.rkt") (lib "tests/racket/benchmarks/shootout/typed/fannkuch-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/echo.rkt") (lib "tests/racket/benchmarks/shootout/nbody-generic.rkt") (lib "tests/racket/benchmarks/common/typed/takr2-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/maze2-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/wordfreq-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/thread-ring-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/spectralnorm-generic-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/auto.rkt") (lib "tests/racket/benchmarks/shootout/typed/fannkuch-redux-optimizing.rkt") (lib "tests/racket/benchmarks/places/place-processes.rkt") (lib "tests/racket/benchmarks/common/conform.rkt") (lib "tests/racket/benchmarks/chaperone/config.rkt") (lib "tests/racket/benchmarks/common/nboyer.rkt") (lib "tests/racket/benchmarks/shootout/typed/spectralnorm-generic-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/ary-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/thread-ring.rkt") (lib "tests/racket/benchmarks/shootout/typed/wc-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/nbody-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/pidigits1.rkt") (lib "tests/racket/benchmarks/common/fft.rkt") (lib "tests/racket/benchmarks/common/scheme-c.rkt") (lib "tests/racket/benchmarks/shootout/typed/ackermann-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/lattice2-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/div-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/chameneos-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/run.rkt") (lib "tests/racket/benchmarks/shootout/typed/lists-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/hash2-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/fasta-optimizing.rkt") (lib "tests/racket/benchmarks/hash/all.rkt") (lib "tests/racket/benchmarks/shootout/typed/reversecomplement-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/ary-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/div-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/binarytrees.rkt") (lib "tests/racket/benchmarks/control/sync.rkt") (lib "tests/racket/benchmarks/shootout/spectralnorm-par.rkt") (lib "tests/racket/benchmarks/hash/config.rkt") (lib "tests/racket/benchmarks/shootout/spectralnorm.rkt") (lib "tests/racket/benchmarks/shootout/typed/pidigits-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/cpstak-non-optimizing.rkt") (lib "tests/racket/benchmarks/mz/redsem.rkt") (lib "tests/racket/benchmarks/shootout/hash2.rkt") (lib "tests/racket/benchmarks/shootout/typed/nsievebits-optimizing.rkt") (lib "tests/racket/benchmarks/mz/expand-class.rkt") (lib "tests/racket/benchmarks/shootout/moments.rkt") (lib "tests/racket/benchmarks/shootout/typed/recursive-optimizing.rkt") (lib "tests/racket/benchmarks/common/takr2.rkt") (lib "tests/racket/benchmarks/shootout/typed/recursive-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/peval.rkt") (lib "tests/racket/benchmarks/shootout/typed/binarytrees-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/wordfreq-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/nothing-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/mandelbrot-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/tak-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/ray-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/binarytrees-optimizing.rkt") (lib "tests/racket/benchmarks/mz/ssax.rkt") (lib "tests/racket/benchmarks/shootout/partialsums.rkt") (lib "tests/racket/benchmarks/shootout/spectralnorm-generic.rkt") (lib "tests/racket/benchmarks/common/cpstak.rkt") (lib "tests/racket/benchmarks/shootout/typed/wc-optimizing.rkt") (lib "tests/racket/benchmarks/chaperone/struct.rkt") (lib "tests/racket/benchmarks/hash/ref.rkt") (lib "tests/racket/benchmarks/shootout/typed/nbody-vec-optimizing.rkt") (lib "tests/racket/benchmarks/common/lattice.rkt") (lib "tests/racket/benchmarks/shootout/typed/reversefile-non-optimizing.rkt") (lib "tests/racket/benchmarks/hash/subset.rkt") (lib "tests/racket/benchmarks/common/nucleic3.rkt") (lib "tests/racket/benchmarks/shootout/typed/moments-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/triangle-optimizing.rkt") (lib "tests/racket/benchmarks/control/barrier.rkt") (lib "tests/racket/benchmarks/shootout/typed/hello-optimizing.rkt") (lib "mini-bar-plot/main.rkt") (lib "tests/racket/benchmarks/hash/summary.rkt") (lib "tests/racket/benchmarks/common/typed/paraffins-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/nbody.rkt") (lib "tests/racket/benchmarks/shootout/nestedloop.rkt") (lib "tests/racket/benchmarks/shootout/typed/heapsort-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/nothing-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/hash-non-optimizing.rkt") (lib "tests/racket/benchmarks/hash/iterate.rkt") (lib "tests/racket/benchmarks/shootout/regexpdna.rkt") (lib "tests/racket/benchmarks/shootout/typed/except-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/pidigits-gmp.rkt") (lib "tests/racket/benchmarks/common/kanren.rkt") (lib "tests/racket/benchmarks/shootout/mandelbrot-generic.rkt") (lib "tests/racket/benchmarks/shootout/random.rkt") (lib "tests/racket/benchmarks/shootout/typed/k-nucleotide-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/puzzle-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/moments-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/nbody-vec-generic-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/meteor-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/matrix-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/spellcheck.rkt") (lib "tests/racket/benchmarks/common/typed/nothing-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/spellcheck-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/strcat-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/wrap-common.rkt") (lib "tests/racket/benchmarks/common/typed/tak-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/ray-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/lattice2-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/meteor.rkt") (lib "tests/racket/benchmarks/shootout/wc.rkt") (lib "tests/racket/benchmarks/shootout/typed/spectralnorm-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/fannkuch.rkt") (lib "tests/racket/benchmarks/control/cont.rkt") (lib "tests/racket/benchmarks/common/typed/nothing-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/nqueens-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/dderiv-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/matrix-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/k-nucleotide-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/regexpdna-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/nestedloop-optimizing.rkt") (lib "tests/racket/benchmarks/control/mark.rkt") (lib "tests/racket/benchmarks/common/typed/dderiv-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/nbody-vec.rkt") (lib "tests/racket/benchmarks/control/exn.rkt") (lib "tests/racket/benchmarks/places/place-launch.rkt") (lib "tests/racket/benchmarks/control/compose.rkt") (lib "tests/racket/benchmarks/common/tak.rkt") (lib "tests/racket/benchmarks/shootout/typed/wrapper.rkt") (lib "tests/racket/benchmarks/common/destruct.rkt") (lib "tests/future/timing-test.rkt") (lib "tests/racket/benchmarks/shootout/fasta.rkt") (lib "tests/racket/benchmarks/common/typed/ctak-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/heapsort-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/nsievebits.rkt") (lib "tests/racket/benchmarks/shootout/typed/fibo-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/nsieve-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/chameneos.rkt") (lib "tests/racket/benchmarks/common/scheme-i.rkt") (lib "tests/racket/benchmarks/shootout/nbody-vec-generic.rkt") (lib "tests/racket/benchmarks/control/capture-mark.rkt") (lib "tests/racket/benchmarks/shootout/typed/thread-ring-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/mazefun-optimizing.rkt") (lib "tests/racket/benchmarks/common/scheme.rkt") (lib "tests/racket/benchmarks/shootout/wordfreq.rkt") (lib "tests/racket/benchmarks/shootout/typed/hello-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/chameneos-optimizing.rkt") (lib "tests/racket/benchmarks/common/dynamic2.rkt") (lib "tests/racket/benchmarks/common/nucleic2.rkt") (lib "tests/racket/benchmarks/common/maze.rkt") (lib "tests/racket/benchmarks/shootout/typed/random-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/ctak-optimizing.rkt") (lib "tests/racket/benchmarks/common/mazefun.rkt") (lib "tests/racket/benchmarks/shootout/typed/regexmatch-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/puzzle-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/nsieve-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/spectralnorm-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/ctak.rkt") (lib "tests/racket/benchmarks/shootout/lists.rkt") (lib "tests/racket/benchmarks/shootout/reversefile.rkt") (lib "tests/racket/benchmarks/shootout/typed/partialsums-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/fannkuch-redux-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/hash-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/reversecomplement.rkt") (lib "tests/racket/benchmarks/shootout/typed/nbody-generic-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/sumcol-non-optimizing.rkt") (lib "tests/racket/benchmarks/common/ray.rkt") (lib "tests/racket/benchmarks/common/typed/nestedloop-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/heapsort.rkt") (lib "tests/racket/benchmarks/control/get.rkt") (lib "tests/racket/benchmarks/common/typed/takr-optimizing.rkt") (lib "tests/racket/benchmarks/common/typed/takl-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/mandelbrot-futures.rkt") (lib "tests/racket/benchmarks/common/typed/nestedloop-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/random-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/sumcol.rkt") (lib "tests/racket/benchmarks/shootout/typed/mandelbrot-generic-non-optimizing.rkt") (lib "tests/racket/benchmarks/shootout/typed/pidigits1-optimizing.rkt"))) (name . "racket-benchmarks") (ring . 1) (search-terms . #hasheq((:no-desc: . #t) (author:eli@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (author:stamourv@racket-lang.org . #t) (main-tests . #t) (ring:1 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "git://github.com/racket/racket/?path=pkgs/racket-benchmarks") (source_url . "git://github.com/racket/racket/?path=pkgs/racket-benchmarks"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("racket-bricks" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/racket-bricks.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e3653cac8500883e91feefd6462cb413751d0c16") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("https://github.com/thoughtstem/game-engine.git" "https://github.com/thoughtstem/game-engine-demos.git?path=game-engine-demos-common")) (description . "This is the basic package for Racket Bricks.   \r\n\r\nhttps://youtu.be/yJt0kKE9YxQ\r\n\r\nMost of the code is here.  But to use this in DrRacket, you'll also need brick-snip and brick-tool.") (implies . ()) (last-checked . 1632904412) (last-edit . 1529423470) (last-updated . 1539987391) (modules . ((lib "racket-bricks/racket-bricks-module.rkt") (lib "racket-bricks/main.rkt") (lib "racket-bricks/editor.rkt") (lib "racket-bricks/renderer.rkt") (lib "racket-bricks/model.rkt"))) (name . "racket-bricks") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (DrRacket . #t) (author:stephen@thoughtstem.com . #t) (blockly . #t) (education . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/racket-blocks.git?path=racket-bricks") (tags . ("blockly" "DrRacket" "education")) (versions . #hash((default . #hasheq((checksum . "e3653cac8500883e91feefd6462cb413751d0c16") (source . "https://github.com/thoughtstem/racket-blocks.git?path=racket-bricks") (source_url . "https://github.com/thoughtstem/racket-blocks.git?path=racket-bricks"))))))) ("racket-build-guide" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racket-build-guide" "doc/racket-build-guide@racket-build-guide/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-build-guide.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-build-guide.txt"))) (checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "scribble-doc" "distro-build-doc")) (description . "Racket build and contribution documentation") (implies . ()) (last-checked . 1632904413) (last-edit . 1571157973) (last-updated . 1632667046) (modules . ((lib "racket-build-guide/contribute.scrbl") (lib "racket-build-guide/common.rkt") (lib "racket-build-guide/build.scrbl") (lib "racket-build-guide/distribute.scrbl") (lib "racket-build-guide/racket-build-guide.scrbl"))) (name . "racket-build-guide") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/racket/?path=pkgs/racket-build-guide") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "git://github.com/racket/racket/?path=pkgs/racket-build-guide") (source_url . "git://github.com/racket/racket/?path=pkgs/racket-build-guide"))))))) ("racket-cheat" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racket-cheat" "doc/racket-cheat@racket-cheat/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "129fbb808cac7b9d761e92a44e8f7877bf05e282") (checksum-error . #f) (collection . "racket-cheat") (conflicts . ()) (dependencies . ("base" "scribble-lib" "db-doc" "db-lib" "drracket" "net-doc" "net-lib" "parser-tools-doc" "parser-tools-lib" "pict-doc" "pict-lib" "racket-doc" "sandbox-lib" "slideshow-doc" "slideshow-lib")) (description . "a user-friendly index into the Racket documentation") (implies . ()) (last-checked . 1632904438) (last-edit . 1444094509) (last-updated . 1535198307) (modules . ((lib "racket-cheat/racket-cheat.scrbl") (lib "racket-cheat/racket-cheat.rkt"))) (name . "racket-cheat") (ring . 1) (search-terms . #hasheq((:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (beginners . #t) (documentation . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/racket-cheat") (tags . ("beginners" "documentation")) (versions . #hash((default . #hasheq((checksum . "129fbb808cac7b9d761e92a44e8f7877bf05e282") (source . "git://github.com/jeapostrophe/racket-cheat") (source_url . "http://github.com/jeapostrophe/racket-cheat/tree/master"))))))) ("racket-chipmunk" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-chipmunk.txt") (test-failure-log . "server/built/test-fail/racket-chipmunk.txt") (test-success-log . #f))) (checksum . "152c9c4758f59ade9db01614e89e946eb39de168") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "Chipmunk bindings for Racket.") (implies . ()) (last-checked . 1632904439) (last-edit . 1538157311) (last-updated . 1632225609) (modules . ((lib "racket-chipmunk/lang/chipmunk.rkt") (lib "racket-chipmunk/examples/chipmunk-test.rkt") (lib "racket-chipmunk/lang/chipmunk-ffi.rkt") (lib "racket-chipmunk/main.rkt") (lib "racket-chipmunk/examples/hello-world.rkt") (lib "racket-chipmunk/examples/callbacks.rkt"))) (name . "racket-chipmunk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stephen@thoughtstem.com . #t) (games . #t) (physics . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/racket-chipmunk.git") (tags . ("games" "physics")) (versions . #hash((default . #hasheq((checksum . "152c9c4758f59ade9db01614e89e946eb39de168") (source . "https://github.com/thoughtstem/racket-chipmunk.git") (source_url . "https://github.com/thoughtstem/racket-chipmunk.git"))))))) ("racket-cord" . #hasheq((author . "ben@bensimms.moe") (authors . ("ben@bensimms.moe")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racket-cord" "doc/racket-cord@racket-cord/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-cord.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-cord.txt"))) (checksum . "841264054ad76a9691dbecfa9ffc81f5a9fe50f7") (checksum-error . #f) (collection . "racket-cord") (conflicts . ()) (date-added . 1614814811) (dependencies . ("base" "http-easy" "rfc6455" "rackunit-lib" "scribble-lib" "scribble-lib" "racket-doc")) (description . "Racket bindings for discord.") (implies . ()) (last-checked . 1632904456) (last-edit . 1614814811) (last-updated . 1632292442) (modules . ((lib "racket-cord/private/gateway.rkt") (lib "racket-cord/private/constants.rkt") (lib "racket-cord/scribblings/extracted.scrbl") (lib "racket-cord/private/logger.rkt") (lib "racket-cord/private/events.rkt") (lib "racket-cord/main.rkt") (lib "racket-cord/private/data.rkt") (lib "racket-cord/http.rkt") (lib "racket-cord/private/utils.rkt") (lib "racket-cord/scribblings/racket-cord.scrbl"))) (name . "racket-cord") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ben@bensimms.moe . #t) (discord . #t) (http . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/simmsb/racket-cord.git") (tags . ("discord" "http" "net")) (versions . #hash((default . #hasheq((checksum . "841264054ad76a9691dbecfa9ffc81f5a9fe50f7") (source . "https://github.com/simmsb/racket-cord.git") (source_url . "https://github.com/simmsb/racket-cord.git"))))))) ("racket-doc" . #hash((author . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org ryanc@racket-lang.org samth@racket-lang.org") (authors . ("eli@racket-lang.org" "jay@racket-lang.org" "matthias@racket-lang.org" "mflatt@racket-lang.org" "robby@racket-lang.org" "ryanc@racket-lang.org" "samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "openssl" "doc/openssl@racket-doc/index.html") ("main" "reference" "doc/reference@racket-doc/index.html") ("main" "help" "doc/help@racket-doc/index.html") ("main" "version" "doc/version@racket-doc/index.html") ("main" "dynext" "doc/dynext@racket-doc/index.html") ("main" "pkg" "doc/pkg@racket-doc/index.html") ("main" "more" "doc/more@racket-doc/index.html") ("main" "file" "doc/file@racket-doc/index.html") ("main" "inside" "doc/inside@racket-doc/index.html") ("main" "compatibility" "doc/compatibility@racket-doc/index.html") ("main" "guide" "doc/guide@racket-doc/index.html") ("main" "style" "doc/style@racket-doc/index.html") ("main" "getting-started" "doc/getting-started@racket-doc/index.html") ("main" "raco" "doc/raco@racket-doc/index.html") ("main" "foreign" "doc/foreign@racket-doc/index.html") ("main" "syntax" "doc/syntax@racket-doc/index.html") ("main" "json" "doc/json@racket-doc/index.html") ("main" "scheme" "doc/scheme@racket-doc/index.html") ("main" "xml" "doc/xml@racket-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" ("base" #:version "6.5.0.2") "net-lib" "sandbox-lib" ("scribble-lib" #:version "1.34") "racket-index" "rackunit-doc" "compatibility" "errortrace-doc" "typed-racket-doc" "at-exp-lib" "rackunit-lib" "web-server-doc" "gui" "draw" "pict" "parser-tools-doc" "slideshow-doc" "r5rs-doc" "r6rs-doc" "xrepl" "readline" "syntax-color" "scribble-doc" "future-visualizer" "distributed-places" "serialize-cstruct-lib" "cext-lib" "data-doc" "net-doc" "planet-doc" "mzscheme-doc" "compiler-lib" "drracket" "math-doc" "math-lib")) (description . "Base Racket documentation") (implies . ()) (last-checked . 1632904457) (last-edit . 1460066358) (last-updated . 1632667088) (modules . ((lib "ffi/examples/tcl.rkt") (lib "scribblings/reference/numbers.scrbl") (lib "scribblings/reference/extflonums.scrbl") (lib "scribblings/reference/custom-ports.scrbl") (lib "scribblings/guide/begin.scrbl") (lib "scribblings/reference/subprocess.scrbl") (lib "ffi/examples/xmmsctrl.rkt") (lib "scribblings/foreign/global.scrbl") (lib "scribblings/guide/data.scrbl") (lib "scribblings/guide/module-require.scrbl") (lib "scribblings/reference/contracts-struct-prop.scrbl") (lib "scribblings/reference/cmdline.scrbl") (lib "scribblings/reference/stx-comp.scrbl") (lib "scribblings/raco/zo-struct.scrbl") (lib "scribblings/guide/contracts/examples/1b.rkt") (lib "scribblings/reference/model.scrbl") (lib "syntax/scribblings/id-set.scrbl") (lib "scribblings/guide/contracts/exists.scrbl") (lib "scribblings/style/constructs.scrbl") (lib "scribblings/reference/enter.scrbl") (lib "syntax/scribblings/parse/ex-varied.scrbl") (lib "syntax/scribblings/parse/ex-kw-args.scrbl") (lib "file/scribblings/file.scrbl") (lib "syntax/scribblings/macro-testing.scrbl") (lib "scribblings/reference/pretty-print.scrbl") (lib "scribblings/reference/running.scrbl") (lib "syntax/scribblings/parse/state.scrbl") (lib "syntax/scribblings/readerr.scrbl") (lib "scribblings/reference/hashes.scrbl") (lib "scribblings/reference/futures-logging.scrbl") (lib "scribblings/guide/cmdline.scrbl") (lib "scribblings/reference/vectors.scrbl") (lib "scribblings/reference/repl.scrbl") (lib "scribblings/guide/vectors.scrbl") (lib "scribblings/raco/decompile.scrbl") (lib "syntax/scribblings/keyword.scrbl") (lib "scribblings/reference/bytes.scrbl") (lib "scribblings/guide/literal-main.rkt") (lib "syntax/scribblings/module-helpers.scrbl") (lib "scribblings/reference/namespaces.scrbl") (lib "scribblings/guide/let.scrbl") (lib "scribblings/reference/flonums.scrbl") (lib "syntax/scribblings/parse/stxclasses.scrbl") (lib "scribblings/guide/io.scrbl") (lib "scribblings/guide/store.rkt") (lib "scribblings/raco/cc.scrbl") (lib "scribblings/guide/proc-macros.scrbl") (lib "scribblings/reference/for.scrbl") (lib "scribblings/reference/reference.scrbl") (lib "scribblings/reference/sha.scrbl") (lib "compatibility/scribblings/package.scrbl") (lib "scribblings/reference/fixnums.scrbl") (lib "scribblings/foreign/winapi.scrbl") (lib "scribblings/guide/contracts/simple-function.scrbl") (lib "scribblings/reference/custom-write.scrbl") (lib "scribblings/reference/syntax-model.scrbl") (lib "scribblings/icons.rkt") (lib "syntax/scribblings/modcode.scrbl") (lib "syntax/scribblings/parse/ex-exprc.scrbl") (lib "syntax/scribblings/parse/define.scrbl") (lib "scribblings/foreign/os-thread.scrbl") (lib "syntax/scribblings/for-transform.scrbl") (lib "scribblings/guide/contracts.scrbl") (lib "scribblings/reference/port-lib.scrbl") (lib "scribblings/guide/guide.scrbl") (lib "pkg/scribblings/git-workflow.scrbl") (lib "scribblings/reference/concurrency.scrbl") (lib "file/scribblings/tar.scrbl") (lib "scribblings/guide/lists.scrbl") (lib "scribblings/inside/ports.scrbl") (lib "pkg/scribblings/catalog-protocol.scrbl") (lib "scribblings/reference/stx-serialize.scrbl") (lib "file/scribblings/glob.scrbl") (lib "scribblings/foreign/port.scrbl") (lib "scribblings/guide/numbers.scrbl") (lib "scribblings/reference/string-ports.scrbl") (lib "scribblings/reference/macros.scrbl") (lib "scribblings/guide/literal-main-language-info.rkt") (lib "scribblings/inside/cs.scrbl") (lib "syntax/scribblings/free-vars.scrbl") (lib "syntax/scribblings/stx.scrbl") (lib "scribblings/guide/reader-extension.scrbl") (lib "help/help.scrbl") (lib "scribblings/raco/expand.scrbl") (lib "scribblings/reference/notation.scrbl") (lib "syntax/scribblings/for-body.scrbl") (lib "scribblings/reference/semaphores.scrbl") (lib "scribblings/reference/port-buffers.scrbl") (lib "scribblings/guide/void-and-undef.scrbl") (lib "file/scribblings/unzip.scrbl") (lib "pkg/scribblings/common.rkt") (lib "syntax/scribblings/module-reader.scrbl") (lib "scribblings/foreign/utils.rkt") (lib "scribblings/guide/contracts/examples/5.rkt") (lib "scribblings/foreign/try-atomic.scrbl") (lib "scribblings/foreign/schedule.scrbl") (lib "file/scribblings/convertible.scrbl") (lib "syntax/scribblings/modread.scrbl") (lib "scribblings/guide/contracts/gotchas.scrbl") (lib "syntax/scribblings/parse/ex-uniform.scrbl") (lib "scribblings/reference/fasl.scrbl") (lib "scribblings/guide/phases.scrbl") (lib "scribblings/reference/load-lang.scrbl") (lib "scribblings/inside/utils.rkt") (lib "scribblings/reference/control.scrbl") (lib "scribblings/guide/death-list-5.rkt") (lib "scribblings/guide/control.scrbl") (lib "scribblings/reference/mz.rkt") (lib "syntax/scribblings/parse/patterns.scrbl") (lib "scribblings/guide/languages.scrbl") (lib "syntax/scribblings/parse/debug.scrbl") (lib "scribblings/guide/contracts/examples/ho-version3.rkt") (lib "scribblings/foreign/atomic.scrbl") (lib "scribblings/raco/plt.scrbl") (lib "ffi/examples/use-xmmsctrl.rkt") (lib "scribblings/reference/chaperones.scrbl") (lib "scribblings/raco/dist.scrbl") (lib "scribblings/style/branch-and-commit.scrbl") (lib "scribblings/style/style.scrbl") (lib "scribblings/raco/common.rkt") (lib "scribblings/raco/ctool.scrbl") (lib "syntax/scribblings/trusted-xforms.scrbl") (lib "scribblings/guide/distributed.scrbl") (lib "scribblings/guide/contracts/examples/3-test.rkt") (lib "scribblings/guide/macro-module.scrbl") (lib "syntax/scribblings/wrap-modbeg.scrbl") (lib "scribblings/guide/forms.scrbl") (lib "scribblings/reference/prop-port.scrbl") (lib "scribblings/foreign/custodian.scrbl") (lib "scribblings/raco/api.scrbl") (lib "scribblings/reference/security.scrbl") (lib "scribblings/inside/hooks.scrbl") (lib "scribblings/guide/other-editors.scrbl") (lib "xml/xml.scrbl") (lib "scribblings/raco/setup.scrbl") (lib "scribblings/raco/unpack.scrbl") (lib "file/scribblings/cache.scrbl") (lib "scribblings/guide/to-scheme.scrbl") (lib "scribblings/foreign/com.scrbl") (lib "scribblings/reference/networking.scrbl") (lib "syntax/scribblings/parse/ex-many-kws.scrbl") (lib "scribblings/foreign/com-auto.scrbl") (lib "scribblings/reference/strings.scrbl") (lib "scribblings/reference/trace.scrbl") (lib "scribblings/guide/contracts/intro.scrbl") (lib "scribblings/guide/contracts/examples/1-test.rkt") (lib "scribblings/foreign/file.scrbl") (lib "scribblings/guide/regexps-data.scrbl") (lib "scribblings/reference/memory.scrbl") (lib "scribblings/reference/port-line-counting.scrbl") (lib "scribblings/reference/stx-props.scrbl") (lib "scribblings/foreign/types.scrbl") (lib "scribblings/reference/undefined.scrbl") (lib "scribblings/guide/parameterize.scrbl") (lib "scribblings/reference/exns.scrbl") (lib "file/scribblings/sha1.scrbl") (lib "syntax/scribblings/moddep.scrbl") (lib "scribblings/guide/module-macro.scrbl") (lib "scribblings/guide/tuvalu.rkt") (lib "scribblings/inside/extensions.scrbl") (lib "scribblings/reference/interactive.scrbl") (lib "scribblings/reference/sets.scrbl") (lib "scribblings/reference/unsafe-undefined.scrbl") (lib "scribblings/reference/stx-patterns.scrbl") (lib "scribblings/guide/guide-utils.rkt") (lib "scribblings/guide/booleans.scrbl") (lib "scribblings/guide/module-basics.scrbl") (lib "syntax/scribblings/parse/parse-dummy-bindings.rkt") (lib "scribblings/reference/exit.scrbl") (lib "scribblings/reference/security-guards.scrbl") (lib "scribblings/reference/stx-taints.scrbl") (lib "scribblings/reference/regexps.scrbl") (lib "scribblings/reference/stx-trans.scrbl") (lib "scribblings/reference/collects.scrbl") (lib "scribblings/guide/html.rkt") (lib "scribblings/raco/ext.scrbl") (lib "scribblings/guide/contracts/examples/ho-version2.rkt") (lib "scribblings/reference/thread-groups.scrbl") (lib "scribblings/reference/io.scrbl") (lib "scribblings/reference/init.scrbl") (lib "compatibility/scribblings/defmacro.scrbl") (lib "scribblings/raco/command.scrbl") (lib "scribblings/raco/exe.scrbl") (lib "scribblings/reference/parameters.scrbl") (lib "scribblings/reference/os.scrbl") (lib "scribblings/inside/embedding.scrbl") (lib "scribblings/reference/match-parse.rkt") (lib "scribblings/foreign/foreign.scrbl") (lib "compatibility/scribblings/mlists.scrbl") (lib "scribblings/guide/running.scrbl") (lib "scribblings/foreign/cvector.scrbl") (lib "scribblings/reference/unreachable.scrbl") (lib "ffi/examples/use-esd.rkt") (lib "syntax/scribblings/modresolve.scrbl") (lib "scribblings/guide/regexp.scrbl") (lib "scribblings/inside/cs-thread.scrbl") (lib "scribblings/reference/cont-marks.scrbl") (lib "scribblings/foreign/objc.scrbl") (lib "scribblings/reference/encodings.scrbl") (lib "scribblings/guide/dollar.rkt") (lib "scribblings/reference/dicts.scrbl") (lib "scribblings/foreign/misc.scrbl") (lib "syntax/scribblings/transformer.scrbl") (lib "scribblings/reference/sandbox.scrbl") (lib "scribblings/reference/booleans.scrbl") (lib "scribblings/inside/namespaces.scrbl") (lib "scribblings/inside/cs-procs.scrbl") (lib "scribblings/reference/pairs.scrbl") (lib "scribblings/guide/module-set.scrbl") (lib "scribblings/guide/places.scrbl") (lib "scribblings/guide/dialects.scrbl") (lib "scribblings/raco/pkg.scrbl") (lib "scribblings/reference/logging.scrbl") (lib "syntax/scribblings/parse/experimental.scrbl") (lib "syntax/scribblings/context.scrbl") (lib "scribblings/guide/pairs.scrbl") (lib "scribblings/guide/cond.scrbl") (lib "scribblings/reference/paths.scrbl") (lib "scribblings/reference/unsafe.scrbl") (lib "scribblings/inside/eval.scrbl") (lib "scribblings/guide/scripts.scrbl") (lib "ffi/examples/xosd.rkt") (lib "scribblings/guide/performance.scrbl") (lib "scribblings/guide/five.rkt") (lib "ffi/examples/use-xosd.rkt") (lib "scribblings/guide/lambda.scrbl") (lib "syntax/scribblings/parse/parsing.scrbl") (lib "scribblings/reference/threads.scrbl") (lib "pkg/scribblings/db.scrbl") (lib "pkg/scribblings/lib.scrbl") (lib "scribblings/reference/debugging.scrbl") (lib "scribblings/reference/format.scrbl") (lib "pkg/scribblings/name.scrbl") (lib "scribblings/raco/c-mods.scrbl") (lib "scribblings/reference/procedures.scrbl") (lib "syntax/scribblings/parse.scrbl") (lib "scribblings/reference/prog-steps.rkt") (lib "scribblings/guide/paths.scrbl") (lib "scribblings/inside/appendix.scrbl") (lib "scribblings/raco/zo-parse.scrbl") (lib "ffi/examples/use-tcl.rkt") (lib "syntax/scribblings/modcollapse.scrbl") (lib "syntax/scribblings/apply-transformer.scrbl") (lib "scribblings/reference/places-logging.scrbl") (lib "scribblings/guide/contracts/examples/ho-version4.rkt") (lib "scribblings/inside/structures.scrbl") (lib "scribblings/guide/contracts/examples/5-test.rkt") (lib "scribblings/reference/rerequire.scrbl") (lib "pkg/scribblings/strip.scrbl") (lib "pkg/scribblings/dirs-catalog.scrbl") (lib "scribblings/reference/reader.scrbl") (lib "scribblings/raco/make.scrbl") (lib "scribblings/reference/stx-param.scrbl") (lib "scribblings/guide/set.scrbl") (lib "scribblings/reference/evts.scrbl") (lib "scribblings/style/acknowledgment.scrbl") (lib "scribblings/inside/contmarks.scrbl") (lib "ffi/examples/c-printf.rkt") (lib "scribblings/reference/string-output.scrbl") (lib "scribblings/reference/envvars.scrbl") (lib "scribblings/guide/other.scrbl") (lib "scribblings/reference/struct-inspectors.scrbl") (lib "scribblings/raco/demod.scrbl") (lib "compatibility/scribblings/compatibility.scrbl") (lib "scribblings/reference/eval.scrbl") (lib "scribblings/inside/strings.scrbl") (lib "dynext/dynext.scrbl") (lib "scribblings/guide/quote.scrbl") (lib "pkg/scribblings/apis.scrbl") (lib "file/scribblings/gif.scrbl") (lib "scribblings/guide/literal.rkt") (lib "scribblings/raco/config.scrbl") (lib "scribblings/raco/test.scrbl") (lib "scribblings/foreign/libs.scrbl") (lib "scribblings/reference/phase+space.scrbl") (lib "scribblings/reference/engine.scrbl") (lib "scribblings/guide/contracts/examples.scrbl") (lib "scribblings/foreign/ns.scrbl") (lib "scribblings/guide/boxes.scrbl") (lib "file/scribblings/ico.scrbl") (lib "scribblings/guide/truth.scrbl") (lib "scribblings/reference/thread-cells.scrbl") (lib "scribblings/reference/time.scrbl") (lib "scribblings/raco/exe-api.scrbl") (lib "syntax/scribblings/name.scrbl") (lib "scribblings/reference/stx-ops.scrbl") (lib "scribblings/reference/startup.scrbl") (lib "syntax/scribblings/parse/parse-common.rkt") (lib "scribblings/reference/match-grammar.rkt") (lib "scribblings/foreign/alloc.scrbl") (lib "scribblings/guide/match.scrbl") (lib "scribblings/guide/qq.scrbl") (lib "scribblings/reference/write.scrbl") (lib "scribblings/reference/shared.scrbl") (lib "scribblings/guide/contracts/structure.scrbl") (lib "scribblings/guide/modfile.rkt") (lib "scribblings/reference/kernel.scrbl") (lib "scribblings/guide/module-protect.scrbl") (lib "scribblings/guide/module-paths.scrbl") (lib "scribblings/reference/rx.rkt") (lib "scribblings/reference/port-procs.scrbl") (lib "syntax/scribblings/parse/lib.scrbl") (lib "scribblings/style/scribble.scrbl") (lib "scribblings/reference/promise.scrbl") (lib "syntax/scribblings/syntax-object-helpers.scrbl") (lib "scribblings/foreign/collect-callback.scrbl") (lib "scribblings/style/todo.scrbl") (lib "ffi/examples/use-crypt.rkt") (lib "scribblings/style/shared.rkt") (lib "scribblings/foreign/com-intf.scrbl") (lib "scribblings/inside/cs-values.scrbl") (lib "scribblings/reference/module-reflect.scrbl") (lib "scribblings/reference/linklet.scrbl") (lib "scribblings/reference/ports.scrbl") (lib "file/scribblings/md5.scrbl") (lib "scribblings/reference/code-inspectors.scrbl") (lib "scribblings/style/textual.scrbl") (lib "scribblings/reference/compiler.scrbl") (lib "scribblings/more/more.scrbl") (lib "pkg/scribblings/path.scrbl") (lib "scribblings/guide/module-provide.scrbl") (lib "scribblings/reference/surrogate.scrbl") (lib "syntax/scribblings/id-table.scrbl") (lib "scribblings/guide/contracts/examples/ho-version1.rkt") (lib "scribblings/inside/cs-overview.scrbl") (lib "syntax/scribblings/template.scrbl") (lib "scribblings/guide/literal-main-get-info.rkt") (lib "scribblings/guide/hash-tables.scrbl") (lib "scribblings/reference/cont.scrbl") (lib "ffi/examples/use-sndfile.rkt") (lib "syntax/scribblings/parse/litconv.scrbl") (lib "scribblings/inside/inside.scrbl") (lib "scribblings/guide/define-struct.scrbl") (lib "scribblings/guide/contracts/examples/ho-version2a.rkt") (lib "scribblings/reference/define-struct.scrbl") (lib "scribblings/raco/exe-dylib-path.scrbl") (lib "scribblings/guide/macros.scrbl") (lib "scribblings/guide/contracts/utils.rkt") (lib "syntax/scribblings/boundmap.scrbl") (lib "scribblings/guide/contracts/examples/ho-version3a.rkt") (lib "pkg/scribblings/pkg.scrbl") (lib "scribblings/guide/keywords.scrbl") (lib "scribblings/reference/syntax.scrbl") (lib "syntax/scribblings/to-string.scrbl") (lib "scribblings/foreign/active-x.scrbl") (lib "scribblings/reference/pipes.scrbl") (lib "scribblings/reference/class.scrbl") (lib "scribblings/reference/contracts.scrbl") (lib "scribblings/guide/contracts/examples/ho-version3b.rkt") (lib "scribblings/guide/define.scrbl") (lib "scribblings/guide/class.scrbl") (lib "ffi/examples/use-magick.rkt") (lib "scribblings/getting-started/getting-started.scrbl") (lib "scribblings/inside/custodians.scrbl") (lib "scribblings/inside/memory.scrbl") (lib "scribblings/reference/async-channels.scrbl") (lib "scribblings/guide/contracts/first-extended-example.scrbl") (lib "scribblings/inside/params.scrbl") (lib "scribblings/guide/contracts/examples/2.rkt") (lib "scribblings/reference/string-input.scrbl") (lib "scribblings/reference/read.scrbl") (lib "file/scribblings/gzip.scrbl") (lib "scribblings/reference/help.scrbl") (lib "scribblings/style/some-performance.scrbl") (lib "scribblings/reference/include.scrbl") (lib "ffi/examples/esd.rkt") (lib "scribblings/reference/plumbers.scrbl") (lib "scribblings/reference/control-lib.scrbl") (lib "syntax/scribblings/contract.scrbl") (lib "syntax/scribblings/path-spec.scrbl") (lib "ffi/examples/magick.rkt") (lib "scribblings/raco/info.scrbl") (lib "scribblings/raco/scribble.scrbl") (lib "file/scribblings/untar.scrbl") (lib "scribblings/guide/compile.scrbl") (lib "scribblings/reference/symbols.scrbl") (lib "scribblings/inside/threads.scrbl") (lib "scribblings/raco/docs.scrbl") (lib "scribblings/style/unit.scrbl") (lib "syntax/scribblings/reader-helpers.scrbl") (lib "scribblings/guide/simple-syntax.scrbl") (lib "scribblings/reference/custodians.scrbl") (lib "file/scribblings/untgz.scrbl") (lib "scribblings/reference/data.scrbl") (lib "scribblings/reference/eval-model.scrbl") (lib "scribblings/guide/ports.scrbl") (lib "scribblings/raco/link.scrbl") (lib "scribblings/reference/windows-paths.scrbl") (lib "scribblings/raco/raco.scrbl") (lib "scribblings/raco/read.scrbl") (lib "scribblings/guide/module-languages.scrbl") (lib "syntax/scribblings/kerncase.scrbl") (lib "scribblings/reference/match.scrbl") (lib "help/installer.rkt") (lib "scribblings/inside/cs-embedding.scrbl") (lib "scribblings/foreign/define.scrbl") (lib "scribblings/raco/dist-api.scrbl") (lib "file/scribblings/resource.scrbl") (lib "scribblings/foreign/vm.scrbl") (lib "scribblings/reference/breaks.scrbl") (lib "scribblings/foreign/unexported.scrbl") (lib "scribblings/guide/case.scrbl") (lib "scribblings/reference/sync.scrbl") (lib "scribblings/style/correct-maintain-speed.scrbl") (lib "ffi/examples/use-c-printf.rkt") (lib "scribblings/reference/futures.scrbl") (lib "scribblings/reference/filesystem.scrbl") (lib "syntax/scribblings/strip-context.scrbl") (lib "scribblings/inside/subprocesses.scrbl") (lib "scribblings/guide/unit.scrbl") (lib "openssl/openssl.scrbl") (lib "file/scribblings/zip.scrbl") (lib "scribblings/reference/equality.scrbl") (lib "syntax/scribblings/parse/intro.scrbl") (lib "scribblings/guide/kiddo.rkt") (lib "scribblings/reference/printer.scrbl") (lib "scribblings/reference/places.scrbl") (lib "scribblings/guide/parallelism.scrbl") (lib "scribblings/guide/namespaces.scrbl") (lib "scribblings/reference/serialization.scrbl") (lib "scribblings/reference/syntax-util.scrbl") (lib "scribblings/reference/splicing.scrbl") (lib "scribblings/inside/cs-eval.scrbl") (lib "scribblings/reference/block.scrbl") (lib "scribblings/guide/arith.rkt") (lib "scribblings/guide/module-syntax.scrbl") (lib "file/scribblings/common.rkt") (lib "scribblings/reference/memory-order.scrbl") (lib "json/json.scrbl") (lib "scribblings/raco/bundle-api.scrbl") (lib "scribblings/inside/exns.scrbl") (lib "scribblings/reference/implementation.scrbl") (lib "scribblings/guide/dollar-racket.rkt") (lib "scribblings/guide/contracts/new-combinators.scrbl") (lib "scribblings/guide/simple-data.scrbl") (lib "scribblings/guide/contracts/general-function.scrbl") (lib "scribblings/reference/generic.scrbl") (lib "scribblings/guide/syntax-taints.scrbl") (lib "scribblings/guide/contracts/examples/1.rkt") (lib "scribblings/guide/concurrency.scrbl") (lib "scribblings/reference/readtables.scrbl") (lib "syntax/scribblings/docprovide.scrbl") (lib "syntax/scribblings/parse/ex-mods-stxclasses.scrbl") (lib "scribblings/style/testing.scrbl") (lib "syntax/scribblings/transformer-helpers.scrbl") (lib "syntax/scribblings/syntax.scrbl") (lib "scribblings/guide/symbols.scrbl") (lib "scribblings/scheme/scheme.scrbl") (lib "scribblings/reference/values.scrbl") (lib "scribblings/guide/binding.scrbl") (lib "scribblings/reference/unix-paths.scrbl") (lib "scribblings/inside/cs-start.scrbl") (lib "scribblings/guide/graphics.scrbl") (lib "scribblings/guide/hash-languages.scrbl") (lib "scribblings/inside/values.scrbl") (lib "scribblings/foreign/pointers.scrbl") (lib "scribblings/inside/security.scrbl") (lib "scribblings/scheme/compat.scrbl") (lib "pkg/scribblings/getting-started.scrbl") (lib "scribblings/guide/for.scrbl") (lib "scribblings/foreign/derived.scrbl") (lib "syntax/scribblings/quote.scrbl") (lib "scribblings/guide/named-let.scrbl") (lib "scribblings/foreign/intro.scrbl") (lib "syntax/scribblings/define.scrbl") (lib "scribblings/reference/mpairs.scrbl") (lib "scribblings/reference/sequences.scrbl") (lib "scribblings/reference/reader-example.rkt") (lib "scribblings/foreign/com-common.rkt") (lib "scribblings/foreign/cpointer.scrbl") (lib "file/scribblings/gunzip.scrbl") (lib "scribblings/guide/module-hier.rkt") (lib "scribblings/inside/numbers.scrbl") (lib "pkg/scribblings/implementation.scrbl") (lib "ffi/examples/crypt.rkt") (lib "scribblings/guide/futures.scrbl") (lib "syntax/scribblings/common.rkt") (lib "scribblings/guide/contracts/examples/3.rkt") (lib "scribblings/guide/byte-strings.scrbl") (lib "scribblings/guide/chars.scrbl") (lib "scribblings/reference/units.scrbl") (lib "scribblings/reference/os-lib.scrbl") (lib "scribblings/inside/misc.scrbl") (lib "scribblings/foreign/serialize-cstruct.scrbl") (lib "version/version.scrbl") (lib "scribblings/reference/ellipses-defn.rkt") (lib "scribblings/guide/char-strings.scrbl") (lib "scribblings/reference/channels.scrbl") (lib "scribblings/inside/procedures.scrbl") (lib "pkg/scribblings/envvars.scrbl") (lib "scribblings/reference/runtime.scrbl") (lib "scribblings/reference/keywords.scrbl") (lib "help/help-utils.rkt") (lib "syntax/scribblings/datum.scrbl") (lib "syntax/scribblings/parse/examples.scrbl") (lib "scribblings/reference/thread-local.scrbl") (lib "scribblings/raco/planet.scrbl") (lib "syntax/scribblings/flatten-begin.scrbl") (lib "scribblings/foreign/vector.scrbl") (lib "syntax/scribblings/intdef.scrbl") (lib "scribblings/reference/file-ports.scrbl") (lib "scribblings/reference/chars.scrbl") (lib "scribblings/inside/overview.scrbl") (lib "syntax/scribblings/srcloc.scrbl") (lib "scribblings/guide/contracts/examples/2-test.rkt") (lib "syntax/scribblings/struct.scrbl") (lib "scribblings/guide/pattern-macros.scrbl") (lib "scribblings/reference/struct.scrbl") (lib "scribblings/guide/welcome.scrbl") (lib "scribblings/guide/apply.scrbl") (lib "scribblings/reference/stx-expand.scrbl") (lib "scribblings/reference/ellipses.rkt") (lib "scribblings/guide/modules.scrbl") (lib "scribblings/inside/bc.scrbl") (lib "ffi/examples/sndfile.rkt") (lib "syntax/scribblings/toplevel.scrbl") (lib "scribblings/raco/launcher.scrbl"))) (name . "racket-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:eli@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:matthias@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "git://github.com/racket/racket/?path=pkgs/racket-doc") (source_url . "git://github.com/racket/racket/?path=pkgs/racket-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("racket-dogstatsd" . #hasheq((author . "info@v25media.com") (authors . ("info@v25media.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dogstatsd" "doc/dogstatsd@racket-dogstatsd/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-dogstatsd.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-dogstatsd.txt"))) (checksum . "164ec431a98689b111495bad638313b219e3b0b2") (checksum-error . #f) (collection . "dogstatsd") (conflicts . ()) (dependencies . ("base" "threading" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "DogStatsD client for Racket, allowing you to send metrics to Datadog") (implies . ()) (last-checked . 1632904457) (last-edit . 1516216259) (last-updated . 1516216259) (modules . ((lib "dogstatsd/private/socket.rkt") (lib "dogstatsd/private/servicechecks.rkt") (lib "dogstatsd/private/buffer.rkt") (lib "dogstatsd/private/events.rkt") (lib "dogstatsd/test.rkt") (lib "dogstatsd/private/utils.rkt") (lib "dogstatsd/scribblings/dogstatsd.scrbl") (lib "dogstatsd/main.rkt") (lib "dogstatsd/private/statsd.rkt"))) (name . "racket-dogstatsd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:info@v25media.com . #t) (dogstatsd . #t) (metrics . #t) (ring:1 . #t) (statsd . #t))) (source . "https://github.com/DarrenN/racket-dogstatsd.git") (tags . ("dogstatsd" "metrics" "statsd")) (versions . #hash((default . #hasheq((checksum . "164ec431a98689b111495bad638313b219e3b0b2") (source . "https://github.com/DarrenN/racket-dogstatsd.git") (source_url . "https://github.com/DarrenN/racket-dogstatsd.git"))))))) ("racket-graphviz" . #hasheq((author . "hadi@moshayedi.net") (authors . ("hadi@moshayedi.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "graphviz" "doc/graphviz@racket-graphviz/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-graphviz.txt") (test-failure-log . "server/built/test-fail/racket-graphviz.txt") (test-success-log . #f))) (checksum . "9486fa524e22e2a04ae20a36b0c1c426716981b5") (checksum-error . #f) (collection . "graphviz") (conflicts . ()) (date-added . 1564856283) (dependencies . ("base" "pict-lib" "draw-lib" "metapict" "scribble-lib" "pict-doc" "racket-doc" "rackunit-lib")) (description . "Make composition of Racket Pict and Graphviz Diagrams possible.") (implies . ()) (last-checked . 1632904457) (last-edit . 1567101455) (last-updated . 1574695857) (modules . ((lib "graphviz/examples/erdiagram.rkt") (lib "graphviz/lib/erdiagram.rkt") (lib "graphviz/scribblings/utils.rkt") (lib "graphviz/example.rkt") (lib "graphviz/main.rkt") (lib "graphviz/lib/dot.rkt") (lib "graphviz/scribblings/graphviz.scrbl") (lib "graphviz/lib/digraph.rkt") (lib "graphviz/examples/dirtree.rkt"))) (name . "racket-graphviz") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:hadi@moshayedi.net . #t) (graph . #t) (ring:1 . #t) (visualization . #t))) (source . "https://github.com/pykello/racket-graphviz.git") (tags . ("graph" "visualization")) (versions . #hash((default . #hasheq((checksum . "9486fa524e22e2a04ae20a36b0c1c426716981b5") (source . "https://github.com/pykello/racket-graphviz.git") (source_url . "https://github.com/pykello/racket-graphviz.git"))))))) ("racket-i386-macosx-2" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for racket package") (implies . ()) (last-checked . 1632904457) (last-edit . 1576860307) (last-updated . 1576860339) (modules . ()) (name . "racket-i386-macosx-2") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "3787f833a9e20aa38be345be3f57a420f63a6523") (source . "https://pkg-sources.racket-lang.org/pkgs/3787f833a9e20aa38be345be3f57a420f63a6523/racket-i386-macosx-2.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/3787f833a9e20aa38be345be3f57a420f63a6523/racket-i386-macosx-2.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("racket-i386-macosx-3" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-i386-macosx-3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-i386-macosx-3.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for racket package") (implies . ()) (last-checked . 1632904458) (last-edit . 1598554469) (last-updated . 1598555457) (modules . ()) (name . "racket-i386-macosx-3") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "41ab11fec839af739c8e7d05d5b3f270942d8542") (source . "https://pkg-sources.racket-lang.org/pkgs/41ab11fec839af739c8e7d05d5b3f270942d8542/racket-i386-macosx-3.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/41ab11fec839af739c8e7d05d5b3f270942d8542/racket-i386-macosx-3.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("racket-immutable" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-immutable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-immutable.txt"))) (checksum . "61abb43c1c47c3b2a48b154406004d6b8c348913") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "operations that return immutable strings, immutable byte-strings, and immutable vectors") (implies . ()) (last-checked . 1632904458) (last-edit . 1501614789) (last-updated . 1571862505) (modules . ((lib "racket-immutable/test/immutable-string.rkt") (lib "racket-immutable/base/lang/reader.rkt") (lib "racket-immutable/immutable.rkt") (lib "racket-immutable/lang/reader.rkt") (lib "racket-immutable/base/lang.rkt") (lib "racket-immutable/lang.rkt"))) (name . "racket-immutable") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/racket-immutable") (tags . ()) (versions . #hash((default . #hasheq((checksum . "61abb43c1c47c3b2a48b154406004d6b8c348913") (source . "git://github.com/AlexKnauth/racket-immutable") (source_url . "http://github.com/AlexKnauth/racket-immutable/tree/master"))))))) ("racket-index" . #hash((author . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org ryanc@racket-lang.org samth@racket-lang.org") (authors . ("eli@racket-lang.org" "jay@racket-lang.org" "matthias@racket-lang.org" "mflatt@racket-lang.org" "robby@racket-lang.org" "ryanc@racket-lang.org" "samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "search" "doc/search@racket-index/index.html") ("main" "release" "doc/release@racket-index/index.html") ("main" "license" "doc/license@racket-index/index.html") ("main" "acks" "doc/acks@racket-index/index.html") ("main" "local-redirect" "doc/local-redirect@racket-index/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "scheme-lib" "at-exp-lib")) (description . "Racket Documentation driver") (implies . ()) (last-checked . 1632904459) (last-edit . 1460066358) (last-updated . 1632667115) (modules . ((lib "scribblings/main/start.scrbl") (lib "scribblings/main/local-redirect.scrbl") (lib "scribblings/main/release.scrbl") (lib "scribblings/main/acks.scrbl") (lib "scribblings/main/private/manuals.rkt") (lib "scribblings/main/private/utils.rkt") (lib "scribblings/main/user/release.scrbl") (lib "scribblings/main/private/local-redirect.rkt") (lib "scribblings/main/config.rkt") (lib "scribblings/main/user/start.scrbl") (lib "setup/materialize-user-docs.rkt") (lib "scribblings/main/private/index-scope.rkt") (lib "scribblings/main/user/local-redirect.scrbl") (lib "setup/scribble.rkt") (lib "scribblings/main/license.scrbl") (lib "scribblings/main/private/make-search.rkt") (lib "setup/private/doc-path.rkt") (lib "rackunit/docs-complete.rkt") (lib "scribblings/main/private/release.rkt") (lib "setup/xref.rkt") (lib "scribblings/main/search.scrbl") (lib "scribblings/main/user/search.scrbl"))) (name . "racket-index") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:eli@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:matthias@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "git://github.com/racket/racket/?path=pkgs/racket-index") (source_url . "git://github.com/racket/racket/?path=pkgs/racket-index"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("racket-lambda-runtime" . #hasheq((author . "odonnell_johnny@yahoo.com") (authors . ("odonnell_johnny@yahoo.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/racket-lambda-runtime.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-lambda-runtime.txt") (test-failure-log . "server/built/test-fail/racket-lambda-runtime.txt") (test-success-log . #f))) (checksum . "2a8410a11e93bf9371eac6f90a37c582ef5e1897") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1586833807) (dependencies . ()) (description . "A library that interacts with the AWS Lambda runtime API to run your Racket function") (implies . ()) (last-checked . 1632904459) (last-edit . 1586833807) (last-updated . 1586833807) (modules . ((lib "racket-lambda-runtime/test/index.rkt") (lib "racket-lambda-runtime/main.rkt") (lib "racket-lambda-runtime/test/sample-runtime-api.rkt"))) (name . "racket-lambda-runtime") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (AWS . #t) (author:odonnell_johnny@yahoo.com . #t) (aws . #t) (lambda . #t) (ring:1 . #t))) (source . "https://github.com/johnnyodonnell/racket-lambda-runtime.git") (tags . ("AWS" "aws" "lambda")) (versions . #hash((default . #hasheq((checksum . "2a8410a11e93bf9371eac6f90a37c582ef5e1897") (source . "https://github.com/johnnyodonnell/racket-lambda-runtime.git") (source_url . "https://github.com/johnnyodonnell/racket-lambda-runtime.git"))))))) ("racket-lang-org" . #hash((author . "samth@racket-lang.org mflatt@racket-lang.org eli@barzilay.org") (authors . ("samth@racket-lang.org" "mflatt@racket-lang.org" "eli@barzilay.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-lang-org.txt") (test-failure-log . "server/built/test-fail/racket-lang-org.txt") (test-success-log . #f))) (checksum . "5d43e3b95307815aaaac533b26a5ad0404611efc") (checksum-error . #f) (collection . "racket-lang-org") (conflicts . ()) (dependencies . ("slideshow-lib" "csv-reading" "typed-racket-lib" "datalog" "graph" "gui-lib" "base" ("plt-web-lib" #:version "1.3") "at-exp-lib" "net-lib" "racket-index" ("scribble-lib" #:version "1.28") "syntax-color-lib" "plot-gui-lib" "plot-lib" "math-lib" "pollen" "css-tools" "sugar" "txexpr" "gregor-lib" "frog" "rackunit-lib" "pict-lib" "ppict" "draw-lib" ("s3-sync" #:version "1.11"))) (description . "Sources for http://racket-lang.org") (implies . ()) (last-checked . 1632904460) (last-edit . 1417307461) (last-updated . 1626640265) (modules . ((lib "racket-lang-org/www/img/ugly-syntax.rkt") (lib "racket-lang-org/stubs/git.rkt") (lib "racket-lang-org/www/index.rkt") (lib "racket-lang-org/rcon/utils.rkt") (lib "racket-lang-org/annual-utils.rkt") (lib "racket-lang-org/school/all.rkt") (lib "racket-lang-org/minis/pre.rkt") (lib "racket-lang-org/blog/_src/posts/racket-status-jan2021/config.rkt") (lib "racket-lang-org/util.rkt") (lib "racket-lang-org/rcon/2019/pollen.rkt") (lib "racket-lang-org/rcon/2018/pollen.rkt") (lib "racket-lang-org/rcon/2017/pollen.rkt") (lib "racket-lang-org/rcon/2016/pollen.rkt") (lib "racket-lang-org/rcon/2015/pollen.rkt") (lib "racket-lang-org/blog/_src/posts/racket-on-chez-status-feb2020/config.rkt") (lib "racket-lang-org/rcon/2020/index.rkt") (lib "racket-lang-org/blog/_src/posts/racket-on-chez-status-feb2020/alog.rkt") (lib "racket-lang-org/minis/bugs.rkt") (lib "racket-lang-org/blog/_src/posts/racket-on-chez-status-jan2019/color.rkt") (lib "racket-lang-org/blog/_src/posts/racket-on-chez-status-feb2020/color.rkt") (lib "racket-lang-org/download/filter-installers.rkt") (lib "racket-lang-org/lists/index.rkt") (lib "racket-lang-org/minis/lists.rkt") (lib "racket-lang-org/blog/_src/posts/2018-01-05-racket-on-chez-status.scrbl") (lib "racket-lang-org/blog/_src/posts/racket-status-jan2021/bm-jan19.rkt") (lib "racket-lang-org/rcon/2015/eero-demo.rkt") (lib "racket-lang-org/testing.rkt") (lib "racket-lang-org/scribble.rkt") (lib "racket-lang-org/blog/_src/posts/racket-on-chez-status/stack.rkt") (lib "racket-lang-org/download/version.rkt") (lib "racket-lang-org/www/learning.rkt") (lib "racket-lang-org/www/img/ide-support.rkt") (lib "racket-lang-org/blog/_src/posts/racket-status-jan2021/plot.rkt") (lib "racket-lang-org/www/resources.rkt") (lib "racket-lang-org/stubs/wiki.rkt") (lib "racket-lang-org/blog/_src/posts/racket-on-chez-status-jan2019/bm-jan19.rkt") (lib "racket-lang-org/blog/_src/posts/racket-on-chez-status-feb2020/bm-jan19.rkt") (lib "racket-lang-org/blog/_src/posts/2021-01-24-racket-status.scrbl") (lib "racket-lang-org/download/mirror-link.rkt") (lib "racket-lang-org/blog/_src/posts/racket-on-chez-status-jan2019/plot.rkt") (lib "racket-lang-org/blog/_src/posts/racket-on-chez-status-feb2020/plot.rkt") (lib "racket-lang-org/stubs/blog.rkt") (lib "racket-lang-org/www/all.rkt") (lib "racket-lang-org/school/2020/index.scrbl") (lib "racket-lang-org/blog/_src/posts/racket-on-chez-status-jan2019/build-desc.rkt") (lib "racket-lang-org/blog/_src/posts/racket-on-chez-status-feb2020/build-desc.rkt") (lib "racket-lang-org/rcon/resources.rkt") (lib "racket-lang-org/config.rkt") (lib "racket-lang-org/rcon/2015/eero.rkt") (lib "racket-lang-org/stubs/planet.rkt") (lib "racket-lang-org/www/techreports.rkt") (lib "racket-lang-org/minis/all.rkt") (lib "racket-lang-org/lists/resources.rkt") (lib "racket-lang-org/blog/_src/xml-from-blogger/xml.rkt") (lib "racket-lang-org/www/irc.rkt") (lib "racket-lang-org/stubs/dirlist.rkt") (lib "racket-lang-org/rcon/all.rkt") (lib "racket-lang-org/www/color.rkt") (lib "racket-lang-org/download/download-pages.rkt") (lib "racket-lang-org/www/hello-world.rkt") (lib "racket-lang-org/minis/drracket.rkt") (lib "racket-lang-org/stubs/all.rkt") (lib "racket-lang-org/sync.rkt") (lib "racket-lang-org/www/img/big-macros.rkt") (lib "racket-lang-org/rcon/2016/racketcon-font.rkt") (lib "racket-lang-org/www/download.rkt") (lib "racket-lang-org/stubs/docs.rkt") (lib "racket-lang-org/www/css/fonts/pollen.rkt") (lib "racket-lang-org/blog/_src/posts/racket-status-jan2021/build-desc.rkt") (lib "racket-lang-org/download/util.rkt") (lib "racket-lang-org/blog/_src/xml-from-blogger/main.rkt") (lib "racket-lang-org/www/old-techreports.rkt") (lib "racket-lang-org/blog/frog.rkt") (lib "racket-lang-org/www/lists.rkt") (lib "racket-lang-org/download/resources.rkt") (lib "racket-lang-org/www/pollen.rkt") (lib "racket-lang-org/www/code.rkt") (lib "racket-lang-org/rcon/2016/svg.rkt") (lib "racket-lang-org/rcon/2014/all.rkt") (lib "racket-lang-org/rcon/2013/all.rkt") (lib "racket-lang-org/rcon/2012/all.rkt") (lib "racket-lang-org/rcon/2011/all.rkt") (lib "racket-lang-org/blog/_src/posts/racket-status-jan2021/better.rkt") (lib "racket-lang-org/blog/_src/posts/racket-status-jan2021/bm-jan21.rkt") (lib "racket-lang-org/www/new-name.rkt") (lib "racket-lang-org/www/img/little-macros-2.rkt") (lib "racket-lang-org/www/web-copyright.rkt") (lib "racket-lang-org/stubs/pkgs.rkt") (lib "racket-lang-org/blog/_src/posts/racket-on-chez-status-feb2020/bm-jan20.rkt") (lib "racket-lang-org/all.rkt") (lib "racket-lang-org/download/symlinks.rkt") (lib "racket-lang-org/www/util.rkt") (lib "racket-lang-org/download/data.rkt") (lib "racket-lang-org/blog/_src/posts/racket-status-jan2021/bm.rkt") (lib "racket-lang-org/www/people.rkt") (lib "racket-lang-org/www/index-illos.rkt") (lib "racket-lang-org/download/installer-pages.rkt") (lib "racket-lang-org/blog/all.rkt") (lib "racket-lang-org/download/release-info.rkt") (lib "racket-lang-org/identity.rkt") (lib "racket-lang-org/download/index.rkt") (lib "racket-lang-org/blog/_src/posts/2020-05-10-racket-is-25.scrbl") (lib "racket-lang-org/stubs/mailman.rkt") (lib "racket-lang-org/www/help.rkt") (lib "racket-lang-org/blog/_src/posts/2020-02-19-racket-on-chez-status.scrbl") (lib "racket-lang-org/blog/_src/posts/2019-01-29-racket-on-chez-status.scrbl") (lib "racket-lang-org/rcon/2020/lib.rkt") (lib "racket-lang-org/download/indexes.rkt") (lib "racket-lang-org/download/all.rkt") (lib "racket-lang-org/blog/_src/posts/racket-status-jan2021/color.rkt") (lib "racket-lang-org/school/2019/pollen.rkt"))) (name . "racket-lang-org") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:eli@barzilay.org . #t) (author:mflatt@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/racket-lang-org") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5d43e3b95307815aaaac533b26a5ad0404611efc") (source . "git://github.com/racket/racket-lang-org") (source_url . "http://github.com/racket/racket-lang-org/tree/master"))))))) ("racket-langserver" . #hasheq((author . "theconor4@gmail.com jay.mccarthy@gmail.com") (authors . ("theconor4@gmail.com" "jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-langserver.txt") (test-failure-log . "server/built/test-fail/racket-langserver.txt") (test-success-log . #f))) (checksum . "962d9a337631ae0713bbdec3b4a1b35d6ff65294") (checksum-error . #f) (collection . "racket-langserver") (conflicts . ()) (dependencies . ("base" "compatibility-lib" "data-lib" "drracket-tool-lib" "gui-lib" "syntax-color-lib" "scribble-lib" "racket-index" "chk")) (description . "Language Server Protocol implementation for Racket") (implies . ()) (last-checked . 1632904460) (last-edit . 1518711849) (last-updated . 1627731243) (modules . ((lib "racket-langserver/msg-io.rkt") (lib "racket-langserver/error-codes.rkt") (lib "racket-langserver/text-document.rkt") (lib "racket-langserver/methods.rkt") (lib "racket-langserver/path-util.rkt") (lib "racket-langserver/doc-trace.rkt") (lib "racket-langserver/docs-helpers.rkt") (lib "racket-langserver/tests/test-main.rkt") (lib "racket-langserver/json-util.rkt") (lib "racket-langserver/interfaces.rkt") (lib "racket-langserver/autocomplete.rkt") (lib "racket-langserver/check-syntax.rkt") (lib "racket-langserver/queue-only-latest.rkt") (lib "racket-langserver/debug.rkt") (lib "racket-langserver/main.rkt") (lib "racket-langserver/responses.rkt") (lib "racket-langserver/symbol-kinds.rkt"))) (name . "racket-langserver") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (author:theconor4@gmail.com . #t) (ide . #t) (language-server-protocol . #t) (lsp . #t) (ring:1 . #t))) (source . "https://github.com/jeapostrophe/racket-langserver.git") (tags . ("ide" "language-server-protocol" "lsp")) (versions . #hash((default . #hasheq((checksum . "962d9a337631ae0713bbdec3b4a1b35d6ff65294") (source . "https://github.com/jeapostrophe/racket-langserver.git") (source_url . "https://github.com/jeapostrophe/racket-langserver.git"))))))) ("racket-language-server" . #hasheq((author . "david@craven.ch") (authors . ("david@craven.ch")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racket-language-server" "doc/racket-language-server@racket-language-server/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-language-server.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-language-server.txt"))) (checksum . "e397a130676504fc8b053e6b1f48d49b77b9ad98") (checksum-error . #f) (collection . "racket-language-server") (conflicts . ()) (dependencies . ("base" "data-lib" "drracket-tool-lib" "gui-lib" "scribble-lib" "syntax-color-lib" "at-exp-lib" "data-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Implementation of the Language Server Protocol for Racket.") (implies . ()) (last-checked . 1632904460) (last-edit . 1527266890) (last-updated . 1586531470) (modules . ((lib "racket-language-server/protocol/jsonrpc.rkt") (lib "racket-language-server/scribblings/racket-language-server.scrbl") (lib "racket-language-server/protocol/conversion.rkt") (lib "racket-language-server/protocol/lsp.rkt") (lib "racket-language-server/protocol/dispatch.rkt") (lib "racket-language-server/lang/lexer.rkt") (lib "racket-language-server/main.rkt") (lib "racket-language-server/protocol/methods.rkt") (lib "racket-language-server/lang/document.rkt") (lib "racket-language-server/protocol/json-util.rkt") (lib "racket-language-server/lang/worker.rkt") (lib "racket-language-server/protocol/notifications.rkt") (lib "racket-language-server/lang/indent.rkt") (lib "racket-language-server/lang/check-syntax.rkt") (lib "racket-language-server/lang/workspace.rkt"))) (name . "racket-language-server") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david@craven.ch . #t) (ide . #t) (language-server-protocol . #t) (lsp . #t) (ring:1 . #t))) (source . "https://github.com/theia-ide/racket-language-server.git") (tags . ("ide" "language-server-protocol" "lsp")) (versions . #hash((default . #hasheq((checksum . "e397a130676504fc8b053e6b1f48d49b77b9ad98") (source . "https://github.com/theia-ide/racket-language-server.git") (source_url . "https://github.com/theia-ide/racket-language-server.git"))))))) ("racket-lib" . #hash((author . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org ryanc@racket-lang.org samth@racket-lang.org") (authors . ("eli@racket-lang.org" "jay@racket-lang.org" "matthias@racket-lang.org" "mflatt@racket-lang.org" "robby@racket-lang.org" "ryanc@racket-lang.org" "samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("racket-win32-i386-3" #:platform "win32\\i386") ("racket-win32-x86_64-3" #:platform "win32\\x86_64") ("racket-x86_64-linux-natipkg-3" #:platform "x86_64-linux-natipkg") ("racket-x86_64-macosx-3" #:platform "x86_64-macosx") ("racket-i386-macosx-3" #:platform "i386-macosx") ("racket-ppc-macosx-3" #:platform "ppc-macosx") ("racket-aarch64-macosx-3" #:platform "aarch64-macosx") ("db-ppc-macosx" #:platform "ppc-macosx") ("db-win32-i386" #:platform "win32\\i386") ("db-win32-x86_64" #:platform "win32\\x86_64") ("db-x86_64-linux-natipkg" #:platform "x86_64-linux-natipkg") ("com-win32-i386" #:platform "win32\\i386") ("com-win32-x86_64" #:platform "win32\\x86_64"))) (description . "Combines platform-specific native libraries that are useful for base Racket") (implies . ()) (last-checked . 1632904460) (last-edit . 1460066358) (last-updated . 1632667142) (modules . ()) (name . "racket-lib") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:matthias@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "git://github.com/racket/racket/?path=pkgs/racket-lib") (source_url . "git://github.com/racket/racket/?path=pkgs/racket-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("racket-locale" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racket-locale" "doc/racket-locale@racket-locale/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-locale.txt") (test-failure-log . "server/built/test-fail/racket-locale.txt") (test-success-log . #f))) (checksum . "4381d42d76548b6b52522349955be55ee46e3700") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-index" "gregor-lib" "scribble-lib" "racket-doc" "sandbox-lib" "cover-coveralls")) (description . "More, and complete, locale tools. ") (implies . ()) (last-checked . 1632904461) (last-edit . 1538148480) (last-updated . 1538092693) (modules . ((lib "locale/main.rkt") (lib "locale/tests/test-doc-complete.rkt") (lib "locale/language-info.rkt") (lib "locale/private/system-type.rkt") (lib "locale/scribblings/format.scrbl") (lib "locale/tests/locale.rkt") (lib "locale/private/clocale.rkt") (lib "locale/scribblings/racket-locale.scrbl") (lib "locale/tests/format.rkt") (lib "locale/scribblings/language-info.scrbl") (lib "locale/tests/format-macosx.rkt") (lib "locale/private/matches.rkt") (lib "locale/private/cuname.rkt") (lib "locale/format.rkt") (lib "locale/tests/format-linux.rkt") (lib "locale/scribblings/locale.scrbl"))) (name . "racket-locale") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johnstonskj@gmail.com . #t) (i18n . #t) (locale . #t) (ring:1 . #t))) (source . "https://github.com/johnstonskj/racket-locale.git") (tags . ("i18n" "locale")) (versions . #hash((default . #hasheq((checksum . "4381d42d76548b6b52522349955be55ee46e3700") (source . "https://github.com/johnstonskj/racket-locale.git") (source_url . "https://github.com/johnstonskj/racket-locale.git"))))))) ("racket-paint" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racket-paint" "doc/racket-paint@racket-paint/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-paint.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-paint.txt"))) (checksum . "4fe14ce20d77053f4f299cb5123e229d635236cc") (checksum-error . #f) (collection . "racket-paint") (conflicts . ()) (date-added . 1603617294) (dependencies . ("gui-lib" "pict-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A simple paint program") (implies . ()) (last-checked . 1632904461) (last-edit . 1603617294) (last-updated . 1603633719) (modules . ((lib "racket-paint/paint.rkt") (lib "racket-paint/scribblings/racket-paint.scrbl") (lib "racket-paint/main.rkt"))) (name . "racket-paint") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (drawing . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/Metaxal/racket-paint.git") (tags . ("drawing" "gui")) (versions . #hash((default . #hasheq((checksum . "4fe14ce20d77053f4f299cb5123e229d635236cc") (source . "https://github.com/Metaxal/racket-paint.git") (source_url . "https://github.com/Metaxal/racket-paint.git"))))))) ("racket-pkg-test-a" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/racket-pkg-test-a.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "139613ab203fbb90db295d3e2355ffead2d45a1f") (checksum-error . #f) (collection . "a") (conflicts . ()) (date-added . 1553203370) (dependencies . ("base" "https://github.com/thoughtstem/racket-pkg-test-b.git" "https://github.com/thoughtstem/racket-pkg-test-c.git" "scribble-lib" "racket-doc" "rackunit-lib")) (description . " ") (implies . ()) (last-checked . 1632904461) (last-edit . 1553205333) (last-updated . 1557181328) (modules . ((lib "a/scribblings/a.scrbl") (lib "a/main.rkt"))) (name . "racket-pkg-test-a") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/racket-pkg-test-a.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "139613ab203fbb90db295d3e2355ffead2d45a1f") (source . "https://github.com/thoughtstem/racket-pkg-test-a.git") (source_url . "https://github.com/thoughtstem/racket-pkg-test-a.git"))))))) ("racket-poppler" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-poppler.txt") (test-failure-log . "server/built/test-fail/racket-poppler.txt") (test-success-log . #f))) (checksum . "0ccd65fb4a85c05ad6494b5ab8412c529bd77f26") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("draw-lib" "slideshow-lib" "web-server-lib" "base" "pict" ("poppler-x86-64-macosx" #:platform "x86_64-macosx") ("poppler-i386-macosx" #:platform "i386-macosx") ("poppler-win32-x86-64" #:platform "win32\\x86_64") ("poppler-win32-i386" #:platform "win32\\i386") "at-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc" "draw-doc" "pict-doc")) (description . "Read, search and render pdfs. Use LaTeX in scribble and slidehow.") (implies . ()) (last-checked . 1632904461) (last-edit . 1397498742) (last-updated . 1615405932) (modules . ((lib "racket-poppler/examples/test-render-tex.rkt") (lib "racket-poppler/main.rkt") (lib "racket-poppler/libs.rkt") (lib "racket-poppler/ffi.rkt") (lib "racket-poppler/examples/test-pdf-functions.rkt") (lib "racket-poppler/render-tex.rkt"))) (name . "racket-poppler") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (pdf . #t) (poppler . #t) (ring:1 . #t) (scribble . #t) (slideshow . #t))) (source . "github://github.com/soegaard/racket-poppler/master") (tags . ("pdf" "poppler" "scribble" "slideshow")) (versions . #hash((default . #hasheq((checksum . "0ccd65fb4a85c05ad6494b5ab8412c529bd77f26") (source . "github://github.com/soegaard/racket-poppler/master") (source_url . "http://github.com/soegaard/racket-poppler/tree/master"))))))) ("racket-ppc-macosx-2" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for racket package") (implies . ()) (last-checked . 1632904461) (last-edit . 1576860307) (last-updated . 1576860333) (modules . ()) (name . "racket-ppc-macosx-2") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f93224b18a5e9a397a5c1347f3575d37ca2047ce") (source . "https://pkg-sources.racket-lang.org/pkgs/f93224b18a5e9a397a5c1347f3575d37ca2047ce/racket-ppc-macosx-2.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/f93224b18a5e9a397a5c1347f3575d37ca2047ce/racket-ppc-macosx-2.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("racket-ppc-macosx-3" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-ppc-macosx-3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-ppc-macosx-3.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for racket package") (implies . ()) (last-checked . 1632904462) (last-edit . 1576860307) (last-updated . 1576860309) (modules . ()) (name . "racket-ppc-macosx-3") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "dd4c5bbabfa91f3e87b204e4d16b8a1dd0660268") (source . "https://pkg-sources.racket-lang.org/pkgs/dd4c5bbabfa91f3e87b204e4d16b8a1dd0660268/racket-ppc-macosx-3.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/dd4c5bbabfa91f3e87b204e4d16b8a1dd0660268/racket-ppc-macosx-3.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("racket-predicates" . #hasheq((author . "anu.drumcoder@gmail.com") (authors . ("anu.drumcoder@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "racket-predicates"))) (failure-log . "server/built/fail/racket-predicates.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "3a4f82ffaaf80033bb744e45eb57b05ef5399c99") (checksum-error . #f) (collection . "racket-predicates") (conflicts . ()) (date-added . 1598310321) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A library composed of predicate functions ") (implies . ()) (last-checked . 1632904462) (last-edit . 1598312889) (last-updated . 1608349275) (modules . ((lib "racket-predicates/test/list-predicates-test.rkt") (lib "racket-predicates/test/misc-predicates-test.rkt") (lib "racket-predicates/scribblings/racket-predicates.scrbl") (lib "racket-predicates/test/comparison-predicates-test.rkt") (lib "racket-predicates/test/string-predicates-test.rkt") (lib "racket-predicates/predicates/string/string-predicates.rkt") (lib "racket-predicates/predicates/numer/numerical-predicates.rkt") (lib "racket-predicates/predicates/comparison/comparison-predicates.rkt") (lib "racket-predicates/test/numerical-predicates-test.rkt") (lib "racket-predicates/main.rkt") (lib "racket-predicates/predicates/miscellaneous/misc-predicates.rkt") (lib "racket-predicates/test/logic-predicates-test.rkt") (lib "racket-predicates/predicates/logic/logic-predicates.rkt") (lib "racket-predicates/predicates/list/list-predicates.rkt"))) (name . "racket-predicates") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:anu.drumcoder@gmail.com . #t) (curry . #t) (functional . #t) (memoization . #t) (predicates . #t) (ring:1 . #t))) (source . "https://github.com/aryaghan-mutum/racket-predicates.git") (tags . ("curry" "functional" "memoization" "predicates")) (versions . #hash((default . #hasheq((checksum . "3a4f82ffaaf80033bb744e45eb57b05ef5399c99") (source . "https://github.com/aryaghan-mutum/racket-predicates.git") (source_url . "https://github.com/aryaghan-mutum/racket-predicates.git"))))))) ("racket-processing" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/racket-processing.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-processing.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-processing.txt"))) (checksum . "c4c51b528fa10fe69f89cc7b7c27bb3388ad11c7") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("racket-to")) (description . "Allows processing to be written with Lispy syntax in DrRacket.  Depends on the racket-to package, which transpiles to processing.") (implies . ()) (last-checked . 1632904463) (last-edit . 1515359889) (last-updated . 1516238294) (modules . ((lib "racket-processing/processing-module.rkt") (lib "racket-processing/main.rkt"))) (name . "racket-processing") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:stephen@thoughtstem.com . #t) (education . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/racket-processing.git") (tags . ("education")) (versions . #hash((default . #hasheq((checksum . "c4c51b528fa10fe69f89cc7b7c27bb3388ad11c7") (source . "https://github.com/thoughtstem/racket-processing.git") (source_url . "https://github.com/thoughtstem/racket-processing.git"))))))) ("racket-quandl" . #hasheq((author . "malcolm.still@gmail.com") (authors . ("malcolm.still@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racket-quandl" "doc/racket-quandl@racket-quandl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-quandl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-quandl.txt"))) (checksum . "2bc231f7981dfcd663c87ce46b4ff0876723a7ef") (checksum-error . #f) (collection . "racket-quandl") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Grab data from Quandl with racket for fun and profit") (implies . ()) (last-checked . 1632904463) (last-edit . 1456769446) (last-updated . 1502816354) (modules . ((lib "racket-quandl/main.rkt") (lib "racket-quandl/scribblings/racket-quandl.scrbl"))) (name . "racket-quandl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:malcolm.still@gmail.com . #t) (finance . #t) (ring:1 . #t))) (source . "git://github.com/malcolmstill/racket-quandl") (tags . ("finance")) (versions . #hash((default . #hasheq((checksum . "2bc231f7981dfcd663c87ce46b4ff0876723a7ef") (source . "git://github.com/malcolmstill/racket-quandl") (source_url . "http://github.com/malcolmstill/racket-quandl/tree/master"))))))) ("racket-rackunit-grade" . #hasheq((author . "ifigueroap@gmail.com") (authors . ("ifigueroap@gmail.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "rackunit-grade" "doc/rackunit-grade@racket-rackunit-grade/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-rackunit-grade.txt") (test-failure-log . "server/built/test-fail/racket-rackunit-grade.txt") (test-success-log . #f))) (checksum . "92526d7ced3b4cf7b5323752f20d8f36752e69b6") (checksum-error . #f) (collection . (multi)) (conflicts . ("rackunit-grade")) (dependencies . ("base" "rackunit" "doc-coverage" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1632904464) (last-edit . 1482781554) (last-updated . 1502816354) (modules . ((lib "rackunit/raco-grade.rkt") (lib "rackunit/grade.rkt") (lib "rackunit/scribblings/rackunit-grade.scrbl"))) (name . "racket-rackunit-grade") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:ifigueroap@gmail.com . #t) (ring:2 . #t))) (source . "git://github.com/ifigueroap/racket-rackunit-grade") (tags . ()) (versions . #hash((default . #hasheq((checksum . "92526d7ced3b4cf7b5323752f20d8f36752e69b6") (source . "git://github.com/ifigueroap/racket-rackunit-grade") (source_url . "http://github.com/ifigueroap/racket-rackunit-grade/tree/master"))))))) ("racket-raylib-2d" . #hasheq((author . "nma.arvydas.silanskas@gmail.com") (authors . ("nma.arvydas.silanskas@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-raylib-2d.txt") (test-failure-log . "server/built/test-fail/racket-raylib-2d.txt") (test-success-log . #f))) (checksum . "2f0b05f37e6bd81cf4246116c7d32f2744dc53c0") (checksum-error . #f) (collection . "raylib-2d") (conflicts . ()) (date-added . 1561492032) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Racket wrapper for Raylib (https://www.raylib.com/) v2.5 2D functionality") (implies . ()) (last-checked . 1632904464) (last-edit . 1561492032) (last-updated . 1561806885) (modules . ((lib "raylib-2d/test/font.rkt") (lib "raylib-2d/functions.rkt") (lib "raylib-2d/main.rkt") (lib "raylib-2d/structs.rkt") (lib "raylib-2d/test/camera.rkt") (lib "raylib-2d/test/mouse.rkt") (lib "raylib-2d/test/shader.rkt") (lib "raylib-2d/test/texture.rkt") (lib "raylib-2d/colors.rkt") (lib "raylib-2d/test/kb.rkt") (lib "raylib-2d/test/image.rkt") (lib "raylib-2d/util.rkt") (lib "raylib-2d/test/shape.rkt") (lib "raylib-2d/enums.rkt"))) (name . "racket-raylib-2d") (ring . 1) (search-terms . #hasheq((2d . #t) (:build-success: . #t) (author:nma.arvydas.silanskas@gmail.com . #t) (ffi . #t) (game . #t) (graphics . #t) (ring:1 . #t))) (source . "https://github.com/arvyy/racket-raylib-2d.git") (tags . ("2d" "ffi" "game" "graphics")) (versions . #hash((default . #hasheq((checksum . "2f0b05f37e6bd81cf4246116c7d32f2744dc53c0") (source . "https://github.com/arvyy/racket-raylib-2d.git") (source_url . "https://github.com/arvyy/racket-raylib-2d.git"))))))) ("racket-route-match" . #hasheq((author . "dk-junker@ya.ru") (authors . ("dk-junker@ya.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racket-route-match" "doc/racket-route-match@racket-route-match/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-route-match.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-route-match.txt"))) (checksum . "c9800e602f0e58bf6e0273d7dbdb86d28f9047cb") (checksum-error . #f) (collection . "racket-route-match") (conflicts . ()) (date-added . 1552731295) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "racket-route-match is a library for matching URL routes. It uses the same routing syntax as used by popular Ruby web frameworks like Ruby on Rails and Sinatra.") (implies . ()) (last-checked . 1632904464) (last-edit . 1552736601) (last-updated . 1553098680) (modules . ((lib "racket-route-match/main.rkt") (lib "racket-route-match/scribblings/racket-route-match.scrbl") (lib "racket-route-match/test.rkt"))) (name . "racket-route-match") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dk-junker@ya.ru . #t) (ring:1 . #t) (route . #t))) (source . "https://github.com/Junker/racket-route-match.git") (tags . ("route")) (versions . #hash((default . #hasheq((checksum . "c9800e602f0e58bf6e0273d7dbdb86d28f9047cb") (source . "https://github.com/Junker/racket-route-match.git") (source_url . "https://github.com/Junker/racket-route-match.git"))))))) ("racket-scaffold" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scaffold" "doc/scaffold@racket-scaffold/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-scaffold.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-scaffold.txt"))) (checksum . "8613daf76e46fbf320de1230565e67de17fb92f5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-index" "dali" "scribble-lib" "scribble-doc" "racket-doc" "sandbox-lib" "cover-coveralls")) (description . "Simple templated content generator integrated with raco") (implies . ()) (last-checked . 1632904464) (last-edit . 1536259205) (last-updated . 1539972965) (modules . ((lib "scaffold/scribblings/scaffold.scrbl") (lib "scaffold/plank-files/test-doc-complete.rkt") (lib "scaffold/plank-files/info-collection.rkt") (lib "scaffold/private/system.rkt") (lib "scaffold/plank-files/scribble-module.scrbl") (lib "scaffold/plank-files/info-multi-package.rkt") (lib "scaffold/plank-files/module.rkt") (lib "scaffold/plank-files/test-module.rkt") (lib "scaffold/private/logging.rkt") (lib "scaffold/plank-files/info-single-package.rkt") (lib "scaffold/introspect.rkt") (lib "scaffold/planks.rkt") (lib "scaffold/main.rkt") (lib "scaffold/test/test-doc-complete.rkt") (lib "scaffold/plank-files/scribble-top.scrbl"))) (name . "racket-scaffold") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johnstonskj@gmail.com . #t) (raco . #t) (ring:1 . #t))) (source . "https://github.com/johnstonskj/racket-scaffold.git") (tags . ("raco")) (versions . #hash((default . #hasheq((checksum . "8613daf76e46fbf320de1230565e67de17fb92f5") (source . "https://github.com/johnstonskj/racket-scaffold.git") (source_url . "https://github.com/johnstonskj/racket-scaffold.git"))))))) ("racket-school-mystery-languages" . #hasheq((author . "justinpombrio@cs.brown.edu") (authors . ("justinpombrio@cs.brown.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/racket-school-mystery-languages.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-school-mystery-languages.txt") (test-failure-log . "server/built/test-fail/racket-school-mystery-languages.txt") (test-success-log . #f))) (checksum . "757295f338d9d3937046782f9c910f8e39d42ef8") (checksum-error . #f) (collection . "RacketSchool") (conflicts . ()) (dependencies . ()) (description . "Some labs will have you explore these languages. One syntax, many semantics. (2017)") (implies . ()) (last-checked . 1632904464) (last-edit . 1499403519) (last-updated . 1502816355) (modules . ((lib "RacketSchool/Variables3.rkt") (lib "RacketSchool/Functions1.rkt") (lib "RacketSchool/Functions3.rkt") (lib "RacketSchool/Variables1.rkt") (lib "RacketSchool/private/tests.rkt") (lib "RacketSchool/VariablesAll.rkt") (lib "RacketSchool/private/basic.rkt") (lib "RacketSchool/FunctionsAll.rkt") (lib "RacketSchool/private/mystery.rkt") (lib "RacketSchool/private/mystery-lang.rkt") (lib "RacketSchool/Records3.rkt") (lib "RacketSchool/public/basic.rkt") (lib "RacketSchool/private/event-loop.rkt") (lib "RacketSchool/Variables2.rkt") (lib "RacketSchool/private/mystery-functions.rkt") (lib "RacketSchool/private/mystery-records.rkt") (lib "RacketSchool/Functions2.rkt") (lib "RacketSchool/private/mystery-variables.rkt") (lib "RacketSchool/private/mystery-semantics-records.rkt") (lib "RacketSchool/RecordsAll.rkt") (lib "RacketSchool/private/testing.rkt") (lib "RacketSchool/Records2.rkt") (lib "RacketSchool/Records1.rkt") (lib "RacketSchool/private/mystery-semantics-variables.rkt") (lib "RacketSchool/private/mystery-semantics-functions.rkt"))) (name . "racket-school-mystery-languages") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:justinpombrio@cs.brown.edu . #t) (ring:1 . #t))) (source . "git://github.com/justinpombrio/RacketSchool") (tags . ()) (versions . #hash((default . #hasheq((checksum . "757295f338d9d3937046782f9c910f8e39d42ef8") (source . "git://github.com/justinpombrio/RacketSchool") (source_url . "http://github.com/justinpombrio/RacketSchool/tree/master"))))))) ("racket-spider" . #hasheq((author . "1227847322@qq.com") (authors . ("1227847322@qq.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/racket-spider.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-spider.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-spider.txt"))) (checksum . "e85c669f23e96944a7f9a42b29872b8e59a65c74") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1577869465) (dependencies . ()) (description . "lightweight http client") (implies . ()) (last-checked . 1632904465) (last-edit . 1577869465) (last-updated . 1577880538) (modules . ((lib "racket-spider/spider.rkt"))) (name . "racket-spider") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:1227847322@qq.com . #t) (ring:1 . #t))) (source . "https://github.com/Syntacticlosure/racket-spider.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e85c669f23e96944a7f9a42b29872b8e59a65c74") (source . "https://github.com/Syntacticlosure/racket-spider.git") (source_url . "https://github.com/Syntacticlosure/racket-spider.git"))))))) ("racket-test" . #hash((author . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org ryanc@racket-lang.org samth@racket-lang.org") (authors . ("eli@racket-lang.org" "jay@racket-lang.org" "matthias@racket-lang.org" "mflatt@racket-lang.org" "robby@racket-lang.org" "ryanc@racket-lang.org" "samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("compiler-lib" "sandbox-lib" "compatibility-lib" "eli-tester" "planet-lib" "net-lib" "net-test" "serialize-cstruct-lib" "cext-lib" "pconvert-lib" "racket-test-core" "web-server-lib" "rackunit-lib" "at-exp-lib" "option-contract-lib" "srfi-lib" "scribble-lib" "racket-index" "scheme-lib" "base" "data-lib")) (description . "Base Racket test suites") (implies . ("racket-test-core")) (last-checked . 1632904465) (last-edit . 1460066358) (last-updated . 1632667171) (modules . ((lib "tests/pkg/test-pkgs/pkg-add-x/a.scrbl") (lib "tests/pkg/test-pkgs/pkg-add-a/a.scrbl") (lib "tests/pkg/test-pkgs/pkg-add-1/b.scrbl") (lib "tests/future/list-flags.rkt") (lib "tests/racket/contract/stream.rkt") (lib "tests/file/md5.rkt") (lib "tests/racket/contract/all.rkt") (lib "tests/stxparse/deps.rkt") (lib "tests/racket/place-thread-sleep.rkt") (lib "tests/racket/hash-mem.rkt") (lib "tests/launcher/test-docs-complete.rkt") (lib "tests/pkg/test-pkgs/racket-conflict/racket/list.rkt") (lib "tests/racket/sandbox.rkt") (lib "tests/future/hash-lock.rkt") (lib "tests/racket/contract/blame.rkt") (lib "tests/file/gzip.rkt") (lib "tests/pkg/tests-update-deps.rkt") (lib "tests/racket/contract/any-and-none.rkt") (lib "tests/racket/os-async-channel.rkt") (lib "tests/pkg/test-pkgs/pkg-z/z/main.rkt") (lib "tests/pkg/test-pkgs/pkg-y/y/main.rkt") (lib "tests/pkg/test-pkgs/pkg-x/x/main.rkt") (lib "tests/racket/stress/cm-lock.rkt") (lib "tests/racket/place2.rkt") (lib "tests/file/sha1.rkt") (lib "tests/racket/enter.rkt") (lib "tests/file/tar-long-paths.rkt") (lib "tests/racket/place-msg-gc.rkt") (lib "tests/pkg/tests-api.rkt") (lib "tests/syntax/module-reader-synthetic-pos.rkt") (lib "tests/pkg/tests-name.rkt") (lib "tests/stress.rkt") (lib "tests/utils/sexp-diff.rkt") (lib "tests/racket/parallel-plot.rkt") (lib "tests/racket/contract/contract-out.rkt") (lib "tests/racket/place-kill-unwind.rkt") (lib "tests/syntax/contract/test-exprc-paths.rkt") (lib "tests/racket/contract/arrow-neg-party.rkt") (lib "tests/generic/from-unstable.rkt") (lib "tests/pkg/test-pkgs/pkg-a-second/pkg-a/main.rkt") (lib "tests/generic/top-level.rkt") (lib "tests/pkg/tests-permissions.rkt") (lib "tests/file/glob-test-dir/glob-test-subdir/.secret3.rkt") (lib "tests/racket/surrogate.rkt") (lib "tests/racket/contract/obligations.rkt") (lib "tests/racket/contract/struct-type-property.rkt") (lib "tests/racket/place-msg-rational.rkt") (lib "tests/racket/place-kill.rkt") (lib "tests/syntax/modcollapse.rkt") (lib "tests/future/shutdown-stress.rkt") (lib "tests/racket/win-link.rkt") (lib "tests/racket/contract/context.rkt") (lib "tests/racket/place-plumber.rkt") (lib "tests/xml/offset.rkt") (lib "tests/racket/contract/evt.rkt") (lib "tests/racket/custodian-finalize.rkt") (lib "tests/racket/contract/test-util.rkt") (lib "tests/setup/path-to-relative.rkt") (lib "tests/racket/contract/tail.rkt") (lib "tests/racket/ffi-alloc.rkt") (lib "tests/racket/contract/make-contract.rkt") (lib "tests/racket/locale-cache.rkt") (lib "tests/racket/contract/object-contract.rkt") (lib "tests/pkg/test-pkgs/pkg-a-third/pkg-b/main.rkt") (lib "tests/pkg/test-pkgs/pkg-a-third/pkg-a/main.rkt") (lib "tests/racket/com.rkt") (lib "tests/racket/embed-in-c.rkt") (lib "tests/racket/stress/hash.rkt") (lib "tests/racket/place-init-param.rkt") (lib "tests/generic/struct-type-property.rkt") (lib "tests/racket/place-channel.rkt") (lib "tests/pkg/test-pkgs/pkg-test1/data/empty-set.rkt") (lib "tests/future/fsemaphore.rkt") (lib "tests/generic/custom-write.rkt") (lib "tests/generic/impersonate.rkt") (lib "tests/pkg/test-pkgs/pkg-test1/pkg-test1/conflict.rkt") (lib "tests/generic/contract.rkt") (lib "tests/xml/num-entity.rkt") (lib "tests/pkg/test-pkgs/pkg-add-excl/not-me/x.rkt") (lib "tests/pkg/test-pkgs/pkg-test3/number.rkt") (lib "tests/racket/contract/assertion.rkt") (lib "tests/racket/contract-stress-argmin.rkt") (lib "tests/pkg/shelly.rkt") (lib "tests/racket/stress/vector.rkt") (lib "tests/racket/contract/recursive-contract.rkt") (lib "tests/racket/mpair.rkt") (lib "tests/future/tail-apply.rkt") (lib "tests/racket/keyword-apply-dict.rkt") (lib "tests/racket/load-handler.rkt") (lib "tests/racket/stress/or.rkt") (lib "tests/pkg/path.rkt") (lib "tests/racket/stress/fact.rkt") (lib "tests/pkg/tests-create.rkt") (lib "tests/pkg/test-pkgs/pkg-test1-conflict/pkg-test1/main.rkt") (lib "tests/help/test-docs-complete.rkt") (lib "tests/racket/contract/vector.rkt") (lib "tests/racket/contract/opt-c.rkt") (lib "tests/syntax/modcode.rkt") (lib "tests/pkg/tests-install.rkt") (lib "tests/racket/place-channel-fd3.rkt") (lib "tests/racket/contract/property.rkt") (lib "tests/openssl/test-sni.rkt") (lib "tests/generic/equal+hash.rkt") (lib "tests/racket/contract/unconstrained-domain.rkt") (lib "tests/pkg/test-pkgs/pkg-test1-conflict/pkg-test1/conflict.rkt") (lib "tests/pkg/tests-binary.rkt") (lib "tests/racket/contract/multi-file.rkt") (lib "tests/file/unzip.rkt") (lib "tests/generic/methods.rkt") (lib "tests/generic/custom-hash.rkt") (lib "tests/racket/require.rkt") (lib "tests/pkg/test-pkgs/pkg-implied-one/main.rkt") (lib "tests/syntax/struct.rkt") (lib "tests/pkg/test-pkgs/raco-pkg/raco-pkg/main.rkt") (lib "tests/syntax/contract/perf-liftable.rkt") (lib "tests/pkg/test-pkgs/pkg-y/y/y.scrbl") (lib "tests/pkg/test-pkgs/pkg-x/x/x.scrbl") (lib "tests/syntax/contract/perf-nolift-result.rkt") (lib "tests/racket/place-channel-fd2.rkt") (lib "tests/racket/contract/sequence.rkt") (lib "tests/racket/place-ports.rkt") (lib "tests/racket/ffi-custodian.rkt") (lib "tests/racket/stress/contract-lifting.rkt") (lib "tests/racket/contract/proc-accepts-and-more.rkt") (lib "tests/stxparse/select.rkt") (lib "tests/setup/collection-search.rkt") (lib "tests/syntax/contract/macro1.rkt") (lib "tests/racket/contract/struct-contract.rkt") (lib "tests/racket/place-chmsg-gc.rkt") (lib "tests/stxparse/test-syntax.rkt") (lib "tests/stxparse/test-template.rkt") (lib "tests/generic/struct-form.rkt") (lib "tests/racket/deterministic-zo.rkt") (lib "tests/racket/place-stdio.rkt") (lib "tests/xml/srcloc.rkt") (lib "tests/racket/remote-atomic-write.rkt") (lib "tests/racket/place-cross-phase.rkt") (lib "tests/pkg/test-pkgs/pkg-test2/pkg-test2/main.rkt") (lib "tests/pkg/test-pkgs/pkg-y/y/other.rkt") (lib "tests/racket/place-and-future.rkt") (lib "tests/setup/path-to-collects.rkt") (lib "tests/syntax/test-readerr.rkt") (lib "tests/syntax/contract/test-errors.rkt") (lib "tests/racket/curry.rkt") (lib "tests/racket/contract/arrow-star.rkt") (lib "tests/racket/contract/continuation-mark.rkt") (lib "tests/generic/base-interfaces.rkt") (lib "tests/racket/place-parallel.rkt") (lib "tests/pkg/test-pkgs/pkg-add-x/x.rkt") (lib "tests/match/define-match.rkt") (lib "tests/syntax/datum.rkt") (lib "tests/racket/long-cmdline.rkt") (lib "tests/pkg/test-pkgs/pkg-test1/pkg-test1/number.rkt") (lib "tests/racket/stress/cumulative-memory.rkt") (lib "tests/stxparse/test-exprc.rkt") (lib "tests/pkg/tests-deps.rkt") (lib "tests/units/test-cert.rkt") (lib "tests/pkg/test-pkgs/pkg-y/y/sub/s.rkt") (lib "tests/racket/contract/with-contract.rkt") (lib "tests/units/test-exptime.rkt") (lib "tests/pkg/test-pkgs/pkg-test1-manifest-error/pkg-test1/main.rkt") (lib "tests/json/json.rkt") (lib "tests/racket/contract/prof.rkt") (lib "tests/racket/contract/prompt-tag.rkt") (lib "tests/racket/contract/equivalent.rkt") (lib "tests/pkg/tests-clone.rkt") (lib "tests/file/unpackers.rkt") (lib "tests/stxparse/test-errors.rkt") (lib "tests/pkg/test-pkgs/pkg-test2/pkg-test2/contains-dep.rkt") (lib "tests/racket/contract/first-order.rkt") (lib "tests/racket/com-category.rkt") (lib "tests/generic/syntax-errors.rkt") (lib "tests/racket/contract/define-contract-struct.rkt") (lib "tests/generic/empty-interface.rkt") (lib "tests/racket/contract/or-and.rkt") (lib "tests/run-automated-tests.rkt") (lib "tests/syntax/tests/transformer.rkt") (lib "tests/pkg/tests-update.rkt") (lib "tests/pkg/basic-index.rkt") (lib "tests/pkg/test-pkgs/pkg-add-base/x.rkt") (lib "tests/syntax/contract/client1-1.rkt") (lib "tests/racket/contract/list.rkt") (lib "tests/openssl/https.rkt") (lib "tests/syntax/tests/pr12017.rkt") (lib "tests/pkg/test-catalogs-api.rkt") (lib "tests/pkg/test-pkgs/pkg-test1-v2/pkg-test1/main.rkt") (lib "tests/racket/place-channel-compete.rkt") (lib "tests/racket/stress/custodian.rkt") (lib "tests/generic/from-docs.rkt") (lib "tests/racket/cross-phase.rkt") (lib "tests/stxparse/stress.rkt") (lib "tests/match/match-tests.rkt") (lib "tests/racket/place-no-writer.rkt") (lib "tests/generic/errors.rkt") (lib "tests/racket/contract/async-channel.rkt") (lib "tests/racket/place-chmsg-gc-acct.rkt") (lib "tests/racket/stress/datum-to-syntax.rkt") (lib "tests/racket/contract-stress-take-right.rkt") (lib "tests/racket/contract/collapsible-arrow.rkt") (lib "tests/racket/stress/dict.rkt") (lib "tests/pkg/test-pkgs/pkg-test3-v2/pkg-test3/main.rkt") (lib "tests/stxparse/stress-template.rkt") (lib "tests/pkg/tests-main-server.rkt") (lib "tests/racket/contract/parametric.rkt") (lib "tests/pkg/test-pkgs/pkg-add-excl/neither/x.rkt") (lib "tests/openssl/test-alpn.rkt") (lib "tests/units/test-harness.rkt") (lib "tests/racket/contract/rename.rkt") (lib "tests/pkg/tests-db.rkt") (lib "tests/racket/contract/object.rkt") (lib "tests/zo-size.rkt") (lib "tests/syntax/racket-syntax.rkt") (lib "tests/racket/contract/flat-contracts.rkt") (lib "tests/xml/test-path.rkt") (lib "tests/racket/stress/datum-intern.rkt") (lib "tests/racket/stress/module-stack.rkt") (lib "tests/pkg/test-pkgs/pkg-test1-manifest-error/pkg-test1/conflict.rkt") (lib "tests/racket/contract/set.rkt") (lib "tests/units/test-runtime.rkt") (lib "tests/racket/old-make-zo.rkt") (lib "tests/syntax/contract/macro2.rkt") (lib "tests/racket/contract/errortrace.rkt") (lib "tests/pkg/tests-catalogs.rkt") (lib "tests/xml/to-list.rkt") (lib "tests/racket/contract/arrow.rkt") (lib "tests/generic/defaults.rkt") (lib "tests/pkg/test-docs.rkt") (lib "tests/pkg/tests-promote.rkt") (lib "tests/units/multi-mod-sigs.rkt") (lib "tests/racket/contract/collapsible-vector.rkt") (lib "tests/pkg/tests-conflicts.rkt") (lib "tests/pkg/test-pkgs/pkg-test1-v2/pkg-test1/conflict.rkt") (lib "tests/pkg/tests-versions.rkt") (lib "tests/stxparse/stxclass.rkt") (lib "tests/racket/contract/parameter.rkt") (lib "tests/racket/place-channel-ffi.rkt") (lib "tests/pkg/tests-trash.rkt") (lib "tests/file/cache.rkt") (lib "tests/racket/glib-log.rkt") (lib "tests/syntax/tests/location.rkt") (lib "tests/pkg/tests-implies.rkt") (lib "tests/file/glob-test-dir/glob-test-subdir/.secret4.rkt") (lib "tests/racket/places.rkt") (lib "tests/racket/contract/define-opt-c.rkt") (lib "tests/file/glob-test-dir/.secret1.rkt") (lib "tests/racket/contract/helpers.rkt") (lib "tests/generic/defined-table.rkt") (lib "tests/pkg/test-pkgs/pkg-b-second/pkg-b/main.rkt") (lib "tests/pkg/test-pkgs/pkg-test1/pkg-test1/update.rkt") (lib "tests/racket/place-log.rkt") (lib "tests/racket/bool.rkt") (lib "tests/pkg/tests-checksums.rkt") (lib "tests/racket/dump-tilde-name.rkt") (lib "tests/pkg/tests-update-auto.rkt") (lib "tests/file/glob.rkt") (lib "tests/racket/ffi-call-final.rkt") (lib "tests/syntax/meta-reader-original.rkt") (lib "tests/racket/place-gc-logger.rkt") (lib "tests/pkg/test.rkt") (lib "tests/racket/contract/value-contract.rkt") (lib "tests/racket/pr14207.rkt") (lib "tests/syntax/flatten-begin.rkt") (lib "tests/generic/fallbacks.rkt") (lib "tests/pkg/test-pkgs/pkg-test1-v2/pkg-test1/update.rkt") (lib "tests/pkg/test-pkgs/pkg-test1-staging/a.rkt") (lib "tests/racket/collection-name.rkt") (lib "tests/pkg/tests-overwrite.rkt") (lib "tests/syntax/run.rkt") (lib "tests/stxparse/test.rkt") (lib "tests/pkg/test-pkgs/pkg-b-second/pkg-b/contains-dep.rkt") (lib "tests/openssl/test-server-sni.rkt") (lib "tests/racket/contract/box.rkt") (lib "tests/pkg/tests-locking.rkt") (lib "tests/racket/contract/struct-dc.rkt") (lib "tests/syntax/tests/macro-testing.rkt") (lib "tests/pkg/tests-config.rkt") (lib "tests/stxparse/test-litset.rkt") (lib "tests/generic/pr13737.rkt") (lib "tests/generic/poly-contracts.rkt") (lib "tests/racket/contract/recontract.rkt") (lib "tests/racket/embed-place.rkt") (lib "tests/pkg/tests-scope.rkt") (lib "tests/pkg/test-pkgs/pkg-test3/main.rkt") (lib "tests/pkg/test-pkgs/pkg-test1-manifest-error/pkg-test1/update.rkt") (lib "tests/pkg/test-pkgs/pkg-implied-two/main.rkt") (lib "tests/racket/place-channel-limits.rkt") (lib "tests/units/test-deps.rkt") (lib "tests/racket/contract/exists.rkt") (lib "tests/racket/stress/number-hash.rkt") (lib "tests/racket/os-thread.rkt") (lib "tests/pkg/tests-new.rkt") (lib "tests/racket/contract/promise.rkt") (lib "tests/pkg/test-pkgs/pkg-cycle2/main.rkt") (lib "tests/generic/stream.rkt") (lib "tests/racket/contract/class.rkt") (lib "tests/pkg/test-pkgs/pkg-add-a/y.rkt") (lib "tests/pkg/test-pkgs/pkg-add-1/y.rkt") (lib "tests/file/test-docs-complete.rkt") (lib "tests/pkg/test-pkgs/pkg-b-first/pkg-b/main.rkt") (lib "tests/pkg/test-pkgs/pkg-a-first/pkg-a/main.rkt") (lib "tests/racket/rerequire.rkt") (lib "tests/pkg/tests-network.rkt") (lib "tests/racket/contract/stronger.rkt") (lib "tests/openssl/test-ephemeral.rkt") (lib "tests/racket/cat.rkt") (lib "tests/racket/prompt-sfs.rkt") (lib "tests/syntax/mzstruct.rkt") (lib "tests/future/tail-end.rkt") (lib "tests/pkg/test-pkgs/pkg-add-excl/neither/a.scrbl") (lib "tests/future/future.rkt") (lib "tests/racket/contract/define-struct-contract.rkt") (lib "tests/racket/place-struct-info.rkt") (lib "tests/racket/contract/random-generate.rkt") (lib "tests/pkg/tests-raco.rkt") (lib "tests/racket/place-master-gc.rkt") (lib "tests/file/packers.rkt") (lib "tests/xml/test-clark.rkt") (lib "tests/future/slow-getter.rkt") (lib "tests/openssl/test-channel-binding.rkt") (lib "tests/generic/method-table.rkt") (lib "tests/file/glob-test-dir/.secret2.rkt") (lib "tests/pkg/test-pkgs/pkg-strip/main.rkt") (lib "tests/racket/print-value-columns.rkt") (lib "tests/pkg/test-scope-add.rkt") (lib "tests/stxparse/test-exp.rkt") (lib "tests/racket/place-sync-gc.rkt") (lib "tests/racket/contract/arrow-i.rkt") (lib "tests/racket/contract/predicates.rkt") (lib "tests/stxparse/manual/disappeared-uses.rkt") (lib "tests/pkg/git-http-proxy.rkt") (lib "tests/racket/ffi-orig-place.rkt") (lib "tests/pkg/test-pkgs/pkg-cycle1/main.rkt") (lib "tests/racket/contract/bug.rkt") (lib "tests/racket/format.rkt") (lib "tests/racket/contract/instanceof.rkt") (lib "tests/pkg/test-pkgs/pkg-test3-v3/main.rkt") (lib "tests/racket/stress/fs-change.rkt") (lib "tests/pkg/test-pkgs/pkg-test1/pkg-test1/main.rkt") (lib "tests/racket/contract/ifc.rkt") (lib "tests/generic/alist.rkt") (lib "tests/pkg/tests-migrate.rkt") (lib "tests/pkg/tests-planet.rkt") (lib "tests/pkg/test-pkgs/pkg-x/x/keep.scrbl") (lib "tests/syntax/location.rkt") (lib "tests/syntax/contract/client1-2.rkt") (lib "tests/racket/contract/hash.rkt") (lib "tests/xml/test.rkt") (lib "tests/racket/contract/channel.rkt") (lib "tests/racket/contract/list-contract.rkt") (lib "tests/openssl/hostname.rkt") (lib "tests/openssl/peer-verif2.rkt") (lib "tests/racket/place-in-channel-fnl.rkt") (lib "tests/pkg/test-pkgs/pkg-add-base/a.scrbl") (lib "tests/stxparse/setup.rkt") (lib "tests/generic/iterator.rkt") (lib "tests/pkg/tests-failure.rkt") (lib "tests/zo-path.rkt") (lib "tests/syntax/to-string.rkt") (lib "tests/units/test-unit.rkt") (lib "tests/match/examples.rkt") (lib "tests/generic/tests.rkt") (lib "tests/racket/place-channel-socket.rkt") (lib "tests/future/touch-and-final.rkt") (lib "tests/syntax/contract/phase.rkt") (lib "tests/racket/place1.rkt") (lib "tests/racket/contract/name.rkt") (lib "tests/generic/benchmark.rkt") (lib "tests/setup/parallel-build.rkt") (lib "tests/racket/contract/interface.rkt") (lib "tests/racket/stress/log-receiver.rkt") (lib "tests/stxparse/function-header.rkt") (lib "tests/units/test-unit-contracts.rkt") (lib "tests/racket/contract/arrow-d.rkt") (lib "tests/match/other-plt-tests.rkt") (lib "tests/openssl/basic.rkt") (lib "tests/racket/contract/syntax.rkt") (lib "tests/stxparse/test-datum.rkt") (lib "tests/racket/place-channel-fd.rkt") (lib "tests/match/other-tests.rkt") (lib "tests/xml/pr2440.rkt") (lib "tests/racket/stress/apply.rkt") (lib "tests/setup/matching-platform.rkt") (lib "tests/pkg/test-pkgs/pkg-c/c.rkt") (lib "tests/racket/stress/prompt-mem-use.rkt") (lib "tests/future/fsema-lock.rkt") (lib "tests/racket/contract/immutable.rkt") (lib "tests/generic/marked.rkt") (lib "tests/racket/contract/define-contract.rkt") (lib "tests/syntax/free-vars.rkt") (lib "tests/pkg/tests-catalog-links.rkt") (lib "tests/pkg/tests-basic.rkt") (lib "tests/racket/custodian-finalize-help.rkt") (lib "tests/racket/link.rkt") (lib "tests/racket/parallel-build.rkt") (lib "tests/racket/contract/case-arrow.rkt") (lib "tests/racket/place-channel-fnl.rkt") (lib "tests/syntax/contract/perf-nolift.rkt") (lib "tests/pkg/test-pkgs/pkg-add-excl/not-me/a.scrbl") (lib "tests/match/main.rkt") (lib "tests/pkg/tests-platform.rkt") (lib "tests/racket/contract/make-proj-contract.rkt") (lib "tests/racket/stress/sequence.rkt") (lib "tests/match/match-exn-tests.rkt") (lib "tests/file/main.rkt") (lib "tests/future/vector-limit.rkt") (lib "tests/pkg/util.rkt") (lib "tests/racket/hash-random.rkt") (lib "tests/racket/stress/stx-concurrent.rkt") (lib "tests/racket/runaway-place.rkt") (lib "tests/racket/stress/fuzz.rkt") (lib "tests/pkg/tests-remove.rkt") (lib "tests/pkg/test-pkgs/pkg-test1-v2/pkg-test1/number.rkt") (lib "tests/openssl/peer-verif.rkt") (lib "tests/racket/place-channel-chaperone.rkt"))) (name . "racket-test") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:matthias@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "git://github.com/racket/racket/?path=pkgs/racket-test") (source_url . "git://github.com/racket/racket/?path=pkgs/racket-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("racket-test-core" . #hash((author . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org ryanc@racket-lang.org samth@racket-lang.org") (authors . ("eli@racket-lang.org" "jay@racket-lang.org" "matthias@racket-lang.org" "mflatt@racket-lang.org" "robby@racket-lang.org" "ryanc@racket-lang.org" "samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "zo-lib" "at-exp-lib" "serialize-cstruct-lib" "dynext-lib" "sandbox-lib")) (description . "Minimal core version of Racket test suites") (implies . ()) (last-checked . 1632904466) (last-edit . 1460066358) (last-updated . 1632667196) (modules . ((lib "tests/racket/for-submod.rkt") (lib "tests/racket/try-atomic.rkt") (lib "tests/racket/net-available.rkt") (lib "tests/racket/draw-box.rkt") (lib "tests/racket/phantom-bytes.rkt") (lib "tests/racket/place-utils.rkt") (lib "tests/racket/for-util.rkt") (lib "tests/racket/parallel.rkt") (lib "tests/racket/cmdline-eval.rkt") (lib "tests/racket/ffi-lock.rkt") (lib "tests/racket/maybe-single.rkt") (lib "tests/racket/has-submod.rkt") (lib "tests/racket/test-pack.rkt") (lib "tests/racket/lang/reader.rkt") (lib "tests/racket/test.rkt") (lib "tests/racket/distro.rkt"))) (name . "racket-test-core") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:matthias@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "git://github.com/racket/racket/?path=pkgs/racket-test-core") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "git://github.com/racket/racket/?path=pkgs/racket-test-core") (source_url . "git://github.com/racket/racket/?path=pkgs/racket-test-core"))) ("6.1.1" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("racket-test-extra" . #hash((author . "eli@racket-lang.org jay@racket-lang.org matthias@racket-lang.org mflatt@racket-lang.org robby@racket-lang.org ryanc@racket-lang.org samth@racket-lang.org") (authors . ("eli@racket-lang.org" "jay@racket-lang.org" "matthias@racket-lang.org" "mflatt@racket-lang.org" "robby@racket-lang.org" "ryanc@racket-lang.org" "samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "redex-lib" "scheme-lib" "rackunit-lib" "serialize-cstruct-lib")) (description . "Additional Racket test suites") (implies . ()) (last-checked . 1632904466) (last-edit . 1460066358) (last-updated . 1632667221) (modules . ((lib "tests/ffi/serialize-cstruct.rkt") (lib "tests/racket/set-regression.rkt") (lib "tests/racket/many-places.rkt") (lib "tests/racket/struct-out-supertype.rkt") (lib "tests/raco/prefix.rkt") (lib "tests/racket/pair-accessor-error-message.rkt") (lib "tests/racket/place-chan-rand.rkt") (lib "tests/racket/place-chan-rand-help.rkt") (lib "tests/future/random-future.rkt") (lib "tests/ffi/union.rkt") (lib "tests/racket/fasl-prefix.rkt"))) (name . "racket-test-extra") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:matthias@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "git://github.com/racket/racket/?path=pkgs/racket-test-extra") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "git://github.com/racket/racket/?path=pkgs/racket-test-extra") (source_url . "git://github.com/racket/racket/?path=pkgs/racket-test-extra"))) ("6.1.1" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("racket-to" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/racket-to.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-to.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-to.txt"))) (checksum . "c76caf3721c09d68c5871a64481b15be72293259") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "A set of lightweight transpilers from racket to other languages.  Entirely for educational and in-class demo purposes.  Don't use this for anything important yet...") (implies . ()) (last-checked . 1632904466) (last-edit . 1515359748) (last-updated . 1525457907) (modules . ((lib "racket-to/racket2blank.rkt") (lib "racket-to/processing.rkt") (lib "racket-to/javascript.rkt") (lib "racket-to/python.rkt"))) (name . "racket-to") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/racket-to.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c76caf3721c09d68c5871a64481b15be72293259") (source . "https://github.com/thoughtstem/racket-to.git") (source_url . "https://github.com/thoughtstem/racket-to.git"))))))) ("racket-to-python" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/racket-to-python.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-to-python.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-to-python.txt"))) (checksum . "5726abfb20b8411d05482d07ff384ecae779a010") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "My toolset for working with Python as a compilation target from Racket.  It's basically just a lightweight wrapper around the Hy Language, which is basically a Lisp that compiles to Python.") (implies . ()) (last-checked . 1632904467) (last-edit . 1526942885) (last-updated . 1526942885) (modules . ((lib "racket-to-python/main.rkt") (lib "racket-to-python/python-module.rkt") (lib "racket-to-python/python-extras.rkt") (lib "racket-to-python/python.rkt"))) (name . "racket-to-python") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/racket-to-python.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5726abfb20b8411d05482d07ff384ecae779a010") (source . "https://github.com/thoughtstem/racket-to-python.git") (source_url . "https://github.com/thoughtstem/racket-to-python.git"))))))) ("racket-weekend" . #hasheq((author . "jesse@serverracket.com jesse@lisp.sh") (authors . ("jesse@serverracket.com" "jesse@lisp.sh")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/racket-weekend.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "8f24bf44676eb9e56e9a9da14b8eeeaa6410858d") (checksum-error . "tcp-connect: connection failed\n  hostname: racketweekend.com\n  port number: 443\n  system error: Network is unreachable; errno=101\n  context...:\n   /home/pkgserver/racket/collects/openssl/mzssl.rkt:1845:0: do-ssl-connect\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/racket/collects/net/http-client.rkt:67:0: http-conn-open!\n   /home/pkgserver/racket/collects/net/http-client.rkt:274:0: http-conn-open\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/racket/collects/net/url.rkt:201:0: http://getpost-impure-port\n   /home/pkgserver/racket/collects/net/url.rkt:304:0: get-pure-port/headers\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/racket/collects/pkg/private/network.rkt:59:3\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . "racket-weekend") (conflicts . ()) (date-added . 1607664764) (dependencies . ("base" "rackunit-lib" "web-server-lib" "net-cookies-lib" "web-server-lib")) (description . "Racket Weekend is a short course to help working programmers get started with Racket. This package contains the course's code samples.") (implies . ()) (last-checked . 1632904472) (last-edit . 1607664764) (last-updated . 1621815086) (modules . ((lib "racket-weekend/lesson-08.rkt") (lib "racket-weekend/lesson-02.rkt") (lib "racket-weekend/lesson-04.rkt") (lib "racket-weekend/lesson-07.rkt") (lib "racket-weekend/lesson-06.rkt") (lib "racket-weekend/lesson-05.rkt") (lib "racket-weekend/lesson-01.rkt") (lib "racket-weekend/lesson-09.rkt") (lib "racket-weekend/lesson-03.rkt") (lib "racket-weekend/respond.rkt") (lib "racket-weekend/lesson-11.rkt"))) (name . "racket-weekend") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:jesse@lisp.sh . #t) (author:jesse@serverracket.com . #t) (beginners . #t) (education . #t) (ring:1 . #t))) (source . "https://racketweekend.com/racket-weekend.zip") (tags . ("beginners" "education")) (versions . #hash((default . #hasheq((checksum . "8f24bf44676eb9e56e9a9da14b8eeeaa6410858d") (source . "https://racketweekend.com/racket-weekend.zip") (source_url . "https://racketweekend.com/racket-weekend.zip"))))))) ("racket-win32-i386" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for base package") (implies . ()) (last-checked . 1632904472) (last-edit . 1576860307) (last-updated . 1576860326) (modules . ()) (name . "racket-win32-i386") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4a8413377a054b590354e89ee4ed027fb1c25668") (source . "https://pkg-sources.racket-lang.org/pkgs/4a8413377a054b590354e89ee4ed027fb1c25668/racket-win32-i386.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/4a8413377a054b590354e89ee4ed027fb1c25668/racket-win32-i386.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("racket-win32-i386-2" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for racket package") (implies . ()) (last-checked . 1632904472) (last-edit . 1576860307) (last-updated . 1576860340) (modules . ()) (name . "racket-win32-i386-2") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "bac346e6e63990a969d2355a15b38bec5118bc06") (source . "https://pkg-sources.racket-lang.org/pkgs/bac346e6e63990a969d2355a15b38bec5118bc06/racket-win32-i386-2.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/bac346e6e63990a969d2355a15b38bec5118bc06/racket-win32-i386-2.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("racket-win32-i386-3" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-win32-i386-3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-win32-i386-3.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for racket package") (implies . ()) (last-checked . 1632904473) (last-edit . 1626896069) (last-updated . 1626896447) (modules . ()) (name . "racket-win32-i386-3") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "b901db00929f589f7954ca1dfc87c480e33aefc8") (source . "https://pkg-sources.racket-lang.org/pkgs/b901db00929f589f7954ca1dfc87c480e33aefc8/racket-win32-i386-3.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/b901db00929f589f7954ca1dfc87c480e33aefc8/racket-win32-i386-3.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("racket-win32-x86_64" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for base package") (implies . ()) (last-checked . 1632904473) (last-edit . 1576860307) (last-updated . 1576860344) (modules . ()) (name . "racket-win32-x86_64") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7a7cf948c1b01b4636e4dd95582d268d9bcdc612") (source . "https://pkg-sources.racket-lang.org/pkgs/7a7cf948c1b01b4636e4dd95582d268d9bcdc612/racket-win32-x86_64.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/7a7cf948c1b01b4636e4dd95582d268d9bcdc612/racket-win32-x86_64.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("racket-win32-x86_64-2" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for racket package") (implies . ()) (last-checked . 1632904474) (last-edit . 1576860307) (last-updated . 1576860322) (modules . ()) (name . "racket-win32-x86_64-2") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "671d3bb7b9f1c3d442e9fcc327cfe126cbc01dcb") (source . "https://pkg-sources.racket-lang.org/pkgs/671d3bb7b9f1c3d442e9fcc327cfe126cbc01dcb/racket-win32-x86_64-2.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/671d3bb7b9f1c3d442e9fcc327cfe126cbc01dcb/racket-win32-x86_64-2.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("racket-win32-x86_64-3" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-win32-x86_64-3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-win32-x86_64-3.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for racket package") (implies . ()) (last-checked . 1632904474) (last-edit . 1623884008) (last-updated . 1623884008) (modules . ()) (name . "racket-win32-x86_64-3") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "735574f9362438cf404c6c39b0d2a8c769621c87") (source . "https://pkg-sources.racket-lang.org/pkgs/735574f9362438cf404c6c39b0d2a8c769621c87/racket-win32-x86_64-3.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/735574f9362438cf404c6c39b0d2a8c769621c87/racket-win32-x86_64-3.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("racket-x86_64-linux-natipkg-2" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for racket package") (implies . ()) (last-checked . 1632904475) (last-edit . 1576860307) (last-updated . 1576860346) (modules . ()) (name . "racket-x86_64-linux-natipkg-2") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "36682b48c97f744b2ac425e630596e1a0254478f") (source . "https://pkg-sources.racket-lang.org/pkgs/36682b48c97f744b2ac425e630596e1a0254478f/racket-x86_64-linux-natipkg-2.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/36682b48c97f744b2ac425e630596e1a0254478f/racket-x86_64-linux-natipkg-2.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("racket-x86_64-linux-natipkg-3" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for racket package") (implies . ()) (last-checked . 1632904475) (last-edit . 1597792719) (last-updated . 1597792722) (modules . ()) (name . "racket-x86_64-linux-natipkg-3") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "3d0593cc09b5370afe8e75d98d5679cf7678cb1d") (source . "https://pkg-sources.racket-lang.org/pkgs/3d0593cc09b5370afe8e75d98d5679cf7678cb1d/racket-x86_64-linux-natipkg-3.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/3d0593cc09b5370afe8e75d98d5679cf7678cb1d/racket-x86_64-linux-natipkg-3.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("racket-x86_64-macosx-2" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for racket package") (implies . ()) (last-checked . 1632904475) (last-edit . 1576860307) (last-updated . 1576860325) (modules . ()) (name . "racket-x86_64-macosx-2") (ring . 0) (search-terms . #hasheq((:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "22c22e199c2a12502a1d8ace9b2bcf303b8e764b") (source . "https://pkg-sources.racket-lang.org/pkgs/22c22e199c2a12502a1d8ace9b2bcf303b8e764b/racket-x86_64-macosx-2.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/22c22e199c2a12502a1d8ace9b2bcf303b8e764b/racket-x86_64-macosx-2.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("racket-x86_64-macosx-3" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racket-x86_64-macosx-3.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racket-x86_64-macosx-3.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "native libraries for racket package") (implies . ()) (last-checked . 1632904476) (last-edit . 1598554469) (last-updated . 1598555464) (modules . ()) (name . "racket-x86_64-macosx-3") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "214f2899d30c509c8193770240e52ca659523f49") (source . "https://pkg-sources.racket-lang.org/pkgs/214f2899d30c509c8193770240e52ca659523f49/racket-x86_64-macosx-3.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/214f2899d30c509c8193770240e52ca659523f49/racket-x86_64-macosx-3.zip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "https://pkg-sources.racket-lang.org/pkgs/empty.zip") (source_url . "https://pkg-sources.racket-lang.org/pkgs/empty.zip"))))))) ("racketcon-2018-web-devel-workshop" . #hasheq((author . "jesse@serverracket.com jesse@lisp.sh") (authors . ("jesse@serverracket.com" "jesse@lisp.sh")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "workshop" "doc/workshop@racketcon-2018-web-devel-workshop/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racketcon-2018-web-devel-workshop.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racketcon-2018-web-devel-workshop.txt"))) (checksum . "e377a8f4fd9d6ef3b097ef1507ff3e16e0e260dc") (checksum-error . #f) (collection . "racketcon-2018-web-devel-workshop") (conflicts . ()) (date-added . 1607664692) (dependencies . ("base" "rackunit-lib" "txexpr" "http" "html-parsing" "css-expr" "web-server-lib" "net-cookies-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Material for the web development workshop held at RacketCon 2018") (implies . ()) (last-checked . 1632904476) (last-edit . 1607664692) (last-updated . 1548574917) (modules . ((lib "racketcon-2018-web-devel-workshop/scribblings/second.scrbl") (lib "racketcon-2018-web-devel-workshop/scribblings/fourth.scrbl") (lib "racketcon-2018-web-devel-workshop/second.rkt") (lib "racketcon-2018-web-devel-workshop/respond.rkt") (lib "racketcon-2018-web-devel-workshop/fourth.rkt") (lib "racketcon-2018-web-devel-workshop/command.rkt") (lib "racketcon-2018-web-devel-workshop/scribblings/workshop.scrbl") (lib "racketcon-2018-web-devel-workshop/third.rkt") (lib "racketcon-2018-web-devel-workshop/scribblings/first.scrbl") (lib "racketcon-2018-web-devel-workshop/scribblings/third.scrbl") (lib "racketcon-2018-web-devel-workshop/first.rkt") (lib "racketcon-2018-web-devel-workshop/util.rkt") (lib "racketcon-2018-web-devel-workshop/scribblings/fifth.scrbl"))) (name . "racketcon-2018-web-devel-workshop") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse@lisp.sh . #t) (author:jesse@serverracket.com . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/jessealama/racketcon-2018-web-devel-workshop.git") (tags . ("web")) (versions . #hash((default . #hasheq((checksum . "e377a8f4fd9d6ef3b097ef1507ff3e16e0e260dc") (source . "https://github.com/jessealama/racketcon-2018-web-devel-workshop.git") (source_url . "https://github.com/jessealama/racketcon-2018-web-devel-workshop.git"))))))) ("racketeer" . #hasheq((author . "emailmiraleung@gmail.com jordanelder@outlook.com") (authors . ("emailmiraleung@gmail.com" "jordanelder@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/racketeer.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e3f703a46db1d97acbca361ebad3a21b3d4c2601") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "htdp-lib" "rackunit-lib" "sandbox-lib" "syntax-color-lib" "wxme-lib")) (description . "Continuous testing for DrRacket") (implies . ()) (last-checked . 1632904476) (last-edit . 1437598939) (last-updated . 1609372802) (modules . ((lib "racketeer/racketeer/tool.rkt") (lib "racketeer/racketeer/private/testing-mixin.rkt"))) (name . "racketeer") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:emailmiraleung@gmail.com . #t) (author:jordanelder@outlook.com . #t) (ring:1 . #t))) (source . "git://github.com/miraleung/racketeer#master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e3f703a46db1d97acbca361ebad3a21b3d4c2601") (source . "git://github.com/miraleung/racketeer#master") (source_url . "http://github.com/miraleung/racketeer/tree/master#master"))) ("6.2" . #hasheq((checksum . "254633617d2557f01996a1d036b7062c408f1089") (source . "git://github.com/miraleung/racketeer#racket-v6.2") (source_url . "http://github.com/miraleung/racketeer/tree/master#racket-v6.2"))))))) ("racketmq" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/racketmq.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ac4f15325fed55e944bbb7daa0a4642ed0cbf843") (checksum-error . "git: could not find requested reference\n  reference: master\n  repo: tonyg/racketmq\n  context...:\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:403:0: select-commits\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . (multi)) (conflicts . ()) (dependencies . ("base" "syndicate" "web-server-lib" "rackunit-lib")) (description . "An implementation of W3C WebSub.") (implies . ()) (last-checked . 1632904485) (last-edit . 1482796420) (last-updated . 1621815103) (modules . ((lib "racketmq/hub/static-content.rkt") (lib "racketmq/poke.rkt") (lib "racketmq/hub/topic-demand.rkt") (lib "racketmq/template.rkt") (lib "racketmq/hub/remote-topic.rkt") (lib "racketmq/protocol.rkt") (lib "racketmq/hub.rkt") (lib "racketmq/hub/subscription.rkt") (lib "racketmq/hub/local-topic.rkt") (lib "racketmq/hub/websocket.rkt") (lib "racketmq/private/util.rkt"))) (name . "racketmq") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:tonygarnockjones@gmail.com . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/tonyg/racketmq") (tags . ("net" "web")) (versions . #hash((default . #hasheq((checksum . "ac4f15325fed55e944bbb7daa0a4642ed0cbf843") (source . "git://github.com/tonyg/racketmq") (source_url . "http://github.com/tonyg/racketmq/tree/master"))))))) ("racketscript" . #hasheq((author . "vishesh3y@gmail.com stchang@racket-lang.org") (authors . ("vishesh3y@gmail.com" "stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racketscript.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racketscript.txt"))) (checksum . "b68136602ede4e729305f977f7397eab63575260") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1625702458) (dependencies . ("base" "racketscript-compiler" "racketscript-extras" "racketscript-doc")) (description . "A lightweight Racket to JavaScript compiler with some batteries included") (implies . ("racketscript-compiler" "racketscript-extras" "racketscript-doc")) (last-checked . 1632904485) (last-edit . 1626157216) (last-updated . 1629142503) (modules . ()) (name . "racketscript") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (author:vishesh3y@gmail.com . #t) (compiler . #t) (javascript . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/racketscript/racketscript.git?path=racketscript#master") (tags . ("compiler" "javascript" "web")) (versions . #hash((default . #hasheq((checksum . "b68136602ede4e729305f977f7397eab63575260") (source . "https://github.com/racketscript/racketscript.git?path=racketscript#master") (source_url . "https://github.com/racketscript/racketscript.git?path=racketscript#master"))))))) ("racketscript-compiler" . #hasheq((author . "vishesh3y@gmail.com stchang@racket-lang.org") (authors . ("vishesh3y@gmail.com" "stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racketscript-compiler.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racketscript-compiler.txt"))) (checksum . "b68136602ede4e729305f977f7397eab63575260") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1625702477) (dependencies . ("base" ("racket" "6.4") "typed-racket-lib" "typed-racket-more" "threading" "graph-lib" "anaphoric" "base" "typed-racket-lib" "typed-racket-more" "rackunit-lib")) (description . "A Racket to JavaScript compiler") (implies . ()) (last-checked . 1632904485) (last-edit . 1626157224) (last-updated . 1629142504) (modules . ((lib "racketscript/compiler/runtime/lib.rkt") (lib "racketscript/compiler/runtime/runtime.rkt") (lib "racketscript/compiler/main.rkt") (lib "racketscript/compiler/il-analyze.rkt") (lib "racketscript/compiler/ident.rkt") (lib "racketscript/compiler/runtime/core.rkt") (lib "racketscript/compiler/runtime/syntax.rkt") (lib "racketscript/compiler/environment.rkt") (lib "racketscript/compiler/config.rkt") (lib "racketscript/compiler/moddeps.rkt") (lib "racketscript/compiler/runtime/read.rkt") (lib "racketscript/compiler/absyn.rkt") (lib "racketscript/compiler/assembler.rkt") (lib "racketscript/compiler/runtime/futures.rkt") (lib "racketscript/compiler/runtime/extfl.rkt") (lib "racketscript/browser.rkt") (lib "racketscript/compiler/transform.rkt") (lib "racketscript/compiler/global.rkt") (lib "racketscript/compiler/runtime/flfxnum.rkt") (lib "racketscript/boot/lang/private/interop.rkt") (lib "racketscript/compiler/stx-utils.rkt") (lib "racketscript/compiler/runtime/unsafe.rkt") (lib "racketscript/compiler/runtime/linklet-primitive.rkt") (lib "racketscript/compiler/runtime/utils.rkt") (lib "racketscript/compiler/runtime/network.rkt") (lib "racketscript/base/main.rkt") (lib "racketscript/compiler/logging.rkt") (lib "racketscript/compiler/runtime/place-struct.rkt") (lib "racketscript/compiler/runtime/kernel.rkt") (lib "racketscript/private/interop.rkt") (lib "racketscript/compiler/runtime/paramz.rkt") (lib "racketscript/main.rkt") (lib "racketscript/compiler/runtime/place.rkt") (lib "racketscript/base.rkt") (lib "racketscript/interop.rkt") (lib "racketscript/compiler/case-lambda.rkt") (lib "racketscript/boot.rkt") (lib "racketscript/compiler/util-untyped.rkt") (lib "racketscript/compiler/il.rkt") (lib "racketscript/compiler/runtime/builtin.rkt") (lib "racketscript/compiler/runtime/boot.rkt") (lib "racketscript/boot/lang/reader.rkt") (lib "racketscript/compiler/language.rkt") (lib "racketscript/compiler/expand.rkt") (lib "racketscript/compiler/runtime/main.rkt") (lib "racketscript/base/lang/reader.rkt") (lib "racketscript/compiler/util.rkt") (lib "racketscript/compiler/runtime/foreign.rkt"))) (name . "racketscript-compiler") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (author:vishesh3y@gmail.com . #t) (compiler . #t) (javascript . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/racketscript/racketscript.git?path=racketscript-compiler#master") (tags . ("compiler" "javascript" "web")) (versions . #hash((default . #hasheq((checksum . "b68136602ede4e729305f977f7397eab63575260") (source . "https://github.com/racketscript/racketscript.git?path=racketscript-compiler#master") (source_url . "https://github.com/racketscript/racketscript.git?path=racketscript-compiler#master"))))))) ("racketscript-doc" . #hasheq((author . "vishesh3y@gmail.com stchang@racket-lang.org") (authors . ("vishesh3y@gmail.com" "stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racketscript" "doc/racketscript@racketscript-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racketscript-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racketscript-doc.txt"))) (checksum . "b68136602ede4e729305f977f7397eab63575260") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1626156941) (dependencies . ("base" "racket-doc" "scribble-lib" "scribble-enhanced" "racketscript-compiler")) (description . "Documentation for racketscript.") (implies . ()) (last-checked . 1632904485) (last-edit . 1626157231) (last-updated . 1629142505) (modules . ((lib "racketscript/scribblings/racketscript.scrbl") (lib "racketscript/scribblings/ffi.scrbl") (lib "racketscript/scribblings/start.scrbl"))) (name . "racketscript-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:stchang@racket-lang.org . #t) (author:vishesh3y@gmail.com . #t) (compiler . #t) (javascript . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/racketscript/racketscript.git?path=racketscript-doc#master") (tags . ("compiler" "javascript" "web")) (versions . #hash((default . #hasheq((checksum . "b68136602ede4e729305f977f7397eab63575260") (source . "https://github.com/racketscript/racketscript.git?path=racketscript-doc#master") (source_url . "https://github.com/racketscript/racketscript.git?path=racketscript-doc#master"))))))) ("racketscript-extras" . #hasheq((author . "vishesh3y@gmail.com stchang@racket-lang.org") (authors . ("vishesh3y@gmail.com" "stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racketscript-extras.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racketscript-extras.txt"))) (checksum . "b68136602ede4e729305f977f7397eab63575260") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1625702496) (dependencies . ("base" ("racket" "6.4") "racketscript-compiler" "rackunit-lib")) (description . "Goodies for RacketScript") (implies . ()) (last-checked . 1632904486) (last-edit . 1626157236) (last-updated . 1629142506) (modules . ((lib "racketscript/private/jscommon.rkt") (lib "racketscript/htdp/universe.rkt") (lib "racketscript/htdp/image.rkt") (lib "racketscript/htdp/private/color.rkt"))) (name . "racketscript-extras") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (author:vishesh3y@gmail.com . #t) (big-bang . #t) (javascript . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/racketscript/racketscript.git?path=racketscript-extras#master") (tags . ("big-bang" "javascript" "web")) (versions . #hash((default . #hasheq((checksum . "b68136602ede4e729305f977f7397eab63575260") (source . "https://github.com/racketscript/racketscript.git?path=racketscript-extras#master") (source_url . "https://github.com/racketscript/racketscript.git?path=racketscript-extras#master"))))))) ("racketui" . #hasheq((author . "nadeem@acm.org") (authors . ("nadeem@acm.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racketui" "doc/racketui@racketui/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racketui.txt") (test-failure-log . "server/built/test-fail/racketui.txt") (test-success-log . #f))) (checksum . "045e0e647439623397cdf67e8e045ec7aa5e2def") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "draw-lib" "htdp-lib" "srfi-lite-lib" "web-server-lib" "racket-doc" "scribble-lib")) (description . "Automated web forms UI generator (especially for HtDP)") (implies . ()) (last-checked . 1632904486) (last-edit . 1500073915) (last-updated . 1597240063) (modules . ((lib "racketui/bsl-tests/dish-order-cost-struct.rkt") (lib "racketui/web.rkt") (lib "racketui/bsl-tests/acronym-list-str.rkt") (lib "racketui/tests/tfield-tests.rkt") (lib "racketui/common.rkt") (lib "racketui/bsl-tests/counter-change-img.rkt") (lib "racketui/bsl-tests/grades-average-list-mixed.rkt") (lib "racketui/bsl-tests/target-img.rkt") (lib "racketui/bsl-tests/clock-img.rkt") (lib "racketui/bsl-tests/blood-test-2list.rkt") (lib "racketui/tests/web-tests.rkt") (lib "racketui/scribblings/racketui.scrbl") (lib "racketui/tfield.rkt") (lib "racketui/bsl-tests/reverser-file-io.rkt") (lib "racketui/save.rkt") (lib "racketui/bsl-tests/total-sales-seats-matrix.rkt") (lib "racketui/bsl-tests/wgt-on-moon-simple.rkt") (lib "racketui/bsl-tests/hello.rkt") (lib "racketui/bsl-tests/all-bigger-2list.rkt") (lib "racketui/render.rkt") (lib "racketui/bsl-tests/web-file-size-mixed-struct.rkt") (lib "racketui/bsl-tests/caesar-file.rkt") (lib "racketui/bsl-tests/genetics-list-struct-contain.rkt") (lib "racketui/tests/save-tests.rkt") (lib "racketui/syntax.rkt") (lib "racketui/web-launch.rkt") (lib "racketui/tests/syntax-tests.rkt") (lib "racketui/main.rkt") (lib "racketui/bsl-tests/longest-list-str.rkt"))) (name . "racketui") (ring . 1) (search-terms . #hasheq((2htdp . #t) (:build-success: . #t) (:docs: . #t) (author:nadeem@acm.org . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/nadeemabdulhamid/racketui") (tags . ("2htdp" "web")) (versions . #hash((default . #hasheq((checksum . "045e0e647439623397cdf67e8e045ec7aa5e2def") (source . "git://github.com/nadeemabdulhamid/racketui") (source_url . "http://github.com/nadeemabdulhamid/racketui/tree/master"))))))) ("rackjure" . #hasheq((author . "racket@greghendershott.com") (authors . ("racket@greghendershott.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackjure" "doc/rackjure@rackjure/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackjure.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackjure.txt"))) (checksum . "62b210b0544c9660cac41b2b8c298b364e73cbee") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.3") "rackunit-lib" ("threading-lib" #:version "1.1") "rackunit-lib" "racket-doc" "sandbox-lib" "scribble-lib" "threading-doc")) (description . "Some Clojure-inspired idioms.") (implies . ()) (last-checked . 1632904487) (last-edit . 1396443212) (last-updated . 1613493997) (modules . ((lib "rackjure/lang/reader.rkt") (lib "rackjure/egal.rkt") (lib "rackjure/bench.rkt") (lib "rackjure/lambda-reader.rkt") (lib "rackjure/app.rkt") (lib "rackjure/alist.rkt") (lib "rackjure/utils.rkt") (lib "rackjure/conditionals.rkt") (lib "rackjure/rackjure.scrbl") (lib "rackjure/test.rkt") (lib "rackjure/base/lang/reader.rkt") (lib "rackjure/threading.rkt") (lib "rackjure/lang/runtime-config.rkt") (lib "rackjure/main.rkt") (lib "rackjure/check-expansion.rkt") (lib "rackjure/base.rkt") (lib "rackjure/str.rkt") (lib "rackjure/lang/language-info.rkt") (lib "rackjure/rackjure.rkt") (lib "rackjure/dict.rkt"))) (name . "rackjure") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@greghendershott.com . #t) (language . #t) (ring:1 . #t))) (source . "github://github.com/greghendershott/rackjure/master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "62b210b0544c9660cac41b2b8c298b364e73cbee") (source . "github://github.com/greghendershott/rackjure/master") (source_url . "http://github.com/greghendershott/rackjure/tree/master"))))))) ("racklog" . #hash((author . "jay@racket-lang.org") (authors . ("jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racklog" "doc/racklog@racklog/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "racklog") (conflicts . ()) (dependencies . ("base" "datalog" "eli-tester" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "The implementation of the Racklog (embedded Prolog) language") (implies . ()) (last-checked . 1632904487) (last-edit . 1417659583) (last-updated . 1599342777) (modules . ((lib "racklog/tests/pr/pr4.rkt") (lib "racklog/lang/lang.rkt") (lib "racklog/racklog.rkt") (lib "racklog/main.rkt") (lib "racklog/tests/lang/true.rkt") (lib "racklog/tests/require.rkt") (lib "racklog/lang/compiler.rkt") (lib "racklog/tests/pr/pr5.rkt") (lib "racklog/tests/holland.rkt") (lib "racklog/tests/houses.rkt") (lib "racklog/lang/empty.rkt") (lib "racklog/tests/lang/ancestor.rkt") (lib "racklog/tests/unit.rkt") (lib "racklog/tests/lang.rkt") (lib "racklog/tests/lang/laps.rkt") (lib "racklog/control.rkt") (lib "racklog/tests/games.rkt") (lib "racklog/lang/configure-runtime.rkt") (lib "racklog/tests/england2.rkt") (lib "racklog/racklog.scrbl") (lib "racklog/tests/mapcol.rkt") (lib "racklog/tests/lang/tutorial.rkt") (lib "racklog/tests/lang/says.rkt") (lib "racklog/tests/fac.rkt") (lib "racklog/tests/england.rkt") (lib "racklog/tests/puzzle.rkt") (lib "racklog/tests/pr/pr12085.rkt") (lib "racklog/tests/toys.rkt") (lib "racklog/lang/reader.rkt") (lib "racklog/tests/lang/long.rkt") (lib "racklog/tests/is.rkt") (lib "racklog/tests/run-all.rkt") (lib "racklog/tests/pr/pr-ed.rkt") (lib "racklog/lang/lang-info.rkt") (lib "racklog/tests/pr/pr1.rkt") (lib "racklog/unify.rkt") (lib "racklog/tests/bible.rkt"))) (name . "racklog") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:jay@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "89e983ec7d2df0ed919e6630403b0f4d0393728e") (source . "git://github.com/racket/racklog") (source_url . "http://github.com/racket/racklog/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("rackonsole" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackonsole" "doc/rackonsole@rackonsole/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackonsole.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackonsole.txt"))) (checksum . "9cb037f857243bef20c19ee280af458659eca731") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "charterm" "gdbdump" "compatibility-lib" "racket-doc" "scribble-lib" "overeasy")) (description . "Lightweight Operator Console for Racket Server Processes") (implies . ()) (last-checked . 1632904488) (last-edit . 1456466728) (last-updated . 1604552463) (modules . ((lib "rackonsole/main.rkt") (lib "rackonsole/rackonsole.scrbl") (lib "rackonsole/demo.rkt"))) (name . "rackonsole") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t) (terminal . #t))) (source . "http://www.neilvandyke.org/racket/rackonsole.zip") (tags . ("terminal")) (versions . #hash((default . #hasheq((checksum . "9cb037f857243bef20c19ee280af458659eca731") (source . "http://www.neilvandyke.org/racket/rackonsole.zip") (source_url . "http://www.neilvandyke.org/racket/rackonsole.zip"))))))) ("rackpgmp" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "perflinty" "doc/perflinty@rackpgmp/index.html") ("main" "pgmp" "doc/pgmp@rackpgmp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackpgmp.txt") (test-failure-log . "server/built/test-fail/rackpgmp.txt") (test-success-log . #f))) (checksum . "405316e54f194a5d8cbf968bbcb96a0ef3ea70a3") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "errortrace-doc" "scribble-lib" "sandbox-lib" "errortrace-lib" "rackunit-lib" "r6rs-lib")) (description . "A library for profile-guided meta-programming") (implies . ()) (last-checked . 1632904489) (last-edit . 1442935413) (last-updated . 1502816373) (modules . ((lib "perflinty/docs/perflinty-auto.scrbl") (lib "perflinty/docs/perflinty.scrbl") (lib "perflinty/vector.rkt") (lib "tests/exclusive-cond-test.rkt") (lib "tests/class-test.rkt") (lib "tests/perflinty-vector.rkt") (lib "pgmp/docs/pgmp.scrbl") (lib "pgmp/pgmp.rkt") (lib "perflinty/auto.rkt") (lib "tests/run.rkt") (lib "perflinty/docs/perflinty-list.scrbl") (lib "examples/my-first-pgmp.rkt") (lib "tests/case-test.rkt") (lib "perflinty/list.rkt") (lib "perflinty/docs/perflinty-vector.scrbl") (lib "examples/exclusive-cond.rkt") (lib "pgmp/main.rkt") (lib "examples/class.rkt") (lib "pgmp/exclusive-cond.rkt") (lib "tests/perflinty-list.rkt") (lib "pgmp/api/exact.rkt") (lib "pgmp/case.rkt") (lib "tests/perflinty-auto.rkt") (lib "pgmp/api/utils.rkt"))) (name . "rackpgmp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (PGO . #t) (author:wjb@williamjbowman.com . #t) (profiling . #t) (ring:1 . #t))) (source . "git://github.com/wilbowma/pgmp?path=rackpgmp") (tags . ("PGO" "profiling")) (versions . #hash((default . #hasheq((checksum . "405316e54f194a5d8cbf968bbcb96a0ef3ea70a3") (source . "git://github.com/wilbowma/pgmp?path=rackpgmp") (source_url . "http://github.com/wilbowma/pgmp/tree/master?path=rackpgmp"))))))) ("rackterm" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackterm.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackterm.txt"))) (checksum . "5d94185dea482974a1cf66099380bede6c2ce501") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1608151830) (dependencies . ("base" "draw-lib" "gui-lib" "rackunit-lib" "scheme-lib")) (description . "Terminal emulator library (currently unstable and undocumented) and simple frontend.  Run racket -l rackterm/xterm to run.") (implies . ()) (last-checked . 1632904489) (last-edit . 1608151830) (last-updated . 1615312739) (modules . ((lib "rackterm/private/shell-trampoline.rkt") (lib "rackterm/private/cell.rkt") (lib "rackterm/private/fun-terminal.rkt") (lib "rackterm/private/terminal-canvas.rkt") (lib "rackterm/private/term-key-event.rkt") (lib "rackterm/private/console-code-parse.rkt") (lib "rackterm/xterm.rkt") (lib "rackterm/private/256color.rkt") (lib "rackterm/private/terminal.rkt") (lib "rackterm/private/pty.rkt"))) (name . "rackterm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (ring:1 . #t) (terminal . #t))) (source . "https://github.com/willghatch/rackterm.git") (tags . ("terminal")) (versions . #hash((default . #hasheq((checksum . "5d94185dea482974a1cf66099380bede6c2ce501") (source . "https://github.com/willghatch/rackterm.git") (source_url . "https://github.com/willghatch/rackterm.git"))))))) ("rackunit" . #hash((author . "ryanc@racket-lang.org noel@racket-lang.org") (authors . ("ryanc@racket-lang.org" "noel@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("rackunit-lib" "rackunit-doc" "rackunit-gui" "rackunit-plugin-lib")) (description . "RackUnit testing framework") (implies . ("rackunit-lib" "rackunit-doc" "rackunit-gui" "rackunit-plugin-lib")) (last-checked . 1632904489) (last-edit . 1417659583) (last-updated . 1628217308) (modules . ()) (name . "rackunit") (ring . 0) (search-terms . #hasheq((author:noel@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "048d7045ad38e26d5c07f54de570caeba0d74130") (source . "git://github.com/racket/rackunit/?path=rackunit") (source_url . "git://github.com/racket/rackunit/?path=rackunit"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("rackunit-abbrevs" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackunit-abbrevs" "doc/rackunit-abbrevs@rackunit-abbrevs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackunit-abbrevs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackunit-abbrevs.txt"))) (checksum . "507e8b64307d8e14fd66adc1ef89833a102f75b9") (checksum-error . #f) (collection . "rackunit-abbrevs") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Iterated RackUnit tests") (implies . ()) (last-checked . 1632904489) (last-edit . 1443686446) (last-updated . 1582483450) (modules . ((lib "rackunit-abbrevs/private/test-syntax-error.rkt") (lib "rackunit-abbrevs/private/test-typed-rackunit-abbrevs.rkt") (lib "rackunit-abbrevs/private/typed-rackunit-abbrevs.rkt") (lib "rackunit-abbrevs/private/error-reporting.rkt") (lib "rackunit-abbrevs/main.rkt") (lib "rackunit-abbrevs/error-reporting.rkt") (lib "rackunit-abbrevs/private/test-rackunit-abbrevs.rkt") (lib "rackunit-abbrevs/private/rackunit-abbrevs.rkt") (lib "rackunit-abbrevs/typed.rkt") (lib "rackunit-abbrevs/scribblings/rackunit-abbrevs.scrbl"))) (name . "rackunit-abbrevs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (rackunit . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/bennn/rackunit-abbrevs") (tags . ("rackunit" "testing")) (versions . #hash((default . #hasheq((checksum . "507e8b64307d8e14fd66adc1ef89833a102f75b9") (source . "git://github.com/bennn/rackunit-abbrevs") (source_url . "http://github.com/bennn/rackunit-abbrevs/tree/master"))))))) ("rackunit-chk" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackunit-chk" "doc/rackunit-chk@rackunit-chk/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackunit-chk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackunit-chk.txt"))) (checksum . "62c80697d9e8c4a5f5b57832e3930313732836c4") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "rackunit-doc" "scribble-lib")) (description . "a short hand for writing rackunit tests") (implies . ()) (last-checked . 1632904490) (last-edit . 1383617264) (last-updated . 1504539027) (modules . ((lib "rackunit/chk.rkt") (lib "rackunit/chk/rackunit-chk.scrbl"))) (name . "rackunit-chk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/jeapostrophe/rackunit-chk") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "62c80697d9e8c4a5f5b57832e3930313732836c4") (source . "git://github.com/jeapostrophe/rackunit-chk") (source_url . "http://github.com/jeapostrophe/rackunit-chk/tree/master"))))))) ("rackunit-doc" . #hash((author . "noel@racket-lang.org ryanc@racket-lang.org") (authors . ("noel@racket-lang.org" "ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackunit" "doc/rackunit@rackunit-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-index" "racket-doc" "rackunit-gui" "rackunit-lib" "scribble-lib")) (description . "RackUnit documentation") (implies . ()) (last-checked . 1632904490) (last-edit . 1417659583) (last-updated . 1628217309) (modules . ((lib "rackunit/scribblings/file-test.rkt") (lib "rackunit/scribblings/api.scrbl") (lib "rackunit/scribblings/philosophy.scrbl") (lib "rackunit/scribblings/utils.scrbl") (lib "rackunit/scribblings/internals.scrbl") (lib "rackunit/scribblings/misc.scrbl") (lib "rackunit/scribblings/quick-start.scrbl") (lib "rackunit/scribblings/release-notes.scrbl") (lib "rackunit/scribblings/control-flow.scrbl") (lib "rackunit/scribblings/check.scrbl") (lib "rackunit/scribblings/rackunit.scrbl") (lib "rackunit/scribblings/ui.scrbl") (lib "rackunit/scribblings/file.rkt") (lib "rackunit/scribblings/base.rkt") (lib "rackunit/scribblings/acknowledgements.scrbl") (lib "rackunit/scribblings/overview.scrbl") (lib "rackunit/scribblings/compound-testing.scrbl"))) (name . "rackunit-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:noel@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "048d7045ad38e26d5c07f54de570caeba0d74130") (source . "git://github.com/racket/rackunit/?path=rackunit-doc") (source_url . "git://github.com/racket/rackunit/?path=rackunit-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("rackunit-fancy-runner" . #hasheq((author . "c2d7fa@gmail.com") (authors . ("c2d7fa@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackunit-fancy-runner.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackunit-fancy-runner.txt"))) (checksum . "c367fa93ed8a2daad4aa12cc9e947661d169dab6") (checksum-error . #f) (collection . "rackunit-fancy-runner") (conflicts . ()) (date-added . 1572190847) (dependencies . ("base" "rackunit-lib")) (description . "Command-line RackUnit test runner with fancy output") (implies . ()) (last-checked . 1632904490) (last-edit . 1574167702) (last-updated . 1574170764) (modules . ((lib "rackunit-fancy-runner/main.rkt"))) (name . "rackunit-fancy-runner") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:c2d7fa@gmail.com . #t) (rackunit . #t) (ring:1 . #t))) (source . "https://github.com/c2d7fa/rackunit-fancy-runner.git#c367fa93ed8a2daad4aa12cc9e947661d169dab6") (tags . ("rackunit")) (versions . #hash((default . #hasheq((checksum . "c367fa93ed8a2daad4aa12cc9e947661d169dab6") (source . "https://github.com/c2d7fa/rackunit-fancy-runner.git#c367fa93ed8a2daad4aa12cc9e947661d169dab6") (source_url . "https://github.com/c2d7fa/rackunit-fancy-runner.git#c367fa93ed8a2daad4aa12cc9e947661d169dab6"))))))) ("rackunit-grade" . #hasheq((author . "ifigueroap@gmail.com") (authors . ("ifigueroap@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackunit-grade" "doc/rackunit-grade@rackunit-grade/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackunit-grade.txt") (test-failure-log . "server/built/test-fail/rackunit-grade.txt") (test-success-log . #f))) (checksum . "92526d7ced3b4cf7b5323752f20d8f36752e69b6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit" "doc-coverage" "scribble-lib" "racket-doc")) (description . "Simple library and raco command for grading homework against a test file") (implies . ()) (last-checked . 1632904490) (last-edit . 1482781793) (last-updated . 1502816375) (modules . ((lib "rackunit/raco-grade.rkt") (lib "rackunit/grade.rkt") (lib "rackunit/scribblings/rackunit-grade.scrbl"))) (name . "rackunit-grade") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ifigueroap@gmail.com . #t) (homework . #t) (rackunit . #t) (raco . #t) (ring:1 . #t) (teaching . #t))) (source . "git://github.com/ifigueroap/racket-rackunit-grade") (tags . ("homework" "rackunit" "raco" "teaching")) (versions . #hash((default . #hasheq((checksum . "92526d7ced3b4cf7b5323752f20d8f36752e69b6") (source . "git://github.com/ifigueroap/racket-rackunit-grade") (source_url . "http://github.com/ifigueroap/racket-rackunit-grade/tree/master"))))))) ("rackunit-gui" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("rackunit-lib" "class-iop-lib" "data-lib" "gui-lib" "base")) (description . "RackUnit test runner GUI") (implies . ()) (last-checked . 1632904491) (last-edit . 1417659583) (last-updated . 1628217310) (modules . ((lib "rackunit/private/gui/view.rkt") (lib "rackunit/private/gui/drracket-ui.rkt") (lib "rackunit/gui.rkt") (lib "rackunit/private/gui/interfaces.rkt") (lib "rackunit/private/gui/gui.rkt") (lib "rackunit/private/gui/controller.rkt") (lib "rackunit/private/gui/model2rml.rkt") (lib "rackunit/private/gui/cache-box.rkt") (lib "rackunit/private/gui/model.rkt") (lib "rackunit/private/gui/drracket-link.rkt") (lib "rackunit/private/gui/rml.rkt") (lib "rackunit/private/gui/config.rkt"))) (name . "rackunit-gui") (ring . 0) (search-terms . #hasheq((author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "048d7045ad38e26d5c07f54de570caeba0d74130") (source . "git://github.com/racket/rackunit/?path=rackunit-gui") (source_url . "git://github.com/racket/rackunit/?path=rackunit-gui"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("rackunit-lib" . #hash((author . "ryanc@racket-lang.org noel@racket-lang.org") (authors . ("ryanc@racket-lang.org" "noel@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "testing-util-lib")) (description . "RackUnit testing framework") (implies . ("testing-util-lib")) (last-checked . 1632904491) (last-edit . 1417659583) (last-updated . 1628217311) (modules . ((lib "rackunit/private/check-info.rkt") (lib "rackunit/private/util.rkt") (lib "rackunit/private/base.rkt") (lib "rackunit/text-ui.rkt") (lib "rackunit/private/test-case.rkt") (lib "rackunit/private/location.rkt") (lib "rackunit/private/test-suite.rkt") (lib "rackunit/private/format.rkt") (lib "rackunit/private/result.rkt") (lib "rackunit/private/check.rkt") (lib "rackunit/main.rkt") (lib "rackunit/private/test.rkt") (lib "rackunit/private/equal-within.rkt"))) (name . "rackunit-lib") (ring . 0) (search-terms . #hasheq((author:noel@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "048d7045ad38e26d5c07f54de570caeba0d74130") (source . "git://github.com/racket/rackunit/?path=rackunit-lib") (source_url . "git://github.com/racket/rackunit/?path=rackunit-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("rackunit-macrotypes-lib" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackunit-macrotypes-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackunit-macrotypes-lib.txt"))) (checksum . "220552416edf5646d796668176a473e4271205b2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "7.0") "rackunit-lib" ("macrotypes-lib" #:version "0.3.1"))) (description . "rackunit extension for use with Turnstile lang") (implies . ()) (last-checked . 1632904491) (last-edit . 1540411776) (last-updated . 1618604619) (modules . ((lib "rackunit/macrotypes.rkt") (lib "rackunit/rackunit-typechecking.rkt") (lib "rackunit/turnstile.rkt") (lib "rackunit/turnstile+.rkt"))) (name . "rackunit-macrotypes-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/stchang/macrotypes.git?path=rackunit-macrotypes-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "220552416edf5646d796668176a473e4271205b2") (source . "https://github.com/stchang/macrotypes.git?path=rackunit-macrotypes-lib") (source_url . "https://github.com/stchang/macrotypes.git?path=rackunit-macrotypes-lib"))))))) ("rackunit-plugin-lib" . #hash((author . "ryanc@racket-lang.org noel@racket-lang.org") (authors . ("ryanc@racket-lang.org" "noel@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "rackunit-gui" "gui-lib" "drracket-plugin-lib")) (description . "RackUnit testing framework DrRacket plugin") (implies . ()) (last-checked . 1632904491) (last-edit . 1417659583) (last-updated . 1628217312) (modules . ((lib "rackunit/tool.rkt"))) (name . "rackunit-plugin-lib") (ring . 0) (search-terms . #hasheq((author:noel@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "048d7045ad38e26d5c07f54de570caeba0d74130") (source . "git://github.com/racket/rackunit/?path=rackunit-plugin-lib") (source_url . "git://github.com/racket/rackunit/?path=rackunit-plugin-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("rackunit-spec" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rackunit-spec" "doc/rackunit-spec@rackunit-spec/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rackunit-spec.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rackunit-spec.txt"))) (checksum . "96f9f48b2f4b004fafc67a3d26805983274568c4") (checksum-error . #f) (collection . "rackunit") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "rackunit-doc" "scribble-lib")) (description . "BDD test helpers for rackunit") (implies . ()) (last-checked . 1632904492) (last-edit . 1457809036) (last-updated . 1502816377) (modules . ((lib "rackunit/spec.rkt") (lib "rackunit/scribblings/rackunit-spec.scrbl"))) (name . "rackunit-spec") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/lexi-lambda/rackunit-spec") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "96f9f48b2f4b004fafc67a3d26805983274568c4") (source . "git://github.com/lexi-lambda/rackunit-spec") (source_url . "http://github.com/lexi-lambda/rackunit-spec/tree/master"))))))) ("rackunit-test" . #hash((author . "noel@racket-lang.org ryanc@racket-lang.org") (authors . ("noel@racket-lang.org" "ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "eli-tester" "rackunit-lib")) (description . "RackUnit documentation") (implies . ()) (last-checked . 1632904492) (last-edit . 1417659583) (last-updated . 1628217313) (modules . ((lib "tests/rackunit/test-case-test.rkt") (lib "tests/rackunit/text-ui-test.rkt") (lib "tests/rackunit/base-test.rkt") (lib "tests/rackunit/pr10950.rkt") (lib "tests/rackunit/log.rkt") (lib "tests/rackunit/all-rackunit-tests.rkt") (lib "tests/rackunit/tl.rkt") (lib "tests/rackunit/check-test.rkt") (lib "tests/rackunit/location-test.rkt") (lib "tests/rackunit/format-test.rkt") (lib "tests/rackunit/run-tests.rkt") (lib "tests/rackunit/pr/109+138.rkt") (lib "tests/rackunit/failure-test.rkt") (lib "tests/rackunit/test-suite-test.rkt") (lib "tests/rackunit/pr/100.rkt") (lib "tests/rackunit/standalone-test-case-test.rkt") (lib "tests/rackunit/pr/13.rkt") (lib "tests/rackunit/check-info-test.rkt") (lib "tests/rackunit/test-test.rkt") (lib "tests/rackunit/standalone-check-higher-order-test.rkt") (lib "tests/rackunit/nested-info-test.rkt") (lib "tests/rackunit/result-test.rkt") (lib "tests/rackunit/standalone.rkt") (lib "tests/rackunit/standalone-check-test.rkt") (lib "tests/rackunit/pr/5.rkt") (lib "tests/rackunit/pr/90.rkt") (lib "tests/rackunit/util-test.rkt"))) (name . "rackunit-test") (ring . 0) (search-terms . #hasheq((author:noel@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "048d7045ad38e26d5c07f54de570caeba0d74130") (source . "git://github.com/racket/rackunit/?path=rackunit-test") (source_url . "git://github.com/racket/rackunit/?path=rackunit-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("rackunit-typed" . #hasheq((author . "jackhfirth@gmail.com samth@racket-lang.org") (authors . ("jackhfirth@gmail.com" "samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "048d7045ad38e26d5c07f54de570caeba0d74130") (checksum-error . #f) (collection . "typed") (conflicts . ()) (dependencies . ("racket-index" "rackunit-gui" "rackunit-lib" "typed-racket-lib" "base" "testing-util-lib")) (description . "Typed Racket interface to the RackUnit testing framework") (implies . ()) (last-checked . 1632904492) (last-edit . 1526926841) (last-updated . 1628217314) (modules . ((lib "typed/rackunit/text-ui.rkt") (lib "typed/rackunit/docs-complete.rkt") (lib "typed/rackunit.rkt") (lib "typed/rackunit/type-env-ext.rkt") (lib "typed/rackunit/gui.rkt") (lib "typed/rackunit/main.rkt"))) (name . "rackunit-typed") (ring . 1) (search-terms . #hasheq((author:jackhfirth@gmail.com . #t) (author:samth@racket-lang.org . #t) (main-distribution . #t) (rackunit . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/racket/rackunit.git?path=rackunit-typed") (tags . ("main-distribution" "rackunit" "typed-racket")) (versions . #hash(("6.0.1" . #hasheq((checksum . "7657a238540549e115ebefc4d114c1953dfe6048") (source . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10") (source_url . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10"))) (default . #hasheq((checksum . "048d7045ad38e26d5c07f54de570caeba0d74130") (source . "https://github.com/racket/rackunit.git?path=rackunit-typed") (source_url . "https://github.com/racket/rackunit.git?path=rackunit-typed"))) ("6.10" . #hasheq((checksum . "7657a238540549e115ebefc4d114c1953dfe6048") (source . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10") (source_url . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10"))) ("6.2.1" . #hasheq((checksum . "7657a238540549e115ebefc4d114c1953dfe6048") (source . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10") (source_url . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10"))) ("6.2" . #hasheq((checksum . "7657a238540549e115ebefc4d114c1953dfe6048") (source . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10") (source_url . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10"))) ("6.3" . #hasheq((checksum . "7657a238540549e115ebefc4d114c1953dfe6048") (source . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10") (source_url . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10"))) ("6.0" . #hasheq((checksum . "7657a238540549e115ebefc4d114c1953dfe6048") (source . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10") (source_url . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10"))) ("6.6" . #hasheq((checksum . "7657a238540549e115ebefc4d114c1953dfe6048") (source . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10") (source_url . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10"))) ("6.7" . #hasheq((checksum . "7657a238540549e115ebefc4d114c1953dfe6048") (source . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10") (source_url . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10"))) ("6.4" . #hasheq((checksum . "7657a238540549e115ebefc4d114c1953dfe6048") (source . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10") (source_url . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10"))) ("6.5" . #hasheq((checksum . "7657a238540549e115ebefc4d114c1953dfe6048") (source . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10") (source_url . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10"))) ("6.8" . #hasheq((checksum . "7657a238540549e115ebefc4d114c1953dfe6048") (source . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10") (source_url . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10"))) ("6.9" . #hasheq((checksum . "7657a238540549e115ebefc4d114c1953dfe6048") (source . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10") (source_url . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10"))) ("6.1" . #hasheq((checksum . "7657a238540549e115ebefc4d114c1953dfe6048") (source . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10") (source_url . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10"))) ("6.1.1" . #hasheq((checksum . "7657a238540549e115ebefc4d114c1953dfe6048") (source . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10") (source_url . "https://github.com/racket/rackunit.git?path=rackunit-typed#for-v-up-to-6.10"))))))) ("racl" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/racl.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "a54859d0e39e61a4b69e46454ad67299d1967c4f") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("srfi-lite-lib" "base" "dynext-lib" "sandbox-lib" "rackunit-lib")) (description . "Racket bindings for NaCl, a cryptographic library.") (implies . ()) (last-checked . 1632904495) (last-edit . 1365119448) (last-updated . 1502816377) (modules . ((lib "racl/test-main.rkt") (lib "racl/main.rkt") (lib "racl/wrapper.rkt") (lib "racl/keys.rkt") (lib "racl/tcp.rkt") (lib "racl/port.rkt") (lib "racl/private/install.rkt") (lib "racl/examples/repl-server.rkt") (lib "racl/session.rkt") (lib "racl/ffi-lib.rkt") (lib "racl/spki-sexp.rkt") (lib "racl/examples/repl-client.rkt"))) (name . "racl") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:tonygarnockjones@gmail.com . #t) (crypto . #t) (ffi . #t) (ring:1 . #t))) (source . "github://github.com/tonyg/racl/master") (tags . ("crypto" "ffi")) (versions . #hash((default . #hasheq((checksum . "a54859d0e39e61a4b69e46454ad67299d1967c4f") (source . "github://github.com/tonyg/racl/master") (source_url . "http://github.com/tonyg/racl/tree/master"))))))) ("raco-bug" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-bug.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-bug.txt"))) (checksum . "21d5b6aa30e8efa33bf7110482dea48541399edb") (checksum-error . #f) (collection . "raco-bug") (conflicts . ()) (dependencies . ("base" "drracket")) (description . "Submit bug reports") (implies . ()) (last-checked . 1632904496) (last-edit . 1393967131) (last-updated . 1502816378) (modules . ((lib "raco-bug/main.rkt"))) (name . "raco-bug") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (bug . #t) (ring:1 . #t))) (source . "git://github.com/samth/raco-bug") (tags . ("bug")) (versions . #hash((default . #hasheq((checksum . "21d5b6aa30e8efa33bf7110482dea48541399edb") (source . "git://github.com/samth/raco-bug") (source_url . "http://github.com/samth/raco-bug/tree/master"))))))) ("raco-cross" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-cross.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-cross.txt"))) (checksum . "08d23ab27196594b731a8fee4360f93882494b7a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1620787639) (dependencies . ("raco-cross-lib" "raco-cross-doc")) (description . "A raco command to drive cross compilation.") (implies . ("raco-cross-lib" "raco-cross-doc")) (last-checked . 1632904496) (last-edit . 1624116030) (last-updated . 1629056108) (modules . ()) (name . "raco-cross") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@cs.utah.edu . #t) (raco . #t) (ring:1 . #t))) (source . "https://github.com/racket/raco-cross.git?path=raco-cross") (tags . ("raco")) (versions . #hash((default . #hasheq((checksum . "08d23ab27196594b731a8fee4360f93882494b7a") (source . "https://github.com/racket/raco-cross.git?path=raco-cross") (source_url . "https://github.com/racket/raco-cross.git?path=raco-cross"))))))) ("raco-cross-doc" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "raco-cross" "doc/raco-cross@raco-cross-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-cross-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-cross-doc.txt"))) (checksum . "08d23ab27196594b731a8fee4360f93882494b7a") (checksum-error . #f) (collection . "raco") (conflicts . ()) (date-added . 1624115972) (dependencies . ("base" "raco-cross-lib" "racket-doc" "scribble-lib")) (description . "documentation part of raco-cross") (implies . ()) (last-checked . 1632904497) (last-edit . 1624115972) (last-updated . 1629056108) (modules . ((lib "raco/private/cross/raco-cross.scrbl"))) (name . "raco-cross-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (raco . #t) (ring:1 . #t))) (source . "https://github.com/racket/raco-cross.git?path=raco-cross-doc") (tags . ("raco")) (versions . #hash((default . #hasheq((checksum . "08d23ab27196594b731a8fee4360f93882494b7a") (source . "https://github.com/racket/raco-cross.git?path=raco-cross-doc") (source_url . "https://github.com/racket/raco-cross.git?path=raco-cross-doc"))))))) ("raco-cross-lib" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-cross-lib.txt") (test-failure-log . "server/built/test-fail/raco-cross-lib.txt") (test-success-log . #f))) (checksum . "08d23ab27196594b731a8fee4360f93882494b7a") (checksum-error . #f) (collection . "raco") (conflicts . ()) (date-added . 1624115840) (dependencies . ("base")) (description . "implementation (no documentation) part of raco-cross") (implies . ()) (last-checked . 1632904497) (last-edit . 1624115840) (last-updated . 1629056109) (modules . ((lib "raco/private/cross/default.rkt") (lib "raco/private/cross/browse.rkt") (lib "raco/private/cross/workspace.rkt") (lib "raco/private/cross/command.rkt") (lib "raco/cross.rkt") (lib "raco/private/cross/platform.rkt") (lib "raco/private/cross/xpatch.rkt") (lib "raco/private/cross/remove.rkt") (lib "raco/private/cross/run.rkt") (lib "raco/private/cross/can-build.rkt") (lib "raco/private/cross/host-racket.rkt") (lib "raco/private/cross/url.rkt") (lib "raco/private/cross/download.rkt") (lib "raco/private/cross/build.rkt") (lib "raco/private/cross/setup.rkt") (lib "raco/private/cross/native.rkt"))) (name . "raco-cross-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@cs.utah.edu . #t) (raco . #t) (ring:1 . #t))) (source . "https://github.com/racket/raco-cross.git?path=raco-cross-lib") (tags . ("raco")) (versions . #hash((default . #hasheq((checksum . "08d23ab27196594b731a8fee4360f93882494b7a") (source . "https://github.com/racket/raco-cross.git?path=raco-cross-lib") (source_url . "https://github.com/racket/raco-cross.git?path=raco-cross-lib"))))))) ("raco-find-collection" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "raco-fc" "doc/raco-fc@raco-find-collection/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-find-collection.txt") (test-failure-log . "server/built/test-fail/raco-find-collection.txt") (test-success-log . #f))) (checksum . "00f0d3dbad025fdb98d23b9ee1a78731f460d541") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compiler-lib" "rackunit-lib" "scribble-lib")) (description . "A script to find collections.") (implies . ()) (last-checked . 1632904497) (last-edit . 1470935846) (last-updated . 1502816378) (modules . ((lib "find-collection/run.rkt") (lib "find-collection/find-collection.rkt") (lib "find-collection/raco-fc.scrbl"))) (name . "raco-find-collection") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t) (search . #t) (tools . #t))) (source . "git://github.com/takikawa/raco-find-collection") (tags . ("search" "tools")) (versions . #hash((default . #hasheq((checksum . "00f0d3dbad025fdb98d23b9ee1a78731f460d541") (source . "git://github.com/takikawa/raco-find-collection") (source_url . "http://github.com/takikawa/raco-find-collection/tree/master"))))))) ("raco-format" . #hasheq((author . "dan.hillier.anderson@gmail.com") (authors . ("dan.hillier.anderson@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-format.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-format.txt"))) (checksum . "f91b375520fe05a008907be70fcd85cf02c0d574") (checksum-error . #f) (collection . "raco-format") (conflicts . ()) (date-added . 1622226732) (dependencies . ("base" "threading-lib" "gui-lib")) (description . "Format racket source files") (implies . ()) (last-checked . 1632904497) (last-edit . 1622226732) (last-updated . 1622226732) (modules . ((lib "raco-format/main.rkt"))) (name . "raco-format") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:dan.hillier.anderson@gmail.com . #t) (cli . #t) (format . #t) (indent . #t) (raco . #t) (ring:1 . #t) (tools . #t))) (source . "https://github.com/mxork/raco-format.git#main") (tags . ("cli" "format" "indent" "raco" "tools")) (versions . #hash((default . #hasheq((checksum . "f91b375520fe05a008907be70fcd85cf02c0d574") (source . "https://github.com/mxork/raco-format.git#main") (source_url . "https://github.com/mxork/raco-format.git#main"))))))) ("raco-macro-step" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-macro-step.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-macro-step.txt"))) (checksum . "efbc4ba9ebfda38624050e9cfa0452da823decf0") (checksum-error . #f) (collection . "raco-macro-step") (conflicts . ()) (dependencies . ("macro-debugger" "base")) (description . "Run the macro stepper from the command line") (implies . ()) (last-checked . 1632904497) (last-edit . 1503521840) (last-updated . 1502816378) (modules . ((lib "raco-macro-step/main.rkt"))) (name . "raco-macro-step") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (macro . #t) (raco . #t) (ring:1 . #t))) (source . "git://github.com/samth/raco-macro-step") (tags . ("macro" "raco")) (versions . #hash((default . #hasheq((checksum . "efbc4ba9ebfda38624050e9cfa0452da823decf0") (source . "git://github.com/samth/raco-macro-step") (source_url . "http://github.com/samth/raco-macro-step/tree/master"))))))) ("raco-pkg-env" . #hasheq((author . "samdphillips@gmail.com") (authors . ("samdphillips@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "raco-pkg-env" "doc/raco-pkg-env@raco-pkg-env/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-pkg-env.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-pkg-env.txt"))) (checksum . "16e6ea731c360efeadd3c8ff5683e72cf5c3c2ea") (checksum-error . #f) (collection . "raco-pkg-env") (conflicts . ()) (date-added . 1618351527) (dependencies . ("base" "raco-pkg-env-lib" "scribble-lib")) (description . "virtualenv like tool for Racket") (implies . ("raco-pkg-env-lib")) (last-checked . 1632904498) (last-edit . 1618351527) (last-updated . 1621567718) (modules . ((lib "raco-pkg-env/scribblings/raco-pkg-env.scrbl"))) (name . "raco-pkg-env") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samdphillips@gmail.com . #t) (raco . #t) (ring:1 . #t))) (source . "https://github.com/samdphillips/raco-pkg-env.git?path=raco-pkg-env#release") (tags . ("raco")) (versions . #hash((default . #hasheq((checksum . "16e6ea731c360efeadd3c8ff5683e72cf5c3c2ea") (source . "https://github.com/samdphillips/raco-pkg-env.git?path=raco-pkg-env#release") (source_url . "https://github.com/samdphillips/raco-pkg-env.git?path=raco-pkg-env#release"))))))) ("raco-pkg-env-lib" . #hasheq((author . "samdphillips@gmail.com") (authors . ("samdphillips@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-pkg-env-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-pkg-env-lib.txt"))) (checksum . "16e6ea731c360efeadd3c8ff5683e72cf5c3c2ea") (checksum-error . #f) (collection . "raco-pkg-env") (conflicts . ()) (date-added . 1618351486) (dependencies . ("base")) (description . "virtualenv like tool for Racket") (implies . ()) (last-checked . 1632904498) (last-edit . 1618351486) (last-updated . 1621567719) (modules . ((lib "raco-pkg-env/main.rkt"))) (name . "raco-pkg-env-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samdphillips@gmail.com . #t) (raco . #t) (ring:1 . #t))) (source . "https://github.com/samdphillips/raco-pkg-env.git?path=raco-pkg-env-lib#release") (tags . ("raco")) (versions . #hash((default . #hasheq((checksum . "16e6ea731c360efeadd3c8ff5683e72cf5c3c2ea") (source . "https://github.com/samdphillips/raco-pkg-env.git?path=raco-pkg-env-lib#release") (source_url . "https://github.com/samdphillips/raco-pkg-env.git?path=raco-pkg-env-lib#release"))))))) ("raco-run" . #hasheq((author . "samdphillips@gmail.com") (authors . ("samdphillips@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "raco-run" "doc/raco-run@raco-run/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-run.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-run.txt"))) (checksum . "a57165d1ba73436476cd9466b74dc1ff71d6b19a") (checksum-error . #f) (collection . "raco-run") (conflicts . ()) (date-added . 1603685884) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Run submodules from the command line") (implies . ()) (last-checked . 1632904498) (last-edit . 1603840647) (last-updated . 1603840647) (modules . ((lib "raco-run/scribblings/raco-run.scrbl") (lib "raco-run/main.rkt"))) (name . "raco-run") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samdphillips@gmail.com . #t) (raco . #t) (ring:1 . #t))) (source . "https://github.com/samdphillips/raco-run.git#main") (tags . ("raco")) (versions . #hash((default . #hasheq((checksum . "a57165d1ba73436476cd9466b74dc1ff71d6b19a") (source . "https://github.com/samdphillips/raco-run.git#main") (source_url . "https://github.com/samdphillips/raco-run.git#main"))))))) ("raco-search" . #hasheq((author . "yilin.wei10@gmail.com") (authors . ("yilin.wei10@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/raco-search.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "b5341b696c280f15f8a731008e0f814cc95c2865") (checksum-error . #f) (collection . "raco-search") (conflicts . ()) (date-added . 1605815212) (dependencies . ("base" "levenshtein")) (description . "") (implies . ()) (last-checked . 1632904498) (last-edit . 1605826019) (last-updated . 1605829013) (modules . ((lib "raco-search/search.rkt") (lib "raco-search/parse.rkt") (lib "raco-search/installer.rkt") (lib "raco-search/format.rkt") (lib "raco-search/js.rkt") (lib "raco-search/index.rkt") (lib "raco-search/main.rkt"))) (name . "raco-search") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:yilin.wei10@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/yilinwei/raco-search.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b5341b696c280f15f8a731008e0f814cc95c2865") (source . "https://github.com/yilinwei/raco-search.git") (source_url . "https://github.com/yilinwei/raco-search.git"))))))) ("raco-watch" . #hasheq((author . "dannypsnl@gmail.com") (authors . ("dannypsnl@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "raco-watch" "doc/raco-watch@raco-watch/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raco-watch.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raco-watch.txt"))) (checksum . "53d21037b19dd56fd191b264aede919fb5e52bff") (checksum-error . #f) (collection . "raco-watch") (conflicts . ()) (date-added . 1609739727) (dependencies . ("base" "file-watchers" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "\r\nAn extension of raco command that watching files and re-executing subcommand ") (implies . ()) (last-checked . 1632904498) (last-edit . 1609739759) (last-updated . 1620898094) (modules . ((lib "raco-watch/scribblings/raco-watch.scrbl") (lib "raco-watch/main.rkt"))) (name . "raco-watch") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dannypsnl@gmail.com . #t) (raco . #t) (ring:1 . #t))) (source . "https://github.com/dannypsnl/raco-watch.git#develop") (tags . ("raco")) (versions . #hash((default . #hasheq((checksum . "53d21037b19dd56fd191b264aede919fb5e52bff") (source . "https://github.com/dannypsnl/raco-watch.git#develop") (source_url . "https://github.com/dannypsnl/raco-watch.git#develop"))))))) ("racquel" . #hasheq((author . "brown131@yahoo.com") (authors . ("brown131@yahoo.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racquel" "doc/racquel@racquel/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racquel.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racquel.txt"))) (checksum . "e5ae8cf5a848be390596122cd43f777efa683549") (checksum-error . "git: could not find requested reference\n  reference: master\n  repo: brown131/racquel\n  context...:\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:403:0: select-commits\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ("base" "db-lib" "rackunit-lib" "racket-doc")) (description . "Racquel is an object/relational mapper for Racket.") (implies . ()) (last-checked . 1632904499) (last-edit . 1415390133) (last-updated . 1621815115) (modules . ((lib "racquel/test.rkt") (lib "racquel/util.rkt") (lib "racquel/schema.rkt") (lib "racquel/test-chinook.rkt") (lib "racquel/racquel.scrbl") (lib "racquel/keywords.rkt") (lib "racquel/main.rkt") (lib "racquel/doc/racquel.scrbl") (lib "racquel/stxclass.rkt") (lib "racquel/metadata.rkt"))) (name . "racquel") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:error: . #t) (author:brown131@yahoo.com . #t) (db . #t) (ring:1 . #t))) (source . "git://github.com/brown131/racquel") (tags . ("db")) (versions . #hash((default . #hasheq((checksum . "e5ae8cf5a848be390596122cd43f777efa683549") (source . "git://github.com/brown131/racquel") (source_url . "http://github.com/brown131/racquel/tree/master"))))))) ("racr" . #hasheq((author . "eeide@cs.utah.edu") (authors . ("eeide@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "racr" "doc/racr@racr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/racr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/racr.txt"))) (checksum . "bee5a520ec663aa58673367a453c5d2a97e8d79c") (checksum-error . #f) (collection . "racr") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "A Racket port of RACR, a library for reference attribute grammar controlled rewriting.") (implies . ()) (last-checked . 1632904499) (last-edit . 1497499354) (last-updated . 1502816379) (modules . ((lib "racr/main.rkt") (lib "racr/testing.rkt") (lib "racr/core.rkt") (lib "racr/scribblings/racr.scrbl"))) (name . "racr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:eeide@cs.utah.edu . #t) (ring:1 . #t))) (source . "git://github.com/eeide/racr") (tags . ()) (versions . #hash((default . #hasheq((checksum . "bee5a520ec663aa58673367a453c5d2a97e8d79c") (source . "git://github.com/eeide/racr") (source_url . "http://github.com/eeide/racr/tree/master"))))))) ("rage" . #hasheq((author . "") (authors . ()) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Package rage is missing a required field: 'source\n  context...:\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (implies . ()) (last-checked . 1632904499) (last-edit . 1632906423) (last-updated . 1632429315) (modules . ()) (name . "rage") (ring . 2) (search-terms . #hasheq((:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (ring:2 . #t))) (source . "") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "") (source_url . ""))))))) ("ragg" . #hasheq((author . "mb@mbtype.com clements@racket-lang.org dyoo@hashcollision.org") (authors . ("mb@mbtype.com" "clements@racket-lang.org" "dyoo@hashcollision.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ragg" "doc/ragg@ragg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ragg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ragg.txt"))) (checksum . "fe71542609bd707d4fd6d842d74c164ae2b2adff") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "rackunit-lib" "python-tokenizer" "at-exp-lib" "parser-tools-doc" "racket-doc" "scribble-lib")) (description . "Given a grammar in EBNF, `ragg` produces a parser that generates a syntax object with source locations. This package is maintained for backward compatibility. `brag` is an updated version.") (implies . ()) (last-checked . 1632904499) (last-edit . 1528394558) (last-updated . 1582389399) (modules . ((lib "ragg/private/internal-support.rkt") (lib "ragg/rules/lexer.rkt") (lib "ragg/examples/statlist-grammar.rkt") (lib "ragg/examples/simple-line-drawing/grammar.rkt") (lib "ragg/test/test-wordy.rkt") (lib "ragg/ragg.scrbl") (lib "ragg/examples/0n1n.rkt") (lib "ragg/rules/runtime.rkt") (lib "ragg/test/test-simple-arithmetic-grammar.rkt") (lib "ragg/test/test-simple-line-drawing.rkt") (lib "ragg/examples/simple-line-drawing/semantics.rkt") (lib "ragg/test/test-baby-json.rkt") (lib "ragg/rules/rule-structs.rkt") (lib "ragg/examples/simple-line-drawing.rkt") (lib "ragg/examples/01-equal.rkt") (lib "ragg/rules/stx.rkt") (lib "ragg/test/test-lexer.rkt") (lib "ragg/codegen/codegen.rkt") (lib "ragg/support.rkt") (lib "ragg/examples/simple-line-drawing/interpret.rkt") (lib "ragg/examples/simple-line-drawing/lexer.rkt") (lib "ragg/examples/wordy.rkt") (lib "ragg/test/weird-grammar.rkt") (lib "ragg/test/test-weird-grammar.rkt") (lib "ragg/test/test-old-token.rkt") (lib "ragg/test/test-0n1n.rkt") (lib "ragg/examples/python-grammar.rkt") (lib "ragg/examples/0n1.rkt") (lib "ragg/examples/bnf.rkt") (lib "ragg/codegen/flatten.rkt") (lib "ragg/test/test-0n1.rkt") (lib "ragg/examples/baby-json.rkt") (lib "ragg/examples/simple-line-drawing/examples/letter-i.rkt") (lib "ragg/test/test-all.rkt") (lib "ragg/examples/lua-parser.rkt") (lib "ragg/test/test-errors.rkt") (lib "ragg/test/exercise-python-grammar.rkt") (lib "ragg/codegen/lang/reader.rkt") (lib "ragg/test/test-parser.rkt") (lib "ragg/codegen/runtime.rkt") (lib "ragg/codegen/satisfaction.rkt") (lib "ragg/examples/simple-arithmetic-grammar.rkt") (lib "ragg/test/test-01-equal.rkt") (lib "ragg/rules/parser.rkt") (lib "ragg/test/test-flatten.rkt") (lib "ragg/examples/nested-word-list.rkt") (lib "ragg/rules/stx-types.rkt") (lib "ragg/codegen/sexp-based-lang.rkt") (lib "ragg/cfg-parser/cfg-parser.rkt") (lib "ragg/lang/reader.rkt") (lib "ragg/examples/simple-line-drawing/lang/reader.rkt"))) (name . "ragg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (author:dyoo@hashcollision.org . #t) (author:mb@mbtype.com . #t) (legacy . #t) (parser . #t) (parsing . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/ragg.git") (tags . ("legacy" "parser" "parsing")) (versions . #hash((default . #hasheq((checksum . "fe71542609bd707d4fd6d842d74c164ae2b2adff") (source . "https://github.com/jbclements/ragg.git") (source_url . "https://github.com/jbclements/ragg.git"))))))) ("raichu" . #hasheq((author . "") (authors . ()) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Package raichu is missing a required field: 'source\n  context...:\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (implies . ()) (last-checked . 1632904499) (last-edit . 1632906423) (last-updated . 1632436349) (modules . ()) (name . "raichu") (ring . 2) (search-terms . #hasheq((:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (ring:2 . #t))) (source . "") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "") (source_url . ""))))))) ("raiden" . #hasheq((author . "") (authors . ()) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Package raiden is missing a required field: 'source\n  context...:\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (implies . ()) (last-checked . 1632904499) (last-edit . 1632906423) (last-updated . 1632436349) (modules . ()) (name . "raiden") (ring . 2) (search-terms . #hasheq((:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (ring:2 . #t))) (source . "") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "") (source_url . ""))))))) ("ralist" . #hasheq((author . "dvanhorn@racket-lang.org") (authors . ("dvanhorn@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ralist" "doc/ralist@ralist/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ralist.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ralist.txt"))) (checksum . "8f830a01463c547d2588671e76202cfe566a3fb1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "rackunit-doc" "scribble-lib" "racket-doc" "rackunit-doc")) (description . "Purely Functional Random Access Lists") (implies . ()) (last-checked . 1632904499) (last-edit . 1354594625) (last-updated . 1550461981) (modules . ((lib "data/ralist/scribblings/run-tests.scrbl") (lib "data/ralist/contract.rkt") (lib "data/ralist/tests/freq-count.rkt") (lib "data/ralist/scribblings/run-benchmarks.scrbl") (lib "data/ralist/tests/tree.rkt") (lib "data/ralist/scribblings/ralist.scrbl") (lib "data/ralist/benchmarks/ra-list.rkt") (lib "data/ralist/run-benchmarks.rkt") (lib "data/ralist/tests/garden-fence.rkt") (lib "data/ralist/scribblings/bindings.scrbl") (lib "data/ralist/tests/private/ra-list-contracted.rkt") (lib "data/ralist.rkt") (lib "data/ralist/benchmarks/garden-fence.rkt") (lib "data/ralist/tests/private/ra-list-uncontracted.rkt") (lib "data/ralist/run-tests.rkt") (lib "data/ralist/tests/ra-list.rkt") (lib "data/ralist/benchmarks/freq-count.rkt") (lib "data/ralist/scribblings/contract.scrbl") (lib "data/ralist/benchmarks/contract.rkt"))) (name . "ralist") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dvanhorn@racket-lang.org . #t) (data . #t) (ring:1 . #t))) (source . "github://github.com/dvanhorn/ralist/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "8f830a01463c547d2588671e76202cfe566a3fb1") (source . "github://github.com/dvanhorn/ralist/master") (source_url . "http://github.com/dvanhorn/ralist/tree/master"))))))) ("ramunk" . #hasheq((author . "vervaeck.sam@skynet.be") (authors . ("vervaeck.sam@skynet.be")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/ramunk.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "54503139318a4b8da4416700d5867988509b4b09") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: git://github.com/samvv/ramunk\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . (("autoffi" "0.2"))) (description . "Autogenerated bindings to the Chipmunk2D physics engine") (implies . ()) (last-checked . 1632904500) (last-edit . 1488410858) (last-updated . 1621815116) (modules . ((lib "ramunk/doc/vector.scrbl") (lib "ramunk/main.rkt") (lib "ramunk/examples/hello_chipmunk.rkt") (lib "ramunk/doc/space.scrbl") (lib "ramunk/doc/chipmunk.scrbl") (lib "ramunk/doc/shapes.scrbl") (lib "ramunk/doc/api.scrbl") (lib "ramunk/doc/body.scrbl") (lib "ramunk/doc/main.scrbl"))) (name . "ramunk") (ring . 1) (search-terms . #hasheq((2d . #t) (:build-fail: . #t) (:error: . #t) (author:vervaeck.sam@skynet.be . #t) (ffi . #t) (physics-engine . #t) (ring:1 . #t))) (source . "git://github.com/samvv/ramunk") (tags . ("2d" "ffi" "physics-engine")) (versions . #hash((default . #hasheq((checksum . "54503139318a4b8da4416700d5867988509b4b09") (source . "git://github.com/samvv/ramunk") (source_url . "http://github.com/samvv/ramunk/tree/master"))))))) ("ranked-programming" . #hasheq((author . "tjitze@gmail.com") (authors . ("tjitze@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ranked-programming" "doc/ranked-programming@ranked-programming/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ranked-programming.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ranked-programming.txt"))) (checksum . "5503146a8ac9779d949905b778f0d9fd6d8c0d1a") (checksum-error . #f) (collection . "ranked-programming") (conflicts . ()) (date-added . 1557931225) (dependencies . ("sandbox-lib" "scribble-lib" "srfi-lite-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A library that provides ranked programming functionality in Racket.") (implies . ()) (last-checked . 1632904500) (last-edit . 1566388529) (last-updated . 1589817833) (modules . ((lib "ranked-programming/examples/ranking_network.rkt") (lib "ranked-programming/examples/hidden_markov.rkt") (lib "ranked-programming/examples/boolean_circuit.rkt") (lib "ranked-programming/examples/ranked_procedure_call.rkt") (lib "ranked-programming/examples/localisation.rkt") (lib "ranked-programming/examples/ranked_let.rkt") (lib "ranked-programming/main.rkt") (lib "ranked-programming/scribblings/ranked-programming.scrbl") (lib "ranked-programming/examples/spelling_correction.rkt") (lib "ranked-programming/rp-core.rkt") (lib "ranked-programming/rp-api.rkt") (lib "ranked-programming/examples/recursion.rkt") (lib "ranked-programming/rp-test.rkt"))) (name . "ranked-programming") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:tjitze@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/tjitze/ranked-programming.git") (tags . ()) (versions . #hash(("0.1" . #hasheq((checksum . "48cbec099f04c6e49c519415be36b910c8aff790") (source . "https://github.com/tjitze/ranked-programming.git#48cbec099f04c6e49c519415be36b910c8aff790") (source_url . "https://github.com/tjitze/ranked-programming.git#48cbec099f04c6e49c519415be36b910c8aff790"))) (default . #hasheq((checksum . "5503146a8ac9779d949905b778f0d9fd6d8c0d1a") (source . "https://github.com/tjitze/ranked-programming.git") (source_url . "https://github.com/tjitze/ranked-programming.git"))))))) ("rapider" . #hasheq((author . "heizai3@gmail.com") (authors . ("heizai3@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rapider.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rapider.txt"))) (checksum . "f167aa91522788e70affd49e8f350cd055dba3c4") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1582419763) (dependencies . ("rapider-lib" "base")) (description . "web scrape framework ") (implies . ("rapider-lib")) (last-checked . 1632904500) (last-edit . 1582970400) (last-updated . 1582436206) (modules . ()) (name . "rapider") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:heizai3@gmail.com . #t) (ring:1 . #t) (spider . #t))) (source . "https://github.com/nuty/rapider.git?path=rapider") (tags . ("spider")) (versions . #hash((default . #hasheq((checksum . "f167aa91522788e70affd49e8f350cd055dba3c4") (source . "https://github.com/nuty/rapider.git?path=rapider") (source_url . "https://github.com/nuty/rapider.git?path=rapider"))))))) ("rapider-lib" . #hasheq((author . "heizai3@gmail.com") (authors . ("heizai3@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rapider-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rapider-lib.txt"))) (checksum . "f167aa91522788e70affd49e8f350cd055dba3c4") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1582419802) (dependencies . ("base" "sxml" "gregor" "html-parsing")) (description . "rapider-lib") (implies . ()) (last-checked . 1632904501) (last-edit . 1582425181) (last-updated . 1582436206) (modules . ((lib "rapider/item.rkt") (lib "rapider/spider.rkt") (lib "rapider/main.rkt") (lib "rapider/worker.rkt") (lib "rapider/ctx.rkt") (lib "rapider/logging.rkt"))) (name . "rapider-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:heizai3@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/nuty/rapider.git?path=rapider-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f167aa91522788e70affd49e8f350cd055dba3c4") (source . "https://github.com/nuty/rapider.git?path=rapider-lib") (source_url . "https://github.com/nuty/rapider.git?path=rapider-lib"))))))) ("rascas" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rascas" "doc/rascas@rascas/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rascas.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rascas.txt"))) (checksum . "a14babb44b847a57743545824ebb326a2783aa35") (checksum-error . #f) (collection . "rascas") (conflicts . ()) (dependencies . ("base" "math-lib" "parser-tools-lib" "rackunit-lib" "srfi-lite-lib" "plot-gui-lib" "plot-lib" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib" "data-lib")) (description . "Computer algebra system for Racket. Port of dharmatech/mpl without dependencies.") (implies . ()) (last-checked . 1632904501) (last-edit . 1518373792) (last-updated . 1623407531) (modules . ((lib "rascas/coefficient-gpe.rkt") (lib "rascas/separate-sin-cos.rkt") (lib "rascas/derivative.rkt") (lib "rascas/cos.rkt") (lib "rascas/trig-functions.rkt") (lib "rascas/collect-terms.rkt") (lib "rascas/alge.rkt") (lib "rascas/order-relation.rkt") (lib "rascas/taylor.rkt") (lib "rascas/monomial-gpe.rkt") (lib "rascas/polynomial-gpe.rkt") (lib "rascas/numerator.rkt") (lib "rascas/polynomial-gcd.rkt") (lib "rascas/rational-expand.rkt") (lib "rascas/rational-variables.rkt") (lib "rascas/main.rkt") (lib "rascas/denominator.rkt") (lib "rascas/rational-gre.rkt") (lib "rascas/tests/stress-test-arithmetic.rkt") (lib "rascas/eval-module.rkt") (lib "rascas/contains.rkt") (lib "rascas/substitute.rkt") (lib "rascas/rich-return.rkt") (lib "rascas/quadratic.rkt") (lib "rascas/extended-euclidean-algorithm.rkt") (lib "rascas/polynomial-expansion.rkt") (lib "rascas/infix-parser.rkt") (lib "rascas/scribblings/rascas.scrbl") (lib "rascas/tests/tests.rkt") (lib "rascas/inverse.rkt") (lib "rascas/special-functions.rkt") (lib "rascas/alg-polynomial-division.rkt") (lib "rascas/trig-substitute.rkt") (lib "rascas/expand-trig.rkt") (lib "rascas/tests/derivative.rkt") (lib "rascas/arithmetic.rkt") (lib "rascas/smart-simplify.rkt") (lib "rascas/misc.rkt") (lib "rascas/distribute.rkt") (lib "rascas/partial-fraction-1.rkt") (lib "rascas/algebraic-expand.rkt") (lib "rascas/tests/letstar.rkt") (lib "rascas/factor.rkt") (lib "rascas/examples/plot-derivatives.rkt") (lib "rascas/color-printf.rkt") (lib "rascas/leading-coefficient-gpe.rkt") (lib "rascas/letstar.rkt") (lib "rascas/format.rkt") (lib "rascas/automatic-simplify.rkt") (lib "rascas/rackunit.rkt") (lib "rascas/algorithmic.rkt") (lib "rascas/simplify-trig.rkt") (lib "rascas/alg-polynomial-gcd.rkt") (lib "rascas/sin.rkt") (lib "rascas/rationalize-expression.rkt") (lib "rascas/degree-gpe.rkt") (lib "rascas/variables.rkt") (lib "rascas/polynomial-division.rkt") (lib "rascas/contract-trig.rkt") (lib "rascas/coeff-var-monomial.rkt"))) (name . "rascas") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (algebra . #t) (author:laurent.orseau@gmail.com . #t) (math . #t) (ring:1 . #t))) (source . "https://github.com/Metaxal/rascas.git") (tags . ("algebra" "math")) (versions . #hash((default . #hasheq((checksum . "a14babb44b847a57743545824ebb326a2783aa35") (source . "https://github.com/Metaxal/rascas.git") (source_url . "https://github.com/Metaxal/rascas.git"))))))) ("rash" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rash" "doc/rash@rash/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rash.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rash.txt"))) (checksum . "c40c5adfedf632bc1fdbad3e0e2763b134ee3ff5") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1608151841) (dependencies . (("base" #:version "6.12") "basedir" "shell-pipeline" "linea" "udelim" "scribble-lib" "scribble-doc" "racket-doc" "rackunit-lib" "readline-lib")) (description . "The Reckless Racket Shell.  For interactions and scripting.") (implies . ()) (last-checked . 1632904501) (last-edit . 1608151841) (last-updated . 1615913669) (modules . ((lib "rash/private/syntax-walk.rkt") (lib "rash/scribblings/rash.scrbl") (lib "rash/main.rkt") (lib "rash/experimental.rkt") (lib "rash/private/rashrc-lib.rkt") (lib "rash/private/option-app.rkt") (lib "rash/private/test/unix-pipe-misc.rkt") (lib "rash/private/top-level-print.rkt") (lib "rash/private/cd.rkt") (lib "rash/private/escapable-template.rkt") (lib "rash/prompt-helpers/string-style.rkt") (lib "rash/private/template-escape-detect.rkt") (lib "rash/private/lang-funcs.rkt") (lib "rash/private/basic-module-begin.rkt") (lib "rash/private/drracket-submit-predicate.rkt") (lib "rash/private/test/hash-lang-sanity-test.rkt") (lib "rash/prompt-helpers/git-info.rkt") (lib "rash/private/or-exn.rkt") (lib "rash/repl.rkt") (lib "rash/private/repl-namespace.rkt") (lib "rash/private/test/port-exhaustion-test.rkt") (lib "rash/private/repl-startup-hint-db.rkt") (lib "rash/private/test/empty-test.rkt") (lib "rash/private/repl-startup-hint.rkt") (lib "rash/private/help-line-macro.rkt"))) (name . "rash") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (repl . #t) (ring:1 . #t) (shell . #t) (unix . #t))) (source . "https://github.com/willghatch/racket-rash.git?path=rash") (tags . ("repl" "shell" "unix")) (versions . #hash((default . #hasheq((checksum . "c40c5adfedf632bc1fdbad3e0e2763b134ee3ff5") (source . "https://github.com/willghatch/racket-rash.git?path=rash") (source_url . "https://github.com/willghatch/racket-rash.git?path=rash"))))))) ("rash-demos" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rash-demos.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rash-demos.txt"))) (checksum . "c40c5adfedf632bc1fdbad3e0e2763b134ee3ff5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1602791325) (dependencies . (("base" #:version "6.12") "rash" "basedir" "shell-pipeline" "linea" "udelim" "scribble-lib" "scribble-doc" "racket-doc" "rackunit-lib" "readline-lib" "make" "csv-reading" "text-table")) (description . "Demo code for the Rash package.") (implies . ()) (last-checked . 1632904504) (last-edit . 1608151852) (last-updated . 1615913670) (modules . ((lib "rash/demo/make.rkt") (lib "rash/demo/setup.rkt") (lib "rash/demo/rc17-demo-modbeg.rkt") (lib "rash/demo/use-make-dumb-example.rkt") (lib "rash/demo/with-transactional-file-list.rkt") (lib "rash/demo/rc17.rkt") (lib "rash/demo/infix-math.rkt") (lib "rash/demo/basic-infix-math.rkt") (lib "shell/demo/more-pipeline-operators.rkt") (lib "rash/demo/ps-wrapper.rkt") (lib "rash/demo/demo-rc.rkt") (lib "rash/demo/with-tmp-dir.rkt"))) (name . "rash-demos") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (rash . #t) (ring:1 . #t))) (source . "https://github.com/willghatch/racket-rash.git?path=rash-demos") (tags . ("rash")) (versions . #hash((default . #hasheq((checksum . "c40c5adfedf632bc1fdbad3e0e2763b134ee3ff5") (source . "https://github.com/willghatch/racket-rash.git?path=rash-demos") (source_url . "https://github.com/willghatch/racket-rash.git?path=rash-demos"))))))) ("ratchet" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . "server/built/deps/ratchet.txt") (docs . (("extract" "manual" "doc/manual@ratchet/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ratchet.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ratchet.txt"))) (checksum . "6dcd99e9ad43e37feeae41838282ce3b94945ca1") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1550794102) (dependencies . ("lang-file")) (description . "Toolkit for defining visual languages.") (implies . ()) (last-checked . 1632904504) (last-edit . 1550794102) (last-updated . 1575922245) (modules . ((lib "ratchet/visual-language-maker/renderer/main.rkt") (lib "ratchet/main.rkt") (lib "ratchet/visual-language-maker/gui/widgets/basic-input-editor.rkt") (lib "ratchet/visual-language-maker/main.rkt") (lib "ratchet/scribblings/manual.scrbl") (lib "ratchet/tools/main.rkt") (lib "ratchet/visual-language-maker/gui/widgets/main.rkt") (lib "ratchet/demos/hello-world/main.rkt") (lib "ratchet/demos/hello-world/demos/module-demo.rkt") (lib "ratchet/visual-language-maker/tangeables/main.rkt") (lib "ratchet/demos/hello-world/util.rkt") (lib "ratchet/launch.rkt") (lib "ratchet/visual-language-maker/base.rkt") (lib "ratchet/demos/hello-world/demos/lang-demo.rkt") (lib "ratchet/util.rkt"))) (name . "ratchet") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/ratchet.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6dcd99e9ad43e37feeae41838282ce3b94945ca1") (source . "https://github.com/thoughtstem/ratchet.git") (source_url . "https://github.com/thoughtstem/ratchet.git"))))))) ("ratel" . #hasheq((author . "john@nineteeneightd.com") (authors . ("john@nineteeneightd.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/ratel.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ratel.txt") (test-failure-log . "server/built/test-fail/ratel.txt") (test-success-log . #f))) (checksum . "c28e0d56e9f1babad8293ab50c1f30cb3fd4df67") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "threading")) (description . "") (implies . ()) (last-checked . 1632904505) (last-edit . 1478358706) (last-updated . 1502816382) (modules . ((lib "ratel/web/actions.rkt") (lib "ratel/commands/suid-helper/mount.rkt") (lib "ratel/suid-helper.rkt") (lib "ratel/ffi/libecryptfs.rkt") (lib "ratel/web/dispatcher.rkt") (lib "ratel/config.rkt") (lib "ratel/commands/show.rkt") (lib "ratel/commands/mount.rkt") (lib "ratel/commands/suid-helper/umount.rkt") (lib "ratel/commands/umount.rkt") (lib "ratel/system.rkt") (lib "ratel/commands/suid-helper/main.rkt") (lib "ratel/ffi/libkeyutils.rkt") (lib "ratel/ffi/libc.rkt") (lib "ratel/commands/register.rkt") (lib "ratel/commands/main.rkt") (lib "ratel/commands/suid-helper/unshare.rkt") (lib "ratel/commands/web.rkt") (lib "ratel/passphrase.rkt") (lib "ratel/web/http.rkt"))) (name . "ratel") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:john@nineteeneightd.com . #t) (ring:1 . #t))) (source . "git://github.com/198d/ratel") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c28e0d56e9f1babad8293ab50c1f30cb3fd4df67") (source . "git://github.com/198d/ratel") (source_url . "http://github.com/198d/ratel/tree/master"))))))) ("raw-string" . #hasheq((author . "cmpitg@gmail.com") (authors . ("cmpitg@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/raw-string.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/raw-string.txt"))) (checksum . "b2745daf6da26c58b0138ab3ec0c20c1133e0ab6") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "Raw string support without at-exp") (implies . ()) (last-checked . 1632904505) (last-edit . 1390250045) (last-updated . 1502816382) (modules . ((lib "raw-string/raw-string/lang/reader-extension.rkt") (lib "raw-string/raw-string/lang/reader.rkt"))) (name . "raw-string") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:cmpitg@gmail.com . #t) (language . #t) (ring:1 . #t))) (source . "github://github.com/cmpitg/racket-raw-string/master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "b2745daf6da26c58b0138ab3ec0c20c1133e0ab6") (source . "github://github.com/cmpitg/racket-raw-string/master") (source_url . "http://github.com/cmpitg/racket-raw-string/tree/master"))))))) ("rbulkresizer" . #hasheq((author . "xgqt@riseup.net") (authors . ("xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rbulkresizer" "doc/rbulkresizer@rbulkresizer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rbulkresizer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rbulkresizer.txt"))) (checksum . "58d32a47bbd8a7447769212765b42ea80a4f051a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1620119070) (dependencies . ("base" "gui-lib" "htdp-lib" "net-lib" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Graphical bulk picture resize tool") (implies . ()) (last-checked . 1632904506) (last-edit . 1620119070) (last-updated . 1623548079) (modules . ((lib "rbulkresizer/private/resize-functions.rkt") (lib "rbulkresizer/scribblings/rbulkresizer.scrbl") (lib "rbulkresizer/main.rkt") (lib "rbulkresizer/private/gui.rkt") (lib "rbulkresizer/private/gui-helpers.rkt") (lib "rbulkresizer/private/program-name.rkt") (lib "rbulkresizer/private/resize-helpers.rkt") (lib "rbulkresizer/private/resize.rkt"))) (name . "rbulkresizer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (application . #t) (author:xgqt@riseup.net . #t) (gui . #t) (ring:1 . #t) (utility . #t))) (source . "https://gitlab.com/xgqt/rbulkresizer.git") (tags . ("application" "gui" "utility")) (versions . #hash((default . #hasheq((checksum . "58d32a47bbd8a7447769212765b42ea80a4f051a") (source . "https://gitlab.com/xgqt/rbulkresizer.git") (source_url . "https://gitlab.com/xgqt/rbulkresizer.git"))))))) ("rchess" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "rchess"))) (failure-log . "server/built/fail/rchess.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "77bcee50f661b638d9f05bc74149f75b21b03fed") (checksum-error . #f) (collection . "rchess") (conflicts . ()) (date-added . 1568646021) (dependencies . ("base" "chess" "brag" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Simple toolkit for chess stuff") (implies . ()) (last-checked . 1632904506) (last-edit . 1568646021) (last-updated . 1574623867) (modules . ((lib "rchess/moves/move.rkt") (lib "rchess/puzzles/main.rkt") (lib "rchess/test/main.rkt") (lib "rchess/main.rkt") (lib "rchess/puzzles/chessblunders/main.rkt") (lib "rchess/moves/main.rkt") (lib "rchess/images/main.rkt") (lib "rchess/pgn/main.rkt") (lib "rchess/pgn.rkt") (lib "rchess/moves/util.rkt") (lib "rchess/pgn/patch-test.rkt") (lib "rchess/moves/all-squares.rkt") (lib "rchess/moves/current-board.rkt") (lib "rchess/scribblings/rchess.scrbl") (lib "rchess/fen/main.rkt") (lib "rchess/pgn/deepblue-kasparov-1997.rkt") (lib "rchess/pgn/napoleon-turk-1809.rkt"))) (name . "rchess") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:stephen@thoughtstem.com . #t) (chess . #t) (ring:1 . #t))) (source . "https://github.com/srfoster/rchess.git") (tags . ("chess")) (versions . #hash((default . #hasheq((checksum . "77bcee50f661b638d9f05bc74149f75b21b03fed") (source . "https://github.com/srfoster/rchess.git") (source_url . "https://github.com/srfoster/rchess.git"))))))) ("reactor" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "reactor" "doc/reactor@reactor/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/reactor.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/reactor.txt"))) (checksum . "c4687bd43fafcd09802042648900d4737b04f923") (checksum-error . #f) (collection . "reactor") (conflicts . ()) (dependencies . ("seq-no-order" ("base" #:version "6.12") "rackunit-lib" "racket-doc" "scribble-lib" "rackunit")) (description . "An embedded synchronous reactive language, a la reactiveML") (implies . ()) (last-checked . 1632904506) (last-edit . 1514903500) (last-updated . 1546120686) (modules . ((lib "reactor/tests/contract.rkt") (lib "reactor/control.rkt") (lib "reactor/ct.rkt") (lib "reactor/tests/control.rkt") (lib "reactor/data.rkt") (lib "reactor/tests/reentrance.rkt") (lib "reactor/runtime.rkt") (lib "reactor/tests/multivalues.rkt") (lib "reactor/main.rkt") (lib "reactor/lang.rkt") (lib "reactor/tests/basics.rkt") (lib "reactor/compiler.rkt") (lib "reactor/tests/values.rkt") (lib "reactor/tests/marks.rkt") (lib "reactor/tests/with-handlers.rkt") (lib "reactor/scribblings/reactor.scrbl"))) (name . "reactor") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:spencer@florence.io . #t) (concurrency . #t) (language . #t) (programming-languages . #t) (reactive . #t) (ring:1 . #t))) (source . "https://github.com/florence/reactor.git") (tags . ("concurrency" "language" "programming-languages" "reactive")) (versions . #hash((default . #hasheq((checksum . "c4687bd43fafcd09802042648900d4737b04f923") (source . "https://github.com/florence/reactor.git") (source_url . "https://github.com/florence/reactor.git"))))))) ("readline" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("readline-lib" "readline-doc")) (description . "GNU Readline access from Racket") (implies . ("readline-lib" "readline-doc")) (last-checked . 1632904507) (last-edit . 1417659583) (last-updated . 1612018404) (modules . ()) (name . "readline") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "c988a929c6be9dcece91f06e146cad58396a6ca4") (source . "git://github.com/racket/readline/?path=readline") (source_url . "git://github.com/racket/readline/?path=readline"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("readline-doc" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "readline" "doc/readline@readline-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "readline-lib" "racket-doc")) (description . "documentation part of readline") (implies . ()) (last-checked . 1632904507) (last-edit . 1417659583) (last-updated . 1612018405) (modules . ((lib "readline/readline.scrbl"))) (name . "readline-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "c988a929c6be9dcece91f06e146cad58396a6ca4") (source . "git://github.com/racket/readline/?path=readline-doc") (source_url . "git://github.com/racket/readline/?path=readline-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("readline-gpl" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/readline-gpl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/readline-gpl.txt"))) (checksum . "6c231bdba7086c397349a934db768441ca648fec") (checksum-error . #f) (collection . "readline-gpl") (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "Cause readline collection to use GNU's readline library.") (implies . ()) (last-checked . 1632904507) (last-edit . 1430520585) (last-updated . 1624030514) (modules . ((lib "readline-gpl/private/readline-lib.rkt"))) (name . "readline-gpl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:leif@leifandersen.net . #t) (readline . #t) (ring:1 . #t))) (source . "git://github.com/racket/readline-gpl") (tags . ("readline")) (versions . #hash((default . #hasheq((checksum . "6c231bdba7086c397349a934db768441ca648fec") (source . "git://github.com/racket/readline-gpl") (source_url . "http://github.com/racket/readline-gpl/tree/master"))))))) ("readline-lib" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "8.0.0.4"))) (description . "implementation (no documentation) part of readline") (implies . ()) (last-checked . 1632904508) (last-edit . 1417659583) (last-updated . 1612018406) (modules . ((lib "readline/rktrl.rkt") (lib "readline/main.rkt") (lib "readline/pread.rkt") (lib "readline/rep.rkt") (lib "readline/rep-start.rkt") (lib "readline/readline.rkt"))) (name . "readline-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "c988a929c6be9dcece91f06e146cad58396a6ca4") (source . "git://github.com/racket/readline/?path=readline-lib") (source_url . "git://github.com/racket/readline/?path=readline-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("realm" . #hash((author . "matthias@racket-lang.org") (authors . ("matthias@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "realm") (conflicts . ()) (dependencies . ("base" "htdp-lib" "rackunit-lib")) (description . "Sample code for _Realm of Racket_") (implies . ()) (last-checked . 1632904508) (last-edit . 1417659583) (last-updated . 1608762489) (modules . ((lib "realm/chapter6/source.rkt") (lib "realm/chapter14/client.rkt") (lib "realm/chapter5/source.rkt") (lib "realm/chapter13/server.rkt") (lib "realm/chapter10/source.rkt") (lib "realm/chapter2/source.rkt") (lib "realm/chapter12/source.rkt") (lib "realm/chapter14/server.rkt") (lib "realm/chapter13/shared.rkt") (lib "realm/chapter5/ufo-source.rkt") (lib "realm/chapter5/new-ufo-source.rkt") (lib "realm/chapter14/shared.rkt") (lib "realm/chapter8/source.rkt") (lib "realm/chapter14/run.rkt") (lib "realm/chapter13/client.rkt") (lib "realm/chapter13/run.rkt"))) (name . "realm") (ring . 0) (search-terms . #hasheq((author:matthias@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "cb64e0091837a8a57b1a506e54670103d38fd13b") (source . "git://github.com/racket/realm") (source_url . "http://github.com/racket/realm/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("rebellion" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rebellion" "doc/rebellion@rebellion/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rebellion.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rebellion.txt"))) (checksum . "ca733d034e90234c1aba599251aa238fed2fffa9") (checksum-error . #f) (collection . "rebellion") (conflicts . ()) (date-added . 1552643878) (dependencies . ("base" "net-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A collection of infrastructure libraries") (implies . ()) (last-checked . 1632904508) (last-edit . 1552935874) (last-updated . 1631687683) (modules . ((lib "rebellion/streaming/reducer/private/base-test.rkt") (lib "rebellion/collection/private/sorted-subset.rkt") (lib "rebellion/collection/association-list.rkt") (lib "rebellion/media/application/octet-stream.rkt") (lib "rebellion/base/pair.scrbl") (lib "rebellion/type/record.rkt") (lib "rebellion/streaming/transducer/private/enumerating-test.rkt") (lib "rebellion/collection/private/mutable-sorted-set.rkt") (lib "rebellion/type/tuple/binding-test.rkt") (lib "rebellion/collection/entry.scrbl") (lib "rebellion/collection/list.scrbl") (lib "rebellion/private/scribble-index-attribute.rkt") (lib "rebellion/concurrency/lock.rkt") (lib "rebellion/point.scrbl") (lib "rebellion/binary/byte.rkt") (lib "rebellion/type/enum/private/definition-macro.rkt") (lib "rebellion/collection/sorted-set.scrbl") (lib "rebellion/private/static-name.rkt") (lib "rebellion/collection/entry.rkt") (lib "rebellion/streaming/transducer/private/sorting-test.rkt") (lib "rebellion/equal+hash.scrbl") (lib "rebellion/streaming/transducer/private/taking-local-maxima.rkt") (lib "rebellion/type/singleton/private/definition-macro.rkt") (lib "rebellion/base/option.rkt") (lib "rebellion/private/subsequence.rkt") (lib "rebellion/collection/vector/builder.rkt") (lib "rebellion/collection/multiset.rkt") (lib "rebellion/base/converter.scrbl") (lib "rebellion/collection/set.scrbl") (lib "rebellion/streaming/transducer/private/deduplicating.rkt") (lib "rebellion/collection/range-set.scrbl") (lib "rebellion/streaming/transducer/private/transposing.rkt") (lib "rebellion/binary/immutable-bytes.scrbl") (lib "rebellion/module.scrbl") (lib "rebellion/base/variant.scrbl") (lib "rebellion/base/option.scrbl") (lib "rebellion/type/enum.scrbl") (lib "rebellion/streaming/reducer/private/base.rkt") (lib "rebellion/collection/hash.scrbl") (lib "rebellion/type/object/private/definition-macro.rkt") (lib "rebellion/streaming/transducer/private/taking-duplicates.rkt") (lib "rebellion/type/singleton/binding.rkt") (lib "rebellion/type/wrapper.rkt") (lib "rebellion/streaming/transducer/composition-test.rkt") (lib "rebellion/permutation.scrbl") (lib "rebellion/web-graph.rkt") (lib "rebellion/collection/vector.scrbl") (lib "rebellion/collection/private/sorted-set-builder.rkt") (lib "rebellion/collection.rkt") (lib "rebellion/collection.scrbl") (lib "rebellion/web-graph.scrbl") (lib "rebellion/base/converter.rkt") (lib "rebellion/private/scribble-evaluator-factory.rkt") (lib "rebellion/private/struct-definition-util.rkt") (lib "rebellion/type/enum/base.rkt") (lib "rebellion/collection/table.scrbl") (lib "rebellion/private/sequence-empty.rkt") (lib "rebellion/binary/bitstring.rkt") (lib "rebellion/base/generative-token.rkt") (lib "rebellion/base/immutable-string.rkt") (lib "rebellion/type/singleton/base.rkt") (lib "rebellion/binary/immutable-bytes.rkt") (lib "rebellion/streaming/transducer/composition.rkt") (lib "rebellion/type/record/private/definition-macro.rkt") (lib "rebellion/collection/immutable-vector.rkt") (lib "rebellion/streaming/transducer/private/taking-local-maxima-test.rkt") (lib "rebellion/collection/association-list.scrbl") (lib "rebellion/base/variant.rkt") (lib "rebellion/streaming/transducer/base.rkt") (lib "rebellion/type/record/binding.rkt") (lib "rebellion/base/equivalence-relation.scrbl") (lib "rebellion/type/record/binding-test.rkt") (lib "rebellion/type/record.scrbl") (lib "rebellion/streaming/transducer/private/batching.rkt") (lib "rebellion/concurrency/atomic/fixnum.scrbl") (lib "rebellion/base/generative-token.scrbl") (lib "rebellion/type/struct.rkt") (lib "rebellion/collection/private/persistent-red-black-tree.rkt") (lib "rebellion/collection/hash.rkt") (lib "rebellion/streaming/transducer/private/windowing-test.rkt") (lib "rebellion/type/private/naming.rkt") (lib "rebellion/module/binding.rkt") (lib "rebellion/base/impossible-function.scrbl") (lib "rebellion/collection/list.rkt") (lib "rebellion/collection/multidict.scrbl") (lib "rebellion/module/phase.scrbl") (lib "rebellion/collection/set.rkt") (lib "rebellion/collection/vector.rkt") (lib "rebellion/private/printer-markup.rkt") (lib "rebellion/type/object/binding.rkt") (lib "rebellion/collection/private/mutable-red-black-tree.rkt") (lib "rebellion/streaming/transducer/private/contract.rkt") (lib "rebellion/streaming/reducer/private/zip.rkt") (lib "rebellion/type/struct.scrbl") (lib "rebellion/type/wrapper/binding-test.rkt") (lib "rebellion/streaming/transducer.scrbl") (lib "rebellion/streaming/transducer.rkt") (lib "rebellion/base/comparator.scrbl") (lib "rebellion/type/wrapper/binding.rkt") (lib "rebellion/streaming/transducer/private/taking-duplicates-test.rkt") (lib "rebellion/private/guarded-block.rkt") (lib "rebellion/collection/sorted-set-test.rkt") (lib "rebellion/collection/vector/builder.scrbl") (lib "rebellion/collection/table.rkt") (lib "rebellion/streaming/transducer/private/taking-maxima.rkt") (lib "rebellion/private/contract-projection.rkt") (lib "rebellion/media/application/octet-stream.scrbl") (lib "rebellion/streaming/transducer/private.rkt") (lib "rebellion/equal+hash.rkt") (lib "rebellion/media/text/plain.scrbl") (lib "rebellion/type/record/base.rkt") (lib "rebellion/streaming/transducer/private/reducer-test.rkt") (lib "rebellion/type/singleton.scrbl") (lib "rebellion/web-link.scrbl") (lib "rebellion/streaming.scrbl") (lib "rebellion/binary/bitstring.scrbl") (lib "rebellion/streaming/transducer/private/sorting.rkt") (lib "rebellion/collection/range-set.rkt") (lib "rebellion/binary.scrbl") (lib "rebellion/type/wrapper/private/definition-macro.rkt") (lib "rebellion/type/record/descriptor.rkt") (lib "rebellion/private/total-match.rkt") (lib "rebellion/private/scribble-cross-document-tech.rkt") (lib "rebellion/collection/multidict.rkt") (lib "rebellion/base/result.scrbl") (lib "rebellion/streaming/transducer/private/transposing-test.rkt") (lib "rebellion/type/enum/descriptor.rkt") (lib "rebellion/other.scrbl") (lib "rebellion/type/enum/binding-test.rkt") (lib "rebellion/private/impersonation.rkt") (lib "rebellion/base/comparator.rkt") (lib "rebellion/base/impossible-function.rkt") (lib "rebellion/collection/record.scrbl") (lib "rebellion/concurrency/atomic/boolean.rkt") (lib "rebellion/custom-write.scrbl") (lib "rebellion/collection/private/unmodifiable-sorted-set.rkt") (lib "rebellion/type.scrbl") (lib "rebellion/main.rkt") (lib "rebellion/private/cut.rkt") (lib "rebellion/media/text/plain.rkt") (lib "rebellion/base/equivalence-relation.rkt") (lib "rebellion/streaming/reducer/private/zip-test.rkt") (lib "rebellion/binary/bit.rkt") (lib "rebellion/point.rkt") (lib "rebellion/base/range.scrbl") (lib "rebellion/module/phase.rkt") (lib "rebellion/streaming/transducer/private/windowing.rkt") (lib "rebellion/base/range.rkt") (lib "rebellion/type/enum.rkt") (lib "rebellion/collection/sorted-set.rkt") (lib "rebellion/type/object/base.rkt") (lib "rebellion/streaming/transducer/private/taking-maxima-test.rkt") (lib "rebellion/type/wrapper/descriptor.rkt") (lib "rebellion/media.scrbl") (lib "rebellion/type/enum/binding.rkt") (lib "rebellion/streaming/transducer/private/deduplicating-test.rkt") (lib "rebellion/filter.rkt") (lib "rebellion/streaming/transducer/private/contract-test.rkt") (lib "rebellion/custom-write.rkt") (lib "rebellion/base/option/private/guard.rkt") (lib "rebellion/binary/bit.scrbl") (lib "rebellion/type/wrapper/base.rkt") (lib "rebellion/collection/keyset/private/reducer.rkt") (lib "rebellion/type/type-descriptor-printing-test.rkt") (lib "rebellion/streaming/transducer/testing.rkt") (lib "rebellion/permutation.rkt") (lib "rebellion/streaming/transducer/private/batching-test.rkt") (lib "rebellion/type/tuple/binding.rkt") (lib "rebellion/type/tuple.scrbl") (lib "rebellion/streaming/transducer/private/enumerating.rkt") (lib "rebellion/collection/keyset.scrbl") (lib "rebellion/type/singleton/descriptor.rkt") (lib "rebellion/type/object/descriptor.rkt") (lib "rebellion/private/strict-cond.rkt") (lib "rebellion/type/object.rkt") (lib "rebellion/base/symbol.scrbl") (lib "rebellion/collection/private/reversed-sorted-set.rkt") (lib "rebellion/type/tuple/base.rkt") (lib "rebellion/module/binding.scrbl") (lib "rebellion/collection/record.rkt") (lib "rebellion/collection/multiset.scrbl") (lib "rebellion/concurrency/atomic/boolean.scrbl") (lib "rebellion/streaming/reducer.scrbl") (lib "rebellion/concurrency/atomic/fixnum.rkt") (lib "rebellion/base/immutable-string.scrbl") (lib "rebellion/private/filter.rkt") (lib "rebellion/collection/private/synchronized-sorted-set.rkt") (lib "rebellion/collection/immutable-vector.scrbl") (lib "rebellion/collection/private/persistent-sorted-set.rkt") (lib "rebellion/type/object.scrbl") (lib "rebellion/type/singleton/binding-test.rkt") (lib "rebellion/type/object/binding-test.rkt") (lib "rebellion/base/symbol.rkt") (lib "rebellion/media.rkt") (lib "rebellion/type/singleton.rkt") (lib "rebellion/collection/keyset.rkt") (lib "rebellion/web-link.rkt") (lib "rebellion/equal+hash/struct.rkt") (lib "rebellion/streaming/transducer/private/impersonation-test.rkt") (lib "rebellion/streaming/transducer/private/reducer.rkt") (lib "rebellion/type/wrapper.scrbl") (lib "rebellion/streaming/reducer.rkt") (lib "rebellion/collection/keyset/low-dependency.rkt") (lib "rebellion/base/pair.rkt") (lib "rebellion/binary/byte.scrbl") (lib "rebellion/type/tuple.rkt") (lib "rebellion/collection/private/vector-binary-search.rkt") (lib "rebellion/collection/choosing-collections.scrbl") (lib "rebellion/collection/private/regular-immutable-sorted-set.rkt") (lib "rebellion/collection/private/sorted-set-interface.rkt") (lib "rebellion/base.scrbl") (lib "rebellion/type/tuple/private/definition-macro.rkt") (lib "rebellion/main.scrbl") (lib "rebellion/type/tuple/descriptor.rkt") (lib "rebellion/concurrency/lock.scrbl") (lib "rebellion/concurrency.scrbl") (lib "rebellion/base/result.rkt"))) (name . "rebellion") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (data . #t) (experimental . #t) (ring:1 . #t) (tabular . #t) (utility . #t))) (source . "https://github.com/jackfirth/rebellion.git") (tags . ("data" "experimental" "tabular" "utility")) (versions . #hash((default . #hasheq((checksum . "ca733d034e90234c1aba599251aa238fed2fffa9") (source . "https://github.com/jackfirth/rebellion.git") (source_url . "https://github.com/jackfirth/rebellion.git"))))))) ("recaptcha" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "reCAPTCHA" "doc/reCAPTCHA@recaptcha/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/recaptcha.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/recaptcha.txt"))) (checksum . "95cd84588b93128a6becb005e885bcc3fb16d648") (checksum-error . #f) (collection . "recaptcha") (conflicts . ()) (dependencies . (("base" #:version "6.1") "web-server-lib" "scribble-lib" "racket-doc" "web-server-doc")) (description . "Utilities for using reCAPTCHA with the web-server/formlets API") (implies . ()) (last-checked . 1632904508) (last-edit . 1491366140) (last-updated . 1622183193) (modules . ((lib "recaptcha/main.rkt") (lib "recaptcha/keys.rkt") (lib "recaptcha/scribblings/recaptcha.scrbl"))) (name . "recaptcha") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (google . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/LiberalArtist/recaptcha.git") (tags . ("google" "net" "web")) (versions . #hash((default . #hasheq((checksum . "95cd84588b93128a6becb005e885bcc3fb16d648") (source . "https://github.com/LiberalArtist/recaptcha.git") (source_url . "https://github.com/LiberalArtist/recaptcha.git"))))))) ("reconstruct-template" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "reconstruct-template-list-ctx" "doc/reconstruct-template-list-ctx@reconstruct-template/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/reconstruct-template.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/reconstruct-template.txt"))) (checksum . "e3502153aeb64cbcf5809c7e89178eca54c76e34") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1594046849) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "`~list/ctx` pattern and `?list/ctx` template for reconstructing syntax objects for core-form languages") (implies . ()) (last-checked . 1632904509) (last-edit . 1594046849) (last-updated . 1571862506) (modules . ((lib "reconstruct-template/scribblings/reconstruct-template-list-ctx.scrbl") (lib "reconstruct-template/list-ctx.rkt") (lib "reconstruct-template/util/stx-e-restore.rkt") (lib "reconstruct-template/util/stx-equal.rkt"))) (name . "reconstruct-template") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (experimental . #t) (ring:1 . #t) (syntax . #t) (syntax-parse . #t))) (source . "https://github.com/AlexKnauth/reconstruct-template.git#main") (tags . ("experimental" "syntax" "syntax-parse")) (versions . #hash((default . #hasheq((checksum . "e3502153aeb64cbcf5809c7e89178eca54c76e34") (source . "https://github.com/AlexKnauth/reconstruct-template.git#main") (source_url . "https://github.com/AlexKnauth/reconstruct-template.git#main"))))))) ("redex" . #hash((author . "robby@racket-lang.org bfetscher@racket-lang.org") (authors . ("robby@racket-lang.org" "bfetscher@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("redex-doc" "redex-examples" "redex-lib" "redex-gui-lib")) (description . "PLT Redex libraries for practical semantics engineering") (implies . ("redex-doc" "redex-examples" "redex-lib" "redex-gui-lib")) (last-checked . 1632904509) (last-edit . 1417659583) (last-updated . 1630809253) (modules . ()) (name . "redex") (ring . 0) (search-terms . #hasheq((author:bfetscher@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "784687a1e078a556acbe0c9de52af9f557737268") (source . "git://github.com/racket/redex/?path=redex") (source_url . "git://github.com/racket/redex/?path=redex"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("redex-aam-tutorial" . #hasheq((author . "dvanhorn@racket-lang.org") (authors . ("dvanhorn@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/redex-aam-tutorial.txt") (docs . (("main" "tutorial" "doc/tutorial@redex-aam-tutorial/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redex-aam-tutorial.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redex-aam-tutorial.txt"))) (checksum . "45484ffc154a8d9a80df10034b931e330e7aef85") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "redex-lib" "scheme-lib" "scribble-lib" "redex-gui-lib" "sandbox-lib")) (description . "A brief introduction to the Redex  and Abstracting Abstract Machines.") (implies . ()) (last-checked . 1632904509) (last-edit . 1511547178) (last-updated . 1621815123) (modules . ((lib "redex-aam-tutorial/ex.rkt") (lib "redex-aam-tutorial/subst.rkt") (lib "redex-aam-tutorial/bib.rkt") (lib "redex-aam-tutorial/tutorial.scrbl") (lib "redex-aam-tutorial/counter.rkt") (lib "redex-aam-tutorial/shared.rkt") (lib "redex-aam-tutorial/tutorial.rkt"))) (name . "redex-aam-tutorial") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:dvanhorn@racket-lang.org . #t) (redex . #t) (ring:1 . #t))) (source . "https://github.com/dvanhorn/redex-aam-tutorial.git") (tags . ("redex")) (versions . #hash((default . #hasheq((checksum . "45484ffc154a8d9a80df10034b931e330e7aef85") (source . "https://github.com/dvanhorn/redex-aam-tutorial.git") (source_url . "https://github.com/dvanhorn/redex-aam-tutorial.git"))))))) ("redex-abbrevs" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redex-abbrevs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redex-abbrevs.txt"))) (checksum . "3205f90c07e5614ad90cea59eb59b7bc883167df") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1557092402) (dependencies . ("redex-abbrevs-lib" "redex-abbrevs-doc")) (description . "Tools for PLT Redex") (implies . ("redex-abbrevs-lib" "redex-abbrevs-doc")) (last-checked . 1632904510) (last-edit . 1557092402) (last-updated . 1582774472) (modules . ()) (name . "redex-abbrevs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:types@ccs.neu.edu . #t) (macro . #t) (redex . #t) (ring:1 . #t) (testing . #t))) (source . "https://github.com/bennn/redex-abbrevs.git?path=redex-abbrevs") (tags . ("macro" "redex" "testing")) (versions . #hash((default . #hasheq((checksum . "3205f90c07e5614ad90cea59eb59b7bc883167df") (source . "https://github.com/bennn/redex-abbrevs.git?path=redex-abbrevs") (source_url . "https://github.com/bennn/redex-abbrevs.git?path=redex-abbrevs"))))))) ("redex-abbrevs-doc" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "redex-abbrevs" "doc/redex-abbrevs@redex-abbrevs-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redex-abbrevs-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redex-abbrevs-doc.txt"))) (checksum . "3205f90c07e5614ad90cea59eb59b7bc883167df") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1557092551) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "rackunit-doc" "redex-doc" "redex-lib" "redex-abbrevs-lib")) (description . "documentation for redex-abbrevs") (implies . ()) (last-checked . 1632904510) (last-edit . 1557092551) (last-updated . 1582774472) (modules . ((lib "redex-abbrevs/scribblings/redex-abbrevs.scrbl"))) (name . "redex-abbrevs-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t))) (source . "https://github.com/bennn/redex-abbrevs.git?path=redex-abbrevs-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "3205f90c07e5614ad90cea59eb59b7bc883167df") (source . "https://github.com/bennn/redex-abbrevs.git?path=redex-abbrevs-doc") (source_url . "https://github.com/bennn/redex-abbrevs.git?path=redex-abbrevs-doc"))))))) ("redex-abbrevs-lib" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redex-abbrevs-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redex-abbrevs-lib.txt"))) (checksum . "3205f90c07e5614ad90cea59eb59b7bc883167df") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1557092488) (dependencies . ("redex-lib" "base" "rackunit-lib")) (description . "Implementation of redex-abbrevs") (implies . ()) (last-checked . 1632904510) (last-edit . 1557092488) (last-updated . 1582774473) (modules . ((lib "redex-abbrevs/private/redex-abbrevs.rkt") (lib "redex-abbrevs/main.rkt") (lib "redex-abbrevs/unstable.rkt"))) (name . "redex-abbrevs-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t))) (source . "https://github.com/bennn/redex-abbrevs.git?path=redex-abbrevs-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "3205f90c07e5614ad90cea59eb59b7bc883167df") (source . "https://github.com/bennn/redex-abbrevs.git?path=redex-abbrevs-lib") (source_url . "https://github.com/bennn/redex-abbrevs.git?path=redex-abbrevs-lib"))))))) ("redex-benchmark" . #hash((author . "robby@racket-lang.org bfetscher@racket-lang.org") (authors . ("robby@racket-lang.org" "bfetscher@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compiler-lib" "rackunit-lib" "redex-lib" "redex-examples" "math-lib" "plot-lib")) (description . "PLT Redex Benchmark") (implies . ()) (last-checked . 1632904511) (last-edit . 1417659583) (last-updated . 1630809257) (modules . ((lib "redex/benchmark/models/stlc+lists/stlc-8.rkt") (lib "redex/benchmark/models/rvm/generators.rkt") (lib "redex/benchmark/private/rw-defs.rkt") (lib "redex/benchmark/models/poly-stlc/typed-info.rkt") (lib "redex/benchmark/models/stlc+lists/stlc-2.rkt") (lib "redex/benchmark/models/rbtrees/rbtrees-info.rkt") (lib "redex/benchmark/models/stlc+lists/stlc-7.rkt") (lib "redex/benchmark/models/rbtrees/rbtrees-3.rkt") (lib "redex/benchmark/models/stlc-subst/stlc-sub-3.rkt") (lib "redex/benchmark/models/rvm/rvm-15.rkt") (lib "redex/benchmark/models/stlc+lists/stlc-with-binding-6.rkt") (lib "redex/benchmark/models/stlc+lists/stlc-1.rkt") (lib "redex/benchmark/models/poly-stlc/poly-stlc-1.rkt") (lib "redex/benchmark/models/stlc+lists/util.rkt") (lib "redex/benchmark/models/stlc+lists/stlc-4.rkt") (lib "redex/benchmark/models/poly-stlc/poly-stlc-info.rkt") (lib "redex/benchmark/models/poly-stlc/util.rkt") (lib "redex/benchmark/models/rvm/rvm-14.rkt") (lib "redex/benchmark/models/list-machine/list-machine-1.rkt") (lib "redex/benchmark/models/delim-cont/delim-cont-info.rkt") (lib "redex/benchmark/models/stlc-subst/stlc-sub-6.rkt") (lib "redex/benchmark/models/let-poly/let-poly-6.rkt") (lib "redex/benchmark/models/let-poly/let-poly-2.rkt") (lib "redex/benchmark/models/list-machine/typed-info.rkt") (lib "redex/benchmark/models/delim-cont/delim-cont.rkt") (lib "redex/benchmark/models/delim-cont/typed-info.rkt") (lib "redex/benchmark/private/plot-lines.rkt") (lib "redex/benchmark/models/stlc-subst/stlc-sub-1.rkt") (lib "redex/benchmark/models/let-poly/let-poly-7.rkt") (lib "redex/benchmark/models/stlc+lists/typed-info.rkt") (lib "redex/benchmark/models/stlc+lists/stlc-with-binding-3.rkt") (lib "redex/benchmark/models/stlc+lists/stlc-with-binding-4.rkt") (lib "redex/benchmark/models/stlc-subst/util.rkt") (lib "redex/benchmark/models/rbtrees/typed-info.rkt") (lib "redex/benchmark/models/stlc-subst/stlc-sub-4.rkt") (lib "redex/benchmark/models/stlc-subst/typed-info.rkt") (lib "redex/benchmark/models/list-machine/generators.rkt") (lib "redex/benchmark/models/rbtrees/rbtrees-2.rkt") (lib "redex/benchmark/models/poly-stlc/poly-stlc-9.rkt") (lib "redex/benchmark/models/poly-stlc/poly-stlc-4.rkt") (lib "redex/benchmark/private/gen-run.rkt") (lib "redex/benchmark/run-generator.rkt") (lib "redex/benchmark/models/stlc+lists/stlc-with-binding-5.rkt") (lib "redex/benchmark/models/let-poly/let-poly-info.rkt") (lib "redex/benchmark/models/let-poly/typed-info.rkt") (lib "redex/benchmark/models/stlc+lists/stlc-with-binding-7.rkt") (lib "redex/benchmark/models/list-machine/list-machine-3.rkt") (lib "redex/benchmark/models/stlc-subst/stlc-sub-8.rkt") (lib "redex/benchmark/models/rvm/rvm-4.rkt") (lib "redex/benchmark/models/stlc-subst/stlc-sub-info.rkt") (lib "redex/benchmark/models/rbtrees/rbtrees-1.rkt") (lib "redex/benchmark/models/stlc-subst/stlc-sub-5.rkt") (lib "redex/benchmark/models/stlc+lists/stlc-with-binding-1.rkt") (lib "redex/benchmark/private/logging.rkt") (lib "redex/benchmark/models/rvm/verif-jdg.rkt") (lib "redex/benchmark/models/all-info.rkt") (lib "redex/benchmark/run-benchmark.rkt") (lib "redex/benchmark/models/rvm/rvm-3.rkt") (lib "redex/benchmark/models/rvm/typed-info.rkt") (lib "redex/benchmark/models/stlc+lists/stlc-with-binding-8.rkt") (lib "redex/benchmark/models/rvm/jdg-grammar.rkt") (lib "redex/benchmark/models/rvm/rvm-6.rkt") (lib "redex/benchmark/models/stlc-subst/generators.rkt") (lib "redex/benchmark/models/let-poly/let-poly-5.rkt") (lib "redex/benchmark/models/stlc-subst/stlc-sub-9.rkt") (lib "redex/benchmark/models/util/info-util.rkt") (lib "redex/benchmark/models/list-machine/list-machine-2.rkt") (lib "redex/benchmark/private/rewrite.rkt") (lib "redex/benchmark/models/poly-stlc/generators.rkt") (lib "redex/benchmark/models/stlc+lists/stlc-9.rkt") (lib "redex/benchmark/models/delim-cont/delim-cont-3.rkt") (lib "redex/benchmark/models/poly-stlc/poly-stlc-5.rkt") (lib "redex/benchmark/models/stlc-subst/stlc-sub-7.rkt") (lib "redex/benchmark/models/rbtrees/util.rkt") (lib "redex/benchmark/models/stlc-subst/stlc-sub-2.rkt") (lib "redex/benchmark/models/delim-cont/test.rkt") (lib "redex/benchmark/models/delim-cont/util.rkt") (lib "redex/benchmark/models/poly-stlc/poly-stlc-8.rkt") (lib "redex/benchmark/models/stlc+lists/stlc-with-binding-9.rkt") (lib "redex/benchmark/models/let-poly/let-poly-3.rkt") (lib "redex/benchmark/models/let-poly/let-poly-1.rkt") (lib "redex/benchmark/models/stlc+lists/stlc-with-binding-2.rkt") (lib "redex/benchmark/models/stlc+lists/stlc-info.rkt") (lib "redex/benchmark/models/delim-cont/delim-cont-2.rkt") (lib "redex/benchmark/models/let-poly/generators.rkt") (lib "redex/benchmark/private/graph-data.rkt") (lib "redex/benchmark/models/stlc+lists/stlc-3.rkt") (lib "redex/benchmark/models/let-poly/let-poly-4.rkt") (lib "redex/benchmark/models/delim-cont/delim-cont-1.rkt") (lib "redex/benchmark/models/delim-cont/generators.rkt") (lib "redex/benchmark/models/rvm/rvm-info.rkt") (lib "redex/benchmark/models/list-machine/ls-typed-gen.rkt") (lib "redex/benchmark/models/list-machine/list-machine-info.rkt") (lib "redex/benchmark/models/poly-stlc/poly-stlc-3.rkt") (lib "redex/benchmark/models/list-machine/util.rkt") (lib "redex/benchmark/models/rvm/rvm-5.rkt") (lib "redex/benchmark/models/stlc+lists/stlc-6.rkt") (lib "redex/benchmark/models/stlc+lists/stlc-5.rkt") (lib "redex/benchmark/models/poly-stlc/poly-stlc-6.rkt") (lib "redex/benchmark/models/poly-stlc/poly-stlc-2.rkt") (lib "redex/benchmark/models/rvm/rvm-2.rkt") (lib "redex/benchmark/models/poly-stlc/poly-stlc-7.rkt") (lib "redex/benchmark/models/rbtrees/generators.rkt") (lib "redex/benchmark/models/let-poly/util.rkt") (lib "redex/benchmark/models/type-all-info.rkt") (lib "redex/benchmark/models/rvm/util.rkt") (lib "redex/benchmark.rkt") (lib "redex/benchmark/models/stlc+lists/generators.rkt"))) (name . "redex-benchmark") (ring . 0) (search-terms . #hasheq((author:bfetscher@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "784687a1e078a556acbe0c9de52af9f557737268") (source . "git://github.com/racket/redex/?path=redex-benchmark") (source_url . "git://github.com/racket/redex/?path=redex-benchmark"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("redex-chk" . #hasheq((author . "sgtamk@gmail.com") (authors . ("sgtamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redex-chk.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redex-chk.txt"))) (checksum . "b66f415966434e689842cc3cc60f8a48836d881b") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("redex-lib" "base" "rackunit-lib")) (description . "rackunit/chk style checks for redex ('term' quotes automatically)") (implies . ()) (last-checked . 1632904511) (last-edit . 1476382419) (last-updated . 1502816388) (modules . ((lib "redex-chk/main.rkt"))) (name . "redex-chk") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:sgtamk@gmail.com . #t) (redex . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/pnwamk/redex-chk#master") (tags . ("redex" "testing")) (versions . #hash((default . #hasheq((checksum . "b66f415966434e689842cc3cc60f8a48836d881b") (source . "git://github.com/pnwamk/redex-chk#master") (source_url . "http://github.com/pnwamk/redex-chk/tree/master#master"))))))) ("redex-doc" . #hash((author . "robby@racket-lang.org bfetscher@racket-lang.org") (authors . ("robby@racket-lang.org" "bfetscher@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "redex" "doc/redex@redex-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "draw-doc" "gui-doc" "htdp-doc" "pict-doc" "slideshow-doc" "at-exp-lib" "data-doc" "data-enumerate-lib" ("scribble-lib" #:version "1.16") "gui-lib" "htdp-lib" "pict-lib" "redex-gui-lib" "redex-benchmark" "rackunit-lib" "sandbox-lib")) (description . "documentation part of redex") (implies . ()) (last-checked . 1632904512) (last-edit . 1417659583) (last-updated . 1630809260) (modules . ((lib "redex/scribblings/long-tut/code/wed-mor.rkt") (lib "redex/scribblings/benchmark.scrbl") (lib "redex/scribblings/long-tut/wed-aft.scrbl") (lib "redex/scribblings/tut-util.rkt") (lib "redex/scribblings/ref/terms.scrbl") (lib "redex/scribblings/ref/typesetting-and-macros.scrbl") (lib "redex/scribblings/long-tut/lab-tue-mor.scrbl") (lib "redex/scribblings/ref.scrbl") (lib "redex/scribblings/ref/common.rkt") (lib "redex/scribblings/long-tut/code/delivered-mon-aft.rkt") (lib "redex/scribblings/long-tut/exercise/counter.rkt") (lib "redex/scribblings/long-tut/tue-aft.scrbl") (lib "redex/scribblings/extended-exercises/extended-exercises.scrbl") (lib "redex/scribblings/extended-exercises/obj.rkt") (lib "redex/scribblings/ref/dynamic-typesetting-and-macros.scrbl") (lib "redex/scribblings/ref/gui.scrbl") (lib "redex/scribblings/long-tut/tue-mor.scrbl") (lib "redex/scribblings/long-tut/lab-wed-aft.scrbl") (lib "redex/scribblings/long-tut/lab-tue-aft.scrbl") (lib "redex/scribblings/long-tut/lab-wed-mor.scrbl") (lib "redex/scribblings/long-tut/code/lab-tue-mor.rkt") (lib "redex/scribblings/long-tut/code/delivered-wed-mor.rkt") (lib "redex/scribblings/cite.rkt") (lib "redex/scribblings/long-tut/code/delivered-tue-aft.rkt") (lib "redex/scribblings/tut.scrbl") (lib "redex/redex.scrbl") (lib "redex/scribblings/long-tut/mon-aft.scrbl") (lib "redex/scribblings/ref/testing.scrbl") (lib "redex/scribblings/long-tut/code/mon-aft.rkt") (lib "redex/scribblings/extended-exercises/mc.rkt") (lib "redex/scribblings/extended-exercises/channels.rkt") (lib "redex/scribblings/ref/other-relations.scrbl") (lib "redex/scribblings/long-tut/code/delivered-wed-mor-exn.rkt") (lib "redex/scribblings/ref/languages.scrbl") (lib "redex/scribblings/long-tut/code/delivered-tue-mor.rkt") (lib "redex/scribblings/long-tut/code/extend-lookup.rkt") (lib "redex/scribblings/long-tut/code/lab-tue-aft.rkt") (lib "redex/scribblings/extended-exercises/common.rkt") (lib "redex/scribblings/extended-exercises/hanoi.rkt") (lib "redex/scribblings/long-tut/code/common.rkt") (lib "redex/scribblings/mod-fx.rkt") (lib "redex/scribblings/extended-exercises/fsm.rkt") (lib "redex/scribblings/long-tut/mon-mor.scrbl") (lib "redex/scribblings/ref/patterns.scrbl") (lib "redex/scribblings/long-tut/thu.scrbl") (lib "redex/scribblings/long-tut/code/tue-aft.rkt") (lib "redex/scribblings/long-tut/code/delivered-wed-aft.rkt") (lib "redex/scribblings/benchmark-models.scrbl") (lib "redex/scribblings/long-tut/lab-mon-aft.scrbl") (lib "redex/scribblings/long-tut/code/lab-mon-aft.rkt") (lib "redex/scribblings/long-tut/code/lab-wed-mor.rkt") (lib "redex/scribblings/long-tut/code/close.rkt") (lib "redex/scribblings/long-tut/wed-mor.scrbl") (lib "redex/scribblings/long-tut/code/wed-aft.rkt") (lib "redex/scribblings/extended-exercises/bit-strings.rkt") (lib "redex/scribblings/long-tut/shared.rkt") (lib "redex/scribblings/extended-exercises/tc.rkt") (lib "redex/scribblings/long-tut/exercise/ex.rkt") (lib "redex/scribblings/long-tut/code/tc-common.rkt") (lib "redex/scribblings/extended-exercises/gc.rkt") (lib "redex/scribblings/ref/reduction-relations.scrbl") (lib "redex/scribblings/extended-exercises/contract.rkt") (lib "redex/scribblings/ref/typesetting.scrbl") (lib "redex/scribblings/bug-info.rkt") (lib "redex/scribblings/long-tut/long-tut.scrbl") (lib "redex/scribblings/long-tut/code/tue-mor.rkt"))) (name . "redex-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:bfetscher@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "784687a1e078a556acbe0c9de52af9f557737268") (source . "git://github.com/racket/redex/?path=redex-doc") (source_url . "git://github.com/racket/redex/?path=redex-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("redex-etc" . #hasheq((author . "camoy@ccs.neu.edu") (authors . ("camoy@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "redex-etc" "doc/redex-etc@redex-etc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redex-etc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redex-etc.txt"))) (checksum . "c4583466d174ccbcb1adab3c3ed85342d7d67d9c") (checksum-error . #f) (collection . "redex-etc") (conflicts . ()) (date-added . 1590732437) (dependencies . ("latex-utils" "redex-pict-lib" "unstable-redex" "base" "redex-lib" "private-in" "draw-lib" "pict-lib" "redex-doc" "chk-lib" "racket-doc" "scribble-lib" "pict-doc")) (description . "Miscellanea for Redex.") (implies . ()) (last-checked . 1632904512) (last-edit . 1590732437) (last-updated . 1620707292) (modules . ((lib "redex-etc/language/private/parameter.rkt") (lib "redex-etc/scribblings/redex-etc.scrbl") (lib "redex-etc/main.rkt") (lib "redex-etc/test/common.rkt") (lib "redex-etc/language/main.rkt") (lib "redex-etc/private/typography.rkt") (lib "redex-etc/language/lang/reader.rkt") (lib "redex-etc/language/private/render.rkt") (lib "redex-etc/private/macros.rkt") (lib "redex-etc/private/metas.rkt") (lib "redex-etc/language/private/plstx.rkt") (lib "redex-etc/private/functions.rkt") (lib "redex-etc/language/private/util.rkt") (lib "redex-etc/private/rule-style.rkt") (lib "redex-etc/private/language.rkt"))) (name . "redex-etc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:camoy@ccs.neu.edu . #t) (redex . #t) (ring:1 . #t))) (source . "https://github.com/camoy/redex-etc.git") (tags . ("redex")) (versions . #hash((default . #hasheq((checksum . "c4583466d174ccbcb1adab3c3ed85342d7d67d9c") (source . "https://github.com/camoy/redex-etc.git") (source_url . "https://github.com/camoy/redex-etc.git"))))))) ("redex-examples" . #hash((author . "robby@racket-lang.org bfetscher@racket-lang.org") (authors . ("robby@racket-lang.org" "bfetscher@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compiler-lib" "rackunit-lib" "redex-gui-lib" "slideshow-lib" "math-lib" "plot-lib")) (description . "PLT Redex examples") (implies . ()) (last-checked . 1632904512) (last-edit . 1417659583) (last-updated . 1630809262) (modules . ((lib "redex/examples/pi-calculus.rkt") (lib "redex/examples/delim-cont/model-impl.rkt") (lib "redex/examples/let-poly.rkt") (lib "redex/examples/semaphores.rkt") (lib "redex/examples/cont-mark-transform/test-util.rkt") (lib "redex/examples/racket-machine/verification-test.rkt") (lib "redex/examples/racket-machine/reduction.rkt") (lib "redex/examples/define-judgment-form/multi-val.rkt") (lib "redex/examples/omega.rkt") (lib "redex/examples/stlc-tests-lib.rkt") (lib "redex/examples/lazy-with-binding.rkt") (lib "redex/examples/combinators.rkt") (lib "redex/examples/cont-mark-transform/SL-syntax.rkt") (lib "redex/examples/racket-machine/randomized-tests.rkt") (lib "redex/examples/cont-mark-transform/SL-semantics.rkt") (lib "redex/examples/list-machine/p-sample.rkt") (lib "redex/examples/r6rs/test.rkt") (lib "redex/examples/contracts.rkt") (lib "redex/examples/list-machine/list-machine-typing.rkt") (lib "redex/examples/racket-machine/reduction-test.rkt") (lib "redex/examples/racket-machine/verification.rkt") (lib "redex/examples/poly-stlc.rkt") (lib "redex/examples/subject-reduction.rkt") (lib "redex/examples/beginner.rkt") (lib "redex/examples/racket-machine/impl-exec.rkt") (lib "redex/examples/racket-machine/impl-eval.rkt") (lib "redex/examples/stlc+lists+subst.rkt") (lib "redex/examples/r6rs/racket-vs-redex.rkt") (lib "redex/examples/delim-cont/randomized-tests-test.rkt") (lib "redex/examples/cont-mark-transform/randomized-tests.rkt") (lib "redex/examples/r6rs/show-examples.rkt") (lib "redex/examples/racket-machine/model-impl.rkt") (lib "redex/examples/types.rkt") (lib "redex/examples/list-machine/test.rkt") (lib "redex/examples/list-machine/list-machine.rkt") (lib "redex/examples/cont-mark-transform/SL-semantics-test.rkt") (lib "redex/examples/delim-cont/test.rkt") (lib "redex/examples/cont-mark-transform/CMT-test.rkt") (lib "redex/examples/cont-mark-transform/CMT.rkt") (lib "redex/examples/threads.rkt") (lib "redex/examples/cont-mark-transform/TL-semantics-test.rkt") (lib "redex/examples/define-judgment-form/sos.rkt") (lib "redex/examples/define-judgment-form/typing-rules-no-ellipses.rkt") (lib "redex/examples/church.rkt") (lib "redex/examples/list-machine/slides.rkt") (lib "redex/examples/stlc+lists.rkt") (lib "redex/examples/stlc+lists-with-binding.rkt") (lib "redex/examples/cont-mark-transform/all-test.rkt") (lib "redex/examples/racket-machine/randomized-tests-test.rkt") (lib "redex/examples/racket-machine/util.rkt") (lib "redex/examples/subst.rkt") (lib "redex/examples/letrec.rkt") (lib "redex/examples/racket-machine/examples.rkt") (lib "redex/examples/delim-cont/meta.rkt") (lib "redex/examples/cont-mark-transform/TL-syntax.rkt") (lib "redex/examples/letrec-vs-racket.rkt") (lib "redex/examples/cont-mark-transform/TL-semantics.rkt") (lib "redex/examples/rbtrees.rkt") (lib "redex/examples/lazy.rkt") (lib "redex/examples/racket-machine/grammar.rkt") (lib "redex/examples/r6rs/r6rs.rkt") (lib "redex/examples/cont-mark-transform/common.rkt") (lib "redex/examples/delim-cont/grammar.rkt") (lib "redex/examples/delim-cont/reduce.rkt") (lib "redex/examples/arithmetic.rkt") (lib "redex/examples/define-judgment-form/typing-rules.rkt") (lib "redex/examples/delim-cont/randomized-tests.rkt") (lib "redex/examples/stlc.rkt") (lib "redex/examples/r6rs/r6rs-tests.rkt") (lib "redex/examples/cbn-letrec.rkt") (lib "redex/examples/compatible-closure.rkt"))) (name . "redex-examples") (ring . 0) (search-terms . #hasheq((author:bfetscher@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "784687a1e078a556acbe0c9de52af9f557737268") (source . "git://github.com/racket/redex/?path=redex-examples") (source_url . "git://github.com/racket/redex/?path=redex-examples"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("redex-gui-lib" . #hash((author . "robby@racket-lang.org bfetscher@racket-lang.org") (authors . ("robby@racket-lang.org" "bfetscher@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "base" "draw-lib" "gui-lib" "data-lib" "profile-lib" "redex-lib" "redex-pict-lib" "pict-lib" "rackunit-lib")) (description . "implementation (no documentation) part of redex gui") (implies . ("redex-lib" "redex-pict-lib")) (last-checked . 1632904512) (last-edit . 1417659583) (last-updated . 1630809264) (modules . ((lib "redex/private/stepper.rkt") (lib "redex/private/traces.rkt") (lib "redex/private/gen-trace.rkt") (lib "redex/private/size-snip.rkt") (lib "redex/private/show-derivations.rkt") (lib "redex/private/sexp-diffs.rkt") (lib "redex/gui.rkt") (lib "redex/main.rkt"))) (name . "redex-gui-lib") (ring . 0) (search-terms . #hasheq((author:bfetscher@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "784687a1e078a556acbe0c9de52af9f557737268") (source . "git://github.com/racket/redex/?path=redex-gui-lib") (source_url . "git://github.com/racket/redex/?path=redex-gui-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("redex-lib" . #hash((author . "robby@racket-lang.org bfetscher@racket-lang.org") (authors . ("robby@racket-lang.org" "bfetscher@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("data-enumerate-lib" #:version "1.3") "scheme-lib" ("base" #:version "6.2.900.6") "data-lib" "math-lib" "tex-table" "profile-lib" "typed-racket-lib" "testing-util-lib" "2d-lib" "rackunit-lib")) (description . "implementation (no documentation) part of redex") (implies . ()) (last-checked . 1632904513) (last-edit . 1417659583) (last-updated . 1630809266) (modules . ((lib "redex/private/preprocess-pat.rkt") (lib "redex/private/search.rkt") (lib "redex/private/build-nt-property.rkt") (lib "redex/private/defined-checks.rkt") (lib "redex/private/match-a-pattern.rkt") (lib "redex/private/preprocess-lang.rkt") (lib "redex/private/extract-conditions.rkt") (lib "redex/private/struct.rkt") (lib "redex/private/loc-wrapper.rkt") (lib "redex/private/env.rkt") (lib "redex/private/loc-wrapper-rt.rkt") (lib "redex/private/loc-wrapper-ct.rkt") (lib "redex/private/binding-forms-definitions.rkt") (lib "redex/private/keyword-macros.rkt") (lib "redex/private/lang-struct.rkt") (lib "redex/private/trace-layout.rkt") (lib "redex/private/enum.rkt") (lib "redex/private/cycle-check.rkt") (lib "redex/private/rewrite-side-conditions.rkt") (lib "redex/private/underscore-allowed.rkt") (lib "redex/private/jdg-gen.rkt") (lib "redex/private/binding-forms-compiler.rkt") (lib "redex/private/fresh.rkt") (lib "redex/private/reduction-semantics.rkt") (lib "redex/private/ambiguous.rkt") (lib "redex/private/term.rkt") (lib "redex/private/matcher.rkt") (lib "redex/reduction-semantics.rkt") (lib "redex/private/pat-unify.rkt") (lib "redex/private/error.rkt") (lib "redex/private/generate-term.rkt") (lib "redex/private/term-fn.rkt") (lib "redex/private/judgment-form.rkt") (lib "redex/private/modeless-jf.rkt") (lib "redex/private/rg.rkt") (lib "redex/private/red-sem-macro-helpers.rkt") (lib "redex/private/binding-forms.rkt") (lib "redex/tut-subst.rkt"))) (name . "redex-lib") (ring . 0) (search-terms . #hasheq((author:bfetscher@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "784687a1e078a556acbe0c9de52af9f557737268") (source . "git://github.com/racket/redex/?path=redex-lib") (source_url . "git://github.com/racket/redex/?path=redex-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("redex-parameter" . #hasheq((author . "camoy@ccs.neu.edu") (authors . ("camoy@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "redex-parameter" "doc/redex-parameter@redex-parameter/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redex-parameter.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redex-parameter.txt"))) (checksum . "d49cc98f1153ccf256d84045e6d20892275f32db") (checksum-error . #f) (collection . "redex") (conflicts . ()) (date-added . 1578492708) (dependencies . ("base" "redex-lib" "chk-lib" "scribble-lib" "racket-doc" "rackunit-lib" "redex-doc" "sandbox-lib")) (description . " Parameters for extensions in Redex.") (implies . ()) (last-checked . 1632904513) (last-edit . 1597718668) (last-updated . 1620523683) (modules . ((lib "redex/scribblings/redex-parameter.scrbl") (lib "redex/test/parameter-require.rkt") (lib "redex/test/parameter.rkt") (lib "redex/parameter.rkt"))) (name . "redex-parameter") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:camoy@ccs.neu.edu . #t) (redex . #t) (ring:1 . #t))) (source . "https://github.com/camoy/redex-parameter.git") (tags . ("redex")) (versions . #hash((default . #hasheq((checksum . "d49cc98f1153ccf256d84045e6d20892275f32db") (source . "https://github.com/camoy/redex-parameter.git") (source_url . "https://github.com/camoy/redex-parameter.git"))))))) ("redex-pict-lib" . #hash((author . "robby@racket-lang.org bfetscher@racket-lang.org") (authors . ("robby@racket-lang.org" "bfetscher@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "base" "draw-lib" "data-lib" "profile-lib" "redex-lib" "pict-lib" "rackunit-lib")) (description . "implementation (no documentation) part of redex using picts") (implies . ("redex-lib")) (last-checked . 1632904513) (last-edit . 1417659583) (last-updated . 1630809269) (modules . ((lib "redex/private/derivation-pict.rkt") (lib "redex/private/pict.rkt") (lib "redex/private/derivations-layout.rkt") (lib "redex/private/core-layout.rkt") (lib "redex/private/arrow.rkt") (lib "redex/pict.rkt"))) (name . "redex-pict-lib") (ring . 0) (search-terms . #hasheq((author:bfetscher@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "784687a1e078a556acbe0c9de52af9f557737268") (source . "git://github.com/racket/redex/?path=redex-pict-lib") (source_url . "git://github.com/racket/redex/?path=redex-pict-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("redex-test" . #hash((author . "robby@racket-lang.org bfetscher@racket-lang.org") (authors . ("robby@racket-lang.org" "bfetscher@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "at-exp-lib" "compatibility-lib" "drracket" "gui-lib" "pict-lib" "redex-gui-lib" "redex-examples" "data-enumerate-lib" "data-lib" "racket-index" "scheme-lib" "slideshow-lib")) (description . "tests for redex") (implies . ()) (last-checked . 1632904513) (last-edit . 1417659583) (last-updated . 1630809271) (modules . ((lib "redex/tests/binding-forms-test.rkt") (lib "redex/tests/tl-reduction-relation.rkt") (lib "redex/tests/tl-test.rkt") (lib "redex/tests/sewpr/cont/test.rkt") (lib "redex/tests/rg-test.rkt") (lib "redex/tests/sewpr/ck/ck-ex.rkt") (lib "redex/tests/sewpr/iswim/iswim-2.rkt") (lib "redex/tests/sewpr/ck/test.rkt") (lib "redex/tests/sewpr/cont/cont.rkt") (lib "redex/tests/sewpr/underspec/test.rkt") (lib "redex/tests/enum-test.rkt") (lib "redex/tests/tl-language.rkt") (lib "redex/tests/term-test.rkt") (lib "redex/tests/gen-test.rkt") (lib "redex/tests/sewpr/basics/test.rkt") (lib "redex/tests/private/bitmap-test-util.rkt") (lib "redex/tests/sewpr/basics/traces.rkt") (lib "redex/tests/binding-performance-test.rkt") (lib "redex/tests/keyword-macros-test.rkt") (lib "redex/tests/stepper-test.rkt") (lib "redex/tests/tut-subst-test.rkt") (lib "redex/tests/sewpr/typeset/iswim-language-pict.rkt") (lib "redex/tests/sewpr/iswim/traces.rkt") (lib "redex/tests/sewpr/basics/bool-any.rkt") (lib "redex/tests/convert-test.rkt") (lib "redex/tests/sewpr/traces-colors.rkt") (lib "redex/tests/pict-test.rkt") (lib "redex/tests/tl-judgment-form.rkt") (lib "redex/tests/sewpr/extend/test.rkt") (lib "redex/tests/lw-test.rkt") (lib "redex/tests/sewpr/basics/bool-ex.rkt") (lib "redex/tests/ryr-test.rkt") (lib "redex/tests/sewpr/basics/bool-complete.rkt") (lib "redex/tests/sewpr/underspec/oo.rkt") (lib "redex/tests/sewpr/types/types-exn.rkt") (lib "redex/tests/hole-test.rkt") (lib "redex/tests/sewpr/types/1.rkt") (lib "redex/tests/sewpr/underspec/oo-ex.rkt") (lib "redex/tests/run-tests.rkt") (lib "redex/tests/sewpr/types/traces.rkt") (lib "redex/tests/sewpr/typeset/typeset-advanced.rkt") (lib "redex/tests/private/lw-test-util.rkt") (lib "redex/tests/sewpr/space-snip.rkt") (lib "redex/tests/sewpr/ck/iswim-test2.rkt") (lib "redex/tests/sewpr/iswim/iswim-ex.rkt") (lib "redex/tests/err-loc-test.rkt") (lib "redex/tests/sewpr/typeset/typeset-lw.rkt") (lib "redex/tests/sewpr/types/types-exn-ex.rkt") (lib "redex/tests/core-layout-test.rkt") (lib "redex/tests/sewpr/ck/ck.rkt") (lib "redex/tests/sewpr/iswim/iswim.rkt") (lib "redex/tests/sewpr/iswim/test.rkt") (lib "redex/tests/matcher-test.rkt") (lib "redex/tests/sewpr/extend/eiswim-test.rkt") (lib "redex/tests/unify-tests.rkt") (lib "redex/tests/dq-test.rkt") (lib "redex/tests/rewrite-side-condition-test.rkt") (lib "redex/tests/sewpr/underspec/traces.rkt") (lib "redex/tests/sewpr/basics/bool-standard.rkt") (lib "redex/tests/bitmap-test.rkt") (lib "redex/tests/tl-metafunctions.rkt") (lib "redex/tests/sewpr/types/test.rkt") (lib "redex/tests/sewpr/extend/eiswim.rkt") (lib "redex/tests/test-docs-complete.rkt") (lib "redex/tests/sewpr/types/types-ex.rkt") (lib "redex/tests/check-syntax-test.rkt") (lib "redex/tests/color-test.rkt") (lib "redex/tests/tl-relation.rkt") (lib "redex/tests/sewpr/types/types.rkt") (lib "redex/tests/sewpr/typeset/typeset-basic.rkt") (lib "redex/tests/sewpr/cont/traces.rkt") (lib "redex/tests/private/test-util.rkt") (lib "redex/tests/sewpr/extend/traces.rkt") (lib "redex/tests/mf-apply-test.rkt") (lib "redex/tests/sewpr/iswim/test-2.rkt") (lib "redex/tests/sewpr/types/1-ex.rkt") (lib "redex/tests/sewpr/ck/traces.rkt") (lib "redex/tests/sewpr/ck/iswim-test.rkt") (lib "redex/tests/ambiguous-test.rkt"))) (name . "redex-test") (ring . 0) (search-terms . #hasheq((author:bfetscher@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "784687a1e078a556acbe0c9de52af9f557737268") (source . "git://github.com/racket/redex/?path=redex-test") (source_url . "git://github.com/racket/redex/?path=redex-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("redis" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redis.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redis.txt"))) (checksum . "ec69a3ea1c6b5eda35502361bc88d204c38b1120") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "data-lib" "rackunit-lib")) (description . "A redis client for Racket.") (implies . ()) (last-checked . 1632904514) (last-edit . 1380348836) (last-updated . 1502816397) (modules . ((lib "redis/bytes-utils.rkt") (lib "redis/main.rkt") (lib "redis/redis-cmds.rkt") (lib "redis/redis-tests.rkt") (lib "redis/test-utils.rkt") (lib "redis/redis.rkt"))) (name . "redis") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:stchang@racket-lang.org . #t) (db . #t) (redis . #t) (ring:1 . #t))) (source . "github://github.com/stchang/redis/master") (tags . ("db" "redis")) (versions . #hash((default . #hasheq((checksum . "ec69a3ea1c6b5eda35502361bc88d204c38b1120") (source . "github://github.com/stchang/redis/master") (source_url . "http://github.com/stchang/redis/tree/master"))))))) ("redis-doc" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . ("indirect" "conflicts.txt")) (dep-failure-log . #f) (docs . (("extract" "redis" "doc/redis@redis-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redis-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redis-doc.txt"))) (checksum . "43e17ce699112266a0ae42c4e738792cc61d1b3f") (checksum-error . #f) (collection . "redis") (conflicts . ()) (date-added . 1567090542) (dependencies . ("base" "racket-doc" "redis-lib" "scribble-lib")) (description . "Fast, idiomatic bindings for Redis. (docs only)") (implies . ()) (last-checked . 1632904514) (last-edit . 1567173468) (last-updated . 1620059415) (modules . ((lib "redis/scribblings/redis.rkt") (lib "redis/scribblings/redis.scrbl"))) (name . "redis-doc") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (redis . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-redis.git?path=redis-doc") (tags . ("redis")) (versions . #hash((default . #hasheq((checksum . "43e17ce699112266a0ae42c4e738792cc61d1b3f") (source . "https://github.com/Bogdanp/racket-redis.git?path=redis-doc") (source_url . "https://github.com/Bogdanp/racket-redis.git?path=redis-doc"))))))) ("redis-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redis-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redis-lib.txt"))) (checksum . "43e17ce699112266a0ae42c4e738792cc61d1b3f") (checksum-error . #f) (collection . "redis") (conflicts . ("redis")) (date-added . 1567073272) (dependencies . ("base" ("resource-pool-lib" #:version "0.1") "unix-socket-lib")) (description . "Fast, idiomatic bindings for Redis. (implementation only)") (implies . ()) (last-checked . 1632904515) (last-edit . 1567173476) (last-updated . 1620059416) (modules . ((lib "redis/private/protocol.rkt") (lib "redis/private/error.rkt") (lib "redis/main.rkt") (lib "redis/private/script.rkt") (lib "redis/easy.rkt") (lib "redis/private/client.rkt") (lib "redis/private/pool.rkt"))) (name . "redis-lib") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (author:bogdan@defn.io . #t) (redis . #t) (ring:2 . #t))) (source . "https://github.com/Bogdanp/racket-redis.git?path=redis-lib") (tags . ("redis")) (versions . #hash((default . #hasheq((checksum . "43e17ce699112266a0ae42c4e738792cc61d1b3f") (source . "https://github.com/Bogdanp/racket-redis.git?path=redis-lib") (source_url . "https://github.com/Bogdanp/racket-redis.git?path=redis-lib"))))))) ("redis-rkt" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . ("indirect" "conflicts.txt")) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redis-rkt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/redis-rkt.txt"))) (checksum . "43e17ce699112266a0ae42c4e738792cc61d1b3f") (checksum-error . #f) (collection . "redis") (conflicts . ()) (date-added . 1567090600) (dependencies . ("base" "redis-doc" "redis-lib")) (description . "Fast, idiomatic bindings for Redis. (docs & implementation)") (implies . ("redis-doc" "redis-lib")) (last-checked . 1632904515) (last-edit . 1567173487) (last-updated . 1620059417) (modules . ()) (name . "redis-rkt") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (author:bogdan@defn.io . #t) (redis . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-redis.git?path=redis") (tags . ("redis")) (versions . #hash((default . #hasheq((checksum . "43e17ce699112266a0ae42c4e738792cc61d1b3f") (source . "https://github.com/Bogdanp/racket-redis.git?path=redis") (source_url . "https://github.com/Bogdanp/racket-redis.git?path=redis"))))))) ("redis-test" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . ("indirect" "conflicts.txt")) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/redis-test.txt") (test-failure-log . "server/built/test-fail/redis-test.txt") (test-success-log . #f))) (checksum . "43e17ce699112266a0ae42c4e738792cc61d1b3f") (checksum-error . #f) (collection . "tests") (conflicts . ()) (date-added . 1567192331) (dependencies . ("base" "rackunit-lib" "redis-lib")) (description . "Fast, idiomatic bindings for Redis. (tests only)") (implies . ()) (last-checked . 1632904515) (last-edit . 1567192331) (last-updated . 1620059418) (modules . ((lib "tests/redis/protocol.rkt") (lib "tests/redis/pubsub.rkt") (lib "tests/redis/script.rkt") (lib "tests/redis/client.rkt") (lib "tests/redis/easy.rkt") (lib "tests/redis/zset.rkt") (lib "tests/redis/set.rkt") (lib "tests/redis/common.rkt") (lib "tests/redis/bytes.rkt") (lib "tests/redis/url.rkt") (lib "tests/redis/pool.rkt") (lib "tests/redis/hash.rkt"))) (name . "redis-test") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (author:bogdan@defn.io . #t) (redis . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-redis.git?path=redis-test") (tags . ("redis")) (versions . #hash((default . #hasheq((checksum . "43e17ce699112266a0ae42c4e738792cc61d1b3f") (source . "https://github.com/Bogdanp/racket-redis.git?path=redis-test") (source_url . "https://github.com/Bogdanp/racket-redis.git?path=redis-test"))))))) ("reed-solomon" . #hasheq((author . "chenxiao770117@gmail.com") (authors . ("chenxiao770117@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "reed-solomon" "doc/reed-solomon@reed-solomon/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/reed-solomon.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/reed-solomon.txt"))) (checksum . "db00b7536f64b6f31a15819d7ba5f6783a4f9d31") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Reed-Solomon implementation") (implies . ()) (last-checked . 1632904515) (last-edit . 1545374519) (last-updated . 1613120066) (modules . ((lib "reed-solomon/lib/encode/express/input/input.rkt") (lib "reed-solomon/lib/encode/express/error-code/error-code.rkt") (lib "reed-solomon/lib/decode/express/no-error/no-error.rkt") (lib "reed-solomon/tests/decode/syndrome-test.rkt") (lib "reed-solomon/lib/decode/express/forney/forney.rkt") (lib "reed-solomon/lib/encode/express/galois-fields/galois-fields.rkt") (lib "reed-solomon/lib/decode/decode.rkt") (lib "reed-solomon/tests/decode/forney-test.rkt") (lib "reed-solomon/tests/decode/correct-error-test.rkt") (lib "reed-solomon/lib/encode/express/express.rkt") (lib "reed-solomon/lib/decode/correct-error.rkt") (lib "reed-solomon/lib/share/poly.rkt") (lib "reed-solomon/tests/share/euclidean-test.rkt") (lib "reed-solomon/lib/share/euclidean.rkt") (lib "reed-solomon/scribble/reed-solomon.scrbl") (lib "reed-solomon/lib/decode/forney.rkt") (lib "reed-solomon/lib/decode/express/too-many-errors/too-many-errors.rkt") (lib "reed-solomon/tests/encode/generate-poly-test.rkt") (lib "reed-solomon/lib/decode/express/start.rkt") (lib "reed-solomon/lib/decode/express/express.rkt") (lib "reed-solomon/lib/decode/error-locator-poly.rkt") (lib "reed-solomon/lib/decode/express/chien-search/chien-search.rkt") (lib "reed-solomon/lib/encode/generator-poly.rkt") (lib "reed-solomon/lib/encode/express/message-poly/message-poly.rkt") (lib "reed-solomon/lib/encode/express/primitive-poly/primitive-poly.rkt") (lib "reed-solomon/tests/share/poly-test.rkt") (lib "reed-solomon/lib/decode/syndrome.rkt") (lib "reed-solomon/lib/encode/express/generator-poly/generator-poly.rkt") (lib "reed-solomon/lib/decode/express/input/input.rkt") (lib "reed-solomon/tests/encode/encode-test.rkt") (lib "reed-solomon/lib/encode/encode.rkt") (lib "reed-solomon/tests/decode/decode-test.rkt") (lib "reed-solomon/lib/decode/express/finally/finally.rkt") (lib "reed-solomon/lib/share/lib.rkt") (lib "reed-solomon/lib/share/gf.rkt") (lib "reed-solomon/tests/decode/chien-search-test.rkt") (lib "reed-solomon/lib/decode/chien-search.rkt") (lib "reed-solomon/main.rkt") (lib "reed-solomon/lib/decode/express/euclidean-decode/euclidean-decode.rkt") (lib "reed-solomon/example/example.rkt") (lib "reed-solomon/lib/decode/express/syndrome-poly/syndrome-poly.rkt") (lib "reed-solomon/tests/share/gf-field-test.rkt") (lib "reed-solomon/tests/decode/error-locator-poly-test.rkt") (lib "reed-solomon/lib/encode/express/start.rkt"))) (name . "reed-solomon") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:chenxiao770117@gmail.com . #t) (reed-solomon . #t) (ring:1 . #t))) (source . "https://github.com/simmone/racket-reed-solomon.git") (tags . ("reed-solomon")) (versions . #hash((default . #hasheq((checksum . "db00b7536f64b6f31a15819d7ba5f6783a4f9d31") (source . "https://github.com/simmone/racket-reed-solomon.git") (source_url . "https://github.com/simmone/racket-reed-solomon.git"))))))) ("refined-acl2" . #hasheq((author . "cce@racket-lang.org") (authors . ("cce@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/refined-acl2.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "2e344ad7bcbc5b5a758296a8158dcf9a7f3880bd") (checksum-error . #f) (collection . "refined-acl2") (conflicts . ()) (dependencies . ("mischief")) (description . "Refined ACL2: experimental implementation of ACL2-verifiable code with ML modules and Racket macros.") (implies . ()) (last-checked . 1632904516) (last-edit . 1378339910) (last-updated . 1502816397) (modules . ((lib "refined-acl2/examples/ast.rkt") (lib "refined-acl2/tests/suite/surface.rkt") (lib "refined-acl2/model/data.rkt") (lib "refined-acl2/proof/static.rkt") (lib "refined-acl2/prelude/core/atomic.rkt") (lib "refined-acl2/main.rkt") (lib "refined-acl2/examples/id-non-dracula/fresh.rkt") (lib "refined-acl2/base.rkt") (lib "refined-acl2/examples/virtual-machine/soundness.rkt") (lib "refined-acl2/examples/diss.rkt") (lib "refined-acl2/legacy/registry.rkt") (lib "refined-acl2/expansion/names.rkt") (lib "refined-acl2/legacy/type.rkt") (lib "refined-acl2/primitive.rkt") (lib "refined-acl2/proof/dynamic.rkt") (lib "refined-acl2/model/subst.rkt") (lib "refined-acl2/tests/run.rkt") (lib "refined-acl2/legacy/proof.rkt") (lib "refined-acl2/prelude/list-of.rkt") (lib "refined-acl2/examples/sexp.rkt") (lib "refined-acl2/examples/id-non-dracula/original.rkt") (lib "refined-acl2/tests/suite/modular.rkt") (lib "refined-acl2/legacy/type/theorem.rkt") (lib "refined-acl2/certify.rkt") (lib "refined-acl2/expansion/dependency.rkt") (lib "refined-acl2/examples/id-non-dracula/different.rkt") (lib "refined-acl2/prelude/type.rkt") (lib "refined-acl2/model/names.rkt") (lib "refined-acl2/examples/id-non-dracula/identical.rkt") (lib "refined-acl2/expansion/grammar.rkt") (lib "refined-acl2/examples/id-non-dracula/check.rkt") (lib "refined-acl2/examples/bug.rkt") (lib "refined-acl2/core.rkt") (lib "refined-acl2/prelude/base/shorthand.rkt") (lib "refined-acl2/model/unparse.rkt") (lib "refined-acl2/model/syntax.rkt") (lib "refined-acl2/prelude/core/expressions.rkt") (lib "refined-acl2/legacy/unique.rkt") (lib "refined-acl2/prelude/base/primitive.rkt") (lib "refined-acl2/legacy/ref.rkt") (lib "refined-acl2/expansion/alpha.rkt") (lib "refined-acl2/prelude/core/support.rkt") (lib "refined-acl2/model/proof-term.rkt") (lib "refined-acl2/prelude/base.rkt") (lib "refined-acl2/expansion/paths.rkt") (lib "refined-acl2/prelude/core/expansion.rkt") (lib "refined-acl2/prelude/core/imported.rkt") (lib "refined-acl2/model/verify.rkt") (lib "refined-acl2/prelude/core/description.rkt") (lib "refined-acl2/tests/harness.rkt") (lib "refined-acl2/prelude.rkt") (lib "refined-acl2/legacy/type/generic.rkt") (lib "refined-acl2/prelude/core/keywords.rkt") (lib "refined-acl2/legacy/rename.rkt") (lib "refined-acl2/prelude/core/input-streams.rkt") (lib "refined-acl2/legacy/type/component.rkt") (lib "refined-acl2/prelude/set-of.rkt") (lib "refined-acl2/legacy/type/value.rkt") (lib "refined-acl2/prelude/base/mutual.rkt") (lib "refined-acl2/prelude/sexp.rkt") (lib "refined-acl2/kernel.rkt") (lib "refined-acl2/model/parse.rkt") (lib "refined-acl2/prelude/core/component.rkt") (lib "refined-acl2/legacy/type/function.rkt") (lib "refined-acl2/legacy/type/field.rkt") (lib "refined-acl2/expansion/simplify.rkt") (lib "refined-acl2/legacy/api.rkt") (lib "refined-acl2/tests/suite/component.rkt") (lib "refined-acl2/model/api.rkt") (lib "refined-acl2/examples/generic.rkt") (lib "refined-acl2/tests/suite/atomic.rkt") (lib "refined-acl2/examples/vm.rkt") (lib "refined-acl2/examples/virtual-machine/descriptions.rkt") (lib "refined-acl2/legacy/check.rkt") (lib "refined-acl2/prelude/base/datatype.rkt") (lib "refined-acl2/model/acl2.rkt") (lib "refined-acl2/prelude/base/match.rkt") (lib "refined-acl2/expansion/runtime.rkt") (lib "refined-acl2/model/quote.rkt") (lib "refined-acl2/tests/suite/macro.rkt") (lib "refined-acl2/model.rkt") (lib "refined-acl2/legacy/type/base.rkt") (lib "refined-acl2/legacy/type/description.rkt") (lib "refined-acl2/proof/term.rkt") (lib "refined-acl2/prelude/core.rkt") (lib "refined-acl2/tests/diff.rkt") (lib "refined-acl2/prelude/base/struct.rkt"))) (name . "refined-acl2") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:cce@racket-lang.org . #t) (ring:1 . #t))) (source . "github://github.com/carl-eastlund/refined-acl2/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2e344ad7bcbc5b5a758296a8158dcf9a7f3880bd") (source . "github://github.com/carl-eastlund/refined-acl2/master") (source_url . "http://github.com/carl-eastlund/refined-acl2/tree/master"))))))) ("regex-machine" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "regex-machine" "doc/regex-machine@regex-machine/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/regex-machine.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/regex-machine.txt"))) (checksum . "25754a4dc2aae351e2fe5db1b98101abb9ce088e") (checksum-error . #f) (collection . "regex-machine") (conflicts . ()) (date-added . 1549322621) (dependencies . ("base" "gui-lib" "pict-lib" "reprovide-lang" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "An implementation of Russ Cox's regular expression machine language") (implies . ()) (last-checked . 1632904516) (last-edit . 1566844680) (last-updated . 1549406575) (modules . ((lib "regex-machine/main.scrbl") (lib "regex-machine/main.rkt") (lib "regex-machine/program.rkt") (lib "regex-machine/vm.rkt") (lib "regex-machine/gui.rkt"))) (name . "regex-machine") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (regular-expressions . #t) (ring:1 . #t) (teaching . #t) (virtual-machine . #t))) (source . "https://github.com/jackfirth/regex-machine.git") (tags . ("regular-expressions" "teaching" "virtual-machine")) (versions . #hash((default . #hasheq((checksum . "25754a4dc2aae351e2fe5db1b98101abb9ce088e") (source . "https://github.com/jackfirth/regex-machine.git") (source_url . "https://github.com/jackfirth/regex-machine.git"))))))) ("regraph" . #hasheq((author . "alex.sanchezstern@gmail.com me@pavpanchekha.com") (authors . ("alex.sanchezstern@gmail.com" "me@pavpanchekha.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/regraph.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/regraph.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/regraph.txt"))) (checksum . "1725355df2cd1ffef7e0c8f01cde848d0f3dcfbf") (checksum-error . #f) (collection . "regraph") (conflicts . ()) (date-added . 1577979150) (dependencies . (("base" #:version "7.0") "rackunit-lib")) (description . "A pure-Racket equivalence graph") (implies . ()) (last-checked . 1632904516) (last-edit . 1581976615) (last-updated . 1593539713) (modules . ((lib "regraph/ematch.rkt") (lib "regraph/infra/index.rkt") (lib "regraph/infra/precompute.rkt") (lib "regraph/extraction.rkt") (lib "regraph/main.rkt") (lib "regraph/egraph.rkt") (lib "regraph/infra/time-regraph.rkt") (lib "regraph/enode.rkt"))) (name . "regraph") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:alex.sanchezstern@gmail.com . #t) (author:me@pavpanchekha.com . #t) (data-structures . #t) (equality . #t) (ring:1 . #t) (simplification . #t))) (source . "https://github.com/herbie-fp/regraph.git") (tags . ("data-structures" "equality" "simplification")) (versions . #hash((default . #hasheq((checksum . "1725355df2cd1ffef7e0c8f01cde848d0f3dcfbf") (source . "https://github.com/herbie-fp/regraph.git") (source_url . "https://github.com/herbie-fp/regraph.git"))))))) ("relation" . #hasheq((author . "skasivaj@gmail.com") (authors . ("skasivaj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "relation" "doc/relation@relation/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/relation.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/relation.txt"))) (checksum . "a3d8230300b2fd4c5be921561c884ac9118dc270") (checksum-error . #f) (collection . "relation") (conflicts . ()) (date-added . 1574201236) (dependencies . ("base" "collections-lib" "describe" "functional-lib" "arguments" "point-free" "threading-lib" "mischief" "social-contract" "ionic" "kw-utils" "typed-stack" "version-case" "rackunit-lib" "scribble-lib" "scribble-abbrevs" "racket-doc" "algebraic" "sugar" "fancy-app" "collections-doc" "functional-doc" "rackjure" "threading-doc" "sandbox-lib" "cover" "cover-coveralls" "at-exp-lib")) (description . "Generic interfaces and convenient utilities for using relations.") (implies . ()) (last-checked . 1632904516) (last-edit . 1591391827) (last-updated . 1632274476) (modules . ((lib "relation/dev/profile/type/builtin.rkt") (lib "relation/function/util.rkt") (lib "relation/dev/profile/type/relation.rkt") (lib "relation/dev/profile/logic/relation.rkt") (lib "relation/dev/profile/order/relation.rkt") (lib "relation/dev/profile/function/builtin.rkt") (lib "relation/order.rkt") (lib "relation/function/type/application-scheme/private/util.rkt") (lib "relation/function.rkt") (lib "relation/function/type/util.rkt") (lib "relation/main.rkt") (lib "relation/dev/profile/composition/builtin.rkt") (lib "relation/private/util.rkt") (lib "relation/equivalence.rkt") (lib "relation/tests/equivalence.rkt") (lib "relation/dev/profile/equivalence/relation.rkt") (lib "relation/function/type/application-scheme/interface.rkt") (lib "relation/composition.rkt") (lib "relation/scribblings/equivalence.scrbl") (lib "relation/dev/profile/order/builtin.rkt") (lib "relation/function/type/application-scheme/partial.rkt") (lib "relation/tests/function.rkt") (lib "relation/function/intf.rkt") (lib "relation/tests/order.rkt") (lib "relation/function/type/power.rkt") (lib "relation/function/composition.rkt") (lib "relation/function/type/base.rkt") (lib "relation/function/type/application-scheme/curried.rkt") (lib "relation/dev/profile/equivalence/builtin.rkt") (lib "relation/scribblings/type.scrbl") (lib "relation/tests/composition.rkt") (lib "relation/scribblings/composition.scrbl") (lib "relation/dev/profile/logic/builtin.rkt") (lib "relation/function/type/composed.rkt") (lib "relation/scribblings/logic.scrbl") (lib "relation/function/syntax.rkt") (lib "relation/scribblings/order.scrbl") (lib "relation/dev/profile/function/relation.rkt") (lib "relation/private/contract.rkt") (lib "relation/function/type/application-scheme/template.rkt") (lib "relation/function/type.rkt") (lib "relation/tests/logic.rkt") (lib "relation/function/type/interface.rkt") (lib "relation/scribblings/relation.scrbl") (lib "relation/tests/type.rkt") (lib "relation/type.rkt") (lib "relation/logic.rkt") (lib "relation/scribblings/function.scrbl") (lib "relation/dev/profile/composition/relation.rkt") (lib "relation/tests/private/util.rkt") (lib "relation/function/type/application-scheme.rkt"))) (name . "relation") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:skasivaj@gmail.com . #t) (comparison . #t) (generic . #t) (relations . #t) (ring:1 . #t))) (source . "https://github.com/countvajhula/relation.git") (tags . ("comparison" "generic" "relations")) (versions . #hash((default . #hasheq((checksum . "a3d8230300b2fd4c5be921561c884ac9118dc270") (source . "https://github.com/countvajhula/relation.git") (source_url . "https://github.com/countvajhula/relation.git"))))))) ("reloadable" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/reloadable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/reloadable.txt"))) (checksum . "cae2a141955bc2e0d068153f2cd07f88e6a6e9ef") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Support for code-reloading for long-running racket programs (such as web-servers).") (implies . ()) (last-checked . 1632904517) (last-edit . 1416004703) (last-updated . 1502816397) (modules . ((lib "reloadable/main.rkt"))) (name . "reloadable") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t) (system . #t) (web . #t))) (source . "github://github.com/tonyg/racket-reloadable/master") (tags . ("system" "web")) (versions . #hash((default . #hasheq((checksum . "cae2a141955bc2e0d068153f2cd07f88e6a6e9ef") (source . "github://github.com/tonyg/racket-reloadable/master") (source_url . "http://github.com/tonyg/racket-reloadable/tree/master"))))))) ("remap" . #hasheq((author . "hashim.muqtadir@gmail.com") (authors . ("hashim.muqtadir@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "remap"))) (failure-log . "server/built/fail/remap.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "d51fb2169b79e6bf5cfdd175af08239d3362445c") (checksum-error . #f) (collection . "remap") (conflicts . ()) (date-added . 1551713661) (dependencies . ("base" "db-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc" "rackunit-typed")) (description . "An ORM kinda thing for Racket, without the objects.") (implies . ()) (last-checked . 1632904517) (last-edit . 1551713661) (last-updated . 1620470077) (modules . ((lib "remap/private/tables.rkt") (lib "remap/private/creates-and-updates.rkt") (lib "remap/scribblings/remap.scrbl") (lib "remap/private/query.rkt") (lib "remap/private/to-sql.rkt") (lib "remap/private/fancy-select.rkt") (lib "remap/private/grouping-v2.rkt") (lib "remap/private/parser.rkt") (lib "remap/private/utils.rkt") (lib "remap/private/grouping.rkt") (lib "remap/private/tests.rkt") (lib "remap/main.rkt") (lib "remap/private/delete.rkt"))) (name . "remap") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (ORM . #t) (SQL . #t) (author:hashim.muqtadir@gmail.com . #t) (db . #t) (mapper . #t) (object . #t) (relational . #t) (ring:1 . #t))) (source . "https://gitlab.com/hashimmm/remap.git") (tags . ("db" "mapper" "object" "ORM" "relational" "SQL")) (versions . #hash((default . #hasheq((checksum . "d51fb2169b79e6bf5cfdd175af08239d3362445c") (source . "https://gitlab.com/hashimmm/remap.git") (source_url . "https://gitlab.com/hashimmm/remap.git"))))))) ("remember" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "remember-implementation.hl" "doc/remember-implementation.hl@remember/index.html") ("main" "remember" "doc/remember@remember/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/remember.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/remember.txt"))) (checksum . "cb47dd8b081ad14800fd668898f6f938a4a40e91") (checksum-error . #f) (collection . "remember") (conflicts . ()) (date-added . 1614799520) (dependencies . ("base" "rackunit-lib" "compatibility-lib" "scribble-lib" "typed-racket-lib" "phc-toolkit" "hyper-literate" "scribble-lib" "racket-doc" "typed-racket-doc" "scribble-enhanced")) (description . "Compile-time memoize across compilations. Writes values to a file, so that they will be remembered during the next compilation.") (implies . ()) (last-checked . 1632904517) (last-edit . 1614889745) (last-updated . 1617546894) (modules . ((lib "remember/scribblings/remember.scrbl") (lib "remember/test/input1.rkt") (lib "remember/test/test3.rkt") (lib "remember/remember-implementation.hl.rkt") (lib "remember/test/test1.rkt") (lib "remember/test/io2.rkt") (lib "remember/main.rkt") (lib "remember/test/input-error.rkt") (lib "remember/test/test-error.rkt") (lib "remember/test/input3.rkt") (lib "remember/test/test2.rkt"))) (name . "remember") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (memoization . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/remember.git#main") (tags . ("memoization" "syntax")) (versions . #hash((default . #hasheq((checksum . "cb47dd8b081ad14800fd668898f6f938a4a40e91") (source . "https://github.com/jsmaniac/remember.git#main") (source_url . "https://github.com/jsmaniac/remember.git#main"))))))) ("remix" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "remix"))) (failure-log . "server/built/fail/remix.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "982529019d12252b5f6ab49c17a1a8283ccfb9df") (checksum-error . #f) (collection . "remix") (conflicts . ()) (dependencies . ("base" "at-exp-lib" "rackunit-lib" "datalog" "scribble-doc" "rackunit-lib" "base" "racket-doc" "scribble-lib" "typed-racket-lib" "unstable-lib")) (description . "a revised version of Racket") (implies . ()) (last-checked . 1632904517) (last-edit . 1448414063) (last-updated . 1543924824) (modules . ((lib "remix/tests/2-required.rkt") (lib "remix/scribblings/racket2.scrbl") (lib "remix/tests/2-reader.rkt") (lib "remix/tests/expand-from.rkt") (lib "remix/static-interface.rkt") (lib "remix/stx.rkt") (lib "remix/tests/theory.rkt") (lib "remix/test.rkt") (lib "remix/tests/module.rkt") (lib "remix/private/required-helper.rkt") (lib "remix/main.rkt") (lib "remix/module.rkt") (lib "remix/stx/raw.rkt") (lib "remix/tests/2-required-server.rkt") (lib "remix/default-in.rkt") (lib "remix/racket.rkt") (lib "remix/tests/stx.rkt") (lib "remix/tests/layout.rkt") (lib "remix/class.rkt") (lib "remix/tests/racket/remixd.rkt") (lib "remix/datalog.rkt") (lib "remix/tests/expand-to.rkt") (lib "remix/tests/2-require-star-d.rkt") (lib "remix/tests/class.rkt") (lib "remix/base.rkt") (lib "remix/exp/unit-test.rkt") (lib "remix/layout.rkt") (lib "remix/stx/singleton-struct.rkt") (lib "remix/exp/unit.rkt") (lib "remix/scribblings/remix.scrbl") (lib "remix/tests/static-interface.rkt") (lib "remix/theory.rkt"))) (name . "remix") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:jay.mccarthy@gmail.com . #t) (lang . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/remix") (tags . ("lang")) (versions . #hash((default . #hasheq((checksum . "982529019d12252b5f6ab49c17a1a8283ccfb9df") (source . "git://github.com/jeapostrophe/remix") (source_url . "http://github.com/jeapostrophe/remix/tree/master"))))))) ("remote-shell" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/remote-shell.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/remote-shell.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("remote-shell-lib" "remote-shell-doc")) (description . "Tools for running on remote and virtual-machine hosts") (implies . ("remote-shell-lib" "remote-shell-doc")) (last-checked . 1632904517) (last-edit . 1417307461) (last-updated . 1624973735) (modules . ()) (name . "remote-shell") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "3e4244a27b983c1288ed47d50c54267c94d552e1") (source . "git://github.com/racket/remote-shell/?path=remote-shell") (source_url . "git://github.com/racket/remote-shell/?path=remote-shell"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("remote-shell-doc" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "remote-shell" "doc/remote-shell@remote-shell-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/remote-shell-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/remote-shell-doc.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "remote-shell") (conflicts . ()) (dependencies . ("base" "racket-doc" "remote-shell-lib" "scribble-lib")) (description . "documentation part of remote-shell") (implies . ()) (last-checked . 1632904518) (last-edit . 1417307461) (last-updated . 1624973736) (modules . ((lib "remote-shell/remote-shell.scrbl"))) (name . "remote-shell-doc") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "3e4244a27b983c1288ed47d50c54267c94d552e1") (source . "git://github.com/racket/remote-shell/?path=remote-shell-doc") (source_url . "git://github.com/racket/remote-shell/?path=remote-shell-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("remote-shell-lib" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/remote-shell-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/remote-shell-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "remote-shell") (conflicts . ()) (dependencies . ("base")) (description . "implementation (no documentation) part of remote-shell") (implies . ()) (last-checked . 1632904518) (last-edit . 1417307461) (last-updated . 1624973736) (modules . ((lib "remote-shell/vbox.rkt") (lib "remote-shell/docker.rkt") (lib "remote-shell/ssh.rkt"))) (name . "remote-shell-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@racket-lang.org . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "3e4244a27b983c1288ed47d50c54267c94d552e1") (source . "git://github.com/racket/remote-shell/?path=remote-shell-lib") (source_url . "git://github.com/racket/remote-shell/?path=remote-shell-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("repeated-application" . #hasheq((author . "vincentnys@gmail.com") (authors . ("vincentnys@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "repeated-application" "doc/repeated-application@repeated-application/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/repeated-application.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/repeated-application.txt"))) (checksum . "6a5ef2192f38f01de98deb03532b4b3d83b09ed3") (checksum-error . #f) (collection . "repeated-application") (conflicts . ()) (dependencies . ("at-exp-lib" "base" "racket-doc" "rackunit-lib" "scribble-lib" "sugar")) (description . "Variants of apply which compute a least fixpoint or run a number of consecutive applications.") (implies . ()) (last-checked . 1632904518) (last-edit . 1506784992) (last-updated . 1507098615) (modules . ((lib "repeated-application/scribblings/repeated-application.scrbl") (lib "repeated-application/main.rkt"))) (name . "repeated-application") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (application . #t) (author:vincentnys@gmail.com . #t) (fixpoint . #t) (recursion . #t) (ring:1 . #t))) (source . "git://github.com/v-nys/repeated-application") (tags . ("application" "fixpoint" "recursion")) (versions . #hash((default . #hasheq((checksum . "6a5ef2192f38f01de98deb03532b4b3d83b09ed3") (source . "git://github.com/v-nys/repeated-application") (source_url . "http://github.com/v-nys/repeated-application/tree/master"))))))) ("repltest" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "repltest" "doc/repltest@repltest/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/repltest.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/repltest.txt"))) (checksum . "3667dd5433f805738b4990828112450c5546fd77") (checksum-error . #f) (collection . "repltest") (conflicts . ()) (date-added . 1614799524) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "afl" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "REPL test: copy-paste REPL interactions and run them as tests") (implies . ()) (last-checked . 1632904518) (last-edit . 1614889785) (last-updated . 1617546894) (modules . ((lib "repltest/scribblings/repltest.scrbl") (lib "repltest/test/doc1.rkt") (lib "repltest/test/doc2-newline-at-end-of-file.rkt") (lib "repltest/main.rkt") (lib "repltest/private/util.rkt") (lib "repltest/lang/reader.rkt") (lib "repltest/test/doc3.rkt") (lib "repltest/test/simple.rkt") (lib "repltest/test/test.rkt") (lib "repltest/test/meta.rkt") (lib "repltest/private/run-interactions.rkt") (lib "repltest/test/doc4.rkt") (lib "repltest/test/doc5.rkt") (lib "repltest/test/doc2-no-newline-at-end-of-file.rkt"))) (name . "repltest") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (lang-extension . #t) (repl . #t) (ring:1 . #t) (testing . #t))) (source . "https://github.com/jsmaniac/repltest.git#main") (tags . ("lang-extension" "repl" "testing")) (versions . #hash((default . #hasheq((checksum . "3667dd5433f805738b4990828112450c5546fd77") (source . "https://github.com/jsmaniac/repltest.git#main") (source_url . "https://github.com/jsmaniac/repltest.git#main"))))))) ("reporter" . #hasheq((author . "racket@racket.tw dannypsnl@gmail.com") (authors . ("racket@racket.tw" "dannypsnl@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "reporter" "doc/reporter@reporter/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/reporter.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/reporter.txt"))) (checksum . "dc3243e339c3dfaa2961cb2bc43e6c1037efa5a0") (checksum-error . #f) (collection . "reporter") (conflicts . ()) (date-added . 1608398568) (dependencies . ("base" "ansi-color" "typed-racket-lib" "scribble-lib" "racket-doc" "rackunit-lib" "c-utils")) (description . "A util toolbox for compiler error reporting ") (implies . ()) (last-checked . 1632904519) (last-edit . 1609165357) (last-updated . 1625427275) (modules . ((lib "reporter/example/main.rkt") (lib "reporter/text.rkt") (lib "reporter/scribblings/reporter.scrbl") (lib "reporter/label.rkt") (lib "reporter/color.rkt") (lib "reporter/collect.rkt") (lib "reporter/report.rkt") (lib "reporter/loc.rkt") (lib "reporter/main.rkt"))) (name . "reporter") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dannypsnl@gmail.com . #t) (author:racket@racket.tw . #t) (compiler . #t) (error . #t) (report . #t) (ring:1 . #t))) (source . "https://github.com/racket-tw/reporter.git#develop") (tags . ("compiler" "error" "report")) (versions . #hash(("0.2" . #hasheq((checksum . "4b987f7b93ba97081116afd9cd7685f36740517b") (source . "https://github.com/racket-tw/reporter.git#4b987f7b93ba97081116afd9cd7685f36740517b") (source_url . "https://github.com/racket-tw/reporter.git#4b987f7b93ba97081116afd9cd7685f36740517b"))) (default . #hasheq((checksum . "dc3243e339c3dfaa2961cb2bc43e6c1037efa5a0") (source . "https://github.com/racket-tw/reporter.git#develop") (source_url . "https://github.com/racket-tw/reporter.git#develop"))) ("1.0.1" . #hasheq((checksum . "649e8c3de0cba351c210b035e20aee8f0ffb4c72") (source . "https://github.com/racket-tw/reporter.git#649e8c3de0cba351c210b035e20aee8f0ffb4c72") (source_url . "https://github.com/racket-tw/reporter.git#649e8c3de0cba351c210b035e20aee8f0ffb4c72"))) ("1.0" . #hasheq((checksum . "9d3c8174c2030ca8dca77b9caab1ea3c7fbb1122") (source . "https://github.com/racket-tw/reporter.git#9d3c8174c2030ca8dca77b9caab1ea3c7fbb1122") (source_url . "https://github.com/racket-tw/reporter.git#9d3c8174c2030ca8dca77b9caab1ea3c7fbb1122"))) ("1.1" . #hasheq((checksum . "65c0a3b8e8a9c2eac2ef67a280bf6ef22e90ea50") (source . "https://github.com/racket-tw/reporter.git#65c0a3b8e8a9c2eac2ef67a280bf6ef22e90ea50") (source_url . "https://github.com/racket-tw/reporter.git#65c0a3b8e8a9c2eac2ef67a280bf6ef22e90ea50"))))))) ("reprovide-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "reprovide" "doc/reprovide@reprovide-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/reprovide-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/reprovide-lang.txt"))) (checksum . "49c4c867964ddff42c5c61fe8a7e814851ed8a0c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563233893) (dependencies . ("base" "reprovide-lang-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "a #lang for reproviding modules") (implies . ("reprovide-lang-lib")) (last-checked . 1632904520) (last-edit . 1563240657) (last-updated . 1563242962) (modules . ((lib "reprovide/test/test-combine-in-except.rkt") (lib "reprovide/test/use-glob-in.rkt") (lib "reprovide/test/example-directory/c.rkt") (lib "reprovide/test/test.rkt") (lib "reprovide/test/use.rkt") (lib "reprovide/test/use-combine-in-except.rkt") (lib "reprovide/test/other-subdir/indirect-glob-in.rkt") (lib "reprovide/test/example-directory/b.rkt") (lib "reprovide/test/example-directory/a.rkt") (lib "reprovide/scribblings/reprovide.scrbl"))) (name . "reprovide-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (provide . #t) (require . #t) (ring:1 . #t))) (source . "https://github.com/AlexKnauth/reprovide-lang.git?path=reprovide-lang") (tags . ("provide" "require")) (versions . #hash(("6.0.1" . #hasheq((checksum . "b11ebac6b7a51190de632b8038525b96707213d6") (source . "git://github.com/AlexKnauth/reprovide-lang?path=reprovide-lang#for-v-up-to-6.6") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master?path=reprovide-lang#for-v-up-to-6.6"))) (default . #hasheq((checksum . "49c4c867964ddff42c5c61fe8a7e814851ed8a0c") (source . "https://github.com/AlexKnauth/reprovide-lang.git?path=reprovide-lang") (source_url . "https://github.com/AlexKnauth/reprovide-lang.git?path=reprovide-lang"))) ("6.2.1" . #hasheq((checksum . "b11ebac6b7a51190de632b8038525b96707213d6") (source . "git://github.com/AlexKnauth/reprovide-lang?path=reprovide-lang#for-v-up-to-6.6") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master?path=reprovide-lang#for-v-up-to-6.6"))) ("6.2" . #hasheq((checksum . "b11ebac6b7a51190de632b8038525b96707213d6") (source . "git://github.com/AlexKnauth/reprovide-lang?path=reprovide-lang#for-v-up-to-6.6") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master?path=reprovide-lang#for-v-up-to-6.6"))) ("6.3" . #hasheq((checksum . "b11ebac6b7a51190de632b8038525b96707213d6") (source . "git://github.com/AlexKnauth/reprovide-lang?path=reprovide-lang#for-v-up-to-6.6") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master?path=reprovide-lang#for-v-up-to-6.6"))) ("6.0" . #hasheq((checksum . "b11ebac6b7a51190de632b8038525b96707213d6") (source . "git://github.com/AlexKnauth/reprovide-lang?path=reprovide-lang#for-v-up-to-6.6") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master?path=reprovide-lang#for-v-up-to-6.6"))) ("6.6" . #hasheq((checksum . "b11ebac6b7a51190de632b8038525b96707213d6") (source . "git://github.com/AlexKnauth/reprovide-lang?path=reprovide-lang#for-v-up-to-6.6") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master?path=reprovide-lang#for-v-up-to-6.6"))) ("6.4" . #hasheq((checksum . "b11ebac6b7a51190de632b8038525b96707213d6") (source . "git://github.com/AlexKnauth/reprovide-lang?path=reprovide-lang#for-v-up-to-6.6") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master?path=reprovide-lang#for-v-up-to-6.6"))) ("6.5" . #hasheq((checksum . "b11ebac6b7a51190de632b8038525b96707213d6") (source . "git://github.com/AlexKnauth/reprovide-lang?path=reprovide-lang#for-v-up-to-6.6") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master?path=reprovide-lang#for-v-up-to-6.6"))) ("6.1" . #hasheq((checksum . "b11ebac6b7a51190de632b8038525b96707213d6") (source . "git://github.com/AlexKnauth/reprovide-lang?path=reprovide-lang#for-v-up-to-6.6") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master?path=reprovide-lang#for-v-up-to-6.6"))) ("6.1.1" . #hasheq((checksum . "b11ebac6b7a51190de632b8038525b96707213d6") (source . "git://github.com/AlexKnauth/reprovide-lang?path=reprovide-lang#for-v-up-to-6.6") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master?path=reprovide-lang#for-v-up-to-6.6"))))))) ("reprovide-lang-lib" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/reprovide-lang-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/reprovide-lang-lib.txt"))) (checksum . "49c4c867964ddff42c5c61fe8a7e814851ed8a0c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1563233844) (dependencies . ("base" "lang-file-lib" "syntax-macro-lang")) (description . "a #lang for reproviding modules") (implies . ()) (last-checked . 1632904522) (last-edit . 1563240929) (last-updated . 1563242963) (modules . ((lib "reprovide/reprovide.rkt") (lib "reprovide/require-transformer/private/this-expression-source-file.rkt") (lib "reprovide/require-transformer/combine-in-except.rkt") (lib "reprovide/main.rkt") (lib "reprovide/require-transformer/directory-in.rkt") (lib "reprovide/require-transformer/glob-in.rkt"))) (name . "reprovide-lang-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (provide . #t) (require . #t) (ring:1 . #t))) (source . "https://github.com/AlexKnauth/reprovide-lang.git?path=reprovide-lang-lib") (tags . ("provide" "require")) (versions . #hash(("6.0.1" . #hasheq((checksum . "b11ebac6b7a51190de632b8038525b96707213d6") (source . "git://github.com/AlexKnauth/reprovide-lang?path=reprovide-lang-lib#for-v-up-to-6.6") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master?path=reprovide-lang-lib#for-v-up-to-6.6"))) (default . #hasheq((checksum . "49c4c867964ddff42c5c61fe8a7e814851ed8a0c") (source . "https://github.com/AlexKnauth/reprovide-lang.git?path=reprovide-lang-lib") (source_url . "https://github.com/AlexKnauth/reprovide-lang.git?path=reprovide-lang-lib"))) ("6.2.1" . #hasheq((checksum . "b11ebac6b7a51190de632b8038525b96707213d6") (source . "git://github.com/AlexKnauth/reprovide-lang?path=reprovide-lang-lib#for-v-up-to-6.6") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master?path=reprovide-lang-lib#for-v-up-to-6.6"))) ("6.2" . #hasheq((checksum . "b11ebac6b7a51190de632b8038525b96707213d6") (source . "git://github.com/AlexKnauth/reprovide-lang?path=reprovide-lang-lib#for-v-up-to-6.6") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master?path=reprovide-lang-lib#for-v-up-to-6.6"))) ("6.3" . #hasheq((checksum . "b11ebac6b7a51190de632b8038525b96707213d6") (source . "git://github.com/AlexKnauth/reprovide-lang?path=reprovide-lang-lib#for-v-up-to-6.6") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master?path=reprovide-lang-lib#for-v-up-to-6.6"))) ("6.0" . #hasheq((checksum . "b11ebac6b7a51190de632b8038525b96707213d6") (source . "git://github.com/AlexKnauth/reprovide-lang?path=reprovide-lang-lib#for-v-up-to-6.6") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master?path=reprovide-lang-lib#for-v-up-to-6.6"))) ("6.6" . #hasheq((checksum . "b11ebac6b7a51190de632b8038525b96707213d6") (source . "git://github.com/AlexKnauth/reprovide-lang?path=reprovide-lang-lib#for-v-up-to-6.6") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master?path=reprovide-lang-lib#for-v-up-to-6.6"))) ("6.4" . #hasheq((checksum . "b11ebac6b7a51190de632b8038525b96707213d6") (source . "git://github.com/AlexKnauth/reprovide-lang?path=reprovide-lang-lib#for-v-up-to-6.6") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master?path=reprovide-lang-lib#for-v-up-to-6.6"))) ("6.5" . #hasheq((checksum . "b11ebac6b7a51190de632b8038525b96707213d6") (source . "git://github.com/AlexKnauth/reprovide-lang?path=reprovide-lang-lib#for-v-up-to-6.6") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master?path=reprovide-lang-lib#for-v-up-to-6.6"))) ("6.1" . #hasheq((checksum . "b11ebac6b7a51190de632b8038525b96707213d6") (source . "git://github.com/AlexKnauth/reprovide-lang?path=reprovide-lang-lib#for-v-up-to-6.6") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master?path=reprovide-lang-lib#for-v-up-to-6.6"))) ("6.1.1" . #hasheq((checksum . "b11ebac6b7a51190de632b8038525b96707213d6") (source . "git://github.com/AlexKnauth/reprovide-lang?path=reprovide-lang-lib#for-v-up-to-6.6") (source_url . "http://github.com/AlexKnauth/reprovide-lang/tree/master?path=reprovide-lang-lib#for-v-up-to-6.6"))))))) ("request" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "request" "doc/request@request/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/request.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/request.txt"))) (checksum . "fa78b05f5f063e767bcdb38a3d46cb4ff911ed56") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "fancy-app" "rackunit-lib" "scribble-lib" "typed-racket-lib" "typed-racket-more" "net-doc" "rackunit-lib" "rackunit-doc" "racket-doc")) (description . "A package for constructing HTTP and REST-ful requesters and integration tests. Currently unstable.") (implies . ()) (last-checked . 1632904524) (last-edit . 1500077087) (last-updated . 1590823225) (modules . ((lib "request/private/http-location.rkt") (lib "request/doc-utils/examples.rkt") (lib "request/main.rkt") (lib "request/param.scrbl") (lib "request/private/struct.rkt") (lib "request/private/base.rkt") (lib "request/private/base.scrbl") (lib "request/doc-utils/def.rkt") (lib "request/private/exn.scrbl") (lib "request/private/call-response.rkt") (lib "request/check.scrbl") (lib "request/private/wrap.rkt") (lib "request/main.scrbl") (lib "request/private/exn.rkt") (lib "request/private/wrap.scrbl") (lib "request/private/struct.scrbl") (lib "request/check.rkt") (lib "request/private/http-location.scrbl") (lib "request/param.rkt"))) (name . "request") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (http . #t) (rest . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/jackfirth/racket-request") (tags . ("experimental" "http" "rest" "testing")) (versions . #hash((default . #hasheq((checksum . "fa78b05f5f063e767bcdb38a3d46cb4ff911ed56") (source . "git://github.com/jackfirth/racket-request") (source_url . "http://github.com/jackfirth/racket-request/tree/master"))))))) ("require-private" . #hasheq((author . "") (authors . ()) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/require-private.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Package require-private is missing a required field: 'source\n  context...:\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (implies . ()) (last-checked . 1632904525) (last-edit . 1632906423) (last-updated . 1621809983) (modules . ()) (name . "require-private") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (ring:1 . #t))) (source . "") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "") (source_url . ""))))))) ("require-typed-check" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "require-typed-check" "doc/require-typed-check@require-typed-check/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/require-typed-check.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/require-typed-check.txt"))) (checksum . "7e8777a8576a74084c577b82dafaa759fe5ddfa8") (checksum-error . #f) (collection . "require-typed-check") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc" "rackunit-lib" "typed-racket-doc")) (description . "require/typed, but skips contracts on already-typed imports") (implies . ()) (last-checked . 1632904525) (last-edit . 1468765166) (last-updated . 1587139905) (modules . ((lib "require-typed-check/test/basic/main.rkt") (lib "require-typed-check/test/fsm/automata.rkt") (lib "require-typed-check/test/fsm/main.rkt") (lib "require-typed-check/scribblings/require-typed-check.scrbl") (lib "require-typed-check/test/fsm/utilities.rkt") (lib "require-typed-check/private/log.rkt") (lib "require-typed-check/test/submodule/main.rkt") (lib "require-typed-check/test/fsm/automata-adapted.rkt") (lib "require-typed-check/test/opaque/untyped.rkt") (lib "require-typed-check/private/test-util.rkt") (lib "require-typed-check/test/bogus/main.rkt") (lib "require-typed-check/test/basic/untyped.rkt") (lib "require-typed-check/test/pr/3.rkt") (lib "require-typed-check/test/fsm/population.rkt") (lib "require-typed-check/test/opaque/main.rkt") (lib "require-typed-check/test/pr/1.rkt") (lib "require-typed-check/test/bogus/typed.rkt") (lib "require-typed-check/test/opaque/typed.rkt") (lib "require-typed-check/test/basic/typed.rkt") (lib "require-typed-check/main.rkt") (lib "require-typed-check/logging.rkt") (lib "require-typed-check/private/require-typed-check.rkt"))) (name . "require-typed-check") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (contracts . #t) (require . #t) (ring:1 . #t) (typed-racket . #t))) (source . "git://github.com/bennn/require-typed-check") (tags . ("contracts" "require" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "7e8777a8576a74084c577b82dafaa759fe5ddfa8") (source . "git://github.com/bennn/require-typed-check") (source_url . "http://github.com/bennn/require-typed-check/tree/master"))))))) ("resource-pool" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "pool" "doc/pool@resource-pool/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/resource-pool.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/resource-pool.txt"))) (checksum . "60838899b4b1f69165dc1b3f664eb30d90355e47") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1617703199) (dependencies . ("base" "resource-pool-lib" "rackcheck" "racket-doc" "rackunit-lib" "resource-pool-lib" "scribble-lib")) (description . "A generic blocking resource pool. (docs & implementation)") (implies . ("resource-pool-lib")) (last-checked . 1632904525) (last-edit . 1617703231) (last-updated . 1620052623) (modules . ((lib "test/data/pool.rkt") (lib "data/scribblings/pool.scrbl"))) (name . "resource-pool") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (data-structures . #t) (pool . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-resource-pool.git?path=resource-pool") (tags . ("data-structures" "pool" "web")) (versions . #hash((default . #hasheq((checksum . "60838899b4b1f69165dc1b3f664eb30d90355e47") (source . "https://github.com/Bogdanp/racket-resource-pool.git?path=resource-pool") (source_url . "https://github.com/Bogdanp/racket-resource-pool.git?path=resource-pool"))))))) ("resource-pool-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/resource-pool-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/resource-pool-lib.txt"))) (checksum . "60838899b4b1f69165dc1b3f664eb30d90355e47") (checksum-error . #f) (collection . "data") (conflicts . ()) (date-added . 1617703172) (dependencies . ("base")) (description . "A generic blocking resource pool. (implementation)") (implies . ()) (last-checked . 1632904525) (last-edit . 1617703172) (last-updated . 1620052625) (modules . ((lib "data/pool.rkt"))) (name . "resource-pool-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (data-structures . #t) (pool . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-resource-pool.git?path=resource-pool-lib") (tags . ("data-structures" "pool" "web")) (versions . #hash((default . #hasheq((checksum . "60838899b4b1f69165dc1b3f664eb30d90355e47") (source . "https://github.com/Bogdanp/racket-resource-pool.git?path=resource-pool-lib") (source_url . "https://github.com/Bogdanp/racket-resource-pool.git?path=resource-pool-lib"))))))) ("response-ext" . #hasheq((author . "dk-junker@ya.ru") (authors . ("dk-junker@ya.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "response-ext" "doc/response-ext@response-ext/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/response-ext.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/response-ext.txt"))) (checksum . "50c95a7799602079b6a77d5576832a8d91a4bbd5") (checksum-error . #f) (collection . "response-ext") (conflicts . ()) (date-added . 1552838218) (dependencies . ("base" "web-server-lib" "rackunit-lib" "scribble-lib" "racket-doc" "rackunit-lib" "web-server-doc")) (description . "Extended HTTP response functions for Racket Web Server") (implies . ()) (last-checked . 1632904525) (last-edit . 1552838218) (last-updated . 1553012780) (modules . ((lib "response-ext/main.rkt") (lib "response-ext/test.rkt") (lib "response-ext/scribblings/response-ext.scrbl"))) (name . "response-ext") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dk-junker@ya.ru . #t) (http . #t) (response . #t) (ring:1 . #t) (web-server . #t))) (source . "https://github.com/Junker/response-ext.git") (tags . ("http" "response" "web-server")) (versions . #hash((default . #hasheq((checksum . "50c95a7799602079b6a77d5576832a8d91a4bbd5") (source . "https://github.com/Junker/response-ext.git") (source_url . "https://github.com/Junker/response-ext.git"))))))) ("restore" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/restore.txt") (test-failure-log . "server/built/test-fail/restore.txt") (test-success-log . #f))) (checksum . "c38049acd1bde962453977d2469cf2ae8b99acb7") (checksum-error . #f) (collection . "restore") (conflicts . ()) (dependencies . (("base" #:version "6.2.900.15") "unstable-lib")) (description . "protocol for restore program state") (implies . ()) (last-checked . 1632904525) (last-edit . 1504535420) (last-updated . 1502816401) (modules . ((lib "restore/tests/server.rkt") (lib "restore/main.rkt") (lib "restore/tests/client.rkt"))) (name . "restore") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (data . #t) (environment . #t) (filesystem . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/restore") (tags . ("data" "environment" "filesystem")) (versions . #hash((default . #hasheq((checksum . "c38049acd1bde962453977d2469cf2ae8b99acb7") (source . "git://github.com/jeapostrophe/restore") (source_url . "http://github.com/jeapostrophe/restore/tree/master"))))))) ("resyntax" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "resyntax" "doc/resyntax@resyntax/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/resyntax.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/resyntax.txt"))) (checksum . "0c957be4eb2cd17601dee90fe4dd4d748de73ef5") (checksum-error . #f) (collection . "resyntax") (conflicts . ()) (date-added . 1610857805) (dependencies . ("br-parser-tools-lib" "brag-lib" "rackunit-lib" "gui-lib" "fancy-app" "rebellion" "base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "An experimental refactoring tool built on top of syntax-parse.") (implies . ()) (last-checked . 1632904526) (last-edit . 1610858086) (last-updated . 1625193363) (modules . ((lib "resyntax/default-recommendations/list-shortcuts-test.rkt") (lib "resyntax/default-recommendations/hash-shortcuts-test.rkt") (lib "resyntax/default-recommendations/syntax-rules-shortcuts.rkt") (lib "resyntax/string-replacement.rkt") (lib "resyntax/default-recommendations/legacy-contract-migrations.rkt") (lib "resyntax/cli.rkt") (lib "resyntax/default-recommendations/for-loop-shortcuts-test.rkt") (lib "resyntax/default-recommendations/boolean-shortcuts-test.rkt") (lib "resyntax/private/comment-reader.rkt") (lib "resyntax/default-recommendations.rkt") (lib "resyntax/default-recommendations/comparison-shortcuts.rkt") (lib "resyntax/default-recommendations/private/syntax-tree.rkt") (lib "resyntax/default-recommendations/conditional-shortcuts-test.rkt") (lib "resyntax/refactoring-rule.rkt") (lib "resyntax/default-recommendations/private/let-binding.rkt") (lib "resyntax/default-recommendations/syntax-parse-shortcuts-test.rkt") (lib "resyntax/default-recommendations/private/syntax-lines.rkt") (lib "resyntax/default-recommendations/conditional-shortcuts.rkt") (lib "resyntax/default-recommendations/function-definition-shortcuts-test.rkt") (lib "resyntax/default-recommendations/for-loop-shortcuts.rkt") (lib "resyntax/default-recommendations/contract-shortcuts.rkt") (lib "resyntax/testing/refactoring-test-tokenizer.rkt") (lib "resyntax/default-recommendations/syntax-parse-shortcuts.rkt") (lib "resyntax/file-group.rkt") (lib "resyntax/default-recommendations/private/lambda-by-any-name.rkt") (lib "resyntax/default-recommendations/list-shortcuts.rkt") (lib "resyntax/default-recommendations/hash-shortcuts.rkt") (lib "resyntax/testing/refactoring-test.rkt") (lib "resyntax/default-recommendations/private/graph.rkt") (lib "resyntax/private/syntax-traversal.rkt") (lib "resyntax/default-recommendations/function-definition-shortcuts.rkt") (lib "resyntax/default-recommendations/legacy-struct-migrations-test.rkt") (lib "resyntax/source.rkt") (lib "resyntax/default-recommendations/miscellaneous-suggestions.rkt") (lib "resyntax/code-snippet.rkt") (lib "resyntax/default-recommendations/let-binding-suggestions-comment-test.rkt") (lib "resyntax/default-recommendations/private/syntax-identifier-sets.rkt") (lib "resyntax/default-recommendations/comparison-shortcuts-test.rkt") (lib "resyntax/syntax-replacement.rkt") (lib "resyntax/refactoring-result.rkt") (lib "resyntax/default-recommendations/private/syntax-equivalence.rkt") (lib "resyntax/main.rkt") (lib "resyntax/main.scrbl") (lib "resyntax/default-recommendations/legacy-struct-migrations.rkt") (lib "resyntax/default-recommendations/let-binding-suggestions-test.rkt") (lib "resyntax/default-recommendations/let-binding-suggestions-function-shortcuts-test.rkt") (lib "resyntax/refactoring-suite.rkt") (lib "resyntax/default-recommendations/boolean-shortcuts.rkt") (lib "resyntax/testing/refactoring-test-parser.rkt") (lib "resyntax/default-recommendations/numeric-shortcuts-test.rkt") (lib "resyntax/default-recommendations/contract-shortcuts-test.rkt") (lib "resyntax/default-recommendations/numeric-shortcuts.rkt") (lib "resyntax/default-recommendations/let-binding-suggestions.rkt") (lib "resyntax/default-recommendations/syntax-rules-shortcuts-test.rkt"))) (name . "resyntax") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (refactoring . #t) (ring:1 . #t) (static-analysis . #t))) (source . "https://github.com/jackfirth/resyntax.git") (tags . ("experimental" "refactoring" "static-analysis")) (versions . #hash((default . #hasheq((checksum . "0c957be4eb2cd17601dee90fe4dd4d748de73ef5") (source . "https://github.com/jackfirth/resyntax.git") (source_url . "https://github.com/jackfirth/resyntax.git"))))))) ("retry" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "retry" "doc/retry@retry/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/retry.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/retry.txt"))) (checksum . "2a6ba58ab5f14707305e75063c3ee4519fc6dc7d") (checksum-error . #f) (collection . "retry") (conflicts . ()) (dependencies . ("compose-app" "fancy-app" "gregor-lib" "reprovide-lang" ("base" #:version "6.5") ("mock" #:version "2.1") "at-exp-lib" "gregor-doc" "scribble-text-lib" "racket-doc" "scribble-lib" "rackunit-lib" "mock-rackunit")) (description . "Composable configurable retryers for flakily failing operations.") (implies . ()) (last-checked . 1632904526) (last-edit . 1500073485) (last-updated . 1512454089) (modules . ((lib "retry/scribblings/main.scrbl") (lib "retry/private/higher-order.rkt") (lib "retry/scribblings/guide.scrbl") (lib "retry/private/retryers.rkt") (lib "retry/scribblings/reference.scrbl") (lib "retry/main.rkt") (lib "retry/scribblings/base.rkt") (lib "retry/private/inject.rkt") (lib "retry/private/gregor.rkt") (lib "retry/private/base.rkt"))) (name . "retry") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (concurrency . #t) (ring:1 . #t))) (source . "git://github.com/jackfirth/racket-retry") (tags . ("concurrency")) (versions . #hash((default . #hasheq((checksum . "2a6ba58ab5f14707305e75063c3ee4519fc6dc7d") (source . "git://github.com/jackfirth/racket-retry") (source_url . "http://github.com/jackfirth/racket-retry/tree/master"))))))) ("review" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/review.txt") (test-failure-log . "server/built/test-fail/review.txt") (test-success-log . #f))) (checksum . "98be04613d1ed3a17a8d516f22fd3f10f52a6767") (checksum-error . #f) (collection . "review") (conflicts . ()) (date-added . 1574853608) (dependencies . ("base" "base" "at-exp-lib")) (description . "A surface-level linter for #lang racket modules.") (implies . ()) (last-checked . 1632904526) (last-edit . 1574853608) (last-updated . 1627742105) (modules . ((lib "review/tests/lint/struct-mutable.rkt") (lib "review/tests/lint/provided-all-defined.rkt") (lib "review/tests/lint/require-sorted.rkt") (lib "review/cli.rkt") (lib "review/tests/lint/struct-mutable-field.rkt") (lib "review/tests/lint/empty.rkt") (lib "review/tests/lint/no-lang.rkt") (lib "review/tests/lint/invalid-base-lang.rkt") (lib "review/tests/lint/let-with-parens.rkt") (lib "review/tests/lint/tilde-ids.rkt") (lib "review/tests/lint/bad-brackets.rkt") (lib "review/tests/lint/partial-lang.rkt") (lib "review/tests/lint/define-values-shadowing.rkt") (lib "review/tests/lint/require-unsorted-local-1.rkt") (lib "review/tests/lint/match.rkt") (lib "review/tests/lint/struct-out.rkt") (lib "review/tests/lint/lambda-scope.rkt") (lib "review/tests/lint/use-before-define.rkt") (lib "review/lint.rkt") (lib "review/tests/lint/require-unsorted-prefix-in.rkt") (lib "review/tests/lint/struct.rkt") (lib "review/tests/lint/let-can-shadow.rkt") (lib "review/tests/lint/lambda-varargs.rkt") (lib "review/tests/lint/underscores-dont-shadow.rkt") (lib "review/tests/lint/binding-else-in-match.rkt") (lib "review/tests/lint/function-varargs.rkt") (lib "review/tests/lint/component-lib-system.rkt") (lib "review/tests/lint/already-defined-values.rkt") (lib "review/tests/lint/case.rkt") (lib "review/tests/lint/nested-modules.rkt") (lib "review/tests/lint/struct-plus-plus.rkt") (lib "review/tests/lint/begin-inside-if.rkt") (lib "review/tests/lint/define-logger.rkt") (lib "review/tests/lint/provided-but-not-defined.rkt") (lib "review/tests/lint/define-match.rkt") (lib "review/run-tests.rkt") (lib "review/tests/lint/require-unsorted.rkt") (lib "review/tests/lint/already-defined-let.rkt") (lib "review/tests/lint/match-lambda.rkt") (lib "review/tests/lint/require-sorted-local.rkt") (lib "review/tests/lint/define-generics.rkt") (lib "review/tests/lint/for-expressions.rkt") (lib "review/tests/lint/struct-fields.rkt") (lib "review/tests/lint/already-defined.rkt") (lib "review/tests/lint/syntax-error.rkt") (lib "review/tests/lint/require-unsorted-local-2.rkt") (lib "review/tests/lint/rackunit-test-case.rkt") (lib "review/tests/lint/already-defined-argument.rkt") (lib "review/tests/lint/empty-let.rkt") (lib "review/tests/lint/unused-bindings.rkt") (lib "review/tests/lint/punted-bindings.rkt") (lib "review/tests/lint/require-unsorted-for-syntax.rkt") (lib "review/tests/lint/cond-without-else.rkt") (lib "review/tests/lint/if-without-else.rkt"))) (name . "review") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (linter . #t) (ring:1 . #t))) (source . "https://github.com/Bogdanp/racket-review.git") (tags . ("linter")) (versions . #hash((default . #hasheq((checksum . "98be04613d1ed3a17a8d516f22fd3f10f52a6767") (source . "https://github.com/Bogdanp/racket-review.git") (source_url . "https://github.com/Bogdanp/racket-review.git"))))))) ("rex" . #hasheq((author . "ahedges@ethz.ch") (authors . ("ahedges@ethz.ch")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rex" "doc/rex@rex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rex.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rex.txt"))) (checksum . "e3b41f706b4b72ea5f168b0f2a2600d77ee07ea0") (checksum-error . #f) (collection . "rex") (conflicts . ()) (dependencies . ("base" "br-parser-tools-lib" "brag" "data-lib" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Language for deterministic finite state machines") (implies . ()) (last-checked . 1632904526) (last-edit . 1500317682) (last-updated . 1528916113) (modules . ((lib "rex/reader.rkt") (lib "rex/tests/test-parser.rkt") (lib "rex/expander.rkt") (lib "rex/parser.rkt") (lib "rex/tests/test-branches.rkt") (lib "rex/tests/test-expander.rkt") (lib "rex/tokenizer.rkt") (lib "rex/tests/test-not.rkt") (lib "rex/main.rkt") (lib "rex/tests/test-basic.rkt") (lib "rex/tests/test-cycles.rkt") (lib "rex/tests/helper.rkt") (lib "rex/scribblings/rex.scrbl"))) (name . "rex") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (DFA . #t) (author:ahedges@ethz.ch . #t) (dsl . #t) (ring:1 . #t))) (source . "https://github.com/alehed/rex.git") (tags . ("DFA" "dsl")) (versions . #hash((default . #hasheq((checksum . "e3b41f706b4b72ea5f168b0f2a2600d77ee07ea0") (source . "https://github.com/alehed/rex.git") (source_url . "https://github.com/alehed/rex.git"))))))) ("rfc3339-old" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rfc3339-old" "doc/rfc3339-old@rfc3339-old/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rfc3339-old.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rfc3339-old.txt"))) (checksum . "4f52cf57d9905cbf8683f1aa25a23ba8d4ecc004") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "RFC 3339 Timestamps") (implies . ()) (last-checked . 1632904526) (last-edit . 1456803335) (last-updated . 1502816401) (modules . ((lib "rfc3339-old/main.rkt") (lib "rfc3339-old/rfc3339-old.scrbl"))) (name . "rfc3339-old") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/rfc3339-old.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "4f52cf57d9905cbf8683f1aa25a23ba8d4ecc004") (source . "http://www.neilvandyke.org/racket/rfc3339-old.zip") (source_url . "http://www.neilvandyke.org/racket/rfc3339-old.zip"))))))) ("rfc6455" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rfc6455" "doc/rfc6455@rfc6455/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rfc6455.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rfc6455.txt"))) (checksum . "abdf0099c6930986a4ea9f352b9fb34ba73afea5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "net-lib" "rackunit-lib" "web-server-lib" "scribble-lib" "net-doc" "racket-doc" "web-server-doc")) (description . "RFC 6455 WebSockets support for Racket.") (implies . ()) (last-checked . 1632904528) (last-edit . 1382575770) (last-updated . 1563127289) (modules . ((lib "net/rfc6455/examples/time-client-with-threads.rkt") (lib "net/rfc6455/http.rkt") (lib "net/rfc6455/examples/time-client-with-sync.rkt") (lib "net/rfc6455/rfc6455/conn.rkt") (lib "net/rfc6455/hybi00/conn.rkt") (lib "net/rfc6455/rfc6455/client.rkt") (lib "net/rfc6455/hybi00/dispatcher.rkt") (lib "net/rfc6455/examples/test-server.rkt") (lib "net/rfc6455.rkt") (lib "net/rfc6455/dispatcher.rkt") (lib "net/rfc6455/examples/test-service-mapper.rkt") (lib "net/rfc6455/hybi00/handshake.rkt") (lib "net/rfc6455/rfc6455/handshake.rkt") (lib "net/rfc6455/rfc6455/dispatcher.rkt") (lib "net/rfc6455/examples/cat.rkt") (lib "net/rfc6455/examples/client.rkt") (lib "net/rfc6455/conn-api.rkt") (lib "net/rfc6455/scribblings/rfc6455.scrbl") (lib "net/rfc6455/client.rkt") (lib "net/rfc6455/timeout.rkt") (lib "net/rfc6455/server.rkt") (lib "net/rfc6455/examples/time-server.rkt") (lib "net/rfc6455/rfc6455/frame.rkt") (lib "net/rfc6455/url.rkt") (lib "net/rfc6455/service-mapper.rkt") (lib "net/rfc6455/hybi00/client.rkt") (lib "net/rfc6455/private/connection-manager.rkt") (lib "net/rfc6455/examples/echo-server.rkt"))) (name . "rfc6455") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tonygarnockjones@gmail.com . #t) (http . #t) (net . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/tonyg/racket-rfc6455") (tags . ("http" "net" "web")) (versions . #hash((default . #hasheq((checksum . "abdf0099c6930986a4ea9f352b9fb34ba73afea5") (source . "git://github.com/tonyg/racket-rfc6455") (source_url . "http://github.com/tonyg/racket-rfc6455/tree/master"))))))) ("ricoeur-kernel" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ricoeur-kernel.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ricoeur-kernel.txt"))) (checksum . "1192906c24f8714cc179131ca921887ccdd5a2aa") (checksum-error . #f) (collection . "ricoeur") (conflicts . ()) (date-added . 1554233392) (dependencies . (("base" #:version "7.4") ("adjutor" #:version "0.3") "reprovide-lang" "gregor" "functional-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A standard library for Digital Ricoeur") (implies . ()) (last-checked . 1632904528) (last-edit . 1569547173) (last-updated . 1625611173) (modules . ((lib "ricoeur/kernel/maybe.rkt") (lib "ricoeur/kernel.rkt") (lib "ricoeur/kernel/xml-path.rkt") (lib "ricoeur/kernel/utils.rkt") (lib "ricoeur/kernel/pre-kernel-lib.rkt") (lib "ricoeur/kernel/main.rkt") (lib "ricoeur/kernel/output-to-file.rkt") (lib "ricoeur/stdlib/json.rkt"))) (name . "ricoeur-kernel") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (DigitalRicoeur . #t) (author:philip@philipmcgrath.com . #t) (ring:1 . #t) (util . #t) (utilities . #t) (utility . #t) (utils . #t))) (source . "https://bitbucket.org/digitalricoeur/ricoeur-kernel.git") (tags . ("DigitalRicoeur" "util" "utilities" "utility" "utils")) (versions . #hash((default . #hasheq((checksum . "1192906c24f8714cc179131ca921887ccdd5a2aa") (source . "https://bitbucket.org/digitalricoeur/ricoeur-kernel.git") (source_url . "https://bitbucket.org/digitalricoeur/ricoeur-kernel.git"))))))) ("ricoeur-tei-utils" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ricoeur-tei-guidelines" "doc/ricoeur-tei-guidelines@ricoeur-tei-utils/index.html") ("main" "ricoeur-tei-utils" "doc/ricoeur-tei-utils@ricoeur-tei-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ricoeur-tei-utils.txt") (test-failure-log . "server/built/test-fail/ricoeur-tei-utils.txt") (test-success-log . #f))) (checksum . "545c192aff9138d05bdd1aeb97d0f145508b84a8") (checksum-error . #f) (collection . "ricoeur") (conflicts . ()) (dependencies . (("base" #:version "7.4") ("adjutor" #:version "0.3") ("ricoeur-kernel" #:version "0.0.2") "functional-lib" "roman-numeral" "gregor-lib" "gui-lib" "pict-lib" "scribble-lib" "data-lib" ("db-lib" #:version "1.4") ("sql" #:version "1.5") "draw-lib" "icns" "parser-tools-lib" "pict-snip-lib" "nanopass" "reprovide-lang-lib" "typed-racket-lib" "typed-racket-more" ("xmllint-win32-x86_64" #:platform "win32\\x86_64" #:version "0.1") "at-exp-lib" "syntax-color-lib" "scribble-lib" "racket-doc" "at-exp-lib" "functional-doc" "gregor-doc" "rackunit-lib" ("_-exp" #:version "0.1") "db-doc" "data-doc" "gui-doc" "scribble-doc" "todo-list" "racket-index")) (description . "Digital Ricoeur library for TEI XML files") (implies . ()) (last-checked . 1632904528) (last-edit . 1537410666) (last-updated . 1625611300) (modules . ((lib "ricoeur/tei/tools/tei-lint/new-tei-document/from-file.rkt") (lib "ricoeur/tei/tools/tei-lint/lib.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/document/pb-report.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/document/warning-components.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/toolkit/proto-frame.rkt") (lib "ricoeur/tei/tools/tei-lint/lib/ed.rkt") (lib "ricoeur/scribblings/guidelines/for-guidelines.rkt") (lib "ricoeur/tei/spec-lang/test/extend.rkt") (lib "ricoeur/tei/tools/tei-lint/lib/menu-bar.rkt") (lib "ricoeur/scribblings/guidelines/refining.scrbl") (lib "ricoeur/tei/base/specification/textClass.rkt") (lib "ricoeur/scribblings/tei-utils/general.scrbl") (lib "ricoeur/core-doc-lang/color-lexer.rkt") (lib "ricoeur/tei/kernel/interfaces.rkt") (lib "ricoeur/tei/spec-lang.rkt") (lib "ricoeur/tei/kernel/xexpr/normalize.rkt") (lib "ricoeur/secondary-lit/preprocessor/interactive.rkt") (lib "ricoeur/secondary-lit/preprocessor/read.rkt") (lib "ricoeur/tei/spec-lang/test/test3.rkt") (lib "ricoeur/tei/base/segments.rkt") (lib "ricoeur/core-doc-lang/examples/module-star.rkt") (lib "ricoeur/tei/kernel/instance-info.rkt") (lib "ricoeur/tei/spec-lang/stxparam.rkt") (lib "ricoeur/tei/tools/tei-lint/tei-lint.rkt") (lib "ricoeur/core-doc-lang/lift.rkt") (lib "ricoeur/tei/base/specification/content-elements.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/toolkit/error.rkt") (lib "ricoeur/core-doc-lang/examples/derived-macro/provider.rkt") (lib "ricoeur/tei/tools/raco/raco.rkt") (lib "ricoeur/tei/corpus.rkt") (lib "ricoeur/tei/base/segments/location-stack.rkt") (lib "ricoeur/tei/kernel/xexpr/plain-contracts.rkt") (lib "ricoeur/tei/base/specification/teiHeader.rkt") (lib "ricoeur/tei/kernel.rkt") (lib "ricoeur/tei/spec-lang/ir/syntax-class.rkt") (lib "ricoeur/core-doc-lang/examples/good.rkt") (lib "ricoeur/tei/spec-lang/adt/base.rkt") (lib "ricoeur/tei/spec-lang/interface-macros.rkt") (lib "ricoeur/term-search/backend/postgresql.rkt") (lib "ricoeur/tei/tools/tei-lint/lib/long-path.rkt") (lib "ricoeur/secondary-lit/preprocessor/parse/parse.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/file-snip.rkt") (lib "ricoeur/scribblings/tei-utils/implementation/lang/doc-lang.scrbl") (lib "ricoeur/secondary-lit/preprocessor/parse/support.rkt") (lib "ricoeur/scribblings/guidelines/tools.scrbl") (lib "ricoeur/secondary-lit/demo.rkt") (lib "ricoeur/secondary-lit/kernel/types.rkt") (lib "ricoeur/scribblings/tei-utils/implementation/tei-lint.scrbl") (lib "ricoeur/tei/tools/tei-lint/lint/toolkit/interfaces.rkt") (lib "ricoeur/term-search/backend/common.rkt") (lib "ricoeur/tei/spec-lang/adt.rkt") (lib "ricoeur/term-search/backend/regexp.rkt") (lib "ricoeur/scribblings/tei-utils/xexpr+xml.scrbl") (lib "ricoeur/scribblings/tei-utils/installing.scrbl") (lib "ricoeur/tei/tools/tei-lint/convert-icon.rkt") (lib "ricoeur/tei/base/specification/sourceDesc.rkt") (lib "ricoeur/tei/base/guess-paragraphs.rkt") (lib "ricoeur/new-core-tangled-lang/untangle.rkt") (lib "ricoeur/tei/tools/tei-lint/lib/xml-preview.rkt") (lib "ricoeur/scribblings/tei-utils/implementation/lang/objectives.scrbl") (lib "ricoeur/secondary-lit/preprocessor.rkt") (lib "ricoeur/tei/tools/raco/encode-xml-entities.rkt") (lib "ricoeur/core-doc-lang/module-reader.rkt") (lib "ricoeur/tei/spec-lang/static-info.rkt") (lib "ricoeur/tei/tools/raco/directory-clean-filenames.rkt") (lib "ricoeur/tei/base/specification/titleStmt.rkt") (lib "ricoeur/tei/tools/raco/guess-paragraphs.rkt") (lib "ricoeur/tei/corpus/directory-corpus.rkt") (lib "ricoeur/tei/spec-lang/test/scope.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/paragraphs/common.rkt") (lib "ricoeur/tei/spec-lang/test/combine.rkt") (lib "ricoeur/tei/kernel/instance-set.rkt") (lib "ricoeur/tei/tools/tei-lint/new-tei-document/new-tei-document-frame.rkt") (lib "ricoeur/new-core-tangled-lang/use-demo.rkt") (lib "ricoeur/tei/base/segments/meta.rkt") (lib "ricoeur/tei/spec-lang/adt/sugar.rkt") (lib "ricoeur/scribblings/tei-utils/implementation.scrbl") (lib "ricoeur/tei/kernel/xexpr/entity-utils.rkt") (lib "ricoeur/tei/corpus/class-exptime.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/paragraphs/component.rkt") (lib "ricoeur/tei/tools/tei-lint/new-tei-document/bib-info.rkt") (lib "ricoeur/tei/spec-lang/test/test-use.rkt") (lib "ricoeur/core-doc-lang/examples/derived-macro/user.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/toolkit/status-dot.rkt") (lib "ricoeur/scribblings/tei-utils/implementation/lang/for-lang-kernel.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/document.rkt") (lib "ricoeur/tei/tools/raco/to-plain-text.rkt") (lib "ricoeur/core-doc-lang/make-module-begin.rkt") (lib "ricoeur/tei/corpus/test.rkt") (lib "ricoeur/tei/base/specification/structural-elements.rkt") (lib "ricoeur/secondary-lit/preprocessor/parse/common.rkt") (lib "ricoeur/scribblings/tei-utils/ricoeur-tei-utils.scrbl") (lib "ricoeur/tei/tools/tei-lint/lint/document/info-components.rkt") (lib "ricoeur/scribblings/tei-utils/corpus.scrbl") (lib "ricoeur/tei/tools/tei-lint/lib/xml-color.rkt") (lib "ricoeur/tei/kernel/schema.rkt") (lib "ricoeur/tei/spec-lang/ir/struct.rkt") (lib "ricoeur/tei/base/specification/text.rkt") (lib "ricoeur/tei/kernel/xmllint.rkt") (lib "ricoeur/tei/spec-lang/doc-support.rkt") (lib "ricoeur/scribblings/tei-utils/instance-info.scrbl") (lib "ricoeur/secondary-lit/preprocessor/write.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/toolkit.rkt") (lib "ricoeur/tei/spec-lang/test/test.rkt") (lib "ricoeur/term-search/backend.rkt") (lib "ricoeur/tei/spec-lang/test/test-stx.rkt") (lib "ricoeur/scribblings/tei-utils/element.scrbl") (lib "ricoeur/secondary-lit/front-end/types.rkt") (lib "ricoeur/term-search/backend/data-source-contract.rkt") (lib "ricoeur/core-doc-lang/examples/ambiguous.rkt") (lib "ricoeur/core-doc-lang/begin-for-runtime.rkt") (lib "ricoeur/tei/kernel/xexpr/contract-utils.rkt") (lib "ricoeur/core-doc-lang/examples/parent-for-label.rkt") (lib "ricoeur/tei/spec-lang/test/test4.rkt") (lib "ricoeur/scribblings/tei-utils/document.scrbl") (lib "ricoeur/tei/spec-lang/test/adt-test.rkt") (lib "ricoeur/tei/spec-lang/elem-for-runtime.rkt") (lib "ricoeur/scribblings/tei-utils/implementation/search.scrbl") (lib "ricoeur/scribblings/tei-utils/term-search.scrbl") (lib "ricoeur/scribblings/tei-utils/implementation/lang/linking.scrbl") (lib "ricoeur/scribblings/tei-utils/for-manual.rkt") (lib "ricoeur/term-search/backend/sql-support.rkt") (lib "ricoeur/secondary-lit/kernel/topic-model.rkt") (lib "ricoeur/tei/corpus/current-corpus.rkt") (lib "ricoeur/tei/tools/tei-lint/lib/shutdown.rkt") (lib "ricoeur/tei/kernel/base-structs.rkt") (lib "ricoeur/tei/spec-lang/link.rkt") (lib "ricoeur/tei/spec-lang/specification-lang.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/lint-file.rkt") (lib "ricoeur/tei/base/def-from-spec.rkt") (lib "ricoeur/secondary-lit/preprocessor/parse/book.rkt") (lib "ricoeur/secondary-lit/preprocessor/parse/article.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/paragraphs/prompt.rkt") (lib "ricoeur/tei/base.rkt") (lib "ricoeur/tei/base/get-page-breaks.rkt") (lib "ricoeur/tei/tools/tei-lint/new-tei-document.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/toolkit/make-doc-class.rkt") (lib "ricoeur/tei/spec-lang/test/test2.rkt") (lib "ricoeur/tei/tools/tei-lint/new-tei-document/pages.rkt") (lib "ricoeur/term-search/backend/noop.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/paragraphs/confirm.rkt") (lib "ricoeur/tei/tools/raco/validate-directory.rkt") (lib "ricoeur/tei.rkt") (lib "ricoeur/core-doc-lang/main.rkt") (lib "ricoeur/scribblings/tei-utils/implementation/lang/define-element.scrbl") (lib "ricoeur/tei/corpus/plain-corpus.rkt") (lib "ricoeur/scribblings/guidelines/background.scrbl") (lib "ricoeur/tei/tools/tei-lint/lint/directory-frame.rkt") (lib "ricoeur/tei/corpus/exptime-common.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/paragraphs.rkt") (lib "ricoeur/secondary-lit/preprocessor/parse.rkt") (lib "ricoeur/core-doc-lang.rkt") (lib "ricoeur/scribblings/guidelines/getting-started.scrbl") (lib "ricoeur/term-search/term-search-corpus.rkt") (lib "ricoeur/tei/tools/tei-lint/lint/toolkit/menu.rkt") (lib "ricoeur/scribblings/guidelines/ricoeur-tei-guidelines.scrbl") (lib "ricoeur/tei/spec-lang/test/test-duplicate.rkt") (lib "ricoeur/scribblings/tei-utils/segment.scrbl") (lib "ricoeur/scribblings/tei-utils/implementation/lang/lang-kernel.scrbl") (lib "ricoeur/tei/base/specification/specification.rkt") (lib "ricoeur/tei/tools/tei-lint/lint.rkt") (lib "ricoeur/scribblings/tei-utils/implementation/lang/module-structure.scrbl") (lib "ricoeur/term-search.rkt") (lib "ricoeur/secondary-lit/preprocessor/types.rkt") (lib "ricoeur/new-core-tangled-lang/demo-lang.rkt") (lib "ricoeur/secondary-lit/preprocessor/parse/nanopass.rkt") (lib "ricoeur/tei/spec-lang/doc-lang.rkt") (lib "ricoeur/core-doc-lang/doc-time.rkt"))) (name . "ricoeur-tei-utils") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (application . #t) (author:philip@philipmcgrath.com . #t) (ring:1 . #t) (xml . #t))) (source . "https://bitbucket.org/digitalricoeur/tei-utils.git") (tags . ("application" "xml")) (versions . #hash((default . #hasheq((checksum . "545c192aff9138d05bdd1aeb97d0f145508b84a8") (source . "https://bitbucket.org/digitalricoeur/tei-utils.git") (source_url . "https://bitbucket.org/digitalricoeur/tei-utils.git"))))))) ("riff" . #hasheq((author . "lehi@tosk.in") (authors . ("lehi@tosk.in")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "manual" "doc/manual@riff/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/riff.txt") (test-failure-log . "server/built/test-fail/riff.txt") (test-success-log . #f))) (checksum . "459efecc4168cf922660f95b6195935d66cb6a2b") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "riff is a racket wrapper for FLIF") (implies . ()) (last-checked . 1632904529) (last-edit . 1486938836) (last-updated . 1502816402) (modules . ((lib "riff/enc.rkt") (lib "riff/flif.rkt") (lib "riff/dec.rkt") (lib "riff/doc/manual.scrbl") (lib "riff/doc/enc.scrbl") (lib "riff/main.rkt") (lib "riff/doc/dec.scrbl") (lib "riff/doc/flif.scrbl"))) (name . "riff") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (author:lehi@tosk.in . #t) (compression . #t) (decompression . #t) (ffi . #t) (flif . #t) (images . #t) (ring:1 . #t) (wrapper . #t))) (source . "git://github.com/lehitoskin/riff") (tags . ("compression" "decompression" "ffi" "flif" "images" "wrapper")) (versions . #hash((default . #hasheq((checksum . "459efecc4168cf922660f95b6195935d66cb6a2b") (source . "git://github.com/lehitoskin/riff") (source_url . "http://github.com/lehitoskin/riff/tree/master"))))))) ("rilouworld" . #hasheq((author . "jerome.martin.dev@gmail.com") (authors . ("jerome.martin.dev@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/rilouworld.txt") (docs . (("main" "rilouworld" "doc/rilouworld@rilouworld/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rilouworld.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rilouworld.txt"))) (checksum . "184dea6c187f4f94da6616b89ec15cc8ba6bb786") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1551127368) (dependencies . ("base" "math-lib" "draw-lib" "anaphoric" "web-server-lib" "mode-lambda" "lux" "reprovide-lang" "racket-doc" "scribble-lib")) (description . "Decentralized game universe in which players create and share their own levels") (implies . ()) (last-checked . 1632904529) (last-edit . 1551127368) (last-updated . 1555020414) (modules . ((lib "rilouworld/bundles/quest.rkt") (lib "rilouworld/private/core/receiver.rkt") (lib "rilouworld/private/core/player.rkt") (lib "rilouworld/scribblings/rilouworld.scrbl") (lib "rilouworld/private/ai/ai.rkt") (lib "rilouworld/private/core/state-machine.rkt") (lib "rilouworld/bundles/rilouw.rkt") (lib "rilouworld/scribblings/reference/quest.scrbl") (lib "rilouworld/scribblings/reference/engine.scrbl") (lib "rilouworld/scribblings/networking-guide.scrbl") (lib "rilouworld/engine.rkt") (lib "rilouworld/private/quest/reader.rkt") (lib "rilouworld/scribblings/vocabulary.scrbl") (lib "rilouworld/bundle.rkt") (lib "rilouworld/private/quest/props-meta.rkt") (lib "rilouworld/quest.rkt") (lib "rilouworld/private/network/api.rkt") (lib "rilouworld/private/quest/expander.rkt") (lib "rilouworld/private/quest/props.rkt") (lib "rilouworld/account.rkt") (lib "rilouworld/scribblings/reference/account.scrbl") (lib "rilouworld/scribblings/bundles/bundles.scrbl") (lib "rilouworld/private/network/account.rkt") (lib "rilouworld/bundles/spacecat.rkt") (lib "rilouworld/scribblings/reference/reference.scrbl") (lib "rilouworld/private/quest/loader.rkt") (lib "rilouworld/private/bundle/reader.rkt") (lib "rilouworld/private/core/sprite.rkt") (lib "rilouworld/private/ai/ai-xor.rkt") (lib "rilouworld/private/utils/struct.rkt") (lib "rilouworld/private/core/database.rkt") (lib "rilouworld/private/quest/world.rkt") (lib "rilouworld/scribblings/bundles/spacecat.scrbl") (lib "rilouworld/scribblings/quest-guide.scrbl") (lib "rilouworld/private/bundle/expander.rkt") (lib "rilouworld/scribblings/bundles/rilouw.scrbl") (lib "rilouworld/main.rkt") (lib "rilouworld/private/core/event.rkt") (lib "rilouworld/private/utils/log.rkt") (lib "rilouworld/private/core/engine.rkt"))) (name . "rilouworld") (ring . 1) (search-terms . #hasheq((2d . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:jerome.martin.dev@gmail.com . #t) (game . #t) (game-engine . #t) (games . #t) (network . #t) (ring:1 . #t))) (source . "https://github.com/euhmeuh/rilouworld.git") (tags . ("2d" "game" "game-engine" "games" "network")) (versions . #hash((default . #hasheq((checksum . "184dea6c187f4f94da6616b89ec15cc8ba6bb786") (source . "https://github.com/euhmeuh/rilouworld.git") (source_url . "https://github.com/euhmeuh/rilouworld.git"))))))) ("rince" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rince" "doc/rince@rince/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rince.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rince.txt"))) (checksum . "61664bfee27a53d18fcb9880e1202eb5cc8f4a5f") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1628603014) (dependencies . ("base" "c-utils" "parser-tools-lib" "rackunit-lib" "turnstile-lib" "racket-doc" "scribble-lib")) (description . "A runtime library and C->Racket compiler to allow running C programs on top of Racket (no FFI!)") (implies . ()) (last-checked . 1632904530) (last-edit . 1628603014) (last-updated . 1628609712) (modules . ((lib "rince/lib.rkt") (lib "rince/lang/parse.rkt") (lib "rince/lang/expression.rkt") (lib "rince/lang/goto.rkt") (lib "rince/commands/run-c.rkt") (lib "rince/lib/stdio.rkt") (lib "rince/tests/unit.rkt") (lib "rince/lang/syntax.rkt") (lib "rince/lang/convert-type.rkt") (lib "rince/c/lang/main.rkt") (lib "rince/scribblings/rince.scrbl") (lib "rince/lang/scope.rkt") (lib "rince/c/lang/reader.rkt") (lib "rince/lang/rep.rkt") (lib "rince/lang/keywords.rkt") (lib "rince/lang/statement.rkt") (lib "rince/scribblings/internal.scrbl") (lib "rince/libc.rkt") (lib "rince/link.rkt") (lib "rince/lang/cpp.rkt") (lib "rince/compile.rkt") (lib "rince/lang/types.rkt") (lib "rince/tests/readme.rkt"))) (name . "rince") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:leo@lwh.jp . #t) (c . #t) (experimental . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/lwhjp/rince.git") (tags . ("c" "experimental" "language")) (versions . #hash((default . #hasheq((checksum . "61664bfee27a53d18fcb9880e1202eb5cc8f4a5f") (source . "https://github.com/lwhjp/rince.git") (source_url . "https://github.com/lwhjp/rince.git"))))))) ("ring-buffer" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ring-buffer" "doc/ring-buffer@ring-buffer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ring-buffer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ring-buffer.txt"))) (checksum . "e93665407487ca0d31e1dadebc570371044f0c27") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "eli-tester" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "An imperative overwriting ring buffer data structure") (implies . ()) (last-checked . 1632904531) (last-edit . 1353515180) (last-updated . 1549111376) (modules . ((lib "data/ring-buffer/ring-buffer.scrbl") (lib "data/ring-buffer.rkt") (lib "tests/data/ring-buffer.rkt"))) (name . "ring-buffer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (data . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/ring-buffer/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "e93665407487ca0d31e1dadebc570371044f0c27") (source . "github://github.com/jeapostrophe/ring-buffer/master") (source_url . "http://github.com/jeapostrophe/ring-buffer/tree/master"))))))) ("riposte" . #hasheq((author . "jesse@serverracket.com jesse@lisp.sh jesse.alama@vicampo.de") (authors . ("jesse@serverracket.com" "jesse@lisp.sh" "jesse.alama@vicampo.de")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "riposte" "doc/riposte@riposte/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/riposte.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/riposte.txt"))) (checksum . "0a71e54539cb40b574f84674769792444691a8cf") (checksum-error . #f) (collection . "riposte") (conflicts . ()) (date-added . 1607664711) (dependencies . ("br-parser-tools-lib" "brag-lib" "net-cookies-lib" "web-server-lib" "base" "racket-doc" "brag-lib" "br-parser-tools-lib" "beautiful-racket-lib" "http" "net-cookies-lib" "argo" "dotenv" "json-pointer" "misc1" "scribble-lib" "rackunit-lib" "web-server-lib" "net-cookies-lib" "beautiful-racket-lib")) (description . "Language for testing JSON-based HTTP APIs") (implies . ()) (last-checked . 1632904531) (last-edit . 1607870657) (last-updated . 1613046142) (modules . ((lib "riposte/grammar.rkt") (lib "riposte/scribblings/misc.scrbl") (lib "riposte/tokenizer.rkt") (lib "riposte/parser.rkt") (lib "riposte/response.rkt") (lib "riposte/examples/empty.rkt") (lib "riposte/scribblings/language.scrbl") (lib "riposte/scribblings/use.scrbl") (lib "riposte/scribblings/installation.scrbl") (lib "riposte/json.rkt") (lib "riposte/examples/issue-2.rkt") (lib "riposte/examples/template.rkt") (lib "riposte/respond.rkt") (lib "riposte/scribblings/philosophy.scrbl") (lib "riposte/scribblings/limitations.scrbl") (lib "riposte/examples/positive-integer.rkt") (lib "riposte/scribblings/briefly.scrbl") (lib "riposte/util.rkt") (lib "riposte/parameters.rkt") (lib "riposte/scribblings/assignments.scrbl") (lib "riposte/cmd.rkt") (lib "riposte/scribblings/assertions.scrbl") (lib "riposte/main.rkt") (lib "riposte/examples/json-pointer.rkt") (lib "riposte/scribblings/riposte.scrbl") (lib "riposte/examples/whole.rkt") (lib "riposte/examples/equals.rkt") (lib "riposte/examples/import.rkt") (lib "riposte/examples/headers.rkt") (lib "riposte/riposte.rkt") (lib "riposte/scribblings/wishlist.scrbl") (lib "riposte/examples/schema.rkt") (lib "riposte/expander.rkt") (lib "riposte/examples/presence.rkt") (lib "riposte/scribblings/parameters.scrbl") (lib "riposte/scribblings/commands.scrbl") (lib "riposte/examples/exec.rkt") (lib "riposte/examples/common.rkt") (lib "riposte/examples/cart.rkt") (lib "riposte/examples/echo.rkt") (lib "riposte/scribblings/origins.scrbl") (lib "riposte/examples/timeout.rkt") (lib "riposte/scribblings/import.scrbl") (lib "riposte/server.rkt") (lib "riposte/reader.rkt"))) (name . "riposte") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse.alama@vicampo.de . #t) (author:jesse@lisp.sh . #t) (author:jesse@serverracket.com . #t) (http . #t) (json . #t) (lang . #t) (ring:1 . #t) (testing . #t))) (source . "https://github.com/vicampo/riposte.git") (tags . ("http" "json" "lang" "testing")) (versions . #hash((default . #hasheq((checksum . "0a71e54539cb40b574f84674769792444691a8cf") (source . "https://github.com/vicampo/riposte.git") (source_url . "https://github.com/vicampo/riposte.git"))))))) ("rival" . #hasheq((author . "me@pavpanchekha.com") (authors . ("me@pavpanchekha.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rival.txt") (test-failure-log . "server/built/test-fail/rival.txt") (test-success-log . #f))) (checksum . "ce01d0b08fd421cf70c8e953d82f5c267b78a328") (checksum-error . #f) (collection . "rival") (conflicts . ()) (date-added . 1589823303) (dependencies . (("base" #:version "7.0") "math-lib" "rackunit-lib" "rackunit-lib")) (description . "Interval analysis for real computation") (implies . ()) (last-checked . 1632904531) (last-edit . 1589823303) (last-updated . 1616180413) (modules . ((lib "rival/infra/run-mathematica.rkt") (lib "rival/infra/run-mpfi.rkt") (lib "rival/infra/generate-points.rkt") (lib "rival/main.rkt") (lib "rival/infra/report.rkt") (lib "rival/infra/format-mathematica.rkt") (lib "rival/infra/interval-evaluate.rkt"))) (name . "rival") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (analysis . #t) (author:me@pavpanchekha.com . #t) (floating-point . #t) (numerical . #t) (ring:1 . #t))) (source . "https://github.com/herbie-fp/rival.git") (tags . ("analysis" "floating-point" "numerical")) (versions . #hash((default . #hasheq((checksum . "ce01d0b08fd421cf70c8e953d82f5c267b78a328") (source . "https://github.com/herbie-fp/rival.git") (source_url . "https://github.com/herbie-fp/rival.git"))))))) ("rkt-tree-widget" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rkt-tree-widget" "doc/rkt-tree-widget@rkt-tree-widget/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rkt-tree-widget.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rkt-tree-widget.txt"))) (checksum . "0c6e354874f063338cb4549f7d4a0338d6ea6586") (checksum-error . #f) (collection . "rkt-tree-widget") (conflicts . ()) (date-added . 1626268032) (dependencies . ("base" "gui-lib" "scribble-lib" "racket-doc" "gui-doc" "rackunit-lib")) (description . "Yet another tree widget for racket/gui") (implies . ()) (last-checked . 1632904532) (last-edit . 1626268032) (last-updated . 1627706104) (modules . ((lib "rkt-tree-widget/tests/pos-tree.rkt") (lib "rkt-tree-widget/scribblings/rkt-tree-widget.scrbl") (lib "rkt-tree-widget/examples/dir.rkt") (lib "rkt-tree-widget/private/interfaces.rkt") (lib "rkt-tree-widget/base.rkt") (lib "rkt-tree-widget/main.rkt") (lib "rkt-tree-widget/private/tree-mixin.rkt") (lib "rkt-tree-widget/private/pos-tree.rkt") (lib "rkt-tree-widget/private/manual-scroll.rkt") (lib "rkt-tree-widget/private/tree-widget.rkt") (lib "rkt-tree-widget/private/pos-tree-helper.rkt") (lib "rkt-tree-widget/tests/tree-pos-cache.rkt") (lib "rkt-tree-widget/private/tree-pos-cache.rkt") (lib "rkt-tree-widget/examples/tree.rkt"))) (name . "rkt-tree-widget") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:yj_qww6@126.com . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/yjqww6/rkt-tree-widget.git") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "0c6e354874f063338cb4549f7d4a0338d6ea6586") (source . "https://github.com/yjqww6/rkt-tree-widget.git") (source_url . "https://github.com/yjqww6/rkt-tree-widget.git"))))))) ("rktermios" . #hasheq((author . "dominik.pantucek@trustica.cz") (authors . ("dominik.pantucek@trustica.cz")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rktermios" "doc/rktermios@rktermios/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rktermios.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rktermios.txt"))) (checksum . "cbcdd5b15542bf6f45907e6a6ba2932f0c4cd501") (checksum-error . #f) (collection . "rktermios") (conflicts . ()) (date-added . 1600709144) (dependencies . ("base" "scribble-lib" "scribble-lib" "racket-doc" "at-exp-lib")) (description . "This module allows the programmer to set the terminal to raw mode. It works both under Racket BC and Racket CS.\r\n") (implies . ()) (last-checked . 1632904532) (last-edit . 1600709144) (last-updated . 1620470091) (modules . ((lib "rktermios/main.rkt") (lib "rktermios/scribblings/rktermios.scrbl"))) (name . "rktermios") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dominik.pantucek@trustica.cz . #t) (ffi . #t) (posix . #t) (ring:1 . #t) (termios . #t))) (source . "https://gitlab.com/racketeer/rktermios.git") (tags . ("ffi" "posix" "termios")) (versions . #hash((default . #hasheq((checksum . "cbcdd5b15542bf6f45907e6a6ba2932f0c4cd501") (source . "https://gitlab.com/racketeer/rktermios.git") (source_url . "https://gitlab.com/racketeer/rktermios.git"))))))) ("rktfetch" . #hasheq((author . "ValleyKnight@protonmail.com xgqt@riseup.net") (authors . ("ValleyKnight@protonmail.com" "xgqt@riseup.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rktfetch" "doc/rktfetch@rktfetch/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rktfetch.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rktfetch.txt"))) (checksum . "ef31ad29caa26792117280d930fe2a2f18c59827") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1621104344) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "rktfetch is an info fetch tool (like neofetch) but written in Racket") (implies . ()) (last-checked . 1632904532) (last-edit . 1621104344) (last-updated . 1628264140) (modules . ((lib "rktfetch/main.rkt") (lib "rktfetch/private/get/device.rkt") (lib "rktfetch/private/get/distro.rkt") (lib "rktfetch/private/get/logo.rkt") (lib "rktfetch/private/get/helpers/logos.rkt") (lib "rktfetch/private/get.rkt") (lib "rktfetch/private/get/helpers/separator.rkt") (lib "rktfetch/private/get/helpers/basename.rkt") (lib "rktfetch/private/get/cpu.rkt") (lib "rktfetch/private/get/os.rkt") (lib "rktfetch/private/get/editor.rkt") (lib "rktfetch/private/get/helpers/is.rkt") (lib "rktfetch/private/get/uptime.rkt") (lib "rktfetch/private/get/helpers/string.rkt") (lib "rktfetch/private/get/helpers/grep.rkt") (lib "rktfetch/scribblings/rktfetch.scrbl") (lib "rktfetch/private/get/kernel.rkt") (lib "rktfetch/private/get/user.rkt") (lib "rktfetch/private/get/helpers/time.rkt") (lib "rktfetch/private/get/helpers/cmd.rkt") (lib "rktfetch/private/get/memory.rkt") (lib "rktfetch/private/get/desktop.rkt") (lib "rktfetch/private/get/pkg.rkt") (lib "rktfetch/private/get/shell.rkt"))) (name . "rktfetch") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ValleyKnight@protonmail.com . #t) (author:xgqt@riseup.net . #t) (information . #t) (ring:1 . #t) (system . #t))) (source . "https://github.com/mythical-linux/rktfetch.git") (tags . ("information" "system")) (versions . #hash((default . #hasheq((checksum . "ef31ad29caa26792117280d930fe2a2f18c59827") (source . "https://github.com/mythical-linux/rktfetch.git") (source_url . "https://github.com/mythical-linux/rktfetch.git"))))))) ("rktreq" . #hasheq((author . "") (authors . ()) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/rktreq.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Package rktreq is missing a required field: 'source\n  context...:\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (implies . ()) (last-checked . 1632904533) (last-edit . 1632906423) (last-updated . 1621809989) (modules . ()) (name . "rktreq") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (ring:1 . #t))) (source . "") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "") (source_url . ""))))))) ("rktvk" . #hasheq((author . "aydar.js@gmail.com") (authors . ("aydar.js@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/rktvk.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "305670650353648319a2e110785542818d7fa7d3") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: git://github.com/iZarif/rktvk\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Racket library for working with VK API") (implies . ()) (last-checked . 1632904533) (last-edit . 1546359401) (last-updated . 1621809990) (modules . ((lib "rktvk/main.rkt") (lib "rktvk/scribblings/rktvk.scrbl"))) (name . "rktvk") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (API . #t) (api . #t) (author:aydar.js@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/iZarif/rktvk") (tags . ("api" "API")) (versions . #hash((default . #hasheq((checksum . "305670650353648319a2e110785542818d7fa7d3") (source . "git://github.com/iZarif/rktvk") (source_url . "http://github.com/iZarif/rktvk/tree/master"))))))) ("rmacs" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/rmacs.txt") (success-log . "server/built/install/rmacs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rmacs.txt"))) (checksum . "8c99dd5dfa22f1f34707bbe957de268dc6a7a632") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "ansi" "syntax-color-lib" "gui-lib" "unix-signals" "diff-merge" "web-server-lib" "profile-lib" "rackunit-lib")) (description . "An EMACS written in Racket. Runs in ANSI-compatible terminals.") (implies . ()) (last-checked . 1632904533) (last-edit . 1420183943) (last-updated . 1527986662) (modules . ((lib "rmacs/topsort.rkt") (lib "rmacs/buffer.rkt") (lib "rmacs/mode.rkt") (lib "rmacs/display-gui-check.rkt") (lib "rmacs/rope/range.rkt") (lib "rmacs/mode/fundamental.rkt") (lib "rmacs/keys.rkt") (lib "rmacs/rope.rkt") (lib "rmacs/main.rkt") (lib "rmacs/search.rkt") (lib "rmacs/minibuf.rkt") (lib "rmacs/window.rkt") (lib "rmacs/file.rkt") (lib "rmacs/rope/index.rkt") (lib "rmacs/rope/piece.rkt") (lib "rmacs/mark.rkt") (lib "rmacs/wrap.rkt") (lib "rmacs/local.rkt") (lib "rmacs/strings.rkt") (lib "rmacs/rope/string.rkt") (lib "rmacs/render.rkt") (lib "rmacs/ring.rkt") (lib "rmacs/colorize.rkt") (lib "rmacs/circular-list.rkt") (lib "rmacs/display-terminal.rkt") (lib "rmacs/api.rkt") (lib "rmacs/display-gui.rkt") (lib "rmacs/syntax.rkt") (lib "rmacs/lists.rkt") (lib "rmacs/rope/test.rkt") (lib "rmacs/timing.rkt") (lib "rmacs/editor.rkt") (lib "rmacs/history.rkt") (lib "rmacs/display.rkt"))) (name . "rmacs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (editor . #t) (ring:1 . #t) (terminal . #t))) (source . "github://github.com/tonyg/rmacs/master") (tags . ("editor" "terminal")) (versions . #hash((default . #hasheq((checksum . "8c99dd5dfa22f1f34707bbe957de268dc6a7a632") (source . "github://github.com/tonyg/rmacs/master") (source_url . "http://github.com/tonyg/rmacs/tree/master"))))))) ("rmc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rmc.txt") (test-failure-log . "server/built/test-fail/rmc.txt") (test-success-log . #f))) (checksum . "e11425287cfecb3940f75a25a29f9b74826c2605") (checksum-error . #f) (collection . "rmc") (conflicts . ()) (dependencies . ("pprint" "chk" "base" "rackunit-lib")) (description . "Racket-made C") (implies . ()) (last-checked . 1632904533) (last-edit . 1462316946) (last-updated . 1502816403) (modules . ((lib "rmc/t.rkt") (lib "rmc/t/lib.rkt") (lib "rmc/t/ts.rkt") (lib "rmc/h.rkt") (lib "rmc/private/class.rkt") (lib "rmc/main.rkt") (lib "rmc/t/fac.rkt") (lib "rmc/t/libc.rkt") (lib "rmc/lib.rkt") (lib "rmc/h/glfw.rkt") (lib "rmc/h/libc.rkt"))) (name . "rmc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (c . #t) (dsl . #t) (ffi . #t) (ring:1 . #t) (systems . #t))) (source . "git://github.com/jeapostrophe/rmc") (tags . ("c" "dsl" "ffi" "systems")) (versions . #hash((default . #hasheq((checksum . "e11425287cfecb3940f75a25a29f9b74826c2605") (source . "git://github.com/jeapostrophe/rmc") (source_url . "http://github.com/jeapostrophe/rmc/tree/master"))))))) ("rml-core" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rml-core" "doc/rml-core@rml-core/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rml-core.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rml-core.txt"))) (checksum . "8f3ca8b47e552911054f2aa12b296dbf40dad637") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "math-lib" "csv-reading" "mcfly" "rackunit-lib" "racket-index" "scribble-lib" "racket-doc" "math-doc" "sandbox-lib" "cover-coveralls")) (description . "This Package is part of an expected set of packages implementing machine learning capabilities\r\nfor Racket. The core of this package is the management of 'datasets', these datasets are assumed\r\nto be for training and testing of machine learning capabilities.") (implies . ()) (last-checked . 1632904533) (last-edit . 1530203779) (last-updated . 1607219792) (modules . ((lib "rml/test/scribblings.rkt") (lib "rml/private/json.rkt") (lib "rml/main.rkt") (lib "rml/test/not-implemented.rkt") (lib "rml/private/dataset.rkt") (lib "rml/statistics.rkt") (lib "rml/private/csv.rkt") (lib "rml/individual.rkt") (lib "rml/test/individual.rkt") (lib "rml/data.rkt") (lib "rml/test/data-sets.rkt") (lib "rml/classify.rkt") (lib "rml/test/results.rkt") (lib "rml/not-implemented.rkt") (lib "rml/test/classify.rkt") (lib "rml/results.rkt") (lib "rml/test/data.rkt") (lib "rml/scribblings/rml-core.scrbl") (lib "rml/test/statistics.rkt"))) (name . "rml-core") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johnstonskj@gmail.com . #t) (ml . #t) (ring:1 . #t))) (source . "https://github.com/johnstonskj/rml-core.git") (tags . ("ml")) (versions . #hash((default . #hasheq((checksum . "8f3ca8b47e552911054f2aa12b296dbf40dad637") (source . "https://github.com/johnstonskj/rml-core.git") (source_url . "https://github.com/johnstonskj/rml-core.git"))))))) ("rml-decisiontrees" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rml-decisiontrees" "doc/rml-decisiontrees@rml-decisiontrees/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rml-decisiontrees.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rml-decisiontrees.txt"))) (checksum . "c3e5bb8a84142b870943b46fbd356171a5c6593c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rml-core" "math-lib" "sandbox-lib" "racket-index" "rackunit-lib" "scribble-lib" "racket-doc" "cover-coveralls")) (description . "This Package is part of a set of packages implementing machine learning capabilities for Racket. This particular package implements support for classification of individuals using decision trees.") (implies . ()) (last-checked . 1632904533) (last-edit . 1533765455) (last-updated . 1612457703) (modules . ((lib "rml-decisiontrees/scribblings/rml-decisiontrees.scrbl") (lib "rml-decisiontrees/test/main.rkt") (lib "rml-decisiontrees/test/scribblings.rkt") (lib "rml-decisiontrees/main.rkt"))) (name . "rml-decisiontrees") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johnstonskj@gmail.com . #t) (ml . #t) (ring:1 . #t))) (source . "https://github.com/johnstonskj/rml-decisiontrees.git") (tags . ("ml")) (versions . #hash((default . #hasheq((checksum . "c3e5bb8a84142b870943b46fbd356171a5c6593c") (source . "https://github.com/johnstonskj/rml-decisiontrees.git") (source_url . "https://github.com/johnstonskj/rml-decisiontrees.git"))))))) ("rml-knn" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rml-knn" "doc/rml-knn@rml-knn/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rml-knn.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rml-knn.txt"))) (checksum . "83e3755c56b1c486b9fc1663b4ef21b2254b9634") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rml-core" "math-lib" "rackunit-lib" "racket-index" "scribble-lib" "racket-doc" "sandbox-lib" "cover-coveralls")) (description . "This Package is part of a set of packages implementing machine learning capabilities for Racket. This particular package implements the K-Nearest Neighbor approach for classification.") (implies . ()) (last-checked . 1632904534) (last-edit . 1530419600) (last-updated . 1537394320) (modules . ((lib "rml-knn/test/classifier.rkt") (lib "rml-knn/classifier.rkt") (lib "rml-knn/test/scribblings.rkt") (lib "rml-knn/main.rkt") (lib "rml-knn/scribblings/rml-knn.scrbl"))) (name . "rml-knn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johnstonskj@gmail.com . #t) (ml . #t) (ring:1 . #t))) (source . "https://github.com/johnstonskj/rml-knn.git") (tags . ("ml")) (versions . #hash((default . #hasheq((checksum . "83e3755c56b1c486b9fc1663b4ef21b2254b9634") (source . "https://github.com/johnstonskj/rml-knn.git") (source_url . "https://github.com/johnstonskj/rml-knn.git"))))))) ("rml-neural" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rml-neural" "doc/rml-neural@rml-neural/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rml-neural.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rml-neural.txt"))) (checksum . "5e3c95ab118007e16ac25627229674894e8c5302") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1550686995) (dependencies . ("base" "math-lib" "plot-gui-lib" "plot-lib" "rackunit-lib" "scribble-lib" "scribble-math" "racket-doc" "racket-index" "sandbox-lib" "cover-coveralls")) (description . "Pedantic implementation of neural networks for deep learning in Racket") (implies . ()) (last-checked . 1632904534) (last-edit . 1550687059) (last-updated . 1553040408) (modules . ((lib "rml-neural/activation.rkt") (lib "rml-neural/scribblings/activation.scrbl") (lib "rml-neural/private/act-struct.rkt") (lib "rml-neural/main.rkt") (lib "rml-neural/private/act-syntax.rkt") (lib "rml-neural/private/act-plot.rkt") (lib "rml-neural/private/contract.rkt") (lib "rml-neural/tests/rml-neural.rkt") (lib "rml-neural/perceptron.rkt") (lib "rml-neural/scribblings/rml-neural.scrbl") (lib "rml-neural/scribblings/_rml-neural.scrbl") (lib "rml-neural/tests/test-doc-complete.rkt") (lib "rml-neural/private/rml-neural.rkt") (lib "rml-neural/cost.rkt") (lib "rml-neural/flmatrix.rkt") (lib "rml-neural/scribblings/act-plots.rkt"))) (name . "rml-neural") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johnstonskj@gmail.com . #t) (ml . #t) (ring:1 . #t))) (source . "https://github.com/johnstonskj/rml-neural.git") (tags . ("ml")) (versions . #hash((default . #hasheq((checksum . "5e3c95ab118007e16ac25627229674894e8c5302") (source . "https://github.com/johnstonskj/rml-neural.git") (source_url . "https://github.com/johnstonskj/rml-neural.git"))))))) ("rockstar" . #hasheq((author . "whichxjy@gmail.com") (authors . ("whichxjy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rockstar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rockstar.txt"))) (checksum . "47723774e7ec6995eedd8fba27856b58ab056f71") (checksum-error . #f) (collection . "rockstar") (conflicts . ()) (date-added . 1568235950) (dependencies . ("base" "beautiful-racket-lib" "brag-lib" "rackunit-lib")) (description . "Racket-imple\u00ADmented Rockstar") (implies . ()) (last-checked . 1632904534) (last-edit . 1568235950) (last-updated . 1569412482) (modules . ((lib "rockstar/lexer-test.rkt") (lib "rockstar/expander.rkt") (lib "rockstar/tokenize-only.rkt") (lib "rockstar/tokenizer.rkt") (lib "rockstar/parse-only.rkt") (lib "rockstar/lexer.rkt") (lib "rockstar/parser.rkt") (lib "rockstar/preprocessor-test.rkt") (lib "rockstar/main.rkt") (lib "rockstar/preprocessor.rkt"))) (name . "rockstar") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:whichxjy@gmail.com . #t) (ring:1 . #t) (rockstar . #t))) (source . "https://github.com/whichxjy/rockstar-rkt.git?path=rockstar") (tags . ("rockstar")) (versions . #hash((default . #hasheq((checksum . "47723774e7ec6995eedd8fba27856b58ab056f71") (source . "https://github.com/whichxjy/rockstar-rkt.git?path=rockstar") (source_url . "https://github.com/whichxjy/rockstar-rkt.git?path=rockstar"))))))) ("rodot" . #hasheq((author . "") (authors . ()) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Package rodot is missing a required field: 'source\n  context...:\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (implies . ()) (last-checked . 1632904534) (last-edit . 1632906423) (last-updated . 1632436380) (modules . ()) (name . "rodot") (ring . 2) (search-terms . #hasheq((:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (ring:2 . #t))) (source . "") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "") (source_url . ""))))))) ("rokit-racket" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/rokit-racket.txt") (docs . (("main" "rokit-racket" "doc/rokit-racket@rokit-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rokit-racket.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rokit-racket.txt"))) (checksum . "4b5362ff1d2204384270a0ffa786023a17886e0d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("racket-to")) (description . "Racket library for compiling to the Rokit Arduino-based robotics kits.  We use these kits in ThoughtSTEM robotics classes. ") (implies . ()) (last-checked . 1632904534) (last-edit . 1525725090) (last-updated . 1616040001) (modules . ((lib "rokit-racket/arduino-compile.rkt") (lib "rokit-racket/test.rkt") (lib "rokit-racket/rokit-racket.scrbl") (lib "rokit-racket/main.rkt") (lib "rokit-racket/arduino-lang.rkt") (lib "rokit-racket/rokit-racket-module.rkt") (lib "rokit-racket/prefs.rkt"))) (name . "rokit-racket") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t) (robotics . #t))) (source . "https://github.com/thoughtstem/rokit-racket.git?path=rokit-racket") (tags . ("robotics")) (versions . #hash((default . #hasheq((checksum . "4b5362ff1d2204384270a0ffa786023a17886e0d") (source . "https://github.com/thoughtstem/rokit-racket.git?path=rokit-racket") (source_url . "https://github.com/thoughtstem/rokit-racket.git?path=rokit-racket"))))))) ("roman-numeral" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "roman-numeral" "doc/roman-numeral@roman-numeral/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/roman-numeral.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/roman-numeral.txt"))) (checksum . "d13c66b19438060fc42773ed2db526d1a71e8129") (checksum-error . #f) (collection . "roman-numeral") (conflicts . ()) (dependencies . (("base" #:version "6.4") "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Utilities for parsing and writing Roman numerals") (implies . ()) (last-checked . 1632904537) (last-edit . 1501020510) (last-updated . 1622183219) (modules . ((lib "roman-numeral/scribblings/roman-numeral.scrbl") (lib "roman-numeral/main.rkt"))) (name . "roman-numeral") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (parser . #t) (parsing . #t) (ring:1 . #t) (util . #t) (utility . #t))) (source . "git://github.com/LiberalArtist/roman-numeral") (tags . ("parser" "parsing" "util" "utility")) (versions . #hash((default . #hasheq((checksum . "d13c66b19438060fc42773ed2db526d1a71e8129") (source . "git://github.com/LiberalArtist/roman-numeral") (source_url . "http://github.com/LiberalArtist/roman-numeral/tree/master"))))))) ("roomba" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "roomba" "doc/roomba@roomba/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/roomba.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/roomba.txt"))) (checksum . "7d3968beb6d16886038e6b3875144d074990ef33") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "scribble-lib" "scribble-lib" "racket-doc" "overeasy")) (description . "iRobot Roomba/Create Interface") (implies . ()) (last-checked . 1632904537) (last-edit . 1456463423) (last-updated . 1502816404) (modules . ((lib "roomba/roomba.scrbl") (lib "roomba/main.rkt") (lib "roomba/roomba.rkt") (lib "roomba/roomba-doc-utils.rkt"))) (name . "roomba") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t) (robotics . #t))) (source . "http://www.neilvandyke.org/racket/roomba.zip") (tags . ("robotics")) (versions . #hash((default . #hasheq((checksum . "7d3968beb6d16886038e6b3875144d074990ef33") (source . "http://www.neilvandyke.org/racket/roomba.zip") (source_url . "http://www.neilvandyke.org/racket/roomba.zip"))))))) ("rosetta" . #hasheq((author . "antonio.menezes.leitao@gmail.com") (authors . ("antonio.menezes.leitao@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/rosetta.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rosetta.txt") (test-failure-log . "server/built/test-fail/rosetta.txt") (test-success-log . #f))) (checksum . "38aeafd730f93edaec7474106e84dae6d8bc1261") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "") (implies . ()) (last-checked . 1632904538) (last-edit . 1444488892) (last-updated . 1568539001) (modules . ((lib "rosetta/base/shapes.rkt") (lib "rosetta/simulation/simulation.rkt") (lib "rosetta/revit/pbContracts.rkt") (lib "rosetta/autocad-native.rkt") (lib "rosetta/archicad/geometry.rkt") (lib "rosetta/archicad/communication.rkt") (lib "rosetta/tikz/backend.rkt") (lib "rosetta/revit/backend.rkt") (lib "rosetta/base/bim-operations.rkt") (lib "rosetta/sketchup/primops.rkt") (lib "rosetta/revit-server.rkt") (lib "rosetta/base/com.rkt") (lib "rosetta/revit/rosetta/protobuf1/syntax.rkt") (lib "rosetta/archicad/protobuf1/encoding.rkt") (lib "rosetta/revit/rosetta/protobuf1/encoding.rkt") (lib "rosetta/base/typed-com.rkt") (lib "rosetta/archicad/backend.rkt") (lib "rosetta/util/delaunay.rkt") (lib "rosetta/base/enums.rkt") (lib "rosetta/revit-server/backend.rkt") (lib "rosetta/tikz/main.rkt") (lib "rosetta/rhino.rkt") (lib "rosetta/robot/backend.rkt") (lib "rosetta/autocad/ac-enums.rkt") (lib "rosetta/sketchup.rkt") (lib "rosetta/rhinoceros/rh-com.rkt") (lib "rosetta/revit/main.rkt") (lib "rosetta/archicad/protobuf1/protobuf.rkt") (lib "rosetta/base/coord.rkt") (lib "rosetta/autocad.rkt") (lib "rosetta/base/connection.rkt") (lib "rosetta/revit/rosetta/protobuf1/protobuf.rkt") (lib "rosetta/base/bim-families.rkt") (lib "rosetta/revit/rosetta/protobuf1/reflection.rkt") (lib "rosetta/autocad-server/primitives.rkt") (lib "rosetta/archicad/objects.rkt") (lib "rosetta/main.rkt") (lib "rosetta/robot/robot-com.rkt") (lib "rosetta/base/raw-connection.rkt") (lib "rosetta/revit-server/primitives.rkt") (lib "rosetta/archicad/inspector.rkt") (lib "rosetta/tikz/primops.rkt") (lib "rosetta/autocad/ac-com.rkt") (lib "rosetta/robot/robot-enums.rkt") (lib "rosetta/archicad/protobuf1/syntax.rkt") (lib "rosetta/util/geometry.rkt") (lib "rosetta/lighting-simulation.rkt") (lib "rosetta/autocad-server/backend.rkt") (lib "rosetta/tikz.rkt") (lib "rosetta/simulation/materials.rkt") (lib "rosetta/autocad/main.rkt") (lib "rosetta/revit/racketSide.rkt") (lib "rosetta/archicad/protobuf1/reflection.rkt") (lib "rosetta/revit.rkt") (lib "rosetta/archicad/install.rkt") (lib "rosetta/sketchup/backend.rkt") (lib "rosetta/archicad.rkt") (lib "rosetta/rhinoceros/backend.rkt") (lib "rosetta/util/excel.rkt") (lib "rosetta/archicad/messages.rkt") (lib "rosetta/autocad/backend.rkt") (lib "rosetta/autocad-server.rkt") (lib "rosetta/base/utils.rkt"))) (name . "rosetta") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:antonio.menezes.leitao@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/aptmcl/rosetta") (tags . ()) (versions . #hash((default . #hasheq((checksum . "38aeafd730f93edaec7474106e84dae6d8bc1261") (source . "git://github.com/aptmcl/rosetta") (source_url . "http://github.com/aptmcl/rosetta/tree/master"))))))) ("rosette" . #hasheq((author . "emina@cs.washington.edu") (authors . ("emina@cs.washington.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rosette-guide" "doc/rosette-guide@rosette/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rosette.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rosette.txt"))) (checksum . "7ac31ffbb417bcab1ed8cae0bbe328da17bd6d1e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("custom-load" "sandbox-lib" "scribble-lib" ("racket" #:version "8.0") "r6rs-lib" "rfc6455" "net-lib" "web-server-lib" "rackunit-lib" "slideshow-lib" "gui-lib" "base" "rackunit-doc" "draw-lib" "errortrace-lib" "pict-lib" "pict-doc" "scribble-lib" "racket-doc" "gui-doc" "errortrace-doc")) (description . "The Rosette Language") (implies . ()) (last-checked . 1632904541) (last-edit . 1458871007) (last-updated . 1627083387) (modules . ((lib "sdsl/synthcl/test/grammar.rkt") (lib "test/base/vc.rkt") (lib "sdsl/websynth/benchmarks/alanon_arkansas_2.rkt") (lib "test/config.rkt") (lib "test/base/bitvector.rkt") (lib "rosette/lib/angelic.rkt") (lib "rosette/lib/trace/mock-server.rkt") (lib "rosette/lib/profile/renderer/renderer.rkt") (lib "rosette/base/adt/generic.rkt") (lib "sdsl/synthcl/examples/fastWalshTransform/synth/kernel.rkt") (lib "rosette/guide/scribble/rosette-guide.scrbl") (lib "sdsl/websynth/benchmarks/alanon_arkansas_16.rkt") (lib "rosette/guide/scribble/datatypes/equality.scrbl") (lib "sdsl/websynth/test/itunes100_4.rkt") (lib "sdsl/ifc/value.rkt") (lib "sdsl/websynth/test/alanon_arkansas_4.rkt") (lib "rosette/base/core/reporter.rkt") (lib "test/trace/code/assertion.rkt") (lib "sdsl/ifc/test.rkt") (lib "rosette/lib/profile/renderer/report/generic.rkt") (lib "rosette/guide/scribble/libs/rosette-libs.scrbl") (lib "rosette/guide/scribble/libs/calc-lang.rkt") (lib "rosette/guide/scribble/forms/racket-forms.scrbl") (lib "sdsl/fsm/viz.rkt") (lib "rosette/guide/scribble/reflection/value-reflection.scrbl") (lib "sdsl/synthcl/model/flags.rkt") (lib "rosette/lib/util/syntax-properties.rkt") (lib "rosette/solver/smt/server.rkt") (lib "rosette/base/form/module.rkt") (lib "sdsl/synthcl/examples/matrixMultiply/verify/host-buggy.rkt") (lib "sdsl/synthcl/lang/main.rkt") (lib "sdsl/ifc/basic.rkt") (lib "test/base/term.rkt") (lib "rosette/guide/scribble/util/clean.rkt") (lib "sdsl/fsm/demo.rkt") (lib "test/base/push-pop.rkt") (lib "rosette/base/core/merge.rkt") (lib "sdsl/ifc/call.rkt") (lib "sdsl/websynth/websynth.rkt") (lib "sdsl/synthcl/test/typecheck.rkt") (lib "rosette/solver/smt/cmd.rkt") (lib "rosette/lib/profile/renderer/report/callgraph.rkt") (lib "sdsl/websynth/test/itunes100_16.rkt") (lib "sdsl/synthcl/examples/matrixMultiply/verify/test.rkt") (lib "sdsl/websynth/test/alanon_arkansas_8.rkt") (lib "test/query/synthax.rkt") (lib "rosette/guide/scribble/libs/libraries.scrbl") (lib "test/trace/code/toplevel.rkt") (lib "rosette/lib/profile/renderer/syntax.rkt") (lib "test/trace/code/infeasible-solver.rkt") (lib "sdsl/synthcl/lang/types.rkt") (lib "rosette/lib/profile/renderer/report.rkt") (lib "rosette/solver/smt/z3.rkt") (lib "sdsl/synthcl/model/errors.rkt") (lib "rosette/lib/profile/compile.rkt") (lib "rosette/solver/solver.rkt") (lib "test/profile/test.rkt") (lib "test/base/generics.rkt") (lib "test/trace/code/macro-define.rkt") (lib "rosette/lib/trace/tool.rkt") (lib "test/query/grammar.rkt") (lib "rosette/guide/scribble/datatypes/bools+ints+reals.scrbl") (lib "test/base/finitize.rkt") (lib "sdsl/synthcl/examples/fastWalshTransform/synth/host.rkt") (lib "rosette/base/core/real.rkt") (lib "rosette/guide/scribble/forms/rosette-forms.scrbl") (lib "sdsl/synthcl/examples/fastWalshTransform/verify/test.rkt") (lib "sdsl/synthcl/examples/fastWalshTransform/verify/host.rkt") (lib "test/base/exprs.rkt") (lib "test/trace/code/ex-1-1.rkt") (lib "test/trace/code/no-error.rkt") (lib "test/base/type.rkt") (lib "sdsl/synthcl/examples/matrixMultiply/synth/host.rkt") (lib "test/trace/code/lib.rkt") (lib "sdsl/synthcl/examples/fastWalshTransform/synth/test.rkt") (lib "test/base/store.rkt") (lib "rosette/lib/profile/raco.rkt") (lib "test/trace/code/non-tail.rkt") (lib "sdsl/synthcl/lang/sugar.rkt") (lib "test/trace/code/macro.rkt") (lib "sdsl/bv/examples/easy.rkt") (lib "test/base/common.rkt") (lib "sdsl/bv/lang/fragment.rkt") (lib "rosette/solver/smt/cvc4.rkt") (lib "rosette/base/struct/struct-type.rkt") (lib "sdsl/synthcl/model/context.rkt") (lib "sdsl/synthcl/model/work.rkt") (lib "sdsl/synthcl/model/memory.rkt") (lib "test/trace/code/solver-limitation.rkt") (lib "test/query/solve+.rkt") (lib "test/trace/code/list-2.rkt") (lib "sdsl/synthcl/lang/forms.rkt") (lib "test/trace/stress/non-tail.rkt") (lib "rosette/guide/scribble/datatypes/procedures.scrbl") (lib "test/base/reflect.rkt") (lib "rosette/query/form.rkt") (lib "sdsl/bv/lang/core.rkt") (lib "rosette/guide/scribble/unsafe/unsafe.scrbl") (lib "rosette/private/install.rkt") (lib "rosette/query/finitize.rkt") (lib "rosette/lib/profile/renderer/report/terms.rkt") (lib "rosette/base/core/polymorphic.rkt") (lib "test/base/merge.rkt") (lib "rosette/base/core/bool.rkt") (lib "sdsl/synthcl/model/runtime.rkt") (lib "sdsl/bv/test/easy.rkt") (lib "rosette/lib/profile/graph.rkt") (lib "rosette/guide/scribble/libs/utility-libs.scrbl") (lib "rosette/base/core/equality.rkt") (lib "sdsl/synthcl/examples/sobelFilter/kernel.rkt") (lib "rosette/base/form/app.rkt") (lib "test/trace/perf-runner.rkt") (lib "test/base/distinct.rkt") (lib "sdsl/websynth/test/all-tests.rkt") (lib "test/base/solver.rkt") (lib "rosette/guide/scribble/util/lifted.rkt") (lib "rosette/guide/scribble/util/demo.rkt") (lib "sdsl/synthcl/examples/fastWalshTransform/verify/kernel.rkt") (lib "sdsl/synthcl/examples/sobelFilter/reference.rkt") (lib "rosette/lib/trace/sample-data.rkt") (lib "sdsl/fsm/lib.rkt") (lib "rosette/lib/value-browser.rkt") (lib "rosette/base/core/bitvector.rkt") (lib "test/base/uninterpreted.rkt") (lib "rosette/lib/trace/client-launcher.rkt") (lib "sdsl/synthcl/model/kernel.rkt") (lib "sdsl/websynth/test/itunes100_8.rkt") (lib "rosette/lib/synthax.rkt") (lib "sdsl/websynth/test/imdb250_16.rkt") (lib "rosette/guide/scribble/error-tracing/sum.rkt") (lib "rosette/lib/util/module.rkt") (lib "test/trace/code/infeasible.rkt") (lib "rosette/solver/smt/dec.rkt") (lib "test/trace/code/test-stack.rkt") (lib "sdsl/websynth/test/alanon_arkansas_16.rkt") (lib "rosette/lib/trace/raco.rkt") (lib "sdsl/synthcl/examples/matrixMultiply/synth/test.rkt") (lib "sdsl/synthcl/test/reals.rkt") (lib "sdsl/synthcl/test/memory.rkt") (lib "sdsl/bv/lang/program.rkt") (lib "sdsl/synthcl/examples/toy/synth/kernel.rkt") (lib "rosette/solver/smt/boolector.rkt") (lib "rosette/guide/scribble/datatypes/solvers+solutions.scrbl") (lib "rosette/guide/scribble/performance/performance.scrbl") (lib "sdsl/websynth/test/imdb250_4.rkt") (lib "sdsl/websynth/benchmarks/itunes100_4.rkt") (lib "sdsl/synthcl/lang/util.rkt") (lib "sdsl/synthcl/test/snippets.rkt") (lib "sdsl/synthcl/model/reals.rkt") (lib "test/trace/code/forall.rkt") (lib "sdsl/synthcl/test/all-tests.rkt") (lib "rosette/solver/solution.rkt") (lib "rosette/base/core/distinct.rkt") (lib "test/profile/benchmarks/update-at.rkt") (lib "test/profile/benchmarks/list.rkt") (lib "test/trace/test.rkt") (lib "rosette/lib/profile/reporter.rkt") (lib "test/query/optimize.rkt") (lib "sdsl/synthcl/examples/sobelFilter/host.rkt") (lib "rosette/lib/profile/renderer/report/solver.rkt") (lib "sdsl/websynth/benchmarks/itunes100_8.rkt") (lib "rosette/main.rkt") (lib "test/trace/code/list.rkt") (lib "rosette/base/adt/list.rkt") (lib "sdsl/synthcl/lang/typecheck.rkt") (lib "sdsl/synthcl/model/type.rkt") (lib "rosette/base/struct/struct.rkt") (lib "sdsl/synthcl/examples/toy/synth/host.rkt") (lib "rosette/guide/scribble/datatypes/uninterpreted.scrbl") (lib "rosette/base/core/exn.rkt") (lib "sdsl/bv/lang/log.rkt") (lib "rosette/base/core/forall.rkt") (lib "sdsl/websynth/benchmarks/itunes100_16.rkt") (lib "rosette/lib/match.rkt") (lib "rosette/base/core/store.rkt") (lib "test/trace/code/ex-1-3.rkt") (lib "sdsl/websynth/benchmarks/itunes100_2.rkt") (lib "rosette/lib/util/syntax.rkt") (lib "test/base/vector.rkt") (lib "sdsl/synthcl/lang/operators.rkt") (lib "test/base/quantified.rkt") (lib "test/trace/code/ex-1-2.rkt") (lib "sdsl/fsm/automaton.rkt") (lib "sdsl/bv/bv.rkt") (lib "rosette/guide/scribble/datatypes/pairs.scrbl") (lib "rosette/guide/scribble/datatypes/boxes.scrbl") (lib "sdsl/synthcl/model/operators.rkt") (lib "rosette/base/core/eval.rkt") (lib "rosette/guide/scribble/libs/racket-libs.scrbl") (lib "rosette/base/adt/box.rkt") (lib "rosette/guide/scribble/error-tracing/select.rkt") (lib "rosette/lib/profile/feature.rkt") (lib "rosette/guide/scribble/forms/forms.scrbl") (lib "rosette/lib/trace/compile.rkt") (lib "rosette/base/core/numerics.rkt") (lib "rosette/lib/profile/renderer/noop.rkt") (lib "rosette/guide/scribble/datatypes/vectors.scrbl") (lib "rosette/lib/profile/renderer/heap.rkt") (lib "sdsl/synthcl/model/objects.rkt") (lib "rosette/base/core/function.rkt") (lib "rosette/query/eval.rkt") (lib "sdsl/fsm/query.rkt") (lib "test/trace/code/error.rkt") (lib "rosette/guide/scribble/essentials/essentials.scrbl") (lib "rosette/base/core/procedure.rkt") (lib "rosette/base/struct/generics.rkt") (lib "rosette/lang/reader.rkt") (lib "rosette/guide/scribble/datatypes/test.rkt") (lib "test/query/synthesize.rkt") (lib "test/query/solve.rkt") (lib "rosette/base/adt/bvseq.rkt") (lib "sdsl/synthcl/examples/matrixMultiply/verify/kernel.rkt") (lib "rosette/guide/scribble/performance/xform.rkt") (lib "sdsl/synthcl/lang/builtins.rkt") (lib "rosette/base/form/control.rkt") (lib "test/all-rosette-tests.rkt") (lib "sdsl/synthcl/examples/matrixMultiply/synth/kernel.rkt") (lib "test/trace/code/ex-3.rkt") (lib "rosette/solver/smt/smtlib2.rkt") (lib "test/query/synthax-external.rkt") (lib "sdsl/fsm/fsm.rkt") (lib "rosette/base/core/type.rkt") (lib "sdsl/synthcl/model/program.rkt") (lib "rosette/lib/util/ws-server.rkt") (lib "test/base/eval-guarded.rkt") (lib "sdsl/ifc/machine.rkt") (lib "rosette/base/core/reflect.rkt") (lib "rosette/lib/profile/data.rkt") (lib "sdsl/synthcl/examples/sobelFilter/test.rkt") (lib "rosette/solver/smt/env.rkt") (lib "sdsl/ifc/indistinguishable.rkt") (lib "sdsl/websynth/benchmarks/alanon_arkansas_4.rkt") (lib "rosette/guide/scribble/error-tracing/error-tracing.scrbl") (lib "test/lib/destruct.rkt") (lib "sdsl/bv/examples/hard.rkt") (lib "rosette/lib/destruct.rkt") (lib "rosette/base/adt/seq.rkt") (lib "rosette/solver/smt/base-solver.rkt") (lib "test/trace/code/core-form.rkt") (lib "sdsl/websynth/test/imdb250_8.rkt") (lib "test/profile/benchmarks/exn.rkt") (lib "sdsl/websynth/websynthlib.rkt") (lib "sdsl/bv/test/util.rkt") (lib "rosette/base/adt/vector.rkt") (lib "test/trace/code/test-track-form.rkt") (lib "rosette/guide/scribble/reflection/symbolic-reflection.scrbl") (lib "rosette/base/core/result.rkt") (lib "rosette/safe/lang/reader.rkt") (lib "rosette/base/core/safe.rkt") (lib "sdsl/websynth/test/alanon_arkansas_2.rkt") (lib "rosette/lib/profile/renderer/trace.rkt") (lib "sdsl/websynth/test/itunes100_2.rkt") (lib "sdsl/ifc/verify-EENI-demo.rkt") (lib "rosette/guide/scribble/datatypes/bitvectors.scrbl") (lib "sdsl/ifc/instruction.rkt") (lib "sdsl/websynth/test/imdb250_2.rkt") (lib "sdsl/websynth/benchmarks/imdb250_2.rkt") (lib "sdsl/synthcl/lang/errors.rkt") (lib "test/trace/stress/tail.rkt") (lib "rosette/base/form/define.rkt") (lib "sdsl/websynth/benchmarks/imdb250_16.rkt") (lib "test/trace/code/if.rkt") (lib "test/base/real.rkt") (lib "sdsl/bv/lang/form.rkt") (lib "sdsl/synthcl/examples/toy/verify/kernel.rkt") (lib "rosette/lib/util/streaming-server.rkt") (lib "rosette/guide/scribble/datatypes/defined-datatypes.scrbl") (lib "sdsl/synthcl/model/buffer.rkt") (lib "rosette/query/query.rkt") (lib "sdsl/websynth/dom.rkt") (lib "rosette/guide/scribble/essentials/bvmid.rkt") (lib "rosette/base/core/bvlib.rkt") (lib "sdsl/bv/test/medium.rkt") (lib "test/base/list.rkt") (lib "sdsl/ifc/verify.rkt") (lib "rosette/guide/scribble/reflection/state-reflection.scrbl") (lib "test/base/decode.rkt") (lib "sdsl/synthcl/lang/env.rkt") (lib "sdsl/websynth/benchmarks/imdb250_4.rkt") (lib "test/trace/code/tail.rkt") (lib "test/base/bool.rkt") (lib "sdsl/synthcl/examples/matrixMultiply/verify/host.rkt") (lib "rosette/lib/profile/tool.rkt") (lib "rosette/safe.rkt") (lib "sdsl/bv/examples/medium.rkt") (lib "test/base/bvlib.rkt") (lib "sdsl/synthcl/model/queue.rkt") (lib "rosette/query/core.rkt") (lib "sdsl/ifc/jump.rkt") (lib "test/profile/renderer.rkt") (lib "rosette/lib/roseunit.rkt") (lib "rosette/solver/smt/enc.rkt") (lib "test/base/equality.rkt") (lib "rosette/guide/scribble/welcome/welcome.scrbl") (lib "rosette/base/core/union.rkt") (lib "test/base/bvseq.rkt") (lib "rosette/guide/scribble/libs/bvmul2.rkt") (lib "sdsl/bv/examples/reference.rkt") (lib "sdsl/synthcl/examples/toy/verify/host.rkt") (lib "sdsl/synthcl/test/work.rkt") (lib "rosette/guide/scribble/error-tracing/test.rkt") (lib "test/trace/code/ex-2.rkt") (lib "sdsl/synthcl/test/operators.rkt") (lib "sdsl/bv/test/all-tests.rkt") (lib "sdsl/websynth/benchmarks/alanon_arkansas_8.rkt") (lib "sdsl/bv/lang/bvops.rkt") (lib "test/all-sdsl-tests.rkt") (lib "sdsl/synthcl/model/pointers.rkt") (lib "rosette/base/base.rkt") (lib "sdsl/synthcl/test/more-snippets.rkt") (lib "test/query/verify.rkt") (lib "rosette/base/core/term.rkt") (lib "rosette/lib/trace/report/fix-path.rkt") (lib "test/base/forall.rkt") (lib "rosette/base/core/lift.rkt") (lib "sdsl/websynth/benchmarks/imdb250_8.rkt") (lib "rosette/guide/scribble/datatypes/builtin-datatypes.scrbl") (lib "rosette/lib/profile.rkt") (lib "rosette/lib/profile/record.rkt") (lib "rosette/guide/scribble/refs.scrbl") (lib "sdsl/synthcl/lang/queries.rkt"))) (name . "rosette") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:emina@cs.washington.edu . #t) (ring:1 . #t))) (source . "git://github.com/emina/rosette") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7ac31ffbb417bcab1ed8cae0bbe328da17bd6d1e") (source . "git://github.com/emina/rosette") (source_url . "http://github.com/emina/rosette/tree/master"))))))) ("rosette-extras" . #hasheq((author . "sam@lenary.co.uk") (authors . ("sam@lenary.co.uk")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/rosette-extras.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "66f45e9cddd8ac3e2c9b182e38a71dd49c8ef089") (checksum-error . #f) (collection . "rosette-extras") (conflicts . ()) (dependencies . ("base" "rosette" "rackunit-lib")) (description . "A few extra utilities for Rosette") (implies . ()) (last-checked . 1632904542) (last-edit . 1527791068) (last-updated . 1527791068) (modules . ((lib "rosette-extras/main.rkt") (lib "rosette-extras/synthax.rkt"))) (name . "rosette-extras") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:sam@lenary.co.uk . #t) (ring:1 . #t) (rosette . #t))) (source . "https://github.com/lenary/rosette-extras.git") (tags . ("rosette")) (versions . #hash((default . #hasheq((checksum . "66f45e9cddd8ac3e2c9b182e38a71dd49c8ef089") (source . "https://github.com/lenary/rosette-extras.git") (source_url . "https://github.com/lenary/rosette-extras.git"))))))) ("routy" . #hasheq((author . "dk-junker@ya.ru") (authors . ("dk-junker@ya.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "routy" "doc/routy@routy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/routy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/routy.txt"))) (checksum . "2c48b4649ee102c8f175cae59bf5eeb6d6a041c9") (checksum-error . #f) (collection . "routy") (conflicts . ()) (date-added . 1552813635) (dependencies . ("base" "web-server-lib" "rackunit-lib" "racket-route-match" "response-ext" "scribble-lib" "racket-doc" "rackunit-lib" "web-server-doc")) (description . "Routy is a lightweight high performance HTTP request router for Racket.  ") (implies . ()) (last-checked . 1632904542) (last-edit . 1552813635) (last-updated . 1558200569) (modules . ((lib "routy/test.rkt") (lib "routy/scribblings/routy.scrbl") (lib "routy/main.rkt"))) (name . "routy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dk-junker@ya.ru . #t) (framework . #t) (http . #t) (ring:1 . #t) (router . #t) (web . #t))) (source . "https://github.com/Junker/routy.git") (tags . ("framework" "http" "router" "web")) (versions . #hash((default . #hasheq((checksum . "2c48b4649ee102c8f175cae59bf5eeb6d6a041c9") (source . "https://github.com/Junker/routy.git") (source_url . "https://github.com/Junker/routy.git"))))))) ("rparallel" . #hasheq((author . "fmnt@fmnt.info") (authors . ("fmnt@fmnt.info")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rparallel" "doc/rparallel@rparallel/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rparallel.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rparallel.txt"))) (checksum . "28a7a131aada4d8d9a7890721a32180a03037624") (checksum-error . #f) (collection . "rparallel") (conflicts . ()) (date-added . 1595338560) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "High-level parallel forms ") (implies . ()) (last-checked . 1632904542) (last-edit . 1595338560) (last-updated . 1615845627) (modules . ((lib "rparallel/test.rkt") (lib "rparallel/rparallel.scrbl") (lib "rparallel/main.rkt"))) (name . "rparallel") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:fmnt@fmnt.info . #t) (futures . #t) (parallel . #t) (ring:1 . #t))) (source . "https://codeberg.org/montanari/rparallel.git") (tags . ("futures" "parallel")) (versions . #hash((default . #hasheq((checksum . "28a7a131aada4d8d9a7890721a32180a03037624") (source . "https://codeberg.org/montanari/rparallel.git") (source_url . "https://codeberg.org/montanari/rparallel.git"))))))) ("rpn" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rpn" "doc/rpn@rpn/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rpn.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rpn.txt"))) (checksum . "74ef351cae43bb64ba35a937f7a2ea664a82abdd") (checksum-error . #f) (collection . "rpn") (conflicts . ()) (date-added . 1564559479) (dependencies . ("base" "rebellion" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Data structures for working with programs represented in Reverse Polish Notation (RPN), such as programs written in Forth-like languages.") (implies . ()) (last-checked . 1632904543) (last-edit . 1564559479) (last-updated . 1590883966) (modules . ((lib "rpn/main.scrbl") (lib "rpn/main.rkt"))) (name . "rpn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (data-structures . #t) (forth . #t) (reverse-polish-notation . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/rpn.git") (tags . ("data-structures" "forth" "reverse-polish-notation")) (versions . #hash((default . #hasheq((checksum . "74ef351cae43bb64ba35a937f7a2ea664a82abdd") (source . "https://github.com/jackfirth/rpn.git") (source_url . "https://github.com/jackfirth/rpn.git"))))))) ("rs" . #hasheq((author . "matthijs@rommelhok.com") (authors . ("matthijs@rommelhok.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rs" "doc/rs@rs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rs.txt") (test-failure-log . "server/built/test-fail/rs.txt") (test-success-log . #f))) (checksum . "4ec05adf44019ff153e867612d3eeee7ea586082") (checksum-error . #f) (collection . "rs") (conflicts . ()) (date-added . 1589400774) (dependencies . ("base" "rackunit" "rtmidi" "scribble-lib" "racket-doc")) (description . "rs - the Racket Sequencer - is a live coding tool that lets you sequence MIDI using Racket. A sequence is a simple list of events, you can play multiple sequences simultaneously and sequences can have different lengths and subdivisions so it's easy to do complex polyrhythms and Euclidean sequencing.") (implies . ()) (last-checked . 1632904543) (last-edit . 1590071950) (last-updated . 1618521354) (modules . ((lib "rs/main.rkt") (lib "rs/rs-midi-core.rkt") (lib "rs/rs-e.rkt") (lib "rs/rs-t.rkt") (lib "rs/scribblings/rs.scrbl") (lib "rs/rs-m.rkt") (lib "rs/rs-util.rkt"))) (name . "rs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:matthijs@rommelhok.com . #t) (livecoding . #t) (midi . #t) (midi-sequencer . #t) (ring:1 . #t))) (source . "https://github.com/mcdejonge/rs.git") (tags . ("livecoding" "midi" "midi-sequencer")) (versions . #hash((default . #hasheq((checksum . "4ec05adf44019ff153e867612d3eeee7ea586082") (source . "https://github.com/mcdejonge/rs.git") (source_url . "https://github.com/mcdejonge/rs.git"))))))) ("rs-l" . #hasheq((author . "matthijs@rommelhok.com") (authors . ("matthijs@rommelhok.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rs-l" "doc/rs-l@rs-l/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rs-l.txt") (test-failure-log . "server/built/test-fail/rs-l.txt") (test-success-log . #f))) (checksum . "43616cd03e53b0109826736b461086b7146ed971") (checksum-error . #f) (collection . "rs-l") (conflicts . ()) (date-added . 1590249255) (dependencies . ("base" "rackunit" "rs" "scribble-lib" "racket-doc")) (description . "Library with loop and event tools for rs (the Racket Sequencer)") (implies . ()) (last-checked . 1632904543) (last-edit . 1590249255) (last-updated . 1591475678) (modules . ((lib "rs-l/scribblings/rs-l.scrbl") (lib "rs-l/main.rkt"))) (name . "rs-l") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:matthijs@rommelhok.com . #t) (livecoding . #t) (midi . #t) (midi-sequencer . #t) (ring:1 . #t))) (source . "https://github.com/mcdejonge/rs-l.git") (tags . ("livecoding" "midi" "midi-sequencer")) (versions . #hash((default . #hasheq((checksum . "43616cd03e53b0109826736b461086b7146ed971") (source . "https://github.com/mcdejonge/rs-l.git") (source_url . "https://github.com/mcdejonge/rs-l.git"))))))) ("rsa" . #hasheq((author . "michael.g.bowe@gmail.com") (authors . ("michael.g.bowe@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/rsa.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rsa.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rsa.txt"))) (checksum . "0498189663e984d849ef4f2109cfd32058b247e0") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "An rsa encryption library for racket") (implies . ()) (last-checked . 1632904544) (last-edit . 1475156358) (last-updated . 1475156282) (modules . ((lib "rsa/rsa.rkt"))) (name . "rsa") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:michael.g.bowe@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/mgbowe1/racket-rsa") (tags . ()) (versions . #hash((default . #hasheq((checksum . "0498189663e984d849ef4f2109cfd32058b247e0") (source . "git://github.com/mgbowe1/racket-rsa") (source_url . "http://github.com/mgbowe1/racket-rsa/tree/master"))))))) ("rsc3" . #hasheq((author . "mushk45@gmail.com mkhafate@calpoly.edu clements@racket-lang.org") (authors . ("mushk45@gmail.com" "mkhafate@calpoly.edu" "clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rsc3.txt") (test-failure-log . "server/built/test-fail/rsc3.txt") (test-success-log . #f))) (checksum . "a25985dab29ad951893cd7afa6d86a9371315871") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "gui-lib" "r6rs-lib" "srfi-lib" "srfi-lite-lib" "rackunit-lib")) (description . "The rsc3 SuperCollider client ported to Racket") (implies . ()) (last-checked . 1632904544) (last-edit . 1392515523) (last-updated . 1502816408) (modules . ((lib "oregano/system.rkt") (lib "rhs/rhs.rkt") (lib "rsc3/main.rkt") (lib "rsc3/tests/regression-tests.rkt") (lib "sosc/sosc.rkt") (lib "rsc3/examples/moog-filter.rkt") (lib "rsc3/examples/ring3.rkt") (lib "rsc3/examples/bus-routing.rkt") (lib "sosc/transport.rkt") (lib "oregano/main.rkt") (lib "oregano/sample.rkt") (lib "oregano/examples/filters.rkt") (lib "rsc3/examples/rsc3-sine-play.rkt") (lib "oregano/examples/instrument-example.rkt") (lib "oregano/instrument.rkt") (lib "sosc/bytevector.rkt") (lib "oregano/examples/gui-example.rkt") (lib "oregano/gui.rkt") (lib "oregano/routing.rkt") (lib "sosc/ip.rkt") (lib "rsc3/rsc3.scrbl"))) (name . "rsc3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (SuperCollider . #t) (audio . #t) (author:clements@racket-lang.org . #t) (author:mkhafate@calpoly.edu . #t) (author:mushk45@gmail.com . #t) (music . #t) (osc . #t) (ring:1 . #t))) (source . "git://github.com/quakehead/rsc3") (tags . ("audio" "music" "osc" "SuperCollider")) (versions . #hash((default . #hasheq((checksum . "a25985dab29ad951893cd7afa6d86a9371315871") (source . "git://github.com/quakehead/rsc3") (source_url . "http://github.com/quakehead/rsc3/tree/master"))))))) ("rsound" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rsound" "doc/rsound@rsound/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rsound.txt") (test-failure-log . "server/built/test-fail/rsound.txt") (test-success-log . #f))) (checksum . "39580725993288d4f8495fd988f3d99e8db60613") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("portaudio" "0.1") "base" "data-lib" "gui-lib" "htdp-lib" "math-lib" "plot-lib" "plot-gui-lib" "rackunit-lib" "typed-racket-lib" "drracket-plugin-lib" "memoize" "pict-lib" "wxme-lib" "snip-lib" "scribble-lib" "racket-doc" "wxme-lib")) (description . "A framework for manipulating and playing sounds using the portaudio library. Runs on Windows, Mac OS X, and linux.") (implies . ()) (last-checked . 1632904545) (last-edit . 1384111813) (last-updated . 1604959904) (modules . ((lib "rsound/wxme-rsound-snip.rkt") (lib "rsound/test/test-network.rkt") (lib "rsound/contrib/cs4hs-lib.rkt") (lib "rsound/contrib/cs4hs-lab.rkt") (lib "rsound/integral-cycles.rkt") (lib "rsound/contrib/cs4hs-lab.scrbl") (lib "rsound/write-wav.rkt") (lib "rsound/test/test-paste-util.rkt") (lib "rsound/diagnose.rkt") (lib "rsound/rsound-commander.rkt") (lib "rsound/examples/random-tone-example.rkt") (lib "rsound/test/test-util.rkt") (lib "rsound/read-wav.rkt") (lib "rsound/prefs.rkt") (lib "rsound/draw.rkt") (lib "rsound/test/test-write-wav.rkt") (lib "rsound/test/manual-draw-test.rkt") (lib "rsound/single-cycle.rkt") (lib "rsound/network.rkt") (lib "rsound/drum-samples.rkt") (lib "rsound/test/test-sequencer.rkt") (lib "rsound/examples/sub-sampling.rkt") (lib "rsound/test/check-resample-speed.rkt") (lib "rsound/test/test-filter.rkt") (lib "rsound/test/check-recording.rkt") (lib "rsound/main.rkt") (lib "rsound/test/test-envelope.rkt") (lib "rsound/util.rkt") (lib "rsound/test/test-read-wav.rkt") (lib "rsound/test/test-single-cycle.rkt") (lib "rsound/test/check-c-lib-speedup.rkt") (lib "rsound/test/test-s16vector-add.rkt") (lib "rsound/test/test-fsound.rkt") (lib "rsound/test/test-make-tone.rkt") (lib "rsound/filter.rkt") (lib "rsound/examples/piano-samples.rkt") (lib "rsound/test/manual-test-big-draw.rkt") (lib "rsound/private/s16vector-add.rkt") (lib "rsound/examples/markov-model.rkt") (lib "rsound/fsound.rkt") (lib "rsound/test/test-rsound.rkt") (lib "rsound/filter-typed.rkt") (lib "rsound/test/check-timing.rkt") (lib "rsound/test/check-signal-speed.rkt") (lib "rsound/stream-play.rkt") (lib "rsound/private/makefile-generate.rkt") (lib "rsound/examples/test-audio-filtering.rkt") (lib "rsound/rsound.scrbl") (lib "rsound/paste-util.rkt") (lib "rsound/contrib/crush.rkt") (lib "rsound/common.rkt") (lib "rsound/rsound.rkt") (lib "rsound/wavetable.rkt") (lib "rsound/examples/quantize-looper.rkt") (lib "rsound/piano-tones.rkt") (lib "rsound/test/test-rsound-commander.rkt") (lib "rsound/envelope.rkt") (lib "rsound/test/check-math-fft-speed.rkt") (lib "rsound/looper.rkt") (lib "rsound/tool.rkt") (lib "rsound/contrib/adventure-kid-waveforms.rkt") (lib "rsound/examples/gogo.rkt") (lib "rsound/contrib/drum-machine.rkt") (lib "rsound/examples/bach-notes.rkt") (lib "rsound/reverb.rkt") (lib "rsound/contrib/bassdrum.rkt") (lib "rsound/signals.scrbl") (lib "rsound/test/manual-test-latency.rkt") (lib "rsound/test/manual-stream-play-test.rkt") (lib "rsound/test/manual-playing-signal-block-test.rkt") (lib "rsound/examples/sequencer-playing-example.rkt") (lib "rsound/test/manual-playing-test.rkt") (lib "rsound/test/manual-test-fft.rkt") (lib "rsound/examples/harmonic-overlay.rkt") (lib "rsound/rsound-snip.rkt") (lib "rsound/test/plot-signal.rkt") (lib "rsound/test/interactive-drr-frequency-response.rkt") (lib "rsound/define-argcheck.rkt") (lib "rsound/test/test-reverb.rkt") (lib "rsound/sequencer.rkt") (lib "rsound/test/manual-play-stream-latency-test.rkt") (lib "rsound/frequency-response.rkt") (lib "rsound/examples/katy-sliders.rkt"))) (name . "rsound") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (ffi . #t) (io . #t) (ring:1 . #t))) (source . "github://github.com/jbclements/RSound/pre-6/") (tags . ("audio" "ffi" "io")) (versions . #hash(("5.93" . #hasheq((checksum . "39580725993288d4f8495fd988f3d99e8db60613") (source . "github://github.com/jbclements/RSound/pre-6/") (source_url . "http://github.com/jbclements/RSound/tree/pre-6/"))) ("5.92" . #hasheq((checksum . "39580725993288d4f8495fd988f3d99e8db60613") (source . "github://github.com/jbclements/RSound/pre-6/") (source_url . "http://github.com/jbclements/RSound/tree/pre-6/"))) (default . #hasheq((checksum . "c699db1ffae4cf0185c46bdc059d7879d40614ce") (source . "github://github.com/jbclements/RSound/master/") (source_url . "http://github.com/jbclements/RSound/tree/master/"))) ("5.3.2" . #hasheq((checksum . "39580725993288d4f8495fd988f3d99e8db60613") (source . "github://github.com/jbclements/RSound/pre-6/") (source_url . "http://github.com/jbclements/RSound/tree/pre-6/"))) ("5.3.4" . #hasheq((checksum . "39580725993288d4f8495fd988f3d99e8db60613") (source . "github://github.com/jbclements/RSound/pre-6/") (source_url . "http://github.com/jbclements/RSound/tree/pre-6/"))) ("5.3.3" . #hasheq((checksum . "39580725993288d4f8495fd988f3d99e8db60613") (source . "github://github.com/jbclements/RSound/pre-6/") (source_url . "http://github.com/jbclements/RSound/tree/pre-6/"))) ("5.3.6" . #hasheq((checksum . "39580725993288d4f8495fd988f3d99e8db60613") (source . "github://github.com/jbclements/RSound/pre-6/") (source_url . "http://github.com/jbclements/RSound/tree/pre-6/"))) ("5.3.5" . #hasheq((checksum . "39580725993288d4f8495fd988f3d99e8db60613") (source . "github://github.com/jbclements/RSound/pre-6/") (source_url . "http://github.com/jbclements/RSound/tree/pre-6/"))))))) ("rsvg" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rsvg" "doc/rsvg@rsvg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rsvg.txt") (test-failure-log . "server/built/test-fail/rsvg.txt") (test-success-log . #f))) (checksum . "9a9c82801e40622238794fdac556339ac0a6c912") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "pict-lib" "pict-doc" "scribble-lib" "rackunit-lib" "scribble-lib" "pict-lib" "draw-doc" "racket-doc" "slideshow-doc")) (description . "FFI bindings to libRSVG, a library for loading SVG documents") (implies . ()) (last-checked . 1632904546) (last-edit . 1369787451) (last-updated . 1620175013) (modules . ((lib "rsvg/rsvg.rkt") (lib "rsvg/tests/tests.rkt") (lib "rsvg/main.rkt") (lib "rsvg/rsvg.scrbl"))) (name . "rsvg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (graphics . #t) (ring:1 . #t) (svg . #t))) (source . "github://github.com/takikawa/racket-rsvg/master") (tags . ("graphics" "svg")) (versions . #hash((default . #hasheq((checksum . "9a9c82801e40622238794fdac556339ac0a6c912") (source . "github://github.com/takikawa/racket-rsvg/master") (source_url . "http://github.com/takikawa/racket-rsvg/tree/master"))))))) ("rtmidi" . #hasheq((author . "clements@racket-lang.org m4burns@uwaterloo.ca") (authors . ("clements@racket-lang.org" "m4burns@uwaterloo.ca")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rtmidi" "doc/rtmidi@rtmidi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rtmidi.txt") (test-failure-log . "server/built/test-fail/rtmidi.txt") (test-success-log . #f))) (checksum . "11879d2e6a3eea7d1766d58123fe89363831313f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "RtMidi provides racket bindings for the RtMidi library, thus enabling racket programs to send and receive MIDI events.") (implies . ()) (last-checked . 1632904546) (last-edit . 1415741132) (last-updated . 1616998521) (modules . ((lib "rtmidi/rtmidi-example.rkt") (lib "rtmidi/rtmidi.scrbl") (lib "rtmidi/main.rkt"))) (name . "rtmidi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (author:m4burns@uwaterloo.ca . #t) (io . #t) (midi . #t) (ring:1 . #t))) (source . "git://github.com/jbclements/rtmidi") (tags . ("audio" "io" "midi")) (versions . #hash((default . #hasheq((checksum . "11879d2e6a3eea7d1766d58123fe89363831313f") (source . "git://github.com/jbclements/rtmidi") (source_url . "http://github.com/jbclements/rtmidi/tree/master"))))))) ("rtnl" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rtnl.txt") (test-failure-log . "server/built/test-fail/rtnl.txt") (test-success-log . #f))) (checksum . "53cf9eb3d1927cd4357ebdf785ffb58cacff6c3e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1")) (description . "Racket FFI Bindings for the Route-Netlink Library") (implies . ()) (last-checked . 1632904547) (last-edit . 1370358707) (last-updated . 1502816414) (modules . ((lib "rtnl/main.rkt"))) (name . "rtnl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (linux . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-rtnl/master") (tags . ("ffi" "linux")) (versions . #hash((default . #hasheq((checksum . "53cf9eb3d1927cd4357ebdf785ffb58cacff6c3e") (source . "github://github.com/mordae/racket-rtnl/master") (source_url . "http://github.com/mordae/racket-rtnl/tree/master"))))))) ("ruckus" . #hasheq((author . "code@cliffle.com") (authors . ("code@cliffle.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ruckus" "doc/ruckus@ruckus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ruckus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ruckus.txt"))) (checksum . "62cd4a00837783a88a007c2d5979909a4e86ca0f") (checksum-error . #f) (collection . "ruckus") (conflicts . ()) (dependencies . ("base" "gui-lib" "math-lib" "opengl" "racket-doc")) (description . "Procedural CAD system for solid modeling") (implies . ()) (last-checked . 1632904547) (last-edit . 1454611218) (last-updated . 1502816414) (modules . ((lib "ruckus/out/binary-stl.rkt") (lib "ruckus/ex/capsule.rkt") (lib "ruckus/ex/box.rkt") (lib "ruckus/core/compiler/enumerate.rkt") (lib "ruckus/out/marching-tets.rkt") (lib "ruckus/viz/spheretrace-viewer.rkt") (lib "ruckus/out/marching-foo.rkt") (lib "ruckus/doc/prereq.scrbl") (lib "ruckus/ex/reflect-distance.rkt") (lib "ruckus/doc/utils.rkt") (lib "ruckus/core/df-prims.rkt") (lib "ruckus/core/lazy-require.rkt") (lib "ruckus/ex/interpolation-surface.rkt") (lib "ruckus/lang/state.rkt") (lib "ruckus/ex/multi/top.rkt") (lib "ruckus/core/compiler/lower.rkt") (lib "ruckus/core/compiler/racket.rkt") (lib "ruckus/out/marching-cubes.rkt") (lib "ruckus/viz/viewer.rkt") (lib "ruckus/lang/rktdump.rkt") (lib "ruckus/core/model.rkt") (lib "ruckus/ex/holography.rkt") (lib "ruckus/lang/mlang.rkt") (lib "ruckus/core/compiler/canon.rkt") (lib "ruckus/viz/shaderdump.rkt") (lib "ruckus/ex/radial-repeat.rkt") (lib "ruckus/doc/internals/compiler.scrbl") (lib "ruckus/doc/tools.scrbl") (lib "ruckus/lang/evaluator.rkt") (lib "ruckus/out/marching-squares.rkt") (lib "ruckus/main.rkt") (lib "ruckus/lang/colors.rkt") (lib "ruckus/ex/two-d.rkt") (lib "ruckus/doc/internals/math.scrbl") (lib "ruckus/viz/glsl.rkt") (lib "ruckus/lang/edsl.rkt") (lib "ruckus/lang/interpolation.rkt") (lib "ruckus/ex/multi/part-b.rkt") (lib "ruckus/lang/loader.rkt") (lib "ruckus/doc/internals.scrbl") (lib "ruckus/lang/reader.rkt") (lib "ruckus/out/surface.rkt") (lib "ruckus/core/math.rkt") (lib "ruckus/out/outline.rkt") (lib "ruckus/viz/two-viewer.rkt") (lib "ruckus/lang/astdump.rkt") (lib "ruckus/lang/irdump.rkt") (lib "ruckus/ex/multi/part-a.rkt") (lib "ruckus/out/descent3.rkt") (lib "ruckus/doc/whirlwind.scrbl") (lib "ruckus/viz/view2d.rkt") (lib "ruckus/doc/ruckus.scrbl") (lib "ruckus/doc/basics.scrbl") (lib "ruckus/viz/view3d.rkt") (lib "ruckus/ex/test.rkt"))) (name . "ruckus") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:code@cliffle.com . #t) (cad . #t) (graphics . #t) (ring:1 . #t) (scientific . #t))) (source . "git://github.com/cbiffle/ruckus") (tags . ("cad" "graphics" "scientific")) (versions . #hash((default . #hasheq((checksum . "62cd4a00837783a88a007c2d5979909a4e86ca0f") (source . "git://github.com/cbiffle/ruckus") (source_url . "http://github.com/cbiffle/ruckus/tree/master"))))))) ("ruinit" . #hasheq((author . "lukas.lazarek@eecs.northwestern.edu lukasalazarek@gmail.com") (authors . ("lukas.lazarek@eecs.northwestern.edu" "lukasalazarek@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ruinit.txt") (test-failure-log . "server/built/test-fail/ruinit.txt") (test-success-log . #f))) (checksum . "9afaab5d419557060bc9d360bdc042252406d5ff") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1554313706) (dependencies . ("base" "rackunit" "racket-doc" "scribble-lib")) (description . "A small unit testing framework.") (implies . ()) (last-checked . 1632904547) (last-edit . 1554314732) (last-updated . 1587696228) (modules . ((lib "scribblings/ruinit/ruinit-doc.scrbl") (lib "ruinit/ruinit-tests.rkt") (lib "ruinit/diff/diff.rkt") (lib "ruinit/ruinit.rkt") (lib "ruinit/test-env.rkt") (lib "ruinit/ruinit-result-combinators.rkt") (lib "ruinit/main.rkt"))) (name . "ruinit") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lukas.lazarek@eecs.northwestern.edu . #t) (author:lukasalazarek@gmail.com . #t) (ring:1 . #t) (testing . #t))) (source . "https://github.com/LLazarek/ruinit.git") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "9afaab5d419557060bc9d360bdc042252406d5ff") (source . "https://github.com/LLazarek/ruinit.git") (source_url . "https://github.com/LLazarek/ruinit.git"))))))) ("runomatic" . #hasheq((author . "winston@ml1.net") (authors . ("winston@ml1.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/runomatic.txt") (docs . (("main" "runomatic" "doc/runomatic@runomatic/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/runomatic.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/runomatic.txt"))) (checksum . "1043169259980f6092ba2aa13d370c13953c5955") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1602482858) (dependencies . ("base" "html-parsing" "gregor" "request" "sxml")) (description . "A bot and API client for runogame.com") (implies . ()) (last-checked . 1632904547) (last-edit . 1602482858) (last-updated . 1603119334) (modules . ((lib "runomatic/types.rkt") (lib "runomatic/main.rkt") (lib "runomatic/runomatic.scrbl") (lib "runomatic/client.rkt") (lib "runomatic/bot.rkt"))) (name . "runomatic") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (api . #t) (author:winston@ml1.net . #t) (client . #t) (client-api . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/winny-/runomatic.git") (tags . ("api" "client" "client-api" "web")) (versions . #hash((default . #hasheq((checksum . "1043169259980f6092ba2aa13d370c13953c5955") (source . "https://github.com/winny-/runomatic.git") (source_url . "https://github.com/winny-/runomatic.git"))))))) ("russia-phonologie" . #hasheq((author . "madatao71@gmail.com") (authors . ("madatao71@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/russia-phonologie.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/.git\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (description . "transform graphie to phonologie") (implies . ()) (last-checked . 1632904548) (last-edit . 1544954161) (last-updated . 1621810004) (modules . ()) (name . "russia-phonologie") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-tag: . #t) (author:madatao71@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "https://github.com/.git") (source_url . "https://github.com/.git"))))))) ("russian" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "russian" "doc/russian@russian/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/russian.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/russian.txt"))) (checksum . "f2c93e3a680b4fcfe147099b8fa99bb7062d0674") (checksum-error . #f) (collection . "russian") (conflicts . ()) (dependencies . ("base" "srfi-lite-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Russian internationalization bits") (implies . ()) (last-checked . 1632904548) (last-edit . 1525272344) (last-updated . 1563789707) (modules . ((lib "russian/scribblings/russian.scrbl") (lib "russian/date.rkt"))) (name . "russian") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (internationalization . #t) (ring:1 . #t))) (source . "https://github.com/Kalimehtar/russian.git") (tags . ("internationalization")) (versions . #hash((default . #hasheq((checksum . "f2c93e3a680b4fcfe147099b8fa99bb7062d0674") (source . "https://github.com/Kalimehtar/russian.git") (source_url . "https://github.com/Kalimehtar/russian.git"))))))) ("russian-lang" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/russian-lang.txt") (docs . (("main" "russian-lang" "doc/russian-lang@russian-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/russian-lang.txt") (test-failure-log . "server/built/test-fail/russian-lang.txt") (test-success-log . #f))) (checksum . "127943052f9e4142bf9d365d2f7382252a810734") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1593973988) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Programming language based on russian language") (implies . ()) (last-checked . 1632904548) (last-edit . 1593973988) (last-updated . 1626148336) (modules . ((lib "1/russian-lang.scrbl") (lib "1/dict.rkt") (lib "1/runtime-config.rkt") (lib "1/indent.rkt") (lib "1/language-info.rkt") (lib "1/reader.rkt") (lib "1/main.rkt") (lib "1/run-fast.rkt"))) (name . "russian-lang") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/Kalimehtar/russian-lang.git") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "127943052f9e4142bf9d365d2f7382252a810734") (source . "https://github.com/Kalimehtar/russian-lang.git") (source_url . "https://github.com/Kalimehtar/russian-lang.git"))))))) ("rwind" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rwind.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rwind.txt"))) (checksum . "5a4f580b0882452f3938aaa1711a6d99570f006f") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("x11" "base" "rackunit-lib" "slideshow-lib" "readline-lib" "gui-lib")) (description . "An X11 window manager written in Racket (still in early stage)") (implies . ()) (last-checked . 1632904548) (last-edit . 1383853326) (last-updated . 1616940933) (modules . ((lib "rwind/rwind.rkt") (lib "rwind/util.rkt") (lib "rwind/main.rkt") (lib "rwind/configure.rkt") (lib "rwind/window.rkt") (lib "rwind/base.rkt") (lib "rwind/launcher.rkt") (lib "rwind/policy/simple.rkt") (lib "rwind/workspace.rkt") (lib "rwind/server.rkt") (lib "rwind/server-sync.rkt") (lib "rwind/keymap.rkt") (lib "rwind/user.rkt") (lib "rwind/events.rkt") (lib "rwind/policy/base.rkt") (lib "rwind/doc-string.rkt") (lib "rwind/client.rkt") (lib "rwind/client2.rkt") (lib "rwind/display.rkt") (lib "rwind/launcher-base.rkt") (lib "rwind/policy/tiling.rkt") (lib "rwind/private/try-layout.rkt") (lib "rwind/color.rkt") (lib "rwind/user-files/config-simple.rkt"))) (name . "rwind") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app . #t) (author:laurent.orseau@gmail.com . #t) (ring:1 . #t) (unix . #t))) (source . "github://github.com/Metaxal/rwind/master") (tags . ("app" "unix")) (versions . #hash((default . #hasheq((checksum . "5a4f580b0882452f3938aaa1711a6d99570f006f") (source . "github://github.com/Metaxal/rwind/master") (source_url . "http://github.com/Metaxal/rwind/tree/master"))))))) ("rws-html-template" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "rws-html-template" "doc/rws-html-template@rws-html-template/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/rws-html-template.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/rws-html-template.txt"))) (checksum . "18af61049ea3adf14472753ccc6ba0602563ff61") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "web-server-lib" "web-server-doc" "mcfly" "html-template")) (description . "Racket Web Server html-template Support") (implies . ()) (last-checked . 1632904549) (last-edit . 1456463485) (last-updated . 1502816415) (modules . ((lib "rws-html-template/rws-html-template.scrbl") (lib "rws-html-template/main.rkt"))) (name . "rws-html-template") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (html . #t) (ring:1 . #t) (sxml . #t) (web . #t))) (source . "http://www.neilvandyke.org/racket/rws-html-template.zip") (tags . ("html" "sxml" "web")) (versions . #hash((default . #hasheq((checksum . "18af61049ea3adf14472753ccc6ba0602563ff61") (source . "http://www.neilvandyke.org/racket/rws-html-template.zip") (source_url . "http://www.neilvandyke.org/racket/rws-html-template.zip"))))))) ("rx" . #hasheq((author . "vervaeck.sam@skynet.be") (authors . ("vervaeck.sam@skynet.be")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/rx.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "562392ae225e112d153860c8aa5555418cf123b7") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: git://github.com/samvv/racket-rx\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ("racket-doc" "gui-doc" "scribble-lib")) (description . "A set of tools and utilities for reactive programming") (implies . ()) (last-checked . 1632904550) (last-edit . 1488525318) (last-updated . 1621810006) (modules . ((lib "rx/main.rkt") (lib "rx/gui.rkt") (lib "rx/event-stream.rkt") (lib "rx/scribblings/rx.scrbl") (lib "rx/event.rkt") (lib "rx/cell.rkt") (lib "rx/event-emitter.rkt"))) (name . "rx") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:vervaeck.sam@skynet.be . #t) (ring:1 . #t) (rx . #t) (tools . #t))) (source . "git://github.com/samvv/racket-rx") (tags . ("rx" "tools")) (versions . #hash((default . #hasheq((checksum . "562392ae225e112d153860c8aa5555418cf123b7") (source . "git://github.com/samvv/racket-rx") (source_url . "http://github.com/samvv/racket-rx/tree/master"))))))) ("s-lib" . #hasheq((author . "vlad.piersec@gmail.com") (authors . ("vlad.piersec@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/s-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/s-lib.txt"))) (checksum . "de6ae621d8ffd670fede37f51212c8cb5a84bcf3") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit")) (description . "A collection of functions for string & word manipulation") (implies . ()) (last-checked . 1632904550) (last-edit . 1401213158) (last-updated . 1502816416) (modules . ((lib "s-lib/main.rkt"))) (name . "s-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:vlad.piersec@gmail.com . #t) (ring:1 . #t) (strings . #t) (words . #t))) (source . "git://github.com/caisah/s-lib") (tags . ("strings" "words")) (versions . #hash((default . #hasheq((checksum . "de6ae621d8ffd670fede37f51212c8cb5a84bcf3") (source . "git://github.com/caisah/s-lib") (source_url . "http://github.com/caisah/s-lib/tree/master"))))))) ("s3-sync" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "s3-sync" "doc/s3-sync@s3-sync/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/s3-sync.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/s3-sync.txt"))) (checksum . "e32ef300e7db30d2559dab5419a9d4a5947ce641") (checksum-error . #f) (collection . "s3-sync") (conflicts . ()) (dependencies . (("aws" #:version "1.8") ("http" #:version "0.2") ("base" #:version "6.0.0.4") "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Sync filesystem with an S3 bucket") (implies . ()) (last-checked . 1632904550) (last-edit . 1394587384) (last-updated . 1626640386) (modules . ((lib "s3-sync/gzip.rkt") (lib "s3-sync/web-config.rkt") (lib "s3-sync/web.rkt") (lib "s3-sync/main.rkt") (lib "s3-sync/s3-sync.scrbl") (lib "s3-sync/routing-rule.rkt") (lib "s3-sync/tests/main.rkt"))) (name . "s3-sync") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (AWS . #t) (author:mflatt@cs.utah.edu . #t) (ring:1 . #t))) (source . "git://github.com/mflatt/s3-sync") (tags . ("AWS")) (versions . #hash((default . #hasheq((checksum . "e32ef300e7db30d2559dab5419a9d4a5947ce641") (source . "git://github.com/mflatt/s3-sync") (source_url . "http://github.com/mflatt/s3-sync/tree/master"))))))) ("sagiri-comm" . #hasheq((author . "yd2dong@uwaterloo.ca") (authors . ("yd2dong@uwaterloo.ca")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/sagiri-comm.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "cd744287cc140a8b61d5d9c2862431e2fa51e72d") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/ProjectNiwl/sagiri-comm.git\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib")) (description . "SAGIRI bindings for Racket") (implies . ()) (last-checked . 1632904551) (last-edit . 1444954405) (last-updated . 1621810007) (modules . ((lib "sagiri-comm/socks5.rkt") (lib "sagiri-comm/hosting.rkt") (lib "sagiri-comm/docs/main.scrbl") (lib "sagiri-comm/main.rkt") (lib "sagiri-comm/get-handle.rkt") (lib "sagiri-comm/docs/spec.scrbl") (lib "sagiri-comm/structs.rkt") (lib "sagiri-comm/connect.rkt"))) (name . "sagiri-comm") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-tag: . #t) (author:yd2dong@uwaterloo.ca . #t) (ring:1 . #t))) (source . "https://github.com/ProjectNiwl/sagiri-comm.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "cd744287cc140a8b61d5d9c2862431e2fa51e72d") (source . "https://github.com/ProjectNiwl/sagiri-comm.git") (source_url . "https://github.com/ProjectNiwl/sagiri-comm.git"))))))) ("sameday" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sameday" "doc/sameday@sameday/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sameday.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sameday.txt"))) (checksum . "20cfc789bacc21941317828496cf15a6a89feee6") (checksum-error . #f) (collection . "sameday") (conflicts . ()) (date-added . 1615738217) (dependencies . ("base" "gregor-lib" "http-easy" "gregor-doc" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "A Racket client for the Sameday API.") (implies . ()) (last-checked . 1632904551) (last-edit . 1615738217) (last-updated . 1615985517) (modules . ((lib "sameday/main.rkt") (lib "sameday/sameday.scrbl") (lib "sameday/client.rkt") (lib "sameday/view.rkt"))) (name . "sameday") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (api . #t) (author:bogdan@defn.io . #t) (client . #t) (delivery . #t) (e-commerce . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-sameday.git") (tags . ("api" "client" "delivery" "e-commerce" "web")) (versions . #hash((default . #hasheq((checksum . "20cfc789bacc21941317828496cf15a6a89feee6") (source . "https://github.com/Bogdanp/racket-sameday.git") (source_url . "https://github.com/Bogdanp/racket-sameday.git"))))))) ("sandbox-lib" . #hash((author . "eli@racket-lang.org") (authors . ("eli@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1626719051) (dependencies . ("scheme-lib" "base" "errortrace-lib")) (description . "Library for sandboxing Racket programs") (implies . ()) (last-checked . 1632904551) (last-edit . 1626719051) (last-updated . 1632667326) (modules . ((lib "racket/sandbox.rkt") (lib "scheme/sandbox.rkt") (lib "racket/private/sandbox-coverage.rkt"))) (name . "sandbox-lib") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "https://github.com/racket/racket.git?path=pkgs%2Fsandbox-lib") (source_url . "https://github.com/racket/racket.git?path=pkgs%2Fsandbox-lib"))) ("5.3.4" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("sasl" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "0a7d5e9372ec0c813fc0b68e1baa5a7819032d00") (checksum-error . #f) (collection . "sasl") (conflicts . ()) (dependencies . ("sasl-lib" "sasl-doc" "base")) (description . "SASL authentication client support") (implies . ("sasl-lib" "sasl-doc")) (last-checked . 1632904551) (last-edit . 1514480114) (last-updated . 1606371847) (modules . ()) (name . "sasl") (ring . 1) (search-terms . #hasheq((author:ryanc@racket-lang.org . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/racket/sasl.git?path=sasl") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "0a7d5e9372ec0c813fc0b68e1baa5a7819032d00") (source . "https://github.com/racket/sasl.git?path=sasl") (source_url . "https://github.com/racket/sasl.git?path=sasl"))))))) ("sasl-doc" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sasl" "doc/sasl@sasl-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "0a7d5e9372ec0c813fc0b68e1baa5a7819032d00") (checksum-error . #f) (collection . "sasl") (conflicts . ()) (dependencies . ("base" "scribble-lib" ("sasl-lib" #:version "1.1") "racket-doc")) (description . "SASL authentication client support") (implies . ()) (last-checked . 1632904552) (last-edit . 1514478473) (last-updated . 1606371848) (modules . ((lib "sasl/sasl.scrbl"))) (name . "sasl-doc") (ring . 1) (search-terms . #hasheq((:docs: . #t) (author:ryanc@racket-lang.org . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/racket/sasl.git?path=sasl-doc") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "0a7d5e9372ec0c813fc0b68e1baa5a7819032d00") (source . "https://github.com/racket/sasl.git?path=sasl-doc") (source_url . "https://github.com/racket/sasl.git?path=sasl-doc"))))))) ("sasl-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "0a7d5e9372ec0c813fc0b68e1baa5a7819032d00") (checksum-error . #f) (collection . "sasl") (conflicts . ()) (dependencies . (("base" #:version "6.10"))) (description . "SASL authentication client support") (implies . ()) (last-checked . 1632904552) (last-edit . 1514478280) (last-updated . 1606371848) (modules . ((lib "sasl/private/stringprep.rkt") (lib "sasl/saslprep.rkt") (lib "sasl/plain.rkt") (lib "sasl/private/base.rkt") (lib "sasl/scram.rkt") (lib "sasl/private/crypto.rkt") (lib "sasl/cram-md5.rkt") (lib "sasl/private/cram-md5.rkt") (lib "sasl/private/intset.rkt") (lib "sasl/main.rkt") (lib "sasl/private/scram.rkt") (lib "sasl/private/saslprep.rkt"))) (name . "sasl-lib") (ring . 1) (search-terms . #hasheq((author:ryanc@racket-lang.org . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/racket/sasl.git?path=sasl-lib") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "0a7d5e9372ec0c813fc0b68e1baa5a7819032d00") (source . "https://github.com/racket/sasl.git?path=sasl-lib") (source_url . "https://github.com/racket/sasl.git?path=sasl-lib"))))))) ("sasl-test" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "0a7d5e9372ec0c813fc0b68e1baa5a7819032d00") (checksum-error . #f) (collection . "sasl") (conflicts . ()) (dependencies . ("base" ("sasl-lib" #:version "1.1") "rackunit-lib")) (description . "SASL authentication client support") (implies . ()) (last-checked . 1632904552) (last-edit . 1514478375) (last-updated . 1606371849) (modules . ((lib "sasl/tests/gsasl.rkt") (lib "sasl/tests/intset.rkt") (lib "sasl/tests/plain.rkt") (lib "sasl/tests/saslprep.rkt") (lib "sasl/tests/scram.rkt") (lib "sasl/tests/cram-md5.rkt"))) (name . "sasl-test") (ring . 1) (search-terms . #hasheq((author:ryanc@racket-lang.org . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/racket/sasl.git?path=sasl-test") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "0a7d5e9372ec0c813fc0b68e1baa5a7819032d00") (source . "https://github.com/racket/sasl.git?path=sasl-test") (source_url . "https://github.com/racket/sasl.git?path=sasl-test"))))))) ("sass" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sass" "doc/sass@sass/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sass.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sass.txt"))) (checksum . "f4784d0da02012976c68034c284ba3cfe55bf428") (checksum-error . #f) (collection . "sass") (conflicts . ()) (date-added . 1566731569) (dependencies . ("base" ("libsass-i386-win32" #:platform #rx"win32.i386") ("libsass-x86_64-linux" #:platform #rx"x86_64-linux") ("libsass-x86_64-macosx" #:platform #rx"x86_64-macosx") ("libsass-x86_64-win32" #:platform #rx"win32.x86_64") "racket-doc" "rackunit-lib" "scribble-lib" ("libsass-i386-win32" #:platform #rx"win32.i386") ("libsass-x86_64-linux" #:platform #rx"x86_64-linux") ("libsass-x86_64-macosx" #:platform #rx"x86_64-macosx") ("libsass-x86_64-win32" #:platform #rx"win32.x86_64"))) (description . "Bindings to libsass.") (implies . ()) (last-checked . 1632904553) (last-edit . 1566731569) (last-updated . 1604087315) (modules . ((lib "sass/sass.scrbl") (lib "sass/main.rkt") (lib "sass/private/libsass.rkt"))) (name . "sass") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (ffi . #t) (frontend . #t) (ring:1 . #t) (sass . #t))) (source . "https://github.com/Bogdanp/racket-sass.git?path=sass") (tags . ("ffi" "frontend" "sass")) (versions . #hash((default . #hasheq((checksum . "f4784d0da02012976c68034c284ba3cfe55bf428") (source . "https://github.com/Bogdanp/racket-sass.git?path=sass") (source_url . "https://github.com/Bogdanp/racket-sass.git?path=sass"))))))) ("satore" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "satore" "doc/satore@satore/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/satore.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/satore.txt"))) (checksum . "24ba20a43a219f8c0efcf1593899a53eca6f19bd") (checksum-error . #f) (collection . "satore") (conflicts . ()) (date-added . 1615306663) (dependencies . ("bazaar" "data-lib" "define2" "global" "math-lib" "text-table" "base" "rackunit-lib" "scribble-lib")) (description . "First order logic theorem prover in CNF without equality but with atom rewrite rules") (implies . ()) (last-checked . 1632904553) (last-edit . 1615307482) (last-updated . 1632400374) (modules . ((lib "satore/main.rkt") (lib "satore/log.rkt") (lib "satore/tests/unification.rkt") (lib "satore/Clause.rkt") (lib "satore/scribblings/satore.scrbl") (lib "satore/rewrite-tree.rkt") (lib "satore/clause.rkt") (lib "satore/tests/trie.rkt") (lib "satore/tests/rewrite-tree.rkt") (lib "satore/saturation.rkt") (lib "satore/tests/Clause.rkt") (lib "satore/tests/saturation.rkt") (lib "satore/tptp.rkt") (lib "satore/unification-tree.rkt") (lib "satore/tests/stress-test1.rkt") (lib "satore/tests/confluence.rkt") (lib "satore/trie.rkt") (lib "satore/interact.rkt") (lib "satore/tests/unification-tree.rkt") (lib "satore/json-output.rkt") (lib "satore/misc.rkt") (lib "satore/unification.rkt") (lib "satore/clause-format.rkt") (lib "satore/tests/misc.rkt") (lib "satore/tests/interact.rkt") (lib "satore/tests/clause.rkt"))) (name . "satore") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (logic . #t) (ring:1 . #t))) (source . "https://github.com/deepmind/deepmind-research.git?path=satore") (tags . ("logic")) (versions . #hash((default . #hasheq((checksum . "24ba20a43a219f8c0efcf1593899a53eca6f19bd") (source . "https://github.com/deepmind/deepmind-research.git?path=satore") (source_url . "https://github.com/deepmind/deepmind-research.git?path=satore"))))))) ("sau-cptr-405" . #hasheq((author . "rordonez@southern.edu") (authors . ("rordonez@southern.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sau-cptr-405" "doc/sau-cptr-405@sau-cptr-405/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sau-cptr-405.txt") (test-failure-log . "server/built/test-fail/sau-cptr-405.txt") (test-success-log . #f))) (checksum . "a7fb41d932b9dafe499c0972bdb8eb9692e8ff91") (checksum-error . #f) (collection . "sau-cptr-405") (conflicts . ()) (date-added . 1579578785) (dependencies . ("base" "compatibility-lib" "drracket" "drracket-plugin-lib" "gui-lib" "htdp-lib" "net-lib" "pconvert-lib" "sandbox-lib" "rackunit-lib" "web-server-lib" "plait" "gui-doc" "racket-doc" "scribble-lib")) (description . "SAU CPTR-405 W20 handin plugin for DrRacket") (implies . ()) (last-checked . 1632904553) (last-edit . 1579578924) (last-updated . 1618611856) (modules . ((lib "sau-cptr-405/client.rkt") (lib "sau-cptr-405/main.rkt") (lib "sau-cptr-405/scribblings/sau-cptr-405.scrbl") (lib "sau-cptr-405/this-collection.rkt") (lib "sau-cptr-405/handin-multi.rkt") (lib "sau-cptr-405/client-gui.rkt") (lib "sau-cptr-405/updater.rkt"))) (name . "sau-cptr-405") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:rordonez@southern.edu . #t) (ring:1 . #t))) (source . "http://computing.southern.edu/rordonez/class/CPTR-405/sau-cptr-405.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a7fb41d932b9dafe499c0972bdb8eb9692e8ff91") (source . "http://computing.southern.edu/rordonez/class/CPTR-405/sau-cptr-405.zip") (source_url . "http://computing.southern.edu/rordonez/class/CPTR-405/sau-cptr-405.zip"))))))) ("sauron" . #hasheq((author . "dannypsnl@gmail.com racket@racket.tw") (authors . ("dannypsnl@gmail.com" "racket@racket.tw")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sauron" "doc/sauron@sauron/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sauron.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sauron.txt"))) (checksum . "170938a0be495c6a971b63fe7e9c957c90fbeab5") (checksum-error . #f) (collection . "sauron") (conflicts . ()) (date-added . 1608231545) (dependencies . ("base" "gui-lib" "net-lib" "data-lib" "drracket-plugin-lib" "drracket-tool-lib" "try-catch-finally-lib" "from-template" "file-watchers" "scribble-lib" "racket-doc" "rackunit-lib" "gui-doc")) (description . "A DrRacket plugin to make it experience like an IDE") (implies . ()) (last-checked . 1632904554) (last-edit . 1629126535) (last-updated . 1630193714) (modules . ((lib "sauron/project/current-project.rkt") (lib "sauron/main.rkt") (lib "sauron/log.rkt") (lib "sauron/cmd/execute.rkt") (lib "sauron/collect/collector.rkt") (lib "sauron/project/manager.rkt") (lib "sauron/collect/record.rkt") (lib "sauron/project/refresh-collect.rkt") (lib "sauron/tool/frame.rkt") (lib "sauron/cmd/raco.rkt") (lib "sauron/tool/bind-key.rkt") (lib "sauron/collect/api.rkt") (lib "sauron/tool/shortcut.rkt") (lib "sauron/scribblings/develop.scrbl") (lib "sauron/project/dir-state.rkt") (lib "sauron/collect/binding.rkt") (lib "sauron/tool/editor.rkt") (lib "sauron/repl/history.rkt") (lib "sauron/tool/repl.rkt") (lib "sauron/version-control/pusher.rkt") (lib "sauron/version-control/panel.rkt") (lib "sauron/scribblings/sauron.scrbl") (lib "sauron/meta.rkt") (lib "sauron/jump-to-def.rkt") (lib "sauron/scribblings/user-guide.scrbl") (lib "sauron/version-control/parse-git.rkt") (lib "sauron/collect/cache.rkt") (lib "sauron/path-util.rkt") (lib "sauron/project/panel.rkt"))) (name . "sauron") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dannypsnl@gmail.com . #t) (author:racket@racket.tw . #t) (drracket . #t) (ide . #t) (ring:1 . #t) (sauron . #t))) (source . "https://github.com/racket-tw/sauron.git#develop") (tags . ("drracket" "ide" "sauron")) (versions . #hash(("1.1.1" . #hasheq((checksum . "d978a5dda51d29a31adc281d98069776bc9b6d58") (source . "https://github.com/racket-tw/sauron.git#d978a5dda51d29a31adc281d98069776bc9b6d58") (source_url . "https://github.com/racket-tw/sauron.git#d978a5dda51d29a31adc281d98069776bc9b6d58"))) (default . #hasheq((checksum . "170938a0be495c6a971b63fe7e9c957c90fbeab5") (source . "https://github.com/racket-tw/sauron.git#develop") (source_url . "https://github.com/racket-tw/sauron.git#develop"))) ("0.2.1" . #hasheq((checksum . "b864df06de9e91988722428057889ae0d37700db") (source . "https://github.com/racket-tw/sauron.git#b864df06de9e91988722428057889ae0d37700db") (source_url . "https://github.com/racket-tw/sauron.git#b864df06de9e91988722428057889ae0d37700db"))) ("0.5" . #hasheq((checksum . "4ae63eeab4fe0d9134e8d7692c26feaef95f8bb5") (source . "https://github.com/racket-tw/sauron.git#4ae63eeab4fe0d9134e8d7692c26feaef95f8bb5") (source_url . "https://github.com/racket-tw/sauron.git#4ae63eeab4fe0d9134e8d7692c26feaef95f8bb5"))) ("0.3" . #hasheq((checksum . "d86e056dc2b171020be3a193d8bc9718981ab9f7") (source . "https://github.com/racket-tw/sauron.git#d86e056dc2b171020be3a193d8bc9718981ab9f7") (source_url . "https://github.com/racket-tw/sauron.git#d86e056dc2b171020be3a193d8bc9718981ab9f7"))) ("0.4" . #hasheq((checksum . "8ca335b08ece7787022541d5ef403e953b07a187") (source . "https://github.com/racket-tw/sauron.git#8ca335b08ece7787022541d5ef403e953b07a187") (source_url . "https://github.com/racket-tw/sauron.git#8ca335b08ece7787022541d5ef403e953b07a187"))) ("1.0" . #hasheq((checksum . "f4125738df0938f1f3c516b8cde6f7a9ca78ab45") (source . "https://github.com/racket-tw/sauron.git#f4125738df0938f1f3c516b8cde6f7a9ca78ab45") (source_url . "https://github.com/racket-tw/sauron.git#f4125738df0938f1f3c516b8cde6f7a9ca78ab45"))) ("1.1" . #hasheq((checksum . "27f8e5ca42768d3d5cad4ce8e033590f7bcdb669") (source . "https://github.com/racket-tw/sauron.git#27f8e5ca42768d3d5cad4ce8e033590f7bcdb669") (source_url . "https://github.com/racket-tw/sauron.git#27f8e5ca42768d3d5cad4ce8e033590f7bcdb669"))) ("1.2" . #hasheq((checksum . "95fbb1029245317a3df4336453e28899bc5becd1") (source . "https://github.com/racket-tw/sauron.git#95fbb1029245317a3df4336453e28899bc5becd1") (source_url . "https://github.com/racket-tw/sauron.git#95fbb1029245317a3df4336453e28899bc5becd1"))) ("1.0.3" . #hasheq((checksum . "21d14c99b16ccbc92e578057f4a8a9b97150cd14") (source . "https://github.com/racket-tw/sauron.git#21d14c99b16ccbc92e578057f4a8a9b97150cd14") (source_url . "https://github.com/racket-tw/sauron.git#21d14c99b16ccbc92e578057f4a8a9b97150cd14"))) ("1.0.4" . #hasheq((checksum . "fa41555c6fcd3c0cb8afb8153e36808fa72123e5") (source . "https://github.com/racket-tw/sauron.git#fa41555c6fcd3c0cb8afb8153e36808fa72123e5") (source_url . "https://github.com/racket-tw/sauron.git#fa41555c6fcd3c0cb8afb8153e36808fa72123e5"))) ("1.0.1" . #hasheq((checksum . "34f9792f7270bff33bd773c946b803a8dd817912") (source . "https://github.com/racket-tw/sauron.git#34f9792f7270bff33bd773c946b803a8dd817912") (source_url . "https://github.com/racket-tw/sauron.git#34f9792f7270bff33bd773c946b803a8dd817912"))) ("1.0.2" . #hasheq((checksum . "094e3678b5d9b27508b1da814f1a3cafee263d00") (source . "https://github.com/racket-tw/sauron.git#094e3678b5d9b27508b1da814f1a3cafee263d00") (source_url . "https://github.com/racket-tw/sauron.git#094e3678b5d9b27508b1da814f1a3cafee263d00"))))))) ("sawzall" . #hasheq((author . "hazel@knightsofthelambdacalcul.us") (authors . ("hazel@knightsofthelambdacalcul.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sawzall.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sawzall.txt"))) (checksum . "a8a428dfbf8d0b7baf999f115358ea335f1252db") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1626723548) (dependencies . ("sawzall-lib" "sawzall-doc")) (description . "A grammar for data wrangling") (implies . ("sawzall-lib" "sawzall-doc")) (last-checked . 1632904557) (last-edit . 1626744123) (last-updated . 1630978793) (modules . ()) (name . "sawzall") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:hazel@knightsofthelambdacalcul.us . #t) (data-frame . #t) (ring:1 . #t))) (source . "https://github.com/ralsei/sawzall.git?path=sawzall#main") (tags . ("data-frame")) (versions . #hash((default . #hasheq((checksum . "a8a428dfbf8d0b7baf999f115358ea335f1252db") (source . "https://github.com/ralsei/sawzall.git?path=sawzall#main") (source_url . "https://github.com/ralsei/sawzall.git?path=sawzall#main"))))))) ("sawzall-doc" . #hasheq((author . "hazel@knightsofthelambdacalcul.us") (authors . ("hazel@knightsofthelambdacalcul.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sawzall" "doc/sawzall@sawzall-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sawzall-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sawzall-doc.txt"))) (checksum . "a8a428dfbf8d0b7baf999f115358ea335f1252db") (checksum-error . #f) (collection . "sawzall-doc") (conflicts . ()) (date-added . 1626723490) (dependencies . ("base" "data-frame" "racket-doc" "sawzall-lib" "scribble-lib" "threading-lib" "threading-doc")) (description . "Documentation for Sawzall") (implies . ()) (last-checked . 1632904557) (last-edit . 1626744153) (last-updated . 1630978799) (modules . ((lib "sawzall-doc/sawzall.scrbl"))) (name . "sawzall-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:hazel@knightsofthelambdacalcul.us . #t) (data-frame . #t) (ring:1 . #t))) (source . "https://github.com/ralsei/sawzall.git?path=sawzall-doc#main") (tags . ("data-frame")) (versions . #hash((default . #hasheq((checksum . "a8a428dfbf8d0b7baf999f115358ea335f1252db") (source . "https://github.com/ralsei/sawzall.git?path=sawzall-doc#main") (source_url . "https://github.com/ralsei/sawzall.git?path=sawzall-doc#main"))))))) ("sawzall-lib" . #hasheq((author . "hazel@knightsofthelambdacalcul.us") (authors . ("hazel@knightsofthelambdacalcul.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sawzall-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sawzall-lib.txt"))) (checksum . "a8a428dfbf8d0b7baf999f115358ea335f1252db") (checksum-error . #f) (collection . "sawzall") (conflicts . ()) (date-added . 1626723453) (dependencies . ("base" "data-frame" "fancy-app" "text-table" "threading-lib")) (description . "A grammar for data wrangling (no documentation)") (implies . ()) (last-checked . 1632904557) (last-edit . 1626744171) (last-updated . 1630978805) (modules . ((lib "sawzall/syntax.rkt") (lib "sawzall/grouped-df.rkt") (lib "sawzall/main.rkt") (lib "sawzall/where.rkt") (lib "sawzall/aggregate.rkt") (lib "sawzall/rectangling.rkt") (lib "sawzall/split.rkt") (lib "sawzall/grouping.rkt") (lib "sawzall/combining-join.rkt") (lib "sawzall/bsearch.rkt") (lib "sawzall/pivot.rkt") (lib "sawzall/rename.rkt") (lib "sawzall/missing-values.rkt") (lib "sawzall/constructors.rkt") (lib "sawzall/display.rkt") (lib "sawzall/slice.rkt") (lib "sawzall/filtering-join.rkt") (lib "sawzall/create.rkt") (lib "sawzall/reorder-df.rkt") (lib "sawzall/slice-spec.rkt") (lib "sawzall/generic-join.rkt") (lib "sawzall/separate.rkt") (lib "sawzall/helpers.rkt") (lib "sawzall/reorder.rkt"))) (name . "sawzall-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:hazel@knightsofthelambdacalcul.us . #t) (data-frame . #t) (ring:1 . #t))) (source . "https://github.com/ralsei/sawzall.git?path=sawzall-lib#main") (tags . ("data-frame")) (versions . #hash((default . #hasheq((checksum . "a8a428dfbf8d0b7baf999f115358ea335f1252db") (source . "https://github.com/ralsei/sawzall.git?path=sawzall-lib#main") (source_url . "https://github.com/ralsei/sawzall.git?path=sawzall-lib#main"))))))) ("sawzall-test" . #hasheq((author . "hazel@knightsofthelambdacalcul.us") (authors . ("hazel@knightsofthelambdacalcul.us")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sawzall-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sawzall-test.txt"))) (checksum . "a8a428dfbf8d0b7baf999f115358ea335f1252db") (checksum-error . #f) (collection . "sawzall-test") (conflicts . ()) (date-added . 1626723520) (dependencies . ("base" "data-frame" "rackunit-lib" "sawzall-lib" "threading-lib")) (description . "Tests for Sawzall") (implies . ()) (last-checked . 1632904557) (last-edit . 1626744195) (last-updated . 1630978810) (modules . ((lib "sawzall-test/test-data.rkt") (lib "sawzall-test/filtering-test.rkt") (lib "sawzall-test/sorting-test.rkt") (lib "sawzall-test/create-test.rkt") (lib "sawzall-test/pivot-test.rkt") (lib "sawzall-test/slice-test.rkt") (lib "sawzall-test/util.rkt") (lib "sawzall-test/aggregating-test.rkt") (lib "sawzall-test/combining-join-test.rkt") (lib "sawzall-test/rectangling-test.rkt") (lib "sawzall-test/separate-test.rkt"))) (name . "sawzall-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:hazel@knightsofthelambdacalcul.us . #t) (data-frame . #t) (ring:1 . #t) (tests . #t))) (source . "https://github.com/ralsei/sawzall.git?path=sawzall-test#main") (tags . ("data-frame" "tests")) (versions . #hash((default . #hasheq((checksum . "a8a428dfbf8d0b7baf999f115358ea335f1252db") (source . "https://github.com/ralsei/sawzall.git?path=sawzall-test#main") (source_url . "https://github.com/ralsei/sawzall.git?path=sawzall-test#main"))))))) ("scgi" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scgi" "doc/scgi@scgi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scgi.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scgi.txt"))) (checksum . "07cc9ba2713cb0d947931cdf1011a84d5ccfb4da") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib")) (description . "Web Server HTTP SCGI and CGI") (implies . ()) (last-checked . 1632904558) (last-edit . 1456463446) (last-updated . 1502816418) (modules . ((lib "scgi/scgi.scrbl") (lib "scgi/sample-1.rkt") (lib "scgi/main.rkt") (lib "scgi/stress1-server.rkt"))) (name . "scgi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t) (web . #t))) (source . "http://www.neilvandyke.org/racket/scgi.zip") (tags . ("web")) (versions . #hash((default . #hasheq((checksum . "07cc9ba2713cb0d947931cdf1011a84d5ccfb4da") (source . "http://www.neilvandyke.org/racket/scgi.zip") (source_url . "http://www.neilvandyke.org/racket/scgi.zip"))))))) ("schema" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "schema"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/schema.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/schema.txt"))) (checksum . "bc8608c0a050bec49b3940a4b32457277bf6fbe8") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (dependencies . ("base" "db-lib" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc")) (description . "A data modeling tool for Typed Racket") (implies . ()) (last-checked . 1632904559) (last-edit . 1537113878) (last-updated . 1618704957) (modules . ((lib "schema/digitama/exchange/csv/reader/progress.rkt") (lib "schema/tamer/csv/reader/csv.rkt") (lib "schema/tamer/csv/reader/row.rkt") (lib "schema/uupk.rkt") (lib "schema/tamer/csv/reader/skip-header.rkt") (lib "schema/digitama/message.rkt") (lib "schema/digitama/exchange/csv/reader/string.rkt") (lib "schema/tamer/csv/reader/escape.rkt") (lib "schema/tamer/schema.scrbl") (lib "schema/digitama/misc.rkt") (lib "schema/tamer/csv/reader/space.rkt") (lib "schema/tamer/csv/reader/performance/progress.rkt") (lib "schema/csv.rkt") (lib "schema/tamer/csv/reader/performance/vector.rkt") (lib "schema/digitama/syntax.rkt") (lib "schema/tamer/normalize.rkt") (lib "schema/digitama/schema.rkt") (lib "schema/tamer/csv/reader/performance/bytes/port.rkt") (lib "schema/digitama/normalize.rkt") (lib "schema/tamer/csv/reader/performance/bytes/string.rkt") (lib "schema/digitama/exchange/csv/reader/line.rkt") (lib "schema/main.rkt") (lib "schema/tamer/csv/reader/performance/port-lines-counting.rkt") (lib "schema/tamer/csv/reader/unix.rkt") (lib "schema/tamer/csv/reader/performance/string.rkt") (lib "schema/digitama/virtual-sql.rkt") (lib "schema/digitama/exchange/csv/reader/port.rkt") (lib "schema/sqlite3.rkt") (lib "schema/digitama/shadow.rkt") (lib "schema/tamer/csv/reader/performance/list.rkt") (lib "schema/digitama/exchange/csv/reader/misc.rkt") (lib "schema/message.rkt") (lib "schema/tamer/csv/reader/fixed-row.rkt") (lib "schema/digitama/exchange/csv/dialect.rkt") (lib "schema/tamer/csv/reader/performance/sequence.rkt") (lib "schema/digitama/unsafe/query.rkt") (lib "schema/tamer/uupk.rkt") (lib "schema/tamer/sqlite3.rkt") (lib "schema/digitama/exchange/sql.rkt") (lib "schema/digitama/exchange/racket.rkt") (lib "schema/digitama/exchange/base.rkt") (lib "schema/tamer/csv/reader/empty.rkt"))) (name . "schema") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs-error: . #t) (author:juzhenliang@gmail.com . #t) (csv . #t) (database . #t) (ring:1 . #t) (schema . #t) (sqlite3 . #t) (typed-racket . #t) (unstable . #t) (xlsx . #t))) (source . "https://github.com/wargrey/schema.git") (tags . ("csv" "database" "schema" "sqlite3" "typed-racket" "unstable" "xlsx")) (versions . #hash((default . #hasheq((checksum . "bc8608c0a050bec49b3940a4b32457277bf6fbe8") (source . "https://github.com/wargrey/schema.git") (source_url . "https://github.com/wargrey/schema.git"))))))) ("scheme-lib" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Legacy (Scheme) libraries") (implies . ()) (last-checked . 1632904559) (last-edit . 1417659583) (last-updated . 1571880357) (modules . ((lib "scheme/date.rkt") (lib "scheme/path.rkt") (lib "scheme/exists/lang/reader.rkt") (lib "scheme/enter.rkt") (lib "scheme/math.rkt") (lib "scheme/udp.rkt") (lib "scheme/dict.rkt") (lib "scheme/foreign.rkt") (lib "scheme/signature/lang/reader.rkt") (lib "scheme/base.rkt") (lib "scheme/exists/lang.rkt") (lib "scheme/system.rkt") (lib "scheme/bool.rkt") (lib "scheme/shared.rkt") (lib "scheme/nest.rkt") (lib "scheme/pretty.rkt") (lib "scheme/private/provider/lang/reader.rkt") (lib "scheme/flonum.rkt") (lib "scheme/contract.rkt") (lib "scheme/language-info.rkt") (lib "scheme/control.rkt") (lib "scheme/unit/lang.rkt") (lib "scheme/base/lang/reader.rkt") (lib "scheme/runtime-config.rkt") (lib "scheme/unit-exptime.rkt") (lib "scheme/unit/lang/reader.rkt") (lib "scheme/set.rkt") (lib "scheme/splicing.rkt") (lib "scheme/match.rkt") (lib "scheme/init.rkt") (lib "scheme/gui/dynamic.rkt") (lib "scheme/function.rkt") (lib "scheme/tcp.rkt") (lib "scheme/serialize.rkt") (lib "scheme/list.rkt") (lib "scheme/require-transform.rkt") (lib "scheme/stxparam.rkt") (lib "scheme/promise.rkt") (lib "scheme/unsafe/ops.rkt") (lib "scheme/surrogate.rkt") (lib "scheme/class.rkt") (lib "scheme/vector.rkt") (lib "scheme/generator.rkt") (lib "scheme/include.rkt") (lib "scheme/place.rkt") (lib "scheme/stxparam-exptime.rkt") (lib "scheme/port.rkt") (lib "scheme/require.rkt") (lib "scheme/load.rkt") (lib "scheme/private/namespace.rkt") (lib "scheme/trace.rkt") (lib "scheme/require-syntax.rkt") (lib "scheme/struct-info.rkt") (lib "scheme/private/provider/lang.rkt") (lib "scheme/local.rkt") (lib "scheme/provide.rkt") (lib "scheme/cmdline.rkt") (lib "scheme/provide-transform.rkt") (lib "scheme/help.rkt") (lib "scheme/trait.rkt") (lib "scheme/lang/reader.rkt") (lib "scheme/future.rkt") (lib "scheme/async-channel.rkt") (lib "scheme/load/lang/reader.rkt") (lib "scheme/provide-syntax.rkt") (lib "scheme/runtime-path.rkt") (lib "scheme/fixnum.rkt") (lib "scheme/string.rkt") (lib "scheme/fasl.rkt") (lib "scheme/file.rkt") (lib "scheme/main.rkt") (lib "scheme/unit.rkt"))) (name . "scheme-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "a36e729680818712820ee5269f5208c3c0715a6a") (source . "git://github.com/racket/scheme-lib") (source_url . "http://github.com/racket/scheme-lib/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("scheme2d" . #hasheq((author . "mega9yo@gmail.com") (authors . ("mega9yo@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scheme2d.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scheme2d.txt"))) (checksum . "65b4a3c69d8c13fbcfc542fa366409fecc1089f4") (checksum-error . #f) (collection . "scheme2d") (conflicts . ()) (date-added . 1623005029) (dependencies . ("base")) (description . "The future of programming.") (implies . ()) (last-checked . 1632904559) (last-edit . 1623005029) (last-updated . 1623091364) (modules . ((lib "scheme2d/main.rkt"))) (name . "scheme2d") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mega9yo@gmail.com . #t) (lang . #t) (ring:1 . #t))) (source . "https://github.com/eutro/scheme2d.git") (tags . ("lang")) (versions . #hash((default . #hasheq((checksum . "65b4a3c69d8c13fbcfc542fa366409fecc1089f4") (source . "https://github.com/eutro/scheme2d.git") (source_url . "https://github.com/eutro/scheme2d.git"))))))) ("schemeunit" . #hash((author . "jay@racket-lang.org") (authors . ("jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "schemeunit") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "rackunit-gui")) (description . "Legacy SchemeUnit testing framework") (implies . ()) (last-checked . 1632904559) (last-edit . 1417961110) (last-updated . 1628217377) (modules . ((lib "schemeunit/main.rkt") (lib "schemeunit/gui.rkt") (lib "schemeunit/text-ui.rkt"))) (name . "schemeunit") (ring . 0) (search-terms . #hasheq((author:jay@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "048d7045ad38e26d5c07f54de570caeba0d74130") (source . "git://github.com/racket/rackunit/?path=schemeunit") (source_url . "git://github.com/racket/rackunit/?path=schemeunit"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("sci" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "manual-flomat" "doc/manual-flomat@sci/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/sci.txt") (success-log . "server/built/install/sci.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sci.txt"))) (checksum . "274cc201bc0289560522375a50aae88b4c9b1465") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1591106174) (dependencies . ("base" "rackunit-lib" "scribble-lib" "scribble-math" "math-doc" "racket-doc" ("linux-shared-libraries" #:platform "x86_64-linux-natipkg"))) (description . "Floating point matrices using CBLAS and LAPACK.") (implies . ()) (last-checked . 1632904560) (last-edit . 1591120316) (last-updated . 1626266131) (modules . ((lib "flomat/flomat.rkt") (lib "flomat/expm.rkt") (lib "flomat-doc/manual-flomat.scrbl") (lib "flomat/main.rkt"))) (name . "sci") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jensaxel@soegaard.net . #t) (blas . #t) (cblas . #t) (lapack . #t) (math . #t) (matrix . #t) (ring:1 . #t) (scientific . #t))) (source . "https://github.com/soegaard/sci.git") (tags . ("blas" "cblas" "lapack" "math" "matrix" "scientific")) (versions . #hash((default . #hasheq((checksum . "274cc201bc0289560522375a50aae88b4c9b1465") (source . "https://github.com/soegaard/sci.git") (source_url . "https://github.com/soegaard/sci.git"))))))) ("scope-operations" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scope-operations" "doc/scope-operations@scope-operations/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scope-operations.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scope-operations.txt"))) (checksum . "5ea8f32528bcf1ed4393cf9a054920936c27a556") (checksum-error . #f) (collection . "scope-operations") (conflicts . ()) (date-added . 1614799528) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "High-level operations on scopes and sets of scopes, for use in unhygienic macros.") (implies . ()) (last-checked . 1632904560) (last-edit . 1614889804) (last-updated . 1617546895) (modules . ((lib "scope-operations/short.rkt") (lib "scope-operations/main.rkt") (lib "scope-operations/scribblings/scope-operations.scrbl"))) (name . "scope-operations") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (ring:1 . #t) (scopes . #t) (syntax . #t))) (source . "https://github.com/jsmaniac/scope-operations.git#main") (tags . ("scopes" "syntax")) (versions . #hash((default . #hasheq((checksum . "5ea8f32528bcf1ed4393cf9a054920936c27a556") (source . "https://github.com/jsmaniac/scope-operations.git#main") (source_url . "https://github.com/jsmaniac/scope-operations.git#main"))))))) ("scramble" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scramble" "doc/scramble@scramble/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scramble.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scramble.txt"))) (checksum . "b4910442172a962243d8e0f36039ebb78ea159ae") (checksum-error . #f) (collection . "scramble") (conflicts . ()) (date-added . 1618108110) (dependencies . ("base" "scramble-lib" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Assorted utility libraries (tests and documentation)") (implies . ("scramble-lib")) (last-checked . 1632904560) (last-edit . 1618108110) (last-updated . 1626813518) (modules . ((lib "scramble/scribblings/immutable.scrbl") (lib "scramble/tests/cond.rkt") (lib "scramble/scribblings/slice.scrbl") (lib "scramble/scribblings/inject-syntax.scrbl") (lib "scramble/tests/inject-syntax.rkt") (lib "scramble/scribblings/evt.scrbl") (lib "scramble/scribblings/about.scrbl") (lib "scramble/scribblings/cond.scrbl") (lib "scramble/scribblings/struct.scrbl") (lib "scramble/scribblings/scramble.scrbl") (lib "scramble/scribblings/function.scrbl") (lib "scramble/scribblings/class.scrbl") (lib "scramble/tests/function.rkt") (lib "scramble/scribblings/number.scrbl") (lib "scramble/scribblings/list.scrbl") (lib "scramble/scribblings/struct-info.scrbl") (lib "scramble/tests/number.rkt") (lib "scramble/tests/immutable.rkt") (lib "scramble/tests/struct-info.rkt"))) (name . "scramble") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-scramble.git?path=scramble") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b4910442172a962243d8e0f36039ebb78ea159ae") (source . "https://github.com/rmculpepper/racket-scramble.git?path=scramble") (source_url . "https://github.com/rmculpepper/racket-scramble.git?path=scramble"))))))) ("scramble-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scramble-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scramble-lib.txt"))) (checksum . "b4910442172a962243d8e0f36039ebb78ea159ae") (checksum-error . #f) (collection . "scramble") (conflicts . ()) (date-added . 1618108184) (dependencies . ("base")) (description . "Assorted utility libraries") (implies . ()) (last-checked . 1632904560) (last-edit . 1618108184) (last-updated . 1626813519) (modules . ((lib "scramble/immutable.rkt") (lib "scramble/function.rkt") (lib "scramble/list.rkt") (lib "scramble/slice.rkt") (lib "scramble/number.rkt") (lib "scramble/evt.rkt") (lib "scramble/cond.rkt") (lib "scramble/struct.rkt") (lib "scramble/private/url.rkt") (lib "scramble/about.rkt") (lib "scramble/private/error.rkt") (lib "scramble/struct-info.rkt") (lib "scramble/private/tree.rkt") (lib "scramble/inject-syntax.rkt") (lib "scramble/class.rkt") (lib "scramble/private/setf.rkt"))) (name . "scramble-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-scramble.git?path=scramble-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b4910442172a962243d8e0f36039ebb78ea159ae") (source . "https://github.com/rmculpepper/racket-scramble.git?path=scramble-lib") (source_url . "https://github.com/rmculpepper/racket-scramble.git?path=scramble-lib"))))))) ("scrapyard" . #hasheq((author . "lassi@lassi.io") (authors . ("lassi@lassi.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scrapyard.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scrapyard.txt"))) (checksum . "23b49c3562f3b8fea01886a219230fe37e2abf2d") (checksum-error . #f) (collection . "scrapyard") (conflicts . ()) (date-added . 1557478463) (dependencies . ("base" "html-parsing" "sxml" "txexpr")) (description . "Light helper for web scrapers. Caches and parses downloaded files.") (implies . ()) (last-checked . 1632904561) (last-edit . 1557478463) (last-updated . 1557483766) (modules . ((lib "scrapyard/main.rkt") (lib "scrapyard/scrapyard.rkt"))) (name . "scrapyard") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lassi@lassi.io . #t) (cache . #t) (html . #t) (json . #t) (ring:1 . #t) (url . #t) (web . #t))) (source . "https://github.com/lassik/racket-scrapyard.git") (tags . ("cache" "html" "json" "url" "web")) (versions . #hash((default . #hasheq((checksum . "23b49c3562f3b8fea01886a219230fe37e2abf2d") (source . "https://github.com/lassik/racket-scrapyard.git") (source_url . "https://github.com/lassik/racket-scrapyard.git"))))))) ("scratch" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scratch" "doc/scratch@scratch/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scratch.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scratch.txt"))) (checksum . "92ec687d248f7ce587589305611367512d2a0506") (checksum-error . #f) (collection . "scratch") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "reprovide-lang" "at-exp-lib" "gui-lib" "pict-lib" "plot-gui-lib" "draw-lib" "data-lib" "profile-lib" "wxme-lib" "sandbox-lib" "syntax-color-lib" "zo-lib" "with-cache" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1632904561) (last-edit . 1488564673) (last-updated . 1587354125) (modules . ((lib "scratch/scribblings/scratch.scrbl") (lib "scratch/private/reader-submod.rkt") (lib "scratch/full.rkt") (lib "scratch/main.rkt") (lib "scratch/ng.rkt") (lib "scratch/no-gui.rkt"))) (name . "scratch") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "git://github.com/LeifAndersen/racket-scratch") (tags . ()) (versions . #hash((default . #hasheq((checksum . "92ec687d248f7ce587589305611367512d2a0506") (source . "git://github.com/LeifAndersen/racket-scratch") (source_url . "http://github.com/LeifAndersen/racket-scratch/tree/master"))))))) ("scratchy" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scratchy" "doc/scratchy@scratchy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scratchy.txt") (test-failure-log . "server/built/test-fail/scratchy.txt") (test-success-log . #f))) (checksum . "aef8883759fc962828bf977811697fccf06ef8b0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("algol60" "base" "draw-lib" "gui-lib" "parser-tools-lib" "slideshow-lib" "racket-doc" "scribble-lib")) (description . "Scratch-like runtime and language") (implies . ()) (last-checked . 1632904561) (last-edit . 1354463739) (last-updated . 1502816420) (modules . ((lib "scratchy/examples/fish-text.rkt") (lib "scratchy/examples/splash.rkt") (lib "scratchy/examples/fish.rkt") (lib "scratchy/main.rkt") (lib "scratchy/examples/just-fish.rkt") (lib "scratchy/runtime.rkt") (lib "scratchy/parser.rkt") (lib "scratchy/scratchy.rkt") (lib "scratchy/examples/other.rkt") (lib "scratchy/examples/costume.rkt") (lib "scratchy/images.rkt") (lib "scratchy/reader.rkt") (lib "scratchy/scratchy.scrbl"))) (name . "scratchy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mflatt@cs.utah.edu . #t) (games . #t) (graphics . #t) (gui . #t) (ring:1 . #t))) (source . "github://github.com/mflatt/scratchy/master") (tags . ("games" "graphics" "gui")) (versions . #hash((default . #hasheq((checksum . "aef8883759fc962828bf977811697fccf06ef8b0") (source . "github://github.com/mflatt/scratchy/master") (source_url . "http://github.com/mflatt/scratchy/tree/master"))))))) ("scribble" . #hash((author . "mflatt@racket-lang.org eli@racket-lang.org") (authors . ("mflatt@racket-lang.org" "eli@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scribble-lib" "scribble-doc")) (description . "Racket documentatation and typesetting tool") (implies . ("scribble-lib" "scribble-doc")) (last-checked . 1632904562) (last-edit . 1417659583) (last-updated . 1632321205) (modules . ()) (name . "scribble") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "cc9f747564d0f8311ee62001c1faa2ef564a5214") (source . "git://github.com/racket/scribble/?path=scribble") (source_url . "git://github.com/racket/scribble/?path=scribble"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("scribble-abbrevs" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scribble-abbrevs" "doc/scribble-abbrevs@scribble-abbrevs/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-abbrevs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-abbrevs.txt"))) (checksum . "3f81620a49fdb6e81d8734cd5088a41b32dd9ec8") (checksum-error . #f) (collection . "scribble-abbrevs") (conflicts . ()) (dependencies . ("base" "scribble-lib" "reprovide-lang-lib" "pict-lib" "draw-lib" "scribble-lib" "scribble-doc" "racket-doc" "rackunit-abbrevs" "rackunit-lib" "rackunit-abbrevs" "pict-doc")) (description . "Scribble-to-LaTeX helper functions") (implies . ()) (last-checked . 1632904562) (last-edit . 1503077696) (last-updated . 1626989925) (modules . ((lib "scribble-abbrevs/private/manual.rkt") (lib "scribble-abbrevs/pict.rkt") (lib "scribble-abbrevs/main.rkt") (lib "scribble-abbrevs/scribblings/scribble-abbrevs.scrbl") (lib "scribble-abbrevs/latex.rkt") (lib "scribble-abbrevs/manual.rkt") (lib "scribble-abbrevs/private/latex.rkt") (lib "scribble-abbrevs/private/scribble.rkt") (lib "scribble-abbrevs/private/pict.rkt") (lib "scribble-abbrevs/private/integer-word.rkt") (lib "scribble-abbrevs/scribble.rkt") (lib "scribble-abbrevs/private/roman-numeral.rkt"))) (name . "scribble-abbrevs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t) (scribble . #t) (utility . #t))) (source . "git://github.com/bennn/scribble-abbrevs") (tags . ("scribble" "utility")) (versions . #hash((default . #hasheq((checksum . "3f81620a49fdb6e81d8734cd5088a41b32dd9ec8") (source . "git://github.com/bennn/scribble-abbrevs") (source_url . "http://github.com/bennn/scribble-abbrevs/tree/master"))))))) ("scribble-bettergrammar" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-bettergrammar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-bettergrammar.txt"))) (checksum . "e7abc41d989f7c777d4e1c2b20b30569177c75f5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1594970271) (dependencies . ("scribble-bettergrammar-lib" "scribble-bettergrammar-doc")) (description . "A Scribble library for typesetting grammars with annotations, in particular, differences between grammars (implementation and documentation).") (implies . ("scribble-bettergrammar-lib" "scribble-bettergrammar-doc")) (last-checked . 1632904563) (last-edit . 1595014917) (last-updated . 1616876117) (modules . ()) (name . "scribble-bettergrammar") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:wjb@williamjbowman.com . #t) (bnf . #t) (grammar . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/wilbowma/scribble-bettergrammar.git?path=scribble-bettergrammar#main") (tags . ("bnf" "grammar" "scribble")) (versions . #hash((default . #hasheq((checksum . "e7abc41d989f7c777d4e1c2b20b30569177c75f5") (source . "https://github.com/wilbowma/scribble-bettergrammar.git?path=scribble-bettergrammar#main") (source_url . "https://github.com/wilbowma/scribble-bettergrammar.git?path=scribble-bettergrammar#main"))))))) ("scribble-bettergrammar-doc" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "bettergrammar" "doc/bettergrammar@scribble-bettergrammar-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-bettergrammar-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-bettergrammar-doc.txt"))) (checksum . "e7abc41d989f7c777d4e1c2b20b30569177c75f5") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1594969277) (dependencies . ("base" "scribble-bettergrammar-lib" "base" "scribble-lib" "racket-doc" "scribble-doc" "sexp-diff-doc")) (description . "Documentation for scribble-bettergrammar-lib, a Scribble library for typesetting grammars with annotations, in particular, differences between grammars.") (implies . ()) (last-checked . 1632904563) (last-edit . 1595014984) (last-updated . 1616876118) (modules . ((lib "scribble-bettergrammar-doc/bettergrammar/scribblings/bettergrammar.scrbl"))) (name . "scribble-bettergrammar-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:wjb@williamjbowman.com . #t) (bnf . #t) (grammar . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/wilbowma/scribble-bettergrammar.git?path=scribble-bettergrammar-doc#main") (tags . ("bnf" "grammar" "scribble")) (versions . #hash((default . #hasheq((checksum . "e7abc41d989f7c777d4e1c2b20b30569177c75f5") (source . "https://github.com/wilbowma/scribble-bettergrammar.git?path=scribble-bettergrammar-doc#main") (source_url . "https://github.com/wilbowma/scribble-bettergrammar.git?path=scribble-bettergrammar-doc#main"))))))) ("scribble-bettergrammar-lib" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-bettergrammar-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-bettergrammar-lib.txt"))) (checksum . "e7abc41d989f7c777d4e1c2b20b30569177c75f5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1594969210) (dependencies . ("base" "scribble-lib" "sexp-diff-lib")) (description . "A Scribble library for typesetting grammars with annotations, in particular, differences between grammars (implementation only).") (implies . ()) (last-checked . 1632904566) (last-edit . 1595014946) (last-updated . 1616876119) (modules . ((lib "scribble/bettergrammar.rkt"))) (name . "scribble-bettergrammar-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:wjb@williamjbowman.com . #t) (bnf . #t) (grammar . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/wilbowma/scribble-bettergrammar.git?path=scribble-bettergrammar-lib#main") (tags . ("bnf" "grammar" "scribble")) (versions . #hash((default . #hasheq((checksum . "e7abc41d989f7c777d4e1c2b20b30569177c75f5") (source . "https://github.com/wilbowma/scribble-bettergrammar.git?path=scribble-bettergrammar-lib#main") (source_url . "https://github.com/wilbowma/scribble-bettergrammar.git?path=scribble-bettergrammar-lib#main"))))))) ("scribble-code-examples" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scribble-code-examples" "doc/scribble-code-examples@scribble-code-examples/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-code-examples.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-code-examples.txt"))) (checksum . "18166292d8d491881cf5ac98352c23bd5ebec312") (checksum-error . #f) (collection . "scribble-code-examples") (conflicts . ()) (date-added . 1548446697) (dependencies . ("base" "scribble-code-examples-lib" "scribble-lib" "sandbox-lib" "racket-doc" "scribble-doc")) (description . "A scribble examples form that works with non-s-exp languages") (implies . ("scribble-code-examples-lib")) (last-checked . 1632904566) (last-edit . 1548446697) (last-updated . 1549690972) (modules . ((lib "scribble-code-examples/tests/test.scrbl") (lib "scribble-code-examples/scribblings/scribble-code-examples.scrbl"))) (name . "scribble-code-examples") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (documentation . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/AlexKnauth/scribble-code-examples?path=scribble-code-examples") (tags . ("documentation" "scribble")) (versions . #hash((default . #hasheq((checksum . "18166292d8d491881cf5ac98352c23bd5ebec312") (source . "git://github.com/AlexKnauth/scribble-code-examples?path=scribble-code-examples") (source_url . "http://github.com/AlexKnauth/scribble-code-examples/tree/master?path=scribble-code-examples"))))))) ("scribble-code-examples-lib" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-code-examples-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-code-examples-lib.txt"))) (checksum . "18166292d8d491881cf5ac98352c23bd5ebec312") (checksum-error . #f) (collection . "scribble-code-examples") (conflicts . ()) (date-added . 1548446649) (dependencies . ("base" "scribble-lib" "sandbox-lib" "rackunit-lib")) (description . "A scribble examples form that works with non-s-exp languages") (implies . ()) (last-checked . 1632904566) (last-edit . 1548446853) (last-updated . 1549690972) (modules . ((lib "scribble-code-examples/util/srcloc-position-char-index.rkt") (lib "scribble-code-examples/main.rkt"))) (name . "scribble-code-examples-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (documentation . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/AlexKnauth/scribble-code-examples.git?path=scribble-code-examples-lib") (tags . ("documentation" "scribble")) (versions . #hash((default . #hasheq((checksum . "18166292d8d491881cf5ac98352c23bd5ebec312") (source . "https://github.com/AlexKnauth/scribble-code-examples.git?path=scribble-code-examples-lib") (source_url . "https://github.com/AlexKnauth/scribble-code-examples.git?path=scribble-code-examples-lib"))))))) ("scribble-coq" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/scribble-coq.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "894ec4c1b1e97f3d50608bfba1c1d4361c7d3d5f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1551754229) (dependencies . ("threading-lib" "scribble-lib" "scribble-minted" "base")) (description . "A library for typesetting Coq and coqtop interactions in Scribble.") (implies . ()) (last-checked . 1632904567) (last-edit . 1551754229) (last-updated . 1570136232) (modules . ((lib "scribble/coqtop-interop.rkt") (lib "scribble/string-utils.rkt") (lib "scribble/coq.rkt"))) (name . "scribble-coq") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t))) (source . "https://github.com/wilbowma/scribble-coq.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "894ec4c1b1e97f3d50608bfba1c1d4361c7d3d5f") (source . "https://github.com/wilbowma/scribble-coq.git") (source_url . "https://github.com/wilbowma/scribble-coq.git"))))))) ("scribble-doc" . #hash((author . "mflatt@racket-lang.org eli@racket-lang.org") (authors . ("mflatt@racket-lang.org" "eli@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "demo-manual-m1" "doc/demo-manual-m1@scribble-doc/index.html") ("main" "demo-manual-m2" "doc/demo-manual-m2@scribble-doc/index.html") ("main" "scribble" "doc/scribble@scribble-doc/index.html") ("main" "scriblib" "doc/scriblib@scribble-doc/index.html") ("main" "demo-m1" "doc/demo-m1@scribble-doc/index.html") ("main" "demo-m2" "doc/demo-m2@scribble-doc/index.html") ("main" "demo-s1" "doc/demo-s1@scribble-doc/index.html") ("main" "scribble-pp" "doc/scribble-pp@scribble-doc/index.html") ("main" "demo-s2" "doc/demo-s2@scribble-doc/index.html") ("main" "demo-manual-s1" "doc/demo-manual-s1@scribble-doc/index.html") ("main" "demo-manual-s2" "doc/demo-manual-s2@scribble-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("racket-index" "mzscheme-doc" "net-doc" "scheme-lib" "draw-doc" "gui-doc" "slideshow-doc" "pict-doc" "typed-racket-doc" "at-exp-lib" "base" "compatibility-lib" "draw-lib" "pict-lib" "sandbox-lib" "slideshow-lib" "scribble-lib" "scribble-text-lib" "racket-doc")) (description . "documentation part of scribble") (implies . ()) (last-checked . 1632904567) (last-edit . 1417659583) (last-updated . 1632321209) (modules . ((lib "scribblings/scribble/how-to.scrbl") (lib "scribblings/scribble/basic.scrbl") (lib "scriblib/scribblings/footnote.scrbl") (lib "scribblings/scribble/sigplan.scrbl") (lib "scribblings/scribble/internals.scrbl") (lib "scribblings/scribble/srcdoc.scrbl") (lib "scriblib/scribblings/figure.scrbl") (lib "scribblings/scribble/config.scrbl") (lib "scribblings/scribble/jfp.scrbl") (lib "scribblings/scribble/bnf.scrbl") (lib "scribblings/scribble/plt.scrbl") (lib "scriblib/scribblings/scriblib.scrbl") (lib "scribblings/scribble/blueboxes.scrbl") (lib "scribblings/scribble/tag.scrbl") (lib "scribblings/scribble/examples.scrbl") (lib "scribblings/scribble/lp-ex.rkt") (lib "scribblings/scribble/xref.scrbl") (lib "scribblings/scribble/acmart.scrbl") (lib "scribblings/scribble/lp-ex-doc.scrbl") (lib "scribblings/scribble/class-diagrams.rkt") (lib "scribblings/scribble/manual.scrbl") (lib "scribblings/scribble/compat.scrbl") (lib "scribblings/scribble/lncs.scrbl") (lib "scriblib/scribblings/gui-eval.scrbl") (lib "scribblings/scribble/generic.scrbl") (lib "scribblings/scribble/struct.scrbl") (lib "scribblings/scribble/utils.rkt") (lib "scribblings/scribble/demo-s2.scrbl") (lib "scribblings/scribble/demo-m2.scrbl") (lib "scribblings/scribble/docreader.scrbl") (lib "scribblings/scribble/scribble.scrbl") (lib "scribblings/scribble/how-to-paper.scrbl") (lib "scribblings/scribble/html.scrbl") (lib "scribblings/scribble/base.scrbl") (lib "scribblings/scribble/core.scrbl") (lib "scribblings/scribble/report.scrbl") (lib "scribblings/scribble/demo-class.scrbl") (lib "scribblings/scribble/struct-hierarchy.rkt") (lib "scribblings/scribble/demo-manual.scrbl") (lib "scribblings/scribble/text.scrbl") (lib "scribblings/scribble/decode.scrbl") (lib "scribblings/scribble/layers.scrbl") (lib "scribblings/scribble/doclang.scrbl") (lib "scribblings/scribble/scheme.scrbl") (lib "scribblings/scribble/renderer.scrbl") (lib "scriblib/scribblings/book-index.scrbl") (lib "scribblings/scribble/book.scrbl") (lib "scribblings/scribble/getting-started.scrbl") (lib "scriblib/scribblings/bibtex.scrbl") (lib "scribblings/scribble/demo-manual-m2.scrbl") (lib "scribblings/scribble/demo-manual-m1.scrbl") (lib "scriblib/scribblings/autobib.scrbl") (lib "scribblings/scribble/manual-stub.scrbl") (lib "scribblings/scribble/reader.scrbl") (lib "scribblings/scribble/demo-manual-s2.scrbl") (lib "scribblings/scribble/demo-manual-s1.scrbl") (lib "scribblings/scribble/demo-s1.scrbl") (lib "scribblings/scribble/demo-m1.scrbl") (lib "scribblings/scribble/scribble-pp.scrbl") (lib "scribblings/scribble/eval.scrbl") (lib "scribblings/scribble/running.scrbl") (lib "scribblings/scribble/reader-internals.scrbl") (lib "scribblings/scribble/demo.scrbl") (lib "scriblib/scribblings/render-cond.scrbl") (lib "scribblings/scribble/lp.scrbl"))) (name . "scribble-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:eli@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "cc9f747564d0f8311ee62001c1faa2ef564a5214") (source . "git://github.com/racket/scribble/?path=scribble-doc") (source_url . "git://github.com/racket/scribble/?path=scribble-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("scribble-enhanced" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scribble-enhanced-example.lp2" "doc/scribble-enhanced-example.lp2@scribble-enhanced/index.html") ("main" "scribble-enhanced-template.lp2" "doc/scribble-enhanced-template.lp2@scribble-enhanced/index.html") ("main" "scribble-enhanced" "doc/scribble-enhanced@scribble-enhanced/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-enhanced.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-enhanced.txt"))) (checksum . "d4fe76d1899b540e2806520a3acbf4afdf5abb88") (checksum-error . #f) (collection . "scribble-enhanced") (conflicts . ()) (date-added . 1614799533) (dependencies . ("base" "rackunit-lib" "scribble-lib" "scheme-lib" "compatibility-lib" "slideshow-lib" "typed-racket-lib" "reprovide-lang" "mutable-match-lambda" "scribble-lib" "racket-doc" "at-exp-lib" "typed-racket-more" "typed-racket-doc" "scribble-doc")) (description . "Temporary package, will eventually be merged into the scribble-math and hyper-literate packages. Do not use.") (implies . ()) (last-checked . 1632904567) (last-edit . 1614889800) (last-updated . 1617546895) (modules . ((lib "scribble-enhanced/main.rkt") (lib "scribble-enhanced/math.rkt") (lib "scribble-enhanced/manual-scheme.rkt") (lib "scribble-enhanced/doc.rkt") (lib "scribble-enhanced/manual-form.rkt") (lib "scribble-enhanced/with-manual.rkt") (lib "scribble-enhanced/racket.rkt") (lib "scribble-enhanced/scribblings/scribble-enhanced-template.lp2.rkt") (lib "scribble-enhanced/scribblings/scribble-enhanced.scrbl") (lib "scribble-enhanced/scribblings/scribble-enhanced-example.lp2.rkt") (lib "scribble-enhanced/unicode-chars.sty.rkt") (lib "scribble-enhanced/forkmeongithub.rkt"))) (name . "scribble-enhanced") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (deprecated . #t) (ring:1 . #t))) (source . "https://github.com/jsmaniac/scribble-enhanced.git#main") (tags . ("deprecated")) (versions . #hash((default . #hasheq((checksum . "d4fe76d1899b540e2806520a3acbf4afdf5abb88") (source . "https://github.com/jsmaniac/scribble-enhanced.git#main") (source_url . "https://github.com/jsmaniac/scribble-enhanced.git#main"))))))) ("scribble-frog-helper" . #hasheq((author . "yanyingwang1@gmail.com") (authors . ("yanyingwang1@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/scribble-frog-helper.txt") (docs . (("main" "scribble-frog-helper" "doc/scribble-frog-helper@scribble-frog-helper/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-frog-helper.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-frog-helper.txt"))) (checksum . "5ba86188de0ce1cd3d4540982be2473183c78e81") (checksum-error . #f) (collection . "scribble-frog-helper") (conflicts . ()) (date-added . 1576488283) (dependencies . ("base" "gregor" "timable" "frog" "at-exp-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "scribble helper functions especially for writing blogs with frog") (implies . ()) (last-checked . 1632904567) (last-edit . 1589469689) (last-updated . 1599314056) (modules . ((lib "scribble-frog-helper/scribblings/scribble-frog-helper.scrbl") (lib "scribble-frog-helper/main.rkt"))) (name . "scribble-frog-helper") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:yanyingwang1@gmail.com . #t) (blog . #t) (frog . #t) (helper . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/yanyingwang/scribble-frog-helper.git") (tags . ("blog" "frog" "helper" "scribble")) (versions . #hash((default . #hasheq((checksum . "5ba86188de0ce1cd3d4540982be2473183c78e81") (source . "https://github.com/yanyingwang/scribble-frog-helper.git") (source_url . "https://github.com/yanyingwang/scribble-frog-helper.git"))))))) ("scribble-html-lib" . #hash((author . "mflatt@racket-lang.org eli@racket-lang.org") (authors . ("mflatt@racket-lang.org" "eli@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "base" "at-exp-lib" "scribble-text-lib")) (description . "Language for HTML with embedded Racket code") (implies . ()) (last-checked . 1632904568) (last-edit . 1417659583) (last-updated . 1632321211) (modules . ((lib "scribble/html/lang/reader.rkt") (lib "scribble/html/html.rkt") (lib "scribble/html/main.rkt") (lib "scribble/html/xml.rkt") (lib "scribble/html/lang.rkt") (lib "scribble/html/extra.rkt") (lib "scribble/html.rkt") (lib "scribble/html/resource.rkt"))) (name . "scribble-html-lib") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "cc9f747564d0f8311ee62001c1faa2ef564a5214") (source . "git://github.com/racket/scribble/?path=scribble-html-lib") (source_url . "git://github.com/racket/scribble/?path=scribble-html-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("scribble-lib" . #hash((author . "mflatt@racket-lang.org eli@racket-lang.org") (authors . ("mflatt@racket-lang.org" "eli@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "base" "compatibility-lib" "scribble-text-lib" "scribble-html-lib" "planet-lib" "net-lib" "at-exp-lib" "draw-lib" "syntax-color-lib" "sandbox-lib" "typed-racket-lib" "rackunit-lib")) (description . "implementation (no documentation) part of scribble") (implies . ("scribble-html-lib")) (last-checked . 1632904568) (last-edit . 1417659583) (last-updated . 1632321213) (modules . ((lib "scribble/eval.rkt") (lib "scribble/private/manual-form.rkt") (lib "scribble/private/lang-parameters.rkt") (lib "scribble/private/provide-structs.rkt") (lib "scribble/private/run-pdflatex.rkt") (lib "scribble/private/serialize.rkt") (lib "scribble/lncs/lang/reader.rkt") (lib "scribble/scheme.rkt") (lib "scribble/pdf-render.rkt") (lib "scribble/html-render.rkt") (lib "scribble/provide-doc-transform.rkt") (lib "scribble/lp/lang/reader.rkt") (lib "scribble/private/render-utils.rkt") (lib "scribble/private/manual-style.rkt") (lib "scribble/private/on-demand.rkt") (lib "scribble/manual-struct.rkt") (lib "help/search.rkt") (lib "scribble/blueboxes.rkt") (lib "help/help.rkt") (lib "scribble/private/lp.rkt") (lib "scribble/report/lang.rkt") (lib "scribble/jfp/lang.rkt") (lib "scribble/book/lang/reader.rkt") (lib "scribble/doc/reader.rkt") (lib "scribble/private/manual-defaults.rkt") (lib "scribble/private/defaults.rkt") (lib "scribble/lp.rkt") (lib "scribble/doc/lang/reader.rkt") (lib "scribble/html-properties.rkt") (lib "scribble/elsarticle/lang.rkt") (lib "scribble/private/manual-bind.rkt") (lib "scribble/latex-properties.rkt") (lib "scribble/manual/lang.rkt") (lib "scribble/lp/lang/lang2.rkt") (lib "scriblib/figure.rkt") (lib "scribble/private/qsloc.rkt") (lib "scribble/decode-struct.rkt") (lib "scribble/manual.rkt") (lib "scribble/urls.rkt") (lib "scribble/elsarticle/lang/reader.rkt") (lib "scribble/private/manual-sprop.rkt") (lib "scribble/contract-render.rkt") (lib "scribble/core.rkt") (lib "scriblib/footnote.rkt") (lib "scribble/private/manual-unit.rkt") (lib "scribble/private/manual-code.rkt") (lib "scribble/base/lang.rkt") (lib "scribble/private/manual-history.rkt") (lib "scribble/valid-blueboxes-info.rkt") (lib "scribble/private/manual-tech.rkt") (lib "scribble/base-render.rkt") (lib "scribble/private/manual-class-struct.rkt") (lib "scribble/text-render.rkt") (lib "scribble/private/manual-vars.rkt") (lib "scriblib/gui-eval.rkt") (lib "scriblib/bibtex.rkt") (lib "scribble/xref.rkt") (lib "scribble/book/lang.rkt") (lib "scribble/sigplan/lang/reader.rkt") (lib "scribble/jfp.rkt") (lib "scribble/base/lang/reader.rkt") (lib "scribble/private/manual-proc.rkt") (lib "scribble/racket.rkt") (lib "scribble/private/manual-class.rkt") (lib "scribble/private/manual-ex.rkt") (lib "scribble/latex-render.rkt") (lib "scriblib/autobib.rkt") (lib "scribble/srcdoc.rkt") (lib "scribble/acmart.rkt") (lib "scribble/acmart/lang/reader.rkt") (lib "scribble/lp-include.rkt") (lib "scriblib/render-cond.rkt") (lib "scribble/lp/lang/lang.rkt") (lib "scribble/doc/main.rkt") (lib "scribble/search.rkt") (lib "scribble/sigplan.rkt") (lib "scribble/acmart/lang.rkt") (lib "scribble/doclang2.rkt") (lib "scribble/private/tag.rkt") (lib "scribble/private/literal-anchor.rkt") (lib "scribble/basic.rkt") (lib "scribble/tag.rkt") (lib "scribble/lp/lang/common.rkt") (lib "scribble/bnf.rkt") (lib "scribble/doclang.rkt") (lib "scribble/extract.rkt") (lib "scribble/private/manual-scheme.rkt") (lib "scribble/sigplan/lang.rkt") (lib "scribble/examples.rkt") (lib "scribble/private/latex-index.rkt") (lib "scriblib/private/counter.rkt") (lib "scribble/jfp/lang/reader.rkt") (lib "scribble/decode.rkt") (lib "scribble/private/manual-mod.rkt") (lib "scribble/manual/lang/reader.rkt") (lib "scriblib/private/gui-eval-exn.rkt") (lib "scribble/example.rkt") (lib "scribble/lncs/lang.rkt") (lib "scribble/private/manual-bib.rkt") (lib "scribble/struct.rkt") (lib "scribble/render.rkt") (lib "scribble/private/indirect-renderer.rkt") (lib "scribble/report/lang/reader.rkt") (lib "scribble/base.rkt") (lib "scribble/private/manual-utils.rkt") (lib "scribble/lp2.rkt") (lib "scribble/config.rkt") (lib "scribble/private/manual-method.rkt") (lib "scribble/run.rkt") (lib "scribble/markdown-render.rkt") (lib "scribble/render-struct.rkt") (lib "scribble/latex-prefix.rkt") (lib "scribble/comment-reader.rkt") (lib "scriblib/book-index.rkt"))) (name . "scribble-lib") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "cc9f747564d0f8311ee62001c1faa2ef564a5214") (source . "git://github.com/racket/scribble/?path=scribble-lib") (source_url . "git://github.com/racket/scribble/?path=scribble-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("scribble-math" . #hasheq((author . "racket@suzanne.soy jensaxel@soegaard.net") (authors . ("racket@suzanne.soy" "jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scribble-math" "doc/scribble-math@scribble-math/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-math.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-math.txt"))) (checksum . "a69b6fad193757de5a62b6a1cabacb7557d02ff7") (checksum-error . #f) (collection . "scribble-math") (conflicts . ()) (date-added . 1614799538) (dependencies . ("base" "rackunit-lib" "scribble-lib" "scribble-lib" "racket-doc" "at-exp-lib" "scribble-doc")) (description . "Typesetting math in scribble (uses MathJax and/or KaTeX). Also supports figures with Asymptote.") (implies . ()) (last-checked . 1632904568) (last-edit . 1614889808) (last-updated . 1617716816) (modules . ((lib "scribble-math/scribblings/scribble-math.scrbl") (lib "scribble-math/dollar.rkt") (lib "scribble-math/katex-convert-unicode.rkt") (lib "scribble-math/mathjax-convert-unicode.rkt") (lib "scribble-math/asymptote.rkt") (lib "scribble-math/main.rkt"))) (name . "scribble-math") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (LaTeX . #t) (Math . #t) (author:jensaxel@soegaard.net . #t) (author:racket@suzanne.soy . #t) (documentation . #t) (math . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/jsmaniac/scribble-math.git#main") (tags . ("documentation" "LaTeX" "math" "Math" "scribble")) (versions . #hash((default . #hasheq((checksum . "a69b6fad193757de5a62b6a1cabacb7557d02ff7") (source . "https://github.com/jsmaniac/scribble-math.git#main") (source_url . "https://github.com/jsmaniac/scribble-math.git#main"))))))) ("scribble-minted" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/scribble-minted.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "0639c54c84c3294e575c1e70b2d17f5537c1750a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1550296818) (dependencies . ("scribble-minted-lib" "scribble-minted-doc")) (description . "A scribble library for using pygmentize.") (implies . ("scribble-minted-lib" "scribble-minted-doc")) (last-checked . 1632904568) (last-edit . 1617488589) (last-updated . 1617495112) (modules . ()) (name . "scribble-minted") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t) (syntax-highlighting . #t) (typesetting . #t))) (source . "https://github.com/wilbowma/scribble-minted.git?path=scribble-minted#main") (tags . ("syntax-highlighting" "typesetting")) (versions . #hash((default . #hasheq((checksum . "0639c54c84c3294e575c1e70b2d17f5537c1750a") (source . "https://github.com/wilbowma/scribble-minted.git?path=scribble-minted#main") (source_url . "https://github.com/wilbowma/scribble-minted.git?path=scribble-minted#main"))))))) ("scribble-minted-doc" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "minted"))) (failure-log . "server/built/fail/scribble-minted-doc.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "0639c54c84c3294e575c1e70b2d17f5537c1750a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1617441073) (dependencies . ("base" "scribble-lib" "scribble-minted-lib" "racket-doc" "scribble-doc")) (description . "Documentation for scribble-minted.") (implies . ()) (last-checked . 1632904569) (last-edit . 1617488655) (last-updated . 1617495113) (modules . ((lib "scribblings/minted.scrbl"))) (name . "scribble-minted-doc") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t) (syntax-highlighting . #t) (typesetting . #t))) (source . "https://github.com/wilbowma/scribble-minted.git?path=scribble-minted-doc#main") (tags . ("syntax-highlighting" "typesetting")) (versions . #hash((default . #hasheq((checksum . "0639c54c84c3294e575c1e70b2d17f5537c1750a") (source . "https://github.com/wilbowma/scribble-minted.git?path=scribble-minted-doc#main") (source_url . "https://github.com/wilbowma/scribble-minted.git?path=scribble-minted-doc#main"))))))) ("scribble-minted-lib" . #hasheq((author . "wjb@williamjbowman.com") (authors . ("wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-minted-lib.txt") (test-failure-log . "server/built/test-fail/scribble-minted-lib.txt") (test-success-log . #f))) (checksum . "0639c54c84c3294e575c1e70b2d17f5537c1750a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1617441048) (dependencies . ("rackunit-lib" "scribble-lib" "base")) (description . "A scribble library for using pygmentize (library only).") (implies . ()) (last-checked . 1632904569) (last-edit . 1617488618) (last-updated . 1617495113) (modules . ((lib "examples/test.scrbl") (lib "examples/meow.scrbl") (lib "examples/agda-example.scrbl") (lib "scribble/minted.rkt"))) (name . "scribble-minted-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t) (syntax-highlighting . #t) (typesetting . #t))) (source . "https://github.com/wilbowma/scribble-minted.git?path=scribble-minted-lib#main") (tags . ("syntax-highlighting" "typesetting")) (versions . #hash((default . #hasheq((checksum . "0639c54c84c3294e575c1e70b2d17f5537c1750a") (source . "https://github.com/wilbowma/scribble-minted.git?path=scribble-minted-lib#main") (source_url . "https://github.com/wilbowma/scribble-minted.git?path=scribble-minted-lib#main"))))))) ("scribble-rainbow-delimiters" . #hasheq((author . "yanyingwang1@gmail.com") (authors . ("yanyingwang1@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/scribble-rainbow-delimiters.txt") (docs . (("main" "scribble-rainbow-delimiters" "doc/scribble-rainbow-delimiters@scribble-rainbow-delimiters/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-rainbow-delimiters.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-rainbow-delimiters.txt"))) (checksum . "4224d9ae0029bd80b60f477199f8fad2427da8f0") (checksum-error . #f) (collection . "scribble-rainbow-delimiters") (conflicts . ()) (date-added . 1621919886) (dependencies . ("base" "scribble-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Colorizing matched brackets of codes on HTML pages generated by Racket Scribble") (implies . ()) (last-checked . 1632904569) (last-edit . 1621919886) (last-updated . 1621960065) (modules . ((lib "scribble-rainbow-delimiters/scribblings/scribble-rainbow-delimiters.scrbl") (lib "scribble-rainbow-delimiters/main.rkt"))) (name . "scribble-rainbow-delimiters") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:yanyingwang1@gmail.com . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/yanyingwang/scribble-rainbow-delimiters.git") (tags . ("scribble")) (versions . #hash((default . #hasheq((checksum . "4224d9ae0029bd80b60f477199f8fad2427da8f0") (source . "https://github.com/yanyingwang/scribble-rainbow-delimiters.git") (source_url . "https://github.com/yanyingwang/scribble-rainbow-delimiters.git"))))))) ("scribble-slideshow" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scribble-slideshow" "doc/scribble-slideshow@scribble-slideshow/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-slideshow.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-slideshow.txt"))) (checksum . "689acc04ca7c2343747756aaf3f60e0d394be433") (checksum-error . #f) (collection . "scribble-slideshow") (conflicts . ()) (date-added . 1594584915) (dependencies . ("base" "pict-lib" "scribble-lib" "slideshow-lib" "scribble-slideshow-lib" "racket-doc" "at-exp-lib" "pict-doc" "slideshow-doc" "scribble-doc")) (description . "Write slideshows using Scribble.") (implies . ()) (last-checked . 1632904569) (last-edit . 1594584915) (last-updated . 1618110934) (modules . ((lib "scribble-slideshow/scribble-slideshow.scrbl") (lib "scribble-slideshow/misc/overlap.rkt") (lib "scribble-slideshow/example/demo.scrbl") (lib "scribble-slideshow/example/demo2.rkt") (lib "scribble-slideshow/example/demo-staging.scrbl"))) (name . "scribble-slideshow") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (pict . #t) (ring:1 . #t) (scribble . #t) (slideshow . #t))) (source . "https://github.com/rmculpepper/scribble-slideshow.git?path=scribble-slideshow") (tags . ("pict" "scribble" "slideshow")) (versions . #hash((default . #hasheq((checksum . "689acc04ca7c2343747756aaf3f60e0d394be433") (source . "https://github.com/rmculpepper/scribble-slideshow.git?path=scribble-slideshow") (source_url . "https://github.com/rmculpepper/scribble-slideshow.git?path=scribble-slideshow"))))))) ("scribble-slideshow-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scribble-slideshow-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scribble-slideshow-lib.txt"))) (checksum . "689acc04ca7c2343747756aaf3f60e0d394be433") (checksum-error . #f) (collection . "scribble-slideshow") (conflicts . ()) (date-added . 1594584853) (dependencies . ("base" "at-exp-lib" "slideshow-lib" "pict-lib" "scribble-lib")) (description . "Write slideshows using Scribble.") (implies . ()) (last-checked . 1632904570) (last-edit . 1594584853) (last-updated . 1618110935) (modules . ((lib "scribble-slideshow/private/slide.rkt") (lib "scribble-slideshow/pict.rkt") (lib "scribble-slideshow/main.rkt") (lib "scribble-slideshow/private/pict.rkt"))) (name . "scribble-slideshow-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (pict . #t) (ring:1 . #t) (scribble . #t) (slideshow . #t))) (source . "https://github.com/rmculpepper/scribble-slideshow.git?path=scribble-slideshow-lib") (tags . ("pict" "scribble" "slideshow")) (versions . #hash((default . #hasheq((checksum . "689acc04ca7c2343747756aaf3f60e0d394be433") (source . "https://github.com/rmculpepper/scribble-slideshow.git?path=scribble-slideshow-lib") (source_url . "https://github.com/rmculpepper/scribble-slideshow.git?path=scribble-slideshow-lib"))))))) ("scribble-test" . #hash((author . "mflatt@racket-lang.org eli@racket-lang.org") (authors . ("mflatt@racket-lang.org" "eli@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("at-exp-lib" "base" "eli-tester" "rackunit-lib" "sandbox-lib" "scribble-doc" "scribble-lib" "scribble-text-lib" "racket-index")) (description . "tests for scribble") (implies . ()) (last-checked . 1632904570) (last-edit . 1417659583) (last-updated . 1632321217) (modules . ((lib "tests/scriblib/bibtex.rkt") (lib "tests/scribble/exe.rkt") (lib "tests/scriblib/autobib.rkt") (lib "tests/scribble/docs/secref.scrbl") (lib "tests/scribble/docs/list-section.scrbl") (lib "tests/scribble/markdown-docs/example.scrbl") (lib "tests/scribble/docs/autobib-disambiguation.scrbl") (lib "tests/scribble/docs/grouper-sub.scrbl") (lib "tests/scribble/docs/decode.scrbl") (lib "tests/scribble/render.rkt") (lib "tests/scribble/text-collect.rkt") (lib "tests/scribble/docs.rkt") (lib "tests/scribble/decode.rkt") (lib "tests/scribble/docs/include-section.scrbl") (lib "tests/scribble/docs/eval-false.scrbl") (lib "tests/scribble/main.rkt") (lib "tests/scribble/docs/cond.scrbl") (lib "tests/scribble/docs/grouper2.scrbl") (lib "tests/scribble/docs/tech.scrbl") (lib "tests/scribble/docs/codeblock-utf8.scrbl") (lib "tests/scribble/docs/gif.scrbl") (lib "tests/scribble/xref.rkt") (lib "tests/scribble/docs/figure.scrbl") (lib "tests/scribble/docs/examples.scrbl") (lib "tests/scribble/docs/lp-comment.scrbl") (lib "tests/scribble/docs/diamond.scrbl") (lib "tests/scribble/docs/table.scrbl") (lib "tests/scribble/docs/manual.scrbl") (lib "tests/scribble/markdown.rkt") (lib "tests/scribble/docs/verbatim.scrbl") (lib "tests/scribble/docs/autobib-numbered.scrbl") (lib "tests/scribble/docs/convertible.scrbl") (lib "tests/scribble/docs/diamond.rkt") (lib "tests/scribble/docs/itemlist.scrbl") (lib "tests/scribble/docs/srcdoc.rkt") (lib "tests/scribble/text-wrap.rkt") (lib "tests/help/test-docs-complete2.rkt") (lib "tests/scribble/docs/autobib.scrbl") (lib "tests/scribble/docs/table-border.scrbl") (lib "tests/scribble/reader.rkt") (lib "tests/scribble/eval.rkt") (lib "tests/scribble/docs/autobib-broken.scrbl") (lib "tests/scribble/docs/manual-ex.rkt") (lib "tests/scribble/docs/print-lines.scrbl") (lib "tests/scribble/html.rkt") (lib "tests/scribble/docs/wrap.scrbl") (lib "tests/scribble/docs/traverse.scrbl") (lib "tests/scribble/docs/footnote.scrbl") (lib "tests/scribble/example.rkt") (lib "tests/scribble/docs/numberer.scrbl") (lib "tests/scribble/docs/srcdoc.scrbl") (lib "tests/scribble/docs/autobib-disambiguation-more.scrbl") (lib "tests/scribble/docs/stxobj.scrbl") (lib "tests/scribble/docs/secref3.scrbl") (lib "tests/scribble/docs/secref2.scrbl") (lib "tests/scribble/docs/box-chars.scrbl") (lib "tests/scribble/docs/autobib-order.scrbl") (lib "tests/scribble/docs/empty-onthispage.scrbl") (lib "tests/scribble/docs/text.scrbl") (lib "tests/scribble/docs/read-alts.scrbl") (lib "tests/scribble/docs/filebox.scrbl") (lib "tests/scribble/docs/autobib-disambiguation-corner.scrbl") (lib "tests/scribble/text-lang.rkt") (lib "tests/scribble/docs/grouper.scrbl") (lib "tests/scribble/docs/eval-special.scrbl") (lib "tests/scribble/docs/codeblock-quote.scrbl"))) (name . "scribble-test") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "cc9f747564d0f8311ee62001c1faa2ef564a5214") (source . "git://github.com/racket/scribble/?path=scribble-test") (source_url . "git://github.com/racket/scribble/?path=scribble-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("scribble-text-lib" . #hash((author . "mflatt@racket-lang.org eli@racket-lang.org") (authors . ("mflatt@racket-lang.org" "eli@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" ("base" #:version "8.2.0.7") "at-exp-lib")) (description . "Language for text with embedded Racket code") (implies . ()) (last-checked . 1632904570) (last-edit . 1417659583) (last-updated . 1632321218) (modules . ((lib "scribble/text.rkt") (lib "scribble/text/lang/reader.rkt") (lib "scribble/text/lang.rkt") (lib "scribble/text/output.rkt") (lib "scribble/text/main.rkt") (lib "scribble/text/wrap.rkt") (lib "scribble/text/syntax-utils.rkt"))) (name . "scribble-text-lib") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "cc9f747564d0f8311ee62001c1faa2ef564a5214") (source . "git://github.com/racket/scribble/?path=scribble-text-lib") (source_url . "git://github.com/racket/scribble/?path=scribble-text-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("scriblogify" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scriblogify" "doc/scriblogify@scriblogify/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scriblogify.txt") (test-failure-log . "server/built/test-fail/scriblogify.txt") (test-success-log . #f))) (checksum . "7771d00ce6101bd5d415b54134eb79c42b92f1ef") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "sxml" "webapi" "scribble-lib" "compatibility-lib" "web-server-lib" "html-parsing" "html-writing" "racket-doc" "scribble-doc" "scribble-lib")) (description . "Scribble your blog!") (implies . ()) (last-checked . 1632904570) (last-edit . 1382387607) (last-updated . 1502816421) (modules . ((lib "scriblogify/scribblings/scriblogify.scrbl") (lib "scriblogify/private/scriblogify.rkt") (lib "scriblogify/run-setup.rkt") (lib "scriblogify/private/handlers.rkt") (lib "scriblogify/samples/scribble-your-blogs.scrbl") (lib "scriblogify/run.rkt") (lib "scriblogify/main.rkt") (lib "scriblogify/private/util.rkt") (lib "scriblogify/scribble-util.rkt"))) (name . "scriblogify") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (blog . #t) (ring:1 . #t) (scribble . #t))) (source . "git://github.com/rmculpepper/scriblogify#pkg") (tags . ("blog" "scribble")) (versions . #hash((default . #hasheq((checksum . "7771d00ce6101bd5d415b54134eb79c42b92f1ef") (source . "git://github.com/rmculpepper/scriblogify#pkg") (source_url . "http://github.com/rmculpepper/scriblogify/tree/master#pkg"))))))) ("scripty" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scripty.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scripty.txt"))) (checksum . "09a0e2fd24dfcd5942177d4a328821534ee60ded") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scripty-doc" "scripty-lib")) (description . "") (implies . ("scripty-doc" "scripty-lib")) (last-checked . 1632904571) (last-edit . 1476917251) (last-updated . 1502816422) (modules . ()) (name . "scripty") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (scripting . #t))) (source . "git://github.com/lexi-lambda/scripty.git?path=scripty") (tags . ("scripting")) (versions . #hash((default . #hasheq((checksum . "09a0e2fd24dfcd5942177d4a328821534ee60ded") (source . "git://github.com/lexi-lambda/scripty.git?path=scripty") (source_url . "http://github.com/lexi-lambda/scripty.git/tree/master?path=scripty"))))))) ("scripty-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "scripty" "doc/scripty@scripty-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scripty-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scripty-doc.txt"))) (checksum . "09a0e2fd24dfcd5942177d4a328821534ee60ded") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "scripty-lib")) (description . "") (implies . ()) (last-checked . 1632904571) (last-edit . 1476917300) (last-updated . 1502816422) (modules . ((lib "scribblings/scripty.scrbl"))) (name . "scripty-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (scripting . #t))) (source . "git://github.com/lexi-lambda/scripty.git?path=scripty-doc") (tags . ("scripting")) (versions . #hash((default . #hasheq((checksum . "09a0e2fd24dfcd5942177d4a328821534ee60ded") (source . "git://github.com/lexi-lambda/scripty.git?path=scripty-doc") (source_url . "http://github.com/lexi-lambda/scripty.git/tree/master?path=scripty-doc"))))))) ("scripty-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/scripty-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scripty-lib.txt"))) (checksum . "09a0e2fd24dfcd5942177d4a328821534ee60ded") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632904571) (last-edit . 1476917222) (last-updated . 1502816422) (modules . ((lib "scripty/main.rkt"))) (name . "scripty-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (scripting . #t))) (source . "git://github.com/lexi-lambda/scripty.git?path=scripty-lib") (tags . ("scripting")) (versions . #hash((default . #hasheq((checksum . "09a0e2fd24dfcd5942177d4a328821534ee60ded") (source . "git://github.com/lexi-lambda/scripty.git?path=scripty-lib") (source_url . "http://github.com/lexi-lambda/scripty.git/tree/master?path=scripty-lib"))))))) ("scrypt" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/scrypt.txt") (success-log . "server/built/install/scrypt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/scrypt.txt"))) (checksum . "da39d02302cad3e07c12215e42ea63212d209d1b") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("srfi-lite-lib" "base" "dynext-lib" "rackunit-lib")) (description . "Racket binding to Colin Percival's scrypt function.") (implies . ()) (last-checked . 1632904571) (last-edit . 1365202290) (last-updated . 1613729073) (modules . ((lib "scrypt/private/install.rkt") (lib "scrypt/test-main.rkt") (lib "scrypt/main.rkt") (lib "scrypt/wrapper.rkt"))) (name . "scrypt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (crypto . #t) (ffi . #t) (ring:1 . #t))) (source . "github://github.com/tonyg/racket-scrypt/master/") (tags . ("crypto" "ffi")) (versions . #hash((default . #hasheq((checksum . "da39d02302cad3e07c12215e42ea63212d209d1b") (source . "github://github.com/tonyg/racket-scrypt/master/") (source_url . "http://github.com/tonyg/racket-scrypt/tree/master/"))))))) ("sdl" . #hasheq((author . "cosmez leif@leifandersen.net") (authors . ("cosmez" "leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sdl.txt") (test-failure-log . "server/built/test-fail/sdl.txt") (test-success-log . #f))) (checksum . "8b31e76b77b24afe76683d4d5630c771a0329683") (checksum-error . #f) (collection . "sdl") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "gui-lib" "scribble-lib" "racket-doc")) (description . "Racket bindings for SDL") (implies . ()) (last-checked . 1632904572) (last-edit . 1477494205) (last-updated . 1502816423) (modules . ((lib "sdl/structs.rkt") (lib "sdl/constants.rkt") (lib "sdl/definitions.rkt") (lib "sdl/main.rkt"))) (name . "sdl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:cosmez . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "git://github.com/cosmez/racket-sdl/?path=sdl") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8b31e76b77b24afe76683d4d5630c771a0329683") (source . "git://github.com/cosmez/racket-sdl/?path=sdl") (source_url . "git://github.com/cosmez/racket-sdl/?path=sdl"))))))) ("sdl2" . #hasheq((author . "awkravchuk@gmail.com") (authors . ("awkravchuk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sdl2.txt") (test-failure-log . "server/built/test-fail/sdl2.txt") (test-success-log . #f))) (checksum . "a25bfa28e32c60f8219eb712255fa5b07e3a8ad5") (checksum-error . #f) (collection . "sdl2") (conflicts . ()) (date-added . 1559487243) (dependencies . ("base")) (description . "Racket bindings to the Simple DirectMedia Layer 2 library: the full package.\r\n") (implies . ()) (last-checked . 1632904573) (last-edit . 1559487243) (last-updated . 1596012494) (modules . ((lib "sdl2/ttf.rkt") (lib "sdl2/examples/simple.rkt") (lib "sdl2/image/main.rkt") (lib "sdl2/mixer/pretty.rkt") (lib "sdl2/image/pretty.rkt") (lib "sdl2/mixer.rkt") (lib "sdl2/net/main.rkt") (lib "sdl2/examples/hello-pretty.rkt") (lib "sdl2/examples/hello-sdl2.rkt") (lib "sdl2/ttf/main.rkt") (lib "sdl2/image.rkt") (lib "sdl2/net/pretty.rkt") (lib "sdl2/pretty.rkt") (lib "sdl2/examples/events.rkt") (lib "sdl2/mixer/main.rkt") (lib "sdl2/ttf/pretty.rkt") (lib "sdl2/private/lib-path.rkt") (lib "sdl2/net.rkt") (lib "sdl2/main.rkt"))) (name . "sdl2") (ring . 1) (search-terms . #hasheq((2d . #t) (:build-success: . #t) (author:awkravchuk@gmail.com . #t) (ffi . #t) (fonts . #t) (games . #t) (graphics . #t) (network . #t) (ring:1 . #t) (sound . #t))) (source . "https://github.com/lockie/racket-sdl2.git") (tags . ("2d" "ffi" "fonts" "games" "graphics" "network" "sound")) (versions . #hash(("1.0" . #hasheq((checksum . "6eab957d9d6f0f8ac429c8ea3a45e3a600711111") (source . "https://github.com/lockie/racket-sdl2.git#6eab957") (source_url . "https://github.com/lockie/racket-sdl2.git#6eab957"))) (default . #hasheq((checksum . "a25bfa28e32c60f8219eb712255fa5b07e3a8ad5") (source . "https://github.com/lockie/racket-sdl2.git") (source_url . "https://github.com/lockie/racket-sdl2.git"))))))) ("sdraw" . #hasheq((author . "jack@rosenth.al") (authors . ("jack@rosenth.al")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sdraw" "doc/sdraw@sdraw/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sdraw.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sdraw.txt"))) (checksum . "b885937074fa2c8ac0db4df2f84f11ea3e52ddcf") (checksum-error . #f) (collection . "sdraw") (conflicts . ()) (dependencies . ("base" "pict-lib" "scribble-lib" "racket-doc" "rackunit-lib" "pict-doc")) (description . "Generate cons-cell diagrams using pict. Includes extensive options for customizing the look and feel of the diagrams.") (implies . ()) (last-checked . 1632904574) (last-edit . 1546417041) (last-updated . 1546474945) (modules . ((lib "sdraw/main.rkt") (lib "sdraw/scribblings/sdraw.scrbl") (lib "sdraw/sdraw.rkt"))) (name . "sdraw") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jack@rosenth.al . #t) (education . #t) (lisp . #t) (pict . #t) (ring:1 . #t))) (source . "https://github.com/jackrosenthal/sdraw-racket.git") (tags . ("education" "lisp" "pict")) (versions . #hash((default . #hasheq((checksum . "b885937074fa2c8ac0db4df2f84f11ea3e52ddcf") (source . "https://github.com/jackrosenthal/sdraw-racket.git") (source_url . "https://github.com/jackrosenthal/sdraw-racket.git"))))))) ("search-list-box" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "search-list-box" "doc/search-list-box@search-list-box/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/search-list-box.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/search-list-box.txt"))) (checksum . "b54b28d4bd8d2d2426d3e211570a811ea3421f5b") (checksum-error . #f) (collection . "search-list-box") (conflicts . ()) (date-added . 1595694555) (dependencies . ("gui-lib" "base" "gui-doc" "pict-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A list-box% with a search field") (implies . ()) (last-checked . 1632904574) (last-edit . 1595694622) (last-updated . 1596455420) (modules . ((lib "search-list-box/main.rkt") (lib "search-list-box/scribblings/search-list-box.scrbl") (lib "search-list-box/examples/minimal.rkt") (lib "search-list-box/examples/capitals.rkt"))) (name . "search-list-box") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (fuzzy-search . #t) (gui . #t) (list-box . #t) (ring:1 . #t))) (source . "https://github.com/Metaxal/search-list-box.git") (tags . ("fuzzy-search" "gui" "list-box")) (versions . #hash((default . #hasheq((checksum . "b54b28d4bd8d2d2426d3e211570a811ea3421f5b") (source . "https://github.com/Metaxal/search-list-box.git") (source_url . "https://github.com/Metaxal/search-list-box.git"))))))) ("search-upward" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "search-upward" "doc/search-upward@search-upward/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/search-upward.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/search-upward.txt"))) (checksum . "02016d0ca3bdd76d69c9d376ae84936a63c5ca6e") (checksum-error . #f) (collection . "search-upward") (conflicts . ()) (date-added . 1570829462) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Search for files and directories by walking from a path upwards to the applicable root directory. ") (implies . ()) (last-checked . 1632904574) (last-edit . 1570829462) (last-updated . 1570829765) (modules . ((lib "search-upward/main.rkt") (lib "search-upward/scribblings/search-upward.scrbl"))) (name . "search-upward") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sage@sagegerard.com . #t) (configuration . #t) (files . #t) (locate . #t) (rcfile . #t) (ring:1 . #t) (runtime-configuration . #t) (search . #t))) (source . "https://github.com/zyrolasting/search-upward.git") (tags . ("configuration" "files" "locate" "rcfile" "runtime-configuration" "search")) (versions . #hash((default . #hasheq((checksum . "02016d0ca3bdd76d69c9d376ae84936a63c5ca6e") (source . "https://github.com/zyrolasting/search-upward.git") (source_url . "https://github.com/zyrolasting/search-upward.git"))))))) ("secd" . #hasheq((author . "gasparricci.p95@gmail.com") (authors . ("gasparricci.p95@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "secd" "doc/secd@secd/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/secd.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/secd.txt"))) (checksum . "cebf4c32d4c48c6d964449788c0e708524872120") (checksum-error . #f) (collection . "secd") (conflicts . ()) (dependencies . ("base" "beautiful-racket-lib" "brag" "data-lib" "racket-doc" "scribble-lib")) (description . "An SECD to ARM Assembler compiler, supporting a small subset of instructions.") (implies . ()) (last-checked . 1632904574) (last-edit . 1532995965) (last-updated . 1533012358) (modules . ((lib "secd/lexer.rkt") (lib "secd/main.rkt") (lib "secd/test.rkt") (lib "secd/expander.rkt") (lib "secd/tokenizer.rkt") (lib "secd/parser.rkt") (lib "secd/tokenize-only.rkt") (lib "secd/parse-only.rkt") (lib "secd/scribblings/secd.scrbl"))) (name . "secd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:gasparricci.p95@gmail.com . #t) (ring:1 . #t) (secd . #t) (secd-abstract-machine . #t) (secd-to-arm . #t))) (source . "https://github.com/GPRicci/secd.git") (tags . ("secd" "secd-abstract-machine" "secd-to-arm")) (versions . #hash((default . #hasheq((checksum . "cebf4c32d4c48c6d964449788c0e708524872120") (source . "https://github.com/GPRicci/secd.git") (source_url . "https://github.com/GPRicci/secd.git"))))))) ("semilit" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/semilit.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/semilit.txt"))) (checksum . "54db05b04b17c3b74facea8e8a438c73d238936a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "datalog" "scribble-lib")) (description . "Semi-literate programming for any Racket language") (implies . ()) (last-checked . 1632904575) (last-edit . 1353018353) (last-updated . 1603334906) (modules . ((lib "semilit/main.rkt") (lib "semilit/ancestor.rkt") (lib "semilit/scribble-example.rkt") (lib "semilit/example.rkt"))) (name . "semilit") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (dev . #t) (documentation . #t) (language . #t) (ring:1 . #t))) (source . "github://github.com/samth/semilit/master") (tags . ("dev" "documentation" "language")) (versions . #hash((default . #hasheq((checksum . "54db05b04b17c3b74facea8e8a438c73d238936a") (source . "github://github.com/samth/semilit/master") (source_url . "http://github.com/samth/semilit/tree/master"))))))) ("semver" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "semver" "doc/semver@semver/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/semver.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/semver.txt"))) (checksum . "fee107ee2401b5f7d7d797258eab3062ddb71232") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "alexis-util" "racket-doc" "scribble-lib" "typed-racket-doc" "typed-racket-more")) (description . "An implementation of the semver (semantic versioning) specification") (implies . ()) (last-checked . 1632904575) (last-edit . 1422729008) (last-updated . 1597601503) (modules . ((lib "semver/scribblings/semver.scrbl") (lib "semver/main.rkt"))) (name . "semver") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-semver") (tags . ()) (versions . #hash((default . #hasheq((checksum . "fee107ee2401b5f7d7d797258eab3062ddb71232") (source . "git://github.com/lexi-lambda/racket-semver") (source_url . "http://github.com/lexi-lambda/racket-semver/tree/master"))) ("6.1.1" . #hasheq((checksum . "220527934536b26476e652adf5340dd96e102d47") (source . "git://github.com/lexi-lambda/racket-semver#v6.1.1") (source_url . "http://github.com/lexi-lambda/racket-semver/tree/master#v6.1.1"))))))) ("send-exp" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/send-exp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/send-exp.txt"))) (checksum . "fcbb060fb9a0d8efc6810f6d77accf11093f6c8e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Terse syntax for object-oriented message sending") (implies . ()) (last-checked . 1632904575) (last-edit . 1402507661) (last-updated . 1535626727) (modules . ((lib "send-exp/lang/reader.rkt") (lib "send-exp/lang.rkt"))) (name . "send-exp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/tonyg/racket-send-exp") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "fcbb060fb9a0d8efc6810f6d77accf11093f6c8e") (source . "git://github.com/tonyg/racket-send-exp") (source_url . "http://github.com/tonyg/racket-send-exp/tree/master"))))))) ("sendinblue" . #hasheq((author . "me@sorinmuntean.ro") (authors . ("me@sorinmuntean.ro")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/sendinblue.txt") (docs . (("main" "sendinblue" "doc/sendinblue@sendinblue/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sendinblue.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sendinblue.txt"))) (checksum . "caa2e2afb3c2e43849aed92bcb73deadf0d0d20c") (checksum-error . #f) (collection . "sendinblue") (conflicts . ()) (date-added . 1605943488) (dependencies . ("base" "scribble-lib")) (description . "A client for the Sendinblue transactional email API.") (implies . ()) (last-checked . 1632904575) (last-edit . 1606039119) (last-updated . 1608076649) (modules . ((lib "sendinblue/sendinblue.scrbl") (lib "sendinblue/main.rkt") (lib "sendinblue/private/client.rkt") (lib "sendinblue/private/util.rkt"))) (name . "sendinblue") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:me@sorinmuntean.ro . #t) (email . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/sxn/racket-sendinblue.git?path=sendinblue#main") (tags . ("email" "web")) (versions . #hash((default . #hasheq((checksum . "caa2e2afb3c2e43849aed92bcb73deadf0d0d20c") (source . "https://github.com/sxn/racket-sendinblue.git?path=sendinblue#main") (source_url . "https://github.com/sxn/racket-sendinblue.git?path=sendinblue#main"))))))) ("sendinblue-test" . #hasheq((author . "me@sorinmuntean.ro") (authors . ("me@sorinmuntean.ro")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sendinblue-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sendinblue-test.txt"))) (checksum . "caa2e2afb3c2e43849aed92bcb73deadf0d0d20c") (checksum-error . #f) (collection . "tests") (conflicts . ()) (date-added . 1606026593) (dependencies . ("base" "sendinblue" "rackunit-lib" "web-server-lib")) (description . "A client for the Sendinblue transactional email API. (tests only)") (implies . ()) (last-checked . 1632904576) (last-edit . 1606027353) (last-updated . 1608076649) (modules . ((lib "tests/sendinblue/common.rkt") (lib "tests/sendinblue/send-mail.rkt"))) (name . "sendinblue-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:me@sorinmuntean.ro . #t) (email . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/sxn/racket-sendinblue.git?path=sendinblue-test#main") (tags . ("email" "web")) (versions . #hash((default . #hasheq((checksum . "caa2e2afb3c2e43849aed92bcb73deadf0d0d20c") (source . "https://github.com/sxn/racket-sendinblue.git?path=sendinblue-test#main") (source_url . "https://github.com/sxn/racket-sendinblue.git?path=sendinblue-test#main"))))))) ("sentry" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sentry.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sentry.txt"))) (checksum . "87d708bd4fc56ad272708ffd63ed1e2f50393b26") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1562014586) (dependencies . ("sentry-doc" "sentry-lib")) (description . "A Sentry SDK for Racket. (docs and implementation)") (implies . ("sentry-doc" "sentry-lib")) (last-checked . 1632904576) (last-edit . 1562014586) (last-updated . 1619091417) (modules . ()) (name . "sentry") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (monitoring . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-sentry.git?path=sentry") (tags . ("monitoring" "web")) (versions . #hash((default . #hasheq((checksum . "87d708bd4fc56ad272708ffd63ed1e2f50393b26") (source . "https://github.com/Bogdanp/racket-sentry.git?path=sentry") (source_url . "https://github.com/Bogdanp/racket-sentry.git?path=sentry"))))))) ("sentry-doc" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sentry" "doc/sentry@sentry-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sentry-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sentry-doc.txt"))) (checksum . "87d708bd4fc56ad272708ffd63ed1e2f50393b26") (checksum-error . #f) (collection . "sentry") (conflicts . ()) (date-added . 1562044104) (dependencies . ("base" "gregor-lib" "sentry-lib" "scribble-lib" "web-server-lib" "gregor-doc" "racket-doc" "web-server-doc")) (description . "A Sentry SDK for Racket. (docs only)") (implies . ()) (last-checked . 1632904576) (last-edit . 1562093349) (last-updated . 1619091417) (modules . ((lib "sentry/scribblings/sentry.scrbl"))) (name . "sentry-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (monitoring . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-sentry.git?path=sentry-doc") (tags . ("monitoring" "web")) (versions . #hash((default . #hasheq((checksum . "87d708bd4fc56ad272708ffd63ed1e2f50393b26") (source . "https://github.com/Bogdanp/racket-sentry.git?path=sentry-doc") (source_url . "https://github.com/Bogdanp/racket-sentry.git?path=sentry-doc"))))))) ("sentry-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sentry-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sentry-lib.txt"))) (checksum . "87d708bd4fc56ad272708ffd63ed1e2f50393b26") (checksum-error . #f) (collection . "sentry") (conflicts . ()) (date-added . 1562014555) (dependencies . ("base" "compatibility-lib" "gregor-lib" "http-easy" "web-server-lib")) (description . "A Sentry SDK for Racket. (implementation only)") (implies . ()) (last-checked . 1632904576) (last-edit . 1562014555) (last-updated . 1619091418) (modules . ((lib "sentry/private/reflect.rkt") (lib "sentry/private/user.rkt") (lib "sentry/main.rkt") (lib "sentry/sentry.rkt") (lib "sentry/private/event.rkt"))) (name . "sentry-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (monitoring . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-sentry.git?path=sentry-lib") (tags . ("monitoring" "web")) (versions . #hash((default . #hasheq((checksum . "87d708bd4fc56ad272708ffd63ed1e2f50393b26") (source . "https://github.com/Bogdanp/racket-sentry.git?path=sentry-lib") (source_url . "https://github.com/Bogdanp/racket-sentry.git?path=sentry-lib"))))))) ("sentry-test" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sentry-test.txt") (test-failure-log . "server/built/test-fail/sentry-test.txt") (test-success-log . #f))) (checksum . "87d708bd4fc56ad272708ffd63ed1e2f50393b26") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1562014520) (dependencies . ("base" "gregor-lib" "rackunit-lib" "sentry-lib" "threading-lib" "web-server-lib")) (description . "A Sentry SDK for Racket. (tests only)") (implies . ()) (last-checked . 1632904577) (last-edit . 1562014520) (last-updated . 1619091419) (modules . ((lib "tests/sentry/user.rkt") (lib "tests/sentry/event.rkt") (lib "tests/sentry/main.rkt") (lib "tests/sentry/common.rkt") (lib "tests/sentry/sentry.rkt"))) (name . "sentry-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (monitoring . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-sentry.git?path=sentry-test") (tags . ("monitoring" "web")) (versions . #hash((default . #hasheq((checksum . "87d708bd4fc56ad272708ffd63ed1e2f50393b26") (source . "https://github.com/Bogdanp/racket-sentry.git?path=sentry-test") (source_url . "https://github.com/Bogdanp/racket-sentry.git?path=sentry-test"))))))) ("seq-no-order" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "seq-no-order" "doc/seq-no-order@seq-no-order/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/seq-no-order.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/seq-no-order.txt"))) (checksum . "5911a6f2d4f92d115f964dbb2e55919e51db4478") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.1.1") "rackunit-lib" "scribble-lib" "racket-doc")) (description . "~seq-no-order and ~no-order as pattern-expanders that work with syntax/parse.") (implies . ()) (last-checked . 1632904577) (last-edit . 1415186905) (last-updated . 1627932844) (modules . ((lib "seq-no-order/docs/seq-no-order.scrbl") (lib "seq-no-order/groups-no-order.rkt") (lib "seq-no-order/main.rkt") (lib "seq-no-order/seq-no-order.rkt"))) (name . "seq-no-order") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t) (syntax-parse . #t))) (source . "git://github.com/AlexKnauth/seq-no-order") (tags . ("syntax-parse")) (versions . #hash((default . #hasheq((checksum . "5911a6f2d4f92d115f964dbb2e55919e51db4478") (source . "git://github.com/AlexKnauth/seq-no-order") (source_url . "http://github.com/AlexKnauth/seq-no-order/tree/master"))) ("6.1" . #hasheq((checksum . "09633cc6e9c1d98630e45098692cb907d545035f") (source . "git://github.com/AlexKnauth/seq-no-order#for-v-up-to-6.1") (source_url . "http://github.com/AlexKnauth/seq-no-order/tree/master#for-v-up-to-6.1"))))))) ("serial" . #hasheq((author . "bprzygoda@gmail.com") (authors . ("bprzygoda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/serial.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "47cb5ed979cdcd9481001aeb559e82c0d96bb42a") (checksum-error . #f) (collection . "serial") (conflicts . ()) (dependencies . ("base" "termios")) (description . "Helper FFI bindings for serial port communication based on pyserial") (implies . ()) (last-checked . 1632904577) (last-edit . 1424731342) (last-updated . 1502816424) (modules . ((lib "serial/serial.rkt") (lib "serial/ioctl.rkt") (lib "serial/main.rkt") (lib "serial/private/install.rkt"))) (name . "serial") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:bprzygoda@gmail.com . #t) (communication . #t) (linux . #t) (port . #t) (ring:1 . #t) (serial . #t))) (source . "git://github.com/BartAdv/racket-serial") (tags . ("communication" "linux" "port" "serial")) (versions . #hash((default . #hasheq((checksum . "47cb5ed979cdcd9481001aeb559e82c0d96bb42a") (source . "git://github.com/BartAdv/racket-serial") (source_url . "http://github.com/BartAdv/racket-serial/tree/master"))))))) ("serialize-cstruct-lib" . #hash((author . "tobias.hammer@dlr.de") (authors . ("tobias.hammer@dlr.de")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "serialization support for C structs") (implies . ()) (last-checked . 1632904577) (last-edit . 1417659583) (last-updated . 1571869293) (modules . ((lib "ffi/serialize-cstruct.rkt"))) (name . "serialize-cstruct-lib") (ring . 0) (search-terms . #hasheq((author:tobias.hammer@dlr.de . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "1c2815c82a1ba89d618e5a8f81ad729b4cd024ee") (source . "git://github.com/racket/serialize-cstruct-lib") (source_url . "http://github.com/racket/serialize-cstruct-lib/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("serialize-syntax-introducer" . #hasheq((author . "alexander@knauth.org iitalics@gmail.com") (authors . ("alexander@knauth.org" "iitalics@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "serialize-syntax-introducer" "doc/serialize-syntax-introducer@serialize-syntax-introducer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/serialize-syntax-introducer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/serialize-syntax-introducer.txt"))) (checksum . "5944d9f32df50b608c3493a7fd6a510afabf8fd3") (checksum-error . #f) (collection . "serialize-syntax-introducer") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Serializing syntax introducers into values that can be embedded into syntax objects, compiled, read back as syntax, and restored to functions that introduce the same scopes") (implies . ()) (last-checked . 1632904578) (last-edit . 1526585989) (last-updated . 1529190173) (modules . ((lib "serialize-syntax-introducer/main.rkt") (lib "serialize-syntax-introducer/scribblings/serialize-syntax-introducer.scrbl"))) (name . "serialize-syntax-introducer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (author:iitalics@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/macrotypefunctors/serialize-syntax-introducer.git") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "5944d9f32df50b608c3493a7fd6a510afabf8fd3") (source . "https://github.com/macrotypefunctors/serialize-syntax-introducer.git") (source_url . "https://github.com/macrotypefunctors/serialize-syntax-introducer.git"))))))) ("set" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "new-set" "doc/new-set@set/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/set.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/set.txt"))) (checksum . "655e2567cefe9684b0425a0ec601a97d1faf7d0e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Use `racket/set` instead") (implies . ()) (last-checked . 1632904578) (last-edit . 1410271687) (last-updated . 1524366249) (modules . ((lib "data/new-set.scrbl") (lib "data/main.rkt") (lib "data/private/common.rkt") (lib "data/set.rkt") (lib "data/seteq.rkt"))) (name . "set") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:samth@ccs.neu.edu . #t) (data . #t) (ring:1 . #t))) (source . "github://github.com/samth/set.rkt/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "655e2567cefe9684b0425a0ec601a97d1faf7d0e") (source . "github://github.com/samth/set.rkt/master") (source_url . "http://github.com/samth/set.rkt/tree/master"))))))) ("set-exp" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "set-exp" "doc/set-exp@set-exp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/set-exp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/set-exp.txt"))) (checksum . "19c898f13278efee5399de7307fc95d0f53ee82d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "doc-coverage" "cover" "doc-coverage" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "Literal set syntax") (implies . ()) (last-checked . 1632904578) (last-edit . 1500077346) (last-updated . 1549323800) (modules . ((lib "set-exp/lang/reader.rkt") (lib "set-exp/set-exp.scrbl") (lib "set-exp/lang.rkt") (lib "set-exp/test.rkt"))) (name . "set-exp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (reader . #t) (ring:1 . #t) (sugar . #t))) (source . "git://github.com/jackfirth/set-exp") (tags . ("experimental" "reader" "sugar")) (versions . #hash((default . #hasheq((checksum . "19c898f13278efee5399de7307fc95d0f53ee82d") (source . "git://github.com/jackfirth/set-exp") (source_url . "http://github.com/jackfirth/set-exp/tree/master"))))))) ("set-extras" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/set-extras.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/set-extras.txt"))) (checksum . "7feeb7a3a6b05c2e9ce39a0ff31eae25e150119d") (checksum-error . #f) (collection . "set-extras") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more")) (description . "Some conveniences for set, including fancy unicode aliases and more comprehension forms") (implies . ()) (last-checked . 1632904578) (last-edit . 1492836289) (last-updated . 1557109396) (modules . ((lib "set-extras/main.rkt") (lib "set-extras/tests.rkt"))) (name . "set-extras") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pcn@cs.umd.edu . #t) (ring:1 . #t) (set . #t) (typed-racket . #t) (unicode . #t))) (source . "git://github.com/philnguyen/set-extras?path=set-extras") (tags . ("set" "typed-racket" "unicode")) (versions . #hash((default . #hasheq((checksum . "7feeb7a3a6b05c2e9ce39a0ff31eae25e150119d") (source . "git://github.com/philnguyen/set-extras?path=set-extras") (source_url . "http://github.com/philnguyen/set-extras/tree/master?path=set-extras"))))))) ("sexp-diff" . #hasheq((author . "stamourv@racket-lang.org wjb@williamjbowman.com") (authors . ("stamourv@racket-lang.org" "wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sexp-diff.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sexp-diff.txt"))) (checksum . "5791264cb7031308b81c8c91df457cd51888210f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1596735462) (dependencies . ("sexp-diff-lib" "sexp-diff-doc" "sexp-diff-test")) (description . "Diffs s-expressions based on Levenshtein-like edit distance.") (implies . ("sexp-diff-lib" "sexp-diff-doc" "sexp-diff-test")) (last-checked . 1632904579) (last-edit . 1615238872) (last-updated . 1615258293) (modules . ()) (name . "sexp-diff") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:stamourv@racket-lang.org . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t))) (source . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5791264cb7031308b81c8c91df457cd51888210f") (source . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff") (source_url . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff"))) ("6.3" . #hasheq((checksum . "79fe2e11f6f92cbe54cf23c65eb15b1630da2d9b") (source . "https://github.com/stamourv/sexp-diff.git#pre-racket-6.4") (source_url . "https://github.com/stamourv/sexp-diff.git#pre-racket-6.4"))))))) ("sexp-diff-doc" . #hasheq((author . "stamourv@racket-lang.org wjb@williamjbowman.com") (authors . ("stamourv@racket-lang.org" "wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sexp-diff" "doc/sexp-diff@sexp-diff-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sexp-diff-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sexp-diff-doc.txt"))) (checksum . "5791264cb7031308b81c8c91df457cd51888210f") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1615153610) (dependencies . ("base" "scribble-lib" "rackunit-lib" "racket-doc" "sexp-diff-lib")) (description . "Diffs s-expressions based on Levenshtein-like edit distance, documentation.") (implies . ()) (last-checked . 1632904579) (last-edit . 1615153610) (last-updated . 1615258294) (modules . ((lib "sexp-diff-doc/sexp-diff/sexp-diff.scrbl"))) (name . "sexp-diff-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:stamourv@racket-lang.org . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t))) (source . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5791264cb7031308b81c8c91df457cd51888210f") (source . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff-doc") (source_url . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff-doc"))))))) ("sexp-diff-lib" . #hasheq((author . "stamourv@racket-lang.org wjb@williamjbowman.com") (authors . ("stamourv@racket-lang.org" "wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sexp-diff-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sexp-diff-lib.txt"))) (checksum . "5791264cb7031308b81c8c91df457cd51888210f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1615153562) (dependencies . ("base")) (description . "Diffs s-expressions based on Levenshtein-like edit distance, library only.") (implies . ()) (last-checked . 1632904580) (last-edit . 1615153562) (last-updated . 1615258295) (modules . ((lib "sexp-diff/stx-diff.rkt") (lib "sexp-diff/utils.rkt") (lib "sexp-diff/sexp-diff.rkt") (lib "sexp-diff/main.rkt"))) (name . "sexp-diff-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:stamourv@racket-lang.org . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t))) (source . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5791264cb7031308b81c8c91df457cd51888210f") (source . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff-lib") (source_url . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff-lib"))))))) ("sexp-diff-test" . #hasheq((author . "stamourv@racket-lang.org wjb@williamjbowman.com") (authors . ("stamourv@racket-lang.org" "wjb@williamjbowman.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sexp-diff-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sexp-diff-test.txt"))) (checksum . "5791264cb7031308b81c8c91df457cd51888210f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1615153654) (dependencies . ("base" "rackunit-lib" "sexp-diff-lib")) (description . "Tests for sexp-diff-lib") (implies . ()) (last-checked . 1632904580) (last-edit . 1615153654) (last-updated . 1615258296) (modules . ((lib "sexp-diff/tests/stx-diff.rkt") (lib "sexp-diff/tests/sexp-diff.rkt"))) (name . "sexp-diff-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:stamourv@racket-lang.org . #t) (author:wjb@williamjbowman.com . #t) (ring:1 . #t))) (source . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "5791264cb7031308b81c8c91df457cd51888210f") (source . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff-test") (source_url . "https://github.com/stamourv/sexp-diff.git?path=sexp-diff-test"))))))) ("sfont" . #hasheq((author . "capo.daniele@gmail.com") (authors . ("capo.daniele@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sfont" "doc/sfont@sfont/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sfont.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sfont.txt"))) (checksum . "c854f9734f15f4c7cd4b98e041b8c961faa3eef2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "slideshow-lib" "pict-doc" "racket-doc" "scribble-lib")) (description . "A package for manipulating and creating fonts in Racket.") (implies . ()) (last-checked . 1632904580) (last-edit . 1384683843) (last-updated . 1594030889) (modules . ((lib "sfont/utilities.rkt") (lib "sfont-examples/fontwrite-contours.rkt") (lib "sfont/properties.rkt") (lib "sfont/export/ufopfa.rkt") (lib "sfont/private/geom/bezier.rkt") (lib "sfont-examples/fontwrite-equalizer.rkt") (lib "sfont/math.rkt") (lib "sfont/space.rkt") (lib "sfont/scribblings/sfont.scrbl") (lib "sfont/private/fontmath/info-kern-math.rkt") (lib "sfont/private/fontmath/math.rkt") (lib "sfont/private/geom/geometric-generic.rkt") (lib "sfont/geometry.rkt") (lib "sfont/private/ufo/ufo-read-write.rkt") (lib "sfont/main.rkt") (lib "sfont/private/fontpict.rkt") (lib "sfont-examples/fontwrite-chart.rkt") (lib "sfont/private/gui/simple-frames.rkt") (lib "sfont/private/parametric/path.rkt") (lib "sfont/glyphlist.rkt") (lib "sfont/export/writepfa.rkt") (lib "sfont/private/gui/draw-property.rkt") (lib "sfont-examples/fontwrite-square.rkt") (lib "sfont/private/geom/vec.rkt") (lib "sfont/private/spacing/kern.rkt") (lib "sfont-examples/fontwrite-gradient.rkt") (lib "sfont/navigator.rkt") (lib "sfont/export/type1.rkt") (lib "sfont/private/fontmath/interpolables.rkt") (lib "sfont/private/geom/bounding-box.rkt") (lib "sfont/private/ufo/names.rkt") (lib "sfont/private/spacing/space.rkt") (lib "sfont/private/parametric/fontwriter.rkt") (lib "sfont-examples/fontwrite-random.rkt") (lib "sfont/windows.rkt") (lib "sfont/private/ufo/ufo-def.rkt") (lib "sfont/parametric.rkt") (lib "sfont/private/ufo/plists.rkt"))) (name . "sfont") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:capo.daniele@gmail.com . #t) (fonts . #t) (graphics . #t) (ring:1 . #t))) (source . "github://github.com/danielecapo/sfont/master") (tags . ("fonts" "graphics")) (versions . #hash((default . #hasheq((checksum . "c854f9734f15f4c7cd4b98e041b8c961faa3eef2") (source . "github://github.com/danielecapo/sfont/master") (source_url . "http://github.com/danielecapo/sfont/tree/master"))))))) ("sgl" . #hash((author . "jay@racket-lang.org") (authors . ("jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sgl" "doc/sgl@sgl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "sgl") (conflicts . ()) (dependencies . ("scheme-lib" "base" "compatibility-lib" "gui-lib" "draw-doc" "gui-doc" "racket-doc" "scribble-lib")) (description . "Legacy OpenGL library") (implies . ()) (last-checked . 1632904580) (last-edit . 1417659583) (last-updated . 1571887334) (modules . ((lib "sgl/examples/gears.rkt") (lib "sgl/sgl.rkt") (lib "sgl/scribblings/common.rkt") (lib "sgl/gl-types.rkt") (lib "sgl/scribblings/gl-vectors.scrbl") (lib "sgl/gl-vectors.rkt") (lib "sgl/main.rkt") (lib "sgl/examples/gl-frame.rkt") (lib "sgl/gl.rkt") (lib "sgl/examples/alpha.rkt") (lib "sgl/scribblings/bitmap.scrbl") (lib "sgl/scribblings/overview.scrbl") (lib "sgl/examples/gears-bitmap.rkt") (lib "sgl/scribblings/sgl.scrbl") (lib "sgl/bitmap.rkt") (lib "sgl/scribblings/gl.scrbl") (lib "sgl/scribblings/main.scrbl") (lib "sgl/init.rkt") (lib "sgl/scribblings/init.scrbl"))) (name . "sgl") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:jay@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "7999abdf79058cc709da0e49dee4ec0569249085") (source . "git://github.com/racket/sgl") (source_url . "http://github.com/racket/sgl/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("sha" . #hasheq((author . "racket@greghendershott.com") (authors . ("racket@greghendershott.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sha" "doc/sha@sha/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sha.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sha.txt"))) (checksum . "034302a567381e97b3b3956740f97ed3ae629374") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "SHA-1 and SHA-2, via FFI to OpenSSL.") (implies . ()) (last-checked . 1632904581) (last-edit . 1396443625) (last-updated . 1613494112) (modules . ((lib "sha/bytes.rkt") (lib "sha/main.rkt") (lib "sha/sha.scrbl"))) (name . "sha") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@greghendershott.com . #t) (crypto . #t) (ring:1 . #t) (web . #t))) (source . "github://github.com/greghendershott/sha/master") (tags . ("crypto" "web")) (versions . #hash((default . #hasheq((checksum . "034302a567381e97b3b3956740f97ed3ae629374") (source . "github://github.com/greghendershott/sha/master") (source_url . "http://github.com/greghendershott/sha/tree/master"))))))) ("shell-completion" . #hash((author . "samth@racket-lang.org sstrickl@racket-lang.org stamourv@racket-lang.org") (authors . ("samth@racket-lang.org" "sstrickl@racket-lang.org" "stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "shell-completion") (conflicts . ()) (dependencies . ("base")) (description . "Completion scribpts for bash and zsh") (implies . ()) (last-checked . 1632904581) (last-edit . 1417659583) (last-updated . 1571887334) (modules . ((lib "shell-completion/list-collects.rkt"))) (name . "shell-completion") (ring . 0) (search-terms . #hasheq((author:samth@racket-lang.org . #t) (author:sstrickl@racket-lang.org . #t) (author:stamourv@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "ee2b748e39504ea61296e7d747880e39b6a7e832") (source . "git://github.com/racket/shell-completion") (source_url . "http://github.com/racket/shell-completion/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("shell-pipeline" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "shell-pipeline" "doc/shell-pipeline@shell-pipeline/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/shell-pipeline.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/shell-pipeline.txt"))) (checksum . "c40c5adfedf632bc1fdbad3e0e2763b134ee3ff5") (checksum-error . #f) (collection . "shell") (conflicts . ()) (date-added . 1608151864) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Shell pipeline library") (implies . ()) (last-checked . 1632904581) (last-edit . 1608151864) (last-updated . 1615913737) (modules . ((lib "shell/private/mixed-pipeline.rkt") (lib "shell/private/filter-keyword-args.rkt") (lib "shell/private/pipeline-macro-logicwrapper.rkt") (lib "shell/private/test/test-pipeline.rkt") (lib "shell/utils/bourne-expansion-utils.rkt") (lib "shell/mixed-pipeline.rkt") (lib "shell/scribblings/pipeline-macro.scrbl") (lib "shell/private/subprocess-pipeline.rkt") (lib "shell/pipeline-macro.rkt") (lib "shell/private/good-unix-operator.rkt") (lib "shell/scribblings/mixed-pipeline.scrbl") (lib "shell/pipeline.rkt") (lib "shell/private/test/test-mixed-pipeline.rkt") (lib "shell/private/pipeline-operator-transform.rkt") (lib "shell/private/pipeline-operator-detect.rkt") (lib "shell/private/test/test-pipeline-macro.rkt") (lib "shell/private/define-pipeline-alias.rkt") (lib "shell/private/pipeline-operator-default.rkt") (lib "shell/private/mostly-structs.rkt") (lib "shell/private/pipeline-operators.rkt") (lib "shell/private/misc-utils.rkt") (lib "shell/private/define-simple-alias.rkt") (lib "shell/scribblings/pipeline.scrbl") (lib "shell/scribblings/shell-pipeline.scrbl") (lib "shell/private/pipeline-alias.rkt") (lib "shell/private/pipeline-macro-parse.rkt"))) (name . "shell-pipeline") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (ring:1 . #t) (shell . #t) (unix . #t))) (source . "https://github.com/willghatch/racket-rash.git?path=shell-pipeline") (tags . ("shell" "unix")) (versions . #hash((default . #hasheq((checksum . "c40c5adfedf632bc1fdbad3e0e2763b134ee3ff5") (source . "https://github.com/willghatch/racket-rash.git?path=shell-pipeline") (source_url . "https://github.com/willghatch/racket-rash.git?path=shell-pipeline"))))))) ("shlex" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "shlex" "doc/shlex@shlex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/shlex.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/shlex.txt"))) (checksum . "f469d9aee8bdba095d7147928223dd9e98d4dbdc") (checksum-error . #f) (collection . "shlex") (conflicts . ()) (date-added . 1592757406) (dependencies . ("parser-tools-lib" ("base" #:version "7.8") "scribble-lib" "racket-doc" "rackunit-lib")) (description . "shlex for Racket: Simple lexical analysis") (implies . ()) (last-checked . 1632904581) (last-edit . 1592757406) (last-updated . 1607777840) (modules . ((lib "shlex/scribblings/shlex.scrbl") (lib "shlex/private/convert.rkt") (lib "shlex/main.rkt"))) (name . "shlex") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (ring:1 . #t) (shell . #t))) (source . "https://github.com/sorawee/shlex.git") (tags . ("shell")) (versions . #hash((default . #hasheq((checksum . "f469d9aee8bdba095d7147928223dd9e98d4dbdc") (source . "https://github.com/sorawee/shlex.git") (source_url . "https://github.com/sorawee/shlex.git"))))))) ("shootout" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "shootout" "doc/shootout@shootout/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/shootout.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/shootout.txt"))) (checksum . "8d4454844112861f4baeb72d8ed6b22e53c28448") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib")) (description . "Expression Performance Comparison") (implies . ()) (last-checked . 1632904582) (last-edit . 1456797982) (last-updated . 1502816427) (modules . ((lib "shootout/shootout.scrbl") (lib "shootout/main.rkt"))) (name . "shootout") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/shootout.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8d4454844112861f4baeb72d8ed6b22e53c28448") (source . "http://www.neilvandyke.org/racket/shootout.zip") (source_url . "http://www.neilvandyke.org/racket/shootout.zip"))))))) ("sicp" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sicp-manual" "doc/sicp-manual@sicp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sicp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sicp.txt"))) (checksum . "4af740f085fcae86436c8ef48c11161f5a46deee") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556729468) (dependencies . ("base" "draw-lib" "r5rs-lib" "rackunit-lib" "snip-lib" "draw-doc" "gui-doc" "r5rs-doc" "racket-doc" "scribble-lib")) (description . "SICP Support for DrRacket") (implies . ()) (last-checked . 1632904583) (last-edit . 1556729468) (last-updated . 1598712866) (modules . ((lib "sicp-doc/sicp.scrbl") (lib "sicp/test/amb.rkt") (lib "sicp/lang/reader.rkt") (lib "sicp-doc/sicp-pict.scrbl") (lib "sicp/main.rkt") (lib "sicp-doc/external-links.scrbl") (lib "sicp-doc/sicp-manual.scrbl") (lib "sicp-pict/main.rkt") (lib "sicp-pict/test/tests.rkt") (lib "sicp-doc/installation.scrbl") (lib "sicp-doc/contributors.scrbl"))) (name . "sicp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jensaxel@soegaard.net . #t) (books . #t) (pictures . #t) (ring:1 . #t) (scheme . #t) (sicp . #t) (textbook . #t))) (source . "https://github.com/sicp-lang/sicp.git") (tags . ("books" "pictures" "scheme" "sicp" "textbook")) (versions . #hash((default . #hasheq((checksum . "4af740f085fcae86436c8ef48c11161f5a46deee") (source . "https://github.com/sicp-lang/sicp.git") (source_url . "https://github.com/sicp-lang/sicp.git"))))))) ("signature" . #hasheq((author . "scott@thinkmoore.net") (authors . ("scott@thinkmoore.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "signature" "doc/signature@signature/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/signature.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/signature.txt"))) (checksum . "c8be60858474259d27f94b23214f7397d9653eb1") (checksum-error . #f) (collection . "signature") (conflicts . ()) (dependencies . ("kw-utils" "racklog" "base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Syntax and utilities for writing function contracts as signatures") (implies . ()) (last-checked . 1632904583) (last-edit . 1493742329) (last-updated . 1502816428) (modules . ((lib "signature/main.rkt") (lib "signature/utils.rkt") (lib "signature/scribblings/signature.scrbl") (lib "signature/syntax.rkt"))) (name . "signature") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:scott@thinkmoore.net . #t) (contracts . #t) (ring:1 . #t))) (source . "git://github.com/thinkmoore/signature") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "c8be60858474259d27f94b23214f7397d9653eb1") (source . "git://github.com/thinkmoore/signature") (source_url . "http://github.com/thinkmoore/signature/tree/master"))))))) ("simple-barcode" . #hasheq((author . "chenxiao770117@gmail.com") (authors . ("chenxiao770117@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-barcode" "doc/simple-barcode@simple-barcode/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-barcode.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-barcode.txt"))) (checksum . "4afa806ff27de8e2715b15904e1f3fcec2c7f136") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "draw-lib" "simple-svg" "racket-doc" "scribble-lib")) (description . "Barcode tool") (implies . ()) (last-checked . 1632904583) (last-edit . 1545374414) (last-updated . 1613120142) (modules . ((lib "simple-barcode/tests/code128/code128-test.rkt") (lib "simple-barcode/lib/draw/draw.rkt") (lib "simple-barcode/tests/code39/code39-test.rkt") (lib "simple-barcode/main.rkt") (lib "simple-barcode/example/svg/svg-example.rkt") (lib "simple-barcode/lib/code128-lib.rkt") (lib "simple-barcode/lib/draw/png.rkt") (lib "simple-barcode/lib/draw/parameters.rkt") (lib "simple-barcode/tests/share-test.rkt") (lib "simple-barcode/lib/draw/svg.rkt") (lib "simple-barcode/tests/ean13/ean13-test.rkt") (lib "simple-barcode/lib/share.rkt") (lib "simple-barcode/simple-barcode.scrbl") (lib "simple-barcode/lib/ean13-lib.rkt") (lib "simple-barcode/tests/main/main-test.rkt") (lib "simple-barcode/lib/code39-lib.rkt") (lib "simple-barcode/example/png/png-example.rkt"))) (name . "simple-barcode") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:chenxiao770117@gmail.com . #t) (barcode . #t) (ring:1 . #t))) (source . "https://github.com/simmone/racket-simple-barcode.git") (tags . ("barcode")) (versions . #hash((default . #hasheq((checksum . "4afa806ff27de8e2715b15904e1f3fcec2c7f136") (source . "https://github.com/simmone/racket-simple-barcode.git") (source_url . "https://github.com/simmone/racket-simple-barcode.git"))))))) ("simple-csv" . #hasheq((author . "pragun.goyal@gmail.com") (authors . ("pragun.goyal@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/simple-csv.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "f71d9b92826203cacf483ab5b2379fd18f8585d3") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: git://github.com/pragun/simple-csv\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (description . "") (implies . ()) (last-checked . 1632904584) (last-edit . 1461266728) (last-updated . 1621810030) (modules . ((lib "simple-csv/csv-reader.rkt") (lib "simple-csv/scribblings/csv.scrbl") (lib "simple-csv/csv.rkt") (lib "simple-csv/csv-writer.rkt"))) (name . "simple-csv") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (author:pragun.goyal@gmail.com . #t) (csv . #t) (ring:1 . #t))) (source . "git://github.com/pragun/simple-csv") (tags . ("csv")) (versions . #hash((default . #hasheq((checksum . "f71d9b92826203cacf483ab5b2379fd18f8585d3") (source . "git://github.com/pragun/simple-csv") (source_url . "http://github.com/pragun/simple-csv/tree/master"))))))) ("simple-http" . #hasheq((author . "info@v25media.com") (authors . ("info@v25media.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-http" "doc/simple-http@simple-http/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-http.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-http.txt"))) (checksum . "cf15bfd0c71f3dd3189417dd1a7a34fc6bfad557") (checksum-error . #f) (collection . "simple-http") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "html-parsing" "scribble-lib" "racket-doc")) (description . "Very small lib for making HTTP requests, usually to APIs.") (implies . ()) (last-checked . 1632904584) (last-edit . 1494770663) (last-updated . 1592073300) (modules . ((lib "simple-http/main.rkt") (lib "simple-http/scribblings/simple-http.scrbl"))) (name . "simple-http") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:info@v25media.com . #t) (http . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/DarrenN/simple-http") (tags . ("http" "net")) (versions . #hash((default . #hasheq((checksum . "cf15bfd0c71f3dd3189417dd1a7a34fc6bfad557") (source . "git://github.com/DarrenN/simple-http") (source_url . "http://github.com/DarrenN/simple-http/tree/master"))))))) ("simple-matrix" . #hasheq((author . "deren.dohoda@gmail.com") (authors . ("deren.dohoda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-matrix-manual" "doc/simple-matrix-manual@simple-matrix/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-matrix.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-matrix.txt"))) (checksum . "19814fd5de10d42eea207939169ee5100e38c500") (checksum-error . #f) (collection . "simple-matrix") (conflicts . ()) (date-added . 1597361283) (dependencies . ("base" "sandbox-lib" "scribble-lib" "rackunit-lib" "racket-doc")) (description . "A very simple library for basic matrix arithmetic.") (implies . ()) (last-checked . 1632904584) (last-edit . 1597361283) (last-updated . 1621110536) (modules . ((lib "simple-matrix/private/simple-matrix.rkt") (lib "simple-matrix/main.rkt") (lib "simple-matrix/simple-matrix-manual.scrbl"))) (name . "simple-matrix") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:deren.dohoda@gmail.com . #t) (matrix . #t) (ring:1 . #t))) (source . "https://bitbucket.org/derend/simple-matrix.git") (tags . ("matrix")) (versions . #hash((default . #hasheq((checksum . "19814fd5de10d42eea207939169ee5100e38c500") (source . "https://bitbucket.org/derend/simple-matrix.git") (source_url . "https://bitbucket.org/derend/simple-matrix.git"))))))) ("simple-oauth2" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-oauth2" "doc/simple-oauth2@simple-oauth2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-oauth2.txt") (test-failure-log . "server/built/test-fail/simple-oauth2.txt") (test-success-log . #f))) (checksum . "b8cb40511f64dcb274e17957e6fc9ab4c8a6cbea") (checksum-error . #f) (collection . "oauth2") (conflicts . ()) (date-added . 1549389191) (dependencies . ("base" "crypto-lib" "dali" "net-jwt" "threading" "web-server-lib" "rackunit-lib" "rackunit-spec" "scribble-lib" "racket-doc" "racket-index" "sandbox-lib" "cover-coveralls")) (description . "Simple OAuth 2.0 client implementation") (implies . ()) (last-checked . 1632904584) (last-edit . 1549389191) (last-updated . 1614181956) (modules . ((lib "oauth2/private/external-ip.rkt") (lib "oauth2/scribblings/client.scrbl") (lib "oauth2/scribblings/storage.scrbl") (lib "oauth2/tools/common.rkt") (lib "oauth2/private/logging.rkt") (lib "oauth2/tests/test-doc-complete.rkt") (lib "oauth2/scribblings/tools.scrbl") (lib "oauth2/client.rkt") (lib "oauth2/private/template.rkt") (lib "oauth2/storage/config.rkt") (lib "oauth2/client/flow.rkt") (lib "oauth2/private/privacy.rkt") (lib "oauth2/tools/fitbit.rkt") (lib "oauth2/private/redirect-server.rkt") (lib "oauth2/main.rkt") (lib "oauth2/private/storage.rkt") (lib "oauth2/private/http.rkt") (lib "oauth2/storage/clients.rkt") (lib "oauth2/scribblings/oauth2.scrbl") (lib "oauth2/client/pkce.rkt") (lib "oauth2/scribblings/simple-oauth2.scrbl") (lib "oauth2/storage/tokens.rkt") (lib "oauth2/tools/livongo.rkt"))) (name . "simple-oauth2") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johnstonskj@gmail.com . #t) (oauth . #t) (ring:1 . #t))) (source . "https://github.com/johnstonskj/simple-oauth2.git") (tags . ("oauth")) (versions . #hash((default . #hasheq((checksum . "b8cb40511f64dcb274e17957e6fc9ab4c8a6cbea") (source . "https://github.com/johnstonskj/simple-oauth2.git") (source_url . "https://github.com/johnstonskj/simple-oauth2.git"))))))) ("simple-obfuscation" . #hasheq((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-obfuscation.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-obfuscation.txt"))) (checksum . "f6ff1afe75ae97994b351a9dc189c0e31d06fdf6") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (date-added . 1615569257) (dependencies . ("base")) (description . "") (implies . ()) (last-checked . 1632904584) (last-edit . 1615569257) (last-updated . 1615582190) (modules . ((lib "simple-obfuscation/main.rkt"))) (name . "simple-obfuscation") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:robby@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/rfindler/simple-obfuscation.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f6ff1afe75ae97994b351a9dc189c0e31d06fdf6") (source . "https://github.com/rfindler/simple-obfuscation.git") (source_url . "https://github.com/rfindler/simple-obfuscation.git"))))))) ("simple-polynomial" . #hasheq((author . "deren.dohoda@gmail.com") (authors . ("deren.dohoda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-poly-manual" "doc/simple-poly-manual@simple-polynomial/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-polynomial.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-polynomial.txt"))) (checksum . "c8c7e2e4175a27123becd6e78f792738b0bf1188") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1597642988) (dependencies . ("base" "parser-tools-lib" "simple-matrix" "math-lib" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib" "plot-doc" "plot-gui-lib" "draw-lib")) (description . "Basic polynomial arithmetic and interpolation.") (implies . ()) (last-checked . 1632904584) (last-edit . 1597645456) (last-updated . 1621110536) (modules . ((lib "simple-polynomial/tools.rkt") (lib "simple-polynomial/private/poly-struct-parse.rkt") (lib "simple-polynomial/private/poly-struct.rkt") (lib "simple-polynomial/private/poly-display.rkt") (lib "simple-polynomial/simple-poly-manual.scrbl") (lib "simple-polynomial/private/term-ops.rkt") (lib "simple-polynomial/base.rkt") (lib "simple-polynomial/private/poly-tools.rkt") (lib "simple-polynomial/fit.rkt") (lib "simple-polynomial/main.rkt") (lib "simple-polynomial/private/poly-fit.rkt") (lib "simple-polynomial/private/poly-smooth.rkt"))) (name . "simple-polynomial") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:deren.dohoda@gmail.com . #t) (interpolation . #t) (polynomial . #t) (ring:1 . #t))) (source . "https://bitbucket.org/derend/simple-polynomial.git") (tags . ("interpolation" "polynomial")) (versions . #hash((default . #hasheq((checksum . "c8c7e2e4175a27123becd6e78f792738b0bf1188") (source . "https://bitbucket.org/derend/simple-polynomial.git") (source_url . "https://bitbucket.org/derend/simple-polynomial.git"))))))) ("simple-qr" . #hasheq((author . "chenxiao770117@gmail.com") (authors . ("chenxiao770117@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-qr" "doc/simple-qr@simple-qr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-qr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-qr.txt"))) (checksum . "904f1491bc521badeafeabd0d7d7e97e3d0ee958") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "draw-lib" "draw-doc" "racket-doc" "scribble-lib" "reed-solomon" "simple-svg")) (description . "QR code tool") (implies . ()) (last-checked . 1632904585) (last-edit . 1545374444) (last-updated . 1615251125) (modules . ((lib "simple-qr/read/lib/express/exclude-alignment-pattern/exclude-alignment-pattern.rkt") (lib "simple-qr/write/lib/express/group-decimal-list/group-decimal-list.rkt") (lib "simple-qr/share/dark-module.rkt") (lib "simple-qr/write/lib/express/express.rkt") (lib "simple-qr/write/lib/dark-module/dark-module.rkt") (lib "simple-qr/write/lib/func/code-log/code-log-func.rkt") (lib "simple-qr/write/lib/mask-data/mask-data.rkt") (lib "simple-qr/write/lib/func/poly/poly-dic-func.rkt") (lib "simple-qr/tests/write/func/capacity-dic-test.rkt") (lib "simple-qr/tests/share/data-group-test.rkt") (lib "simple-qr/share/format-information.rkt") (lib "simple-qr/write/lib/format-information/format-information.rkt") (lib "simple-qr/share/data-encoding.rkt") (lib "simple-qr/read/lib/express/origin-bits/origin-bits.rkt") (lib "simple-qr/write/lib/express/add-terminator/add-terminator.rkt") (lib "simple-qr/tests/share/alignment-pattern-test.rkt") (lib "simple-qr/read/lib/express/exclude-dark-module/exclude-dark-module.rkt") (lib "simple-qr/write/lib/express/add-multiple8/add-multiple8.rkt") (lib "simple-qr/write/lib/express/dark-module/dark-module.rkt") (lib "simple-qr/read/lib/express/exclude-separator/exclude-separator.rkt") (lib "simple-qr/write/lib/express/repeat-pad/repeat-pad.rkt") (lib "simple-qr/write/lib/func/remainder-bits/remainder-bits-dic.rkt") (lib "simple-qr/write/lib/func/func.rkt") (lib "simple-qr/write/lib/express/data-bits/data-bits.rkt") (lib "simple-qr/write/lib/express/decimal-list/decimal-list.rkt") (lib "simple-qr/read/lib/express/interleave-data/interleave-data.rkt") (lib "simple-qr/write/lib/express/finder-pattern/finder-pattern.rkt") (lib "simple-qr/tests/write/data-encoding-test.rkt") (lib "simple-qr/write/lib/express/timing-pattern/timing-pattern.rkt") (lib "simple-qr/write/lib/express/version-information/version-information.rkt") (lib "simple-qr/write/lib/express/header.rkt") (lib "simple-qr/tests/read/lib-test.rkt") (lib "simple-qr/example/example.rkt") (lib "simple-qr/tests/share/timing-pattern-test.rkt") (lib "simple-qr/write/lib/data-encoding/data-encoding.rkt") (lib "simple-qr/tests/lab/svg.rkt") (lib "simple-qr/write/lib/express/format-information/format-information.rkt") (lib "simple-qr/read/lib/express/rotated-bits/rotated-bits.rkt") (lib "simple-qr/share/finder-pattern.rkt") (lib "simple-qr/tests/write/func/poly-dic-func-test.rkt") (lib "simple-qr/write/lib/func/capacity/capacity-func.rkt") (lib "simple-qr/write/lib/timing-pattern/timing-pattern.rkt") (lib "simple-qr/share/version-information.rkt") (lib "simple-qr/write/lib/express/masked/masked.rkt") (lib "simple-qr/write/lib/express/interleave-data-group/interleave-data-group.rkt") (lib "simple-qr/write/lib/express/mask-list/mask-list.rkt") (lib "simple-qr/read/lib/express/express.rkt") (lib "simple-qr/write/lib/fill-data/fill-data.rkt") (lib "simple-qr/tests/write/mask-data-test.rkt") (lib "simple-qr/write/lib/alignment-pattern/alignment-pattern.rkt") (lib "simple-qr/share/code-info/code-info-func.rkt") (lib "simple-qr/write/lib/express/append-remainder/append-remainder.rkt") (lib "simple-qr/write/lib/express/add-indicator/add-indicator.rkt") (lib "simple-qr/share/mask-data.rkt") (lib "simple-qr/tests/write/func/func-test.rkt") (lib "simple-qr/read/lib/express/exclude-timing-pattern/exclude-timing-pattern.rkt") (lib "simple-qr/write/lib/express/final/final.rkt") (lib "simple-qr/read/lib/express/final-string/final-string.rkt") (lib "simple-qr/share/separator.rkt") (lib "simple-qr/write/qr-write.rkt") (lib "simple-qr/share/code-info/code-info-dic.rkt") (lib "simple-qr/write/lib/express/overview/overview.rkt") (lib "simple-qr/read/lib/express/bw-bits/bw-bits.rkt") (lib "simple-qr/share/draw/draw.rkt") (lib "simple-qr/tests/read/qr-read-test.rkt") (lib "simple-qr/read/lib/express/exclude-format-information/exclude-format-information.rkt") (lib "simple-qr/read/lib/lib.rkt") (lib "simple-qr/tests/test-cases/cases-test.rkt") (lib "simple-qr/tests/write/func/code-info-func-test.rkt") (lib "simple-qr/write/lib/func/code-log/code-log-dic.rkt") (lib "simple-qr/share/character-bit-width.rkt") (lib "simple-qr/tests/write/func/capacity-func-test.rkt") (lib "simple-qr/write/lib/finder-pattern/finder-pattern.rkt") (lib "simple-qr/write/lib/func/code-log/transform-code-log.rkt") (lib "simple-qr/read/lib/express/final-bits/final-bits.rkt") (lib "simple-qr/write/lib/data-encoding/alphanumeric.rkt") (lib "simple-qr/read/lib/express/header.rkt") (lib "simple-qr/share/draw/lib.rkt") (lib "simple-qr/write/lib/express/start/start.rkt") (lib "simple-qr/write/lib/express/fill-data/fill-data.rkt") (lib "simple-qr/write/lib/func/code-info/code-info-func.rkt") (lib "simple-qr/write/lib/express/alignment-pattern/alignment-pattern.rkt") (lib "simple-qr/share/draw/svg.rkt") (lib "simple-qr/tests/read/matrix-rotate-test.rkt") (lib "simple-qr/tests/share/draw-test.rkt") (lib "simple-qr/read/lib/express/basic-information/basic-information.rkt") (lib "simple-qr/main.rkt") (lib "simple-qr/write/lib/express/input/input.rkt") (lib "simple-qr/share/draw/png.rkt") (lib "simple-qr/scribble/simple-qr.scrbl") (lib "simple-qr/write/lib/func/code-info/code-info-dic.rkt") (lib "simple-qr/write/lib/func/remainder-bits/remainder-bits-func.rkt") (lib "simple-qr/share/data-group.rkt") (lib "simple-qr/tests/share/character-bit-width-test.rkt") (lib "simple-qr/tests/share/fill-data-test.rkt") (lib "simple-qr/write/lib/express/data-trace/data-trace.rkt") (lib "simple-qr/share/fill-data.rkt") (lib "simple-qr/write/lib/express/separator/separator.rkt") (lib "simple-qr/write/lib/func/capacity/transform.rkt") (lib "simple-qr/read/lib/express/unmask-data/unmask-data.rkt") (lib "simple-qr/read/matrix-rotate/lib.rkt") (lib "simple-qr/write/lib/func/capacity/capacity-dic.rkt") (lib "simple-qr/read/lib/express/input/input.rkt") (lib "simple-qr/read/lib/express/rotate-ratio/rotate-ratio.rkt") (lib "simple-qr/share/timing-pattern.rkt") (lib "simple-qr/tests/share/func-test.rkt") (lib "simple-qr/read/lib/express/exclude-version-information/exclude-version-information.rkt") (lib "simple-qr/write/lib/separator/separator.rkt") (lib "simple-qr/tests/write/func/code-log-func-test.rkt") (lib "simple-qr/read/lib/express/decoded-data/decoded-data.rkt") (lib "simple-qr/share/func.rkt") (lib "simple-qr/read/lib/express/data-recovery/data-recovery.rkt") (lib "simple-qr/share/alignment-pattern.rkt") (lib "simple-qr/read/lib/express/finder-pattern-center-points/finder-pattern-center-points.rkt") (lib "simple-qr/tests/write/func/remainder-bits-func-test.rkt") (lib "simple-qr/write/lib/version-information/version-information.rkt") (lib "simple-qr/read/lib/express/exclude-finder-pattern/exclude-finder-pattern.rkt") (lib "simple-qr/write/lib/express/error-code/error-code.rkt") (lib "simple-qr/share/error-level.rkt") (lib "simple-qr/read/qr-read.rkt") (lib "simple-qr/read/lib/express/trimed-bits/trimed-bits.rkt") (lib "simple-qr/write/lib/express/reserved-format-information/reserved-format-information.rkt"))) (name . "simple-qr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:chenxiao770117@gmail.com . #t) (qr . #t) (ring:1 . #t))) (source . "https://github.com/simmone/racket-simple-qr.git") (tags . ("qr")) (versions . #hash((default . #hasheq((checksum . "904f1491bc521badeafeabd0d7d7e97e3d0ee958") (source . "https://github.com/simmone/racket-simple-qr.git") (source_url . "https://github.com/simmone/racket-simple-qr.git"))))))) ("simple-svg" . #hasheq((author . "chenxiao770117@gmail.com") (authors . ("chenxiao770117@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-svg" "doc/simple-svg@simple-svg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-svg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-svg.txt"))) (checksum . "d2fa88b5c0b801bbd6169274237a0edb63998c76") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1559659630) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "svg generate tool for racket") (implies . ()) (last-checked . 1632904585) (last-edit . 1559659630) (last-updated . 1613120149) (modules . ((lib "simple-svg/src/lib/sstyle.rkt") (lib "simple-svg/scribble/shapes/circle.scrbl") (lib "simple-svg/tests/gradient/gradient-test.rkt") (lib "simple-svg/src/shapes/line.rkt") (lib "simple-svg/tests/shapes/line/line-test.rkt") (lib "simple-svg/scribble/path/arc.scrbl") (lib "simple-svg/src/path/lineto.rkt") (lib "simple-svg/tests/shapes/polygon/polygon-test.rkt") (lib "simple-svg/scribble/path/path.scrbl") (lib "simple-svg/src/lib/lib.rkt") (lib "simple-svg/src/path/arc.rkt") (lib "simple-svg/src/svg.rkt") (lib "simple-svg/src/shapes/polygon.rkt") (lib "simple-svg/tests/path/raw-path-test.rkt") (lib "simple-svg/tests/shapes/circle/circle-test.rkt") (lib "simple-svg/tests/sstyle/transform-test.rkt") (lib "simple-svg/src/path/close-path.rkt") (lib "simple-svg/scribble/path/moveto.scrbl") (lib "simple-svg/scribble/gradient/gradient.scrbl") (lib "simple-svg/showcase/example/recursive.rkt") (lib "simple-svg/tests/group/group-test.rkt") (lib "simple-svg/scribble/shapes/polyline.scrbl") (lib "simple-svg/src/shapes/rect.rkt") (lib "simple-svg/tests/text/text-test.rkt") (lib "simple-svg/scribble/path/lineto.scrbl") (lib "simple-svg/scribble/text/text.scrbl") (lib "simple-svg/src/path/path.rkt") (lib "simple-svg/src/path/moveto.rkt") (lib "simple-svg/tests/shapes/rect/rect-test.rkt") (lib "simple-svg/src/path/raw-path.rkt") (lib "simple-svg/tests/path/moveto-test.rkt") (lib "simple-svg/scribble/shapes/rect.scrbl") (lib "simple-svg/tests/path/ccurve-test.rkt") (lib "simple-svg/scribble/path/qcurve.scrbl") (lib "simple-svg/scribble/shapes/polygon.scrbl") (lib "simple-svg/tests/shapes/polyline/polyline-test.rkt") (lib "simple-svg/scribble/shapes/ellipse.scrbl") (lib "simple-svg/tests/path/lineto-test.rkt") (lib "simple-svg/scribble/simple-svg.scrbl") (lib "simple-svg/src/text/text.rkt") (lib "simple-svg/src/shapes/polyline.rkt") (lib "simple-svg/src/path/ccurve.rkt") (lib "simple-svg/src/gradient/gradient.rkt") (lib "simple-svg/scribble/path/raw-path.scrbl") (lib "simple-svg/scribble/shapes/line.scrbl") (lib "simple-svg/main.rkt") (lib "simple-svg/tests/svg/svg-test.rkt") (lib "simple-svg/src/shapes/circle.rkt") (lib "simple-svg/tests/path/qcurve-test.rkt") (lib "simple-svg/scribble/path/ccurve.scrbl") (lib "simple-svg/src/shapes/ellipse.rkt") (lib "simple-svg/scribble/path/close.scrbl") (lib "simple-svg/src/path/qcurve.rkt") (lib "simple-svg/tests/path/arc-test.rkt") (lib "simple-svg/scribble/sstyle.scrbl") (lib "simple-svg/scribble/usage.scrbl") (lib "simple-svg/tests/shapes/ellipse/ellipse-test.rkt"))) (name . "simple-svg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:chenxiao770117@gmail.com . #t) (ring:1 . #t) (svg . #t))) (source . "https://github.com/simmone/racket-simple-svg.git") (tags . ("svg")) (versions . #hash((default . #hasheq((checksum . "d2fa88b5c0b801bbd6169274237a0edb63998c76") (source . "https://github.com/simmone/racket-simple-svg.git") (source_url . "https://github.com/simmone/racket-simple-svg.git"))))))) ("simple-tree-text-markup" . #hasheq((author . "sperber@deinprogramm.de") (authors . ("sperber@deinprogramm.de")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "eb6ad2b0a4bc6796ac258de4dbfdc8cd894aaf3b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1601651738) (dependencies . ("simple-tree-text-markup-lib" "simple-tree-text-markup-doc")) (description . "This is a tree-based combinator library for simple markup, mainly for\r\ndisplaying messages in a REPL.\r\n\r\nThis is a meta-package, containing simple-tree-text-markup-lib and simple-tree-text-markup-doc.") (implies . ("simple-tree-text-markup-lib" "simple-tree-text-markup-doc")) (last-checked . 1632904585) (last-edit . 1601651738) (last-updated . 1629048960) (modules . ()) (name . "simple-tree-text-markup") (ring . 1) (search-terms . #hasheq((author:sperber@deinprogramm.de . #t) (main-distribution . #t) (ring:1 . #t))) (source . "https://github.com/racket/simple-tree-text-markup.git?path=simple-tree-text-markup") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "eb6ad2b0a4bc6796ac258de4dbfdc8cd894aaf3b") (source . "https://github.com/racket/simple-tree-text-markup.git?path=simple-tree-text-markup") (source_url . "https://github.com/racket/simple-tree-text-markup.git?path=simple-tree-text-markup"))))))) ("simple-tree-text-markup-doc" . #hasheq((author . "sperber@deinprogramm.de") (authors . ("sperber@deinprogramm.de")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-tree-text-markup" "doc/simple-tree-text-markup@simple-tree-text-markup-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "eb6ad2b0a4bc6796ac258de4dbfdc8cd894aaf3b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1601651629) (dependencies . ("base" "scheme-lib" "at-exp-lib" "scribble-lib" "racket-doc" "simple-tree-text-markup-lib" "draw-doc" "draw-lib" "gui-doc" "snip-lib")) (description . "This is a tree-based combinator library for simple markup, mainly for\r\ndisplaying messages in a REPL.\r\n\r\nThis package contains the documentation.") (implies . ()) (last-checked . 1632904585) (last-edit . 1601651629) (last-updated . 1629048961) (modules . ((lib "scribblings/simple-tree-text-markup/simple-tree-text-markup.scrbl") (lib "scribblings/simple-tree-text-markup/port.scrbl") (lib "scribblings/simple-tree-text-markup/data.scrbl") (lib "scribblings/simple-tree-text-markup/text.scrbl") (lib "scribblings/simple-tree-text-markup/construct.scrbl"))) (name . "simple-tree-text-markup-doc") (ring . 1) (search-terms . #hasheq((:docs: . #t) (author:sperber@deinprogramm.de . #t) (main-distribution . #t) (ring:1 . #t))) (source . "https://github.com/racket/simple-tree-text-markup.git?path=simple-tree-text-markup-doc") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "eb6ad2b0a4bc6796ac258de4dbfdc8cd894aaf3b") (source . "https://github.com/racket/simple-tree-text-markup.git?path=simple-tree-text-markup-doc") (source_url . "https://github.com/racket/simple-tree-text-markup.git?path=simple-tree-text-markup-doc"))))))) ("simple-tree-text-markup-lib" . #hasheq((author . "sperber@deinprogramm.de") (authors . ("sperber@deinprogramm.de")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "eb6ad2b0a4bc6796ac258de4dbfdc8cd894aaf3b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1601651570) (dependencies . ("base")) (description . "This is a tree-based combinator library for simple markup, mainly for\r\ndisplaying messages in a REPL.\r\n\r\nThis package contains the actual implementation.") (implies . ()) (last-checked . 1632904586) (last-edit . 1601651570) (last-updated . 1629048962) (modules . ((lib "simple-tree-text-markup/data.rkt") (lib "simple-tree-text-markup/text.rkt") (lib "simple-tree-text-markup/construct.rkt") (lib "simple-tree-text-markup/port.rkt") (lib "simple-tree-text-markup/private/text.rkt"))) (name . "simple-tree-text-markup-lib") (ring . 1) (search-terms . #hasheq((author:sperber@deinprogramm.de . #t) (main-distribution . #t) (ring:1 . #t))) (source . "https://github.com/racket/simple-tree-text-markup.git?path=simple-tree-text-markup-lib") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "eb6ad2b0a4bc6796ac258de4dbfdc8cd894aaf3b") (source . "https://github.com/racket/simple-tree-text-markup.git?path=simple-tree-text-markup-lib") (source_url . "https://github.com/racket/simple-tree-text-markup.git?path=simple-tree-text-markup-lib"))))))) ("simple-tree-text-markup-test" . #hasheq((author . "sperber@deinprogramm.de") (authors . ("sperber@deinprogramm.de")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "eb6ad2b0a4bc6796ac258de4dbfdc8cd894aaf3b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1601651687) (dependencies . ("base" "simple-tree-text-markup-lib" "rackunit-lib")) (description . "This is a tree-based combinator library for simple markup, mainly for\r\ndisplaying messages in a REPL.\r\n\r\nThis package contains the tests for the library.") (implies . ()) (last-checked . 1632904586) (last-edit . 1601651687) (last-updated . 1629048963) (modules . ((lib "simple-tree-text-markup/tests/data.rkt") (lib "simple-tree-text-markup/tests/port.rkt") (lib "simple-tree-text-markup/tests/construct.rkt") (lib "simple-tree-text-markup/tests/text.rkt"))) (name . "simple-tree-text-markup-test") (ring . 1) (search-terms . #hasheq((author:sperber@deinprogramm.de . #t) (main-distribution . #t) (ring:1 . #t))) (source . "https://github.com/racket/simple-tree-text-markup.git?path=simple-tree-text-markup-test") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "eb6ad2b0a4bc6796ac258de4dbfdc8cd894aaf3b") (source . "https://github.com/racket/simple-tree-text-markup.git?path=simple-tree-text-markup-test") (source_url . "https://github.com/racket/simple-tree-text-markup.git?path=simple-tree-text-markup-test"))))))) ("simple-xlsx" . #hasheq((author . "chenxiao770117@gmail.com") (authors . ("chenxiao770117@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-xlsx" "doc/simple-xlsx@simple-xlsx/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-xlsx.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-xlsx.txt"))) (checksum . "4db2b2eb3e66f1bbc4c8cfff268697085891a9bc") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "at-exp-lib" "racket-doc" "scribble-lib" "rackunit-lib" "at-exp-lib")) (description . "Xlsx File tool") (implies . ()) (last-checked . 1632904586) (last-edit . 1545374473) (last-updated . 1607867832) (modules . ((lib "simple-xlsx/tests/xlsx/numFmt-style-test.rkt") (lib "simple-xlsx/tests/writer/xl/styles/styles-test.rkt") (lib "simple-xlsx/tests/writer/xl/styles/fonts-test.rkt") (lib "simple-xlsx/writer/_rels/rels.rkt") (lib "simple-xlsx/xlsx/xlsx-lib.rkt") (lib "simple-xlsx/tests/read-test-cases/test5/test5-test.rkt") (lib "simple-xlsx/tests/read-test-cases/test9/test9-test.rkt") (lib "simple-xlsx/tests/writer/_rels/rels-test.rkt") (lib "simple-xlsx/tests/writer/xl/charts/chart-test.rkt") (lib "simple-xlsx/tests/xlsx/range-lib-test.rkt") (lib "simple-xlsx/writer/xl/cal-chain.rkt") (lib "simple-xlsx/writer/xl/chartsheets/chartsheet.rkt") (lib "simple-xlsx/writer/xl/theme/theme.rkt") (lib "simple-xlsx/tests/writer/xl/styles/empty-test.rkt") (lib "simple-xlsx/writer/xl/printerSettings/printerSettings.rkt") (lib "simple-xlsx/xlsx/xlsx.rkt") (lib "simple-xlsx/writer/xl/worksheets/_rels/rels.rkt") (lib "simple-xlsx/tests/writer/xl/charts/line-chart-test.rkt") (lib "simple-xlsx/writer.rkt") (lib "simple-xlsx/writer/xl/styles/styles.rkt") (lib "simple-xlsx/tests/writer/xl/charsheets/chartsheet-test.rkt") (lib "simple-xlsx/tests/read-test-cases/test10/test10-test.rkt") (lib "simple-xlsx/reader.rkt") (lib "simple-xlsx/tests/read-test-cases/test2/test2-test.rkt") (lib "simple-xlsx/tests/writer/xl/sharedStrings-test.rkt") (lib "simple-xlsx/tests/writer/xl/drawings/_rels/drawing-rels-test.rkt") (lib "simple-xlsx/tests/main/line-feed-test.rkt") (lib "simple-xlsx/tests/read-test-cases/test8/test8-test.rkt") (lib "simple-xlsx/writer/xl/_rels/workbook-xml-rels.rkt") (lib "simple-xlsx/tests/writer/xl/styles/cellXfs-test.rkt") (lib "simple-xlsx/main.rkt") (lib "simple-xlsx/writer/xl/charts/line-chart.rkt") (lib "simple-xlsx/tests/writer/xl/charts/pie-chart-test.rkt") (lib "simple-xlsx/tests/read-test-cases/test6/test6-test.rkt") (lib "simple-xlsx/tests/writer/xl/workbook-test.rkt") (lib "simple-xlsx/xlsx/sheet.rkt") (lib "simple-xlsx/tests/writer/xl/styles/numFmt-test.rkt") (lib "simple-xlsx/tests/read-test-cases/test1/test1-test.rkt") (lib "simple-xlsx/tests/lib/lib-test.rkt") (lib "simple-xlsx/xlsx/range-lib.rkt") (lib "simple-xlsx/writer/xl/charts/pie-chart.rkt") (lib "simple-xlsx/tests/read-test-cases/test12/test12-test.rkt") (lib "simple-xlsx/tests/writer/xl/styles/borders-test.rkt") (lib "simple-xlsx/tests/read-test-cases/test11/test11-test.rkt") (lib "simple-xlsx/lib/lib.rkt") (lib "simple-xlsx/writer/docProps/docprops-core.rkt") (lib "simple-xlsx/tests/main/from-read-to-write-test.rkt") (lib "simple-xlsx/tests/writer/xl/worksheets/worksheet/worksheet-test.rkt") (lib "simple-xlsx/tests/xlsx/font-style-test.rkt") (lib "simple-xlsx/writer/xl/drawings/_rels/drawing-rels.rkt") (lib "simple-xlsx/simple-xlsx.scrbl") (lib "simple-xlsx/writer/xl/sharedStrings.rkt") (lib "simple-xlsx/tests/writer/content-type/content-type-test.rkt") (lib "simple-xlsx/tests/write-test-cases/multiple-style.rkt") (lib "simple-xlsx/tests/writer/xl/styles/fills-test.rkt") (lib "simple-xlsx/tests/writer/xl/cal-chain-test.rkt") (lib "simple-xlsx/tests/writer/xl/charts/bar-chart-test.rkt") (lib "simple-xlsx/tests/read-test-cases/test3/test3-test.rkt") (lib "simple-xlsx/tests/read-test-cases/test4/test4-test.rkt") (lib "simple-xlsx/tests/writer/docProps/docprops-core-test.rkt") (lib "simple-xlsx/writer/xl/charts/bar-chart.rkt") (lib "simple-xlsx/tests/xlsx/fill-style-test.rkt") (lib "simple-xlsx/tests/xlsx/mix-style-test.rkt") (lib "simple-xlsx/tests/writer/xl/_rels/workbook-xml-rels-test.rkt") (lib "simple-xlsx/tests/read-test-cases/test13/test13-test.rkt") (lib "simple-xlsx/tests/xlsx/xlsx-lib-test.rkt") (lib "simple-xlsx/tests/xlsx/xlsx-test.rkt") (lib "simple-xlsx/writer/xl/chartsheets/_rels/chartsheet-rels.rkt") (lib "simple-xlsx/tests/write-test-cases/number-format-multi-sheet.rkt") (lib "simple-xlsx/writer/content-type/content-type.rkt") (lib "simple-xlsx/writer/xl/worksheets/worksheet/worksheet.rkt") (lib "simple-xlsx/writer/xl/workbook.rkt") (lib "simple-xlsx/writer/xl/drawings/drawing.rkt") (lib "simple-xlsx/writer/xl/charts/chart.rkt") (lib "simple-xlsx/writer/docProps/docprops-app.rkt") (lib "simple-xlsx/example/example.rkt") (lib "simple-xlsx/tests/writer/xl/drawings/drawing-test.rkt") (lib "simple-xlsx/tests/xlsx/border-style-test.rkt") (lib "simple-xlsx/tests/writer/xl/charsheets/_rels/chartsheet-rels-test.rkt") (lib "simple-xlsx/tests/writer/docProps/docprops-app-test.rkt") (lib "simple-xlsx/tests/read-test-cases/test7/test7-test.rkt"))) (name . "simple-xlsx") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:chenxiao770117@gmail.com . #t) (ring:1 . #t) (xlsx . #t))) (source . "https://github.com/simmone/racket-simple-xlsx.git") (tags . ("xlsx")) (versions . #hash((default . #hasheq((checksum . "4db2b2eb3e66f1bbc4c8cfff268697085891a9bc") (source . "https://github.com/simmone/racket-simple-xlsx.git") (source_url . "https://github.com/simmone/racket-simple-xlsx.git"))))))) ("simple-xml" . #hasheq((author . "chenxiao770117@gmail.com") (authors . ("chenxiao770117@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "simple-xml" "doc/simple-xml@simple-xml/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simple-xml.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simple-xml.txt"))) (checksum . "5d23bf407c8cfa5da6a5a0aa324229852dcc485a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1613118216) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib" "detail")) (description . "Simplify xml's read and write.") (implies . ()) (last-checked . 1632904586) (last-edit . 1620009362) (last-updated . 1625308589) (modules . ((lib "simple-xml/test/read-and-write/workbook-test.rkt") (lib "simple-xml/test/read-and-write/shared-strings-test.rkt") (lib "simple-xml/test/read-and-write/children-test.rkt") (lib "simple-xml/test/read-and-write/empty-test.rkt") (lib "simple-xml/test/xml-to-hash/broken-test.rkt") (lib "simple-xml/test/read-and-write/sheet-test.rkt") (lib "simple-xml/src/xml.rkt") (lib "simple-xml/scribble/simple-xml.scrbl") (lib "simple-xml/main.rkt") (lib "simple-xml/test/lists-to-xml/basic-test.rkt") (lib "simple-xml/test/xml-to-hash/remove-one-map-test.rkt") (lib "simple-xml/test/read-and-write/list-test.rkt"))) (name . "simple-xml") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:chenxiao770117@gmail.com . #t) (ring:1 . #t) (xml . #t))) (source . "https://github.com/simmone/racket-simple-xml.git") (tags . ("xml")) (versions . #hash((default . #hasheq((checksum . "5d23bf407c8cfa5da6a5a0aa324229852dcc485a") (source . "https://github.com/simmone/racket-simple-xml.git") (source_url . "https://github.com/simmone/racket-simple-xml.git"))))))) ("simply-scheme" . #hasheq((author . "clements@racket-lang.org dyoo@hashcollision.org") (authors . ("clements@racket-lang.org" "dyoo@hashcollision.org")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "manual" "doc/manual@simply-scheme/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/simply-scheme.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/simply-scheme.txt"))) (checksum . "8b8ba2b50d8688c0db30a772c5eac7bb2f6400a7") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "drracket-plugin-lib" "gui-lib" "string-constants-lib" "racket-doc" "sandbox-lib" "scribble-lib")) (description . "Danny Yoo's Simply Scheme package, allowing the use of Racket for the Simply Scheme curriculum") (implies . ()) (last-checked . 1632904587) (last-edit . 1508730653) (last-updated . 1508778723) (modules . ((lib "simply-scheme/simply-scheme.rkt") (lib "simply-scheme/main.rkt") (lib "simply-scheme/lang/reader.rkt") (lib "simply-scheme/tool.rkt") (lib "simply-scheme/manual.scrbl") (lib "simply-scheme/private/check-bound.rkt"))) (name . "simply-scheme") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (:no-tag: . #t) (author:clements@racket-lang.org . #t) (author:dyoo@hashcollision.org . #t) (ring:1 . #t))) (source . "git://github.com/jbclements/simply-scheme") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8b8ba2b50d8688c0db30a772c5eac7bb2f6400a7") (source . "git://github.com/jbclements/simply-scheme") (source_url . "http://github.com/jbclements/simply-scheme/tree/master"))))))) ("sinbad" . #hasheq((author . "nadeem@acm.org") (authors . ("nadeem@acm.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sinbad.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sinbad.txt"))) (checksum . "44b3e0881514bbfb7cc91780262968748b9f92eb") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1552764265) (dependencies . ("base" "net-lib" "htdp-lib" "csv-reading" "sxml" "srfi-lite-lib" "racket-doc" "scribble-lib" "rackunit-lib")) (description . "Sinbad is a software library that makes it very easy to uniformly access online data sources provided in standard formats (CSV, JSON, XML).") (implies . ()) (last-checked . 1632904587) (last-edit . 1552764265) (last-updated . 1580353798) (modules . ((lib "sinbad/data-source.rkt") (lib "sinbad/main.rkt") (lib "sinbad/dot-printer.rkt") (lib "sinbad/ftp-fetch.rkt") (lib "sinbad/plugin.rkt") (lib "sinbad/sinbad-syntax.rkt") (lib "sinbad/util.rkt") (lib "sinbad/cacher.rkt") (lib "sinbad/extras.rkt") (lib "sinbad/fwf-parse.rkt"))) (name . "sinbad") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:nadeem@acm.org . #t) (beginners . #t) (data . #t) (ring:1 . #t) (tabular . #t) (teaching . #t) (web . #t))) (source . "https://github.com/berry-cs/sinbad-rkt.git?path=sinbad") (tags . ("beginners" "data" "tabular" "teaching" "web")) (versions . #hash((default . #hasheq((checksum . "44b3e0881514bbfb7cc91780262968748b9f92eb") (source . "https://github.com/berry-cs/sinbad-rkt.git?path=sinbad") (source_url . "https://github.com/berry-cs/sinbad-rkt.git?path=sinbad"))))))) ("sirmail" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sirmail.txt") (test-failure-log . "server/built/test-fail/sirmail.txt") (test-success-log . #f))) (checksum . "30c9bd6c6993ddd432d50a7ab705afa22ec34891") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1621791891) (dependencies . ("base" "compatibility-lib" "drracket" "gui-lib" "net-lib" "parser-tools-lib" "scheme-lib" "syntax-color-lib" "sandbox-lib" "pict-lib" "pict-snip-lib")) (description . "An IMAP mail client") (implies . ()) (last-checked . 1632904588) (last-edit . 1621896925) (last-updated . 1620736650) (modules . ((lib "sirmail/pref.rkt") (lib "sirmail/sirmails.rkt") (lib "sirmail/spell.rkt") (lib "sirmail/badge.rkt") (lib "sirmail/folderr.rkt") (lib "sirmail/readr.rkt") (lib "sirmail/recover.rkt") (lib "sirmail/optionr.rkt") (lib "sirmail/sendr.rkt") (lib "sirmail/repl.rkt") (lib "sirmail/main.rkt") (lib "sirmail/debug.rkt") (lib "sirmail/sirmailr.rkt") (lib "sirmail/utilr.rkt") (lib "sirmail/sirmail.rkt"))) (name . "sirmail") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app . #t) (author:mflatt@cs.utah.edu . #t) (mail . #t) (net . #t) (ring:1 . #t))) (source . "git+https://github.com/mflatt/sirmail") (tags . ("app" "mail" "net")) (versions . #hash((default . #hasheq((checksum . "30c9bd6c6993ddd432d50a7ab705afa22ec34891") (source . "git+https://github.com/mflatt/sirmail") (source_url . "git+https://github.com/mflatt/sirmail"))))))) ("sketching" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/sketching.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sketching.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sketching.txt"))) (checksum . "a14ec2c6f37c2fced239f4ed876f7033e77f3fba") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1625411542) (dependencies . ("sketching-lib" "sketching-doc")) (description . "Sketching - Language, documentation and examples") (implies . ("sketching-lib" "sketching-doc")) (last-checked . 1632904588) (last-edit . 1625431557) (last-updated . 1630510172) (modules . ()) (name . "sketching") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:jensaxel@soegaard.net . #t) (ring:1 . #t) (sketching . #t))) (source . "https://github.com/soegaard/sketching.git?path=sketching#main") (tags . ("sketching")) (versions . #hash((default . #hasheq((checksum . "a14ec2c6f37c2fced239f4ed876f7033e77f3fba") (source . "https://github.com/soegaard/sketching.git?path=sketching#main") (source_url . "https://github.com/soegaard/sketching.git?path=sketching#main"))))))) ("sketching-doc" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/sketching-doc.txt") (docs . (("main" "manual-sketching" "doc/manual-sketching@sketching-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sketching-doc.txt") (test-failure-log . "server/built/test-fail/sketching-doc.txt") (test-success-log . #f))) (checksum . "a14ec2c6f37c2fced239f4ed876f7033e77f3fba") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1625411418) (dependencies . ("base" "gui-doc" "pict-doc" "at-exp-lib" "base" "gui-lib" "pict-lib" "scribble-lib" "sketching-lib" "racket-doc" "cairo-lib")) (description . "Documentation for Sketching") (implies . ()) (last-checked . 1632904589) (last-edit . 1625431626) (last-updated . 1630510173) (modules . ((lib "sketching-doc/manual-examples/basics/transform/arm.rkt") (lib "sketching-doc/manual-examples/basics/transform/translate.rkt") (lib "sketching-doc/manual-examples/basics/input/keyboard-functions.rkt") (lib "sketching-doc/manual-examples/basics/color/saturation.rkt") (lib "sketching-doc/manual-examples/basics/input/mouse-signals.rkt") (lib "sketching-doc/manual-examples/basics/input/clock.rkt") (lib "sketching-doc/manual-examples/basics/form/star.rkt") (lib "sketching-doc/manual-examples/basics/color/hue.rkt") (lib "sketching-doc/manual-examples/basics/color/color-variables.rkt") (lib "sketching-doc/manual-examples/basics/input/storing-input.rkt") (lib "sketching-doc/manual-examples/basics/color/brightness.rkt") (lib "sketching-doc/manual-examples/basics/form/point-and-lines.rkt") (lib "sketching-doc/manual-examples/basics/vectors/vector-of-objects.rkt") (lib "sketching-doc/manual-examples/basics/input/mouse-2d.rkt") (lib "sketching-doc/manual-examples/basics/input/mouse-1d.rkt") (lib "sketching-doc/manual-examples/basics/input/milliseconds.rkt") (lib "sketching-doc/manual-examples/basics/form/regular-polygons.rkt") (lib "sketching-doc/manual-examples/basics/color/relativity.rkt") (lib "sketching-doc/manual-examples/basics/objects/composite-objects.rkt") (lib "sketching-doc/manual-examples/basics/objects/multiple-constructors.rkt") (lib "sketching-doc/manual-examples/basics/typography/text-rotation.rkt") (lib "sketching-doc/manual-examples/basics/objects/objects.rkt") (lib "sketching-doc/manual-examples/basics/transform/rotate.rkt") (lib "sketching-doc/manual-examples/basics/input/constrain.rkt") (lib "sketching-doc/manual-examples/basics/vectors/vector-2d.rkt") (lib "sketching-doc/manual-examples/basics/input/mouse-press.rkt") (lib "sketching-doc/racket-cheat.rkt") (lib "sketching-doc/manual-examples/basics/objects/inheritance.rkt") (lib "sketching-doc/manual-examples/basics/image/pointilism.rkt") (lib "sketching-doc/manual-examples/basics/input/keyboard.rkt") (lib "sketching-doc/manual-sketching.scrbl") (lib "sketching-doc/manual-examples/basics/input/easing.rkt") (lib "sketching-doc/manual-examples/basics/transform/scale.rkt") (lib "sketching-doc/manual-examples/basics/form/triangle-strip.rkt") (lib "sketching-doc/manual-examples/basics/form/pie-chart.rkt") (lib "sketching-doc/manual-examples/basics/color/wave-gradient.rkt") (lib "sketching-doc/manual-examples/basics/vectors/vector.rkt") (lib "sketching-doc/manual-examples/basics/typography/letters.rkt") (lib "sketching-doc/manual-examples/basics/color/linear-gradient.rkt") (lib "sketching-doc/manual-examples/basics/color/radial-gradient.rkt") (lib "sketching-doc/manual-examples/basics/input/mouse-functions.rkt") (lib "sketching-doc/manual-examples/basics/typography/words.rkt") (lib "sketching-doc/manual-examples/basics/form/bezier.rkt"))) (name . "sketching-doc") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:jensaxel@soegaard.net . #t) (ring:1 . #t) (sketching . #t))) (source . "https://github.com/soegaard/sketching.git?path=sketching-doc#main") (tags . ("sketching")) (versions . #hash((default . #hasheq((checksum . "a14ec2c6f37c2fced239f4ed876f7033e77f3fba") (source . "https://github.com/soegaard/sketching.git?path=sketching-doc#main") (source_url . "https://github.com/soegaard/sketching.git?path=sketching-doc#main"))))))) ("sketching-examples" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/sketching-examples.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "a14ec2c6f37c2fced239f4ed876f7033e77f3fba") (checksum-error . #f) (collection . "sketching-examples") (conflicts . ()) (date-added . 1625411482) (dependencies . ("sketching-lib")) (description . "Collection of example Sketching programs") (implies . ()) (last-checked . 1632904589) (last-edit . 1625431602) (last-updated . 1630510174) (modules . ((lib "sketching-examples/examples/sketch-racket-class.rkt") (lib "sketching-examples/test/sketch5.rkt") (lib "sketching-examples/examples/sketch-diamond-square.rkt") (lib "sketching-examples/reference-snippets/cursor.rkt") (lib "sketching-examples/examples/test-draw-point.rkt") (lib "sketching-examples/reference-snippets/frame-count.rkt") (lib "sketching-examples/examples/sketch-mandelbrot.rkt") (lib "sketching-examples/reference-snippets/text.rkt") (lib "sketching-examples/examples/sketch-midpoint-displacement-1d.rkt") (lib "sketching-examples/examples/sketch-load-and-update-pixels.rkt") (lib "sketching-examples/examples/sketch-pong.rkt") (lib "sketching-examples/examples/sketch-points-with-targets.rkt") (lib "sketching-examples/examples/simple-text-clock.rkt") (lib "sketching-examples/test/sketch9.rkt") (lib "sketching-examples/reference-snippets/fullscreen.rkt") (lib "sketching-examples/examples/sketch-background-in-setup.rkt") (lib "sketching-examples/test/sketch8.rkt") (lib "sketching-examples/examples/sketch-wave.rkt") (lib "sketching-examples/reference-snippets/on-key-pressed.rkt") (lib "sketching-examples/test/sketch7.rkt") (lib "sketching-examples/examples/sketch-poisson-disc-sampling.rkt") (lib "sketching-examples/reference-snippets/mouse-x-and-y.rkt") (lib "sketching-examples/reference-snippets/mouse-dragged.rkt") (lib "sketching-examples/examples/sketch-perlin-noise.rkt") (lib "sketching-examples/reference-snippets/text-long.rkt") (lib "sketching-examples/reference-snippets/pmouse-x-and-y.rkt") (lib "sketching-examples/test/sketch2.rkt") (lib "sketching-examples/reference-snippets/key.rkt") (lib "sketching-examples/examples/sketch-array.rkt") (lib "sketching-examples/test/sketch3.rkt") (lib "sketching-examples/reference-snippets/no-cursor.rkt") (lib "sketching-examples/examples/sketch-bezier.rkt") (lib "sketching-examples/examples/sketch-sketching-class.rkt") (lib "sketching-examples/examples/sketch-text.rkt") (lib "sketching-examples/reference-snippets/mouse-pressed.rkt") (lib "sketching-examples/reference-snippets/focused.rkt") (lib "sketching-examples/examples/sketch-sunflower.rkt") (lib "sketching-examples/test/sketch4.rkt") (lib "sketching-examples/examples/sketch-letters.rkt") (lib "sketching-examples/examples/sketch-color-mode.rkt") (lib "sketching-examples/examples/sketch-game-of-life.rkt") (lib "sketching-examples/test/sketch6.rkt") (lib "sketching-examples/reference-snippets/mouse-button.rkt") (lib "sketching-examples/test/sketch1.rkt") (lib "sketching-examples/reference-snippets/mouse-clicked.rkt") (lib "sketching-examples/examples/sketch-jump.rkt") (lib "sketching-examples/examples/sketch-random-lines.rkt") (lib "sketching-examples/examples/sketch-particle.rkt"))) (name . "sketching-examples") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:jensaxel@soegaard.net . #t) (ring:1 . #t) (sketching . #t))) (source . "https://github.com/soegaard/sketching.git?path=sketching-examples#main") (tags . ("sketching")) (versions . #hash((default . #hasheq((checksum . "a14ec2c6f37c2fced239f4ed876f7033e77f3fba") (source . "https://github.com/soegaard/sketching.git?path=sketching-examples#main") (source_url . "https://github.com/soegaard/sketching.git?path=sketching-examples#main"))))))) ("sketching-lib" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sketching-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sketching-lib.txt"))) (checksum . "a14ec2c6f37c2fced239f4ed876f7033e77f3fba") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1625411351) (dependencies . ("base" "draw-lib" "pict-lib" "math-lib" "gui-lib" "cairo-lib")) (description . "") (implies . ()) (last-checked . 1632904589) (last-edit . 1625431651) (last-updated . 1630510175) (modules . ((lib "sketching/time-and-date.rkt") (lib "sketching/gui.rkt") (lib "sketching/exports-all.rkt") (lib "sketching/graphics.rkt") (lib "sketching/parameters.rkt") (lib "sketching/main.rkt") (lib "sketching/lang/reader.rkt") (lib "sketching/transform.rkt") (lib "sketching/class.rkt") (lib "sketching/operators.rkt") (lib "sketching/environment-no-gui.rkt") (lib "sketching/exports-only-for-docs.rkt") (lib "sketching/exports-no-gui.rkt") (lib "sketching/color.rkt") (lib "sketching/environment.rkt") (lib "sketching/dot-method.rkt") (lib "sketching/math-operators.rkt") (lib "sketching/typography.rkt") (lib "sketching/math.rkt") (lib "sketching/syntax-utils.rkt") (lib "sketching/conversion.rkt"))) (name . "sketching-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:jensaxel@soegaard.net . #t) (ring:1 . #t) (sketching . #t))) (source . "https://github.com/soegaard/sketching.git?path=sketching-lib#main") (tags . ("sketching")) (versions . #hash((default . #hasheq((checksum . "a14ec2c6f37c2fced239f4ed876f7033e77f3fba") (source . "https://github.com/soegaard/sketching.git?path=sketching-lib#main") (source_url . "https://github.com/soegaard/sketching.git?path=sketching-lib#main"))))))) ("sl2014" . #hasheq((author . "matthias@ccs.neu.edu") (authors . ("matthias@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sl2014" "doc/sl2014@sl2014/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sl2014.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sl2014.txt"))) (checksum . "4ffef910ae5109eef916f3d57aaab95f02981df9") (checksum-error . #f) (collection . "sl2014") (conflicts . ()) (dependencies . ("base" "htdp-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1632904589) (last-edit . 1442946714) (last-updated . 1502816431) (modules . ((lib "sl2014/main.rkt") (lib "sl2014/scribblings/sl2014.scrbl"))) (name . "sl2014") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:matthias@ccs.neu.edu . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/mfelleisen/sl2014") (tags . ("testing")) (versions . #hash((default . #hasheq((checksum . "4ffef910ae5109eef916f3d57aaab95f02981df9") (source . "git://github.com/mfelleisen/sl2014") (source_url . "http://github.com/mfelleisen/sl2014/tree/master"))))))) ("slack-api" . #hasheq((author . "octotep@sdf.org") (authors . ("octotep@sdf.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/slack-api.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/slack-api.txt"))) (checksum . "af5e363e0aefbf05c4448ea82d8aef714c30ee78") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rfc6455")) (description . "Racket bindings for the Slack API") (implies . ()) (last-checked . 1632904589) (last-edit . 1461724096) (last-updated . 1502816431) (modules . ((lib "slack-api/rtm.rkt") (lib "slack-api/webapi.rkt") (lib "slack-api/main.rkt"))) (name . "slack-api") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (api . #t) (author:octotep@sdf.org . #t) (http . #t) (ring:1 . #t))) (source . "git://github.com/octotep/racket-slack-api.git") (tags . ("api" "http")) (versions . #hash((default . #hasheq((checksum . "af5e363e0aefbf05c4448ea82d8aef714c30ee78") (source . "git://github.com/octotep/racket-slack-api.git") (source_url . "http://github.com/octotep/racket-slack-api.git/tree/master"))))))) ("slack-archive-viewer" . #hasheq((author . "ben.knoble+racket@gmail.com") (authors . ("ben.knoble+racket@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "f998c86c03baf7cf9857bfb7aa7b1b0e8df2ae5a") (checksum-error . #f) (collection . "slack-archive-viewer") (conflicts . ()) (date-added . 1629555739) (dependencies . ("sass" "jsond" "pollen" "beeswax" "txexpr" "sugar" "markdown" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Generate a static site to view slack archives") (implies . ()) (last-checked . 1632904590) (last-edit . 1629555739) (last-updated . 1632170096) (modules . ((lib "slack-archive-viewer/privacy-list-demo.rkt") (lib "slack-archive-viewer/private/unwanted.rkt") (lib "slack-archive-viewer/private/json.rkt") (lib "slack-archive-viewer/private/for-pollen/pollen.rkt") (lib "slack-archive-viewer/private/channels.rkt") (lib "slack-archive-viewer/main.rkt") (lib "slack-archive-viewer/scribblings/slack-archive-viewer.scrbl") (lib "slack-archive-viewer/private/steps.rkt") (lib "slack-archive-viewer/private/config.rkt") (lib "slack-archive-viewer/private/pollen.rkt") (lib "slack-archive-viewer/private/for-pollen/users.rkt") (lib "slack-archive-viewer/unpack.rkt") (lib "slack-archive-viewer/private/for-pollen/template.html.rkt") (lib "slack-archive-viewer/merge-meta.rkt") (lib "slack-archive-viewer/private/async.rkt") (lib "slack-archive-viewer/private/for-pollen/channels.rkt") (lib "slack-archive-viewer/private/for-pollen/nav.rkt") (lib "slack-archive-viewer/private/hash.rkt") (lib "slack-archive-viewer/slack-config-demo.rkt") (lib "slack-archive-viewer/private/sass.rkt") (lib "slack-archive-viewer/private/files.rkt") (lib "slack-archive-viewer/private/meta.rkt") (lib "slack-archive-viewer/private/archive.rkt") (lib "slack-archive-viewer/private/privacy.rkt") (lib "slack-archive-viewer/private/for-jsond.rkt"))) (name . "slack-archive-viewer") (ring . 1) (search-terms . #hasheq((archive . #t) (author:ben.knoble+racket@gmail.com . #t) (pollen . #t) (ring:1 . #t) (slack . #t))) (source . "https://github.com/benknoble/slack-archive-viewer.git#main") (tags . ("archive" "pollen" "slack")) (versions . #hash((default . #hasheq((checksum . "f998c86c03baf7cf9857bfb7aa7b1b0e8df2ae5a") (source . "https://github.com/benknoble/slack-archive-viewer.git#main") (source_url . "https://github.com/benknoble/slack-archive-viewer.git#main"))))))) ("slatex" . #hash((author . "sstrickl@racket-lang.org") (authors . ("sstrickl@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "slatex-wrap" "doc/slatex-wrap@slatex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "slatex") (conflicts . ()) (dependencies . ("scheme-lib" "base" "compatibility-lib" "racket-index" "eli-tester" "racket-doc" "scribble-lib")) (description . "SLaTeX (Scheme in LaTeX)") (implies . ()) (last-checked . 1632904590) (last-edit . 1417381182) (last-updated . 1571887338) (modules . ((lib "slatex/slatex-wrap.scrbl") (lib "slatex/private/slatex.rkt") (lib "slatex/tests/test-docs-complete.rkt") (lib "slatex/slatex-wrapper.rkt") (lib "slatex/tests/slatex/test.rkt") (lib "slatex/pdf-slatex-launcher.rkt") (lib "slatex/slatex-launcher.rkt"))) (name . "slatex") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:sstrickl@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "eb812b59e3b460ceabaf027fad8091866232b149") (source . "git://github.com/racket/slatex") (source_url . "http://github.com/racket/slatex/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("slideshow" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("slideshow-lib" "slideshow-exe" "slideshow-plugin" "slideshow-doc")) (description . "Slide-presentation tool") (implies . ("slideshow-lib" "slideshow-exe" "slideshow-plugin" "slideshow-doc")) (last-checked . 1632904590) (last-edit . 1417659583) (last-updated . 1603396200) (modules . ()) (name . "slideshow") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "4588507e83e9aa859c6841e655b98417d46987e6") (source . "git://github.com/racket/slideshow/?path=slideshow") (source_url . "git://github.com/racket/slideshow/?path=slideshow"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("slideshow-doc" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "slideshow" "doc/slideshow@slideshow-doc/index.html") ("main" "quick" "doc/quick@slideshow-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "draw-doc" "gui-doc" "pict-doc" "scribble-doc" "web-server-doc" "base" "gui-lib" "pict-lib" "scribble-lib" "slideshow-lib" "racket-doc" "at-exp-lib")) (description . "documentation part of slideshow") (implies . ()) (last-checked . 1632904590) (last-edit . 1417659583) (last-updated . 1603396201) (modules . ((lib "scribblings/quick/mreval.rkt") (lib "scribblings/slideshow/fullscreen.scrbl") (lib "scribblings/slideshow/slides.scrbl") (lib "scribblings/slideshow/guide.scrbl") (lib "scribblings/slideshow/ss.rkt") (lib "scribblings/quick/keep.rkt") (lib "scribblings/slideshow/play.scrbl") (lib "scribblings/slideshow/code.scrbl") (lib "scribblings/slideshow/slideshow.scrbl") (lib "scribblings/slideshow/widescreen.scrbl") (lib "scribblings/slideshow/aspect.scrbl") (lib "scribblings/slideshow/adjust-aspect.rkt") (lib "scribblings/slideshow/text.scrbl") (lib "scribblings/slideshow/legacy.scrbl") (lib "scribblings/quick/quick.scrbl"))) (name . "slideshow-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "4588507e83e9aa859c6841e655b98417d46987e6") (source . "git://github.com/racket/slideshow/?path=slideshow-doc") (source_url . "git://github.com/racket/slideshow/?path=slideshow-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("slideshow-exe" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "gui-lib" "pict-lib" "slideshow-lib")) (description . "executables for slideshow") (implies . ("slideshow-lib")) (last-checked . 1632904591) (last-edit . 1417659583) (last-updated . 1603396203) (modules . ((lib "slideshow/tutorial-show.rkt") (lib "slideshow/start.rkt") (lib "slideshow/initial-ones.rkt"))) (name . "slideshow-exe") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "4588507e83e9aa859c6841e655b98417d46987e6") (source . "git://github.com/racket/slideshow/?path=slideshow-exe") (source_url . "git://github.com/racket/slideshow/?path=slideshow-exe"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("slideshow-latex" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "slideshow-latex" "doc/slideshow-latex@slideshow-latex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/slideshow-latex.txt") (test-failure-log . "server/built/test-fail/slideshow-latex.txt") (test-success-log . #f))) (checksum . "73aab49b3a14ea06afbfeb2e5ebd32f148c0196c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "slideshow-lib" "racket-doc" "scribble-lib" "slideshow-doc" "planet-doc")) (description . "Slideshow extensions to embed LaTeX and math, as well as other goodies") (implies . ()) (last-checked . 1632904591) (last-edit . 1354547872) (last-updated . 1502816433) (modules . ((lib "slideshow/latex/slideshow-latex.scrbl") (lib "tests/slideshow/latex/example.rkt") (lib "slideshow/extras.rkt") (lib "slideshow/latex/latex2bitmap.rkt") (lib "slideshow/latex.rkt"))) (name . "slideshow-latex") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (slideshow . #t))) (source . "github://github.com/jeapostrophe/slideshow-latex/master") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "73aab49b3a14ea06afbfeb2e5ebd32f148c0196c") (source . "github://github.com/jeapostrophe/slideshow-latex/master") (source_url . "http://github.com/jeapostrophe/slideshow-latex/tree/master"))))))) ("slideshow-lib" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "base" "compatibility-lib" "draw-lib" "pict-lib" "gui-lib")) (description . "implementation (no documentation) part of slideshow") (implies . ()) (last-checked . 1632904591) (last-edit . 1417659583) (last-updated . 1603396205) (modules . ((lib "slideshow/slide.rkt") (lib "slideshow/fullscreen.rkt") (lib "slideshow/fullscreen/base.rkt") (lib "slideshow/main.rkt") (lib "slideshow/step.rkt") (lib "slideshow/run.rkt") (lib "slideshow/private/aspect.rkt") (lib "slideshow/face.rkt") (lib "slideshow/flash.rkt") (lib "slideshow/widescreen.rkt") (lib "slideshow/start-param.rkt") (lib "slideshow/viewer.rkt") (lib "slideshow/slides-to-picts.rkt") (lib "slideshow/private/utils.rkt") (lib "slideshow/pict.rkt") (lib "slideshow/code.rkt") (lib "slideshow/sig.rkt") (lib "texpict/symbol.rkt") (lib "slideshow/base.rkt") (lib "slideshow/private/image-snipr.rkt") (lib "slideshow/balloon.rkt") (lib "slideshow/private/pict-box-lib.rkt") (lib "slideshow/cmdline.rkt") (lib "slideshow/code-pict.rkt") (lib "slideshow/slideshow.rkt") (lib "slideshow/lang/reader.rkt") (lib "slideshow/pict-snipclass.rkt") (lib "slideshow/play.rkt") (lib "slideshow/param.rkt") (lib "slideshow/widescreen/base.rkt") (lib "texpict/slideshow-run.rkt") (lib "slideshow/pict-convert.rkt") (lib "slideshow/core.rkt") (lib "slideshow/text.rkt") (lib "texpict/slideshow.rkt"))) (name . "slideshow-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "4588507e83e9aa859c6841e655b98417d46987e6") (source . "git://github.com/racket/slideshow/?path=slideshow-lib") (source_url . "git://github.com/racket/slideshow/?path=slideshow-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("slideshow-plugin" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "slideshow-lib" "pict-lib" "string-constants-lib" "compatibility-lib" "drracket-plugin-lib" "gui-lib")) (description . "Slideshow's DrRacket plugin") (implies . ()) (last-checked . 1632904591) (last-edit . 1417659583) (last-updated . 1603396206) (modules . ((lib "texpict/face-demo.rkt") (lib "texpict/pict-value-snip.rkt") (lib "slideshow/tool.rkt"))) (name . "slideshow-plugin") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "4588507e83e9aa859c6841e655b98417d46987e6") (source . "git://github.com/racket/slideshow/?path=slideshow-plugin") (source_url . "git://github.com/racket/slideshow/?path=slideshow-plugin"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("slideshow-pretty" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/slideshow-pretty.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/slideshow-pretty.txt"))) (checksum . "021378757a40163f8e84efe616eb17036eeb2a4f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "slideshow-lib" "slideshow-latex" "racket-doc" "scribble-lib" "slideshow-doc")) (description . "Slideshow extensions to add pretty transitions between slides.") (implies . ()) (last-checked . 1632904592) (last-edit . 1396319678) (last-updated . 1502816436) (modules . ((lib "slideshow/pretty.rkt"))) (name . "slideshow-pretty") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (slideshow . #t))) (source . "github://github.com/LeifAndersen/slideshow-pretty/master") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "021378757a40163f8e84efe616eb17036eeb2a4f") (source . "github://github.com/LeifAndersen/slideshow-pretty/master") (source_url . "http://github.com/LeifAndersen/slideshow-pretty/tree/master"))))))) ("slideshow-repl" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "slideshow-repl" "doc/slideshow-repl@slideshow-repl/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/slideshow-repl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/slideshow-repl.txt"))) (checksum . "e8d3f8fb08322cd1aa9553c1c0079d7bebb3e823") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("errortrace-lib" "gui-lib" "slideshow-lib" "base" "pict-lib" "pict-snip-lib" "draw-doc" "draw-lib" "pict-doc" "racket-doc" "scribble-lib" "slideshow-doc")) (description . "") (implies . ()) (last-checked . 1632904592) (last-edit . 1383054198) (last-updated . 1566471251) (modules . ((lib "slideshow/private/editor.rkt") (lib "slideshow/scribblings/slideshow-repl.scrbl") (lib "slideshow/repl.rkt"))) (name . "slideshow-repl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:mflatt@cs.utah.edu . #t) (ring:1 . #t) (slideshow . #t))) (source . "github://github.com/mflatt/slideshow-repl/master") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "e8d3f8fb08322cd1aa9553c1c0079d7bebb3e823") (source . "github://github.com/mflatt/slideshow-repl/master") (source_url . "http://github.com/mflatt/slideshow-repl/tree/master"))))))) ("slideshow-text-style" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "slideshow-text-style" "doc/slideshow-text-style@slideshow-text-style/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/slideshow-text-style.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/slideshow-text-style.txt"))) (checksum . "a59ce57a693697a79c34344d2feca0cd0ffd2202") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "pict-lib" "slideshow-lib" "scribble-text-lib" "scribble-lib" "at-exp-lib" "pict-doc" "slideshow-doc" "racket-doc" "scribble-doc")) (description . "Small library that helps with formatting text in a slideshow") (implies . ()) (last-checked . 1632904592) (last-edit . 1504725053) (last-updated . 1627320973) (modules . ((lib "slideshow-text-style/example.rkt") (lib "slideshow-text-style/main.rkt") (lib "slideshow-text-style/slideshow-text-style.scrbl"))) (name . "slideshow-text-style") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t) (slideshow . #t))) (source . "git://github.com/takikawa/slideshow-text-style") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "a59ce57a693697a79c34344d2feca0cd0ffd2202") (source . "git://github.com/takikawa/slideshow-text-style") (source_url . "http://github.com/takikawa/slideshow-text-style/tree/master"))))))) ("smart-completion" . #hasheq((author . "1227847322@qq.com") (authors . ("1227847322@qq.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/smart-completion.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/smart-completion.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/smart-completion.txt"))) (checksum . "53ab196bee90d578d9fd09ab9f44a165a7143684") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1550970785) (dependencies . ()) (description . "") (implies . ()) (last-checked . 1632904593) (last-edit . 1550970785) (last-updated . 1550977159) (modules . ((lib "smart-completion/tool.rkt"))) (name . "smart-completion") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:1227847322@qq.com . #t) (ring:1 . #t))) (source . "https://github.com/syntacticlosure/smart-completion.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "53ab196bee90d578d9fd09ab9f44a165a7143684") (source . "https://github.com/syntacticlosure/smart-completion.git") (source_url . "https://github.com/syntacticlosure/smart-completion.git"))))))) ("sml" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sml.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sml.txt"))) (checksum . "f7a03fdf124dff96a1fe2d7eadfd260a5824b1c5") (checksum-error . #f) (collection . "sml") (conflicts . ()) (dependencies . ("base" "at-exp-lib")) (description . "S-Markup Language") (implies . ()) (last-checked . 1632904593) (last-edit . 1527260434) (last-updated . 1579896623) (modules . ((lib "sml/main.rkt"))) (name . "sml") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t))) (source . "https://github.com/LeifAndersen/racket-sml.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f7a03fdf124dff96a1fe2d7eadfd260a5824b1c5") (source . "https://github.com/LeifAndersen/racket-sml.git") (source_url . "https://github.com/LeifAndersen/racket-sml.git"))))))) ("smtp" . #hasheq((author . "yanyingwang1@gmail.com") (authors . ("yanyingwang1@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "smtp" "doc/smtp@smtp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/smtp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/smtp.txt"))) (checksum . "87b1cb20e0ade41273248f7cf0a02258a8bd19a6") (checksum-error . #f) (collection . "smtp") (conflicts . ()) (date-added . 1612879761) (dependencies . ("base" "gregor-lib" "at-exp-lib" "r6rs-lib" "uuid" "scribble-lib" "racket-doc" "rackunit-lib" "scribble-rainbow-delimiters")) (description . "A practical library to send emails using SMTP protocol") (implies . ()) (last-checked . 1632904594) (last-edit . 1612879798) (last-updated . 1632630937) (modules . ((lib "smtp/main.rkt") (lib "smtp/private/params.rkt") (lib "smtp/private/utils.rkt") (lib "smtp/scribblings/smtp.scrbl") (lib "smtp/private/core.rkt"))) (name . "smtp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:yanyingwang1@gmail.com . #t) (ring:1 . #t) (smtp . #t))) (source . "https://github.com/yanyingwang/smtp.git") (tags . ("smtp")) (versions . #hash((default . #hasheq((checksum . "87b1cb20e0ade41273248f7cf0a02258a8bd19a6") (source . "https://github.com/yanyingwang/smtp.git") (source_url . "https://github.com/yanyingwang/smtp.git"))))))) ("smtp-lib" . #hasheq((author . "") (authors . ()) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/smtp-lib.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Package smtp-lib is missing a required field: 'source\n  context...:\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (implies . ()) (last-checked . 1632904594) (last-edit . 1632906423) (last-updated . 1621810040) (modules . ()) (name . "smtp-lib") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (ring:1 . #t))) (source . "") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "") (source_url . ""))))))) ("smtpable" . #hasheq((author . "") (authors . ()) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/smtpable.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Package smtpable is missing a required field: 'source\n  context...:\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (implies . ()) (last-checked . 1632904594) (last-edit . 1632906423) (last-updated . 1621810040) (modules . ()) (name . "smtpable") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (ring:1 . #t))) (source . "") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "") (source_url . ""))))))) ("snack" . #hasheq((author . "gfb@cs.toronto.edu") (authors . ("gfb@cs.toronto.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/snack.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/snack.txt"))) (checksum . "24a6c942197d85856b5d12b864724ed6200a8d11") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1563056943) (dependencies . (("base" #:version "7.3") "base" "gui-lib" "draw-lib" "reprovide-lang" "string-constants-lib" "typed-racket-lib" "typed-racket-more")) (description . "Shared library for the csc104 and tightlight packages. Not for direct consumption at this time.") (implies . ()) (last-checked . 1632904594) (last-edit . 1570288040) (last-updated . 1570459132) (modules . ((lib "snack/drracket.rkt") (lib "snack/style.rkt") (lib "snack/button.rkt") (lib "snack/space-out.rkt") (lib "snack/math.rkt") (lib "snack/mutation.rkt") (lib "snack/port.rkt") (lib "snack/pure/lang/reader.rkt") (lib "snack/functional.rkt") (lib "snack/string-constants.rkt") (lib "snack/boolean.rkt") (lib "snack/pure/lang-implementation.rkt") (lib "snack/control.rkt") (lib "snack/string.rkt") (lib "snack/lambda.rkt") (lib "snack/conditional.rkt") (lib "snack/false.rkt") (lib "snack/iteration.rkt") (lib "snack/text.rkt") (lib "snack/generator.rkt") (lib "snack/gui.rkt") (lib "snack/stream.rkt") (lib "snack/symbol.rkt") (lib "snack/sexp.rkt") (lib "snack/contract.rkt") (lib "snack/draw.rkt") (lib "snack/match.rkt") (lib "snack/menu.rkt") (lib "snack/keybinding.rkt") (lib "snack/function.rkt") (lib "snack/class.rkt") (lib "snack/definition.rkt") (lib "snack/preferences.rkt") (lib "snack/syntax.rkt") (lib "snack/structs.rkt") (lib "snack/list.rkt"))) (name . "snack") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:gfb@cs.toronto.edu . #t) (ring:1 . #t))) (source . "https://www.cs.toronto.edu/~gfb/racket-pkgs/snack.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "24a6c942197d85856b5d12b864724ed6200a8d11") (source . "https://www.cs.toronto.edu/~gfb/racket-pkgs/snack.zip") (source_url . "https://www.cs.toronto.edu/~gfb/racket-pkgs/snack.zip"))))))) ("snappy" . #hasheq((author . "asumu@ccs.neu.edu stchang@racket-lang.org ") (authors . ("asumu@ccs.neu.edu" "stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "snappy" "doc/snappy@snappy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/snappy.txt") (test-failure-log . "server/built/test-fail/snappy.txt") (test-success-log . #f))) (checksum . "c97436037ff6600dc7df447a5aba3d59c3e7e011") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "FFI bindings to snappy, a fast compression library") (implies . ()) (last-checked . 1632904595) (last-edit . 1379708154) (last-updated . 1502816436) (modules . ((lib "snappy/main.rkt") (lib "snappy/snappy-test.rkt") (lib "snappy/snappy.scrbl") (lib "snappy/snappy.rkt"))) (name . "snappy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:asumu@ccs.neu.edu . #t) (author:stchang@racket-lang.org . #t) (compression . #t) (ring:1 . #t))) (source . "github://github.com/stchang/snappy/master") (tags . ("compression")) (versions . #hash((default . #hasheq((checksum . "c97436037ff6600dc7df447a5aba3d59c3e7e011") (source . "github://github.com/stchang/snappy/master") (source_url . "http://github.com/stchang/snappy/tree/master"))))))) ("snip" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("snip-lib" "gui-doc")) (description . "Text and graphics editor extension protocol") (implies . ()) (last-checked . 1632904595) (last-edit . 1417659583) (last-updated . 1624552970) (modules . ()) (name . "snip") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "e6519424a64833d19baf9d2c391b03994db1b495") (source . "git://github.com/racket/snip/?path=snip") (source_url . "git://github.com/racket/snip/?path=snip"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("snip-lib" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" ("draw-lib" #:version "1.17"))) (description . "implementation (no documentation) part of snip") (implies . ()) (last-checked . 1632904595) (last-edit . 1417659583) (last-updated . 1624552971) (modules . ((lib "racket/snip/private/load-one.rkt") (lib "racket/snip/private/snip-flags.rkt") (lib "racket/snip/private/snip-admin.rkt") (lib "racket/snip/private/snip.rkt") (lib "racket/snip/private/style.rkt") (lib "racket/snip.rkt") (lib "racket/snip/private/private.rkt") (lib "racket/snip/private/contract.rkt") (lib "racket/snip/private/prefs.rkt"))) (name . "snip-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "e6519424a64833d19baf9d2c391b03994db1b495") (source . "git://github.com/racket/snip/?path=snip-lib") (source_url . "git://github.com/racket/snip/?path=snip-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("social-contract" . #hasheq((author . "skasivaj@gmail.com") (authors . ("skasivaj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "social-contract" "doc/social-contract@social-contract/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/social-contract.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/social-contract.txt"))) (checksum . "ea92ab0a5bcb342eb969a34fb3c7f981cc79de60") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1599252224) (dependencies . ("base" "collections-lib" "functional-lib" "megaparsack-lib" "megaparsack-parser-tools" "parser-tools-lib" "mischief" "version-case" "scribble-lib" "scribble-abbrevs" "racket-doc" "rackunit-lib" "collections-doc" "cover" "cover-coveralls" "sandbox-lib" "adjutor")) (description . "High-level, composable syntax for describing contracts.") (implies . ()) (last-checked . 1632904595) (last-edit . 1629581288) (last-updated . 1630431857) (modules . ((lib "contract/social/c3po/contract-parser.rkt") (lib "contract/social/c3po.rkt") (lib "contract/social/c3po/compiler.rkt") (lib "contract/social/c3po/private/util.rkt") (lib "tests/contract/social/private/util.rkt") (lib "tests/contract/social/social-contract.rkt") (lib "contract/social/scribblings/social-contract.scrbl") (lib "contract/social/c3po/parser.rkt") (lib "contract/social/private/dependencies.rkt") (lib "contract/social/c3po/provide-parser.rkt") (lib "contract/social/c3po/base-parsers.rkt") (lib "contract/social/c3po/lexer.rkt") (lib "contract/social.rkt"))) (name . "social-contract") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:skasivaj@gmail.com . #t) (contracts . #t) (dsl . #t) (ring:1 . #t) (standards . #t) (syntax . #t) (types . #t))) (source . "https://github.com/countvajhula/social-contract.git") (tags . ("contracts" "dsl" "standards" "syntax" "types")) (versions . #hash((default . #hasheq((checksum . "ea92ab0a5bcb342eb969a34fb3c7f981cc79de60") (source . "https://github.com/countvajhula/social-contract.git") (source_url . "https://github.com/countvajhula/social-contract.git"))))))) ("socketcan" . #hasheq((author . "abencz@gmail.com") (authors . ("abencz@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/socketcan.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e87aa767038b78386d18e3c0af8e9a482ca6e421") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "make" "scribble-lib")) (description . "Linux socketcan bindings for Racket.") (implies . ()) (last-checked . 1632904596) (last-edit . 1432766091) (last-updated . 1502816437) (modules . ((lib "socketcan/private/install.rkt") (lib "scribblings/socketcan.scrbl") (lib "socketcan/main.rkt") (lib "socketcan/tests.rkt"))) (name . "socketcan") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:abencz@gmail.com . #t) (ring:1 . #t))) (source . "github://github.com/abencz/racket-socketcan/racket_5.3.6") (tags . ()) (versions . #hash((default . #hasheq((checksum . "744bf37d7a347a55d1ec72885f87d35919f68b7b") (source . "git://github.com/abencz/racket-socketcan#master") (source_url . "http://github.com/abencz/racket-socketcan/tree/master#master"))) ("5.3.6" . #hasheq((checksum . "e87aa767038b78386d18e3c0af8e9a482ca6e421") (source . "github://github.com/abencz/racket-socketcan/racket_5.3.6") (source_url . "http://github.com/abencz/racket-socketcan/tree/racket_5.3.6"))))))) ("softposit-herbie" . #hasheq((author . "me@pavpanchekha.com") (authors . ("me@pavpanchekha.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/softposit-herbie.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "53955b17435c64e0a7164d33b3243c69d2222d81") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1561052642) (dependencies . ("math-lib" "base" "softposit-rkt" "rival" ("herbie" #:version "1.4"))) (description . "SoftPosit support for Herbie") (implies . ()) (last-checked . 1632904596) (last-edit . 1581976606) (last-updated . 1630028178) (modules . ((lib "softposit-herbie/main.rkt"))) (name . "softposit-herbie") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:me@pavpanchekha.com . #t) (floating-point . #t) (posits . #t) (ring:1 . #t))) (source . "https://github.com/herbie-fp/softposit-herbie.git") (tags . ("floating-point" "posits")) (versions . #hash((default . #hasheq((checksum . "53955b17435c64e0a7164d33b3243c69d2222d81") (source . "https://github.com/herbie-fp/softposit-herbie.git") (source_url . "https://github.com/herbie-fp/softposit-herbie.git"))))))) ("softposit-rkt" . #hasheq((author . "dthien@cs.washington.edu me@pavpanchekha.com") (authors . ("dthien@cs.washington.edu" "me@pavpanchekha.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "softposit-rkt" "doc/softposit-rkt@softposit-rkt/index.html"))) (failure-log . "server/built/fail/softposit-rkt.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "862aa557248e2489e9446c84f9676361272778f2") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1548136368) (dependencies . ("math-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Racket bindings for the C softposit library. More info at posithub.org (currently only works on Linux 64-bit.)") (implies . ()) (last-checked . 1632904597) (last-edit . 1595290942) (last-updated . 1560810114) (modules . ((lib "softposit-rkt/main.rkt") (lib "softposit-rkt/softposit.rkt") (lib "softposit-rkt/softposit-rkt.scrbl") (lib "softposit-rkt/install.rkt"))) (name . "softposit-rkt") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:dthien@cs.washington.edu . #t) (author:me@pavpanchekha.com . #t) (ffi . #t) (numerical . #t) (posits . #t) (ring:1 . #t) (softposit . #t) (unum . #t))) (source . "https://github.com/DavidThien/softposit-rkt.git") (tags . ("ffi" "numerical" "posits" "softposit" "unum")) (versions . #hash((default . #hasheq((checksum . "862aa557248e2489e9446c84f9676361272778f2") (source . "https://github.com/DavidThien/softposit-rkt.git") (source_url . "https://github.com/DavidThien/softposit-rkt.git"))))))) ("sonic-pi" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sonic-pi" "doc/sonic-pi@sonic-pi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sonic-pi.txt") (test-failure-log . "server/built/test-fail/sonic-pi.txt") (test-success-log . #f))) (checksum . "de70c9169b7bb6b6764c513c6caac25f533c79dc") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "osc" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "htdp-lib" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "For now, this package starts scsynth just like sonic pi does, and can make a few sounds.") (implies . ()) (last-checked . 1632904598) (last-edit . 1520224946) (last-updated . 1502816437) (modules . ((lib "sonic-pi/sonic-pi.scrbl") (lib "sonic-pi/lsonic-example.rkt") (lib "sonic-pi/go.rkt") (lib "sonic-pi/examples/uses-go.rkt") (lib "sonic-pi/scsynth/note.rkt") (lib "sonic-pi/scsynth/start-scsynth.rkt") (lib "sonic-pi/lsonic.rkt") (lib "sonic-pi/scsynth/scsynth-abstraction.rkt") (lib "sonic-pi/examples/chord-notes-fwoosh.rkt") (lib "sonic-pi/note.rkt") (lib "sonic-pi/scsynth/scsynth-communication.rkt") (lib "sonic-pi/scsynth/note-name.rkt"))) (name . "sonic-pi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/sonic-pi.git") (tags . ("audio")) (versions . #hash((default . #hasheq((checksum . "de70c9169b7bb6b6764c513c6caac25f533c79dc") (source . "https://github.com/jbclements/sonic-pi.git") (source_url . "https://github.com/jbclements/sonic-pi.git"))))))) ("soundex" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "soundex" "doc/soundex@soundex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/soundex.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/soundex.txt"))) (checksum . "b870344d2cae67642346fa919f46aded96624703") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Soundex Index Keying") (implies . ()) (last-checked . 1632904598) (last-edit . 1456465125) (last-updated . 1502816442) (modules . ((lib "soundex/soundex.scrbl") (lib "soundex/main.rkt"))) (name . "soundex") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t) (soundex . #t))) (source . "http://www.neilvandyke.org/racket/soundex.zip") (tags . ("soundex")) (versions . #hash((default . #hasheq((checksum . "b870344d2cae67642346fa919f46aded96624703") (source . "http://www.neilvandyke.org/racket/soundex.zip") (source_url . "http://www.neilvandyke.org/racket/soundex.zip"))))))) ("source-syntax" . #hash((author . "samth@racket-lang.org stamourv@racket-lang.org eli@racket-lang.org") (authors . ("samth@racket-lang.org" "stamourv@racket-lang.org" "eli@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "syntax") (conflicts . ()) (dependencies . ("base")) (description . "find mappings from expanded to source syntax") (implies . ()) (last-checked . 1632904599) (last-edit . 1417659583) (last-updated . 1631039808) (modules . ((lib "syntax/source-syntax.rkt"))) (name . "source-syntax") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (author:stamourv@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "fec1bd3cabf5dc5a759b10e8b0916e073f605ec2") (source . "git://github.com/racket/typed-racket/?path=source-syntax") (source_url . "git://github.com/racket/typed-racket/?path=source-syntax"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("spaceship-game-demo" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/spaceship-game-demo.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "614d1c5fb871f17e4008a26cb42542800457576b") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("game-engine-demos-common")) (description . "A demo game (actually many versions of a game) that we are using to teach the principles of game design.  Not intended to be particularly fun...") (implies . ()) (last-checked . 1632904599) (last-edit . 1519856804) (last-updated . 1570233030) (modules . ((lib "spaceship-game-demo/v17/spaceship_game.rkt") (lib "spaceship-game-demo/v16/spaceship_game.rkt") (lib "spaceship-game-demo/v15/spaceship_game.rkt") (lib "spaceship-game-demo/v14/spaceship_game.rkt") (lib "spaceship-game-demo/v13/spaceship_game.rkt") (lib "spaceship-game-demo/v12/spaceship_game.rkt") (lib "spaceship-game-demo/v11/spaceship_game.rkt") (lib "spaceship-game-demo/v10/spaceship_game.rkt") (lib "spaceship-game-demo/main.rkt") (lib "spaceship-game-demo/v8/spaceship_game.rkt") (lib "spaceship-game-demo/v6/spaceship_game.rkt") (lib "spaceship-game-demo/v7/spaceship_game.rkt") (lib "spaceship-game-demo/v9/spaceship_game.rkt") (lib "spaceship-game-demo/v5/spaceship_game.rkt") (lib "spaceship-game-demo/v1/spaceship_game.rkt") (lib "spaceship-game-demo/v3/spaceship_game.rkt") (lib "spaceship-game-demo/v4/spaceship_game.rkt") (lib "spaceship-game-demo/v2/spaceship_game.rkt"))) (name . "spaceship-game-demo") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:stephen@thoughtstem.com . #t) (education . #t) (games . #t) (ring:1 . #t))) (source . "https://github.com/srfoster/game-engine-demos.git?path=spaceship-game-demo") (tags . ("education" "games")) (versions . #hash((default . #hasheq((checksum . "614d1c5fb871f17e4008a26cb42542800457576b") (source . "https://github.com/srfoster/game-engine-demos.git?path=spaceship-game-demo") (source_url . "https://github.com/srfoster/game-engine-demos.git?path=spaceship-game-demo"))))))) ("sparse" . #hasheq((author . "esco.ricky@gmail.com") (authors . ("esco.ricky@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sparse" "doc/sparse@sparse/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sparse.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sparse.txt"))) (checksum . "0d713dd9524c5bbba7fbebe49f44cbe9aab70275") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "A tool for generating test cases for parsers for simple S-expression languages. It is intended primarily for use by instructors of Programming Languages classes in which students implement a simple S-expression-based programming language. It takes as input a description of the grammar of the language to be implemented and produces test cases for the students' parsers.") (implies . ()) (last-checked . 1632904605) (last-edit . 1496892090) (last-updated . 1543524496) (modules . ((lib "sparse/sparse.scrbl") (lib "sparse/parse-grammar-spec.rkt") (lib "sparse/minimization.rkt") (lib "sparse/main.rkt") (lib "sparse/generator.rkt") (lib "sparse/example-grammars.rkt"))) (name . "sparse") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:esco.ricky@gmail.com . #t) (grammar . #t) (instructors . #t) (parser . #t) (programming-languages . #t) (ring:1 . #t) (testing . #t))) (source . "git://github.com/ricky-escobar/sparse") (tags . ("grammar" "instructors" "parser" "programming-languages" "testing")) (versions . #hash((default . #hasheq((checksum . "0d713dd9524c5bbba7fbebe49f44cbe9aab70275") (source . "git://github.com/ricky-escobar/sparse") (source_url . "http://github.com/ricky-escobar/sparse/tree/master"))))))) ("spipe" . #hasheq((author . "macocio@gmail.com") (authors . ("macocio@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "spipe" "doc/spipe@spipe/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/spipe.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/spipe.txt"))) (checksum . "d6bc777a8113447fea9a3f10b5a0fbce6269dce4") (checksum-error . #f) (collection . "spipe") (conflicts . ()) (dependencies . ("base" "nested-hash" "threading" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A 'super-pipe' that threads over Racket hash-tables") (implies . ()) (last-checked . 1632904606) (last-edit . 1532758354) (last-updated . 1541286869) (modules . ((lib "spipe/main.rkt") (lib "spipe/scribblings/spipe.scrbl"))) (name . "spipe") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:macocio@gmail.com . #t) (hash . #t) (ring:1 . #t) (threading . #t))) (source . "https://github.com/BourgondAries/spipe.git") (tags . ("hash" "threading")) (versions . #hash((default . #hasheq((checksum . "d6bc777a8113447fea9a3f10b5a0fbce6269dce4") (source . "https://github.com/BourgondAries/spipe.git") (source_url . "https://github.com/BourgondAries/spipe.git"))))))) ("split-by" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/split-by.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/split-by.txt"))) (checksum . "87fc10bda5e0394f78455a78183c3f3a16bc60df") (checksum-error . #f) (collection . "data") (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . "The `split-by` function from Mathematica") (implies . ()) (last-checked . 1632904606) (last-edit . 1503521884) (last-updated . 1502816444) (modules . ((lib "data/split-by.rkt"))) (name . "split-by") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (lists . #t) (ring:1 . #t))) (source . "git://github.com/samth/split-by") (tags . ("lists")) (versions . #hash((default . #hasheq((checksum . "87fc10bda5e0394f78455a78183c3f3a16bc60df") (source . "git://github.com/samth/split-by") (source_url . "http://github.com/samth/split-by/tree/master"))))))) ("spmatrix" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "spmatrix" "doc/spmatrix@spmatrix/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/spmatrix.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/spmatrix.txt"))) (checksum . "15e1c74f8763abbdfb4348702c98ca6043e52a1c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("spvector" "base" "compatibility-lib" "eli-tester" "racket-doc" "scribble-lib")) (description . "Semi-persistent matrices based on spvectors") (implies . ()) (last-checked . 1632904606) (last-edit . 1354135506) (last-updated . 1502816445) (modules . ((lib "data/spmatrix/spmatrix.scrbl") (lib "data/spmatrix.rkt") (lib "tests/data/spmatrix.rkt"))) (name . "spmatrix") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (data . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/matrix/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "15e1c74f8763abbdfb4348702c98ca6043e52a1c") (source . "github://github.com/jeapostrophe/matrix/master") (source_url . "http://github.com/jeapostrophe/matrix/tree/master"))))))) ("spreadsheet-editor" . #hasheq((author . "dpavlov@iaaras.ru") (authors . ("dpavlov@iaaras.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/spreadsheet-editor.txt") (test-failure-log . "server/built/test-fail/spreadsheet-editor.txt") (test-success-log . #f))) (checksum . "73f8cfa89f0534f0bbb72833741cc7d5974ecda8") (checksum-error . #f) (collection . "spreadsheet-editor") (conflicts . ()) (dependencies . ("base" "gui" "draw-lib" "data-lib" "table-panel")) (description . "Flexible spreadsheet editor built on top of Racket's GUI controls") (implies . ()) (last-checked . 1632904607) (last-edit . 1496069411) (last-updated . 1502816445) (modules . ((lib "spreadsheet-editor/spreadsheet-editor-demo.rkt") (lib "spreadsheet-editor/main.rkt") (lib "spreadsheet-editor/spreadsheet-editor.rkt"))) (name . "spreadsheet-editor") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:dpavlov@iaaras.ru . #t) (gui . #t) (ring:1 . #t))) (source . "git://github.com/kugelblitz/spreadsheet-editor") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "73f8cfa89f0534f0bbb72833741cc7d5974ecda8") (source . "git://github.com/kugelblitz/spreadsheet-editor") (source_url . "http://github.com/kugelblitz/spreadsheet-editor/tree/master"))))))) ("spvector" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "spvector" "doc/spvector@spvector/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/spvector.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/spvector.txt"))) (checksum . "aba0ba4f4d8df27dc17252b984eca2f76f4ae414") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "eli-tester" "racket-doc" "scribble-lib")) (description . "Semi-persistent vectors that provide O(1) performance for linear use, but O(n) performance for non-linear accesses") (implies . ()) (last-checked . 1632904607) (last-edit . 1354037662) (last-updated . 1502816445) (modules . ((lib "data/spvector/spvector.scrbl") (lib "data/spvector.rkt") (lib "tests/data/spvector.rkt"))) (name . "spvector") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (data . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/spvector/master") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "aba0ba4f4d8df27dc17252b984eca2f76f4ae414") (source . "github://github.com/jeapostrophe/spvector/master") (source_url . "http://github.com/jeapostrophe/spvector/tree/master"))))))) ("sql" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sql" "doc/sql@sql/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sql.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sql.txt"))) (checksum . "7bb2872fb7850f67a7db3c9e017dfc9b61bd612e") (checksum-error . #f) (collection . "sql") (conflicts . ()) (dependencies . (("base" #:version "6.3") "rackunit-lib" "db-lib" "racket-doc" "scribble-lib" "sandbox-lib" "db-doc")) (description . "an S-expression notation for SQL") (implies . ()) (last-checked . 1632904607) (last-edit . 1478894891) (last-updated . 1612464948) (modules . ((lib "sql/sql.scrbl") (lib "sql/private/parse.rkt") (lib "sql/private/emit.rkt") (lib "sql/private/dialect.rkt") (lib "sql/test.rkt") (lib "sql/private/sql-keywords.rkt") (lib "sql/private/dynamic.rkt") (lib "sql/private/syntax.rkt") (lib "sql/private/jumble.rkt") (lib "sql/main.rkt") (lib "sql/private/ast.rkt"))) (name . "sql") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (db . #t) (ring:1 . #t))) (source . "git://github.com/rmculpepper/sql") (tags . ("db")) (versions . #hash((default . #hasheq((checksum . "7bb2872fb7850f67a7db3c9e017dfc9b61bd612e") (source . "git://github.com/rmculpepper/sql") (source_url . "http://github.com/rmculpepper/sql/tree/master"))))))) ("sql-sourcery" . #hasheq((author . "adjkant@gmail.com") (authors . ("adjkant@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "sql-sourcery"))) (failure-log . "server/built/fail/sql-sourcery.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "f6c0619ed9febbb66864f36aa41fa495df683f95") (checksum-error . #f) (collection . "sql-sourcery") (conflicts . ()) (date-added . 1549747144) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "An ORM for mapping structures in Racket to database entries in a SQL database. All versions 0.1.X are unstable Alpha releases. Current version 0.1.0") (implies . ()) (last-checked . 1632904607) (last-edit . 1552422938) (last-updated . 1549751196) (modules . ((lib "sql-sourcery/types.rkt") (lib "sql-sourcery/utils-phase-1.rkt") (lib "sql-sourcery/scribblings/sql-sourcery.scrbl") (lib "sql-sourcery/sourcery-connection.rkt") (lib "sql-sourcery/user-testing.rkt") (lib "sql-sourcery/main.rkt") (lib "sql-sourcery/sql.rkt") (lib "sql-sourcery/utils.rkt") (lib "sql-sourcery/type-support.rkt") (lib "sql-sourcery/sourcery-refs.rkt"))) (name . "sql-sourcery") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:adjkant@gmail.com . #t) (database . #t) (orm . #t) (racket-sourcery . #t) (ring:1 . #t) (sourcery-struct . #t) (sql . #t) (sqlite3 . #t) (struct . #t))) (source . "https://github.com/adjkant/sql-sourcery.git?path=sql-sourcery#f6c0619ed9febbb66864f36aa41fa495df683f95") (tags . ("database" "orm" "racket-sourcery" "sourcery-struct" "sql" "sqlite3" "struct")) (versions . #hash((default . #hasheq((checksum . "f6c0619ed9febbb66864f36aa41fa495df683f95") (source . "https://github.com/adjkant/sql-sourcery.git?path=sql-sourcery#f6c0619ed9febbb66864f36aa41fa495df683f95") (source_url . "https://github.com/adjkant/sql-sourcery.git?path=sql-sourcery#f6c0619ed9febbb66864f36aa41fa495df683f95"))))))) ("sqlite-table" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sqlite-table" "doc/sqlite-table@sqlite-table/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sqlite-table.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sqlite-table.txt"))) (checksum . "d1b892fe91a9413efd42da9ca75b5e1db5333993") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "db-lib" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A quick way to create and query sqlite tables. Basically a simplified wrapper for a subset of the db library.") (implies . ()) (last-checked . 1632904607) (last-edit . 1478813742) (last-updated . 1512457711) (modules . ((lib "sqlite-table/sqlite-table.scrbl") (lib "sqlite-table/main.rkt"))) (name . "sqlite-table") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (db . #t) (ring:1 . #t))) (source . "git://github.com/jbclements/sqlite-table") (tags . ("db")) (versions . #hash((default . #hasheq((checksum . "d1b892fe91a9413efd42da9ca75b5e1db5333993") (source . "git://github.com/jbclements/sqlite-table") (source_url . "http://github.com/jbclements/sqlite-table/tree/master"))))))) ("squicky" . #hasheq((author . "gray@nxg.name") (authors . ("gray@nxg.name")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "squicky" "doc/squicky@squicky/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/squicky.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/squicky.txt"))) (checksum . "c73696e916f2b8c1ddcf90abff8aa5f3a91a1a4c") (checksum-error . #f) (collection . "squicky") (conflicts . ()) (dependencies . ("base" "parser-tools-lib" "scribble-lib" "srfi-lite-lib" "at-exp-lib" "rackunit-lib" "racket-doc")) (description . "A parser for a wiki syntax (a mild extension of WikiCreole)") (implies . ()) (last-checked . 1632904608) (last-edit . 1421520567) (last-updated . 1553371623) (modules . ((lib "squicky/wiki2xml.rkt") (lib "squicky/squicky.scrbl") (lib "squicky/main.rkt") (lib "squicky/parser.rkt"))) (name . "squicky") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:gray@nxg.name . #t) (parser . #t) (ring:1 . #t) (wiki . #t))) (source . "http://nxg.me.uk/dist/squicky/squicky.zip") (tags . ("parser" "wiki")) (versions . #hash((default . #hasheq((checksum . "c73696e916f2b8c1ddcf90abff8aa5f3a91a1a4c") (source . "http://nxg.me.uk/dist/squicky/squicky.zip") (source_url . "http://nxg.me.uk/dist/squicky/squicky.zip"))))))) ("srfi" . #hash((author . "mflatt@racket-lang.org noel@racket-lang.org chongkai@racket-lang.org jay@racket-lang.org") (authors . ("mflatt@racket-lang.org" "noel@racket-lang.org" "chongkai@racket-lang.org" "jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("srfi-lib" "srfi-doc" "srfi-doc-nonfree")) (description . "Legacy SRFI (Scheme) libraries") (implies . ("srfi-lib" "srfi-doc" "srfi-doc-nonfree")) (last-checked . 1632904610) (last-edit . 1417659583) (last-updated . 1572913316) (modules . ()) (name . "srfi") (ring . 0) (search-terms . #hasheq((author:chongkai@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:noel@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "bc905ddcbeaa84502a015f140ddecd0d2772d576") (source . "git://github.com/racket/srfi/?path=srfi") (source_url . "git://github.com/racket/srfi/?path=srfi"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("srfi-doc" . #hash((author . "mflatt@racket-lang.org noel@racket-lang.org chongkai@racket-lang.org jay@racket-lang.org") (authors . ("mflatt@racket-lang.org" "noel@racket-lang.org" "chongkai@racket-lang.org" "jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "srfi" "doc/srfi@srfi-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "base" "scribble-lib" "compatibility-lib" "mzscheme-doc" "scheme-lib" "base" "scribble-lib" "srfi-lib" "racket-doc" "r5rs-doc" "r6rs-doc" "compatibility-lib")) (description . "documentation part of srfi") (implies . ()) (last-checked . 1632904610) (last-edit . 1417659583) (last-updated . 1572913317) (modules . ((lib "srfi/scribblings/util.rkt") (lib "srfi/scribblings/srfi.scrbl"))) (name . "srfi-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:chongkai@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:noel@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "bc905ddcbeaa84502a015f140ddecd0d2772d576") (source . "git://github.com/racket/srfi/?path=srfi-doc") (source_url . "git://github.com/racket/srfi/?path=srfi-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("srfi-doc-nonfree" . #hash((author . "mflatt@racket-lang.org noel@racket-lang.org chongkai@racket-lang.org jay@racket-lang.org") (authors . ("mflatt@racket-lang.org" "noel@racket-lang.org" "chongkai@racket-lang.org" "jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "srfi-nf" "doc/srfi-nf@srfi-doc-nonfree/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "bc905ddcbeaa84502a015f140ddecd0d2772d576") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("mzscheme-doc" "scheme-lib" "base" "scribble-lib" "srfi-doc" "racket-doc" "r5rs-doc" "r6rs-doc" "compatibility-lib")) (description . "documentation for parts of srfi implementation that are licensed restrictively") (implies . ()) (last-checked . 1632904610) (last-edit . 1517366433) (last-updated . 1572913319) (modules . ((lib "srfi/scribblings/srfi-nf.scrbl"))) (name . "srfi-doc-nonfree") (ring . 1) (search-terms . #hasheq((:docs: . #t) (:no-tag: . #t) (author:chongkai@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:noel@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/racket/srfi/?path=srfi-doc-nonfree") (tags . ()) (versions . #hash((default . #hasheq((checksum . "bc905ddcbeaa84502a015f140ddecd0d2772d576") (source . "git://github.com/racket/srfi/?path=srfi-doc-nonfree") (source_url . "git://github.com/racket/srfi/?path=srfi-doc-nonfree"))))))) ("srfi-lib" . #hash((author . "mflatt@racket-lang.org noel@racket-lang.org chongkai@racket-lang.org jay@racket-lang.org") (authors . ("mflatt@racket-lang.org" "noel@racket-lang.org" "chongkai@racket-lang.org" "jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "base" "srfi-lite-lib" "r6rs-lib" "compatibility-lib")) (description . "implementation (no documentation) part of srfi") (implies . ("srfi-lite-lib")) (last-checked . 1632904610) (last-edit . 1417659583) (last-updated . 1572913320) (modules . ((lib "srfi/67.rkt") (lib "srfi/%3a41.rkt") (lib "srfi/%3a1.rkt") (lib "srfi/%3a61.rkt") (lib "srfi/%3a18.rkt") (lib "srfi/%3a41/streams.rkt") (lib "srfi/%3a38.rkt") (lib "srfi/%3a87/case.rkt") (lib "srfi/%3a17.rkt") (lib "srfi/61/cond.rkt") (lib "srfi/%3a48/intermediate-format-strings.rkt") (lib "srfi/69.rkt") (lib "srfi/%3a29/localization.rkt") (lib "srfi/%3a9/records.rkt") (lib "srfi/34.rkt") (lib "srfi/%3a16/case-lambda.rkt") (lib "srfi/28.rkt") (lib "srfi/60.rkt") (lib "srfi/%3a54.rkt") (lib "srfi/features.rkt") (lib "srfi/%3a39/parameters.rkt") (lib "srfi/17/set.rkt") (lib "srfi/78.rkt") (lib "srfi/6.rkt") (lib "srfi/7.rkt") (lib "srfi/74.rkt") (lib "srfi/61.rkt") (lib "srfi/%3a66.rkt") (lib "srfi/32.rkt") (lib "srfi/%3a9.rkt") (lib "srfi/%3a57/records.rkt") (lib "srfi/64/testing.rkt") (lib "srfi/%3a69/basic-hash-tables.rkt") (lib "srfi/16.rkt") (lib "srfi/41/streams.rkt") (lib "srfi/98.rkt") (lib "srfi/%3a23.rkt") (lib "srfi/5/let.rkt") (lib "srfi/59/vicinity.rkt") (lib "srfi/27.rkt") (lib "srfi/71.rkt") (lib "srfi/%3a28/basic-format-strings.rkt") (lib "srfi/66.rkt") (lib "srfi/%3a60.rkt") (lib "srfi/%3a98/os-environment-variables.rkt") (lib "srfi/2.rkt") (lib "srfi/%3a71.rkt") (lib "srfi/69/hash.rkt") (lib "srfi/%3a31.rkt") (lib "srfi/40/stream.rkt") (lib "srfi/%3a66/octet-vectors.rkt") (lib "srfi/31/rec.rkt") (lib "srfi/2/and-let.rkt") (lib "srfi/%3a86/mu-and-nu.rkt") (lib "srfi/42ref.rkt") (lib "srfi/59.rkt") (lib "srfi/42ref/comprehensions.rkt") (lib "srfi/%3a87.rkt") (lib "srfi/41/derived.rkt") (lib "srfi/%3a54/cat.rkt") (lib "srfi/63/63.rkt") (lib "srfi/%3a26/cut.rkt") (lib "srfi/7/program.rkt") (lib "srfi/%3a27.rkt") (lib "srfi/30.rkt") (lib "srfi/%3a78.rkt") (lib "srfi/43.rkt") (lib "srfi/86.rkt") (lib "srfi/9/record.rkt") (lib "srfi/%3a45/lazy.rkt") (lib "srfi/%3a61/cond.rkt") (lib "srfi/32/sort.rkt") (lib "srfi/42/ec.rkt") (lib "srfi/25/array.rkt") (lib "srfi/%3a11.rkt") (lib "srfi/%3a5/let.rkt") (lib "srfi/18.rkt") (lib "srfi/%3a43/vectors.rkt") (lib "srfi/86/86.rkt") (lib "srfi/87/case.rkt") (lib "srfi/%3a42.rkt") (lib "srfi/%3a1/lists.rkt") (lib "srfi/41.rkt") (lib "srfi/40.rkt") (lib "srfi/11.rkt") (lib "srfi/%3a64.rkt") (lib "srfi/42.rkt") (lib "srfi/%3a5.rkt") (lib "srfi/54/cat.rkt") (lib "srfi/9.rkt") (lib "srfi/%3a98.rkt") (lib "srfi/74/74.rkt") (lib "srfi/45/lazy.rkt") (lib "srfi/%3a19/time.rkt") (lib "srfi/%3a8.rkt") (lib "srfi/%3a74.rkt") (lib "srfi/%3a23/error.rkt") (lib "srfi/63.rkt") (lib "srfi/42ref/examples-42.rkt") (lib "srfi/57/registry.rkt") (lib "srfi/%3a64/testing.rkt") (lib "srfi/%3a28.rkt") (lib "srfi/%3a38/with-shared-structure.rkt") (lib "srfi/%3a48.rkt") (lib "srfi/%3a74/blobs.rkt") (lib "srfi/%3a67.rkt") (lib "srfi/87.rkt") (lib "srfi/%3a8/receive.rkt") (lib "srfi/57.rkt") (lib "srfi/26.rkt") (lib "srfi/%3a2.rkt") (lib "srfi/%3a45.rkt") (lib "srfi/41/primitive.rkt") (lib "srfi/39.rkt") (lib "srfi/57/records.rkt") (lib "srfi/42/mzscheme2.rkt") (lib "srfi/%3a42/eager-comprehensions.rkt") (lib "srfi/54.rkt") (lib "srfi/%3a13/strings.rkt") (lib "srfi/%3a14/char-sets.rkt") (lib "srfi/23.rkt") (lib "srfi/%3a6.rkt") (lib "srfi/%3a19.rkt") (lib "srfi/26/cut.rkt") (lib "srfi/71/letvalues.rkt") (lib "srfi/38/38.rkt") (lib "srfi/%3a57.rkt") (lib "srfi/45.rkt") (lib "srfi/48.rkt") (lib "srfi/%3a39.rkt") (lib "srfi/67/compare.rkt") (lib "srfi/%3a29.rkt") (lib "srfi/%3a14.rkt") (lib "srfi/%3a67/compare-procedures.rkt") (lib "srfi/43/vector-lib.rkt") (lib "srfi/%3a86.rkt") (lib "srfi/%3a6/basic-string-ports.rkt") (lib "srfi/%3a63.rkt") (lib "srfi/%3a16.rkt") (lib "srfi/%3a25.rkt") (lib "srfi/48/format.rkt") (lib "srfi/%3a13.rkt") (lib "srfi/%3a69.rkt") (lib "srfi/%3a59/vicinities.rkt") (lib "srfi/35/condition.rkt") (lib "srfi/%3a31/rec.rkt") (lib "srfi/31.rkt") (lib "srfi/%3a43.rkt") (lib "srfi/%3a78/lightweight-testing.rkt") (lib "srfi/%3a71/let.rkt") (lib "srfi/34/exception.rkt") (lib "srfi/%3a60/integer-bits.rkt") (lib "srfi/25.rkt") (lib "srfi/%3a11/let-values.rkt") (lib "srfi/60/60.rkt") (lib "srfi/%3a18/multithreading.rkt") (lib "srfi/%3a59.rkt") (lib "srfi/17.rkt") (lib "srfi/27/random-bits.rkt") (lib "srfi/35.rkt") (lib "srfi/%3a25/multi-dimensional-arrays.rkt") (lib "srfi/%3a63/arrays.rkt") (lib "srfi/%3a2/and-let%2a.rkt") (lib "srfi/%3a17/generalized-set.rkt") (lib "srfi/78/check.rkt") (lib "srfi/5.rkt") (lib "srfi/38.rkt") (lib "srfi/%3a27/random-bits.rkt") (lib "srfi/4.rkt") (lib "srfi/64.rkt") (lib "srfi/%3a26.rkt") (lib "srfi/27/random-bits-examples.rkt"))) (name . "srfi-lib") (ring . 0) (search-terms . #hasheq((author:chongkai@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:noel@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "bc905ddcbeaa84502a015f140ddecd0d2772d576") (source . "git://github.com/racket/srfi/?path=srfi-lib") (source_url . "git://github.com/racket/srfi/?path=srfi-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("srfi-lib-nonfree" . #hash((author . "mflatt@racket-lang.org noel@racket-lang.org chongkai@racket-lang.org jay@racket-lang.org") (authors . ("mflatt@racket-lang.org" "noel@racket-lang.org" "chongkai@racket-lang.org" "jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/srfi-lib-nonfree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/srfi-lib-nonfree.txt"))) (checksum . "bc905ddcbeaa84502a015f140ddecd0d2772d576") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ()) (description . "parts of srfi implementation that are licensed restrictively") (implies . ()) (last-checked . 1632904611) (last-edit . 1517366412) (last-updated . 1572913322) (modules . ()) (name . "srfi-lib-nonfree") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:chongkai@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:noel@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/racket/srfi.git?path=srfi-lib-nonfree") (tags . ()) (versions . #hash((default . #hasheq((checksum . "bc905ddcbeaa84502a015f140ddecd0d2772d576") (source . "https://github.com/racket/srfi.git?path=srfi-lib-nonfree") (source_url . "https://github.com/racket/srfi.git?path=srfi-lib-nonfree"))))))) ("srfi-lite-lib" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "implementation of the most widely used srfi libraries") (implies . ()) (last-checked . 1632904611) (last-edit . 1417659583) (last-updated . 1622845701) (modules . ((lib "srfi/optional.rkt") (lib "srfi/1/list.rkt") (lib "srfi/8.rkt") (lib "srfi/1/predicate.rkt") (lib "srfi/1/delete.rkt") (lib "srfi/1/selector.rkt") (lib "srfi/13.rkt") (lib "srfi/1/cons.rkt") (lib "srfi/19.rkt") (lib "srfi/1/alist.rkt") (lib "srfi/19/time.rkt") (lib "srfi/provider.rkt") (lib "srfi/14/char-set.rkt") (lib "srfi/13/string.rkt") (lib "srfi/1.rkt") (lib "srfi/8/receive.rkt") (lib "srfi/14.rkt") (lib "srfi/1/search.rkt") (lib "srfi/1/misc.rkt") (lib "srfi/29/localization.rkt") (lib "srfi/1/filter.rkt") (lib "srfi/1/lset.rkt") (lib "srfi/1/util.rkt") (lib "srfi/1/fold.rkt") (lib "srfi/29.rkt"))) (name . "srfi-lite-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "bc905ddcbeaa84502a015f140ddecd0d2772d576") (source . "git://github.com/racket/srfi/?path=srfi-lite-lib") (source_url . "git://github.com/racket/srfi/?path=srfi-lite-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("srfi-test" . #hash((author . "mflatt@racket-lang.org noel@racket-lang.org chongkai@racket-lang.org jay@racket-lang.org") (authors . ("mflatt@racket-lang.org" "noel@racket-lang.org" "chongkai@racket-lang.org" "jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "base" "compatibility-lib" "rackunit-lib" "srfi-lib")) (description . "tests for srfi") (implies . ()) (last-checked . 1632904611) (last-edit . 1417659583) (last-updated . 1572913325) (modules . ((lib "tests/srfi/34/mz-else.rkt") (lib "tests/srfi/14/char-set-test.rkt") (lib "tests/srfi/1/misc-test.rkt") (lib "tests/srfi/1/alist-test.rkt") (lib "tests/srfi/1/predicate-test.rkt") (lib "tests/srfi/1/search-test.rkt") (lib "tests/srfi/26/cut-test.rkt") (lib "tests/srfi/43/iteration-tests.rkt") (lib "tests/srfi/1/all-1-tests.rkt") (lib "tests/srfi/1/filter-test.rkt") (lib "tests/srfi/43/conversion-tests.rkt") (lib "tests/srfi/5/srfi-5-test.rkt") (lib "tests/srfi/19/tests.rkt") (lib "tests/srfi/40/all-srfi-40-tests.rkt") (lib "tests/srfi/1/lset-test.rkt") (lib "tests/srfi/1/selector-test.rkt") (lib "tests/srfi/34/else.rkt") (lib "tests/srfi/14/srfi-14.rkt") (lib "tests/srfi/40/run-tests.rkt") (lib "tests/srfi/69/hash-tests.rkt") (lib "tests/srfi/43/predicate-tests.rkt") (lib "tests/srfi/43/all-srfi-43-tests.rkt") (lib "tests/srfi/43/constructor-tests.rkt") (lib "tests/srfi/43/run-tests.rkt") (lib "tests/srfi/1/racket-base-collide.rkt") (lib "tests/srfi/13/string-test.rkt") (lib "tests/srfi/43/mutator-tests.rkt") (lib "tests/srfi/4/srfi-4-test.rkt") (lib "tests/srfi/run-tests.rkt") (lib "tests/srfi/1/delete-test.rkt") (lib "tests/srfi/1/fold-test.rkt") (lib "tests/srfi/1/cons-test.rkt") (lib "tests/srfi/2/and-let-test.rkt") (lib "tests/srfi/43/searching-tests.rkt") (lib "tests/srfi/11/srfi-11-test.rkt") (lib "tests/srfi/1/run-tests.rkt") (lib "tests/srfi/load-srfis.rkt") (lib "tests/srfi/all-srfi-tests.rkt"))) (name . "srfi-test") (ring . 0) (search-terms . #hasheq((author:chongkai@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (author:noel@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "bc905ddcbeaa84502a015f140ddecd0d2772d576") (source . "git://github.com/racket/srfi/?path=srfi-test") (source_url . "git://github.com/racket/srfi/?path=srfi-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("ss-rpc-server" . #hasheq((author . "sekk1e@yandex.ru") (authors . ("sekk1e@yandex.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ss-rpc-server" "doc/ss-rpc-server@ss-rpc-server/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ss-rpc-server.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ss-rpc-server.txt"))) (checksum . "50f281f251f06ea0b56955a275750aa170a94254") (checksum-error . #f) (collection . "ss-rpc-server") (conflicts . ()) (dependencies . ("base" "srfi-lite-lib" "web-server-lib" "scribble-lib" "racket-doc")) (description . "RPC for using Racket as GNU Emacs extension language") (implies . ()) (last-checked . 1632904611) (last-edit . 1473528355) (last-updated . 1502816454) (modules . ((lib "ss-rpc-server/main.rkt") (lib "ss-rpc-server/examples/echo.rkt") (lib "ss-rpc-server/ss-rpc-server.scrbl"))) (name . "ss-rpc-server") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sekk1e@yandex.ru . #t) (emacs . #t) (ring:1 . #t) (rpc . #t))) (source . "git://github.com/sk1e/ss-rpc-server") (tags . ("emacs" "rpc")) (versions . #hash((default . #hasheq((checksum . "50f281f251f06ea0b56955a275750aa170a94254") (source . "git://github.com/sk1e/ss-rpc-server") (source_url . "http://github.com/sk1e/ss-rpc-server/tree/master"))))))) ("ssh-hack" . #hasheq((author . "winston@ml1.net") (authors . ("winston@ml1.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/ssh-hack.txt") (success-log . "server/built/install/ssh-hack.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ssh-hack.txt"))) (checksum . "9e8099a385fed26def70690279ad9d4ff3a097d0") (checksum-error . #f) (collection . "ssh-hack") (conflicts . ()) (dependencies . ("base" "ansi")) (description . "A simple Dgamelaunch client") (implies . ()) (last-checked . 1632904612) (last-edit . 1527531521) (last-updated . 1582547759) (modules . ((lib "ssh-hack/ssh-hack.rkt") (lib "ssh-hack/main.rkt"))) (name . "ssh-hack") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:winston@ml1.net . #t) (nethack . #t) (ring:1 . #t) (ssh . #t) (util . #t) (utilities . #t) (utility . #t))) (source . "https://github.com/winny-/ssh-hack.git") (tags . ("nethack" "ssh" "util" "utilities" "utility")) (versions . #hash((default . #hasheq((checksum . "9e8099a385fed26def70690279ad9d4ff3a097d0") (source . "https://github.com/winny-/ssh-hack.git") (source_url . "https://github.com/winny-/ssh-hack.git"))))))) ("staged-slide" . #hasheq((author . "stamourv@racket-lang.org cce@racket-lang.org") (authors . ("stamourv@racket-lang.org" "cce@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "staged-slide" "doc/staged-slide@staged-slide/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/staged-slide.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/staged-slide.txt"))) (checksum . "28b9389ea83984306dd50b634cb795c3bd86ca41") (checksum-error . #f) (collection . "slideshow") (conflicts . ()) (dependencies . ("base" "pict-lib" "slideshow-lib" "scribble-lib" "pict-doc" "racket-doc" "slideshow-doc")) (description . "Helpers for building staged slides in Slideshow") (implies . ()) (last-checked . 1632904612) (last-edit . 1441219803) (last-updated . 1502816454) (modules . ((lib "slideshow/scribblings/staged-slide.scrbl") (lib "slideshow/staged-slide.rkt"))) (name . "staged-slide") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:cce@racket-lang.org . #t) (author:stamourv@racket-lang.org . #t) (ring:1 . #t) (slideshow . #t))) (source . "git://github.com/stamourv/staged-slide") (tags . ("slideshow")) (versions . #hash((default . #hasheq((checksum . "28b9389ea83984306dd50b634cb795c3bd86ca41") (source . "git://github.com/stamourv/staged-slide") (source_url . "http://github.com/stamourv/staged-slide/tree/master"))) ("6.2.1" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("6.3" . #hasheq((checksum . "79e4932c0d877b8aaafce5947bf1634c1ecfa26b") (source . "github://github.com/stamourv/staged-slide/racket-6.3") (source_url . "http://github.com/stamourv/staged-slide/tree/racket-6.3"))))))) ("stardate" . #hasheq((author . "dyoo@hashcollision.org") (authors . ("dyoo@hashcollision.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "stardate" "doc/stardate@stardate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stardate.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/stardate.txt"))) (checksum . "580558886983d73916c355e21400310a59729be5") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "Compute the current TNG stardate.") (implies . ()) (last-checked . 1632904612) (last-edit . 1352401914) (last-updated . 1502816454) (modules . ((lib "stardate/main.rkt") (lib "stardate/stardate.scrbl"))) (name . "stardate") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dyoo@hashcollision.org . #t) (date . #t) (ring:1 . #t))) (source . "github://github.com/dyoo/stardate/master") (tags . ("date")) (versions . #hash((default . #hasheq((checksum . "580558886983d73916c355e21400310a59729be5") (source . "github://github.com/dyoo/stardate/master") (source_url . "http://github.com/dyoo/stardate/tree/master"))))))) ("static-rename" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/static-rename.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/static-rename.txt"))) (checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("static-rename-doc" "static-rename-lib")) (description . "") (implies . ("static-rename-doc" "static-rename-lib")) (last-checked . 1632904613) (last-edit . 1490649794) (last-updated . 1502816455) (modules . ()) (name . "static-rename") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-static-rename?path=static-rename") (tags . ()) (versions . #hash((default . #hasheq((checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (source . "git://github.com/lexi-lambda/racket-static-rename?path=static-rename") (source_url . "http://github.com/lexi-lambda/racket-static-rename/tree/master?path=static-rename"))))))) ("static-rename-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "static-rename" "doc/static-rename@static-rename-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/static-rename-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/static-rename-doc.txt"))) (checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "static-rename-lib")) (description . "documentation (no implementation) for “static-rename”") (implies . ()) (last-checked . 1632904613) (last-edit . 1490649800) (last-updated . 1502816455) (modules . ((lib "scribblings/static-rename/main.scrbl"))) (name . "static-rename-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-static-rename?path=static-rename-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (source . "git://github.com/lexi-lambda/racket-static-rename?path=static-rename-doc") (source_url . "http://github.com/lexi-lambda/racket-static-rename/tree/master?path=static-rename-doc"))))))) ("static-rename-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/static-rename-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/static-rename-lib.txt"))) (checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.2"))) (description . "implementation (no documentation) for “static-rename”") (implies . ()) (last-checked . 1632904613) (last-edit . 1490649800) (last-updated . 1502816455) (modules . ((lib "static-rename/main.rkt"))) (name . "static-rename-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-static-rename?path=static-rename-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (source . "git://github.com/lexi-lambda/racket-static-rename?path=static-rename-lib") (source_url . "http://github.com/lexi-lambda/racket-static-rename/tree/master?path=static-rename-lib"))))))) ("static-rename-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/static-rename-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/static-rename-test.txt"))) (checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "rackunit-spec" "static-rename-lib")) (description . "") (implies . ()) (last-checked . 1632904613) (last-edit . 1490649803) (last-updated . 1502816455) (modules . ((lib "tests/static-rename/main.rkt"))) (name . "static-rename-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-static-rename?path=static-rename-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "50f1ff9866a3ef116471eb1a483c1992480dcd45") (source . "git://github.com/lexi-lambda/racket-static-rename?path=static-rename-test") (source_url . "http://github.com/lexi-lambda/racket-static-rename/tree/master?path=static-rename-test"))))))) ("statsd" . #hasheq((author . "me@apgwoz.com") (authors . ("me@apgwoz.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/statsd.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/statsd.txt"))) (checksum . "39a640686053be83442bfb129a279b8d00d6a177") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "statsd client for racket") (implies . ()) (last-checked . 1632904613) (last-edit . 1494310113) (last-updated . 1502816455) (modules . ((lib "net/statsd/main.rkt") (lib "scribblings/net/statsd.scrbl") (lib "net/statsd.rkt"))) (name . "statsd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:me@apgwoz.com . #t) (metrics . #t) (net . #t) (ring:1 . #t) (statsd . #t))) (source . "git://github.com/apg/statsd-rkt") (tags . ("metrics" "net" "statsd")) (versions . #hash((default . #hasheq((checksum . "39a640686053be83442bfb129a279b8d00d6a177") (source . "git://github.com/apg/statsd-rkt") (source_url . "http://github.com/apg/statsd-rkt/tree/master"))))))) ("stephens-favourite-quickscripts" . #hasheq((author . "spdegabrielle@gmail.com") (authors . ("spdegabrielle@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "stephens-favourite-quickscripts"))) (failure-log . "server/built/fail/stephens-favourite-quickscripts.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "f49ac0f8d869beddd03494c240839b384cd87cb1") (checksum-error . #f) (collection . "stephens-favourite-quuickscripts") (conflicts . ()) (date-added . 1610291561) (dependencies . ("data-lib" "base" "drracket" "gui-lib" "htdp-lib" "markdown" "net-lib" "plot-gui-lib" "plot-lib" "quickscript" "rackunit-lib" "scribble-lib" "search-list-box" "syntax-color-lib" "at-exp-lib")) (description . "stephens-favourite-quickscripts") (implies . ()) (last-checked . 1632904614) (last-edit . 1610291561) (last-updated . 1628016306) (modules . ((lib "stephens-favourite-quuickscripts/scripts/open-terminal.rkt") (lib "stephens-favourite-quuickscripts/scripts/visit-url.rkt") (lib "stephens-favourite-quuickscripts/scripts/eyes.rkt") (lib "stephens-favourite-quuickscripts/scripts/defines.rkt") (lib "stephens-favourite-quuickscripts/scripts/open-recent.rkt") (lib "stephens-favourite-quuickscripts/register.rkt"))) (name . "stephens-favourite-quickscripts") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:spdegabrielle@gmail.com . #t) (quickscripts . #t) (ring:1 . #t))) (source . "https://github.com/spdegabrielle/stephens-favourite-quickscripts.git") (tags . ("quickscripts")) (versions . #hash((default . #hasheq((checksum . "f49ac0f8d869beddd03494c240839b384cd87cb1") (source . "https://github.com/spdegabrielle/stephens-favourite-quickscripts.git") (source_url . "https://github.com/spdegabrielle/stephens-favourite-quickscripts.git"))))))) ("stockfighter-racket" . #hasheq((author . "euler90h@gmail.com") (authors . ("euler90h@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/stockfighter-racket.txt") (docs . (("main" "stockfighter-api" "doc/stockfighter-api@stockfighter-racket/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stockfighter-racket.txt") (test-failure-log . "server/built/test-fail/stockfighter-racket.txt") (test-success-log . #f))) (checksum . "cf7669c2d79645a54ee287df14a3e704006e0096") (checksum-error . #f) (collection . "stockfighter-api") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "rfc6455" "scribble-lib" "racket-doc")) (description . "Stockfighter API client") (implies . ()) (last-checked . 1632904614) (last-edit . 1450936553) (last-updated . 1502816456) (modules . ((lib "stockfighter-api/stockfighter.rkt") (lib "stockfighter-api/orders.rkt") (lib "stockfighter-api/feed.rkt") (lib "stockfighter-api/scribblings/stockfighter-api.scrbl") (lib "stockfighter-api/time.rkt") (lib "stockfighter-api/main.rkt") (lib "stockfighter-api/fills.rkt") (lib "stockfighter-api/quotes.rkt"))) (name . "stockfighter-racket") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:euler90h@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/eu90h/stockfighter-racket") (tags . ()) (versions . #hash((default . #hasheq((checksum . "cf7669c2d79645a54ee287df14a3e704006e0096") (source . "git://github.com/eu90h/stockfighter-racket") (source_url . "http://github.com/eu90h/stockfighter-racket/tree/master"))))))) ("stomp" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "stomp" "doc/stomp@stomp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stomp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/stomp.txt"))) (checksum . "8ec9471362f42253df787c83dc3f241086be6b9f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "STOMP messaging protocol codec and client") (implies . ()) (last-checked . 1632904614) (last-edit . 1441911242) (last-updated . 1538045935) (modules . ((lib "stomp/examples/rpc-client.rkt") (lib "stomp/examples/stomp-tail-activemq.rkt") (lib "stomp/test-functional-queue.rkt") (lib "stomp/examples/rpc-server.rkt") (lib "stomp/main.rkt") (lib "stomp/packet.rkt") (lib "stomp/session.rkt") (lib "stomp/test-packet.rkt") (lib "stomp/functional-queue.rkt") (lib "stomp/examples/stomp-tail.rkt") (lib "stomp/scribblings/stomp.scrbl"))) (name . "stomp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tonygarnockjones@gmail.com . #t) (communication . #t) (net . #t) (ring:1 . #t))) (source . "github://github.com/tonyg/racket-stomp/master") (tags . ("communication" "net")) (versions . #hash((default . #hasheq((checksum . "8ec9471362f42253df787c83dc3f241086be6b9f") (source . "github://github.com/tonyg/racket-stomp/master") (source_url . "http://github.com/tonyg/racket-stomp/tree/master"))))))) ("stream-etc" . #hasheq((author . "camoy@ccs.neu.edu") (authors . ("camoy@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "stream-etc" "doc/stream-etc@stream-etc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stream-etc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/stream-etc.txt"))) (checksum . "637ad0b07259ce418e6f0aab06d34cd2ec8521cf") (checksum-error . #f) (collection . "stream-etc") (conflicts . ()) (date-added . 1613458845) (dependencies . ("base" "chk-lib" "sandbox-lib" "threading-doc" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Miscellaneous stream operations.") (implies . ()) (last-checked . 1632904614) (last-edit . 1620524830) (last-updated . 1620523777) (modules . ((lib "stream-etc/scribblings/stream-etc.scrbl") (lib "stream-etc/main.rkt"))) (name . "stream-etc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:camoy@ccs.neu.edu . #t) (ring:1 . #t))) (source . "https://github.com/camoy/stream-etc.git#main") (tags . ()) (versions . #hash((default . #hasheq((checksum . "637ad0b07259ce418e6f0aab06d34cd2ec8521cf") (source . "https://github.com/camoy/stream-etc.git#main") (source_url . "https://github.com/camoy/stream-etc.git#main"))))))) ("stream-values" . #hasheq((author . "sorawee.pwase@gmail.com") (authors . ("sorawee.pwase@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "stream-values" "doc/stream-values@stream-values/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stream-values.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/stream-values.txt"))) (checksum . "e126aaddfc2c8d1ba6df32d8ebb4d40f4e55bfd7") (checksum-error . #f) (collection . "stream-values") (conflicts . ()) (date-added . 1587431027) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A library for multiple values manipulation in streams") (implies . ()) (last-checked . 1632904615) (last-edit . 1587431027) (last-updated . 1627666643) (modules . ((lib "stream-values/test-perf.rkt") (lib "stream-values/main.rkt") (lib "stream-values/scribblings/stream-values.scrbl"))) (name . "stream-values") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sorawee.pwase@gmail.com . #t) (ring:1 . #t) (stream . #t))) (source . "https://github.com/sorawee/stream-values.git") (tags . ("stream")) (versions . #hash((default . #hasheq((checksum . "e126aaddfc2c8d1ba6df32d8ebb4d40f4e55bfd7") (source . "https://github.com/sorawee/stream-values.git") (source_url . "https://github.com/sorawee/stream-values.git"))))))) ("stretchable-snip" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "stretchable-snip" "doc/stretchable-snip@stretchable-snip/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stretchable-snip.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/stretchable-snip.txt"))) (checksum . "5953118ad3b3e9d60b350d57b5b5c9a653ee1a14") (checksum-error . #f) (collection . "stretchable-snip") (conflicts . ()) (dependencies . ("base" "gui-lib" "scribble-lib" "racket-doc" "rackunit-lib" "draw-doc" "gui-doc")) (description . "Racket library for stretchable (scalable) editor snips") (implies . ()) (last-checked . 1632904615) (last-edit . 1535915056) (last-updated . 1556510521) (modules . ((lib "stretchable-snip/main.rkt") (lib "stretchable-snip/scribblings/stretchable-snip.scrbl"))) (name . "stretchable-snip") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/Kalimehtar/stretchable-snip.git") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "5953118ad3b3e9d60b350d57b5b5c9a653ee1a14") (source . "https://github.com/Kalimehtar/stretchable-snip.git") (source_url . "https://github.com/Kalimehtar/stretchable-snip.git"))))))) ("string-constants" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("string-constants-lib" "string-constants-doc")) (description . "String constants to support internationalization, especially in DrRacket") (implies . ("string-constants-lib" "string-constants-doc")) (last-checked . 1632904615) (last-edit . 1417659583) (last-updated . 1620139109) (modules . ()) (name . "string-constants") (ring . 0) (search-terms . #hasheq((author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "ee7dd3c207c999e3c8a42092dcbca9dfb2d1132a") (source . "git://github.com/racket/string-constants/?path=string-constants") (source_url . "git://github.com/racket/string-constants/?path=string-constants"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("string-constants-doc" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "string-constants" "doc/string-constants@string-constants-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("string-constants-lib" "base" "racket-doc" "scribble-lib")) (description . "String constants documentation") (implies . ()) (last-checked . 1632904615) (last-edit . 1417659583) (last-updated . 1620139110) (modules . ((lib "string-constants/string-constants.scrbl"))) (name . "string-constants-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "ee7dd3c207c999e3c8a42092dcbca9dfb2d1132a") (source . "git://github.com/racket/string-constants/?path=string-constants-doc") (source_url . "git://github.com/racket/string-constants/?path=string-constants-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("string-constants-lib" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "String constants to support internationalization, especially in DrRacket") (implies . ()) (last-checked . 1632904615) (last-edit . 1417659583) (last-updated . 1620139112) (modules . ((lib "string-constants/private/bulgarian-string-constants.rkt") (lib "string-constants/private/simplified-chinese-string-constants.rkt") (lib "string-constants/tests/test-docs-complete.rkt") (lib "string-constants/private/string-constant-lang.rkt") (lib "string-constants/main.rkt") (lib "string-constants/private/french-string-constants.rkt") (lib "string-constants/private/ukrainian-string-constants.rkt") (lib "string-constants/string-constant.rkt") (lib "string-constants/private/traditional-chinese-string-constants.rkt") (lib "string-constants/private/german-string-constants.rkt") (lib "string-constants/private/russian-string-constants.rkt") (lib "string-constants/tests/sc.rkt") (lib "string-constants/private/english-string-constants.rkt") (lib "string-constants/private/portuguese-string-constants.rkt") (lib "string-constants/private/danish-string-constants.rkt") (lib "string-constants/private/japanese-string-constants.rkt"))) (name . "string-constants-lib") (ring . 0) (search-terms . #hasheq((author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "ee7dd3c207c999e3c8a42092dcbca9dfb2d1132a") (source . "git://github.com/racket/string-constants/?path=string-constants-lib") (source_url . "git://github.com/racket/string-constants/?path=string-constants-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("string-constants-lib-lgpl" . #hasheq((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/string-constants-lib-lgpl.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/string-constants-lib-lgpl.txt"))) (checksum . "ee7dd3c207c999e3c8a42092dcbca9dfb2d1132a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1590265765) (dependencies . ("base" "string-constants-lib")) (description . "") (implies . ()) (last-checked . 1632904616) (last-edit . 1590265765) (last-updated . 1620139113) (modules . ((lib "string-constants/private/dutch-string-constants.rkt") (lib "string-constants/private/spanish-string-constants.rkt") (lib "string-constants/private/korean-string-constants.rkt"))) (name . "string-constants-lib-lgpl") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:robby@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/racket/string-constants.git?path=string-constants-lib-lgpl") (tags . ()) (versions . #hash((default . #hasheq((checksum . "ee7dd3c207c999e3c8a42092dcbca9dfb2d1132a") (source . "https://github.com/racket/string-constants.git?path=string-constants-lib-lgpl") (source_url . "https://github.com/racket/string-constants.git?path=string-constants-lib-lgpl"))))))) ("string-sexpr" . #hasheq((author . "matthias@ccs.neu.edu") (authors . ("matthias@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/string-sexpr.txt") (docs . (("main" "string-sexpr" "doc/string-sexpr@string-sexpr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/string-sexpr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/string-sexpr.txt"))) (checksum . "b87319d3c34be048df24222e54c7dc4327063dc8") (checksum-error . #f) (collection . "string-sexpr") (conflicts . ()) (dependencies . ("racket" "scribble-lib" "racket-doc")) (description . "a supplementary package for Fundamentals I") (implies . ()) (last-checked . 1632904616) (last-edit . 1479092417) (last-updated . 1502816458) (modules . ((lib "string-sexpr/scribblings/string-sexpr.scrbl") (lib "string-sexpr/main.rkt"))) (name . "string-sexpr") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:matthias@ccs.neu.edu . #t) (ring:1 . #t) (string . #t))) (source . "git://github.com/mfelleisen/string-sexpr") (tags . ("string")) (versions . #hash((default . #hasheq((checksum . "b87319d3c34be048df24222e54c7dc4327063dc8") (source . "git://github.com/mfelleisen/string-sexpr") (source_url . "http://github.com/mfelleisen/string-sexpr/tree/master"))))))) ("string-util" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "string-util" "doc/string-util@string-util/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/string-util.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/string-util.txt"))) (checksum . "4af2c3e5f21accaa4bc8f02db2bfe8f1b9a62223") (checksum-error . #f) (collection . "string-util") (conflicts . ()) (dependencies . ("opt" "list-util" "srfi-lite-lib" "typed-racket-more" "typed-racket-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Additional string utilities in Typed Racket.") (implies . ()) (last-checked . 1632904616) (last-edit . 1528468098) (last-updated . 1627400248) (modules . ((lib "string-util/main.rkt") (lib "string-util/scribblings/string-util.scrbl"))) (name . "string-util") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (ring:1 . #t) (string . #t) (strings . #t) (typed . #t) (utils . #t))) (source . "https://gitlab.com/RayRacine/string-util.git") (tags . ("string" "strings" "typed" "utils")) (versions . #hash((default . #hasheq((checksum . "4af2c3e5f21accaa4bc8f02db2bfe8f1b9a62223") (source . "https://gitlab.com/RayRacine/string-util.git") (source_url . "https://gitlab.com/RayRacine/string-util.git"))))))) ("stripe-integration" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "stripe-integration" "doc/stripe-integration@stripe-integration/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stripe-integration.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/stripe-integration.txt"))) (checksum . "8675b005992576a1df07f6687b271be026049eaa") (checksum-error . #f) (collection . "stripe-integration") (conflicts . ()) (date-added . 1569458593) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Unofficial Stripe API integration with Racket") (implies . ()) (last-checked . 1632904616) (last-edit . 1569458593) (last-updated . 1569458593) (modules . ((lib "stripe-integration/scribblings/stripe-integration.scrbl") (lib "stripe-integration/main.rkt"))) (name . "stripe-integration") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sage@sagegerard.com . #t) (payment . #t) (ring:1 . #t) (stripe . #t))) (source . "https://github.com/zyrolasting/stripe-integration.git") (tags . ("payment" "stripe")) (versions . #hash((default . #hasheq((checksum . "8675b005992576a1df07f6687b271be026049eaa") (source . "https://github.com/zyrolasting/stripe-integration.git") (source_url . "https://github.com/zyrolasting/stripe-integration.git"))))))) ("struct-defaults" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-defaults.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-defaults.txt"))) (checksum . "97fb427ab2210ba145486604b2095704c51da6a9") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib")) (description . " Default values in struct ctors and patterns.") (implies . ()) (last-checked . 1632904617) (last-edit . 1467565988) (last-updated . 1502816459) (modules . ((lib "struct-defaults/test-computed-defaults.rkt") (lib "struct-defaults/main.rkt") (lib "struct-defaults/test-provide.rkt"))) (name . "struct-defaults") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t) (structs . #t))) (source . "git://github.com/tonyg/racket-struct-defaults") (tags . ("structs")) (versions . #hash((default . #hasheq((checksum . "97fb427ab2210ba145486604b2095704c51da6a9") (source . "git://github.com/tonyg/racket-struct-defaults") (source_url . "http://github.com/tonyg/racket-struct-defaults/tree/master"))))))) ("struct-define" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "struct-define" "doc/struct-define@struct-define/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-define.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-define.txt"))) (checksum . "74c874da5295f0b9bda61e0a4a748d311ff6bced") (checksum-error . #f) (collection . "struct-define") (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "quickly pull out struct fields") (implies . ()) (last-checked . 1632904617) (last-edit . 1515102523) (last-updated . 1623847047) (modules . ((lib "struct-define/tests/typed-racket.rkt") (lib "struct-define/main.rkt") (lib "struct-define/struct-define.scrbl") (lib "struct-define/tests/struct-define.rkt") (lib "struct-define/tests/define-struct-define.rkt"))) (name . "struct-define") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ring:1 . #t) (utilities . #t))) (source . "https://github.com/jeapostrophe/struct-define.git") (tags . ("utilities")) (versions . #hash((default . #hasheq((checksum . "74c874da5295f0b9bda61e0a4a748d311ff6bced") (source . "https://github.com/jeapostrophe/struct-define.git") (source_url . "https://github.com/jeapostrophe/struct-define.git"))))))) ("struct-like-struct-type-property" . #hasheq((author . "iitalics@gmail.com alexander@knauth.org") (authors . ("iitalics@gmail.com" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "struct-like-struct-type-property" "doc/struct-like-struct-type-property@struct-like-struct-type-property/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-like-struct-type-property.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-like-struct-type-property.txt"))) (checksum . "c961dbd9a5741895e838558bf19233fd4142e4d6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1594046663) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Creating struct-type properties with a struct-like interface") (implies . ()) (last-checked . 1632904617) (last-edit . 1594046663) (last-updated . 1610579062) (modules . ((lib "struct-like-struct-type-property/syntax-class.rkt") (lib "struct-like-struct-type-property/util/id-transformer.rkt") (lib "struct-like-struct-type-property/scribblings/struct-like-struct-type-property.scrbl") (lib "struct-like-struct-type-property/test/syntax-class.rkt") (lib "struct-like-struct-type-property/test/test-quadratic.rkt") (lib "struct-like-struct-type-property/util/fmt-id.rkt") (lib "struct-like-struct-type-property/generic-struct-type-property.rkt") (lib "struct-like-struct-type-property/main.rkt") (lib "struct-like-struct-type-property/test/test.rkt"))) (name . "struct-like-struct-type-property") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (author:iitalics@gmail.com . #t) (ring:1 . #t) (struct-type-property . #t) (structs . #t))) (source . "https://github.com/AlexKnauth/struct-like-struct-type-property.git#main") (tags . ("struct-type-property" "structs")) (versions . #hash((default . #hasheq((checksum . "c961dbd9a5741895e838558bf19233fd4142e4d6") (source . "https://github.com/AlexKnauth/struct-like-struct-type-property.git#main") (source_url . "https://github.com/AlexKnauth/struct-like-struct-type-property.git#main"))))))) ("struct-plus-plus" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "struct-plus-plus" "doc/struct-plus-plus@struct-plus-plus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-plus-plus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-plus-plus.txt"))) (checksum . "a7b62bf51214031a969e0503143f4ee64c9f6fe2") (checksum-error . #f) (collection . "struct-plus-plus") (conflicts . ()) (date-added . 1550364995) (dependencies . ("base" "handy" "syntax-classes-lib" "at-exp-lib" "racket-doc" "sandbox-lib" "scribble-lib")) (description . "Extended form of struct.  Generates keyword constructors, functional setters and updaters.  Allows per-field default values, contracts, wrapper functions, and declarative-syntax rules for interfield relations and transformations.") (implies . ()) (last-checked . 1632904617) (last-edit . 1550364995) (last-updated . 1595462339) (modules . ((lib "struct-plus-plus/scribblings/struct-plus-plus.scrbl") (lib "struct-plus-plus/tests/test_main.rkt") (lib "struct-plus-plus/reflection.rkt") (lib "struct-plus-plus/make_functional_setter.rkt") (lib "struct-plus-plus/main.rkt") (lib "struct-plus-plus/tests/test_make_functional_setter.rkt"))) (name . "struct-plus-plus") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david.storrs@gmail.com . #t) (ring:1 . #t) (struct . #t))) (source . "https://github.com/dstorrs/struct-plus-plus.git") (tags . ("struct")) (versions . #hash((default . #hasheq((checksum . "a7b62bf51214031a969e0503143f4ee64c9f6fe2") (source . "https://github.com/dstorrs/struct-plus-plus.git") (source_url . "https://github.com/dstorrs/struct-plus-plus.git"))))))) ("struct-set" . #hasheq((author . "camoy@ccs.neu.edu") (authors . ("camoy@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "a0dae7d2fd5e7e94930fb6acca134fe44154781f") (checksum-error . #f) (collection . "struct-set") (conflicts . ()) (date-added . 1629337011) (dependencies . ("syntax-classes-lib" "base" "chk-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Helpers for immutably updating structs.") (implies . ()) (last-checked . 1632904617) (last-edit . 1629337011) (last-updated . 1629337239) (modules . ((lib "struct-set/main.rkt") (lib "struct-set/scribblings/struct-set.scrbl"))) (name . "struct-set") (ring . 1) (search-terms . #hasheq((:no-tag: . #t) (author:camoy@ccs.neu.edu . #t) (ring:1 . #t))) (source . "https://github.com/camoy/struct-set.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a0dae7d2fd5e7e94930fb6acca134fe44154781f") (source . "https://github.com/camoy/struct-set.git") (source_url . "https://github.com/camoy/struct-set.git"))))))) ("struct-update" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-update.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-update.txt"))) (checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "struct-update-lib" "struct-update-doc")) (description . "") (implies . ("struct-update-lib" "struct-update-doc")) (last-checked . 1632904618) (last-edit . 1469648515) (last-updated . 1502816459) (modules . ()) (name . "struct-update") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/struct-update.git?path=struct-update") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (source . "git://github.com/lexi-lambda/struct-update.git?path=struct-update") (source_url . "http://github.com/lexi-lambda/struct-update.git/tree/master?path=struct-update"))))))) ("struct-update-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "struct-update" "doc/struct-update@struct-update-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-update-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-update-doc.txt"))) (checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "struct-update-lib")) (description . "documentation (no implementation) for “struct-update”") (implies . ()) (last-checked . 1632904618) (last-edit . 1469648494) (last-updated . 1502816459) (modules . ((lib "scribblings/struct-update.scrbl"))) (name . "struct-update-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/struct-update.git?path=struct-update-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (source . "git://github.com/lexi-lambda/struct-update.git?path=struct-update-doc") (source_url . "http://github.com/lexi-lambda/struct-update.git/tree/master?path=struct-update-doc"))))))) ("struct-update-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-update-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-update-lib.txt"))) (checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "syntax-classes-lib")) (description . "implementation (no documentation) for “struct-update”") (implies . ()) (last-checked . 1632904618) (last-edit . 1469648472) (last-updated . 1502816459) (modules . ((lib "struct-update/main.rkt"))) (name . "struct-update-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/struct-update.git?path=struct-update-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (source . "git://github.com/lexi-lambda/struct-update.git?path=struct-update-lib") (source_url . "http://github.com/lexi-lambda/struct-update.git/tree/master?path=struct-update-lib"))))))) ("struct-update-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/struct-update-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/struct-update-test.txt"))) (checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "rackunit-spec" "struct-update-lib")) (description . "") (implies . ()) (last-checked . 1632904618) (last-edit . 1469648507) (last-updated . 1502816459) (modules . ((lib "tests/struct-update.rkt") (lib "tests/struct-update-super.rkt"))) (name . "struct-update-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/struct-update.git?path=struct-update-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "8ce456cde8764ae27c348123ec9e01e76826d536") (source . "git://github.com/lexi-lambda/struct-update.git?path=struct-update-test") (source_url . "http://github.com/lexi-lambda/struct-update.git/tree/master?path=struct-update-test"))))))) ("stxparse-info" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "stxparse-info" "doc/stxparse-info@stxparse-info/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/stxparse-info.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/stxparse-info.txt"))) (checksum . "d35e84905fdbbef4309edca0a138cd77066be185") (checksum-error . #f) (collection . "stxparse-info") (conflicts . ()) (date-added . 1614799177) (dependencies . (("base" #:version "6.7.0.900") "rackunit-lib" "version-case" "subtemplate" "auto-syntax-e" "compatibility-lib" "scribble-lib" "racket-doc" "at-exp-lib")) (description . "Patched version of syntax/parse which tracks which syntax pattern variables are bound. Use (current-pvars) to access that list.") (implies . ()) (last-checked . 1632904619) (last-edit . 1617512996) (last-updated . 1617542200) (modules . ((lib "stxparse-info/parse/experimental/private/substitute.rkt") (lib "stxparse-info/parse/private/residual.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/experimental/specialize.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/experimental/eh.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/sc.rkt") (lib "stxparse-info/6-12/racket/collects/racket/syntax.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/define.rkt") (lib "stxparse-info/parse/private/runtime-report.rkt") (lib "stxparse-info/parse/private/txlift.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/experimental/private/substitute.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/debug.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/parse.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/lib.rkt") (lib "stxparse-info/my-include.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/experimental/eh.rkt") (lib "stxparse-info/test/test-expansion-order.rkt") (lib "stxparse-info/parse/private/runtime-reflect.rkt") (lib "stxparse-info/6-11/racket/collects/racket/private/stxcase.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/3d-stx.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/txlift.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/experimental/provide.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/runtime-report.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/make.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/txlift.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/lib/function-header.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/experimental/specialize.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/runtime-progress.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/experimental/private/substitute.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/debug.rkt") (lib "stxparse-info/parse/experimental/specialize.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/pre.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/lib/function-header.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/lib.rkt") (lib "stxparse-info/case/stxcase.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/debug.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/experimental/contract.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/sc.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/parse.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/experimental/provide.rkt") (lib "stxparse-info/main.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/experimental/template.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/experimental/contract.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/lib.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/txlift.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/lib/function-header.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/sc.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/opt.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/define.rkt") (lib "stxparse-info/parse/define.rkt") (lib "stxparse-info/scribblings/ovl.rkt") (lib "stxparse-info/7-4/stxparse-info.scrbl") (lib "stxparse-info/6-11/racket/collects/syntax/parse/experimental/contract.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/experimental/eh.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/experimental/private/substitute.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/experimental/template.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/experimental/private/substitute.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/experimental/reflect.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/experimental/eh.rkt") (lib "stxparse-info/8-0/racket/collects/racket/private/template.rkt") (lib "stxparse-info/case/syntax.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/racket/private/template.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/rep.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/experimental/dset.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse.rkt") (lib "stxparse-info/parse/private/runtime-progress.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/runtime-reflect.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/experimental/private/substitute.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/racket/private/with-stx.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/experimental/splicing.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/runtime-progress.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/experimental/private/substitute.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/debug.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/racket/private/stxloc.rkt") (lib "stxparse-info/6-12/racket/collects/racket/private/template.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/experimental/contract.rkt") (lib "stxparse-info/6-90-0-29/stxparse-info.scrbl") (lib "stxparse-info/parse/experimental/provide.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/racket/private/stxloc.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/define.rkt") (lib "stxparse-info/case.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/rep.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/runtime-progress.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/experimental/eh.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/make.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/lib/function-header.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/rep.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/residual.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/parse-aux.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/define.rkt") (lib "stxparse-info/parse/pre.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/parse-aux.rkt") (lib "stxparse-info/7-0-0-20/stxparse-info.scrbl") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/experimental/template.rkt") (lib "stxparse-info/parse/experimental/template.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/parse.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/experimental/splicing.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse.rkt") (lib "stxparse-info/scribblings/stxparse-info.scrbl") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/3d-stx.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/txlift.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/racket/private/stxcase.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/runtime-report.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/parse.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/runtime-report.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/sc.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/runtime.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/parse-aux.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/racket/private/with-stx.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/runtime-reflect.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/experimental/contract.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/runtime-progress.rkt") (lib "stxparse-info/8-0/racket/collects/racket/private/with-stx.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/experimental/dset.rkt") (lib "stxparse-info/case/with-stx.rkt") (lib "stxparse-info/parse/private/runtime.rkt") (lib "stxparse-info/6-12/racket/collects/racket/private/stxcase-scheme.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/parse.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/experimental/reflect.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/racket/syntax.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/rep.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/experimental/template.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/runtime.rkt") (lib "stxparse-info/case/stxloc.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/sc.rkt") (lib "stxparse-info/parse/private/parse-aux.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/runtime.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/litconv.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/define.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/define.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/experimental/dset.rkt") (lib "stxparse-info/case/template.rkt") (lib "stxparse-info/current-pvars.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/experimental/reflect.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/runtime.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/runtime.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/make.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/experimental/eh.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/make.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/litconv.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/sc.rkt") (lib "stxparse-info/6-11/racket/collects/racket/private/stxcase-scheme.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/racket/syntax.rkt") (lib "stxparse-info/6-11/racket/collects/racket/private/template.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/lib/function-header.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/experimental/reflect.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/runtime-progress.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/runtime-reflect.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/residual.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/experimental/specialize.rkt") (lib "stxparse-info/parse/private/litconv.rkt") (lib "stxparse-info/6-11/racket/collects/racket/syntax.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/opt.rkt") (lib "stxparse-info/6-11/stxparse-info.scrbl") (lib "stxparse-info/6-12/stxparse-info.scrbl") (lib "stxparse-info/test/test-check-variable-visible.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/experimental/provide.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/experimental/dset.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/parse-aux.rkt") (lib "stxparse-info/parse/private/sc.rkt") (lib "stxparse-info/6-11/racket/collects/racket/private/with-stx.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/residual.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/3d-stx.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/runtime-reflect.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/experimental/eh.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/opt.rkt") (lib "stxparse-info/7-4/racket/collects/racket/private/with-stx.rkt") (lib "stxparse-info/8-0/stxparse-info.scrbl") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/lib.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/runtime-reflect.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/make.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/experimental/dset.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/opt.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/experimental/specialize.rkt") (lib "stxparse-info/parse/experimental/dset.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/racket/private/stxcase-scheme.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/debug.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/make.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/experimental/reflect.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/experimental/provide.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/make.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/runtime-progress.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/experimental/splicing.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/racket/private/stxcase.rkt") (lib "stxparse-info/parse/experimental/splicing.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/experimental/private/substitute.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/pre.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/experimental/provide.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/experimental/provide.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/experimental/splicing.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/racket/private/stxcase-scheme.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/residual.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/residual.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/parse-aux.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/residual.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/racket/private/stxcase-scheme.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/litconv.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/racket/private/template.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/litconv.rkt") (lib "stxparse-info/test/test-compatibility2.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/runtime.rkt") (lib "stxparse-info/6-12/racket/collects/racket/private/stxloc.rkt") (lib "stxparse-info/parse.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/3d-stx.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/txlift.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/3d-stx.rkt") (lib "stxparse-info/7-3-0-1/stxparse-info.scrbl") (lib "stxparse-info/7-3-0-1/racket/collects/racket/private/with-stx.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/runtime-reflect.rkt") (lib "stxparse-info/test/test-compatibility1.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/runtime-report.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/lib/function-header.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/experimental/splicing.rkt") (lib "stxparse-info/8-0/racket/collects/racket/private/stxcase.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/rep.rkt") (lib "stxparse-info/7-4/racket/collects/racket/syntax.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/experimental/splicing.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/experimental/specialize.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/racket/syntax.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/rep.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/debug.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/lib.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/racket/private/stxcase.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/pre.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/litconv.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/racket/private/stxloc.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/experimental/reflect.rkt") (lib "stxparse-info/7-4/racket/collects/racket/private/stxcase.rkt") (lib "stxparse-info/parse/private/rep.rkt") (lib "stxparse-info/7-4/racket/collects/racket/private/template.rkt") (lib "stxparse-info/parse/private/make.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/pre.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/opt.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/parse.rkt") (lib "stxparse-info/6-11/racket/collects/racket/private/stxloc.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/experimental/splicing.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/runtime.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/opt.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/residual.rkt") (lib "stxparse-info/test/test-8-0.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/3d-stx.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/define.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/experimental/template.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/experimental/template.rkt") (lib "stxparse-info/7-4/racket/collects/racket/private/stxloc.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/experimental/reflect.rkt") (lib "stxparse-info/parse/debug.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/experimental/contract.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/runtime-reflect.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/pre.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/racket/private/template.rkt") (lib "stxparse-info/parse/lib/function-header.rkt") (lib "stxparse-info/parse/private/parse.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/parse-aux.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/parse-aux.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/txlift.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/rep.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/opt.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/private/runtime-report.rkt") (lib "stxparse-info/7-4/racket/collects/racket/private/stxcase-scheme.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/experimental/specialize.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/debug.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/txlift.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/private/lib.rkt") (lib "stxparse-info/parse/experimental/eh.rkt") (lib "stxparse-info/8-0/racket/collects/racket/private/stxloc.rkt") (lib "stxparse-info/test/test-current-pvars.rkt") (lib "stxparse-info/parse/private/3d-stx.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/pre.rkt") (lib "stxparse-info/parse/experimental/reflect.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/runtime-progress.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/parse.rkt") (lib "stxparse-info/parse/private/lib.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/3d-stx.rkt") (lib "stxparse-info/case/stxcase-scheme.rkt") (lib "stxparse-info/7-4/racket/collects/syntax/parse/experimental/dset.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/private/runtime-report.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/experimental/contract.rkt") (lib "stxparse-info/8-0/racket/collects/racket/private/stxcase-scheme.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/experimental/template.rkt") (lib "stxparse-info/parse/private/opt.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/runtime-report.rkt") (lib "stxparse-info/8-0/racket/collects/syntax/parse/experimental/dset.rkt") (lib "stxparse-info/6-12/racket/collects/racket/private/with-stx.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/pre.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/private/litconv.rkt") (lib "stxparse-info/7-0-0-20/racket/collects/syntax/parse/private/sc.rkt") (lib "stxparse-info/7-3-0-1/racket/collects/syntax/parse/private/litconv.rkt") (lib "stxparse-info/8-0/racket/collects/racket/syntax.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/lib/function-header.rkt") (lib "stxparse-info/6-11/racket/collects/syntax/parse/experimental/specialize.rkt") (lib "stxparse-info/6-12/racket/collects/syntax/parse/experimental/provide.rkt") (lib "stxparse-info/6-12/racket/collects/racket/private/stxcase.rkt") (lib "stxparse-info/parse/experimental/contract.rkt") (lib "stxparse-info/6-90-0-29/racket/collects/syntax/parse/private/lib.rkt"))) (name . "stxparse-info") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (ring:1 . #t) (syntax . #t) (syntax-parse . #t))) (source . "https://github.com/jsmaniac/stxparse-info.git#main") (tags . ("syntax" "syntax-parse")) (versions . #hash((default . #hasheq((checksum . "d35e84905fdbbef4309edca0a138cd77066be185") (source . "https://github.com/jsmaniac/stxparse-info.git#main") (source_url . "https://github.com/jsmaniac/stxparse-info.git#main"))))))) ("subtemplate" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "subtemplate" "doc/subtemplate@subtemplate/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/subtemplate.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/subtemplate.txt"))) (checksum . "a3292113bb0d7dd8dc2114702b90e76f23963496") (checksum-error . #f) (collection . "subtemplate") (conflicts . ()) (date-added . 1614799545) (dependencies . ("base" "rackunit-lib" "backport-template-pr1514" "phc-toolkit" "srfi-lite-lib" "stxparse-info" "alexis-util" "scope-operations" "auto-syntax-e" "version-case" "scribble-lib" "racket-doc" "scribble-math")) (description . "Experimental. In a syntax template, auto-generate yᵢ … from xᵢ … . Also includes several improvements, like ellipses outside of syntax templates, and ellipsis-preserving unsyntax.") (implies . ()) (last-checked . 1632904619) (last-edit . 1614889550) (last-updated . 1556784442) (modules . ((lib "subtemplate/test/test-ddd-forms.rkt") (lib "subtemplate/test/test-ddd-top.rkt") (lib "subtemplate/scribblings/orig.rkt") (lib "subtemplate/private/override.rkt") (lib "subtemplate/private/patch-arrows.rkt") (lib "subtemplate/test/assumption-local-expand-reuse-let-bound-id.rkt") (lib "subtemplate/test/test-ddd.rkt") (lib "subtemplate/scribblings/subtemplate.scrbl") (lib "subtemplate/private/top-subscripts.rkt") (lib "subtemplate/scribblings/examples.scrbl") (lib "subtemplate/test/test-performance.rkt") (lib "subtemplate/test/test-use-before-definition.rkt") (lib "subtemplate/private/cross-phase-splicing-list.rkt") (lib "subtemplate/test/test-optional.rkt") (lib "subtemplate/private/subscripts.rkt") (lib "subtemplate/private/optcontract.rkt") (lib "subtemplate/test/assumption-free-identifier-equal.rkt") (lib "subtemplate/private/copy-attribute.rkt") (lib "subtemplate/test/test-splice.rkt") (lib "subtemplate/test/test-subtemplate.rkt") (lib "subtemplate/test/test-subtemplate-detect-stxinfo.rkt") (lib "subtemplate/test/test-splice-append.rkt") (lib "subtemplate/test/assumption-weak-hash.rkt") (lib "subtemplate/private/template-subscripts.rkt") (lib "subtemplate/test/test-copy-attribute-template-problem.rkt") (lib "subtemplate/test/test-copy-attribute.rkt") (lib "subtemplate/private/fully-expanded-grammar.rkt") (lib "subtemplate/test/test-missing-nested.rkt") (lib "subtemplate/private/unsyntax-preparse.rkt") (lib "subtemplate/override.rkt") (lib "subtemplate/test/test-or-syntax.rkt") (lib "subtemplate/test/bug-5.rkt") (lib "subtemplate/test/test-syntax-case-as-syntax-parse.rkt") (lib "subtemplate/private/ddd.rkt") (lib "subtemplate/private/find-defined-pvars.rkt") (lib "subtemplate/private/lifted-variables-communication.rkt") (lib "subtemplate/light.rkt") (lib "subtemplate/scribblings/light.scrbl") (lib "subtemplate/test/test-or.rkt") (lib "subtemplate/private/ddd-forms.rkt") (lib "subtemplate/test/test-unsyntax2.rkt") (lib "subtemplate/main.rkt") (lib "subtemplate/private/fully-expanded-grammar-extract-bindings.rkt") (lib "subtemplate/test/test-unsyntax.rkt") (lib "subtemplate/private/syntax-case-as-syntax-parse.rkt"))) (name . "subtemplate") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (experimental . #t) (ring:1 . #t) (syntax . #t) (syntax-parse . #t) (template . #t))) (source . "https://github.com/jsmaniac/subtemplate.git#main") (tags . ("experimental" "syntax" "syntax-parse" "template")) (versions . #hash((default . #hasheq((checksum . "a3292113bb0d7dd8dc2114702b90e76f23963496") (source . "https://github.com/jsmaniac/subtemplate.git#main") (source_url . "https://github.com/jsmaniac/subtemplate.git#main"))))))) ("sudo" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sudo" "doc/sudo@sudo/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sudo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sudo.txt"))) (checksum . "b0fdd9113b261b7e117773be749e9c198f12f47d") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib" "overeasy")) (description . "Sudo Command Processes") (implies . ()) (last-checked . 1632904619) (last-edit . 1456469637) (last-updated . 1502816460) (modules . ((lib "sudo/sudo.scrbl") (lib "sudo/main.rkt"))) (name . "sudo") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t))) (source . "http://www.neilvandyke.org/racket/sudo.zip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b0fdd9113b261b7e117773be749e9c198f12f47d") (source . "http://www.neilvandyke.org/racket/sudo.zip") (source_url . "http://www.neilvandyke.org/racket/sudo.zip"))))))) ("sudoku-solver" . #hasheq((author . "sschwarzer@sschwarzer.net") (authors . ("sschwarzer@sschwarzer.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sudoku-solver.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sudoku-solver.txt"))) (checksum . "bac722fc3de3f6b434c36587fd60d46162e95191") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1623144036) (dependencies . ("base" "data-lib" "racket-doc" "rackunit-lib")) (description . "Sudoku solver that can also show the solution process as a GraphViz dot file") (implies . ()) (last-checked . 1632904620) (last-edit . 1623419953) (last-updated . 1623411378) (modules . ((lib "games/sudoku-solver/progress-data.rkt") (lib "games/sudoku-solver/graph.rkt") (lib "games/sudoku-solver.rkt") (lib "games/sudoku-solver/benchmark.rkt") (lib "games/sudoku-solver/solver.rkt"))) (name . "sudoku-solver") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (GraphViz . #t) (Sudoku . #t) (author:sschwarzer@sschwarzer.net . #t) (games . #t) (ring:1 . #t))) (source . "git+https://git.sr.ht/~sschwarzer/sudoku-solver#v0.12.0") (tags . ("games" "GraphViz" "Sudoku")) (versions . #hash((default . #hasheq((checksum . "bac722fc3de3f6b434c36587fd60d46162e95191") (source . "git+https://git.sr.ht/~sschwarzer/sudoku-solver#v0.12.0") (source_url . "git+https://git.sr.ht/~sschwarzer/sudoku-solver#v0.12.0"))))))) ("suffixtree" . #hasheq((author . "clements@racket-lang.org dyoo@hashcollision.org") (authors . ("clements@racket-lang.org" "dyoo@hashcollision.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "suffixtree" "doc/suffixtree@suffixtree/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/suffixtree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/suffixtree.txt"))) (checksum . "246b111906cae2718bc6452fa306680e00b03c41") (checksum-error . #f) (collection . "suffixtree") (conflicts . ()) (date-added . 1576695130) (dependencies . ("base" "plot-gui-lib" "plot-lib" "profile-lib" "rackunit-lib" "srfi-lite-lib" "racket-doc" "sandbox-lib" "scribble-lib")) (description . "An implementation of Suffix Trees using Ukkonen's algorithm") (implies . ()) (last-checked . 1632904621) (last-edit . 1576695130) (last-updated . 1576695130) (modules . ((lib "suffixtree/private/test-label.rkt") (lib "suffixtree/private/test-broken.rkt") (lib "suffixtree/longest-common-substring.rkt") (lib "suffixtree/private/label.rkt") (lib "suffixtree/test-suffixtree.rkt") (lib "suffixtree/suffixtree.scrbl") (lib "suffixtree/private/time-tree-building.rkt") (lib "suffixtree/util.rkt") (lib "suffixtree/test-util.rkt") (lib "suffixtree/private/plot-data.rkt") (lib "suffixtree/private/test-all.rkt") (lib "suffixtree/private/structs.rkt") (lib "suffixtree/private/test-common-definitions.rkt") (lib "suffixtree/private/ukkonen2.rkt") (lib "suffixtree/private/debug.rkt") (lib "suffixtree/private/test-ukkonen2.rkt") (lib "suffixtree/main.rkt") (lib "suffixtree/test-longest-common-substring.rkt") (lib "suffixtree/test-all.rkt") (lib "suffixtree/suffixtree.rkt"))) (name . "suffixtree") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (author:dyoo@hashcollision.org . #t) (data . #t) (ring:1 . #t))) (source . "https://github.com/jbclements/suffixtree.git") (tags . ("data")) (versions . #hash((default . #hasheq((checksum . "246b111906cae2718bc6452fa306680e00b03c41") (source . "https://github.com/jbclements/suffixtree.git") (source_url . "https://github.com/jbclements/suffixtree.git"))))))) ("sugar" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sugar" "doc/sugar@sugar/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sugar.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sugar.txt"))) (checksum . "c90834b77afad07f9b02986fc8e157ccf30b753c") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661471) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "shortcuts for simplicity & readability") (implies . ()) (last-checked . 1632904621) (last-edit . 1556661471) (last-updated . 1621362823) (modules . ((lib "sugar/coerce/contract.rkt") (lib "sugar/scribblings/include.scrbl") (lib "sugar/coerce/base.rkt") (lib "sugar/unstable/string.rkt") (lib "sugar/xml.rkt") (lib "sugar/unstable/dict.rkt") (lib "sugar/define.rkt") (lib "sugar/unstable/contract.rkt") (lib "sugar/debug.rkt") (lib "sugar/scribblings/debug.scrbl") (lib "sugar/scribblings/string.scrbl") (lib "sugar/file.rkt") (lib "sugar/unstable/include.rkt") (lib "sugar/unstable/class.rkt") (lib "sugar/unstable/port.rkt") (lib "sugar/test.rkt") (lib "sugar/coerce.rkt") (lib "sugar/scribblings/xml.scrbl") (lib "sugar/unstable/js.rkt") (lib "sugar/scribblings/installation.scrbl") (lib "sugar/main.rkt") (lib "sugar/unstable/misc.rkt") (lib "sugar/cache.rkt") (lib "sugar/test/debug-meta-lang.rkt") (lib "sugar/scribblings/license.scrbl") (lib "sugar/scribblings/sugar.scrbl") (lib "sugar/scribblings/len.scrbl") (lib "sugar/list.rkt") (lib "sugar/test/test-require-modes.rkt") (lib "sugar/unstable/stub.rkt") (lib "sugar/unstable/source.rkt") (lib "sugar/test/main.rkt") (lib "sugar/unstable/container.rkt") (lib "sugar/private/syntax-utils.rkt") (lib "sugar/scribblings/coerce.scrbl") (lib "sugar/unstable/case.rkt") (lib "sugar/unstable/len.rkt") (lib "sugar/scribblings/list.scrbl") (lib "sugar/scribblings/file-extensions.scrbl") (lib "sugar/scribblings/cache.scrbl") (lib "sugar/scribblings/container.scrbl"))) (name . "sugar") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t) (sweet . #t))) (source . "https://github.com/mbutterick/sugar.git") (tags . ("sweet")) (versions . #hash((default . #hasheq((checksum . "c90834b77afad07f9b02986fc8e157ccf30b753c") (source . "https://github.com/mbutterick/sugar.git") (source_url . "https://github.com/mbutterick/sugar.git"))))))) ("superc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "superc" "doc/superc@superc/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/superc.txt") (success-log . "server/built/install/superc.txt") (test-failure-log . "server/built/test-fail/superc.txt") (test-success-log . #f))) (checksum . "929d3e32db7a5c69fa9e033db7b5707cff329672") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("at-exp-lib" "base" "scribble-text-lib" "scheme-lib" "racket-doc" "scribble-lib")) (description . "A language for writing C with Racket macros and an easy interface to Racket") (implies . ()) (last-checked . 1632904621) (last-edit . 1353686056) (last-updated . 1502816461) (modules . ((lib "tests/superc/hello.rkt") (lib "superc/lang.rkt") (lib "superc/lang-api.rkt") (lib "tests/superc/bdb.rkt") (lib "tests/superc/math.rkt") (lib "superc/scribblings/superc.scrbl") (lib "superc/lang/reader.rkt") (lib "superc/c-loader.rkt"))) (name . "superc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (ffi . #t) (language . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/superc/master") (tags . ("ffi" "language")) (versions . #hash((default . #hasheq((checksum . "929d3e32db7a5c69fa9e033db7b5707cff329672") (source . "github://github.com/jeapostrophe/superc/master") (source_url . "http://github.com/jeapostrophe/superc/tree/master"))))))) ("superv" . #hasheq((author . "steven.leibrock@gmail.com") (authors . ("steven.leibrock@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "superv" "doc/superv@superv/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/superv.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/superv.txt"))) (checksum . "23a7132484f293c3ca407db5b3e86a9e0a7a9708") (checksum-error . #f) (collection . "superv") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Supervise your subprocesses with Racket") (implies . ()) (last-checked . 1632904622) (last-edit . 1490382344) (last-updated . 1502816461) (modules . ((lib "superv/supervisor/program.rkt") (lib "superv/supervisor/superv.rkt") (lib "superv/supervisor/data.rkt") (lib "superv/supervisor/main.rkt") (lib "superv/scribblings/superv.scrbl") (lib "superv/supervisor/config.rkt") (lib "superv/supervisor/subprocess.rkt"))) (name . "superv") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:steven.leibrock@gmail.com . #t) (ring:1 . #t) (supervisor . #t))) (source . "git://github.com/sleibrock/superv.git") (tags . ("supervisor")) (versions . #hash((default . #hasheq((checksum . "23a7132484f293c3ca407db5b3e86a9e0a7a9708") (source . "git://github.com/sleibrock/superv.git") (source_url . "http://github.com/sleibrock/superv.git/tree/master"))))))) ("survival" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/survival.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1548275079) (dependencies . ("https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-kata-util" "https://github.com/thoughtstem/game-engine.git" "https://github.com/thoughtstem/game-engine-demos.git?path=game-engine-demos-common")) (description . "Teaching language for making survival-style games  ") (implies . ()) (last-checked . 1632904623) (last-edit . 1548276835) (last-updated . 1580771414) (modules . ((lib "survival/scribblings/assets-library.rkt") (lib "survival/lang.rkt") (lib "survival/lang/main.rkt") (lib "survival/examples.rkt") (lib "survival/scribblings/manual.scrbl") (lib "survival/main.rkt"))) (name . "survival") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:stephen@thoughtstem.com . #t) (education . #t) (games . #t) (ring:1 . #t) (teaching . #t))) (source . "https://github.com/thoughtstem/TS-Languages.git?path=survival") (tags . ("education" "games" "teaching")) (versions . #hash((default . #hasheq((checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (source . "https://github.com/thoughtstem/TS-Languages.git?path=survival") (source_url . "https://github.com/thoughtstem/TS-Languages.git?path=survival"))))))) ("survival-minecraft" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/survival-minecraft.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1551723178) (dependencies . ("https://github.com/thoughtstem/TS-GE-Katas.git?path=ts-kata-util" "https://github.com/thoughtstem/TS-GE-Languages.git?path=survival" "https://github.com/thoughtstem/fandom-sprites-ge.git")) (description . "Teaching language. Specialized look-and-feel for survival games.") (implies . ()) (last-checked . 1632904624) (last-edit . 1551723178) (last-updated . 1580771415) (modules . ((lib "survival-minecraft/scribblings/assets-library.rkt") (lib "survival-minecraft/main.rkt") (lib "survival-minecraft/examples.rkt") (lib "survival-minecraft/lang/main.rkt") (lib "survival-minecraft/scribblings/manual.scrbl") (lib "survival-minecraft/lang.rkt"))) (name . "survival-minecraft") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/TS-Languages.git?path=survival-minecraft") (tags . ()) (versions . #hash((default . #hasheq((checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (source . "https://github.com/thoughtstem/TS-Languages.git?path=survival-minecraft") (source_url . "https://github.com/thoughtstem/TS-Languages.git?path=survival-minecraft"))))))) ("survival-pokemon" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/survival-pokemon.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1551723229) (dependencies . ("https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-kata-util" "https://github.com/thoughtstem/TS-GE-Languages.git?path=survival" "https://github.com/thoughtstem/fandom-sprites-ge.git")) (description . "Teaching language. Specialized look-and-feel for survival games.") (implies . ()) (last-checked . 1632904625) (last-edit . 1551723229) (last-updated . 1580771416) (modules . ((lib "survival-pokemon/scribblings/assets-library.rkt") (lib "survival-pokemon/lang.rkt") (lib "survival-pokemon/main.rkt") (lib "survival-pokemon/examples.rkt") (lib "survival-pokemon/scribblings/manual.scrbl") (lib "survival-pokemon/lang/main.rkt"))) (name . "survival-pokemon") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/TS-Languages.git?path=survival-pokemon") (tags . ()) (versions . #hash((default . #hasheq((checksum . "49a8ad283230e5bcc38d583056271876c5d6556e") (source . "https://github.com/thoughtstem/TS-Languages.git?path=survival-pokemon") (source_url . "https://github.com/thoughtstem/TS-Languages.git?path=survival-pokemon"))))))) ("svea" . #hasheq((author . "sam@lenary.co.uk") (authors . ("sam@lenary.co.uk")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/svea.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/lenary/svea.git\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (description . "") (implies . ()) (last-checked . 1632904626) (last-edit . 1524249315) (last-updated . 1621810067) (modules . ()) (name . "svea") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:sam@lenary.co.uk . #t) (ring:1 . #t))) (source . "https://github.com/lenary/svea.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "https://github.com/lenary/svea.git") (source_url . "https://github.com/lenary/svea.git"))))))) ("sweet-exp" . #hasheq((author . "asumu@ccs.neu.edu alexander@knauth.org") (authors . ("asumu@ccs.neu.edu" "alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sweet" "doc/sweet@sweet-exp/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sweet-exp.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sweet-exp.txt"))) (checksum . "a3c1ae74c2e75e8d6164a3a9d8eb34335a7ba4de") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "sweet-exp-lib" "sweet-exp-test" "scribble-lib" "racket-doc" "scribble-doc" "lazy")) (description . "Sweet expressions: an alternative to s-expressions") (implies . ("sweet-exp-lib" "sweet-exp-test")) (last-checked . 1632904626) (last-edit . 1469717633) (last-updated . 1533332760) (modules . ((lib "sweet-exp/sweet.scrbl"))) (name . "sweet-exp") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/takikawa/sweet-racket?path=sweet-exp") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "a3c1ae74c2e75e8d6164a3a9d8eb34335a7ba4de") (source . "git://github.com/takikawa/sweet-racket?path=sweet-exp") (source_url . "http://github.com/takikawa/sweet-racket/tree/master?path=sweet-exp"))))))) ("sweet-exp-lib" . #hasheq((author . "alexander@knauth.org asumu@ccs.neu.edu") (authors . ("alexander@knauth.org" "asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sweet-exp-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sweet-exp-lib.txt"))) (checksum . "a3c1ae74c2e75e8d6164a3a9d8eb34335a7ba4de") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Implementation part of sweet-exp") (implies . ()) (last-checked . 1632904626) (last-edit . 1469717779) (last-updated . 1533332760) (modules . ((lib "sweet-exp/main.rkt") (lib "sweet-exp/util.rkt") (lib "sweet-exp/sugar.rkt") (lib "sweet-exp/racket/init.rkt") (lib "sweet-exp/modern/process-curly.rkt") (lib "sweet-exp/modern.rkt") (lib "sweet-exp/read-sig.rkt") (lib "sweet-exp/sweet.rkt") (lib "sweet-exp/indent.rkt"))) (name . "sweet-exp-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/takikawa/sweet-racket?path=sweet-exp-lib") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "a3c1ae74c2e75e8d6164a3a9d8eb34335a7ba4de") (source . "git://github.com/takikawa/sweet-racket?path=sweet-exp-lib") (source_url . "http://github.com/takikawa/sweet-racket/tree/master?path=sweet-exp-lib"))))))) ("sweet-exp-test" . #hasheq((author . "alexander@knauth.org asumu@ccs.neu.edu") (authors . ("alexander@knauth.org" "asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sweet-exp-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sweet-exp-test.txt"))) (checksum . "a3c1ae74c2e75e8d6164a3a9d8eb34335a7ba4de") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "sweet-exp-lib" "rackunit-lib" "lazy" "typed-racket-lib")) (description . "Tests for sweet-exp") (implies . ()) (last-checked . 1632904627) (last-edit . 1469718032) (last-updated . 1533332760) (modules . ((lib "sweet-exp/tests/rest-arg.rkt") (lib "sweet-exp/tests/whitespace.rkt") (lib "sweet-exp/tests/srcloc.rkt") (lib "sweet-exp/tests/kw.rkt") (lib "sweet-exp/tests/typed.rkt") (lib "sweet-exp/tests/bad-close-error.rkt") (lib "sweet-exp/tests/modern.rkt") (lib "sweet-exp/tests/sweet.rkt") (lib "sweet-exp/tests/strip-context/use-m.rkt") (lib "sweet-exp/tests/srcloc-helper.rkt") (lib "sweet-exp/tests/2htdp.rkt") (lib "sweet-exp/tests/strip-context/m.rkt") (lib "sweet-exp/tests/return.rkt") (lib "sweet-exp/tests/typed2.rkt") (lib "sweet-exp/tests/sweet-test-run.rkt") (lib "sweet-exp/tests/335.rkt") (lib "sweet-exp/tests/hash.rkt") (lib "sweet-exp/tests/lazy.rkt") (lib "sweet-exp/tests/fib.rkt") (lib "sweet-exp/run-tests.rkt") (lib "sweet-exp/tests/define-syntax-rule.rkt") (lib "sweet-exp/tests/paren-shape.rkt") (lib "sweet-exp/tests/case-lambda.rkt"))) (name . "sweet-exp-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/takikawa/sweet-racket?path=sweet-exp-test") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "a3c1ae74c2e75e8d6164a3a9d8eb34335a7ba4de") (source . "git://github.com/takikawa/sweet-racket?path=sweet-exp-test") (source_url . "http://github.com/takikawa/sweet-racket/tree/master?path=sweet-exp-test"))))))) ("swindle" . #hash((author . "eli@racket-lang.org") (authors . ("eli@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "swindle" "doc/swindle@swindle/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "swindle") (conflicts . ()) (dependencies . ("scheme-lib" "base" "compatibility-lib" "drracket-plugin-lib" "gui-lib" "net-lib" "string-constants-lib" "compatibility-doc" "racket-doc" "scribble-lib")) (description . "The implementation of the Swindle language") (implies . ()) (last-checked . 1632904627) (last-edit . 1417723029) (last-updated . 1571887355) (modules . ((lib "swindle/tool.rkt") (lib "swindle/patterns.rkt") (lib "swindle/lang/reader.rkt") (lib "swindle/swindle.scrbl") (lib "swindle/base.rkt") (lib "swindle/setf.rkt") (lib "swindle/clos.rkt") (lib "swindle/tiny-clos.rkt") (lib "swindle/main.rkt") (lib "swindle/turbo.rkt") (lib "swindle/extra.rkt") (lib "swindle/custom.rkt") (lib "swindle/misc.rkt"))) (name . "swindle") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:eli@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "122e38efb9842394ef6462053991efb4bd0edf3b") (source . "git://github.com/racket/swindle") (source_url . "http://github.com/racket/swindle/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("sxml" . #hasheq((author . "clements@brinckerhoff.org") (authors . ("clements@brinckerhoff.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sxml" "doc/sxml@sxml/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sxml.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sxml.txt"))) (checksum . "d3b8570cf7287c4e06636e17634f0f5c39203d52") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "srfi-lib" "racket-doc" "scribble-lib")) (description . "SXML family of tools (including SXPath)") (implies . ()) (last-checked . 1632904627) (last-edit . 1356565820) (last-updated . 1613673578) (modules . ((lib "sxml/txpath.rkt") (lib "sxml/ssax/parse-error.rkt") (lib "sxml/ssax/ssax-prim.rkt") (lib "sxml/ssax/ssax.rkt") (lib "sxml/ssax/util.rkt") (lib "sxml/tests/vSXML-tree-trans.rkt") (lib "sxml/sxml-tools.rkt") (lib "sxml/scribblings/serialization.scrbl") (lib "sxml/ssax/sxpathlib.rkt") (lib "sxml/scribblings/sxpath.scrbl") (lib "sxml/xpath-context_xlink.rkt") (lib "sxml/ssax/multi-parser.rkt") (lib "sxml/ssax/xlink-parser.rkt") (lib "sxml/scribblings/sxml.scrbl") (lib "sxml/ssax/myenv.rkt") (lib "sxml/scribblings/sxslt.scrbl") (lib "sxml/serializer.rkt") (lib "sxml/scribblings/extracted-sperber.scrbl") (lib "sxml/lazy-xpath.rkt") (lib "sxml/lazy-ssax.rkt") (lib "sxml/xpath-parser.rkt") (lib "sxml/ssax/SSAX-code.rkt") (lib "sxml/sxpath.rkt") (lib "sxml/xpath-ast.rkt") (lib "sxml/tests/tests.rkt") (lib "sxml/scribblings/extract-provides.rkt") (lib "sxml/ssax/errors-and-warnings.rkt") (lib "sxml/scribblings/sxml-rep.scrbl") (lib "sxml/tests/ssax-tests.rkt") (lib "sxml/ssax/input-parse.rkt") (lib "sxml/tests/vSXML-to-HTML.rkt") (lib "sxml/ssax/SXML-tree-trans.rkt") (lib "sxml/scribblings/util.rkt") (lib "sxml/ssax/access-remote.rkt") (lib "sxml/main.rkt") (lib "sxml/ddo-txpath.rkt") (lib "sxml/scribblings/sax-parsing.scrbl") (lib "sxml/sxpath-ext.rkt") (lib "sxml/ssax/id.rkt") (lib "sxml/scribblings/all-exported.scrbl") (lib "sxml/ddo-axes.rkt") (lib "sxml/modif.rkt"))) (name . "sxml") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@brinckerhoff.org . #t) (ring:1 . #t) (sxml . #t) (web . #t) (xml . #t))) (source . "github://github.com/jbclements/sxml/master") (tags . ("sxml" "web" "xml")) (versions . #hash((default . #hasheq((checksum . "d3b8570cf7287c4e06636e17634f0f5c39203d52") (source . "github://github.com/jbclements/sxml/master") (source_url . "http://github.com/jbclements/sxml/tree/master"))))))) ("sxml-intro" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "sxml-intro" "doc/sxml-intro@sxml-intro/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sxml-intro.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sxml-intro.txt"))) (checksum . "30ad0479d1b757f7996b3c71101a3cda7860a953") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1624132792) (dependencies . ("base" "scribble-lib")) (description . "SXML in Racket: Tools for XML and HTML") (implies . ()) (last-checked . 1632904627) (last-edit . 1624133074) (last-updated . 1625380608) (modules . ((lib "sxml-intro/sxml-intro.scrbl"))) (name . "sxml-intro") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (html . #t) (ring:1 . #t) (sxml . #t) (web . #t) (xml . #t))) (source . "http://www.neilvandyke.org/racket/sxml-intro.zip") (tags . ("html" "sxml" "web" "xml")) (versions . #hash((default . #hasheq((checksum . "30ad0479d1b757f7996b3c71101a3cda7860a953") (source . "http://www.neilvandyke.org/racket/sxml-intro.zip") (source_url . "http://www.neilvandyke.org/racket/sxml-intro.zip"))))))) ("symalg" . #hasheq((author . "johannes@johannes.tax") (authors . ("johannes@johannes.tax")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "symalg" "doc/symalg@symalg/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/symalg.txt") (test-failure-log . "server/built/test-fail/symalg.txt") (test-success-log . #f))) (checksum . "5c551e9fcead240dcc70261563c5b981428ca67a") (checksum-error . #f) (collection . "symalg") (conflicts . ()) (dependencies . ("base" "multimethod" "parser-tools" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Expressing and manipulating symbolic algebraic expressions in Racket. ") (implies . ()) (last-checked . 1632904628) (last-edit . 1521273472) (last-updated . 1522592538) (modules . ((lib "symalg/scribblings/symalg.scrbl") (lib "symalg/symalg/private/data.rkt") (lib "symalg/symalg/latex.rkt") (lib "symalg/symalg/linear.rkt") (lib "symalg/symalg/simplify.rkt") (lib "symalg/symalg/smaller.rkt") (lib "symalg/symalg/parse.rkt") (lib "symalg/symalg/private/util.rkt") (lib "symalg/symalg/differentiate.rkt") (lib "symalg/symalg/infix.rkt") (lib "symalg/symalg/symalg-expr.rkt") (lib "symalg/symalg/private/zero-expr.rkt") (lib "symalg/symalg/evaluate.rkt") (lib "symalg/main.rkt") (lib "symalg/symalg/sexpr.rkt") (lib "symalg/symalg/private/preorder.rkt"))) (name . "symalg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (algebra . #t) (author:johannes@johannes.tax . #t) (math . #t) (ring:1 . #t))) (source . "https://github.com/pyohannes/racket-symalg.git") (tags . ("algebra" "math")) (versions . #hash((default . #hasheq((checksum . "5c551e9fcead240dcc70261563c5b981428ca67a") (source . "https://github.com/pyohannes/racket-symalg.git") (source_url . "https://github.com/pyohannes/racket-symalg.git"))))))) ("syndicate" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/syndicate.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "452e29ff7f6502cef3f5f4d1c49a2cb92face209") (checksum-error . #f) (collection . "syndicate") (conflicts . ("syndicate-classic")) (date-added . 1620810385) (dependencies . ("rfc6455" "base" "data-lib" "net-lib" "web-server-lib" "profile-lib" "htdp-lib" "gui-lib" "pict-lib" "db-lib" "sgl" "struct-defaults" "auxiliary-macro-context" "bitsyntax" "preserves" "rackunit-lib")) (description . "A new, high-performance reimplementation of Syndicate that takes the                                                                                           \r\nlanguage-level constructs of facets, endpoints, and fields to heart,                                                                                           \r\nintegrating knowledge of facets and endpoints into the dataspace                                                                                               \r\nimplementation itself. It also includes a form of object-capabilities                                                                                          \r\nfor securing access to dataspaces and other distributed objects.                                                                                               \r\n") (implies . ()) (last-checked . 1632904629) (last-edit . 1620813152) (last-updated . 1628602680) (modules . ((lib "syndicate/test/core/correct-retraction-on-exn.rkt") (lib "syndicate/distributed/server/websocket.rkt") (lib "syndicate/reflection.rkt") (lib "syndicate/drivers/sqlite.rkt") (lib "syndicate/test/core/clean-adhoc-on-termination.rkt") (lib "syndicate/distributed/client/loopback.rkt") (lib "syndicate/bin/syndicate-server.rkt") (lib "syndicate/main.rkt") (lib "syndicate/test/speed/speed-box-and-client.rkt") (lib "syndicate/pattern.rkt") (lib "syndicate/pattern-expander.rkt") (lib "syndicate/test/raw-dataspace.rkt") (lib "syndicate/distributed.rkt") (lib "syndicate/test/distributed/observation-visibility.rkt") (lib "syndicate/drivers/gl-2d.rkt") (lib "syndicate/drivers/gl-2d/texture.rkt") (lib "syndicate/test/core/complex-pattern.rkt") (lib "syndicate/distributed/turn.rkt") (lib "syndicate/distributed/internal-protocol.rkt") (lib "syndicate/test/core/double-cross-layer.rkt") (lib "syndicate/test/core/responsibility-transfer-1.rkt") (lib "syndicate/test/core/simple-addition.rkt") (lib "syndicate/test/core/partial-retraction.rkt") (lib "syndicate/drivers/external-event.rkt") (lib "syndicate/relay.rkt") (lib "syndicate/term.rkt") (lib "syndicate/drivers/timer.rkt") (lib "syndicate/protocol/instance.rkt") (lib "syndicate/test/core/death-during-turn.rkt") (lib "syndicate/lang.rkt") (lib "syndicate/test/core/death-during-startup.rkt") (lib "syndicate/distributed/client.rkt") (lib "syndicate/support/bytes.rkt") (lib "syndicate/distributed/server/tcp.rkt") (lib "syndicate/syntax.rkt") (lib "syndicate/drivers/tcp.rkt") (lib "syndicate/distributed/server.rkt") (lib "syndicate/test/core/nesting-confusion.rkt") (lib "syndicate/test/core/abandon-actions-on-exn.rkt") (lib "syndicate/assertions.rkt") (lib "syndicate/distributed/protocol.rkt") (lib "syndicate/dataspace.rkt") (lib "syndicate/drivers/udp.rkt") (lib "syndicate/distributed/wire-protocol.rkt") (lib "syndicate/skeleton.rkt") (lib "syndicate/syntax-classes.rkt") (lib "syndicate/test/core/pending-changes.rkt") (lib "syndicate/test/pattern-test.rkt") (lib "syndicate/distributed/client/tcp.rkt") (lib "syndicate/support/hash.rkt") (lib "syndicate/drivers/config.rkt") (lib "syndicate/event-expander.rkt") (lib "syndicate/drivers/filesystem.rkt") (lib "syndicate/distributed/main.rkt") (lib "syndicate/test/core/spawn-and-send.rkt") (lib "syndicate/mc/udp-dataspace.rkt") (lib "syndicate/test/core/state-machine.rkt") (lib "syndicate/bin/syndicate-server-debug.rkt") (lib "syndicate/test/core/supervise.rkt") (lib "syndicate/test/core/simple-cross-layer.rkt") (lib "syndicate/protocol/credit.rkt") (lib "syndicate/drivers/web.rkt") (lib "syndicate/support/struct.rkt") (lib "syndicate/dataflow.rkt") (lib "syndicate/bag.rkt") (lib "syndicate/reload.rkt") (lib "syndicate/functional-queue.rkt") (lib "syndicate/distributed/heartbeat.rkt") (lib "syndicate/test/core/during-criterion-snapshotting.rkt") (lib "syndicate/test-implementation.rkt") (lib "syndicate/test/distributed/nesting-confusion.rkt") (lib "syndicate/distributed/federation.rkt") (lib "syndicate/reassert.rkt") (lib "syndicate/ground.rkt") (lib "syndicate/mc/mc-chat-client.rkt") (lib "syndicate/test/core/simple-box-and-client.rkt") (lib "syndicate/distributed/buffer.rkt") (lib "syndicate/supervise.rkt") (lib "syndicate/test/core/nesting-confusion-2.rkt") (lib "syndicate/test/core/responsibility-transfer-2.rkt") (lib "syndicate/test/speed/speed-message-sending.rkt") (lib "syndicate/drivers/gl-2d/affine.rkt"))) (name . "syndicate") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (actors . #t) (author:tonygarnockjones@gmail.com . #t) (capabilities . #t) (dataspaces . #t) (distributed . #t) (network . #t) (ring:1 . #t) (syndicate . #t))) (source . "https://git.syndicate-lang.org/syndicate-lang/syndicate-rkt.git?path=syndicate#main") (tags . ("actors" "capabilities" "dataspaces" "distributed" "network" "syndicate")) (versions . #hash((default . #hasheq((checksum . "452e29ff7f6502cef3f5f4d1c49a2cb92face209") (source . "https://git.syndicate-lang.org/syndicate-lang/syndicate-rkt.git?path=syndicate#main") (source_url . "https://git.syndicate-lang.org/syndicate-lang/syndicate-rkt.git?path=syndicate#main"))))))) ("syndicate-classic" . #hasheq((author . "tonygarnockjones@gmail.com samc@ccs.neu.edu") (authors . ("tonygarnockjones@gmail.com" "samc@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "typed-syndicate" "doc/typed-syndicate@syndicate-classic/index.html") ("main" "syndicate" "doc/syndicate@syndicate-classic/index.html") ("main" "syndicate-gl" "doc/syndicate-gl@syndicate-classic/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syndicate-classic.txt") (test-failure-log . "server/built/test-fail/syndicate-classic.txt") (test-success-log . #f))) (checksum . "fc6e012d1c6b9ae406dc6e088f18337338dfd77c") (checksum-error . #f) (collection . (multi)) (conflicts . ("syndicate")) (date-added . 1620808748) (dependencies . ("base" "data-lib" "htdp-lib" "net-lib" "profile-lib" "rackunit-lib" "sha" "automata" "auxiliary-macro-context" "data-enumerate-lib" "datalog" "db-lib" "draw-lib" "gui-lib" "images-lib" "macrotypes-lib" "pict-lib" "rackunit-macrotypes-lib" "rfc6455" "sandbox-lib" "sgl" "struct-defaults" "turnstile-example" "turnstile-lib" "web-server-lib" "draw-doc" "gui-doc" "htdp-doc" "pict-doc" "racket-doc" "scribble-lib" "sha")) (description . "A language for interactive programs. Previous version of #lang syndicate, prior to incorporation of capabilities.") (implies . ()) (last-checked . 1632904630) (last-edit . 1620809180) (last-updated . 1620679085) (modules . ((lib "syndicate/examples/key-value-store.rkt") (lib "syndicate-gui-toolbox/examples/7-GUIS/task-4.rkt") (lib "syndicate-gui-toolbox/examples/7-GUIS/task-1.rkt") (lib "syndicate/mux.rkt") (lib "syndicate/examples/actor/show-field-scope-enforcement1.rkt") (lib "syndicate-gui-toolbox/examples/7-GUIS/task-7.rkt") (lib "syndicate/tests/use-current-knowledge-with-new-facet.rkt") (lib "syndicate/examples/actor/realize.rkt") (lib "syndicate/drivers/web.rkt") (lib "syndicate/profile.rkt") (lib "syndicate/examples/actor/file-system2.rkt") (lib "syndicate/examples/actor/f-to-c5.rkt") (lib "syndicate/protocol/instance.rkt") (lib "syndicate-ide/hsv.rkt") (lib "syndicate/examples/actor/rpc-with-error.rkt") (lib "syndicate/examples/actor/timestate.rkt") (lib "syndicate/relay.rkt") (lib "typed/syndicate/hash.rkt") (lib "syndicate/examples/all-pairs-shortest-paths/all-pairs-shortest-paths2.rkt") (lib "syndicate/test.rkt") (lib "syndicate/examples/actor/irc.rkt") (lib "syndicate/examples/actor/forward-chaining-mini.rkt") (lib "typed/examples/core/bank-account.rkt") (lib "syndicate/examples/all-pairs-shortest-paths/all-pairs-shortest-paths3.rkt") (lib "syndicate/examples/actor/chat-bot.rkt") (lib "syndicate/tests/ping-pong.rkt") (lib "typed/scribblings/typed-syndicate.scrbl") (lib "syndicate/examples/example-plain.rkt") (lib "typed/examples/struct-out/untyped.rkt") (lib "syndicate/trace/stderr.rkt") (lib "syndicate/tests/stop-when-react.rkt") (lib "typed/tests/define-dataflow.rkt") (lib "syndicate-gui-toolbox/examples/7-GUIS/task-5.rkt") (lib "syndicate/dataflow.rkt") (lib "typed/examples/simple-dataflow.rkt") (lib "typed/examples/ping-pong.rkt") (lib "syndicate/big-bang.rkt") (lib "typed/tests/comm-ty-composition.rkt") (lib "syndicate/pattern.rkt") (lib "syndicate/broker/server.rkt") (lib "typed/syndicate/proto.rkt") (lib "syndicate/examples/bank-account.rkt") (lib "syndicate/tests/bank-account.rkt") (lib "typed/tests/sets.rkt") (lib "syndicate/lang.rkt") (lib "syndicate/examples/actor/spreadsheet.rkt") (lib "syndicate-gui-toolbox/examples/7-GUIS/task-6.rkt") (lib "typed/syndicate/drivers/tcp.rkt") (lib "syndicate/comprehensions.rkt") (lib "syndicate/examples/actor/example-during-criterion-snapshotting.rkt") (lib "syndicate-gl/scribblings/syndicate-gl.scrbl") (lib "typed/examples/simple-during-spawn.rkt") (lib "syndicate/examples/actor/file-system-lll.rkt") (lib "syndicate/examples/actor/running-total.rkt") (lib "syndicate/examples/actor/chat.rkt") (lib "typed/tests/phantom-rho.rkt") (lib "typed/examples/book-club.rkt") (lib "syndicate/examples/example-meta-echo2.rkt") (lib "syndicate/random-test.rkt") (lib "syndicate/examples/actor/show-field-scope-enforcement4.rkt") (lib "syndicate/big-bang/timestate.rkt") (lib "typed/syndicate/compile-spin.rkt") (lib "syndicate-gui-toolbox/examples/7-GUIS/task-3.rkt") (lib "syndicate/examples/actor/example-responsibility-transfer-1.rkt") (lib "syndicate/examples/box-and-client.rkt") (lib "syndicate/drivers/config.rkt") (lib "syndicate/examples/actor/example-memoized.rkt") (lib "syndicate/drivers/timer.rkt") (lib "syndicate/actor.rkt") (lib "typed/tests/floating-define.rkt") (lib "syndicate/examples/actor/chat-client-tcp2.rkt") (lib "syndicate/examples/ws-echo.rkt") (lib "typed/examples/require-struct/omit-accs/lib.rkt") (lib "syndicate/monolithic/core.rkt") (lib "typed/syndicate/test-utils.rkt") (lib "syndicate/monitor.rkt") (lib "syndicate-gl/examples/many.rkt") (lib "typed/tests/primitives.rkt") (lib "syndicate/examples/actor/cleanup.rkt") (lib "syndicate/examples/actor/chat-simplified-internals2.rkt") (lib "syndicate/examples/actor/big-bang.rkt") (lib "syndicate/examples/two-buyer-protocol-monolithic.rkt") (lib "syndicate/examples/actor/queue.rkt") (lib "syndicate/examples/actor/bank-account.rkt") (lib "typed/syndicate/roles/lang/reader.rkt") (lib "syndicate/support/struct.rkt") (lib "syndicate/examples/actor/f-to-c2.rkt") (lib "typed/examples/provides.rkt") (lib "syndicate-gl/texture.rkt") (lib "typed/tests/basic-bad-assertion.rkt") (lib "syndicate/tests/simple1.rkt") (lib "syndicate/examples/actor/fs-protocol.rkt") (lib "syndicate-ide/main.rkt") (lib "syndicate/tests/boop.rkt") (lib "syndicate/examples/two-buyer-protocol-incremental.rkt") (lib "syndicate/examples/actor/chat-no-quit-world-no-nesting.rkt") (lib "syndicate/examples/example-quit-dataspace-with-assertion.rkt") (lib "syndicate/store.rkt") (lib "syndicate/examples/actor/let-event.rkt") (lib "typed/examples/simple-query-value.rkt") (lib "syndicate/examples/echo.rkt") (lib "syndicate/examples/actor/chat-no-quit-world.rkt") (lib "syndicate/examples/chat-no-quit-world-no-nesting.rkt") (lib "typed/examples/requires.rkt") (lib "syndicate/examples/actor/web-sanity-check.rkt") (lib "syndicate/examples/actor/queue-no-credit.rkt") (lib "typed/examples/simple-query-hash.rkt") (lib "syndicate/examples/actor/example-responsibility-transfer-2.rkt") (lib "syndicate/examples/actor/example-termination-scripts-1.rkt") (lib "typed/examples/struct-out/typed-out.rkt") (lib "syndicate/examples/example-layer.rkt") (lib "typed/examples/simple-stop-facet.rkt") (lib "syndicate/trace/render-msd.rkt") (lib "syndicate/examples/udp-multicast.rkt") (lib "typed/examples/simple-query-set.rkt") (lib "typed/examples/core/box-and-client.rkt") (lib "syndicate-gl/2d.rkt") (lib "typed/examples/require-struct/client.rkt") (lib "syndicate/examples/actor/mutex.rkt") (lib "syndicate/examples/actor/chat-multiroom-topic.rkt") (lib "syndicate/examples/actor/chat-client.rkt") (lib "typed/syndicate/syntax-serializer.rkt") (lib "syndicate/drivers/filesystem.rkt") (lib "syndicate/syntax-classes.rkt") (lib "syndicate/examples/chat-no-quit-world.rkt") (lib "typed/syndicate/prim.rkt") (lib "typed/tests/spawn.rkt") (lib "syndicate/drivers/irc.rkt") (lib "syndicate/drivers/websocket.rkt") (lib "syndicate/pretty.rkt") (lib "typed/examples/flink.rkt") (lib "syndicate/dataspace.rkt") (lib "typed/tests/for-loops.rkt") (lib "syndicate-gui-toolbox/examples/7-GUIS/cells-canvas.rkt") (lib "typed/syndicate/for-loops.rkt") (lib "syndicate/examples/actor/example-synthetic-patch-2.rkt") (lib "syndicate/drivers/timestate.rkt") (lib "syndicate/actor-lang.rkt") (lib "syndicate/demand-matcher.rkt") (lib "syndicate/examples/durable-key-value-store.rkt") (lib "typed/tests/sequences.rkt") (lib "syndicate/examples/mini-echo.rkt") (lib "typed/syndicate/lang/reader.rkt") (lib "typed/examples/require-struct/driver.rkt") (lib "syndicate/tests/nested-spawn-exceptions.rkt") (lib "typed/syndicate/set.rkt") (lib "syndicate/examples/actor/mini-echo.rkt") (lib "typed/examples/chat-tcp2.rkt") (lib "syndicate/drivers/tcp.rkt") (lib "syndicate/examples/tcp-hello.rkt") (lib "syndicate/firewall.rkt") (lib "syndicate/examples/actor/f-to-c4.rkt") (lib "syndicate/examples/actor/example-assertion-spike.rkt") (lib "syndicate/upside-down.rkt") (lib "syndicate/examples/actor/fs-shell.rkt") (lib "syndicate/examples/actor/example-partial-retraction.rkt") (lib "syndicate/support/hash.rkt") (lib "typed/tests/overly-broad-interests.rkt") (lib "syndicate/examples/actor/chat-simplified-internals.rkt") (lib "typed/examples/file-system.rkt") (lib "syndicate/trie.rkt") (lib "typed/syndicate/list.rkt") (lib "syndicate/examples/all-pairs-shortest-paths/all-pairs-shortest-paths.rkt") (lib "syndicate/examples/example-wildcard-assertion-1.rkt") (lib "syndicate/examples/actor/f-to-c.rkt") (lib "syndicate/trace/msd.rkt") (lib "typed/tests/effect-polymorhpism.rkt") (lib "syndicate-gui-toolbox/examples/7-GUIS/task-2.rkt") (lib "typed/syndicate/core-expressions.rkt") (lib "syndicate/examples/actor/chat-multiroom-topic-persist.rkt") (lib "syndicate/hash-order.rkt") (lib "syndicate/functional-queue.rkt") (lib "syndicate/drivers/gui.rkt") (lib "syndicate/examples/actor/two-buyer-protocol.rkt") (lib "typed/tests/inference.rkt") (lib "syndicate/examples/actor/flip-flop.rkt") (lib "syndicate/examples/actor/broadcast-messages.rkt") (lib "typed/syndicate/roles.rkt") (lib "syndicate/examples/actor/sandbox-os.rkt") (lib "syndicate/examples/actor/tcp-relay2.rkt") (lib "syndicate/examples/actor/fib-server.rkt") (lib "typed/syndicate/first-facet-lang-attempt.rkt") (lib "syndicate/examples/example-quit-world.rkt") (lib "syndicate/supervise.rkt") (lib "syndicate/examples/actor/vacuous-facet.rkt") (lib "typed/examples/simple-during.rkt") (lib "syndicate/examples/actor/mutable-cell.rkt") (lib "syndicate/examples/actor/firewall-demo.rkt") (lib "syndicate/examples/ws-echo-client.rkt") (lib "syndicate/core.rkt") (lib "syndicate/examples/actor/simple-dns.rkt") (lib "syndicate/examples/actor/internal-knowledge.rkt") (lib "syndicate/examples/actor/ceu-leds.rkt") (lib "syndicate/examples/forward-chaining.rkt") (lib "syndicate/lang/reader.rkt") (lib "syndicate/examples/actor/chain.rkt") (lib "syndicate/examples/actor/file-system-during2.rkt") (lib "syndicate/examples/actor/box-and-client.rkt") (lib "syndicate-gl/examples/clock-face.rkt") (lib "syndicate/examples/actor/add1-simple.rkt") (lib "syndicate/trace/util.rkt") (lib "syndicate/main.rkt") (lib "typed/tests/regression-count-new-words.rkt") (lib "syndicate/examples/example-meta-echo.rkt") (lib "typed/examples/flink-support.rkt") (lib "syndicate/hierarchy.rkt") (lib "typed/tests/for-loop-regression.rkt") (lib "syndicate/examples/actor/double-click.rkt") (lib "syndicate/ground.rkt") (lib "syndicate/examples/actor/gui.rkt") (lib "typed/tests/regression-define-with-effects.rkt") (lib "syndicate/monolithic.rkt") (lib "syndicate/test-lang.rkt") (lib "syndicate/examples/actor/chat-multiroom.rkt") (lib "syndicate/tests/create-new-facet-in-on-stop.rkt") (lib "syndicate/examples/actor/example-demand-matcher-glitch-bug2.rkt") (lib "syndicate/tests/simple-multi-level.rkt") (lib "syndicate/examples/example-meta-drop.rkt") (lib "typed/examples/simple-dataspace.rkt") (lib "syndicate/little-actors/core.rkt") (lib "syndicate/examples/actor/example-termination-scripts-2.rkt") (lib "syndicate/core-lang.rkt") (lib "syndicate/examples/chat-client.rkt") (lib "syndicate/examples/ws-hello-ssl.rkt") (lib "syndicate/examples/actor/example-multiple-suspension-resumption.rkt") (lib "syndicate/examples/actor/example-bug-query-scope.rkt") (lib "syndicate/examples/actor/queue-no-credit2.rkt") (lib "typed/examples/internal-knowledge.rkt") (lib "syndicate/examples/actor/query-set.rkt") (lib "syndicate/examples/actor/file-system-lll2.rkt") (lib "syndicate/examples/actor/flink.rkt") (lib "syndicate/scribblings/syndicate.scrbl") (lib "syndicate/protocol/standard-relay.rkt") (lib "typed/syndicate/drivers/timestate.rkt") (lib "typed/examples/require-struct/omit-accs/require-omit-accs.rkt") (lib "typed/syndicate/sequence.rkt") (lib "syndicate/examples/actor/f-to-c3.rkt") (lib "syndicate/tests/maintain-knowledge-across-events.rkt") (lib "typed/examples/struct-out/client.rkt") (lib "syndicate/examples/actor/example-bug-rising-edge-true.rkt") (lib "syndicate/examples/actor/irc-client.rkt") (lib "typed/core.rkt") (lib "syndicate/examples/actor/web-demo.rkt") (lib "syndicate/support/bytes.rkt") (lib "typed/syndicate/either.rkt") (lib "syndicate/drivers/smtp.rkt") (lib "syndicate/tests/facet-creation-during-stop-from-grandchild.rkt") (lib "syndicate/examples/actor/echo.rkt") (lib "syndicate/tset.rkt") (lib "typed/syndicate/core/lang/reader.rkt") (lib "syndicate/examples/actor/example-demand-matcher-glitch-bug.rkt") (lib "typed/examples/realize.rkt") (lib "syndicate/examples/example-swap-int-and-claim.rkt") (lib "typed/tests/expressions.rkt") (lib "syndicate/examples/bank-account-monolithic.rkt") (lib "syndicate/examples/ws-hello.rkt") (lib "syndicate/examples/actor/lambda.rkt") (lib "syndicate/trace.rkt") (lib "typed/examples/two-buyer-protocol.rkt") (lib "syndicate/examples/udp-hello-plain.rkt") (lib "syndicate/examples/actor/example-action-after-suspension.rkt") (lib "syndicate/examples/big-bang.rkt") (lib "typed/examples/bank-account.rkt") (lib "syndicate/examples/chat.rkt") (lib "typed/examples/core/book-club.rkt") (lib "syndicate/examples/example-wildcard-assertion-2.rkt") (lib "syndicate/examples/actor/parameters.rkt") (lib "typed/examples/struct-out/struct-in.rkt") (lib "typed/examples/cell.rkt") (lib "syndicate/examples/actor/file-system-during.rkt") (lib "syndicate/canonicalize.rkt") (lib "syndicate/examples/actor/chat-tcp2.rkt") (lib "syndicate/tests/multi-level-other-way.rkt") (lib "syndicate/monolithic/scn.rkt") (lib "syndicate/examples/chat-simplified-internals.rkt") (lib "syndicate-gl/examples/basic.rkt") (lib "typed/syndicate/core-types.rkt") (lib "typed/tests/pattern-annotations.rkt") (lib "syndicate/examples/actor/example-glitch.rkt") (lib "syndicate/examples/actor/example-supervise.rkt") (lib "typed/tests/hashes.rkt") (lib "syndicate/examples/actor/make.rkt") (lib "syndicate/reload.rkt") (lib "syndicate/examples/actor/example-synthetic-patch.rkt") (lib "syndicate/threaded.rkt") (lib "syndicate/examples/actor/simple-cross-layer.rkt") (lib "syndicate/drivers/tcp2.rkt") (lib "syndicate/patch.rkt") (lib "syndicate/examples/actor/example-filesystem.rkt") (lib "syndicate/examples/example-lang.rkt") (lib "typed/syndicate/maybe.rkt") (lib "syndicate/drivers/line-reader.rkt") (lib "typed/syndicate/ltl.rkt") (lib "syndicate/treap.rkt") (lib "syndicate-gl/affine.rkt") (lib "syndicate/examples/actor/tcp-relay.rkt") (lib "syndicate/examples/actor/file-system.rkt") (lib "syndicate/broker/protocol.rkt") (lib "syndicate/tests/multi-level-message.rkt") (lib "syndicate/protocol/advertise.rkt") (lib "syndicate/drivers/udp.rkt") (lib "syndicate-gui-toolbox/widgets.rkt") (lib "typed/examples/struct-out/struct-out.rkt") (lib "syndicate/examples/actor/udp-echo.rkt"))) (name . "syndicate-classic") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:conflicts: . #t) (:docs: . #t) (actors . #t) (author:samc@ccs.neu.edu . #t) (author:tonygarnockjones@gmail.com . #t) (dataspaces . #t) (ring:1 . #t) (syndicate . #t) (syndicate-gl . #t) (typed-syndicate . #t))) (source . "https://github.com/tonyg/syndicate.git?path=racket") (tags . ("actors" "dataspaces" "syndicate" "syndicate-gl" "typed-syndicate")) (versions . #hash((default . #hasheq((checksum . "fc6e012d1c6b9ae406dc6e088f18337338dfd77c") (source . "https://github.com/tonyg/syndicate.git?path=racket") (source_url . "https://github.com/tonyg/syndicate.git?path=racket"))))))) ("syntax-class-or" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-class-or" "doc/syntax-class-or@syntax-class-or/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-class-or.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-class-or.txt"))) (checksum . "948a823026cb462f113400b5deb5276c9bd1846a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1594047067) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Combining syntax classes together as multiple variants") (implies . ()) (last-checked . 1632904630) (last-edit . 1594047067) (last-updated . 1533139131) (modules . ((lib "syntax/parse/syntax-class-or/scribblings/syntax-class-or.scrbl") (lib "syntax/parse/syntax-class-or.rkt"))) (name . "syntax-class-or") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t) (syntax-parse . #t))) (source . "https://github.com/AlexKnauth/syntax-class-or.git#main") (tags . ("syntax-parse")) (versions . #hash((default . #hasheq((checksum . "948a823026cb462f113400b5deb5276c9bd1846a") (source . "https://github.com/AlexKnauth/syntax-class-or.git#main") (source_url . "https://github.com/AlexKnauth/syntax-class-or.git#main"))))))) ("syntax-classes" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-classes.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-classes.txt"))) (checksum . "a8a95ede1c72d7dae0764437126f5ce9bbe7967a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548802590) (dependencies . ("base" "syntax-classes-lib" "syntax-classes-doc")) (description . "Additional useful syntax classes for use with syntax/parse") (implies . ("syntax-classes-lib" "syntax-classes-doc")) (last-checked . 1632904631) (last-edit . 1548802649) (last-updated . 1548802649) (modules . ()) (name . "syntax-classes") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes") (tags . ("syntax")) (versions . #hash(("6.0.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.2"))) (default . #hasheq((checksum . "a8a95ede1c72d7dae0764437126f5ce9bbe7967a") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes"))) ("6.2.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.2"))) ("6.2" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.2"))) ("6.3" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.11"))) ("6.0" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.2"))) ("6.6" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.11"))) ("6.7" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.11"))) ("6.4" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.11"))) ("6.5" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.11"))) ("6.8" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.11"))) ("6.9" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.11"))) ("6.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.2"))) ("6.1.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.2"))) ("6.11" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.11"))) ("6.10" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes#version-exception--6.11"))))))) ("syntax-classes-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-classes" "doc/syntax-classes@syntax-classes-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-classes-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-classes-doc.txt"))) (checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548802779) (dependencies . ("base" "racket-doc" "scribble-lib" "syntax-classes-lib")) (description . "documentation (no implementation) for “syntax-classes”") (implies . ()) (last-checked . 1632904634) (last-edit . 1548802779) (last-updated . 1548802779) (modules . ((lib "scribblings/syntax-classes.scrbl"))) (name . "syntax-classes-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11") (tags . ("syntax")) (versions . #hash(("6.0.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.2"))) (default . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11"))) ("6.2.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.2"))) ("6.2" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.2"))) ("6.3" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11"))) ("6.0" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.2"))) ("6.6" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11"))) ("6.7" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11"))) ("6.4" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11"))) ("6.5" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11"))) ("6.8" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11"))) ("6.9" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11"))) ("6.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.2"))) ("6.1.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.2"))) ("6.11" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11"))) ("6.10" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-doc#version-exception--6.11"))))))) ("syntax-classes-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-classes-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-classes-lib.txt"))) (checksum . "a8a95ede1c72d7dae0764437126f5ce9bbe7967a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548802876) (dependencies . (("base" #:version "6.12"))) (description . "implementation (no documentation) for “syntax-classes”") (implies . ()) (last-checked . 1632904637) (last-edit . 1548802876) (last-updated . 1548802876) (modules . ((lib "syntax/parse/class/local-value.rkt") (lib "syntax/parse/class/paren-shape.rkt") (lib "syntax/parse/class/struct-id.rkt"))) (name . "syntax-classes-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib") (tags . ("syntax")) (versions . #hash(("6.0.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.2"))) (default . #hasheq((checksum . "a8a95ede1c72d7dae0764437126f5ce9bbe7967a") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib"))) ("6.2.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.2"))) ("6.2" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.2"))) ("6.3" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.11"))) ("6.0" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.2"))) ("6.6" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.11"))) ("6.7" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.11"))) ("6.4" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.11"))) ("6.5" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.11"))) ("6.8" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.11"))) ("6.9" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.11"))) ("6.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.2"))) ("6.1.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.2"))) ("6.11" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.11"))) ("6.10" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-lib#version-exception--6.11"))))))) ("syntax-classes-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-classes-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-classes-test.txt"))) (checksum . "a8a95ede1c72d7dae0764437126f5ce9bbe7967a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1548803006) (dependencies . ("base" "rackunit-lib" "rackunit-spec" "syntax-classes-lib")) (description . "") (implies . ()) (last-checked . 1632904640) (last-edit . 1548803006) (last-updated . 1548803006) (modules . ((lib "tests/syntax/parse/class/struct-id.rkt") (lib "tests/syntax/parse/class/paren-shape.rkt"))) (name . "syntax-classes-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test") (tags . ("syntax")) (versions . #hash(("6.0.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.2"))) (default . #hasheq((checksum . "a8a95ede1c72d7dae0764437126f5ce9bbe7967a") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test"))) ("6.2.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.2"))) ("6.2" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.2"))) ("6.3" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.11"))) ("6.0" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.2"))) ("6.6" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.11"))) ("6.7" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.11"))) ("6.4" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.11"))) ("6.5" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.11"))) ("6.8" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.11"))) ("6.9" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.11"))) ("6.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.2"))) ("6.1.1" . #hasheq((checksum . "c76e1e103487f2af6a6866162cd2243a5918a88c") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.2") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.2"))) ("6.11" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.11"))) ("6.10" . #hasheq((checksum . "9498cdfcf949b277ebef3d69062ae024f2005380") (source . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.11") (source_url . "https://github.com/lexi-lambda/syntax-classes.git?path=syntax-classes-test#version-exception--6.11"))))))) ("syntax-color" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("syntax-color-lib" "syntax-color-doc")) (description . "Program syntax coloring for editors and typesetting") (implies . ("syntax-color-lib" "syntax-color-doc")) (last-checked . 1632904644) (last-edit . 1417659583) (last-updated . 1620332221) (modules . ()) (name . "syntax-color") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "80018dd2e190e8907d02730db3538c47e571f6a8") (source . "git://github.com/racket/syntax-color/?path=syntax-color") (source_url . "git://github.com/racket/syntax-color/?path=syntax-color"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("syntax-color-doc" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-color" "doc/syntax-color@syntax-color-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "gui-doc" "scribble-doc" "gui-lib" "scribble-lib" "racket-doc" "syntax-color-lib")) (description . "documentation part of syntax-color") (implies . ()) (last-checked . 1632904644) (last-edit . 1417659583) (last-updated . 1620332222) (modules . ((lib "syntax-color/syntax-color.scrbl"))) (name . "syntax-color-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "80018dd2e190e8907d02730db3538c47e571f6a8") (source . "git://github.com/racket/syntax-color/?path=syntax-color-doc") (source_url . "git://github.com/racket/syntax-color/?path=syntax-color-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("syntax-color-lib" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "base" "compatibility-lib" "parser-tools-lib" "option-contract-lib")) (description . "implementation (no documentation) part of syntax-color") (implies . ()) (last-checked . 1632904644) (last-edit . 1417659583) (last-updated . 1620332222) (modules . ((lib "syntax-color/token-tree.rkt") (lib "syntax-color/default-lexer.rkt") (lib "syntax-color/scribble-lexer.rkt") (lib "syntax-color/paren-tree.rkt") (lib "syntax-color/lexer-contract.rkt") (lib "syntax-color/racket-lexer.rkt") (lib "syntax-color/module-lexer.rkt") (lib "syntax-color/scheme-lexer.rkt"))) (name . "syntax-color-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "80018dd2e190e8907d02730db3538c47e571f6a8") (source . "git://github.com/racket/syntax-color/?path=syntax-color-lib") (source_url . "git://github.com/racket/syntax-color/?path=syntax-color-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("syntax-color-test" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scheme-lib" "syntax-color-lib" "gui-lib")) (description . "tests for syntax-color-lib") (implies . ()) (last-checked . 1632904645) (last-edit . 1417659583) (last-updated . 1620332223) (modules . ((lib "tests/syntax-color/token-tree.rkt") (lib "tests/syntax-color/scheme-lexer.rkt") (lib "tests/syntax-color/paren-tree.rkt") (lib "tests/syntax-color/scribble-lexer.rkt") (lib "tests/syntax-color/module-lexer.rkt"))) (name . "syntax-color-test") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "80018dd2e190e8907d02730db3538c47e571f6a8") (source . "git://github.com/racket/syntax-color/?path=syntax-color-test") (source_url . "git://github.com/racket/syntax-color/?path=syntax-color-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("syntax-highlighting" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/syntax-highlighting.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-highlighting.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-highlighting.txt"))) (checksum . "d02c1847e606604e09d92bd5d2aec85d30e3dd48") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1582164286) (dependencies . ()) (description . "(INCOMPLETE) A single syntax highlighting collection. Currently only uses http://markup.su/api/highlighter") (implies . ()) (last-checked . 1632904645) (last-edit . 1582164286) (last-updated . 1607274400) (modules . ((lib "syntax-highlighting/highlight-code.rkt"))) (name . "syntax-highlighting") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:sage@sagegerard.com . #t) (color . #t) (highlight . #t) (ring:1 . #t) (syntax . #t) (syntax-highlighting . #t))) (source . "https://github.com/zyrolasting/syntax-highlighting.git") (tags . ("color" "highlight" "syntax" "syntax-highlighting")) (versions . #hash((default . #hasheq((checksum . "d02c1847e606604e09d92bd5d2aec85d30e3dd48") (source . "https://github.com/zyrolasting/syntax-highlighting.git") (source_url . "https://github.com/zyrolasting/syntax-highlighting.git"))))))) ("syntax-implicits" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-implicits" "doc/syntax-implicits@syntax-implicits/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-implicits.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-implicits.txt"))) (checksum . "df1fb32a62348acbcc68e36a2a6a0fc6da4cea18") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1608152516) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "") (implies . ()) (last-checked . 1632904646) (last-edit . 1608152516) (last-updated . 1608253099) (modules . ((lib "syntax-implicits/scribblings/syntax-implicits.scrbl") (lib "syntax-implicits/main.rkt"))) (name . "syntax-implicits") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (ring:1 . #t) (syntax . #t))) (source . "https://github.com/willghatch/racket-syntax-implicits.git") (tags . ("syntax")) (versions . #hash((default . #hasheq((checksum . "df1fb32a62348acbcc68e36a2a6a0fc6da4cea18") (source . "https://github.com/willghatch/racket-syntax-implicits.git") (source_url . "https://github.com/willghatch/racket-syntax-implicits.git"))))))) ("syntax-lang" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-lang" "doc/syntax-lang@syntax-lang/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-lang.txt"))) (checksum . "50897fef061bcf8640110a7695c81a3a06e38e6d") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "Mini-library for creating new #lang languages from simple macros") (implies . ()) (last-checked . 1632904646) (last-edit . 1500077461) (last-updated . 1502816469) (modules . ((lib "syntax/lang/main.scrbl") (lib "syntax/lang/main.rkt") (lib "syntax/lang.rkt"))) (name . "syntax-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (experimental . #t) (lang . #t) (ring:1 . #t) (sugar . #t) (syntax . #t))) (source . "git://github.com/jackfirth/racket-syntax-lang") (tags . ("experimental" "lang" "sugar" "syntax")) (versions . #hash((default . #hasheq((checksum . "50897fef061bcf8640110a7695c81a3a06e38e6d") (source . "git://github.com/jackfirth/racket-syntax-lang") (source_url . "http://github.com/jackfirth/racket-syntax-lang/tree/master"))))))) ("syntax-macro-lang" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-macro-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-macro-lang.txt"))) (checksum . "d71edad70a023fb8e13b9841f2ec46117864f146") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "experimental racket module language for creating languages, inspired by syntax-lang") (implies . ()) (last-checked . 1632904646) (last-edit . 1443624472) (last-updated . 1601516441) (modules . ((lib "tests/syntax/macro-lang/the-lang.rkt") (lib "tests/syntax/macro-lang/test.rkt") (lib "syntax/macro-lang.rkt"))) (name . "syntax-macro-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (lang . #t) (ring:1 . #t) (syntax . #t))) (source . "git://github.com/AlexKnauth/syntax-macro-lang") (tags . ("lang" "syntax")) (versions . #hash((default . #hasheq((checksum . "d71edad70a023fb8e13b9841f2ec46117864f146") (source . "git://github.com/AlexKnauth/syntax-macro-lang") (source_url . "http://github.com/AlexKnauth/syntax-macro-lang/tree/master"))))))) ("syntax-parse-example" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-parse-example" "doc/syntax-parse-example@syntax-parse-example/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-parse-example.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-parse-example.txt"))) (checksum . "c4ad8a774ceb31808bbb27bac2ae9de4e7c75f16") (checksum-error . #f) (collection . "syntax-parse-example") (conflicts . ()) (dependencies . ("at-exp-lib" "base" "scribble-lib" "rackunit-lib" "typed-racket-lib" "scribble-lib" "racket-doc" "rackunit-doc" "rackunit-lib" "scribble-doc" "rackunit-typed" "typed-racket-doc")) (description . "Example macros written using syntax/parse") (implies . ()) (last-checked . 1632904647) (last-edit . 1494875077) (last-updated . 1632458187) (modules . ((lib "syntax-parse-example/struct-list/struct-list.scrbl") (lib "syntax-parse-example/dot-underscore/dot-underscore.rkt") (lib "syntax-parse-example/cross-macro-communication/cross-macro-communication.rkt") (lib "syntax-parse-example/def/def.scrbl") (lib "syntax-parse-example/lang/reader.rkt") (lib "syntax-parse-example/rec-contract/rec-contract-test.rkt") (lib "syntax-parse-example/cross-macro-communication/cross-macro-communication.scrbl") (lib "syntax-parse-example/syntax-class-contract/syntax-class-contract-test.rkt") (lib "syntax-parse-example/define-datum-literal-set/define-datum-literal-set.rkt") (lib "syntax-parse-example/rec-contract/rec-contract.rkt") (lib "syntax-parse-example/dot-underscore/dot-underscore.scrbl") (lib "syntax-parse-example/rec-contract/rec-contract.scrbl") (lib "syntax-parse-example/dot-underscore/test-dot-underscore.rkt") (lib "syntax-parse-example/first-class-or/first-class-or-test.rkt") (lib "syntax-parse-example/multi-check-true/multi-check-true.rkt") (lib "syntax-parse-example/index.scrbl") (lib "syntax-parse-example/test.rkt") (lib "syntax-parse-example/multi-check-true/multi-check-true-test.rkt") (lib "syntax-parse-example/struct-list/struct-list.rkt") (lib "syntax-parse-example/conditional-require/conditional-require-test.rkt") (lib "syntax-parse-example/conditional-require/conditional-require.scrbl") (lib "syntax-parse-example/first-class-or/first-class-or.scrbl") (lib "syntax-parse-example/except-in-quiet/except-in-quiet.scrbl") (lib "syntax-parse-example/define-datum-literal-set/define-datum-literal-set.scrbl") (lib "syntax-parse-example/define-datum-literal-set/define-datum-literal-set-test.rkt") (lib "syntax-parse-example/except-in-quiet/except-in-quiet-test.rkt") (lib "syntax-parse-example/optional-assert/optional-assert.scrbl") (lib "syntax-parse-example/def/def.rkt") (lib "syntax-parse-example/render.rkt") (lib "syntax-parse-example/optional-assert/optional-assert.rkt") (lib "syntax-parse-example/cross-macro-communication/cross-macro-communication-test.rkt") (lib "syntax-parse-example/syntax-parse-example.scrbl") (lib "syntax-parse-example/let-star/let-star.rkt") (lib "syntax-parse-example/first-class-or/first-class-or.rkt") (lib "syntax-parse-example/except-in-quiet/except-in-quiet.rkt") (lib "syntax-parse-example/def/def-test.rkt") (lib "syntax-parse-example/let-star/let-star.scrbl") (lib "syntax-parse-example/struct-list/struct-list-test.rkt") (lib "syntax-parse-example/optional-assert/optional-assert-test.rkt") (lib "syntax-parse-example/syntax-class-contract/syntax-class-contract.rkt") (lib "syntax-parse-example/conditional-require/conditional-require.rkt") (lib "syntax-parse-example/multi-check-true/multi-check-true.scrbl") (lib "syntax-parse-example/let-star/let-star-test.rkt") (lib "syntax-parse-example/syntax-class-contract/syntax-class-contract.scrbl") (lib "syntax-parse-example/raco.rkt"))) (name . "syntax-parse-example") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (macro . #t) (ring:1 . #t) (tutorial . #t))) (source . "git://github.com/bennn/syntax-parse-example") (tags . ("macro" "tutorial")) (versions . #hash((default . #hasheq((checksum . "c4ad8a774ceb31808bbb27bac2ae9de4e7c75f16") (source . "git://github.com/bennn/syntax-parse-example") (source_url . "http://github.com/bennn/syntax-parse-example/tree/master"))))))) ("syntax-sloc" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-sloc" "doc/syntax-sloc@syntax-sloc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-sloc.txt") (test-failure-log . "server/built/test-fail/syntax-sloc.txt") (test-success-log . #f))) (checksum . "ea9bfa06a207ba63b481dcc794c55475eb6bcc33") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "lang-file" "rackunit-lib" "scribble-lib" "scribble-code-examples" "racket-doc" "typed-racket-more")) (description . "counts the number of source lines of code in a racket syntax object") (implies . ()) (last-checked . 1632904647) (last-edit . 1462284326) (last-updated . 1503978849) (modules . ((lib "syntax-sloc/read-lang-file.rkt") (lib "syntax-sloc/raco-sloc.rkt") (lib "syntax-sloc/private/accumulate-stx.rkt") (lib "typed/syntax-sloc/directory-sloc.rkt") (lib "syntax-sloc/pkg-sloc.rkt") (lib "typed/syntax-sloc/lang-file-sloc.rkt") (lib "syntax-sloc/private/pkg-module-paths.rkt") (lib "typed/syntax-sloc.rkt") (lib "syntax-sloc/syntax-sloc.rkt") (lib "syntax-sloc/lang-file-sloc.rkt") (lib "typed/syntax-sloc/read-lang-file.rkt") (lib "syntax-sloc/directory-sloc.rkt") (lib "typed/syntax-sloc/syntax-sloc.rkt") (lib "typed/syntax-sloc/main.rkt") (lib "syntax-sloc/scribblings/syntax-sloc.scrbl") (lib "syntax-sloc/main.rkt"))) (name . "syntax-sloc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/syntax-sloc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "ea9bfa06a207ba63b481dcc794c55475eb6bcc33") (source . "git://github.com/AlexKnauth/syntax-sloc") (source_url . "http://github.com/AlexKnauth/syntax-sloc/tree/master"))))))) ("syntax-warn" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-warn.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-warn.txt"))) (checksum . "f17fdd3179aeab8e5275a24e7d091d3ca42960a9") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "syntax-warn-base" "syntax-warn-cli" "syntax-warn-doc" "syntax-warn-lang")) (description . "Define and attach syntax warnings to code, with automated fixes and built in warnings. Implies -base, -lang, -cli, and -doc packages.") (implies . ("syntax-warn-base" "syntax-warn-cli" "syntax-warn-doc" "syntax-warn-lang")) (last-checked . 1632904647) (last-edit . 1500077527) (last-updated . 1575700966) (modules . ()) (name . "syntax-warn") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jackhfirth@gmail.com . #t) (lang . #t) (raco . #t) (ring:1 . #t) (syntax . #t) (syntax-warn . #t))) (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn") (tags . ("lang" "raco" "syntax" "syntax-warn")) (versions . #hash((default . #hasheq((checksum . "f17fdd3179aeab8e5275a24e7d091d3ca42960a9") (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn") (source_url . "http://github.com/jackfirth/syntax-warn/tree/master?path=syntax-warn"))))))) ("syntax-warn-base" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-warn-base.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-warn-base.txt"))) (checksum . "f17fdd3179aeab8e5275a24e7d091d3ca42960a9") (checksum-error . #f) (collection . "syntax") (conflicts . ()) (dependencies . (("base" #:version "6.4") "rackunit-lib")) (description . "Base library for defining and attaching syntax warnings") (implies . ()) (last-checked . 1632904647) (last-edit . 1473746021) (last-updated . 1575700967) (modules . ((lib "syntax/warn/private/syntax-srcloc-data.rkt") (lib "syntax/warn/private/warn-config.rkt") (lib "syntax/warn/private/syntax-format.rkt") (lib "syntax/warn/private/filter-index.rkt") (lib "syntax/warn/private/rackunit-syntax.rkt") (lib "syntax/warn/private/warn.rkt") (lib "syntax/warn/private/warn-property.rkt") (lib "syntax/warn/private/string-lines.rkt") (lib "syntax/warn.rkt") (lib "syntax/warn/private/list.rkt") (lib "syntax/warn/private/string-pad.rkt") (lib "syntax/warn/private/syntax-srcloc.rkt") (lib "syntax/warn/private/warn-module.rkt") (lib "syntax/warn/private/rackunit-string.rkt") (lib "syntax/warn/private/syntax-srcloc-test.rkt"))) (name . "syntax-warn-base") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jackhfirth@gmail.com . #t) (ring:1 . #t) (syntax . #t) (syntax-warn . #t))) (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn-base") (tags . ("syntax" "syntax-warn")) (versions . #hash((default . #hasheq((checksum . "f17fdd3179aeab8e5275a24e7d091d3ca42960a9") (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn-base") (source_url . "http://github.com/jackfirth/syntax-warn/tree/master?path=syntax-warn-base"))))))) ("syntax-warn-cli" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-warn-cli.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-warn-cli.txt"))) (checksum . "f17fdd3179aeab8e5275a24e7d091d3ca42960a9") (checksum-error . #f) (collection . "syntax") (conflicts . ()) (dependencies . ("rackunit-lib" "syntax-warn-lang" "base" "compiler-lib" "syntax-warn-base" "rackunit-lib")) (description . "Command line raco tools for checking and fixing syntax warnings") (implies . ()) (last-checked . 1632904648) (last-edit . 1473746160) (last-updated . 1575700967) (modules . ((lib "syntax/warn/private/syntax-string.rkt") (lib "syntax/warn/test-warnings/main.rkt") (lib "syntax/warn/test-warnings-suppressed/main.rkt") (lib "syntax/warn/raco-warn.rkt") (lib "syntax/warn/private/command.rkt") (lib "syntax/warn/private/config.rkt") (lib "syntax/warn/private/read.rkt") (lib "syntax/warn/private/string-delta.rkt") (lib "syntax/warn/test-no-warnings/main.rkt") (lib "syntax/warn/raco-fix.rkt") (lib "syntax/warn/private/module.rkt") (lib "syntax/warn/private/read-test.rkt") (lib "syntax/warn/private/test.rkt"))) (name . "syntax-warn-cli") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jackhfirth@gmail.com . #t) (raco . #t) (ring:1 . #t) (syntax . #t) (syntax-warn . #t))) (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn-cli") (tags . ("raco" "syntax" "syntax-warn")) (versions . #hash((default . #hasheq((checksum . "f17fdd3179aeab8e5275a24e7d091d3ca42960a9") (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn-cli") (source_url . "http://github.com/jackfirth/syntax-warn/tree/master?path=syntax-warn-cli"))))))) ("syntax-warn-doc" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "syntax-warn" "doc/syntax-warn@syntax-warn-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-warn-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-warn-doc.txt"))) (checksum . "f17fdd3179aeab8e5275a24e7d091d3ca42960a9") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("syntax-warn-base" "scribble-lib" "scribble-text-lib" "base" "racket-doc" "scribble-lib" "syntax-warn-base")) (description . "Documentation for the syntax-warn packages") (implies . ()) (last-checked . 1632904648) (last-edit . 1500077547) (last-updated . 1575700968) (modules . ((lib "syntax-warn-doc/main.scrbl") (lib "syntax-warn-doc/base.rkt") (lib "syntax-warn-doc/cli.scrbl") (lib "syntax-warn-doc/lang.scrbl") (lib "syntax-warn-doc/reference.scrbl"))) (name . "syntax-warn-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (docs . #t) (ring:1 . #t) (syntax . #t) (syntax-warn . #t))) (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn-doc") (tags . ("docs" "syntax" "syntax-warn")) (versions . #hash((default . #hasheq((checksum . "f17fdd3179aeab8e5275a24e7d091d3ca42960a9") (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn-doc") (source_url . "http://github.com/jackfirth/syntax-warn/tree/master?path=syntax-warn-doc"))))))) ("syntax-warn-lang" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syntax-warn-lang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/syntax-warn-lang.txt"))) (checksum . "f17fdd3179aeab8e5275a24e7d091d3ca42960a9") (checksum-error . #f) (collection . "racket") (conflicts . ()) (dependencies . ("base" "syntax-warn-base" "rackunit-lib")) (description . "#lang racket/base/warn - Racket with syntax warnings") (implies . ()) (last-checked . 1632904648) (last-edit . 1473746095) (last-updated . 1575700968) (modules . ((lib "racket/base/private/require.rkt") (lib "racket/base/warn.rkt"))) (name . "syntax-warn-lang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jackhfirth@gmail.com . #t) (lang . #t) (ring:1 . #t) (syntax . #t) (syntax-warn . #t))) (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn-lang") (tags . ("lang" "syntax" "syntax-warn")) (versions . #hash((default . #hasheq((checksum . "f17fdd3179aeab8e5275a24e7d091d3ca42960a9") (source . "git://github.com/jackfirth/syntax-warn?path=syntax-warn-lang") (source_url . "http://github.com/jackfirth/syntax-warn/tree/master?path=syntax-warn-lang"))))))) ("syrup" . #hasheq((author . "cwebber@dustycloud.org") (authors . ("cwebber@dustycloud.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/syrup.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/syrup.txt") (test-failure-log . "server/built/test-fail/syrup.txt") (test-success-log . #f))) (checksum . "88eb2691cdd3806290fa42480dfefed09138eb09") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1599411200) (dependencies . ("base")) (description . "Serialization of Preserves (mostly). Easy to write, easy to read, with a few empty calories.") (implies . ()) (last-checked . 1632904649) (last-edit . 1599941097) (last-updated . 1620470194) (modules . ((lib "syrup/main.rkt") (lib "syrup/bencode.rkt") (lib "syrup/syrup.rkt"))) (name . "syrup") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:cwebber@dustycloud.org . #t) (ring:1 . #t) (serialization . #t))) (source . "https://gitlab.com/spritely/syrup.git?path=impls%2Fracket%2Fsyrup") (tags . ("serialization")) (versions . #hash((default . #hasheq((checksum . "88eb2691cdd3806290fa42480dfefed09138eb09") (source . "https://gitlab.com/spritely/syrup.git?path=impls%2Fracket%2Fsyrup") (source_url . "https://gitlab.com/spritely/syrup.git?path=impls%2Fracket%2Fsyrup"))))))) ("sysfs" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/sysfs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/sysfs.txt"))) (checksum . "80a68016bfd28fa5e86269e7bae0cbbe5ad8de87") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1")) (description . "Linux /sys utilities.") (implies . ()) (last-checked . 1632904649) (last-edit . 1368570744) (last-updated . 1502816471) (modules . ((lib "sysfs/util.rkt") (lib "sysfs/block.rkt") (lib "sysfs/main.rkt") (lib "sysfs/net.rkt"))) (name . "sysfs") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mordae@anilinux.org . #t) (linux . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-sysfs/master") (tags . ("linux")) (versions . #hash((default . #hasheq((checksum . "80a68016bfd28fa5e86269e7bae0cbbe5ad8de87") (source . "github://github.com/mordae/racket-sysfs/master") (source_url . "http://github.com/mordae/racket-sysfs/tree/master"))))))) ("systemd" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "systemd" "doc/systemd@systemd/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/systemd.txt") (test-failure-log . "server/built/test-fail/systemd.txt") (test-success-log . #f))) (checksum . "fd389e3d6369aeae47004deef9d1d93018db7da4") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "libuuid" "racket-doc")) (description . "SystemD Support") (implies . ()) (last-checked . 1632904650) (last-edit . 1408365472) (last-updated . 1502816471) (modules . ((lib "systemd/main.rkt") (lib "systemd/daemon.scrbl") (lib "systemd/id.scrbl") (lib "systemd/daemon.rkt") (lib "systemd/systemd.scrbl") (lib "systemd/id.rkt"))) (name . "systemd") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (linux . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-systemd/master") (tags . ("linux")) (versions . #hash((default . #hasheq((checksum . "fd389e3d6369aeae47004deef9d1d93018db7da4") (source . "github://github.com/mordae/racket-systemd/master") (source_url . "http://github.com/mordae/racket-systemd/tree/master"))))))) ("t-test" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "t-test" "doc/t-test@t-test/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/t-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/t-test.txt"))) (checksum . "eb5cc28868689324f6c27722d2516715570cab97") (checksum-error . #f) (collection . "t-test") (conflicts . ()) (dependencies . ("base" "math-lib" "typed-racket-lib" "racket-doc" "rackunit-typed" "scribble-lib" "math-doc")) (description . "Simple implementations of Welch's and Student's t-tests") (implies . ()) (last-checked . 1632904650) (last-edit . 1546212337) (last-updated . 1552766748) (modules . ((lib "t-test/t-test.scrbl") (lib "t-test/main.rkt"))) (name . "t-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (ring:1 . #t) (statistics . #t) (t-test . #t))) (source . "https://github.com/jbclements/t-test.git") (tags . ("statistics" "t-test")) (versions . #hash((default . #hasheq((checksum . "eb5cc28868689324f6c27722d2516715570cab97") (source . "https://github.com/jbclements/t-test.git") (source_url . "https://github.com/jbclements/t-test.git"))))))) ("table-panel" . #hasheq((author . "spdegabrielle@gmail.com m.douglas.williams@gmail.com") (authors . ("spdegabrielle@gmail.com" "m.douglas.williams@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "table-panel" "doc/table-panel@table-panel/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/table-panel.txt") (test-failure-log . "server/built/test-fail/table-panel.txt") (test-success-log . #f))) (checksum . "e5994d6b0e11bae486679af2bcfa38442f0e5093") (checksum-error . #f) (collection . "table-panel") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "gui" "srfi-lib" "scribble-lib" "racket-doc")) (description . "This library provides a table-panel% class that specializes the panel% class to provide a panel that aligns its children to a grid. A simple demonstration program is also provided. Copyright(c) 2008, M. Douglas Williams.") (implies . ()) (last-checked . 1632904650) (last-edit . 1419869682) (last-updated . 1535392739) (modules . ((lib "table-panel/scribblings/table-panel.scrbl") (lib "table-panel/test-table-panel.rkt") (lib "table-panel/main.rkt"))) (name . "table-panel") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:m.douglas.williams@gmail.com . #t) (author:spdegabrielle@gmail.com . #t) (gui . #t) (ring:1 . #t))) (source . "git://github.com/spdegabrielle/table-panel") (tags . ("gui")) (versions . #hash((default . #hasheq((checksum . "e5994d6b0e11bae486679af2bcfa38442f0e5093") (source . "git://github.com/spdegabrielle/table-panel") (source_url . "http://github.com/spdegabrielle/table-panel/tree/master"))))))) ("tablesci" . #hasheq((author . "hashim.muqtadir@gmail.com") (authors . ("hashim.muqtadir@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/tablesci.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tablesci.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tablesci.txt"))) (checksum . "43c4544d64e9d218acabe167bfa3c894fa6f5f42") (checksum-error . #f) (collection . "tablesci") (conflicts . ()) (date-added . 1586683747) (dependencies . ("base" "beautiful-racket-lib" "brag-lib" "rackunit-lib")) (description . "A simple, easy to read language for working with (mostly) numbers and (in the near future) tables. ") (implies . ()) (last-checked . 1632904650) (last-edit . 1586683747) (last-updated . 1620470195) (modules . ((lib "tablesci/expander.rkt") (lib "tablesci/tokenizer.rkt") (lib "tablesci/parser.rkt") (lib "tablesci/main.rkt") (lib "tablesci/test-run.rkt") (lib "tablesci/parse-only-test.rkt") (lib "tablesci/lexer.rkt") (lib "tablesci/parse-only.rkt"))) (name . "tablesci") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:hashim.muqtadir@gmail.com . #t) (ring:1 . #t))) (source . "https://gitlab.com/hashimmm/tablesci.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "43c4544d64e9d218acabe167bfa3c894fa6f5f42") (source . "https://gitlab.com/hashimmm/tablesci.git") (source_url . "https://gitlab.com/hashimmm/tablesci.git"))))))) ("tabtree" . #hasheq((author . "denis.shirshov@gmail.com") (authors . ("denis.shirshov@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/tabtree.txt") (docs . (("main" "tabtree" "doc/tabtree@tabtree/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tabtree.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tabtree.txt"))) (checksum . "dd4e15b9e81b0461f5ff3e96040cb6e26c058516") (checksum-error . #f) (collection . "tabtree") (conflicts . ()) (date-added . 1618757106) (dependencies . ("odysseus" "compatibility-lib" "racket-doc" "scribble-lib")) (description . "A library to handle files of Tabtree format") (implies . ()) (last-checked . 1632904651) (last-edit . 1618757106) (last-updated . 1628016341) (modules . ((lib "tabtree/docs/tabtree.scrbl") (lib "tabtree/template-functions.rkt") (lib "tabtree/html.rkt") (lib "tabtree/main.rkt") (lib "tabtree/utils.rkt"))) (name . "tabtree") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:denis.shirshov@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/prozion/tabtree.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "dd4e15b9e81b0461f5ff3e96040cb6e26c058516") (source . "https://github.com/prozion/tabtree.git") (source_url . "https://github.com/prozion/tabtree.git"))))))) ("tabular" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tabular.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tabular.txt"))) (checksum . "b0440d5443f4f0e81dcd7eba4f5709c91b873a3b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "data-lib" "htdp-lib")) (description . "Experimental tabular data package") (implies . ()) (last-checked . 1632904651) (last-edit . 1471901163) (last-updated . 1630312034) (modules . ((lib "tabular/main.rkt") (lib "tabular/google.rkt"))) (name . "tabular") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/tonyg/racket-tabular") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b0440d5443f4f0e81dcd7eba4f5709c91b873a3b") (source . "git://github.com/tonyg/racket-tabular") (source_url . "http://github.com/tonyg/racket-tabular/tree/master"))))))) ("tabular-asa" . #hasheq((author . "massung@gmail.com") (authors . ("massung@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tabular-asa" "doc/tabular-asa@tabular-asa/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tabular-asa.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tabular-asa.txt"))) (checksum . "cb7b2c0390279505c16600dbd604547813983599") (checksum-error . #f) (collection . "tabular-asa") (conflicts . ()) (date-added . 1628270447) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc" "scribble-doc" "csv-reading")) (description . "A fast, efficient, immutable, dataframes implementation.") (implies . ()) (last-checked . 1632904651) (last-edit . 1628270447) (last-updated . 1628392347) (modules . ((lib "tabular-asa/orderable.rkt") (lib "tabular-asa/utils.rkt") (lib "tabular-asa/scribblings/tabular-asa.scrbl") (lib "tabular-asa/print.rkt") (lib "tabular-asa/main.rkt") (lib "tabular-asa/write.rkt") (lib "tabular-asa/for.rkt") (lib "tabular-asa/test/test.rkt") (lib "tabular-asa/examples/sample.rkt") (lib "tabular-asa/table.rkt") (lib "tabular-asa/read.rkt") (lib "tabular-asa/join.rkt") (lib "tabular-asa/index.rkt") (lib "tabular-asa/group.rkt") (lib "tabular-asa/column.rkt"))) (name . "tabular-asa") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:massung@gmail.com . #t) (column . #t) (csv . #t) (data . #t) (data-frame . #t) (index . #t) (json . #t) (ring:1 . #t) (table . #t))) (source . "https://github.com/massung/tabular-asa.git") (tags . ("column" "csv" "data" "data-frame" "index" "json" "table")) (versions . #hash((default . #hasheq((checksum . "cb7b2c0390279505c16600dbd604547813983599") (source . "https://github.com/massung/tabular-asa.git") (source_url . "https://github.com/massung/tabular-asa.git"))))))) ("taglib" . #hasheq((author . "asumu@ccs.neu.edu") (authors . ("asumu@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "taglib" "doc/taglib@taglib/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/taglib.txt") (test-failure-log . "server/built/test-fail/taglib.txt") (test-success-log . #f))) (checksum . "69b0494bac4cf2d4c6b99701c7b586bdb827a0a3") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Bindings to the taglib C library, which provides simple access to audio file metadata.") (implies . ()) (last-checked . 1632904651) (last-edit . 1352400326) (last-updated . 1502816472) (modules . ((lib "taglib/main.rkt") (lib "taglib/taglib.rkt") (lib "taglib/scribblings/taglib.scrbl"))) (name . "taglib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:asumu@ccs.neu.edu . #t) (ring:1 . #t))) (source . "github://github.com/takikawa/taglib-racket/master") (tags . ("audio")) (versions . #hash((default . #hasheq((checksum . "69b0494bac4cf2d4c6b99701c7b586bdb827a0a3") (source . "github://github.com/takikawa/taglib-racket/master") (source_url . "http://github.com/takikawa/taglib-racket/tree/master"))))))) ("talk-typer" . #hasheq((author . "spencer@florence.io") (authors . ("spencer@florence.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/talk-typer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/talk-typer.txt"))) (checksum . "24c5779e4d5b9548f96ac66d7c638c9bef0e7428") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "data-lib" "drracket-plugin-lib")) (description . "A tool to make live coding during talks easier") (implies . ()) (last-checked . 1632904651) (last-edit . 1473866914) (last-updated . 1502816472) (modules . ((lib "talk-typer/private/text.rkt") (lib "talk-typer/tool.rkt"))) (name . "talk-typer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:spencer@florence.io . #t) (ring:1 . #t))) (source . "git://github.com/florence/talk-typer") (tags . ()) (versions . #hash((default . #hasheq((checksum . "24c5779e4d5b9548f96ac66d7c638c9bef0e7428") (source . "git://github.com/florence/talk-typer") (source_url . "http://github.com/florence/talk-typer/tree/master"))))))) ("tandem" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tandem" "doc/tandem@tandem/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tandem.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tandem.txt"))) (checksum . "fa6bae480f6f4a3ae411ca5c3bad7ae5f8d106ac") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "racket-doc")) (description . "Cooperative Communication Framework for Racket") (implies . ()) (last-checked . 1632904652) (last-edit . 1384508973) (last-updated . 1502816472) (modules . ((lib "tandem/main.rkt") (lib "tandem/tandem.scrbl"))) (name . "tandem") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-tandem/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "fa6bae480f6f4a3ae411ca5c3bad7ae5f8d106ac") (source . "github://github.com/mordae/racket-tandem/master") (source_url . "http://github.com/mordae/racket-tandem/tree/master"))))))) ("taskibble" . #hasheq((author . "hi@that.world") (authors . ("hi@that.world")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/taskibble.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/taskibble.txt"))) (checksum . "c333907e04ab23b0a79cd7c763f691dd743897ac") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "base" "compatibility-lib" "planet-lib" "net-lib" "at-exp-lib" "draw-lib" "syntax-color-lib" "sandbox-lib" "typed-racket-lib" "datalog" "rackunit-lib")) (description . "Fork of Scribble for task management") (implies . ()) (last-checked . 1632904652) (last-edit . 1487386684) (last-updated . 1502816473) (modules . ((lib "taskibble/private/on-demand.rkt") (lib "taskibble/doclang.rkt") (lib "taskibble/pdf-render.rkt") (lib "taskibble/render-struct.rkt") (lib "taskibble/html-properties.rkt") (lib "taskibble/basic.rkt") (lib "taskibble/base.rkt") (lib "taskibble/private/run-pdflatex.rkt") (lib "taskibble/run.rkt") (lib "taskibble/decode.rkt") (lib "taskibble/private/defaults.rkt") (lib "taskibble/private/indirect-renderer.rkt") (lib "taskibble/latex-render.rkt") (lib "taskibble/core.rkt") (lib "taskibble/latex-properties.rkt") (lib "taskibble/doc/lang/reader.rkt") (lib "taskibble/xref.rkt") (lib "taskibble/private/provide-structs.rkt") (lib "taskibble/private/literal-anchor.rkt") (lib "taskibble/struct.rkt") (lib "taskibble/private/qsloc.rkt") (lib "taskibble/decode-struct.rkt") (lib "taskibble/private/render-utils.rkt") (lib "taskibble/latex-prefix.rkt") (lib "taskibble/doc/main.rkt") (lib "taskibble/render.rkt") (lib "taskibble/base-render.rkt") (lib "taskibble/private/serialize.rkt") (lib "taskibble/doclang2.rkt") (lib "taskibble/config.rkt") (lib "taskibble/search.rkt") (lib "taskibble/tag.rkt") (lib "taskibble/extract.rkt"))) (name . "taskibble") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:hi@that.world . #t) (ring:1 . #t))) (source . "git://github.com/sorpaas/taskibble") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c333907e04ab23b0a79cd7c763f691dd743897ac") (source . "git://github.com/sorpaas/taskibble") (source_url . "http://github.com/sorpaas/taskibble/tree/master"))))))) ("tasks" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tasks" "doc/tasks@tasks/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tasks.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tasks.txt"))) (checksum . "2d2e1e096fec61da49531a86421d7e7eb4a9f3df") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Sugar for sync.") (implies . ()) (last-checked . 1632904653) (last-edit . 1385477023) (last-updated . 1502816473) (modules . ((lib "tasks/tasks.scrbl") (lib "tasks/main.rkt"))) (name . "tasks") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-tasks/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2d2e1e096fec61da49531a86421d7e7eb4a9f3df") (source . "github://github.com/mordae/racket-tasks/master") (source_url . "http://github.com/mordae/racket-tasks/tree/master"))))))) ("teachpacks" . #hasheq((author . "tyynetyyne@gmail.com") (authors . ("tyynetyyne@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/teachpacks.txt") (docs . (("main" "racket_turtle" "doc/racket_turtle@teachpacks/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/teachpacks.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/teachpacks.txt"))) (checksum . "f82605dc2de7e6b6267fe2b2e6a6481a1ab33a35") (checksum-error . #f) (collection . "teachpacks") (conflicts . ()) (dependencies . ("gui-lib" "base" "htdp-lib" "plot-gui-lib" "plot-lib" "scribble-lib" "scribble-doc" "htdp-doc" "racket-doc")) (description . "Racket Turtle for drawing turtle-graphics.") (implies . ()) (last-checked . 1632904653) (last-edit . 1440666321) (last-updated . 1508317933) (modules . ((lib "teachpacks/plot.rkt") (lib "teachpacks/display-read.rkt") (lib "teachpacks/plot2D.rkt") (lib "teachpacks/display-read-touch.rkt") (lib "teachpacks/doc/racket_turtle_functions.scrbl") (lib "teachpacks/big-crunch.rkt") (lib "teachpacks/doc/racket_turtle_examples.scrbl") (lib "teachpacks/racket-turtle.rkt") (lib "teachpacks/doc/racket_turtle_functionality.scrbl") (lib "teachpacks/doc/racket_turtle.scrbl") (lib "teachpacks/doc/racket_turtle_examples_recursion.scrbl") (lib "teachpacks/plot2.rkt") (lib "teachpacks/game-helper.rkt") (lib "teachpacks/doc/racket_turtle_commands.scrbl") (lib "teachpacks/math-utils.rkt"))) (name . "teachpacks") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:tyynetyyne@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/tyynetyyne/teachpacks.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f82605dc2de7e6b6267fe2b2e6a6481a1ab33a35") (source . "git://github.com/tyynetyyne/teachpacks.git") (source_url . "http://github.com/tyynetyyne/teachpacks.git/tree/master"))))))) ("temp-c" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/temp-c.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/temp-c.txt"))) (checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("temp-c-lib" "temp-c-doc")) (description . "temporal contracts") (implies . ("temp-c-lib" "temp-c-doc")) (last-checked . 1632904653) (last-edit . 1438288079) (last-updated . 1502816474) (modules . ()) (name . "temp-c") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (contracts . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/temp-c/?path=temp-c") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (source . "git://github.com/jeapostrophe/temp-c/?path=temp-c") (source_url . "git://github.com/jeapostrophe/temp-c/?path=temp-c"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("temp-c-doc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "temp-c" "doc/temp-c@temp-c-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/temp-c-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/temp-c-doc.txt"))) (checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (checksum-error . #f) (collection . "temp-c") (conflicts . ()) (dependencies . (("base" #:version "6.2.900.4") "temp-c-lib" "scribble-lib" "automata" "racket-doc")) (description . "temporal contracts") (implies . ()) (last-checked . 1632904653) (last-edit . 1504535626) (last-updated . 1502816475) (modules . ((lib "temp-c/scribblings/temp-c.scrbl"))) (name . "temp-c-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (contracts . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/temp-c?path=temp-c-doc") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (source . "git://github.com/jeapostrophe/temp-c?path=temp-c-doc") (source_url . "http://github.com/jeapostrophe/temp-c/tree/master?path=temp-c-doc"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("temp-c-lib" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/temp-c-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/temp-c-lib.txt"))) (checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (checksum-error . #f) (collection . "temp-c") (conflicts . ()) (dependencies . (("base" #:version "6.2.900.4") "automata-lib")) (description . "temporal contracts") (implies . ()) (last-checked . 1632904653) (last-edit . 1504535573) (last-updated . 1502816475) (modules . ((lib "temp-c/dsl.rkt") (lib "temp-c/monitor.rkt"))) (name . "temp-c-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (contracts . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/temp-c?path=temp-c-lib") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (source . "git://github.com/jeapostrophe/temp-c?path=temp-c-lib") (source_url . "http://github.com/jeapostrophe/temp-c/tree/master?path=temp-c-lib"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("temp-c-test" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/temp-c-test.txt") (test-failure-log . "server/built/test-fail/temp-c-test.txt") (test-success-log . #f))) (checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (checksum-error . #f) (collection . "automata") (conflicts . ()) (dependencies . (("base" #:version "6.2.900.4") "temp-c-lib" "eli-tester" "errortrace-lib" "racket-test")) (description . "temporal contracts") (implies . ()) (last-checked . 1632904654) (last-edit . 1504535435) (last-updated . 1502816475) (modules . ((lib "automata/tests/ttt-bench.rkt") (lib "automata/tests/bench-affine.rkt") (lib "automata/tests/ex-mem.rkt") (lib "automata/tests/ex-memclass.rkt") (lib "automata/tests/future-ctc.rkt") (lib "automata/tests/test-temporal-no-call-after-return2.rkt") (lib "automata/tests/ttt-players.rkt") (lib "automata/tests/dr-err.rkt") (lib "automata/tests/ex-matthias-a.rkt") (lib "automata/tests/bench.rkt") (lib "automata/tests/ex-dsl.rkt") (lib "automata/tests/id-bench.rkt") (lib "automata/tests/ex-matthias-ctc.rkt") (lib "automata/tests/ex-matthias.rkt") (lib "automata/tests/ttt-bench-raw.rkt") (lib "automata/tests/ex-con.rkt") (lib "automata/tests/ttt-bench-ctc.rkt") (lib "automata/tests/dr-err-help.rkt") (lib "automata/tests/ex-lock.rkt") (lib "automata/tests/ttt-bench-com.rkt") (lib "automata/tests/ex-matthias-b.rkt") (lib "automata/tests/test-temporal-no-call-after-return.rkt") (lib "automata/tests/ttt.rkt"))) (name . "temp-c-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jay.mccarthy@gmail.com . #t) (contracts . #t) (ring:1 . #t))) (source . "git://github.com/jeapostrophe/temp-c?path=temp-c-test") (tags . ("contracts")) (versions . #hash((default . #hasheq((checksum . "43f7f2141c81a301aa229ef4105f458eee070653") (source . "git://github.com/jeapostrophe/temp-c?path=temp-c-test") (source_url . "http://github.com/jeapostrophe/temp-c/tree/master?path=temp-c-test"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("template" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "template" "doc/template@template/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/template.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/template.txt"))) (checksum . "7e8cd438cdc168b74b1a23721d3410be330de209") (checksum-error . #f) (collection . "template") (conflicts . ()) (date-added . 1575763855) (dependencies . ("base" "debug-scopes" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "Template Macros") (implies . ()) (last-checked . 1632904654) (last-edit . 1577756580) (last-updated . 1585246313) (modules . ((lib "template/scribblings/lang-template.rkt") (lib "template/lang.rkt") (lib "template/scribblings/template-includes.rkt") (lib "template/tests/primitives.rkt") (lib "template/tests/module-templates.rkt") (lib "template/main.rkt") (lib "template/tests/scopes.rkt") (lib "template/tests/literals.rkt") (lib "template/tests/combiners.rkt") (lib "template/scribblings/template.scrbl") (lib "template/tests/binding-forms.rkt"))) (name . "template") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:dedbox@gmail.com . #t) (macro . #t) (ring:1 . #t) (template . #t))) (source . "https://github.com/dedbox/racket-template.git") (tags . ("macro" "template")) (versions . #hash((default . #hasheq((checksum . "7e8cd438cdc168b74b1a23721d3410be330de209") (source . "https://github.com/dedbox/racket-template.git") (source_url . "https://github.com/dedbox/racket-template.git"))))))) ("termconfig" . #hasheq((author . "zacharysdodge@gmail.com") (authors . ("zacharysdodge@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "termconfig" "doc/termconfig@termconfig/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/termconfig.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/termconfig.txt"))) (checksum . "620c2fee9491186fc5faf8a5d2b4c0eb67062657") (checksum-error . #f) (collection . "termconfig") (conflicts . ()) (date-added . 1611358443) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Cross-platform terminal helper library in Racket.") (implies . ()) (last-checked . 1632904654) (last-edit . 1611453658) (last-updated . 1611597297) (modules . ((lib "termconfig/scribblings/termconfig.scrbl") (lib "termconfig/main.rkt") (lib "termconfig/private/unix.rkt") (lib "termconfig/private/windows.rkt") (lib "termconfig/private/common.rkt"))) (name . "termconfig") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zacharysdodge@gmail.com . #t) (helper . #t) (library . #t) (ring:1 . #t) (terminal . #t))) (source . "https://github.com/dodgez/termconfig.git#main") (tags . ("helper" "library" "terminal")) (versions . #hash((default . #hasheq((checksum . "620c2fee9491186fc5faf8a5d2b4c0eb67062657") (source . "https://github.com/dodgez/termconfig.git#main") (source_url . "https://github.com/dodgez/termconfig.git#main"))))))) ("terminal-phase" . #hasheq((author . "cwebber@dustycloud.org") (authors . ("cwebber@dustycloud.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/terminal-phase.txt") (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/terminal-phase.txt") (success-log . "server/built/install/terminal-phase.txt") (test-failure-log . "server/built/test-fail/terminal-phase.txt") (test-success-log . #f))) (checksum . "ecf6f068c265de812d3decd003144ba4a2dd1e2b") (checksum-error . #f) (collection . "terminal-phase") (conflicts . ()) (date-added . 1579464975) (dependencies . ("lux" "goblins" "pk" "raart" "ansi")) (description . "Terminal Phase is a space shooter video game that runs in your terminal!") (implies . ()) (last-checked . 1632904654) (last-edit . 1579465013) (last-updated . 1631054325) (modules . ((lib "terminal-phase/ring-buffer.rkt") (lib "terminal-phase/raart-render.rkt") (lib "terminal-phase/terminal-phase.rkt") (lib "terminal-phase/main-menu.rkt") (lib "terminal-phase/posinfo.rkt") (lib "terminal-phase/pwd.rkt") (lib "terminal-phase/level.rkt") (lib "terminal-phase/braille-rast.rkt") (lib "terminal-phase/logo.rkt") (lib "terminal-phase/aim.rkt") (lib "terminal-phase/level-tape.rkt") (lib "terminal-phase/loopdown.rkt") (lib "terminal-phase/no-op.rkt") (lib "terminal-phase/score.rkt") (lib "terminal-phase/level-const.rkt") (lib "terminal-phase/starfield.rkt") (lib "terminal-phase/credits.rkt") (lib "terminal-phase/sprites.rkt"))) (name . "terminal-phase") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:cwebber@dustycloud.org . #t) (game . #t) (games . #t) (ring:1 . #t))) (source . "https://gitlab.com/dustyweb/terminal-phase.git") (tags . ("game" "games")) (versions . #hash(("1.0" . #hasheq((checksum . "036d7fa053de8e590dc5e53b9cdf6f72f2e9aa1a") (source . "https://gitlab.com/dustyweb/terminal-phase.git#v1.0") (source_url . "https://gitlab.com/dustyweb/terminal-phase.git#v1.0"))) (default . #hasheq((checksum . "ecf6f068c265de812d3decd003144ba4a2dd1e2b") (source . "https://gitlab.com/dustyweb/terminal-phase.git") (source_url . "https://gitlab.com/dustyweb/terminal-phase.git"))))))) ("termination" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/termination.txt") (test-failure-log . "server/built/test-fail/termination.txt") (test-success-log . #f))) (checksum . "1d05c1bf8e9bd59d2fbaaa213b490fd8e59644bd") (checksum-error . #f) (collection . "termination") (conflicts . ()) (dependencies . ("profile-lib" "r5rs-lib" "rackunit-lib" "base" "typed-racket-lib" "typed-racket-more" "bnf" "set-extras" "unreachable" "traces")) (description . "Dynamic enforcement of size-change termination") (implies . ()) (last-checked . 1632904655) (last-edit . 1522411969) (last-updated . 1559185264) (modules . ((lib "termination/tests/Dyn/acl2-fig-2.rkt") (lib "termination/tests/Dyn/isabelle-foo.rkt") (lib "termination/tests/Dyn/benchmarks/cm/interp-fact.rkt") (lib "termination/tests/Dyn/isabelle-f.rkt") (lib "termination/tests/Dyn/benchmarks/cm/mergesort.rkt") (lib "termination/tests/Dyn/destruct.rkt") (lib "termination/size-change-graph.rkt") (lib "termination/tests/Dyn/benchmarks/cm/fact.rkt") (lib "termination/tests/Dyn/buggy-versions/sct-5.rkt") (lib "termination/tests/Dyn/buggy-versions/sct-6.rkt") (lib "termination/tests/Dyn/sct-1.rkt") (lib "termination/flow-analysis/analyze.rkt") (lib "termination/tests/Dyn/buggy-versions/lh-gcd.rkt") (lib "termination/tests/Dyn/ho-sct-fg.rkt") (lib "termination/tests/Dyn/benchmarks/unchecked/sum.rkt") (lib "termination/tests/Dyn/buggy-versions/sct-1.rkt") (lib "termination/tests/Dyn/dderiv.rkt") (lib "termination/micro-benchmarks.rkt") (lib "termination/unsafe.rkt") (lib "termination/tests/Dyn/buggy-versions/sct-2.rkt") (lib "termination/tests/Dyn/benchmarks/imp/fact.rkt") (lib "termination/tests/Dyn/benchmarks/imp/interp-sum.rkt") (lib "termination/syntax-utils.rkt") (lib "termination/tests/Dyn/benchmarks/cm/interp-sum.rkt") (lib "termination/tests/Dyn/nfa.rkt") (lib "termination/tests/Dyn/buggy-versions/sct-4.rkt") (lib "termination/tests/Dyn/ho-sct-fold.rkt") (lib "termination/tests/Dyn/isabelle-perm.rkt") (lib "termination/tests/Dyn/benchmarks/imp/mergesort.rkt") (lib "termination/tests/Dyn/benchmarks/unchecked/interp-fact.rkt") (lib "termination/tests/Dyn/scheme.rkt") (lib "termination/tests/Dyn/buggy-versions/destruct.rkt") (lib "termination/tests/Dyn/benchmarks/imp/sum.rkt") (lib "termination/tests/Dyn/buggy-versions/ho-sct-fg.rkt") (lib "termination/tests/Dyn/benchmarks/unchecked/mergesort.rkt") (lib "termination/tests/Dyn/benchmarks/unchecked/interp-mergesort.rkt") (lib "termination/tests/Dyn/buggy-versions/div.rkt") (lib "termination/tests/Dyn/buggy-versions/acl2-fig-6.rkt") (lib "termination/tests/Dyn/lh-tfact.rkt") (lib "termination/tests/Dyn/lh-range.rkt") (lib "termination/tests/Dyn/benchmarks/imp/interp-fact.rkt") (lib "termination/tests/Dyn/buggy-versions/lh-range.rkt") (lib "termination/tests/Dyn/buggy-versions/acl2-fig-7.rkt") (lib "termination/flow-analysis/lang.rkt") (lib "termination/flow-analysis/main.rkt") (lib "termination/tests/Dyn/buggy-versions/acl2-fig-2.rkt") (lib "termination/tests/Dyn/buggy-versions/isabelle-foo.rkt") (lib "termination/flattened-parameter.rkt") (lib "termination/tests/Dyn/benchmarks/cm/interp-mergesort.rkt") (lib "termination/tests/Dyn/div.rkt") (lib "termination/apply-with-termination.rkt") (lib "termination/tests/Dyn/sct-5.rkt") (lib "termination/tests/Dyn/buggy-versions/dderiv.rkt") (lib "termination/tests/Dyn/lh-merge.rkt") (lib "termination/tests/Dyn/buggy-versions/ho-sct-fold.rkt") (lib "termination/tests/Dyn/buggy-versions/lh-merge.rkt") (lib "termination/main.rkt") (lib "termination/tests/Dyn/buggy-versions/ho-sct-ack.rkt") (lib "termination/tests/Dyn/deriv.rkt") (lib "termination/tests/Dyn/benchmarks/unchecked/fact.rkt") (lib "termination/tests/Dyn/lh-map.rkt") (lib "termination/tests/Dyn/buggy-versions/isabelle-perm.rkt") (lib "termination/runtime-utils.rkt") (lib "termination/tests/Dyn/buggy-versions/isabelle-f.rkt") (lib "termination/tests/Dyn/benchmarks/common.rkt") (lib "termination/flow-analysis/utils.rkt") (lib "termination/tests/Dyn/sct-6.rkt") (lib "termination/tests/Dyn/buggy-versions/scheme.rkt") (lib "termination/tests/Dyn/sct-4.rkt") (lib "termination/tests/Dyn/buggy-versions/lh-tfact.rkt") (lib "termination/test.rkt") (lib "termination/tests/Dyn/sct-2.rkt") (lib "termination/tests/Dyn/buggy-versions/deriv.rkt") (lib "termination/tests/Dyn/benchmarks/imp/interp-mergesort.rkt") (lib "termination/tests/Dyn/benchmarks/cm/sum.rkt") (lib "termination/tests/Dyn/sct-3.rkt") (lib "termination/tests/Dyn/buggy-versions/nfa.rkt") (lib "termination/tests/Dyn/buggy-versions/lh-map.rkt") (lib "termination/flow-analysis/parse.rkt") (lib "termination/tests/Dyn/isabelle-bar.rkt") (lib "termination/tests/Dyn/benchmarks/unchecked/interp-sum.rkt") (lib "termination/tests/Dyn/acl2-fig-7.rkt") (lib "termination/tests/Dyn/isabelle-poly.rkt") (lib "termination/tests/Dyn/ho-sct-ack.rkt") (lib "termination/tests/Dyn/lh-gcd.rkt") (lib "termination/tests/Dyn/acl2-fig-6.rkt") (lib "termination/unsafe-apply-with-termination.rkt") (lib "termination/tests/Dyn/buggy-versions/sct-3.rkt") (lib "termination/tests/Dyn/buggy-versions/isabelle-poly.rkt") (lib "termination/tests/Dyn/buggy-versions/isabelle-bar.rkt"))) (name . "termination") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pcn@cs.umd.edu . #t) (contracts . #t) (ring:1 . #t) (termination . #t))) (source . "https://github.com/philnguyen/termination.git?path=termination") (tags . ("contracts" "termination")) (versions . #hash((default . #hasheq((checksum . "1d05c1bf8e9bd59d2fbaaa213b490fd8e59644bd") (source . "https://github.com/philnguyen/termination.git?path=termination") (source_url . "https://github.com/philnguyen/termination.git?path=termination"))))))) ("termios" . #hasheq((author . "bprzygoda@gmail.com") (authors . ("bprzygoda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/termios.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "b6632c54c587577c0cce86e62a72e9b09c38342e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "FFI bindings to POSIX terminal interface functions") (implies . ()) (last-checked . 1632904655) (last-edit . 1424731185) (last-updated . 1502816475) (modules . ((lib "termios/main.rkt") (lib "termios/defines.rkt") (lib "termios/termios.rkt") (lib "termios/private/install.rkt"))) (name . "termios") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:bprzygoda@gmail.com . #t) (ffi . #t) (linux . #t) (posix . #t) (ring:1 . #t) (termios . #t))) (source . "git://github.com/BartAdv/racket-termios") (tags . ("ffi" "linux" "posix" "termios")) (versions . #hash((default . #hasheq((checksum . "b6632c54c587577c0cce86e62a72e9b09c38342e") (source . "git://github.com/BartAdv/racket-termios") (source_url . "http://github.com/BartAdv/racket-termios/tree/master"))))))) ("tesira" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tesira" "doc/tesira@tesira/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tesira.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tesira.txt"))) (checksum . "47ae8cd92ad3b2610a3f95db9ba3e16db6b24d48") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "typed-racket-lib" "parser-tools-lib" "typed-racket-more" "mordae" "racket-doc" "typed-racket-doc" "typed-racket-lib")) (description . "Biamp Tesira Client Library") (implies . ()) (last-checked . 1632904655) (last-edit . 1439289370) (last-updated . 1502816476) (modules . ((lib "tesira/util.scrbl") (lib "tesira/tesira.scrbl") (lib "tesira/private/encoding.rkt") (lib "tesira/encoding.rkt") (lib "tesira/telnet.rkt") (lib "tesira/util.rkt") (lib "tesira/mixer.rkt") (lib "tesira/main.rkt"))) (name . "tesira") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/mordae/racket-tesira") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "47ae8cd92ad3b2610a3f95db9ba3e16db6b24d48") (source . "git://github.com/mordae/racket-tesira") (source_url . "http://github.com/mordae/racket-tesira/tree/master"))))))) ("tessellation" . #hasheq((author . "zacromero@posteo.net") (authors . ("zacromero@posteo.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "tessellation"))) (failure-log . "server/built/fail/tessellation.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "6f881912eb35592f96539485e7bdd62bdc329528") (checksum-error . #f) (collection . "tessellation") (conflicts . ()) (date-added . 1591432791) (dependencies . ("base" "metapict" "scribble-lib")) (description . "A library to assist in the creation of geometric designs.") (implies . ()) (last-checked . 1632904655) (last-edit . 1591432791) (last-updated . 1593955433) (modules . ((lib "tessellation/example1.rkt") (lib "tessellation/tessellation.rkt") (lib "tessellation/main.rkt") (lib "tessellation/scribblings/tessellation.scrbl"))) (name . "tessellation") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:no-tag: . #t) (author:zacromero@posteo.net . #t) (ring:1 . #t))) (source . "https://github.com/zkry/tessellation.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6f881912eb35592f96539485e7bdd62bdc329528") (source . "https://github.com/zkry/tessellation.git") (source_url . "https://github.com/zkry/tessellation.git"))))))) ("tesseract" . #hasheq((author . "lasfter@gmail.com") (authors . ("lasfter@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/tesseract.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ef1da2619bf4814ff75a840b8a3e42eaf10cfb01") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: git://github.com/lasfter/tesseracket\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ("base")) (description . "Bindings for Google's Tesseract-OCR") (implies . ()) (last-checked . 1632904656) (last-edit . 1429408989) (last-updated . 1621810095) (modules . ((lib "main/tesseracket.rkt"))) (name . "tesseract") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:lasfter@gmail.com . #t) (google . #t) (ocr . #t) (ring:1 . #t) (tesseract . #t))) (source . "git://github.com/lasfter/tesseracket") (tags . ("google" "ocr" "tesseract")) (versions . #hash((default . #hasheq((checksum . "ef1da2619bf4814ff75a840b8a3e42eaf10cfb01") (source . "git://github.com/lasfter/tesseracket") (source_url . "http://github.com/lasfter/tesseracket/tree/master"))))))) ("test-more" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/test-more.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/test-more.txt"))) (checksum . "659c90a27ffd575bf95b0eb60ec594a3e7420f16") (checksum-error . #f) (collection . "test-more") (conflicts . ()) (dependencies . ("base")) (description . "A Racket version of the Perl Test::More module.  As compared to default Racket tests, this:  Shows results for all tests, not just failing ones.  Returns values from tests to simplify conditional tests. Much more flexible approximation testing.  Shorter test names.  Docs are in the README.md") (implies . ()) (last-checked . 1632904656) (last-edit . 1536777754) (last-updated . 1556752476) (modules . ((lib "test-more/tests/test-main.rkt") (lib "test-more/main.rkt"))) (name . "test-more") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:david.storrs@gmail.com . #t) (ring:1 . #t) (test . #t) (testing . #t))) (source . "https://github.com/dstorrs/racket-test-more.git") (tags . ("test" "testing")) (versions . #hash((default . #hasheq((checksum . "659c90a27ffd575bf95b0eb60ec594a3e7420f16") (source . "https://github.com/dstorrs/racket-test-more.git") (source_url . "https://github.com/dstorrs/racket-test-more.git"))))))) ("test-sorawee" . #hasheq((author . "") (authors . ()) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/test-sorawee.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Package test-sorawee is missing a required field: 'source\n  context...:\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (implies . ()) (last-checked . 1632904656) (last-edit . 1632906423) (last-updated . 1621810095) (modules . ()) (name . "test-sorawee") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (ring:1 . #t))) (source . "") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "") (source_url . ""))))))) ("testing-util-lib" . #hash((author . "florence@racket-lang.org") (authors . ("florence@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "048d7045ad38e26d5c07f54de570caeba0d74130") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "For tracking test results and displaying a summary message (used by RackUnit)") (implies . ()) (last-checked . 1632904656) (last-edit . 1461953291) (last-updated . 1628217467) (modules . ((lib "rackunit/log.rkt"))) (name . "testing-util-lib") (ring . 1) (search-terms . #hasheq((author:florence@racket-lang.org . #t) (main-distribution . #t) (ring:1 . #t))) (source . "git://github.com/racket/rackunit/?path=testing-util-lib") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "048d7045ad38e26d5c07f54de570caeba0d74130") (source . "git://github.com/racket/rackunit/?path=testing-util-lib") (source_url . "git://github.com/racket/rackunit/?path=testing-util-lib"))))))) ("tesurell" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "tesurell"))) (failure-log . "server/built/fail/tesurell.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "e4010930062d0741081ddb454d4c749e6754672d") (checksum-error . #f) (collection . "tesurell") (conflicts . ()) (date-added . 1583943202) (dependencies . ("base" "compatibility-lib" "at-exp-lib" "scribble-lib" "racket-doc" "rackunit-lib" "at-exp-lib")) (description . "Tesurell is a Racket-powered markup language that supports inline use of other #langs, including itself. When used as a module, Tesurell acts as sugar for reading and using #langs via input ports.") (implies . ()) (last-checked . 1632904656) (last-edit . 1583943202) (last-updated . 1588723529) (modules . ((lib "tesurell/lib.rkt") (lib "tesurell/scribblings/tesurell.scrbl") (lib "tesurell/main.rkt"))) (name . "tesurell") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:sage@sagegerard.com . #t) (lang . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/zyrolasting/tesurell.git") (tags . ("lang" "language")) (versions . #hash((default . #hasheq((checksum . "e4010930062d0741081ddb454d4c749e6754672d") (source . "https://github.com/zyrolasting/tesurell.git") (source_url . "https://github.com/zyrolasting/tesurell.git"))))))) ("tetris" . #hasheq((author . "mosceo@gmail.com") (authors . ("mosceo@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tetris.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tetris.txt"))) (checksum . "bbf9dc58b8b1606f574ebf1a466eeef278689a68") (checksum-error . #f) (collection . "tetris") (conflicts . ()) (dependencies . ("base" "htdp-lib" "rackunit-lib")) (description . "A colorful version of tetris.") (implies . ()) (last-checked . 1632904656) (last-edit . 1511608932) (last-updated . 1607266669) (modules . ((lib "tetris/main.rkt") (lib "tetris/unittest.rkt") (lib "tetris/tetris.rkt"))) (name . "tetris") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mosceo@gmail.com . #t) (games . #t) (ring:1 . #t) (tetris . #t))) (source . "https://github.com/mosceo/tetris.git") (tags . ("games" "tetris")) (versions . #hash((default . #hasheq((checksum . "bbf9dc58b8b1606f574ebf1a466eeef278689a68") (source . "https://github.com/mosceo/tetris.git") (source_url . "https://github.com/mosceo/tetris.git"))))))) ("tex-table" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "mrlib") (conflicts . ()) (dependencies . ("base")) (description . "Table of TeX-style abbreviations") (implies . ()) (last-checked . 1632904657) (last-edit . 1417659583) (last-updated . 1632757073) (modules . ((lib "mrlib/tex-table.rkt"))) (name . "tex-table") (ring . 0) (search-terms . #hasheq((author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "eeaa76d5a654b45f81c7c8caf9c39b0ed10a4e55") (source . "git://github.com/racket/gui/?path=tex-table") (source_url . "git://github.com/racket/gui/?path=tex-table"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("texmath" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "texmath" "doc/texmath@texmath/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/texmath.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/texmath.txt"))) (checksum . "9c775542b5473ed6aeedc7c45ecc6726fbd483fc") (checksum-error . #f) (collection . "texmath") (conflicts . ()) (date-added . 1553038358) (dependencies . ("base" "functional-lib" "megaparsack-lib" "scribble-lib" "racket-doc" "scribble-doc")) (description . "Pseudo-(La)TeX mathematical notation for Scribble") (implies . ()) (last-checked . 1632904657) (last-edit . 1553038358) (last-updated . 1561684524) (modules . ((lib "texmath/scribblings/sample.scrbl") (lib "texmath/scribblings/main.scrbl") (lib "texmath/main.rkt") (lib "texmath/inferrule.rkt"))) (name . "texmath") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (LaTeX . #t) (Math . #t) (author:dedbox@gmail.com . #t) (ring:1 . #t) (scribble . #t))) (source . "https://github.com/dedbox/racket-texmath.git") (tags . ("LaTeX" "Math" "scribble")) (versions . #hash((default . #hasheq((checksum . "9c775542b5473ed6aeedc7c45ecc6726fbd483fc") (source . "https://github.com/dedbox/racket-texmath.git") (source_url . "https://github.com/dedbox/racket-texmath.git"))))))) ("text-block" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "text-block" "doc/text-block@text-block/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/text-block.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/text-block.txt"))) (checksum . "3a0e639e5c7b4aead497efd9f76f5ecb38d28dc0") (checksum-error . #f) (collection . "text-block") (conflicts . ()) (date-added . 1626249920) (dependencies . ("define2" "base" "scribble-lib" "racket-doc" "rackunit-lib" "sandbox-lib")) (description . "Similar to pict, but for 2d unicode text and math formulas") (implies . ()) (last-checked . 1632904657) (last-edit . 1626249958) (last-updated . 1626889058) (modules . ((lib "text-block/examples/example3.rkt") (lib "text-block/main.rkt") (lib "text-block/scribblings/combiners.scrbl") (lib "text-block/scribblings/main.scrbl") (lib "text-block/scribblings/text.scrbl") (lib "text-block/examples/example2.rkt") (lib "text-block/tests/symbols.rkt") (lib "text-block/scribblings/symbols.scrbl") (lib "text-block/scribblings/datatype.scrbl") (lib "text-block/scribblings/example.rkt") (lib "text-block/scribblings/math.scrbl") (lib "text-block/symbols.rkt") (lib "text-block/text.rkt") (lib "text-block/math.rkt") (lib "text-block/tblock.rkt"))) (name . "text-block") (ring . 1) (search-terms . #hasheq((2D . #t) (:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (math . #t) (ring:1 . #t) (unicode . #t))) (source . "https://github.com/Metaxal/text-block.git") (tags . ("2D" "math" "unicode")) (versions . #hash((default . #hasheq((checksum . "3a0e639e5c7b4aead497efd9f76f5ecb38d28dc0") (source . "https://github.com/Metaxal/text-block.git") (source_url . "https://github.com/Metaxal/text-block.git"))))))) ("text-table" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "text-table" "doc/text-table@text-table/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/text-table.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/text-table.txt"))) (checksum . "f4981c379e376b415509c8939a389e3aab49353b") (checksum-error . #f) (collection . "text-table") (conflicts . ()) (dependencies . ("base" "sandbox-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A simple package to display text tables with utf-8 frames.") (implies . ()) (last-checked . 1632904657) (last-edit . 1506204348) (last-updated . 1624728994) (modules . ((lib "text-table/main.rkt") (lib "text-table/scribblings/text-table.scrbl"))) (name . "text-table") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:laurent.orseau@gmail.com . #t) (format . #t) (ring:1 . #t) (tabular . #t) (text . #t))) (source . "git://github.com/Metaxal/text-table") (tags . ("format" "tabular" "text")) (versions . #hash((default . #hasheq((checksum . "f4981c379e376b415509c8939a389e3aab49353b") (source . "git://github.com/Metaxal/text-table") (source_url . "http://github.com/Metaxal/text-table/tree/master"))))))) ("the-unicoder" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "the-unicoder" "doc/the-unicoder@the-unicoder/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/the-unicoder.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/the-unicoder.txt"))) (checksum . "c95473838a9f0893b1d39742b087203f702a540c") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1608151880) (dependencies . ("base" "gui-lib" ("unix-socket-lib" #:version "1.1") "tex-table" "basedir" "scribble-lib" "racket-doc")) (description . "Universal unicode input system") (implies . ()) (last-checked . 1632904657) (last-edit . 1608151880) (last-updated . 1615935194) (modules . ((lib "the-unicoder/server.rkt") (lib "the-unicoder/the-unicoder.scrbl") (lib "the-unicoder/misc-tables.rkt") (lib "the-unicoder/parse-unicode-data.rkt") (lib "the-unicoder/prompter.rkt") (lib "the-unicoder/user-tables.rkt") (lib "the-unicoder/config.rkt") (lib "the-unicoder/client.rkt") (lib "the-unicoder/main.rkt"))) (name . "the-unicoder") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (ring:1 . #t) (unicode . #t))) (source . "https://github.com/willghatch/the-unicoder.git") (tags . ("unicode")) (versions . #hash((default . #hasheq((checksum . "c95473838a9f0893b1d39742b087203f702a540c") (source . "https://github.com/willghatch/the-unicoder.git") (source_url . "https://github.com/willghatch/the-unicoder.git"))))))) ("this-and-that" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "chipmunk"))) (failure-log . "server/built/fail/this-and-that.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "6884ba21b0a9d049716abc0b46cecd7f952c6a68") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Small useful bits and pieces.") (implies . ()) (last-checked . 1632904658) (last-edit . 1362234825) (last-updated . 1628717852) (modules . ((lib "this-and-that/readtable/lang/reader.rkt") (lib "this-and-that/tmp/chipmunk/chipmunk-ffi.rkt") (lib "this-and-that/tmp/chipmunk/chipmunk.rkt") (lib "this-and-that/snoopy/1d-range-searching.rkt") (lib "this-and-that/heart-beat/in-effect.rkt") (lib "this-and-that/updatable-struct/updatable-struct.rkt") (lib "this-and-that/brevity/brevity.rkt") (lib "this-and-that/snoopy/2d-tree.rkt") (lib "this-and-that/memoize/memo.rkt") (lib "this-and-that/snoopy/1d-tree.rkt") (lib "this-and-that/readtable/lang/parse-reader-spec.rkt") (lib "this-and-that/tmp/racket-chipmunk/2d-tree.rkt") (lib "this-and-that/tmp/racket-chipmunk/1d-tree.rkt") (lib "this-and-that/readtable/test-clojure-maps.rkt") (lib "this-and-that/heart-beat/in-heart-beat.rkt") (lib "this-and-that/readtable/lang/converter.rkt") (lib "this-and-that/tmp/racket-chipmunk/racket-chipmunk.rkt") (lib "this-and-that/readtable/lang/pratt-parser.rkt") (lib "this-and-that/readtable/test.rkt") (lib "this-and-that/tmp/chipmunk/chipmunk.scrbl") (lib "this-and-that/readtable/lang/read-and-read-syntax.rkt") (lib "this-and-that/tmp/chipmunk/main.rkt") (lib "this-and-that/brevity/terse-hash.rkt") (lib "this-and-that/readtable/test2.rkt") (lib "this-and-that/memoize/test-memo.rkt") (lib "this-and-that/readers/read-number.rkt") (lib "this-and-that/snoopy/kd-tree.rkt") (lib "this-and-that/spell-checker/spell-checker.rkt") (lib "this-and-that/snoopy/racket-chipmunk.rkt") (lib "this-and-that/split-between.rkt") (lib "this-and-that/readtable/mv-parser.rkt") (lib "this-and-that/racket-poppler/racket-poppler.rkt") (lib "this-and-that/readtable/test-parser.rkt") (lib "this-and-that/declare/declare.rkt") (lib "this-and-that/readtable/pratt.rkt") (lib "this-and-that/lexer/lexer.rkt"))) (name . "this-and-that") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:no-tag: . #t) (author:jensaxel@soegaard.net . #t) (ring:1 . #t))) (source . "github://github.com/soegaard/this-and-that/master") (tags . ()) (versions . #hash((default . #hasheq((checksum . "6884ba21b0a9d049716abc0b46cecd7f952c6a68") (source . "github://github.com/soegaard/this-and-that/master") (source_url . "http://github.com/soegaard/this-and-that/tree/master"))))))) ("thread-utils" . #hasheq((author . "kalimehtar@mail.ru") (authors . ("kalimehtar@mail.ru")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "thread-utils" "doc/thread-utils@thread-utils/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/thread-utils.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/thread-utils.txt"))) (checksum . "f81ebfaf8453acb3a938917c1a505c94af92ef87") (checksum-error . #f) (collection . "thread-utils") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Error-safe infinite loop and until-timeout") (implies . ()) (last-checked . 1632904662) (last-edit . 1518799224) (last-updated . 1561122921) (modules . ((lib "thread-utils/scribblings/thread-utils.scrbl") (lib "thread-utils/main.rkt"))) (name . "thread-utils") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalimehtar@mail.ru . #t) (concurrency . #t) (ring:1 . #t) (utilities . #t))) (source . "https://github.com/Kalimehtar/thread-utils.git") (tags . ("concurrency" "utilities")) (versions . #hash((default . #hasheq((checksum . "f81ebfaf8453acb3a938917c1a505c94af92ef87") (source . "https://github.com/Kalimehtar/thread-utils.git") (source_url . "https://github.com/Kalimehtar/thread-utils.git"))))))) ("thread-with-id" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "thread-with-id" "doc/thread-with-id@thread-with-id/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/thread-with-id.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/thread-with-id.txt"))) (checksum . "0b5908a810b710bae7a8e0bc89f6468c81d12f92") (checksum-error . #f) (collection . "thread-with-id") (conflicts . ()) (date-added . 1591302129) (dependencies . ("base" "racket-doc" "sandbox-lib" "scribble-lib")) (description . "Provides  'thread-id' (parameter containing a randomly-chosen string identifier for the current thread) and 'thread-with-id' (function that takes a thunk and runs it in a new thread with a new randomly-generated ID.  thread IDs are strings of the form thread-{random number}.") (implies . ()) (last-checked . 1632904663) (last-edit . 1591302129) (last-updated . 1592246206) (modules . ((lib "thread-with-id/scribblings/thread-with-id.scrbl") (lib "thread-with-id/main.rkt"))) (name . "thread-with-id") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david.storrs@gmail.com . #t) (ring:1 . #t) (threading . #t))) (source . "https://github.com/dstorrs/thread-with-id.git") (tags . ("threading")) (versions . #hash((default . #hasheq((checksum . "0b5908a810b710bae7a8e0bc89f6468c81d12f92") (source . "https://github.com/dstorrs/thread-with-id.git") (source_url . "https://github.com/dstorrs/thread-with-id.git"))))))) ("threading" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/threading.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/threading.txt"))) (checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("threading-doc" "threading-lib")) (description . "") (implies . ("threading-doc" "threading-lib")) (last-checked . 1632904663) (last-edit . 1497304010) (last-updated . 1576185321) (modules . ()) (name . "threading") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (tags . ()) (versions . #hash(("6.0.1" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) ("5.93" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) ("5.92" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) (default . #hasheq((checksum . "13a34f14fe073c328e5cc083c616a602a79afa58") (source . "git://github.com/lexi-lambda/threading?path=threading") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading"))) ("6.2" . #hasheq((checksum . "dee85e8d3cffaed85eb27bed8a8c61fc1eea8395") (source . "git://github.com/lexi-lambda/threading?path=threading#compatibility-6.2") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading#compatibility-6.2"))) ("6.0" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) ("6.1" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) ("6.1.1" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) ("5.3.2" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) ("5.3.4" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) ("5.3.3" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) ("5.3.6" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) ("5.3.5" . #hasheq((checksum . "abed5715993ec2e53d201d55c3c9b57be30874fc") (source . "git://github.com/lexi-lambda/threading#compatibility-5.3.2-to-6.1") (source_url . "http://github.com/lexi-lambda/threading/tree/master#compatibility-5.3.2-to-6.1"))) ("6.2.1" . #hasheq((checksum . "dee85e8d3cffaed85eb27bed8a8c61fc1eea8395") (source . "git://github.com/lexi-lambda/threading?path=threading#compatibility-6.2") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading#compatibility-6.2"))))))) ("threading-doc" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "threading" "doc/threading@threading-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/threading-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/threading-doc.txt"))) (checksum . "13a34f14fe073c328e5cc083c616a602a79afa58") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "scribble-lib" "threading-lib")) (description . "documentation (no implementation) for “threading”") (implies . ()) (last-checked . 1632904666) (last-edit . 1497305804) (last-updated . 1576185323) (modules . ((lib "scribblings/threading.scrbl"))) (name . "threading-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/threading?path=threading-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "13a34f14fe073c328e5cc083c616a602a79afa58") (source . "git://github.com/lexi-lambda/threading?path=threading-doc") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading-doc"))) ("6.2" . #hasheq((checksum . "dee85e8d3cffaed85eb27bed8a8c61fc1eea8395") (source . "git://github.com/lexi-lambda/threading?path=threading-doc#compatibility-6.2") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading-doc#compatibility-6.2"))) ("6.2.1" . #hasheq((checksum . "dee85e8d3cffaed85eb27bed8a8c61fc1eea8395") (source . "git://github.com/lexi-lambda/threading?path=threading-doc#compatibility-6.2") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading-doc#compatibility-6.2"))))))) ("threading-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/threading-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/threading-lib.txt"))) (checksum . "13a34f14fe073c328e5cc083c616a602a79afa58") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.3"))) (description . "implementation (no documentation) for “threading”") (implies . ()) (last-checked . 1632904666) (last-edit . 1497305814) (last-updated . 1576185324) (modules . ((lib "threading/main.rkt"))) (name . "threading-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/threading?path=threading-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "13a34f14fe073c328e5cc083c616a602a79afa58") (source . "git://github.com/lexi-lambda/threading?path=threading-lib") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading-lib"))) ("6.2" . #hasheq((checksum . "dee85e8d3cffaed85eb27bed8a8c61fc1eea8395") (source . "git://github.com/lexi-lambda/threading?path=threading-lib#compatibility-6.2") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading-lib#compatibility-6.2"))) ("6.2.1" . #hasheq((checksum . "dee85e8d3cffaed85eb27bed8a8c61fc1eea8395") (source . "git://github.com/lexi-lambda/threading?path=threading-lib#compatibility-6.2") (source_url . "http://github.com/lexi-lambda/threading/tree/master?path=threading-lib#compatibility-6.2"))))))) ("thrift" . #hasheq((author . "johnstonskj@gmail.com") (authors . ("johnstonskj@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "thrift" "doc/thrift@thrift/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/thrift.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/thrift.txt"))) (checksum . "bbed34e6af97167ec5e9327c7c6ad739e331e793") (checksum-error . #f) (collection . "thrift") (conflicts . ()) (dependencies . ("base" "http" "unix-socket-lib" "rackunit-lib" "racket-index" "scribble-lib" "racket-doc" "sandbox-lib" "cover-coveralls")) (description . "Support for the Apache Thrift messaging framework") (implies . ()) (last-checked . 1632904667) (last-edit . 1544044370) (last-updated . 1544047852) (modules . ((lib "thrift/private/literals.rkt") (lib "thrift/scribblings/processor.scrbl") (lib "thrift/exn-common.rkt") (lib "thrift/protocol/sexpression.rkt") (lib "thrift/tests/private.rkt") (lib "thrift/scribblings/idl.scrbl") (lib "thrift/scribblings/transport.scrbl") (lib "thrift/common.rkt") (lib "thrift/private/protocol.rkt") (lib "thrift/transport/file.rkt") (lib "thrift/private/struct-enumeration.rkt") (lib "thrift/idl/language.rkt") (lib "thrift/idl/generator.rkt") (lib "thrift/tests/test-doc-complete.rkt") (lib "thrift/tests/transport.rkt") (lib "thrift/scribblings/thrift.scrbl") (lib "thrift/protocol/json.rkt") (lib "thrift/transport/buffered.rkt") (lib "thrift/tests/idl.rkt") (lib "thrift/private/logging.rkt") (lib "thrift/main.rkt") (lib "thrift/private/enumeration.rkt") (lib "thrift/tests/protocol.rkt") (lib "thrift/private/bytedebug.rkt") (lib "thrift/protocol/decoding.rkt") (lib "thrift/protocol/multiplexed.rkt") (lib "thrift/transport/exn-common.rkt") (lib "thrift/protocol/encoding.rkt") (lib "thrift/scribblings/architecture.scrbl") (lib "thrift/private/transport.rkt") (lib "thrift/protocol/binary.rkt") (lib "thrift/transport/common.rkt") (lib "thrift/transport/console.rkt") (lib "thrift/processor/common.rkt") (lib "thrift/tests/processor.rkt") (lib "thrift/transport/serializer.rkt") (lib "thrift/transport/socket.rkt") (lib "thrift/protocol/exn-common.rkt") (lib "thrift/protocol/common.rkt") (lib "thrift/idl/common.rkt") (lib "thrift/scribblings/protocol.scrbl") (lib "thrift/transport/memory.rkt") (lib "thrift/protocol/compact.rkt"))) (name . "thrift") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:johnstonskj@gmail.com . #t) (data . #t) (ml . #t) (ring:1 . #t) (rpc . #t))) (source . "https://github.com/johnstonskj/racket-thrift.git") (tags . ("data" "ml" "rpc")) (versions . #hash((default . #hasheq((checksum . "bbed34e6af97167ec5e9327c7c6ad739e331e793") (source . "https://github.com/johnstonskj/racket-thrift.git") (source_url . "https://github.com/johnstonskj/racket-thrift.git"))))))) ("tightlight" . #hasheq((author . "gfb@cs.toronto.edu") (authors . ("gfb@cs.toronto.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tightlight.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tightlight.txt"))) (checksum . "97cfd6a147b607117dfd654808563754741a566e") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1563057029) (dependencies . ("base" "drracket-plugin-lib" "gui-lib" "snack")) (description . "DrRacket tool to tighten the highlighting of expressions to enclosing rectangles, rather than to the ends of lines. Adds a menu item in the View menu, to tweak the look, or switch back to DrRacket's usual.") (implies . ()) (last-checked . 1632904667) (last-edit . 1570200912) (last-updated . 1570459133) (modules . ((lib "tightlight/values.rkt") (lib "tightlight/class.rkt") (lib "tightlight/struct.rkt") (lib "tightlight/gui.rkt") (lib "tightlight/range-rectangle.rkt") (lib "tightlight/tool.rkt"))) (name . "tightlight") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:gfb@cs.toronto.edu . #t) (drracket . #t) (editor . #t) (ring:1 . #t) (tools . #t))) (source . "https://www.cs.toronto.edu/~gfb/racket-pkgs/tightlight.zip") (tags . ("drracket" "editor" "tools")) (versions . #hash((default . #hasheq((checksum . "97cfd6a147b607117dfd654808563754741a566e") (source . "https://www.cs.toronto.edu/~gfb/racket-pkgs/tightlight.zip") (source_url . "https://www.cs.toronto.edu/~gfb/racket-pkgs/tightlight.zip"))))))) ("timable" . #hasheq((author . "yanyingwang1@gmail.com") (authors . ("yanyingwang1@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "timable" "doc/timable@timable/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/timable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/timable.txt"))) (checksum . "873950a99dbc5dd036147c55185b8376347bca88") (checksum-error . #f) (collection . "timable") (conflicts . ()) (date-added . 1574155795) (dependencies . ("base" "srfi" "gregor" "db" "scribble-lib" "racket-doc" "rackunit-lib" "scribble-rainbow-delimiters")) (description . "extend racket's various time libs and make them be able to work together more smoothly.") (implies . ()) (last-checked . 1632904668) (last-edit . 1589510699) (last-updated . 1632245861) (modules . ((lib "timable/scribblings/gregor.scrbl") (lib "timable/scribblings/srfi-19.scrbl") (lib "timable/srfi.rkt") (lib "timable/convert.rkt") (lib "timable/main.rkt") (lib "timable/gregor.rkt") (lib "timable/scribblings/timable.scrbl"))) (name . "timable") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:yanyingwang1@gmail.com . #t) (date . #t) (datetime . #t) (gregor . #t) (ring:1 . #t) (srfi-19 . #t) (time . #t))) (source . "https://github.com/yanyingwang/timable.git") (tags . ("date" "datetime" "gregor" "srfi-19" "time")) (versions . #hash((default . #hasheq((checksum . "873950a99dbc5dd036147c55185b8376347bca88") (source . "https://github.com/yanyingwang/timable.git") (source_url . "https://github.com/yanyingwang/timable.git"))))))) ("tjson" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tjson" "doc/tjson@tjson/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tjson.txt") (test-failure-log . "server/built/test-fail/tjson.txt") (test-success-log . #f))) (checksum . "b8471434b51592d3fcab819bb203380c8ede5de3") (checksum-error . #f) (collection . "tjson") (conflicts . ()) (dependencies . ("base" "typed-racket-more" "typed-racket-lib" "scribble-lib" "sandbox-lib" "racket-doc" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "typed-racket-doc")) (description . "Basic Typed Racket Json Parser and Emitter") (implies . ()) (last-checked . 1632904668) (last-edit . 1537637941) (last-updated . 1620470211) (modules . ((lib "tjson/scribblings/tjson.scrbl") (lib "tjson/main.rkt"))) (name . "tjson") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (emitter . #t) (json . #t) (parser . #t) (ring:1 . #t) (searialization . #t) (typed . #t))) (source . "https://gitlab.com/RayRacine/tjson.git") (tags . ("emitter" "json" "parser" "searialization" "typed")) (versions . #hash((default . #hasheq((checksum . "b8471434b51592d3fcab819bb203380c8ede5de3") (source . "https://gitlab.com/RayRacine/tjson.git") (source_url . "https://gitlab.com/RayRacine/tjson.git"))))))) ("todo-list" . #hasheq((author . "david@davidchristiansen.dk") (authors . ("david@davidchristiansen.dk")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "todo-list" "doc/todo-list@todo-list/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/todo-list.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/todo-list.txt"))) (checksum . "589e9c8f58f4684eae64d3254bdbad0b1bcaae39") (checksum-error . #f) (collection . "todo-list") (conflicts . ()) (dependencies . ("base" "data-lib" "drracket-plugin-lib" "gui-lib" "scribble-lib" "racket-doc")) (description . "A list of goals + interactive commands for solving them in DrRacket") (implies . ()) (last-checked . 1632904669) (last-edit . 1511371944) (last-updated . 1538333957) (modules . ((lib "todo-list/test-command.rkt") (lib "todo-list/private/expansion-handler.rkt") (lib "todo-list/tool.rkt") (lib "todo-list/main.rkt") (lib "todo-list/private/syntax-info.rkt") (lib "todo-list/scribblings/todo-list.scrbl") (lib "todo-list/demo.rkt") (lib "todo-list/private/goal-info.rkt"))) (name . "todo-list") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david@davidchristiansen.dk . #t) (drracket . #t) (editing . #t) (ring:1 . #t))) (source . "https://github.com/david-christiansen/todo-list.git") (tags . ("drracket" "editing")) (versions . #hash((default . #hasheq((checksum . "589e9c8f58f4684eae64d3254bdbad0b1bcaae39") (source . "https://github.com/david-christiansen/todo-list.git") (source_url . "https://github.com/david-christiansen/todo-list.git"))))))) ("todo-txt" . #hasheq((author . "sschwarzer@sschwarzer.net") (authors . ("sschwarzer@sschwarzer.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "todo-txt" "doc/todo-txt@todo-txt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/todo-txt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/todo-txt.txt"))) (checksum . "7cc4f178f23381c72a49fc5397f84033eb2fddcd") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1621978320) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Parser and report generator for the todo.txt format ( https://github.com/todotxt/todo.txt )") (implies . ()) (last-checked . 1632904669) (last-edit . 1623410891) (last-updated . 1623411426) (modules . ((lib "file/todo-txt/private/task-group.rkt") (lib "file/todo-txt.rkt") (lib "file/todoreport.rkt") (lib "file/todo-txt/scribblings/todo-txt.scrbl") (lib "file/todoreport/private/cli.rkt") (lib "file/todo-txt/private/task.rkt"))) (name . "todo-txt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sschwarzer@sschwarzer.net . #t) (file . #t) (format . #t) (ring:1 . #t) (todotxt . #t))) (source . "git+https://git.sr.ht/~sschwarzer/todo-txt#v0.2.0") (tags . ("file" "format" "todotxt")) (versions . #hash((default . #hasheq((checksum . "7cc4f178f23381c72a49fc5397f84033eb2fddcd") (source . "git+https://git.sr.ht/~sschwarzer/todo-txt#v0.2.0") (source_url . "git+https://git.sr.ht/~sschwarzer/todo-txt#v0.2.0"))))))) ("tomato-timer" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tomato-timer" "doc/tomato-timer@tomato-timer/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tomato-timer.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tomato-timer.txt"))) (checksum . "23254a8138d5fad885f3b7033fb89549cb268b50") (checksum-error . #f) (collection . "tomato-timer") (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "Command-line timer") (implies . ()) (last-checked . 1632904669) (last-edit . 1487903930) (last-updated . 1582483535) (modules . ((lib "tomato-timer/docs/tomato-timer.scrbl") (lib "tomato-timer/main.rkt"))) (name . "tomato-timer") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t) (utility . #t))) (source . "git://github.com/bennn/tomato-timer") (tags . ("utility")) (versions . #hash((default . #hasheq((checksum . "23254a8138d5fad885f3b7033fb89549cb268b50") (source . "git://github.com/bennn/tomato-timer") (source_url . "http://github.com/bennn/tomato-timer/tree/master"))))))) ("towers" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/towers.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/towers.txt"))) (checksum . "e1224228b5b5b514c7063b44810c1bdd5f8d5d14") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "net-lib" "bazaar" "towers-lib")) (description . "The GUI client interface for the Towers game.") (implies . ()) (last-checked . 1632904669) (last-edit . 1516442594) (last-updated . 1516476620) (modules . ((lib "towers/replay.rkt") (lib "towers/graphics.rkt") (lib "towers/frame.rkt") (lib "towers/controller.rkt") (lib "towers/gui.rkt") (lib "towers/main.rkt") (lib "towers/player-alpha-beta-gui.rkt") (lib "towers/base.rkt"))) (name . "towers") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app . #t) (author:laurent.orseau@gmail.com . #t) (games . #t) (gui . #t) (ring:1 . #t))) (source . "https://github.com/Metaxal/towers.git?path=towers") (tags . ("app" "games" "gui")) (versions . #hash((default . #hasheq((checksum . "e1224228b5b5b514c7063b44810c1bdd5f8d5d14") (source . "https://github.com/Metaxal/towers.git?path=towers") (source_url . "https://github.com/Metaxal/towers.git?path=towers"))))))) ("towers-lib" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/towers-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/towers-lib.txt"))) (checksum . "e1224228b5b5b514c7063b44810c1bdd5f8d5d14") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "bazaar")) (description . "Library for the Towers game.") (implies . ()) (last-checked . 1632904671) (last-edit . 1516442614) (last-updated . 1516476621) (modules . ((lib "towers-lib/game.rkt") (lib "towers-lib/player-ai-base.rkt") (lib "towers-lib/rules.rkt") (lib "towers-lib/player-base.rkt") (lib "towers-lib/player.rkt") (lib "towers-lib/base.rkt") (lib "towers-lib/player-ai1.rkt") (lib "towers-lib/connection.rkt") (lib "towers-lib/file.rkt") (lib "towers-lib/player-alpha-beta.rkt"))) (name . "towers-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (games . #t) (ring:1 . #t))) (source . "https://github.com/Metaxal/towers.git?path=towers-lib") (tags . ("games")) (versions . #hash((default . #hasheq((checksum . "e1224228b5b5b514c7063b44810c1bdd5f8d5d14") (source . "https://github.com/Metaxal/towers.git?path=towers-lib") (source_url . "https://github.com/Metaxal/towers.git?path=towers-lib"))))))) ("towers-server" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/towers-server.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/towers-server.txt"))) (checksum . "e1224228b5b5b514c7063b44810c1bdd5f8d5d14") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "db-lib" "web-server-lib" "bazaar" "towers-lib")) (description . "The server for the Towers game. Not required to play.") (implies . ()) (last-checked . 1632904672) (last-edit . 1516442631) (last-updated . 1516476622) (modules . ((lib "towers-server/main.rkt") (lib "towers-server/db.rkt") (lib "towers-server/server.rkt"))) (name . "towers-server") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (games . #t) (ring:1 . #t) (server . #t))) (source . "https://github.com/Metaxal/towers.git?path=towers-server") (tags . ("games" "server")) (versions . #hash((default . #hasheq((checksum . "e1224228b5b5b514c7063b44810c1bdd5f8d5d14") (source . "https://github.com/Metaxal/towers.git?path=towers-server") (source_url . "https://github.com/Metaxal/towers.git?path=towers-server"))))))) ("tr-immutable" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tr-immutable" "doc/tr-immutable@tr-immutable/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tr-immutable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tr-immutable.txt"))) (checksum . "218e8862718327696b2a7cd2e1ae82800a653306") (checksum-error . #f) (collection . "tr-immutable") (conflicts . ()) (date-added . 1614799548) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "typed-map-lib" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "Helpers to write macros using typed/racket at phase 1. Heavily unstable, WIP, experimental, not documented yet. I'm currently dogfooding this to work out the best strategy.") (implies . ()) (last-checked . 1632904673) (last-edit . 1614889817) (last-updated . 1617546903) (modules . ((lib "tr-immutable/typed-syntax/typed-prefab-declarations.rkt") (lib "tr-immutable/private/unsafe.rkt") (lib "tr-immutable/test/test-vector.rkt") (lib "tr-immutable/scribblings/tr-immutable.scrbl") (lib "tr-immutable/typed-syntax/typed-syntax-convert2.rkt") (lib "tr-immutable/main.rkt") (lib "tr-immutable/typed-syntax/typed-syntax-predicate.rkt") (lib "tr-immutable/typed-syntax/typed-pairof-predicate.rkt") (lib "tr-immutable/typed-syntax/typed-syntax-convert.rkt") (lib "tr-immutable/typed-syntax.rkt"))) (name . "tr-immutable") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (experimental . #t) (ring:1 . #t) (syntax . #t) (typed-racket . #t) (unstable . #t))) (source . "https://github.com/jsmaniac/tr-immutable.git#main") (tags . ("experimental" "syntax" "typed-racket" "unstable")) (versions . #hash((default . #hasheq((checksum . "218e8862718327696b2a7cd2e1ae82800a653306") (source . "https://github.com/jsmaniac/tr-immutable.git#main") (source_url . "https://github.com/jsmaniac/tr-immutable.git#main"))))))) ("trace" . #hash((author . "mflatt@racket-lang.org robby@racket-lang.org") (authors . ("mflatt@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "trace" "doc/trace@trace/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "trace") (conflicts . ()) (dependencies . ("scheme-lib" "base" "compatibility-lib" "scribble-lib" "racket-doc")) (description . "Instrumentation to show function calls") (implies . ()) (last-checked . 1632904673) (last-edit . 1417659583) (last-updated . 1576519971) (modules . ((lib "trace/stacktrace.rkt") (lib "trace/main.rkt") (lib "trace/calltrace.rkt") (lib "trace/scribblings/trace.scrbl") (lib "trace/tests.rkt") (lib "trace/calltrace-lib.rkt"))) (name . "trace") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:mflatt@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "aa6f18f2479aca4d36549fed2f9731c5149a85c4") (source . "git://github.com/racket/trace") (source_url . "http://github.com/racket/trace/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("traces" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/traces.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/traces.txt") (test-failure-log . "server/built/test-fail/traces.txt") (test-success-log . #f))) (checksum . "de08fadc1b1d73362c7b6d83f0dd9a4c9dc36743") (checksum-error . #f) (collection . "traces") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "redex-gui-lib")) (description . "Tracing utilities for functions and hash-tables, similar to `traces` from `redex`") (implies . ()) (last-checked . 1632904673) (last-edit . 1520015300) (last-updated . 1553289233) (modules . ((lib "traces/main.rkt") (lib "traces/typed.rkt") (lib "traces/test.rkt"))) (name . "traces") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:pcn@cs.umd.edu . #t) (debugging . #t) (graph . #t) (ring:1 . #t) (traces . #t))) (source . "https://github.com/philnguyen/traces.git?path=traces") (tags . ("debugging" "graph" "traces")) (versions . #hash((default . #hasheq((checksum . "de08fadc1b1d73362c7b6d83f0dd9a4c9dc36743") (source . "https://github.com/philnguyen/traces.git?path=traces") (source_url . "https://github.com/philnguyen/traces.git?path=traces"))))))) ("treap" . #hasheq((author . "snwhiteh@uwaterloo.ca") (authors . ("snwhiteh@uwaterloo.ca")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/treap.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/treap.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/treap.txt"))) (checksum . "e703ae7f1bec7a7131eeb2e9e5e6b488c4b45d7e") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Balanced binary search trees implemented through treaps") (implies . ()) (last-checked . 1632904674) (last-edit . 1476043556) (last-updated . 1476043536) (modules . ((lib "treap/treap.rkt"))) (name . "treap") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:no-tag: . #t) (author:snwhiteh@uwaterloo.ca . #t) (ring:1 . #t))) (source . "git://github.com/spencereir/treap") (tags . ()) (versions . #hash((default . #hasheq((checksum . "e703ae7f1bec7a7131eeb2e9e5e6b488c4b45d7e") (source . "git://github.com/spencereir/treap") (source_url . "http://github.com/spencereir/treap/tree/master"))))))) ("trie" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "trie" "doc/trie@trie/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/trie.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/trie.txt"))) (checksum . "da9564e8187ace2a4a891c979ef1e7f15a3d306e") (checksum-error . #f) (collection . "trie") (conflicts . ()) (date-added . 1601503922) (dependencies . ("base" "handy" "struct-plus-plus" "scribble-lib" "racket-doc" "rackunit-lib" "sandbox-lib" "handy")) (description . "Implements compact storage for nested data with overlapping elements, such as paths in a file tree.") (implies . ()) (last-checked . 1632904674) (last-edit . 1601503922) (last-updated . 1602874299) (modules . ((lib "trie/tests/test_main.rkt") (lib "trie/scribblings/trie.scrbl") (lib "trie/main.rkt"))) (name . "trie") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david.storrs@gmail.com . #t) (data-structures . #t) (ring:1 . #t) (trie . #t))) (source . "https://github.com/dstorrs/racket-trie.git") (tags . ("data-structures" "trie")) (versions . #hash((default . #hasheq((checksum . "da9564e8187ace2a4a891c979ef1e7f15a3d306e") (source . "https://github.com/dstorrs/racket-trie.git") (source_url . "https://github.com/dstorrs/racket-trie.git"))))))) ("trivial" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "trivial" "doc/trivial@trivial/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/trivial.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/trivial.txt"))) (checksum . "c28c838d6d0116ba4c9d122c0e410ef178164e3a") (checksum-error . #f) (collection . "trivial") (conflicts . ()) (dependencies . ("base" "db-lib" "plot-lib" "rackunit-lib" "reprovide-lang" "scribble-lib" "typed-racket-lib" "typed-racket-more" "at-exp-lib" "racket-doc" "rackunit-abbrevs" "rackunit-lib" "scribble-doc" "typed-racket-doc" "scribble-lib")) (description . "type-tailored standard library functions") (implies . ()) (last-checked . 1632904674) (last-edit . 1481669306) (last-updated . 1582659928) (modules . ((lib "trivial/private/db/postgres.rkt") (lib "trivial/private/sequence-domain.rkt") (lib "trivial/private/define.rkt") (lib "trivial/private/db/query.rkt") (lib "trivial/integer.rkt") (lib "trivial/private/regexp.rkt") (lib "trivial/private/string.rkt") (lib "trivial/main.rkt") (lib "trivial/scribblings/using-tailorings.scrbl") (lib "trivial/list.rkt") (lib "trivial/private/list.rkt") (lib "trivial/private/vector.rkt") (lib "trivial/private/format.rkt") (lib "trivial/private/db.rkt") (lib "trivial/tailoring.rkt") (lib "trivial/scribblings/defining-tailorings.scrbl") (lib "trivial/no-colon.rkt") (lib "trivial/private/tailoring.rkt") (lib "trivial/string.rkt") (lib "trivial/define.rkt") (lib "trivial/format.rkt") (lib "trivial/private/test-common.rkt") (lib "trivial/vector.rkt") (lib "trivial/private/integer.rkt") (lib "trivial/private/db/schema.rkt") (lib "trivial/private/common.rkt") (lib "trivial/function.rkt") (lib "trivial/scribblings/trivial.scrbl") (lib "trivial/private/raco-command.rkt") (lib "trivial/regexp.rkt") (lib "trivial/private/function.rkt"))) (name . "trivial") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/bennn/trivial.git?path=trivial") (tags . ("typed-racket")) (versions . #hash((default . #hasheq((checksum . "c28c838d6d0116ba4c9d122c0e410ef178164e3a") (source . "https://github.com/bennn/trivial.git?path=trivial") (source_url . "https://github.com/bennn/trivial.git?path=trivial"))) ("6.6" . #hasheq((checksum . "f4ae715164ad36fd0684d6687151dbe445646445") (source . "https://github.com/bennn/trivial.git#6.7") (source_url . "https://github.com/bennn/trivial.git#6.7"))) ("6.7" . #hasheq((checksum . "f4ae715164ad36fd0684d6687151dbe445646445") (source . "https://github.com/bennn/trivial.git#6.7") (source_url . "https://github.com/bennn/trivial.git#6.7"))) ("6.4" . #hasheq((checksum . "04835b533960ef073022c173fad45807c77ecc5f") (source . "https://github.com/bennn/trivial.git#6.4") (source_url . "https://github.com/bennn/trivial.git#6.4"))) ("6.5" . #hasheq((checksum . "f4ae715164ad36fd0684d6687151dbe445646445") (source . "https://github.com/bennn/trivial.git#6.7") (source_url . "https://github.com/bennn/trivial.git#6.7"))))))) ("trustyou" . #hasheq((author . "louis77@member.fsf.org") (authors . ("louis77@member.fsf.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/trustyou.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "cea35d2dffe9bc58c7b4b7d353ed75912c032231") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/louis77/racket-trustyou.git#main\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . "trustyou") (conflicts . ()) (date-added . 1613773884) (dependencies . ("base" "http-easy" "scribble-lib")) (description . "This is a very simple client for the Trustyou Ratings API to\r\nfetch hotel ratings.") (implies . ()) (last-checked . 1632904676) (last-edit . 1613776243) (last-updated . 1621810115) (modules . ((lib "trustyou/main.rkt") (lib "trustyou/docs.scrbl"))) (name . "trustyou") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:louis77@member.fsf.org . #t) (client-api . #t) (ring:1 . #t))) (source . "https://github.com/louis77/racket-trustyou.git#main") (tags . ("client-api")) (versions . #hash((default . #hasheq((checksum . "cea35d2dffe9bc58c7b4b7d353ed75912c032231") (source . "https://github.com/louis77/racket-trustyou.git#main") (source_url . "https://github.com/louis77/racket-trustyou.git#main"))))))) ("try" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "try" "doc/try@try/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/try.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/try.txt"))) (checksum . "b73f3053ac6930443bbbc6a12cfd947e1b4d9413") (checksum-error . #f) (collection . "try") (conflicts . ()) (dependencies . ("typed-racket-lib" "base" "typed-racket-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A Typed Racket Try datatype and routines for computations that throw exceptions.") (implies . ()) (last-checked . 1632904676) (last-edit . 1528402413) (last-updated . 1620470218) (modules . ((lib "try/main.rkt") (lib "try/scribblings/try.scrbl"))) (name . "try") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (datatype . #t) (exceptions . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/try.git") (tags . ("datatype" "exceptions")) (versions . #hash((default . #hasheq((checksum . "b73f3053ac6930443bbbc6a12cfd947e1b4d9413") (source . "https://gitlab.com/RayRacine/try.git") (source_url . "https://gitlab.com/RayRacine/try.git"))))))) ("try-catch" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "dd884c1819085f9adbdebc066f91e5273478cbeb") (checksum-error . #f) (collection . "try-catch") (conflicts . ()) (date-added . 1632501327) (dependencies . ("base" "syntax-classes-lib" "racket-doc" "scribble-lib" "rackunit-lib" "sandbox-lib")) (description . "Exception handling (with-handlers) and flow control guarantees  (dynamic-wind) with code shared between the dynamic-wind clauses and a final cleanup phase.") (implies . ()) (last-checked . 1632904676) (last-edit . 1632501327) (last-updated . 1632854289) (modules . ((lib "try-catch/scribblings/try-catch.scrbl") (lib "try-catch/main.rkt"))) (name . "try-catch") (ring . 2) (search-terms . #hasheq((author:david.storrs@gmail.com . #t) (exceptions . #t) (ring:2 . #t))) (source . "https://github.com/dstorrs/try-catch.git") (tags . ("exceptions")) (versions . #hash((default . #hasheq((checksum . "dd884c1819085f9adbdebc066f91e5273478cbeb") (source . "https://github.com/dstorrs/try-catch.git") (source_url . "https://github.com/dstorrs/try-catch.git"))))))) ("try-catch-finally" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "try-catch-finally" "doc/try-catch-finally@try-catch-finally/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/try-catch-finally.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/try-catch-finally.txt"))) (checksum . "ae71f04fe3ef793ed9338a7ee662f72ccc32222b") (checksum-error . #f) (collection . "try-catch-finally") (conflicts . ()) (date-added . 1627413398) (dependencies . ("base" "try-catch-finally-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Tests and Docs for try-catch-finally-lib") (implies . ("try-catch-finally-lib")) (last-checked . 1632904676) (last-edit . 1627414163) (last-updated . 1627583887) (modules . ((lib "try-catch-finally/scribblings/try-catch-finally.scrbl") (lib "try-catch-finally/try-catch-finally-test.rkt"))) (name . "try-catch-finally") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (exceptions . #t) (ring:1 . #t) (sugar . #t))) (source . "https://github.com/AlexKnauth/try-catch-finally.git?path=try-catch-finally") (tags . ("exceptions" "sugar")) (versions . #hash((default . #hasheq((checksum . "ae71f04fe3ef793ed9338a7ee662f72ccc32222b") (source . "https://github.com/AlexKnauth/try-catch-finally.git?path=try-catch-finally") (source_url . "https://github.com/AlexKnauth/try-catch-finally.git?path=try-catch-finally"))))))) ("try-catch-finally-lib" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/try-catch-finally-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/try-catch-finally-lib.txt"))) (checksum . "ae71f04fe3ef793ed9338a7ee662f72ccc32222b") (checksum-error . #f) (collection . "try-catch-finally") (conflicts . ()) (date-added . 1627413157) (dependencies . ("base")) (description . "A macro for catching exceptions and running teardown operations.") (implies . ()) (last-checked . 1632904676) (last-edit . 1627414181) (last-updated . 1627583888) (modules . ((lib "try-catch-finally/main.rkt"))) (name . "try-catch-finally-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (exceptions . #t) (ring:1 . #t) (sugar . #t))) (source . "https://github.com/AlexKnauth/try-catch-finally.git?path=try-catch-finally-lib") (tags . ("exceptions" "sugar")) (versions . #hash((default . #hasheq((checksum . "ae71f04fe3ef793ed9338a7ee662f72ccc32222b") (source . "https://github.com/AlexKnauth/try-catch-finally.git?path=try-catch-finally-lib") (source_url . "https://github.com/AlexKnauth/try-catch-finally.git?path=try-catch-finally-lib"))))))) ("try-catch-match" . #hasheq((author . "benedek.szilvasy@gmail.com") (authors . ("benedek.szilvasy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "try-catch-match" "doc/try-catch-match@try-catch-match/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/try-catch-match.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/try-catch-match.txt"))) (checksum . "6cd64b9b0d3fc3828318da9f8d26cc5d9271c1f4") (checksum-error . #f) (collection . "try-catch-match") (conflicts . ()) (date-added . 1627426752) (dependencies . ("base" "base" "scribble-lib" "racket-doc")) (description . "A try-catch-finally macro that binds with match.") (implies . ()) (last-checked . 1632904676) (last-edit . 1627426967) (last-updated . 1627515444) (modules . ((lib "try-catch-match/main.rkt") (lib "try-catch-match/scribblings/try-catch-match.scrbl"))) (name . "try-catch-match") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:benedek.szilvasy@gmail.com . #t) (macro . #t) (ring:1 . #t) (syntax-parse . #t))) (source . "https://github.com/eutro/try-catch-match.git#master") (tags . ("macro" "syntax-parse")) (versions . #hash((default . #hasheq((checksum . "6cd64b9b0d3fc3828318da9f8d26cc5d9271c1f4") (source . "https://github.com/eutro/try-catch-match.git#master") (source_url . "https://github.com/eutro/try-catch-match.git#master"))))))) ("try-make-sarna-happy" . #hasheq((author . "ben.knoble+racket@gmail.com") (authors . ("ben.knoble+racket@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "try-make-sarna-happy" "doc/try-make-sarna-happy@try-make-sarna-happy/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/try-make-sarna-happy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/try-make-sarna-happy.txt"))) (checksum . "c538408866d6b7922fe8ae4da211a233bd7a305d") (checksum-error . #f) (collection . "try-make-sarna-happy") (conflicts . ()) (date-added . 1627418695) (dependencies . ("base" "rackunit-doc" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A try macro for sarna") (implies . ()) (last-checked . 1632904677) (last-edit . 1627423868) (last-updated . 1627490899) (modules . ((lib "try-make-sarna-happy/scribblings/shared.rkt") (lib "try-make-sarna-happy/main.rkt") (lib "try-make-sarna-happy/scribblings/try-make-sarna-happy.scrbl"))) (name . "try-make-sarna-happy") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ben.knoble+racket@gmail.com . #t) (exceptions . #t) (macro . #t) (ring:1 . #t) (sugar . #t) (syntax-parse . #t))) (source . "https://github.com/benknoble/try-make-sarna-happy.git#main") (tags . ("exceptions" "macro" "sugar" "syntax-parse")) (versions . #hash((default . #hasheq((checksum . "c538408866d6b7922fe8ae4da211a233bd7a305d") (source . "https://github.com/benknoble/try-make-sarna-happy.git#main") (source_url . "https://github.com/benknoble/try-make-sarna-happy.git#main"))))))) ("try-racket-client" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/try-racket-client.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/try-racket-client.txt"))) (checksum . "2ddd062b62284a7549f63bbedd8f6c4aa5c613b5") (checksum-error . #f) (collection . "try-racket-client") (conflicts . ()) (date-added . 1580555730) (dependencies . ("base")) (description . "An API client for try-racket.defn.io.") (implies . ()) (last-checked . 1632904677) (last-edit . 1580555730) (last-updated . 1580562611) (modules . ((lib "try-racket-client/main.rkt"))) (name . "try-racket-client") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (client . #t) (http . #t) (ring:1 . #t) (sandbox . #t))) (source . "https://github.com/Bogdanp/try-racket-client.git") (tags . ("client" "http" "sandbox")) (versions . #hash((default . #hasheq((checksum . "2ddd062b62284a7549f63bbedd8f6c4aa5c613b5") (source . "https://github.com/Bogdanp/try-racket-client.git") (source_url . "https://github.com/Bogdanp/try-racket-client.git"))))))) ("ts-camp-jam-1" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/ts-camp-jam-1.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "11eece35a6f3c562f4d2b767e2fbbdeb06ffeeec") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("https://github.com/thoughtstem/game-engine.git" "https://github.com/thoughtstem/ts-kata-util.git" "https://github.com/thoughtstem/game-engine-demos.git?path=game-engine-demos-common")) (description . "For Fortnite 2d game design camp  ") (implies . ()) (last-checked . 1632904677) (last-edit . 1545961740) (last-updated . 1608681607) (modules . ((lib "ts-camp-jam-1/doc/day-4-katas.scrbl") (lib "ts-camp-jam-1/doc/day-3-katas.scrbl") (lib "ts-camp-jam-1/doc/day-2-katas.scrbl") (lib "ts-camp-jam-1/doc/day-1-katas.scrbl") (lib "ts-camp-jam-1/jam-lang.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/avatar-3b.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/melee-balance-1.rkt") (lib "ts-camp-jam-1/kata-definitions/axe-balance-1.rkt") (lib "ts-camp-jam-1/kata-definitions/sword-3b.rkt") (lib "ts-camp-jam-1/doc/materials.scrbl") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/enemy-4.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/magic-balance-3.rkt") (lib "ts-camp-jam-1/kata-definitions/sword-2.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/paint-thrower-2.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/sword-4.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/enemy-weapon-1.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/spear-4.rkt") (lib "ts-camp-jam-1/kata-definitions/spear-tower-1.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/sword-1.rkt") (lib "ts-camp-jam-1/kata-definitions/paint-thrower-4.rkt") (lib "ts-camp-jam-1/kata-definitions/paint-thrower-3-bonus.rkt") (lib "ts-camp-jam-1/kata-definitions/paint-thrower-2-bonus.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/repeater-balance-1.rkt") (lib "ts-camp-jam-1/kata-definitions/avatar-3c.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/magic-balance-1.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/spear-tower-3.rkt") (lib "ts-camp-jam-1/kata-definitions/spear-4.rkt") (lib "ts-camp-jam-1/kata-definitions/magic-balance-2.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/magic-balance-2.rkt") (lib "ts-camp-jam-1/kata-definitions/spear-tower-3.rkt") (lib "ts-camp-jam-1/kata-definitions/sword-armor-1.rkt") (lib "ts-camp-jam-1/doc/enemy-katas.scrbl") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/spike-mine-1.rkt") (lib "ts-camp-jam-1/kata-definitions/melee-balance-2.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/spear-3-bonus.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/spear-2-bonus.rkt") (lib "ts-camp-jam-1/kata-definitions/paint-thrower-3.rkt") (lib "ts-camp-jam-1/kata-definitions/spear-1.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/avatar-2.rkt") (lib "ts-camp-jam-1/kata-definitions/avatar-2.rkt") (lib "ts-camp-jam-1/kata-definitions/spear-2.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/paint-thrower-1.rkt") (lib "ts-camp-jam-1/kata-definitions/repeater-armor-2.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/repeater-balance-3.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/avatar-4.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/spear-tower-1.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/spear-2.rkt") (lib "ts-camp-jam-1/kata-definitions/enemy-3-bonus.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/melee-balance-2.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/paint-thrower-4.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/fortnite-melee-battle.rkt") (lib "ts-camp-jam-1/kata-definitions/sword-1.rkt") (lib "ts-camp-jam-1/kata-definitions/spear-3.rkt") (lib "ts-camp-jam-1/kata-definitions/avatar-1.rkt") (lib "ts-camp-jam-1/kata-definitions/repeater-armor-3.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/enemy-npc.rkt") (lib "ts-camp-jam-1/kata-definitions/wall-builder-1.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/avatar-3c.rkt") (lib "ts-camp-jam-1/doc/avatar-katas.scrbl") (lib "ts-camp-jam-1/kata-definitions/melee-balance-3.rkt") (lib "ts-camp-jam-1/kata-definitions/enemy-weapon-3.rkt") (lib "ts-camp-jam-1/kata-definitions/magic-balance-1.rkt") (lib "ts-camp-jam-1/kata-definitions/fortnite-melee-battle-advanced.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/avatar-1.rkt") (lib "ts-camp-jam-1/kata-definitions/melee-balance-1.rkt") (lib "ts-camp-jam-1/kata-definitions/spear-tower-2.rkt") (lib "ts-camp-jam-1/kata-definitions/repeater-balance-2.rkt") (lib "ts-camp-jam-1/kata-definitions/avatar-3.rkt") (lib "ts-camp-jam-1/kata-definitions/fortnite-melee-battle-simple.rkt") (lib "ts-camp-jam-1/kata-definitions/battle-gear-armor.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/repeater-balance-2.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/spike-mine-2.rkt") (lib "ts-camp-jam-1/kata-definitions/spike-mine-2.rkt") (lib "ts-camp-jam-1/kata-definitions/fortnite-battle-gear-weapons.rkt") (lib "ts-camp-jam-1/kata-definitions/magic-balance-3.rkt") (lib "ts-camp-jam-1/kata-definitions/enemy-weapon-2.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/spear-3.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/enemy-3.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/sword-2.rkt") (lib "ts-camp-jam-1/kata-definitions/fortnite-melee-battle.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/fortnite-melee-battle-advanced.rkt") (lib "ts-camp-jam-1/kata-definitions/enemy-weapon-1.rkt") (lib "ts-camp-jam-1/doc/ts-camp-jam-kata-util.scrbl") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/spear-tower-2.rkt") (lib "ts-camp-jam-1/jam/battle-arena-game-jam.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/spear-1.rkt") (lib "ts-camp-jam-1/kata-definitions/sword-armor-2.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/lava-3.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/basic-weapon-balance-1.rkt") (lib "ts-camp-jam-1/kata-definitions/sword-2b.rkt") (lib "ts-camp-jam-1/doc/manual.scrbl") (lib "ts-camp-jam-1/kata-definitions/enemy-npc.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/lava-1.rkt") (lib "ts-camp-jam-1/kata-definitions/basic-weapon-balance-1.rkt") (lib "ts-camp-jam-1/kata-definitions/sword-armor-3.rkt") (lib "ts-camp-jam-1/kata-definitions/avatar-4.rkt") (lib "ts-camp-jam-1/kata-definitions/enemy-2.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/sword-3.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/spear-tower-builder-1.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/spike-mine-3.rkt") (lib "ts-camp-jam-1/kata-definitions/sword-3.rkt") (lib "ts-camp-jam-1/kata-definitions/repeater-balance-3.rkt") (lib "ts-camp-jam-1/kata-definitions/lava-1.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/enemy-1.rkt") (lib "ts-camp-jam-1/kata-definitions/spike-mine-3.rkt") (lib "ts-camp-jam-1/kata-definitions/paint-thrower-1.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/enemy-weapon-2.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/enemy-weapon-3.rkt") (lib "ts-camp-jam-1/kata-definitions/spear-3-bonus.rkt") (lib "ts-camp-jam-1/kata-definitions/spear-2-bonus.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/lava-2.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/fortnite-melee-battle-simple.rkt") (lib "ts-camp-jam-1/kata-definitions/enemy-3.rkt") (lib "ts-camp-jam-1/kata-definitions/axe-balance-2.rkt") (lib "ts-camp-jam-1/kata-definitions/spear-tower-builder-1.rkt") (lib "ts-camp-jam-1/kata-definitions/repeater-armor-1.rkt") (lib "ts-camp-jam-1/kata-definitions/repeater-balance-1.rkt") (lib "ts-camp-jam-1/kata-definitions/avatar-3b.rkt") (lib "ts-camp-jam-1/kata-definitions/paint-thrower-2.rkt") (lib "ts-camp-jam-1/kata-definitions/enemy-4.rkt") (lib "ts-camp-jam-1/kata-definitions/sword-4.rkt") (lib "ts-camp-jam-1/main.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/enemy-2.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/wall-builder.rkt") (lib "ts-camp-jam-1/kata-definitions/spike-mine-builder-1.rkt") (lib "ts-camp-jam-1/kata-definitions/enemy-1.rkt") (lib "ts-camp-jam-1/kata-definitions/spike-mine-1.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/avatar-3.rkt") (lib "ts-camp-jam-1/kata-definitions/two-towers.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/paint-thrower-3.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/sword-2b.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/sword-3b.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/paint-thrower-3-bonus.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/paint-thrower-2-bonus.rkt") (lib "ts-camp-jam-1/kata-definitions/lava-3.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/melee-balance-3.rkt") (lib "ts-camp-jam-1/kata-definitions/lava-2.rkt") (lib "ts-camp-jam-1/kata-definitions/compiled-kata-data/enemy-3-bonus.rkt"))) (name . "ts-camp-jam-1") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/ts-camp-jam-1.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "11eece35a6f3c562f4d2b767e2fbbdeb06ffeeec") (source . "https://github.com/thoughtstem/ts-camp-jam-1.git") (source_url . "https://github.com/thoughtstem/ts-camp-jam-1.git"))))))) ("ts-curric-puzzles" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/ts-curric-puzzles.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "21f38610755da3c49a36e7553bf30fc4c459d10a") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("https://github.com/thoughtstem/happy-names.git" "https://github.com/thoughtstem/ts-racket.git" "https://github.com/thoughtstem/ts-curric-common.git")) (description . "Some educational puzzles for interactive learning.  ") (implies . ()) (last-checked . 1632904723) (last-edit . 1541537153) (last-updated . 1611374405) (modules . ((lib "ts-curric-puzzles/common.rkt") (lib "ts-curric-puzzles/phrases.rkt") (lib "ts-curric-puzzles/the-numbers-game-2.rkt") (lib "ts-curric-puzzles/brains.rkt") (lib "ts-curric-puzzles/the-pictures-game-2.rkt") (lib "ts-curric-puzzles/score-util.rkt") (lib "ts-curric-puzzles/the-numbers-game.rkt") (lib "ts-curric-puzzles/the-shortcuts-game.rkt") (lib "ts-curric-puzzles/rewards-util.rkt") (lib "ts-curric-puzzles/image-util.rkt") (lib "ts-curric-puzzles/tutorial.rkt") (lib "ts-curric-puzzles/memes.rkt") (lib "ts-curric-puzzles/the-racket-basics-game.rkt") (lib "ts-curric-puzzles/main.rkt") (lib "ts-curric-puzzles/creature-congratulations.rkt") (lib "ts-curric-puzzles/circle-game.rkt") (lib "ts-curric-puzzles/test/main.rkt") (lib "ts-curric-puzzles/typing-game.rkt") (lib "ts-curric-puzzles/rewards.rkt") (lib "ts-curric-puzzles/the-pictures-game.rkt") (lib "ts-curric-puzzles/quizzes.rkt"))) (name . "ts-curric-puzzles") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/ts-curric-puzzles.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "21f38610755da3c49a36e7553bf30fc4c459d10a") (source . "https://github.com/thoughtstem/ts-curric-puzzles.git") (source_url . "https://github.com/thoughtstem/ts-curric-puzzles.git"))))))) ("ts-files" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/ts-files.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "3252c883500641609200b698b73a09f0c96a6042") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Demo files for ThoughtSTEM.  Probably not useful to anyone outside of ThoughtSTEM.   ") (implies . ()) (last-checked . 1632904729) (last-edit . 1538523376) (last-updated . 1614614405) (modules . ((lib "ts-files/mt/tsmt_custom_item.rkt") (lib "ts-files/cpx/tscpx_servo.rkt") (lib "ts-files/cpx/tscpx_target_b.rkt") (lib "ts-files/cpx/tscpx_blaster_a.rkt") (lib "ts-files/cpx/tscpx_blaster_c.rkt") (lib "ts-files/tsgd/tsgd_quest_item.rkt") (lib "ts-files/tsgd/style-demos/tsgd_style_2.rkt") (lib "ts-files/app/tsapp_flashcards.rkt") (lib "ts-files/app/tsapp_cookie_clicker.rkt") (lib "ts-files/cpx/tscpx_set_function.rkt") (lib "ts-files/tsgd/tsgd_adventure_quest5_complete.rkt") (lib "ts-files/tsgd/tsgd_adventure_quest4_complete.rkt") (lib "ts-files/cpx/tscpx_night_light.rkt") (lib "ts-files/cpx/tscpx_sound_meter.rkt") (lib "ts-files/tsrokit/tsrokit_sumobot3.rkt") (lib "ts-files/mt/tsmt_multi_drop.rkt") (lib "ts-files/mt/tsmt_particle.rkt") (lib "ts-files/tsgd/style-demos/tsgd_style_1.rkt") (lib "ts-files/vr/tsvr_streetlamp.rkt") (lib "ts-files/cpx/tscpx_laser_tag.rkt") (lib "ts-files/cpx/tscpx_saber_c.rkt") (lib "ts-files/cpx/tscpx_notes.rkt") (lib "ts-files/cpx/tscpx_cool_riff.rkt") (lib "ts-files/cpx/tscpx_led.rkt") (lib "ts-files/tsweb/tsweb_text_adventure.rkt") (lib "ts-files/tsrokit/tsrokit_trailerbot4.rkt") (lib "ts-files/cpx/tscpx_clap_light.rkt") (lib "ts-files/tsrokit/tsrokit_trailerbot.rkt") (lib "ts-files/mt/tsmt_custom_block.rkt") (lib "ts-files/tsgd/tsgd_laser.rkt") (lib "ts-files/cpx/tscpx_colors.rkt") (lib "ts-files/tsgd/style-demos/tsgd_style_4.rkt") (lib "ts-files/cpx/tscpx_hot_potato.rkt") (lib "ts-files/tsrokit/tsrokit_sumobot.rkt") (lib "ts-files/vr/tsvr_start_b.rkt") (lib "ts-files/cpx/tscpx_set_light_wait.rkt") (lib "ts-files/vr/tsvr_start_a.rkt") (lib "ts-files/tsgd/tsgd_race_game_starter.rkt") (lib "ts-files/tsrokit/tsrokit_soccerbot2.rkt") (lib "ts-files/tsrokit/tsrokit_mousebot2.rkt") (lib "ts-files/tsweb/tsweb_module1_complete.rkt") (lib "ts-files/tsgd/tsgd_enemy.rkt") (lib "ts-files/tsweb/tsweb_module5_complete.rkt") (lib "ts-files/mt/tsmt_custom_drop.rkt") (lib "ts-files/tsgd/tsgd_race_game_5p.rkt") (lib "ts-files/cpx/tscpx_blaster_b.rkt") (lib "ts-files/cpx/tscpx_forever_siren.rkt") (lib "ts-files/cpx/tscpx_laser_tag_teams.rkt") (lib "ts-files/cpx/tscpx_blaster_d.rkt") (lib "ts-files/cpx/tscpx_rainbow_sparkle.rkt") (lib "ts-files/cpx/tscpx_set_function_10.rkt") (lib "ts-files/vr/tsvr_lighttime.rkt") (lib "ts-files/tsgd/tsgd_fireball.rkt") (lib "ts-files/cpx/tscpx_saber_a.rkt") (lib "ts-files/tsgd/tsgd_quest11_complete.rkt") (lib "ts-files/tsrokit/tsrokit_soccerbot3.rkt") (lib "ts-files/tsrokit/tsrokit_trailerbot2.rkt") (lib "ts-files/tsrokit/tsrokit_linefollow3.rkt") (lib "ts-files/app/tsapp_asl_app.rkt") (lib "ts-files/cpx/tscpx_blaster_f.rkt") (lib "ts-files/tsrokit/tsrokit_trailerbot3.rkt") (lib "ts-files/tsgd/tsgd_adventure_game_demo.rkt") (lib "ts-files/cpx/tscpx_set_light.rkt") (lib "ts-files/tsweb/tsweb_blog_template.rkt") (lib "ts-files/tsgd/tsgd_quest9_complete.rkt") (lib "ts-files/tsgd/tsgd_quest8_complete.rkt") (lib "ts-files/tsgd/tsgd_quest7_complete.rkt") (lib "ts-files/tsgd/tsgd_quest6_complete.rkt") (lib "ts-files/tsgd/tsgd_quest5_complete.rkt") (lib "ts-files/cpx/tscpx_saber_e.rkt") (lib "ts-files/tsrokit/tsrokit_linefollow2.rkt") (lib "ts-files/tsrokit/tsrokit_sumobot2.rkt") (lib "ts-files/tsweb/tsweb_module3_complete.rkt") (lib "ts-files/cpx/tscpx_test.rkt") (lib "ts-files/tsgd/tsgd_wall_and_lava.rkt") (lib "ts-files/tsrokit/tsrokit_linefollow.rkt") (lib "ts-files/cpx/tscpx_set_light_function.rkt") (lib "ts-files/cpx/tscpx_riff_surprise_1.rkt") (lib "ts-files/tsgd/style-demos/tsgd_style_3.rkt") (lib "ts-files/tsrokit/tsrokit_mousebot.rkt") (lib "ts-files/tsrokit/tsrokit_soccerbot4.rkt") (lib "ts-files/tsrokit/tsrokit_soccerbot.rkt") (lib "ts-files/tsweb/tsweb_module7_complete.rkt") (lib "ts-files/cpx/tscpx_blaster_e.rkt") (lib "ts-files/vr/tsvr_components.rkt") (lib "ts-files/cpx/tscpx_riff_1.rkt") (lib "ts-files/cpx/tscpx_saber_b.rkt") (lib "ts-files/cpx/tscpx_riff_2.rkt") (lib "ts-files/tsgd/tsgd_boss_health.rkt") (lib "ts-files/mt/tsmt_schematic.rkt") (lib "ts-files/mt/tsmt_multi_face.rkt") (lib "ts-files/cpx/tscpx_target_a.rkt") (lib "ts-files/cpx/tscpx_saber_d.rkt") (lib "ts-files/tscc/tscc_module10.rkt") (lib "ts-files/mt/tsmt_entity.rkt") (lib "ts-files/tsgd/tsgd_quest10_complete.rkt") (lib "ts-files/tsrokit/tsrokit_mousebot3.rkt"))) (name . "ts-files") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/ts-files.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "3252c883500641609200b698b73a09f0c96a6042") (source . "https://github.com/thoughtstem/ts-files.git") (source_url . "https://github.com/thoughtstem/ts-files.git"))))))) ("ts-game-jam-1" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/ts-game-jam-1.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "24816ceeb072938926d30e9508aedeb64a960593") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("https://github.com/thoughtstem/game-engine.git" "https://github.com/thoughtstem/game-engine-rpg.git" "https://github.com/thoughtstem/game-engine-demos.git?path=game-engine-demos-common")) (description . "Package for our upcoming game jams") (implies . ()) (last-checked . 1632904739) (last-edit . 1543857300) (last-updated . 1545499245) (modules . ((lib "ts-game-jam-1/doc/npc-katas.scrbl") (lib "ts-game-jam-1/examples/fornite-melee-battle-simple.rkt") (lib "ts-game-jam-1/examples/just-player.rkt") (lib "ts-game-jam-1/examples/fortnite-example.rkt") (lib "ts-game-jam-1/doc/intro-katas.scrbl") (lib "ts-game-jam-1/browsable-assets.rkt") (lib "ts-game-jam-1/examples/fornite-melee-battle-advanced.rkt") (lib "ts-game-jam-1/doc/badges.scrbl") (lib "ts-game-jam-1/scoring/score.rkt") (lib "ts-game-jam-1/doc/food-katas.scrbl") (lib "ts-game-jam-1/doc/practice-game-jam.scrbl") (lib "ts-game-jam-1/examples/shooting-and-enemy-death.rkt") (lib "ts-game-jam-1/examples/fortnite-battle-gear-weapons.rkt") (lib "ts-game-jam-1/doc/scoring.scrbl") (lib "ts-game-jam-1/doc/manual.scrbl") (lib "ts-game-jam-1/jam-lang.rkt") (lib "ts-game-jam-1/doc/tech-docs.scrbl") (lib "ts-game-jam-1/jam/survival-game-jam.rkt") (lib "ts-game-jam-1/examples/fortnite-loot-example.rkt") (lib "ts-game-jam-1/doc/coin-katas.scrbl") (lib "ts-game-jam-1/doc/crafter-katas.scrbl") (lib "ts-game-jam-1/jam/battle-arena-game-jam.rkt") (lib "ts-game-jam-1/main.rkt") (lib "ts-game-jam-1/examples/player-with-custom-npc.rkt") (lib "ts-game-jam-1/scoring/scoresheet.rkt") (lib "ts-game-jam-1/examples/player-with-custom-assets.rkt") (lib "ts-game-jam-1/examples/enemy-npc.rkt") (lib "ts-game-jam-1/examples/simple-in-line-assets.rkt") (lib "ts-game-jam-1/examples/mouse-shooting.rkt") (lib "ts-game-jam-1/test/scoring.rkt") (lib "ts-game-jam-1/examples/fortnite-melee-battle.rkt") (lib "ts-game-jam-1/doc/avatar-katas.scrbl") (lib "ts-game-jam-1/examples/auto-turret.rkt") (lib "ts-game-jam-1/examples/player-with-in-line-assets.rkt"))) (name . "ts-game-jam-1") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/ts-game-jam-1.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "24816ceeb072938926d30e9508aedeb64a960593") (source . "https://github.com/thoughtstem/ts-game-jam-1.git") (source_url . "https://github.com/thoughtstem/ts-game-jam-1.git"))))))) ("ts-icons" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/ts-icons.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ff6013cbb58ca0914b13a53bcdd2b4dd9bc609d3") (checksum-error . #f) (collection . "ts-icons") (conflicts . ()) (date-added . 1570065714) (dependencies . ("base" "https://github.com/thoughtstem/define-assets-from.git" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "A few icons we've used across projects") (implies . ()) (last-checked . 1632904741) (last-edit . 1570065714) (last-updated . 1582227508) (modules . ((lib "ts-icons/scribblings/ts-icons.scrbl") (lib "ts-icons/main.rkt"))) (name . "ts-icons") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/ts-icons.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "ff6013cbb58ca0914b13a53bcdd2b4dd9bc609d3") (source . "https://github.com/thoughtstem/ts-icons.git") (source_url . "https://github.com/thoughtstem/ts-icons.git"))))))) ("ts-tactics" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "manual" "doc/manual@ts-tactics/index.html"))) (failure-log . "server/built/fail/ts-tactics.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "fe8d4623b359cce2669b2bf9fb7a04d48942ef5b") (checksum-error . "pkg: specified directory is not in Git respository\n  path: ts-tactics\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:913:0: lift-git-directory-content\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:318:11\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:114:0: stage-package/info\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:720:0: pkg-stage\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:129:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (date-added . 1560437472) (dependencies . ("base" "pprint" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "ThoughtSTEM instructional meta-material") (implies . ()) (last-checked . 1632904744) (last-edit . 1560437472) (last-updated . 1621810180) (modules . ((lib "ts-tactics/classroom-simulation/simulate-room.rkt") (lib "ts-tactics/classroom-simulation/base.rkt") (lib "ts-tactics/classroom-simulation/rendering.rkt") (lib "ts-tactics/tactics/mechanics/points.rkt") (lib "ts-tactics/classroom-simulation/util.rkt") (lib "ts-tactics/main.rkt") (lib "ts-tactics/tactics/tactic-library/translation-challenge.rkt") (lib "ts-tactics/tactics/mechanics/basic-body-actions.rkt") (lib "ts-tactics/tactics/base/printing.rkt") (lib "ts-tactics/tactics/mechanics/timer.rkt") (lib "ts-tactics/assessments/plots/benchmarks.rkt") (lib "ts-tactics/tactics/tactic-library/code-carousel.rkt") (lib "ts-tactics/tactics/base/base.rkt") (lib "ts-tactics/tactics/mechanics/circle-play.rkt") (lib "ts-tactics/tactics/tactic-library/reverse-engineer.rkt") (lib "ts-tactics/scribblings/sub-routines.scrbl") (lib "ts-tactics/classroom-simulation/material.rkt") (lib "ts-tactics/scribblings/assessments-handbook-util.rkt") (lib "ts-tactics/scribblings/assessments-handbook.scrbl") (lib "ts-tactics/tactics/mechanics/basic-cognitive-actions.rkt") (lib "ts-tactics/tactics/tactic-library/mafia.rkt") (lib "ts-tactics/scribblings/manual.scrbl") (lib "ts-tactics/tactics/tactic-library/example-tactic.rkt") (lib "ts-tactics/tactics/tactic-library/translation-steps.rkt") (lib "ts-tactics/tactics/mechanics/basic-things.rkt") (lib "ts-tactics/scribblings/manual-extended.scrbl") (lib "ts-tactics/tactics/base/base-base.rkt") (lib "ts-tactics/classroom-simulation/main.rkt") (lib "ts-tactics/classroom-simulation/old-main.rkt") (lib "ts-tactics/assessments/plots/lang.rkt") (lib "ts-tactics/tactics/lang.rkt") (lib "ts-tactics/tactics/mechanics/basic-actions.rkt") (lib "ts-tactics/tactics/mechanics/voting.rkt") (lib "ts-tactics/tactics/mechanics/groups.rkt") (lib "ts-tactics/tactics/tactic-library/code-anatomy.rkt") (lib "ts-tactics/tactics/base/scribble.rkt") (lib "ts-tactics/classroom-simulation/activity.rkt") (lib "ts-tactics/tactics/tactic-library/disintegrating-code.rkt") (lib "ts-tactics/classroom-simulation/test.rkt") (lib "ts-tactics/tactics/mechanics/basic-verbal-actions.rkt") (lib "ts-tactics/tactics/tactic-library/team-memorize.rkt") (lib "ts-tactics/tactics/mechanics/basic-adverbs.rkt") (lib "ts-tactics/scribblings/example-tactic.scrbl") (lib "ts-tactics/tactics/tactic-library/building-up.rkt") (lib "ts-tactics/scribblings/manual-old.scrbl") (lib "ts-tactics/assessments/main.rkt") (lib "ts-tactics/tactics/mechanics/coding.rkt"))) (name . "ts-tactics") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (:error: . #t) (:no-tag: . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t))) (source . "https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-tactics") (tags . ()) (versions . #hash((default . #hasheq((checksum . "fe8d4623b359cce2669b2bf9fb7a04d48942ef5b") (source . "https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-tactics") (source_url . "https://github.com/thoughtstem/TS-Kata-Collections.git?path=ts-tactics"))))))) ("tulip" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tulip.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tulip.txt"))) (checksum . "1613cfd4d7e8dbc8ceb86cf33479375147f42b2f") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "tulip-lib")) (description . "") (implies . ("tulip-lib")) (last-checked . 1632904744) (last-edit . 1466529282) (last-updated . 1502816488) (modules . ()) (name . "tulip") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-tulip?path=tulip") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1613cfd4d7e8dbc8ceb86cf33479375147f42b2f") (source . "git://github.com/lexi-lambda/racket-tulip?path=tulip") (source_url . "http://github.com/lexi-lambda/racket-tulip/tree/master?path=tulip"))))))) ("tulip-lib" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tulip-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tulip-lib.txt"))) (checksum . "1613cfd4d7e8dbc8ceb86cf33479375147f42b2f") (checksum-error . #f) (collection . "tulip") (conflicts . ()) (dependencies . ("base" "functional-lib" "megaparsack-lib" "megaparsack-parser-tools" "parser-tools-lib" "curly-fn")) (description . "") (implies . ()) (last-checked . 1632904745) (last-edit . 1466529290) (last-updated . 1502816488) (modules . ((lib "tulip/lang/parser.rkt") (lib "tulip/lang/lexer.rkt") (lib "tulip/private/util/curry.rkt") (lib "tulip/lang/configure-runtime.rkt") (lib "tulip/racket/ffi.rkt") (lib "tulip/lang/emitter.rkt") (lib "tulip/list.rkt") (lib "tulip/private/util/srcloc.rkt") (lib "tulip/private/util/syntax-loc-props.rkt") (lib "tulip/private/configured-runtime-lang.rkt") (lib "tulip/base.rkt") (lib "tulip/lang/reader.rkt") (lib "tulip/main.rkt") (lib "tulip/math.rkt"))) (name . "tulip-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-tulip?path=tulip-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1613cfd4d7e8dbc8ceb86cf33479375147f42b2f") (source . "git://github.com/lexi-lambda/racket-tulip?path=tulip-lib") (source_url . "http://github.com/lexi-lambda/racket-tulip/tree/master?path=tulip-lib"))))))) ("tulip-test" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tulip-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tulip-test.txt"))) (checksum . "1613cfd4d7e8dbc8ceb86cf33479375147f42b2f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "tulip-lib")) (description . "") (implies . ()) (last-checked . 1632904745) (last-edit . 1466529328) (last-updated . 1502816489) (modules . ((lib "tests/tulip/id-namespace.rkt") (lib "tests/tulip/corecur.rkt") (lib "tests/tulip/assert.rkt") (lib "tests/tulip/list.rkt") (lib "tests/tulip/chain.rkt") (lib "tests/tulip/import.rkt"))) (name . "tulip-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:lexi.lambda@gmail.com . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-tulip?path=tulip-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "1613cfd4d7e8dbc8ceb86cf33479375147f42b2f") (source . "git://github.com/lexi-lambda/racket-tulip?path=tulip-test") (source_url . "http://github.com/lexi-lambda/racket-tulip/tree/master?path=tulip-test"))))))) ("turn-based-game" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "turn-based-game" "doc/turn-based-game@turn-based-game/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/turn-based-game.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/turn-based-game.txt"))) (checksum . "bdc793d50f67bb59446caecc9e5771d84e1eba17") (checksum-error . #f) (collection . "turn-based-game") (conflicts . ()) (dependencies . ("base" "agile" "collections-lib" "htdp-lib" "rackunit-lib" "scribble-lib" "racket-doc" "htdp-doc" "collections-doc")) (description . "interfaces and tools for defining and playing turn-based games") (implies . ()) (last-checked . 1632904746) (last-edit . 1498674875) (last-updated . 1624099094) (modules . ((lib "turn-based-game/examples/checkers-gui.rkt") (lib "turn-based-game/demo/tic-tac-toe.rkt") (lib "turn-based-game/turn-based-game.rkt") (lib "turn-based-game/examples/checkers.rkt") (lib "turn-based-game/demo/checkers.rkt") (lib "turn-based-game/computer-player.rkt") (lib "turn-based-game/computer-player/n-ahead.rkt") (lib "turn-based-game/controller/human-player-gui-controller.rkt") (lib "turn-based-game/examples/tic-tac-toe-gui.rkt") (lib "turn-based-game/demo/connect-four.rkt") (lib "turn-based-game/turn-based-game-gui.rkt") (lib "turn-based-game/controller/computer-player-gui-controller.rkt") (lib "turn-based-game/examples/connect-four-gui.rkt") (lib "turn-based-game/computer-player/score-explore-random.rkt") (lib "turn-based-game/examples/connect-four.rkt") (lib "turn-based-game/examples/tic-tac-toe.rkt") (lib "turn-based-game/scribblings/turn-based-game.scrbl"))) (name . "turn-based-game") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (games . #t) (ring:1 . #t))) (source . "git://github.com/AlexKnauth/turn-based-game") (tags . ("games")) (versions . #hash((default . #hasheq((checksum . "bdc793d50f67bb59446caecc9e5771d84e1eba17") (source . "git://github.com/AlexKnauth/turn-based-game") (source_url . "http://github.com/AlexKnauth/turn-based-game/tree/master"))))))) ("turnstile" . #hasheq((author . "alexander@knauth.org stchang@racket-lang.org") (authors . ("alexander@knauth.org" "stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/turnstile.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/turnstile.txt"))) (checksum . "220552416edf5646d796668176a473e4271205b2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("turnstile-lib" #:version "0.3.1") ("turnstile-example" #:version "0.3.1") ("turnstile-doc" #:version "0.3.1") ("turnstile-test" #:version "0.3.1"))) (description . "#lang for implementing typed languages with Racket") (implies . ()) (last-checked . 1632904746) (last-edit . 1540228201) (last-updated . 1618604887) (modules . ()) (name . "turnstile") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (author:stchang@racket-lang.org . #t) (lang . #t) (language . #t) (ring:1 . #t))) (source . "https://github.com/stchang/macrotypes.git?path=turnstile") (tags . ("lang" "language")) (versions . #hash((default . #hasheq((checksum . "220552416edf5646d796668176a473e4271205b2") (source . "https://github.com/stchang/macrotypes.git?path=turnstile") (source_url . "https://github.com/stchang/macrotypes.git?path=turnstile"))))))) ("turnstile-doc" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "turnstile" "doc/turnstile@turnstile-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/turnstile-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/turnstile-doc.txt"))) (checksum . "220552416edf5646d796668176a473e4271205b2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "7.0") "racket-doc" "sandbox-lib" "scribble-lib" "rackunit-lib" "rackunit-doc" ("rackunit-macrotypes-lib" #:version "0.3.1") ("turnstile-lib" #:version "0.3.6") ("turnstile-example" #:version "0.3.1"))) (description . "") (implies . ()) (last-checked . 1632904746) (last-edit . 1540411795) (last-updated . 1618604888) (modules . ((lib "turnstile/scribblings/common.rkt") (lib "turnstile/scribblings/doc-utils.rkt") (lib "turnstile/scribblings/guide.scrbl") (lib "turnstile/scribblings/turnstile.scrbl") (lib "turnstile/scribblings/rackunit-turnstile.scrbl") (lib "turnstile/scribblings/reference.scrbl"))) (name . "turnstile-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/stchang/macrotypes.git?path=turnstile-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "220552416edf5646d796668176a473e4271205b2") (source . "https://github.com/stchang/macrotypes.git?path=turnstile-doc") (source_url . "https://github.com/stchang/macrotypes.git?path=turnstile-doc"))))))) ("turnstile-example" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/turnstile-example.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/turnstile-example.txt"))) (checksum . "220552416edf5646d796668176a473e4271205b2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "7.0") "typed-racket-lib" ("turnstile-lib" #:version "0.5.6") ("macrotypes-lib" #:version "0.3.5"))) (description . "") (implies . ()) (last-checked . 1632904746) (last-edit . 1540411812) (last-updated . 1618604889) (modules . ((lib "turnstile/examples/linear/lin+tup.rkt") (lib "turnstile/examples/simple/stlc+lit.rkt") (lib "turnstile/examples/optimize/sysf.rkt") (lib "turnstile/examples/stlc+reco+var.rkt") (lib "turnstile/examples/trivial.rkt") (lib "turnstile/examples/optimize/stlc.rkt") (lib "turnstile/examples/stlc+tup.rkt") (lib "turnstile/examples/optimize/stlc+cons.rkt") (lib "turnstile/examples/optimize/stlc+rec-iso.rkt") (lib "turnstile/examples/dep/dep-ind-cur2+eq.rkt") (lib "turnstile/examples/stlc+rec-iso.rkt") (lib "turnstile/examples/stlc-jesse.rkt") (lib "turnstile/examples/linear/lin3.rkt") (lib "turnstile/examples/optimize/stlc+box.rkt") (lib "turnstile/examples/optimize/stlc+reco+sub.rkt") (lib "turnstile/examples/dep.rkt") (lib "turnstile/examples/simple/ext-stlc.rkt") (lib "turnstile/examples/optimize/stlc+reco+var.rkt") (lib "turnstile/examples/dep/dep-ind-cur2+eq2.rkt") (lib "turnstile/examples/stlc+union+case.rkt") (lib "turnstile/examples/optimize/stlc+sub.rkt") (lib "turnstile/examples/cmu15-814/stlc+sum+rec.rkt") (lib "turnstile/examples/fomega2.rkt") (lib "turnstile/examples/optimize/fomega2.rkt") (lib "turnstile/examples/stlc.rkt") (lib "turnstile/examples/stlc+lit.rkt") (lib "turnstile/examples/fomega-no-reuse-old.rkt") (lib "turnstile/examples/samc-define-lang.rkt") (lib "turnstile/examples/dep/dep-ind-cur2.rkt") (lib "turnstile/examples/linear/lin4.rkt") (lib "turnstile/examples/cmu15-814/stlc+sum+fix.rkt") (lib "turnstile/examples/samc-define-lang2.rkt") (lib "turnstile/examples/stlc+cons.rkt") (lib "turnstile/examples/stlc+reco+sub.rkt") (lib "turnstile/examples/cmu15-814/stlc.rkt") (lib "turnstile/examples/linear/lin5.rkt") (lib "turnstile/examples/linear/lin+cons.rkt") (lib "turnstile/examples/simple/stlc.rkt") (lib "turnstile/examples/stlc+effect.rkt") (lib "turnstile/examples/fomega.rkt") (lib "turnstile/examples/ext-stlc-no-unicode.rkt") (lib "turnstile/examples/linear/id-set-utils.rkt") (lib "turnstile/examples/util/filter-maximal.rkt") (lib "turnstile/examples/cmu15-814/stlc+sum+forall.rkt") (lib "turnstile/examples/dep/dep-ind-cur2+nat+datum.rkt") (lib "turnstile/examples/optimize/ext-stlc.rkt") (lib "turnstile/examples/dep/dep-ind-cur2+bool.rkt") (lib "turnstile/examples/stlc+union.rkt") (lib "turnstile/examples/linear/lin+chan.rkt") (lib "turnstile/examples/stlc+box.rkt") (lib "turnstile/examples/optimize/fsub.rkt") (lib "turnstile/examples/linear/fabul-utils.rkt") (lib "turnstile/examples/fomega-no-reuse.rkt") (lib "turnstile/examples/stlc+sub.rkt") (lib "turnstile/examples/linear/lin.rkt") (lib "turnstile/examples/infer.rkt") (lib "turnstile/examples/ext-stlc.rkt") (lib "turnstile/examples/optimize/fomega.rkt") (lib "turnstile/examples/stlc+reco2.rkt") (lib "turnstile/examples/sysf.rkt") (lib "turnstile/examples/optimize/stlc+tup.rkt") (lib "turnstile/examples/cmu15-814/stlc+sum+exist.rkt") (lib "turnstile/examples/linear/lin2.rkt") (lib "turnstile/examples/dep/dep-ind-cur2+data.rkt") (lib "turnstile/examples/optimize/stlc+lit.rkt") (lib "turnstile/examples/dep/dep-ind-cur2+nat.rkt") (lib "turnstile/examples/dep/dep-ind-cur2+sugar.rkt") (lib "turnstile/examples/exist.rkt") (lib "turnstile/examples/cmu15-814/stlc+sum.rkt") (lib "turnstile/examples/dep/dep-ind-cur2+data2.rkt") (lib "turnstile/examples/linear/fabul.rkt") (lib "turnstile/examples/fsub.rkt") (lib "turnstile/examples/linear/lin+var.rkt") (lib "turnstile/examples/optimize/exist.rkt"))) (name . "turnstile-example") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/stchang/macrotypes.git?path=turnstile-example") (tags . ()) (versions . #hash((default . #hasheq((checksum . "220552416edf5646d796668176a473e4271205b2") (source . "https://github.com/stchang/macrotypes.git?path=turnstile-example") (source_url . "https://github.com/stchang/macrotypes.git?path=turnstile-example"))))))) ("turnstile-lib" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/turnstile-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/turnstile-lib.txt"))) (checksum . "220552416edf5646d796668176a473e4271205b2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "7.0") ("macrotypes-lib" #:version "0.3.5") "lens-lib")) (description . "") (implies . ()) (last-checked . 1632904747) (last-edit . 1540403996) (last-updated . 1618604891) (modules . ((lib "turnstile/more-utils.rkt") (lib "turnstile+/quicklang/lang/reader.rkt") (lib "turnstile+/eval.rkt") (lib "turnstile+/typedefs.rkt") (lib "turnstile/base/lang/reader.rkt") (lib "turnstile/mode.rkt") (lib "turnstile+/type-constraints.rkt") (lib "turnstile/base.rkt") (lib "turnstile/turnstile.rkt") (lib "turnstile+/base.rkt") (lib "turnstile/main.rkt") (lib "turnstile+/lang/reader.rkt") (lib "turnstile/type-constraints.rkt") (lib "turnstile/no-unicode.rkt") (lib "turnstile+/main.rkt") (lib "turnstile/quicklang/lang/reader.rkt") (lib "turnstile/typedefs.rkt") (lib "turnstile/lang/lang/reader.rkt") (lib "turnstile/lang/reader.rkt") (lib "turnstile/eval.rkt") (lib "turnstile+/base/lang/reader.rkt") (lib "turnstile/lang.rkt") (lib "turnstile+/more-utils.rkt"))) (name . "turnstile-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/stchang/macrotypes.git?path=turnstile-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "220552416edf5646d796668176a473e4271205b2") (source . "https://github.com/stchang/macrotypes.git?path=turnstile-lib") (source_url . "https://github.com/stchang/macrotypes.git?path=turnstile-lib"))))))) ("turnstile-test" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/turnstile-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/turnstile-test.txt"))) (checksum . "220552416edf5646d796668176a473e4271205b2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "7.0") ("turnstile-lib" #:version "0.5.3") ("turnstile-example" #:version "0.7") ("rackunit-macrotypes-lib" #:version "0.3.1"))) (description . "") (implies . ()) (last-checked . 1632904747) (last-edit . 1540412263) (last-updated . 1618604892) (modules . ((lib "tests/turnstile/stlc+cons-tests.rkt") (lib "tests/turnstile/rackunit-typechecking.rkt") (lib "tests/turnstile/generic.rkt") (lib "tests/turnstile/typed-rackunit-typechecking.rkt") (lib "tests/turnstile/dep/dep-ind-cur2-list-tests2.rkt") (lib "tests/turnstile/optimize/rackunit-kindchecking.rkt") (lib "tests/turnstile/simple/ext-stlc-tests.rkt") (lib "tests/turnstile/fomega-tests.rkt") (lib "tests/turnstile/stlc+reco+sub-tests.rkt") (lib "tests/turnstile/issues/issue072.rkt") (lib "tests/turnstile/linear/lin4-tests.rkt") (lib "tests/turnstile/linear/lin-tests.rkt") (lib "tests/turnstile/filter-maximal.rkt") (lib "tests/turnstile/dep/dep-ind-cur2-nat-tests.rkt") (lib "tests/turnstile/simple/stlc+lit-tests.rkt") (lib "tests/turnstile/linear/lin2-tests.rkt") (lib "tests/turnstile/cmu15-814/stlc+sum+forall-tests.rkt") (lib "tests/turnstile/stlc+union.rkt") (lib "tests/turnstile/optimize/fsub-tests.rkt") (lib "tests/turnstile/pat-expander-tests.rkt") (lib "tests/turnstile/optimize/exist-tests.rkt") (lib "tests/turnstile/load-time-tests/turnstile-base-lang.rkt") (lib "tests/turnstile/turnstile-tests.rkt") (lib "tests/turnstile/stlc-tests.rkt") (lib "tests/turnstile/samc-define-lang-tests.rkt") (lib "tests/turnstile/optimize/stlc+tup-tests.rkt") (lib "tests/turnstile/stlc+reco+var-tests.rkt") (lib "tests/turnstile/dep/dep-ind-cur2-list-tests.rkt") (lib "tests/turnstile/optimize/fomega2-tests.rkt") (lib "tests/turnstile/optimize/stlc+reco+sub-tests.rkt") (lib "tests/turnstile/optimize/stlc+lit-tests.rkt") (lib "tests/turnstile/optimize/ext-stlc-tests.rkt") (lib "tests/turnstile/dep/dep-ind-cur2-tests.rkt") (lib "tests/turnstile/cmu15-814/stlc+sum+fix-tests.rkt") (lib "tests/turnstile/linear/lin+tup-tests.rkt") (lib "tests/turnstile/fomega-no-reuse-tests.rkt") (lib "tests/turnstile/linear/fabul-tests.rkt") (lib "tests/turnstile/stlc+effect-tests.rkt") (lib "tests/turnstile/tlb-infer-tests.rkt") (lib "tests/turnstile/dep/dep-ind-cur2-data2-tests.rkt") (lib "tests/turnstile/stlc-jesse-tests.rkt") (lib "tests/turnstile/linear/lin+var-tests.rkt") (lib "tests/turnstile/telescopes.rkt") (lib "tests/turnstile/exist-tests.rkt") (lib "tests/turnstile/trivial-test.rkt") (lib "tests/turnstile/dep/dep-ind-cur2-eq-tests.rkt") (lib "tests/turnstile/linear/lin3-tests.rkt") (lib "tests/turnstile/fomega-no-reuse-tests-old.rkt") (lib "tests/turnstile/stlc+box-tests.rkt") (lib "tests/turnstile/dep/dep-ind-cur2-subtype-tests.rkt") (lib "tests/turnstile/cmu15-814/stlc+sum+exist-tests.rkt") (lib "tests/turnstile/dep-tests.rkt") (lib "tests/turnstile/ext-stlc-tests.rkt") (lib "tests/turnstile/optimize/stlc+sub-tests.rkt") (lib "tests/turnstile/rackunit-kindchecking.rkt") (lib "tests/turnstile/load-time-tests/turnstile-base-lang-prog.rkt") (lib "tests/turnstile/fsub-tests.rkt") (lib "tests/turnstile/cmu15-814/stlc+sum+rec-tests.rkt") (lib "tests/turnstile/optimize/stlc+rec-iso-tests.rkt") (lib "tests/turnstile/stlc+reco2-tests.rkt") (lib "tests/turnstile/optimize/fomega-tests.rkt") (lib "tests/turnstile/optimize/stlc+reco+var-tests.rkt") (lib "tests/turnstile/linear/lin+chan-tests.rkt") (lib "tests/turnstile/simple/stlc-tests.rkt") (lib "tests/turnstile/stlc+sub-tests.rkt") (lib "tests/turnstile/typed-var-stx/typed-var-test.rkt") (lib "tests/turnstile/typed-var-stx/typed-var-example.rkt") (lib "tests/turnstile/linear/lin5-tests.rkt") (lib "tests/turnstile/samc-define-lang-tests2.rkt") (lib "tests/turnstile/load-time-tests/turnstile-lang.rkt") (lib "tests/turnstile/cmu15-814/stlc+sum-tests.rkt") (lib "tests/turnstile/dep/dep-ind-cur2-eq-tests2.rkt") (lib "tests/turnstile/cmu15-814/stlc-tests.rkt") (lib "tests/turnstile/mode.rkt") (lib "tests/turnstile/stlc+union+case.rkt") (lib "tests/turnstile/load-time-tests/racket-prog.rkt") (lib "tests/turnstile/optimize/stlc+cons-tests.rkt") (lib "tests/turnstile/optimize/stlc+box-tests.rkt") (lib "tests/turnstile/stlc+rec-iso-tests.rkt") (lib "tests/turnstile/linear/rackunit-lin.rkt") (lib "tests/turnstile/load-time-tests/turnstile-lang-prog.rkt") (lib "tests/turnstile/pat-expander-tests-def.rkt") (lib "tests/turnstile/dep/dep-ind-cur2-nat+datum-tests.rkt") (lib "tests/turnstile/stlc+tup-tests.rkt") (lib "tests/turnstile/issues/issue035.rkt") (lib "tests/turnstile/dep/dep-ind-cur2-bool-tests.rkt") (lib "tests/turnstile/fomega2-tests.rkt") (lib "tests/turnstile/load-time-tests/racket-base-prog.rkt") (lib "tests/turnstile/ext-stlc-no-unicode-tests.rkt") (lib "tests/turnstile/stlc+lit-tests.rkt") (lib "tests/turnstile/linear/lin+cons-tests.rkt") (lib "tests/turnstile/optimize/sysf-tests.rkt") (lib "tests/turnstile/issues/issue084-deftypedvariable.rkt") (lib "tests/turnstile/sysf-tests.rkt"))) (name . "turnstile-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:stchang@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/stchang/macrotypes.git?path=turnstile-test") (tags . ()) (versions . #hash((default . #hasheq((checksum . "220552416edf5646d796668176a473e4271205b2") (source . "https://github.com/stchang/macrotypes.git?path=turnstile-test") (source_url . "https://github.com/stchang/macrotypes.git?path=turnstile-test"))))))) ("tweedledee" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tweedledee.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tweedledee.txt"))) (checksum . "f0919e3816b448cea75db7d9121f355a9fe4edec") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1588723766) (dependencies . ("base")) (description . "Conflicts with tweedledum, or any other package with a `hill/king` module.") (implies . ()) (last-checked . 1632904747) (last-edit . 1588723881) (last-updated . 1588730822) (modules . ((lib "hill/king.rkt"))) (name . "tweedledee") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:sage@sagegerard.com . #t) (ring:1 . #t))) (source . "https://github.com/zyrolasting/tweedledee.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "f0919e3816b448cea75db7d9121f355a9fe4edec") (source . "https://github.com/zyrolasting/tweedledee.git") (source_url . "https://github.com/zyrolasting/tweedledee.git"))))))) ("tweedledum" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tweedledum.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tweedledum.txt"))) (checksum . "64417ba609ea7a5db1ca7c25baa63dfb59a3955e") (checksum-error . #f) (collection . (multi)) (conflicts . ("tweedledee")) (date-added . 1588723805) (dependencies . ("base")) (description . "Conflicts with tweedledee, or any other package with a `hill/king` module.") (implies . ()) (last-checked . 1632904747) (last-edit . 1588723845) (last-updated . 1588730823) (modules . ((lib "hill/king.rkt"))) (name . "tweedledum") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:no-tag: . #t) (author:sage@sagegerard.com . #t) (ring:2 . #t))) (source . "https://github.com/zyrolasting/tweedledum.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "64417ba609ea7a5db1ca7c25baa63dfb59a3955e") (source . "https://github.com/zyrolasting/tweedledum.git") (source_url . "https://github.com/zyrolasting/tweedledum.git"))))))) ("twilio" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/twilio.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/twilio.txt"))) (checksum . "2c4cb087cd4d6b9eb6bc6a57035169e32848629e") (checksum-error . #f) (collection . "twilio") (conflicts . ()) (date-added . 1554730962) (dependencies . ("base")) (description . "A Twilio client for Racket.") (implies . ()) (last-checked . 1632904747) (last-edit . 1554730962) (last-updated . 1558623687) (modules . ((lib "twilio/main.rkt"))) (name . "twilio") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ring:1 . #t) (sms . #t) (twilio . #t) (web . #t))) (source . "https://github.com/Bogdanp/racket-twilio.git?path=twilio") (tags . ("sms" "twilio" "web")) (versions . #hash((default . #hasheq((checksum . "2c4cb087cd4d6b9eb6bc6a57035169e32848629e") (source . "https://github.com/Bogdanp/racket-twilio.git?path=twilio") (source_url . "https://github.com/Bogdanp/racket-twilio.git?path=twilio"))))))) ("twixt" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "twixt" "doc/twixt@twixt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/twixt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/twixt.txt"))) (checksum . "41aca88a7a7e5a993460df011da67b4fa31daadc") (checksum-error . #f) (collection . "twixt") (conflicts . ()) (date-added . 1582096611) (dependencies . ("pict-lib" "rebellion" "base" "pict-doc" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "A library for modeling the board game TwixT") (implies . ()) (last-checked . 1632904748) (last-edit . 1582096611) (last-updated . 1582191480) (modules . ((lib "twixt/main.rkt") (lib "twixt/main.scrbl") (lib "twixt/base.rkt"))) (name . "twixt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jackhfirth@gmail.com . #t) (data-structures . #t) (games . #t) (ring:1 . #t))) (source . "https://github.com/jackfirth/twixt.git") (tags . ("data-structures" "games")) (versions . #hash((default . #hasheq((checksum . "41aca88a7a7e5a993460df011da67b4fa31daadc") (source . "https://github.com/jackfirth/twixt.git") (source_url . "https://github.com/jackfirth/twixt.git"))))))) ("txexpr" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "txexpr" "doc/txexpr@txexpr/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/txexpr.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/txexpr.txt"))) (checksum . "41d217580363c9cb11e2321c79f89c3cd7a604c1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" ("sugar" #:version "0.2") "rackunit-lib" "scribble-lib" "racket-doc" "rackunit-doc")) (description . "Handy tools for working with HTML-style tagged X-expressions") (implies . ()) (last-checked . 1632904748) (last-edit . 1544961873) (last-updated . 1621355911) (modules . ((lib "txexpr/scribblings/txexpr.scrbl") (lib "txexpr/main.rkt") (lib "txexpr/test/tests.rkt") (lib "txexpr/stx.rkt") (lib "txexpr/test/check-values.rkt") (lib "txexpr/check.rkt") (lib "txexpr/private/container.rkt") (lib "txexpr/private/define-provide-safe-match.rkt") (lib "txexpr/test/test-txexpr-stx.rkt") (lib "txexpr/unstable/main.rkt") (lib "txexpr/base.rkt") (lib "txexpr/test/contract-tests.rkt"))) (name . "txexpr") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/mbutterick/txexpr.git") (tags . ("web")) (versions . #hash((default . #hasheq((checksum . "41d217580363c9cb11e2321c79f89c3cd7a604c1") (source . "https://github.com/mbutterick/txexpr.git") (source_url . "https://github.com/mbutterick/txexpr.git"))) ("6.0" . #hasheq((checksum . "3b6f81bccf10cf6604b27a362eb5bee9a395954a") (source . "git://github.com/mbutterick/txexpr#v6.0-exception") (source_url . "http://github.com/mbutterick/txexpr/tree/master#v6.0-exception"))))))) ("txexpr-stxparse" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/txexpr-stxparse.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/txexpr-stxparse.txt"))) (checksum . "9cd7beea3ff8ecf1fd3e77cddf71c931f9fc24df") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "txexpr" "rackunit-lib")) (description . "syntax-parse patterns for parsing Tagged X-expressions") (implies . ()) (last-checked . 1632904748) (last-edit . 1544921169) (last-updated . 1544763662) (modules . ((lib "txexpr/stx/test/test-txexpr-stxparse.rkt") (lib "txexpr/stx/parse.rkt"))) (name . "txexpr-stxparse") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t) (xexpr . #t))) (source . "https://github.com/AlexKnauth/txexpr-stxparse.git") (tags . ("xexpr")) (versions . #hash((default . #hasheq((checksum . "9cd7beea3ff8ecf1fd3e77cddf71c931f9fc24df") (source . "https://github.com/AlexKnauth/txexpr-stxparse.git") (source_url . "https://github.com/AlexKnauth/txexpr-stxparse.git"))) ("6.1.1" . #hasheq((checksum . "9cd7beea3ff8ecf1fd3e77cddf71c931f9fc24df") (source . "git://github.com/AlexKnauth/txexpr-stxparse") (source_url . "http://github.com/AlexKnauth/txexpr-stxparse/tree/master"))))))) ("type-conventions" . #hasheq((author . "jackhfirth@gmail.com") (authors . ("jackhfirth@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/type-conventions.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/type-conventions.txt"))) (checksum . "550d9045206bd1c0a05713fa866a9cc2a0b48d99") (checksum-error . #f) (collection . "type-conventions") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more" "rackunit-lib")) (description . "Forms for giving specific argument names implicit types") (implies . ()) (last-checked . 1632904749) (last-edit . 1412969219) (last-updated . 1502816494) (modules . ((lib "type-conventions/conventions-data.rkt") (lib "type-conventions/main.rkt") (lib "type-conventions/formals-class.rkt") (lib "type-conventions/type-args.rkt") (lib "type-conventions/stx-helpers.rkt") (lib "type-conventions/default-conventions.rkt") (lib "type-conventions/example.rkt") (lib "type-conventions/stx-test-helpers.rkt"))) (name . "type-conventions") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jackhfirth@gmail.com . #t) (ring:1 . #t) (shorthand . #t) (syntax . #t) (typed-racket . #t))) (source . "git://github.com/jackfirth/type-conventions") (tags . ("shorthand" "syntax" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "550d9045206bd1c0a05713fa866a9cc2a0b48d99") (source . "git://github.com/jackfirth/type-conventions") (source_url . "http://github.com/jackfirth/type-conventions/tree/master"))))))) ("type-expander" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "type-expander" "doc/type-expander@type-expander/index.html") ("main" "type-expander-implementation" "doc/type-expander-implementation@type-expander/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/type-expander.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/type-expander.txt"))) (checksum . "b182b9422083bf8adee71d6543f78372ad801ede") (checksum-error . #f) (collection . "type-expander") (conflicts . ()) (date-added . 1614799552) (dependencies . ("base" "rackunit-lib" "scribble-lib" "typed-racket-lib" "typed-racket-more" "hyper-literate" "auto-syntax-e" "debug-scopes" "version-case" "scribble-lib" "racket-doc" "typed-racket-more" "typed-racket-doc" "scribble-enhanced" "mutable-match-lambda")) (description . "Type expanders for typed/racket, which work like match expanders for match") (implies . ()) (last-checked . 1632904749) (last-edit . 1614889823) (last-updated . 1617546904) (modules . ((lib "type-expander/base/lang/reader.rkt") (lib "type-expander/test/type-expander-test.rkt") (lib "type-expander/parameterize-lexical-context.rkt") (lib "type-expander/type-expander.hl.rkt") (lib "type-expander/lang/reader.rkt") (lib "type-expander/test/base-lang-test-2.rkt") (lib "type-expander/test/readme.rkt") (lib "type-expander/base.rkt") (lib "type-expander/scribblings/deprecated-colon.scrbl") (lib "type-expander/main.rkt") (lib "type-expander/dbg.rkt") (lib "type-expander/test/lang-test-2.rkt") (lib "type-expander/test/base-lang-test-1.rkt") (lib "type-expander/contracts-to-types.rkt") (lib "type-expander/scribblings/contracts-to-types.scrbl") (lib "type-expander/test/test-contracts-to-types.rkt") (lib "type-expander/identifiers.rkt") (lib "type-expander/expander.rkt") (lib "type-expander/lang.rkt") (lib "type-expander/scribblings/type-expander.scrbl") (lib "type-expander/more-expanders.hl.rkt") (lib "type-expander/test/lang-test-1.rkt") (lib "type-expander/lang/main.rkt") (lib "type-expander/test/base-lang-test-3.rkt") (lib "type-expander/utils.rkt") (lib "type-expander/lang/lang/reader.rkt") (lib "type-expander/test/lang-test-3.rkt") (lib "type-expander/scribblings/type-expander-implementation.scrbl"))) (name . "type-expander") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/jsmaniac/type-expander.git#main") (tags . ("typed-racket")) (versions . #hash((default . #hasheq((checksum . "b182b9422083bf8adee71d6543f78372ad801ede") (source . "https://github.com/jsmaniac/type-expander.git#main") (source_url . "https://github.com/jsmaniac/type-expander.git#main"))))))) ("typed-compose" . #hasheq((author . "sivanov-racket-pkgs@colimite.fr") (authors . ("sivanov-racket-pkgs@colimite.fr")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "typed-compose" "doc/typed-compose@typed-compose/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-compose.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-compose.txt"))) (checksum . "b8363160a23ad7f9684c69ee9bc1cf659b7971db") (checksum-error . #f) (collection . "typed-compose") (conflicts . ()) (date-added . 1609788691) (dependencies . ("typed-racket-lib" "base" "typed-racket-doc" "racket-doc" "rackunit-typed" "sandbox-lib" "scribble-lib")) (description . "Utilities for composing functions in Typed Racket.") (implies . ()) (last-checked . 1632904749) (last-edit . 1609788691) (last-updated . 1624048717) (modules . ((lib "typed-compose/typed-compose.scrbl") (lib "typed-compose/main.rkt"))) (name . "typed-compose") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sivanov-racket-pkgs@colimite.fr . #t) (compose . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://git.marvid.fr/scolobb/typed-compose.git") (tags . ("compose" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "b8363160a23ad7f9684c69ee9bc1cf659b7971db") (source . "https://git.marvid.fr/scolobb/typed-compose.git") (source_url . "https://git.marvid.fr/scolobb/typed-compose.git"))))))) ("typed-map" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-map.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-map.txt"))) (checksum . "7a70650b6f8e1222fe1e4ebd2fb6b9b2489301e2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614799556) (dependencies . ("typed-map-lib" "typed-map-test" "typed-map-doc")) (description . "Type inference helper for map with Typed/Racket. Supports afl (rather the unhygienic variant, aful/unhygienic), un-annotated lambdas and polymorphic functions.") (implies . ("typed-map-lib" "typed-map-test" "typed-map-doc")) (last-checked . 1632904751) (last-edit . 1614889829) (last-updated . 1617546904) (modules . ()) (name . "typed-map") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:racket@suzanne.soy . #t) (functional . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map#main") (tags . ("functional" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "7a70650b6f8e1222fe1e4ebd2fb6b9b2489301e2") (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map#main") (source_url . "https://github.com/jsmaniac/typed-map.git?path=typed-map#main"))))))) ("typed-map-doc" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "typed-map" "doc/typed-map@typed-map-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-map-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-map-doc.txt"))) (checksum . "7a70650b6f8e1222fe1e4ebd2fb6b9b2489301e2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614799560) (dependencies . ("base" "scribble-lib" "racket-doc" "typed-racket-doc" "aful" "typed-map-lib")) (description . "Documentation for typed-map") (implies . ()) (last-checked . 1632904751) (last-edit . 1614889835) (last-updated . 1617546905) (modules . ((lib "typed-map/scribblings/typed-map.scrbl"))) (name . "typed-map-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (docs . #t) (ring:1 . #t) (typed-map . #t))) (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map-doc#main") (tags . ("docs" "typed-map")) (versions . #hash((default . #hasheq((checksum . "7a70650b6f8e1222fe1e4ebd2fb6b9b2489301e2") (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map-doc#main") (source_url . "https://github.com/jsmaniac/typed-map.git?path=typed-map-doc#main"))))))) ("typed-map-lib" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-map-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-map-lib.txt"))) (checksum . "7a70650b6f8e1222fe1e4ebd2fb6b9b2489301e2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614799563) (dependencies . ("base" "typed-racket-lib")) (description . "Implementation of typed-map") (implies . ()) (last-checked . 1632904751) (last-edit . 1614889840) (last-updated . 1617546906) (modules . ((lib "typed-map/main.rkt"))) (name . "typed-map-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:racket@suzanne.soy . #t) (ring:1 . #t) (typed-map . #t))) (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map-lib#main") (tags . ("typed-map")) (versions . #hash((default . #hasheq((checksum . "7a70650b6f8e1222fe1e4ebd2fb6b9b2489301e2") (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map-lib#main") (source_url . "https://github.com/jsmaniac/typed-map.git?path=typed-map-lib#main"))))))) ("typed-map-test" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-map-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-map-test.txt"))) (checksum . "7a70650b6f8e1222fe1e4ebd2fb6b9b2489301e2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1614799567) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "typed-map-lib" "aful")) (description . "Tests for typed-map") (implies . ()) (last-checked . 1632904751) (last-edit . 1614889845) (last-updated . 1617546906) (modules . ((lib "typed-map/test/gh-bug-2.rkt") (lib "typed-map/test/test-map.rkt"))) (name . "typed-map-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:racket@suzanne.soy . #t) (ring:1 . #t) (tests . #t) (typed-map . #t))) (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map-test#main") (tags . ("tests" "typed-map")) (versions . #hash((default . #hasheq((checksum . "7a70650b6f8e1222fe1e4ebd2fb6b9b2489301e2") (source . "https://github.com/jsmaniac/typed-map.git?path=typed-map-test#main") (source_url . "https://github.com/jsmaniac/typed-map.git?path=typed-map-test#main"))))))) ("typed-minikanren" . #hasheq((author . "dalev@alum.wpi.edu") (authors . ("dalev@alum.wpi.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-minikanren.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-minikanren.txt"))) (checksum . "83262e26f03581c99a072db03dfbafb1ab9401f2") (checksum-error . #f) (collection . "typed-minikanren") (conflicts . ()) (date-added . 1607116675) (dependencies . ("typed-racket-lib" "base" "rackunit-typed")) (description . "An implementation of miniKanren in typed racket.") (implies . ()) (last-checked . 1632904752) (last-edit . 1607116675) (last-updated . 1620073963) (modules . ((lib "typed-minikanren/main.rkt") (lib "typed-minikanren/src/term.rkt") (lib "typed-minikanren/test/zebra.rkt") (lib "typed-minikanren/src/dual-continuation.rkt") (lib "typed-minikanren/src/skew-bral.rkt"))) (name . "typed-minikanren") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:dalev@alum.wpi.edu . #t) (miniKanren . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/dalev/minikanren-typed-racket.git#release") (tags . ("miniKanren" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "83262e26f03581c99a072db03dfbafb1ab9401f2") (source . "https://github.com/dalev/minikanren-typed-racket.git#release") (source_url . "https://github.com/dalev/minikanren-typed-racket.git#release"))))))) ("typed-otp-lib" . #hasheq((author . "yilin@kebab-ca.se") (authors . ("yilin@kebab-ca.se")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-otp-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-otp-lib.txt"))) (checksum . "0757167eac914c45a756c090c4bdf5410080c145") (checksum-error . #f) (collection . "otp") (conflicts . ()) (date-added . 1613070856) (dependencies . ("base" "crypto-lib" "otp-lib" "typed-racket-lib" "rackunit-typed")) (description . "") (implies . ()) (last-checked . 1632904752) (last-edit . 1613070877) (last-updated . 1614118134) (modules . ((lib "otp/typed.rkt"))) (name . "typed-otp-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-desc: . #t) (author:yilin@kebab-ca.se . #t) (crypto . #t) (otp . #t) (ring:1 . #t))) (source . "https://github.com/yilinwei/otp.git?path=typed-otp-lib") (tags . ("crypto" "otp")) (versions . #hash((default . #hasheq((checksum . "0757167eac914c45a756c090c4bdf5410080c145") (source . "https://github.com/yilinwei/otp.git?path=typed-otp-lib") (source_url . "https://github.com/yilinwei/otp.git?path=typed-otp-lib"))))))) ("typed-racket" . #hash((author . "samth@racket-lang.org stamourv@racket-lang.org") (authors . ("samth@racket-lang.org" "stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("typed-racket-lib" "typed-racket-doc")) (description . "The implementation of the Typed Racket language") (implies . ("typed-racket-lib" "typed-racket-doc")) (last-checked . 1632904752) (last-edit . 1417659583) (last-updated . 1631039966) (modules . ()) (name . "typed-racket") (ring . 0) (search-terms . #hasheq((author:samth@racket-lang.org . #t) (author:stamourv@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "fec1bd3cabf5dc5a759b10e8b0916e073f605ec2") (source . "git://github.com/racket/typed-racket/?path=typed-racket") (source_url . "git://github.com/racket/typed-racket/?path=typed-racket"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("typed-racket-compatibility" . #hash((author . "samth@racket-lang.org stamourv@racket-lang.org") (authors . ("samth@racket-lang.org" "stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "typed-racket-lib" "base")) (description . "compatibility library for older Typed Racket-based languages") (implies . ()) (last-checked . 1632904752) (last-edit . 1417659583) (last-updated . 1631039969) (modules . ((lib "typed/scheme/lang/reader.rkt") (lib "typed-scheme/lang/reader.rkt") (lib "typed/scheme/no-check/lang/reader.rkt") (lib "typed-scheme/main.rkt") (lib "typed-scheme/no-check/lang/reader.rkt") (lib "typed/scheme.rkt") (lib "typed/scheme/system.rkt") (lib "typed/scheme/base.rkt") (lib "typed/scheme/no-check.rkt") (lib "typed/scheme/base/no-check/lang/reader.rkt") (lib "typed-scheme/no-check.rkt") (lib "typed/scheme/base/no-check.rkt") (lib "typed/scheme/base/lang/reader.rkt"))) (name . "typed-racket-compatibility") (ring . 0) (search-terms . #hasheq((author:samth@racket-lang.org . #t) (author:stamourv@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "fec1bd3cabf5dc5a759b10e8b0916e073f605ec2") (source . "git://github.com/racket/typed-racket/?path=typed-racket-compatibility") (source_url . "git://github.com/racket/typed-racket/?path=typed-racket-compatibility"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("typed-racket-datatype" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "typed-racket-datatype" "doc/typed-racket-datatype@typed-racket-datatype/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-racket-datatype.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-racket-datatype.txt"))) (checksum . "70af100b2035ee9383c63c0d969194659af233f2") (checksum-error . #f) (collection . "typed-racket-datatype") (conflicts . ()) (date-added . 1588292200) (dependencies . ("base" "typed-racket-lib" "typed-racket-datatype-lib" "scribble-lib" "racket-doc" "typed-racket-doc" "rackunit-lib" "rackunit-typed")) (description . "Algebraic Datatypes for Typed Racket (tests and docs)") (implies . ("typed-racket-datatype-lib")) (last-checked . 1632904753) (last-edit . 1593792513) (last-updated . 1630521559) (modules . ((lib "typed-racket-datatype/test/occurrence-typing-test.rkt") (lib "typed-racket-datatype/test/datatype-test.rkt") (lib "typed-racket-datatype/scribblings/typed-racket-datatype.scrbl") (lib "typed-racket-datatype/test/match-test.rkt"))) (name . "typed-racket-datatype") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t) (struct . #t) (typed-racket . #t))) (source . "https://github.com/AlexKnauth/typed-racket-datatype.git?path=typed-racket-datatype#main") (tags . ("struct" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "70af100b2035ee9383c63c0d969194659af233f2") (source . "https://github.com/AlexKnauth/typed-racket-datatype.git?path=typed-racket-datatype#main") (source_url . "https://github.com/AlexKnauth/typed-racket-datatype.git?path=typed-racket-datatype#main"))))))) ("typed-racket-datatype-lib" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-racket-datatype-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-racket-datatype-lib.txt"))) (checksum . "70af100b2035ee9383c63c0d969194659af233f2") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1588292063) (dependencies . ("base" "typed-racket-lib" "syntax-classes-lib")) (description . "Algebraic Datatypes for Typed Racket (implementation)") (implies . ()) (last-checked . 1632904753) (last-edit . 1595481549) (last-updated . 1630521559) (modules . ((lib "typed-racket-datatype/main.rkt") (lib "typed-racket-datatype/match.rkt"))) (name . "typed-racket-datatype-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t) (struct . #t) (typed-racket . #t))) (source . "https://github.com/AlexKnauth/typed-racket-datatype.git?path=typed-racket-datatype-lib#main") (tags . ("struct" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "70af100b2035ee9383c63c0d969194659af233f2") (source . "https://github.com/AlexKnauth/typed-racket-datatype.git?path=typed-racket-datatype-lib#main") (source_url . "https://github.com/AlexKnauth/typed-racket-datatype.git?path=typed-racket-datatype-lib#main"))))))) ("typed-racket-doc" . #hash((author . "samth@racket-lang.org stamourv@racket-lang.org") (authors . ("samth@racket-lang.org" "stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "source-syntax" "doc/source-syntax@typed-racket-doc/index.html") ("main" "ts-guide" "doc/ts-guide@typed-racket-doc/index.html") ("main" "ts-reference" "doc/ts-reference@typed-racket-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "net-doc" "net-cookies-doc" "scheme-lib" "srfi-lite-lib" "r6rs-doc" "srfi-doc" "r6rs-lib" "sandbox-lib" "at-exp-lib" ("scribble-lib" #:version "1.16") "pict-lib" ("typed-racket-lib" #:version "1.11") "typed-racket-compatibility" ("typed-racket-more" #:version "1.10") "racket-doc" "draw-lib" "web-server-doc")) (description . "documentation part of typed-racket") (implies . ()) (last-checked . 1632904753) (last-edit . 1417659583) (last-updated . 1631039972) (modules . ((lib "typed-racket/scribblings/guide/more.scrbl") (lib "typed-racket/scribblings/reference/exploring-types.scrbl") (lib "typed-racket/scribblings/reference/experimental.scrbl") (lib "typed-racket/scribblings/ts-guide.scrbl") (lib "typed-racket/scribblings/reference/typed-units.scrbl") (lib "typed-racket/scribblings/reference/typed-classes.scrbl") (lib "typed-racket/scribblings/reference/compatibility-languages.scrbl") (lib "typed-racket/scribblings/guide/optimization.scrbl") (lib "typed-racket/scribblings/guide/quick.scrbl") (lib "typed-racket/scribblings/ts-reference.scrbl") (lib "source-syntax/scribblings/source-syntax.scrbl") (lib "typed-racket/scribblings/reference/types.scrbl") (lib "typed-racket/scribblings/reference/optimization.scrbl") (lib "typed-racket/scribblings/utils.rkt") (lib "typed-racket/scribblings/guide/types.scrbl") (lib "typed-racket/scribblings/reference/legacy.scrbl") (lib "typed-racket/scribblings/reference/numeric-tower-pict.rkt") (lib "typed-racket/scribblings/reference/utilities.scrbl") (lib "typed-racket/scribblings/reference/no-check.scrbl") (lib "typed-racket/scribblings/guide/begin.scrbl") (lib "typed-racket/scribblings/reference/special-forms.scrbl") (lib "typed-racket/scribblings/reference/libraries.scrbl") (lib "typed-racket/scribblings/reference/unsafe.scrbl") (lib "typed-racket/scribblings/reference/typed-regions.scrbl") (lib "typed-racket/scribblings/guide/occurrence.scrbl") (lib "typed-racket/scribblings/guide/varargs.scrbl") (lib "typed-racket/scribblings/guide/typed-untyped-interaction.scrbl") (lib "typed-racket/scribblings/guide/caveats.scrbl"))) (name . "typed-racket-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:samth@racket-lang.org . #t) (author:stamourv@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "fec1bd3cabf5dc5a759b10e8b0916e073f605ec2") (source . "git://github.com/racket/typed-racket/?path=typed-racket-doc") (source_url . "git://github.com/racket/typed-racket/?path=typed-racket-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("typed-racket-hacks" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/typed-racket-hacks.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-racket-hacks.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-racket-hacks.txt"))) (checksum . "6d462852a29abb4406d53db2587e9d463b90b2ae") (checksum-error . #f) (collection . "typed-racket-hacks") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "set-extras")) (description . "Various workarounds for Typed Racket, most of which are expected to be eventually obsolete") (implies . ()) (last-checked . 1632904753) (last-edit . 1520300277) (last-updated . 1545076018) (modules . ((lib "typed-racket-hacks/unsafe.rkt") (lib "typed-racket-hacks/tests.rkt") (lib "typed-racket-hacks/main.rkt"))) (name . "typed-racket-hacks") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:pcn@cs.umd.edu . #t) (hacks . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/philnguyen/typed-racket-hacks.git?path=typed-racket-hacks") (tags . ("hacks" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "6d462852a29abb4406d53db2587e9d463b90b2ae") (source . "https://github.com/philnguyen/typed-racket-hacks.git?path=typed-racket-hacks") (source_url . "https://github.com/philnguyen/typed-racket-hacks.git?path=typed-racket-hacks"))))))) ("typed-racket-lib" . #hash((author . "samth@racket-lang.org stamourv@racket-lang.org") (authors . ("samth@racket-lang.org" "stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "7.5.0.15") "source-syntax" "pconvert-lib" "compatibility-lib" "string-constants-lib")) (description . "implementation (no documentation) part of typed-racket") (implies . ()) (last-checked . 1632904754) (last-edit . 1417659583) (last-updated . 1631039975) (modules . ((lib "typed-racket/base-env/base-contracted.rkt") (lib "typed-racket/types/substitute.rkt") (lib "typed-racket/base-env/for-clauses.rkt") (lib "typed-racket/utils/utils.rkt") (lib "typed-racket/typecheck/check-subforms-unit.rkt") (lib "typed-racket/optimizer/unboxed-tables.rkt") (lib "typed-racket/language-info.rkt") (lib "typed-racket/infer/signatures.rkt") (lib "typed-racket/utils/require-contract.rkt") (lib "typed-racket/logic/proves.rkt") (lib "typed-racket/typed-reader.rkt") (lib "typed/untyped-utils.rkt") (lib "typed-racket/types/overlap.rkt") (lib "typed-racket/env/signature-helper.rkt") (lib "typed-racket/rep/fme-utils.rkt") (lib "typed-racket/typecheck/toplevel-trampoline.rkt") (lib "typed-racket/static-contracts/combinators/unit.rkt") (lib "typed-racket/static-contracts/combinators.rkt") (lib "typed-racket/env/mvar-env.rkt") (lib "typed-racket/utils/struct-info.rkt") (lib "typed-racket/static-contracts/combinators/object.rkt") (lib "typed-racket/base-env/case-lambda.rkt") (lib "typed-racket/env/type-alias-env.rkt") (lib "typed/racket/base/lang/reader.rkt") (lib "typed-racket/base-env/base-structs.rkt") (lib "typed-racket/typecheck/tc-app/tc-app-keywords.rkt") (lib "typed-racket/static-contracts/combinators/function.rkt") (lib "typed-racket/typecheck/signatures.rkt") (lib "typed-racket/utils/early-return.rkt") (lib "typed-racket/private/type-annotation.rkt") (lib "typed-racket/typecheck/tc-app/tc-app-lambda.rkt") (lib "typed-racket/types/generalize.rkt") (lib "typed-racket/types/kw-types.rkt") (lib "typed-racket/optimizer/box.rkt") (lib "typed/file/tar.rkt") (lib "typed-racket/optimizer/extflonum.rkt") (lib "typed-racket/static-contracts/combinators/structural.rkt") (lib "typed-racket/infer/dmap.rkt") (lib "typed/racket/unit.rkt") (lib "typed-racket/static-contracts/combinators/struct.rkt") (lib "typed/file/sha1.rkt") (lib "typed-racket/typecheck/tc-let-unit.rkt") (lib "typed-racket/utils/inspector.rkt") (lib "typed-racket/env/global-env.rkt") (lib "typed-racket/base-env/base-env-indexing-abs.rkt") (lib "typed-racket/optimizer/float.rkt") (lib "typed-racket/rep/free-variance.rkt") (lib "typed-racket/types/base-abbrev.rkt") (lib "typed-racket/typecheck/tc-app/tc-app-list.rkt") (lib "typed-racket/utils/timing.rkt") (lib "typed-racket/utils/lift.rkt") (lib "typed/racket/system.rkt") (lib "typed-racket/static-contracts/structures.rkt") (lib "typed-racket/minimal/lang/reader.rkt") (lib "typed-racket/rep/base-type-rep.rkt") (lib "typed-racket/utils/promise-not-name-contract.rkt") (lib "typed-racket/typecheck/tc-envops.rkt") (lib "typed-racket/types/match-expanders.rkt") (lib "typed-racket/base-env/ann-inst.rkt") (lib "typed-racket/utils/mutated-vars.rkt") (lib "typed-racket/utils/tarjan.rkt") (lib "typed-racket/env/struct-name-env.rkt") (lib "typed-racket/standard-inits.rkt") (lib "typed-racket/typecheck/error-message.rkt") (lib "typed-racket/static-contracts/combinators/symbolic-object.rkt") (lib "typed-racket/utils/print-struct.rkt") (lib "typed-racket/infer/constraints.rkt") (lib "typed-racket/env/scoped-tvar-env.rkt") (lib "typed/racket/date.rkt") (lib "typed-racket/base-env/signature-prims.rkt") (lib "typed-racket/optimizer/numeric-utils.rkt") (lib "typed-racket/private/with-types.rkt") (lib "typed-racket/types/struct-table.rkt") (lib "typed-racket/utils/vector-contract.rkt") (lib "typed-racket/rep/base-types.rkt") (lib "typed-racket/optimizer/list.rkt") (lib "typed-racket/utils/literal-syntax-class.rkt") (lib "typed-racket/utils/stxclass-util.rkt") (lib "typed-racket/types/current-seen.rkt") (lib "typed-racket/static-contracts/combinators/simple.rkt") (lib "typed-racket/optimizer/apply.rkt") (lib "typed-racket/env/index-env.rkt") (lib "typed-racket/typecheck/tc-expr-unit.rkt") (lib "typed-racket/core.rkt") (lib "typed-racket/typecheck/tc-app/tc-app-contracts.rkt") (lib "typed-racket/base-env/prims-contract.rkt") (lib "typed-racket/typecheck/find-annotation.rkt") (lib "typed-racket/typecheck/typechecker.rkt") (lib "typed-racket/rep/rep-utils.rkt") (lib "typed-racket/infer/promote-demote.rkt") (lib "typed-racket/utils/redirect-contract.rkt") (lib "typed-racket/base-env/base-env-numeric.rkt") (lib "typed-racket/utils/arm.rkt") (lib "typed-racket/infer/fail.rkt") (lib "typed-racket/optimizer/float-complex.rkt") (lib "typed-racket/typecheck/tc-toplevel.rkt") (lib "typed-racket/infer/infer-unit.rkt") (lib "typed-racket/rep/rep-switch.rkt") (lib "typed-racket/env/row-constraint-env.rkt") (lib "typed-racket/typecheck/check-class-unit.rkt") (lib "typed-racket/typecheck/def-binding.rkt") (lib "typed-racket/optimizer/dead-code.rkt") (lib "typed-racket/typecheck/integer-refinements.rkt") (lib "typed-racket/typecheck/renamer.rkt") (lib "typed-racket/optimizer/sequence.rkt") (lib "typed-racket/static-contracts/combinators/exist.rkt") (lib "typed-racket/utils/sealing-contract.rkt") (lib "typed-racket/typecheck/tc-app/tc-app-apply.rkt") (lib "typed-racket/typecheck/tc-lambda-unit.rkt") (lib "typed-racket/private/syntax-properties.rkt") (lib "typed-racket/typecheck/tc-subst.rkt") (lib "typed-racket/types/path-type.rkt") (lib "typed-racket/static-contracts/combinators/proposition.rkt") (lib "typed-racket/static-contracts/instantiate.rkt") (lib "typed-racket/env/type-env-structs.rkt") (lib "typed-racket/typecheck/tc-structs.rkt") (lib "typed-racket/optimizer/logging.rkt") (lib "typed-racket/utils/unit-utils.rkt") (lib "typed-racket/rep/type-rep.rkt") (lib "typed-racket/base-env/base-types.rkt") (lib "typed-racket/typecheck/tc-app/signatures.rkt") (lib "typed-racket/types/union.rkt") (lib "typed-racket/typecheck/tc-app/tc-app-special.rkt") (lib "typed-racket/rep/free-ids.rkt") (lib "typed-racket/utils/struct-type-c.rkt") (lib "typed/racket/base/no-check.rkt") (lib "typed-racket/env/type-alias-helper.rkt") (lib "typed/private/wrap.rkt") (lib "typed-racket/typecheck/tc-metafunctions.rkt") (lib "typed-racket/typecheck/tc-app/tc-app-values.rkt") (lib "typed-racket/private/class-literals.rkt") (lib "typed/private/utils.rkt") (lib "typed-racket/static-contracts/kinds.rkt") (lib "typed-racket/types/abbrev.rkt") (lib "typed-racket/base-env/prims.rkt") (lib "typed-racket/private/cast-table.rkt") (lib "typed/racket/unsafe.rkt") (lib "typed-racket/typecheck/tc-send.rkt") (lib "typed-racket/base-env/base-types-extra.rkt") (lib "typed-racket/utils/eq-contract.rkt") (lib "typed-racket/rep/type-mask.rkt") (lib "typed-racket/types/update.rkt") (lib "typed-racket/rep/filter-rep.rkt") (lib "typed-racket/minimal.rkt") (lib "typed-racket/static-contracts/combinators/case-lambda.rkt") (lib "typed-racket/rep/base-union.rkt") (lib "typed-racket/types/tc-result.rkt") (lib "typed-racket/base-env/type-env-lang.rkt") (lib "typed-racket/base-env/colon.rkt") (lib "typed-racket/types/signatures.rkt") (lib "typed-racket/utils/disappeared-use.rkt") (lib "typed-racket/static-contracts/combinators/name.rkt") (lib "typed-racket/static-contracts/combinators/none.rkt") (lib "typed-racket/static-contracts/combinators/prefab.rkt") (lib "typed-racket/typecheck/tc-if.rkt") (lib "typed/racket/class.rkt") (lib "typed-racket/utils/any-wrap.rkt") (lib "typed-racket/tc-setup.rkt") (lib "typed-racket/utils/disarm.rkt") (lib "typed-racket/static-contracts/combinators/parametric.rkt") (lib "typed/racket.rkt") (lib "typed-racket/base-env/class-clauses.rkt") (lib "typed-racket/utils/hash-contract.rkt") (lib "typed-racket/static-contracts/terminal.rkt") (lib "typed-racket/utils/opaque-object.rkt") (lib "typed-racket/types/resolve.rkt") (lib "typed-racket/static-contracts/combinators/control.rkt") (lib "typed-racket/base-env/base-special-env.rkt") (lib "typed-racket/private/type-contract.rkt") (lib "typed-racket/typecheck/check-below.rkt") (lib "typed-racket/utils/prefab.rkt") (lib "typed/racket/no-check.rkt") (lib "typed-racket/optimizer/pair.rkt") (lib "typed-racket/typecheck/tc-app-helper.rkt") (lib "typed-racket/types/type-table.rkt") (lib "typed-racket/env/env-req.rkt") (lib "typed-racket/infer/constraint-structs.rkt") (lib "typed-racket/typecheck/provide-handling.rkt") (lib "typed-racket/infer/intersect.rkt") (lib "typed-racket/base-env/top-interaction.rkt") (lib "typed-racket/base-env/extra-env-lang.rkt") (lib "typed-racket/typecheck/internal-forms.rkt") (lib "typed-racket/typecheck/tc-app-combined.rkt") (lib "typed/file/md5.rkt") (lib "typed-racket/env/init-envs.rkt") (lib "typed-racket/base-env/annotate-classes.rkt") (lib "typed-racket/static-contracts/combinators/lengths.rkt") (lib "typed-racket/static-contracts/combinators/derived.rkt") (lib "typed-racket/types/prop-ops.rkt") (lib "typed-racket/base-env/extra-procs.rkt") (lib "typed-racket/infer/infer.rkt") (lib "typed-racket/types/utils.rkt") (lib "typed-racket/utils/tc-utils.rkt") (lib "typed-racket/rep/core-rep.rkt") (lib "typed-racket/typecheck/tc-app/tc-app-hetero.rkt") (lib "typed-racket/typecheck/tc-app/tc-app-eq.rkt") (lib "typed-racket/utils/prefab-c.rkt") (lib "typed-racket/env/tvar-env.rkt") (lib "typed-racket/env/env-utils.rkt") (lib "typed-racket/typecheck/tc-literal.rkt") (lib "typed-racket/typecheck/tc-app/tc-app-main.rkt") (lib "typed/private/no-check-helper.rkt") (lib "typed-racket/types/subtype.rkt") (lib "typed-racket/typecheck/tc-app/utils.rkt") (lib "typed-racket/types/numeric-tower.rkt") (lib "typed-racket/utils/typed-method-property.rkt") (lib "typed/racket/base/no-check/lang/reader.rkt") (lib "typed-racket/utils/evt-contract.rkt") (lib "typed-racket/optimizer/optimizer.rkt") (lib "typed-racket/optimizer/vector.rkt") (lib "typed-racket/base-env/unit-prims.rkt") (lib "typed-racket/base-env/type-name-error.rkt") (lib "typed-racket/env/type-name-env.rkt") (lib "typed-racket/base-env/base-env.rkt") (lib "typed-racket/static-contracts/parametric-check.rkt") (lib "typed-racket/types/subtract.rkt") (lib "typed-racket/static-contracts/combinators/dep-function.rkt") (lib "typed-racket/base-env/env-lang.rkt") (lib "typed-racket/types/tc-error.rkt") (lib "typed-racket/base-env/base-env-indexing.rkt") (lib "typed-racket/utils/identifier.rkt") (lib "typed-racket/typecheck/tc-funapp.rkt") (lib "typed/private/rewriter.rkt") (lib "typed/racket/no-check/lang/reader.rkt") (lib "typed-racket/env/lexical-env.rkt") (lib "typed-racket/rep/values-rep.rkt") (lib "typed-racket/env/signature-env.rkt") (lib "typed/racket/base.rkt") (lib "typed-racket/optimizer/hidden-costs.rkt") (lib "typed-racket/rep/object-rep.rkt") (lib "typed-racket/types/classes.rkt") (lib "typed-racket/rep/prop-rep.rkt") (lib "typed-racket/logic/ineq.rkt") (lib "typed-racket/optimizer/struct.rkt") (lib "typed-racket/base-env/class-prims.rkt") (lib "typed-racket/optimizer/utils.rkt") (lib "typed-racket/optimizer/string.rkt") (lib "typed-racket/optimizer/number.rkt") (lib "typed-racket/typed-racket.rkt") (lib "typed-racket/types/numeric-predicates.rkt") (lib "typed-racket/typecheck/check-unit-unit.rkt") (lib "typed-racket/private/parse-classes.rkt") (lib "typed-racket/utils/simple-result-arrow.rkt") (lib "typed-racket/types/printer.rkt") (lib "typed-racket/static-contracts/constraints.rkt") (lib "typed-racket/typecheck/tc-app/tc-app-objects.rkt") (lib "typed-racket/static-contracts/equations.rkt") (lib "typed-racket/typecheck/tc-apply.rkt") (lib "typed-racket/base-env/prims-struct.rkt") (lib "typed-racket/private/parse-type.rkt") (lib "typed/racket/lang/reader.rkt") (lib "typed-racket/static-contracts/combinators/any.rkt") (lib "typed-racket/typecheck/tc-expression.rkt") (lib "typed-racket/optimizer/fixnum.rkt") (lib "typed-racket/static-contracts/optimize.rkt") (lib "typed-racket/typecheck/possible-domains.rkt") (lib "typed-racket/optimizer/unboxed-let.rkt") (lib "typed-racket/rep/numeric-base-types.rkt"))) (name . "typed-racket-lib") (ring . 0) (search-terms . #hasheq((author:samth@racket-lang.org . #t) (author:stamourv@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "fec1bd3cabf5dc5a759b10e8b0916e073f605ec2") (source . "git://github.com/racket/typed-racket/?path=typed-racket-lib") (source_url . "git://github.com/racket/typed-racket/?path=typed-racket-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("typed-racket-more" . #hash((author . "samth@racket-lang.org stamourv@racket-lang.org") (authors . ("samth@racket-lang.org" "stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("srfi-lite-lib" "base" "net-lib" "net-cookies-lib" ("web-server-lib" #:version "1.6") ("db-lib" #:version "1.5") "draw-lib" "rackunit-lib" "rackunit-gui" "rackunit-typed" "snip-lib" ("typed-racket-lib" #:version "1.14") ("gui-lib" #:version "1.49") "pict-lib" "images-lib" "racket-index" "sandbox-lib" "pconvert-lib")) (description . "Types for various libraries") (implies . ("rackunit-typed")) (last-checked . 1632904754) (last-edit . 1417659583) (last-updated . 1631039977) (modules . ((lib "typed/file/gif.rkt") (lib "typed/srfi/14.rkt") (lib "typed/syntax/stx.rkt") (lib "typed/json.rkt") (lib "typed/file/glob.rkt") (lib "typed/mrlib/panel-wob.rkt") (lib "typed/web-server/configuration/responders.rkt") (lib "typed/net/uri-codec.rkt") (lib "typed/mred/mred.rkt") (lib "typed/net/ftp.rkt") (lib "typed/web-server/http.rkt") (lib "typed/net/url-connect.rkt") (lib "typed/framework/prefs-contract.rkt") (lib "typed/racket/extflonum.rkt") (lib "typed/net/cookies/server.rkt") (lib "typed/mzlib/pconvert-prop.rkt") (lib "typed/net/nntp.rkt") (lib "typed/racket/os.rkt") (lib "typed/openssl/md5.rkt") (lib "typed/racket/gui.rkt") (lib "typed/file/convertible.rkt") (lib "typed/net/cookie.rkt") (lib "typed/private/framework-types.rkt") (lib "typed/framework.rkt") (lib "typed/mrlib/gif.rkt") (lib "typed/setup/getinfo.rkt") (lib "typed/net/head.rkt") (lib "typed/racket/sandbox.rkt") (lib "typed/openssl/sha1.rkt") (lib "typed/net/gifwrite.rkt") (lib "typed/net/http-client.rkt") (lib "typed/net/url.rkt") (lib "typed/srfi/19.rkt") (lib "typed/racket/flonum.rkt") (lib "typed/net/cgi.rkt") (lib "typed/racket/async-channel.rkt") (lib "typed/images/compile-time.rkt") (lib "typed/syntax/readerr.rkt") (lib "typed/racket/snip.rkt") (lib "typed/racket/random.rkt") (lib "typed/net/git-checkout.rkt") (lib "typed/mrlib/bitmap-label.rkt") (lib "typed/images/icons.rkt") (lib "typed/net/cookies/common.rkt") (lib "typed/syntax/modread.rkt") (lib "typed/racket/gui/no-check/lang/reader.rkt") (lib "typed/private/require-batch.rkt") (lib "typed/syntax/srcloc.rkt") (lib "typed/framework/framework.rkt") (lib "typed/net/mime.rkt") (lib "typed/racket/draw.rkt") (lib "typed/racket/fasl.rkt") (lib "typed/images/logos.rkt") (lib "typed/net/cookies.rkt") (lib "typed/db/sqlite3.rkt") (lib "typed/racket/gui/no-check.rkt") (lib "typed/net/url-structs.rkt") (lib "typed/pict.rkt") (lib "typed/net/sendmail.rkt") (lib "typed/db.rkt") (lib "typed/net/base64.rkt") (lib "typed/net/imap.rkt") (lib "typed/net/qp.rkt") (lib "typed/openssl/types.rkt") (lib "typed/openssl.rkt") (lib "typed/racket/gui/base.rkt") (lib "typed/net/pop3.rkt") (lib "typed/racket/private/gui-types.rkt") (lib "typed/net/sendurl.rkt") (lib "typed/db/base.rkt") (lib "typed/net/smtp.rkt") (lib "typed/net/dns.rkt"))) (name . "typed-racket-more") (ring . 0) (search-terms . #hasheq((author:samth@racket-lang.org . #t) (author:stamourv@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "fec1bd3cabf5dc5a759b10e8b0916e073f605ec2") (source . "git://github.com/racket/typed-racket/?path=typed-racket-more") (source_url . "git://github.com/racket/typed-racket/?path=typed-racket-more"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("typed-racket-stream" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-racket-stream.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-racket-stream.txt"))) (checksum . "45fe2ae51511cf10caf6fcc6383cce5474e05122") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "typed-racket-more")) (description . "Streams for typed racket") (implies . ()) (last-checked . 1632904754) (last-edit . 1451845688) (last-updated . 1626284345) (modules . ((lib "typed/racket/stream/tests/test-stream.rkt") (lib "typed/racket/stream/stream-pred.rkt") (lib "typed/racket/stream/stream-cons-thunk.rkt") (lib "typed/racket/stream/stream-cons.rkt") (lib "typed/racket/stream/stream-cons-thunk-untyped.rkt") (lib "typed/racket/stream.rkt"))) (name . "typed-racket-stream") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:alexander@knauth.org . #t) (ring:1 . #t) (typed-racket . #t))) (source . "git://github.com/AlexKnauth/typed-racket-stream") (tags . ("typed-racket")) (versions . #hash((default . #hasheq((checksum . "45fe2ae51511cf10caf6fcc6383cce5474e05122") (source . "git://github.com/AlexKnauth/typed-racket-stream") (source_url . "http://github.com/AlexKnauth/typed-racket-stream/tree/master"))) ("6.2" . #hasheq((checksum . "72ba65f2202ff1de973f7aa385f2112074b6387b") (source . "git://github.com/AlexKnauth/typed-racket-stream#for-v-up-to-6.2.1") (source_url . "http://github.com/AlexKnauth/typed-racket-stream/tree/master#for-v-up-to-6.2.1"))) ("6.2.1" . #hasheq((checksum . "72ba65f2202ff1de973f7aa385f2112074b6387b") (source . "git://github.com/AlexKnauth/typed-racket-stream#for-v-up-to-6.2.1") (source_url . "http://github.com/AlexKnauth/typed-racket-stream/tree/master#for-v-up-to-6.2.1"))))))) ("typed-racket-test" . #hash((author . "samth@racket-lang.org stamourv@racket-lang.org") (authors . ("samth@racket-lang.org" "stamourv@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (dependencies . ("redex-lib" "sandbox-lib" ("base" #:version "6.2.900.16") ("typed-racket-lib" #:version "1.10") "typed-racket-more" "typed-racket-compatibility" "2d" "rackunit-lib" "racket-index" "compatibility-lib" "math-lib" "racket-test-core" "scheme-lib" "base" "racket-benchmarks" "rackunit-lib" "compiler-lib" "redex-lib" "htdp-lib" "sandbox-lib")) (description . "tests for typed-racket") (implies . ()) (last-checked . 1632904755) (last-edit . 1417659583) (last-updated . 1631039980) (modules . ((lib "typed-racket-test/xfail/typed-language-require.rkt") (lib "typed-racket-test/fail/spt-untyped-typed-contract.rkt") (lib "typed-racket-test/succeed/if-splitting-test.rkt") (lib "typed-racket-test/fail/unsafe-struct-parent.rkt") (lib "typed-racket-test/succeed/internal-contract-check2.rkt") (lib "typed-racket-test/succeed/pr11887.rkt") (lib "typed-racket-test/fail/all-bad-syntax.rkt") (lib "typed-racket-test/fail/require-typed-wrong.rkt") (lib "typed-racket-test/optimizer/tests/known-vector-length.rkt") (lib "typed-racket-test/fail/bind-anyvalues.rkt") (lib "typed-racket-test/succeed/match-tests.rkt") (lib "typed-racket-test/fail/dviu-infer-deps-bad.rkt") (lib "typed-racket-test/succeed/pr10470.rkt") (lib "typed-racket-test/succeed/little-schemer.rkt") (lib "typed-racket-test/succeed/dviu-unit-from-context.rkt") (lib "typed-racket-test/succeed/flonum.rkt") (lib "typed-racket-test/succeed/ports.rkt") (lib "typed-racket-test/optimizer/tests/invalid-derived-pair.rkt") (lib "typed-racket-test/fail/require-typed-struct-missing-field-0.rkt") (lib "typed-racket-test/succeed/case-arrow-cast-contract.rkt") (lib "typed-racket-test/fail/pr13526.rkt") (lib "typed-racket-test/succeed/test2.rkt") (lib "typed-racket-test/fail/opaque-object-contract-2.rkt") (lib "typed-racket-test/gui/succeed/pr15003.rkt") (lib "typed-racket-test/succeed/apply-dots.rkt") (lib "typed-racket-test/succeed/provide-sexp.rkt") (lib "typed-racket-test/succeed/make-predicate-mod.rkt") (lib "typed-racket-test/succeed/issue-598.rkt") (lib "typed-racket-test/fail/issue-215.rkt") (lib "typed-racket-test/fail/let-internal-nameleak.rkt") (lib "typed-racket-test/succeed/prompt-tag.rkt") (lib "typed-racket-test/fail/async-channel-contract.rkt") (lib "typed-racket-test/fail/user-filter-with-bad-index-object.rkt") (lib "typed-racket-test/succeed/runtime-path.rkt") (lib "typed-racket-test/fail/bad-first.rkt") (lib "typed-racket-test/succeed/non-recursive-and-recursive-type-aliases.rkt") (lib "typed-racket-test/optimizer/tests/invalid-binary-nonzero-fixnum.rkt") (lib "typed-racket-test/succeed/even-odd.rkt") (lib "typed-racket-test/optimizer/tests/cross-module-struct2.rkt") (lib "typed-racket-test/succeed/pr12678.rkt") (lib "typed-racket-test/fail/require-untyped-signature.rkt") (lib "typed-racket-test/optimizer/tests/invalid-sqrt.rkt") (lib "typed-racket-test/fail/contract-conversion-error.rkt") (lib "typed-racket-test/succeed/area.rkt") (lib "typed-racket-test/succeed/pr14217.rkt") (lib "typed-racket-test/succeed/define-poly-value.rkt") (lib "typed-racket-test/optimizer/tests/float-complex-parts3.rkt") (lib "typed-racket-test/succeed/pr14374.rkt") (lib "typed-racket-test/succeed/linear-integer-simple.rkt") (lib "typed-racket-test/succeed/force-delay.rkt") (lib "typed-racket-test/optimizer/tests/float-complex-conjugate.rkt") (lib "typed-racket-test/succeed/struct-mutable.rkt") (lib "typed-racket-test/succeed/check-within.rkt") (lib "typed-racket-test/fail/infer-dots.rkt") (lib "typed-racket-test/succeed/gh-issue-987.rkt") (lib "typed-racket-test/succeed/gh-issue-957.rkt") (lib "typed-racket-test/succeed/sealing-contract-1.rkt") (lib "typed-racket-test/fail/non-productive-rec.rkt") (lib "typed-racket-test/succeed/pr11971.rkt") (lib "typed-racket-test/succeed/pr11171.rkt") (lib "typed-racket-test/fail/nonnegative-float.rkt") (lib "typed-racket-test/optimizer/tests/unboxed-let-functions8.rkt") (lib "typed-racket-test/unit-tests/inequalities.rkt") (lib "typed-racket-test/optimizer/missed-optimizations/real-in-float-expr.rkt") (lib "typed-racket-test/fail/ann-map-funcs.rkt") (lib "typed-racket-test/optimizer/tests/float-complex-float-small.rkt") (lib "typed-racket-test/fail/type-variable-scope-3.rkt") (lib "typed-racket-test/fail/pr13365-variation-1.rkt") (lib "typed-racket-test/succeed/gh-issue-940.rkt") (lib "typed-racket-test/succeed/gh-issue-930.rkt") (lib "typed-racket-test/succeed/require-typed-parse.rkt") (lib "typed-racket-test/optimizer/tests/invalid-exact-inexact.rkt") (lib "typed-racket-test/xfail/rec-contract.rkt") (lib "typed-racket-test/optimizer/tests/vector-ref-set-ref.rkt") (lib "typed-racket-test/succeed/unsafe-struct.rkt") (lib "typed-racket-test/succeed/test-spt-typed-untyped.rkt") (lib "typed-racket-test/succeed/units-no-sigs.rkt") (lib "typed-racket-test/succeed/pr11560.rkt") (lib "typed-racket-test/optimizer/tests/float-promotion.rkt") (lib "typed-racket-test/succeed/pr12644.rkt") (lib "typed-racket-test/fail/bad-struct-prop5.rkt") (lib "typed-racket-test/succeed/hash-contract.rkt") (lib "typed-racket-test/unit-tests/static-contract-conversion-tests.rkt") (lib "typed-racket-test/succeed/pr13503.rkt") (lib "typed-racket-test/succeed/mandelbrot.rkt") (lib "typed-racket-test/fail/pr11772.rkt") (lib "typed-racket-test/fail/same-name-struct-type.rkt") (lib "typed-racket-test/fail/untyped-srfi1.rkt") (lib "typed-racket-test/succeed/struct-type-contract.rkt") (lib "typed-racket-test/succeed/top-level-begin-for-syntax.rkt") (lib "typed-racket-test/succeed/issue-625.rkt") (lib "typed-racket-test/succeed/structs-has-subtype.rkt") (lib "typed-racket-test/succeed/let-no-anns.rkt") (lib "typed-racket-test/succeed/mutable-struct-pred.rkt") (lib "typed-racket-test/fail/bad-prop-procedure1.rkt") (lib "typed-racket-test/fail/promise-any.rkt") (lib "typed-racket-test/succeed/with-syntax.rkt") (lib "typed-racket-test/succeed/with-handlers.rkt") (lib "typed-racket-test/succeed/define-values-invoke-unit-subtyping.rkt") (lib "typed-racket-test/succeed/issue-807.rkt") (lib "typed-racket-test/succeed/require-typed-contravariant-filter.rkt") (lib "typed-racket-test/succeed/pr13124.rkt") (lib "typed-racket-test/succeed/scratch.rkt") (lib "typed-racket-test/succeed/poly-subtype.rkt") (lib "typed-racket-test/succeed/pr11194.rkt") (lib "typed-racket-test/fail/extend-untyped-signature.rkt") (lib "typed-racket-test/fail/require-typed-missing.rkt") (lib "typed-racket-test/unit-tests/static-contract-instantiate-tests.rkt") (lib "typed-racket-test/succeed/pr390-variation-1.rkt") (lib "typed-racket-test/succeed/pr226-variation-1.rkt") (lib "typed-racket-test/fail/struct-id-not-type.rkt") (lib "typed-racket-test/succeed/struct-constructors.rkt") (lib "typed-racket-test/fail/assoc-with-is-equal-argument.rkt") (lib "typed-racket-test/fail/channel-contract.rkt") (lib "typed-racket-test/succeed/for-lists.rkt") (lib "typed-racket-test/succeed/require-poly.rkt") (lib "typed-racket-test/succeed/in-hash-in-vector-subtype.rkt") (lib "typed-racket-test/fail/with-asserts.rkt") (lib "typed-racket-test/unit-tests/prefab-tests.rkt") (lib "typed-racket-test/optimizer/tests/real-part-loop.rkt") (lib "typed-racket-test/succeed/pr14138.rkt") (lib "typed-racket-test/succeed/pr15026-b.rkt") (lib "typed-racket-test/fail/pr13233-2.rkt") (lib "typed-racket-test/fail/div-0-complex2.rkt") (lib "typed-racket-test/succeed/values-dots.rkt") (lib "typed-racket-test/succeed/gh-issue-163-2.rkt") (lib "typed-racket-test/fail/pr14246-2.rkt") (lib "typed-racket-test/fail/case-union-subtype.rkt") (lib "typed-racket-test/fail/issue-169-2.rkt") (lib "typed-racket-test/optimizer/tests/unboxed-for.rkt") (lib "typed-racket-test/optimizer/tests/simple-float.rkt") (lib "typed-racket-test/succeed/member-with-is-equal-argument.rkt") (lib "typed-racket-test/succeed/gh-issue-1079.rkt") (lib "typed-racket-test/optimizer/tests/nested-pair1.rkt") (lib "typed-racket-test/gui/succeed/test-tab-augments.rkt") (lib "typed-racket-test/optimizer/missed-optimizations/mandelbrot.rkt") (lib "typed-racket-test/succeed/fixnum.rkt") (lib "typed-racket-test/fail/define-zero-values.rkt") (lib "typed-racket-test/optimizer/tests/vector-length.rkt") (lib "typed-racket-test/succeed/safe-letrec.rkt") (lib "typed-racket-test/succeed/for-in-range.rkt") (lib "typed-racket-test/unit-tests/metafunction-tests.rkt") (lib "typed-racket-test/optimizer/tests/unboxed-let-functions6.rkt") (lib "typed-racket-test/unit-tests/parse-type-tests.rkt") (lib "typed-racket-test/optimizer/tests/unboxed-letrec.rkt") (lib "typed-racket-test/fail/gh56.rkt") (lib "typed-racket-test/succeed/provide-struct.rkt") (lib "typed-racket-test/fail/control-test-4.rkt") (lib "typed-racket-test/fail/top-level-srcloc.rkt") (lib "typed-racket-test/optimizer/tests/double-float.rkt") (lib "typed-racket-test/fail/pr13562.rkt") (lib "typed-racket-test/succeed/pr14997.rkt") (lib "typed-racket-test/succeed/vector-sort.rkt") (lib "typed-racket-test/fail/pr13662.rkt") (lib "typed-racket-test/fail/pr13962.rkt") (lib "typed-racket-test/fail/bad-prop-procedure4.rkt") (lib "typed-racket-test/performance/function-contract.rkt") (lib "typed-racket-test/optimizer/tests/unboxed-exp.rkt") (lib "typed-racket-test/succeed/pair-test2.rkt") (lib "typed-racket-test/fail/cast-tyvar.rkt") (lib "typed-racket-test/fail/wrong-arity2.rkt") (lib "typed-racket-test/succeed/structs-variance.rkt") (lib "typed-racket-test/optimizer/tests/bounds-check.rkt") (lib "typed-racket-test/succeed/poly-struct-parent.rkt") (lib "typed-racket-test/succeed/gh-issue-164.rkt") (lib "typed-racket-test/succeed/gh-issue-144.rkt") (lib "typed-racket-test/succeed/unsafe-require-poly-struct.rkt") (lib "typed-racket-test/succeed/values-object.rkt") (lib "typed-racket-test/succeed/events.rkt") (lib "typed-racket-test/succeed/rec-het-vec-infer.rkt") (lib "typed-racket-test/test-docs-complete.rkt") (lib "typed-racket-test/xfail/internal-typed-submod.rkt") (lib "typed-racket-test/succeed/module-plus.rkt") (lib "typed-racket-test/fail/cast-mod1.rkt") (lib "typed-racket-test/succeed/issue-447.rkt") (lib "typed-racket-test/optimizer/tests/nested-float.rkt") (lib "typed-racket-test/optimizer/tests/invalid-make-polar.rkt") (lib "typed-racket-test/optimizer/tests/define-begin-float.rkt") (lib "typed-racket-test/succeed/recursive-type-alias-terminates.rkt") (lib "typed-racket-test/succeed/inst-expected.rkt") (lib "typed-racket-test/optimizer/missed-optimizations/pair.rkt") (lib "typed-racket-test/optimizer/tests/binary-fixnum.rkt") (lib "typed-racket-test/succeed/gh-issue-1039.rkt") (lib "typed-racket-test/succeed/mpair.rkt") (lib "typed-racket-test/optimizer/tests/fx2fl.rkt") (lib "typed-racket-test/optimizer/tests/fx-fl.rkt") (lib "typed-racket-test/succeed/poly-struct-union.rkt") (lib "typed-racket-test/optimizer/tests/unboxed-let-constants-fail1.rkt") (lib "typed-racket-test/fail/union-or-exclusive.rkt") (lib "typed-racket-test/fail/heterogeneous-mutable-vector-bad-ann.rkt") (lib "typed-racket-test/fail/internal-vector-error.rkt") (lib "typed-racket-test/succeed/procedure-top.rkt") (lib "typed-racket-test/succeed/pr12807.rkt") (lib "typed-racket-test/fail/pr11560.rkt") (lib "typed-racket-test/succeed/pr907.rkt") (lib "typed-racket-test/succeed/require-substruct.rkt") (lib "typed-racket-test/succeed/time.rkt") (lib "typed-racket-test/succeed/match-expander-problem.rkt") (lib "typed-racket-test/fail/spt-untyped-typed-wrong-predicate.rkt") (lib "typed-racket-test/succeed/pr11669.rkt") (lib "typed-racket-test/optimizer/tests/ternary-equality.rkt") (lib "typed-racket-test/optimizer/tests/unary-fixnum.rkt") (lib "typed-racket-test/fail/bad-struct-prop1.rkt") (lib "typed-racket-test/optimizer/missed-optimizations/fixnum.rkt") (lib "typed-racket-test/optimizer/tests/extflonums-cs-skip-all.rkt") (lib "typed-racket-test/succeed/overloading.rkt") (lib "typed-racket-test/succeed/list-struct-sum.rkt") (lib "typed-racket-test/succeed/het-vec2.rkt") (lib "typed-racket-test/fail/for-result-bad-ann-4.rkt") (lib "typed-racket-test/optimizer/tests/invalid-inexact-complex-parts.rkt") (lib "typed-racket-test/fail/make-predicate-top-level1.rkt") (lib "typed-racket-test/unit-tests/test-utils.rkt") (lib "typed-racket-test/succeed/module-repl.rkt") (lib "typed-racket-test/optimizer/tests/flrandom.rkt") (lib "typed-racket-test/succeed/box-num.rkt") (lib "typed-racket-test/succeed/vec-len-in-struct-fld.rkt") (lib "typed-racket-test/succeed/typed-list.rkt") (lib "typed-racket-test/succeed/untyped-submod.rkt") (lib "typed-racket-test/succeed/poly-struct.rkt") (lib "typed-racket-test/succeed/parametric-require-tr-base.rkt") (lib "typed-racket-test/fail/explicit-fail.rkt") (lib "typed-racket-test/succeed/places-helper.rkt") (lib "typed-racket-test/fail/no-setters-for-built-in-structs.rkt") (lib "typed-racket-test/succeed/for-ann.rkt") (lib "typed-racket-test/succeed/pr267-variation-0.rkt") (lib "typed-racket-test/fail/struct-provide.rkt") (lib "typed-racket-test/optimizer/tests/n-ary-float-complex.rkt") (lib "typed-racket-test/optimizer/tests/float-comp.rkt") (lib "typed-racket-test/succeed/varargs-tests.rkt") (lib "typed-racket-test/fail/require-typed-struct-missing-field-1.rkt") (lib "typed-racket-test/succeed/test-child-field.rkt") (lib "typed-racket-test/optimizer/tests/derived-pair2.rkt") (lib "typed-racket-test/optimizer/tests/module-path.rkt") (lib "typed-racket-test/succeed/unsafe-require.rkt") (lib "typed-racket-test/succeed/pr13185.rkt") (lib "typed-racket-test/fail/type-environment-missing-field.rkt") (lib "typed-racket-test/fail/dviu-has-imports.rkt") (lib "typed-racket-test/succeed/submodules.rkt") (lib "typed-racket-test/succeed/pr11686.rkt") (lib "typed-racket-test/succeed/poly-dots.rkt") (lib "typed-racket-test/succeed/dviu-infer-fact.rkt") (lib "typed-racket-test/succeed/cyclic-list.rkt") (lib "typed-racket-test/succeed/pr13747.rkt") (lib "typed-racket-test/fail/bad-map-poly.rkt") (lib "typed-racket-test/succeed/gh-issue-157.rkt") (lib "typed-racket-test/unit-tests/class-tests.rkt") (lib "typed-racket-test/succeed/somesystempath.rkt") (lib "typed-racket-test/fail/dead-substruct.rkt") (lib "typed-racket-test/succeed/standard-features-no-check.rkt") (lib "typed-racket-test/unit-tests/evaluator.rkt") (lib "typed-racket-test/gui/succeed/gui-lang.rkt") (lib "typed-racket-test/succeed/pr12806.rkt") (lib "typed-racket-test/succeed/seasoned-schemer.rkt") (lib "typed-racket-test/succeed/sequence-cnt.rkt") (lib "typed-racket-test/succeed/ho-box.rkt") (lib "typed-racket-test/succeed/simple-fake-or.rkt") (lib "typed-racket-test/succeed/pr390-variation-3.rkt") (lib "typed-racket-test/fail/polymorphic-recursion-3.rkt") (lib "typed-racket-test/fail/port-to-list.rkt") (lib "typed-racket-test/succeed/pr11747.rkt") (lib "typed-racket-test/fail/submod-req-cnt.rkt") (lib "typed-racket-test/succeed/safe-vector-untyped.rkt") (lib "typed-racket-test/succeed/pr13870.rkt") (lib "typed-racket-test/fail/pr14544.rkt") (lib "typed-racket-test/fail/pr10594.rkt") (lib "typed-racket-test/succeed/pr11390.rkt") (lib "typed-racket-test/succeed/slow-check.rkt") (lib "typed-racket-test/succeed/define-typed-untyped-identifier-syntax-properties.rkt") (lib "typed-racket-test/fail/heterogeneous-immutable-vector-bad-ann.rkt") (lib "typed-racket-test/optimizer/tests/unboxed-let2.rkt") (lib "typed-racket-test/fail/with-type3.rkt") (lib "typed-racket-test/optimizer/tests/different-langs.rkt") (lib "typed-racket-test/succeed/pr13646.rkt") (lib "typed-racket-test/optimizer/tests/structs.rkt") (lib "typed-racket-test/succeed/match-dots.rkt") (lib "typed-racket-test/succeed/pr9054.rkt") (lib "typed-racket-test/optimizer/tests/silent-dead-branch.rkt") (lib "typed-racket-test/unit-tests/prims-tests.rkt") (lib "typed-racket-test/fail/gh-issue-965.rkt") (lib "typed-racket-test/fail/gh-issue-165.rkt") (lib "typed-racket-test/succeed/memory.rkt") (lib "typed-racket-test/succeed/regexp-match-kw.rkt") (lib "typed-racket-test/optimizer/missed-optimizations/float-vector.rkt") (lib "typed-racket-test/succeed/subst-poly-dots.rkt") (lib "typed-racket-test/succeed/opaque-object-stronger.rkt") (lib "typed-racket-test/succeed/pr11099.rkt") (lib "typed-racket-test/succeed/pr575-variation-2.rkt") (lib "typed-racket-test/fail/issue-169-1.rkt") (lib "typed-racket-test/succeed/dotted-identity.rkt") (lib "typed-racket-test/optimizer/missed-optimizations/precision-loss.rkt") (lib "typed-racket-test/succeed/poly-simple-contract.rkt") (lib "typed-racket-test/succeed/poly-struct-pred.rkt") (lib "typed-racket-test/succeed/pr12913.rkt") (lib "typed-racket-test/succeed/map1.rkt") (lib "typed-racket-test/optimizer/tests/vector-ref.rkt") (lib "typed-racket-test/fail/polymorphic-recursion-4.rkt") (lib "typed-racket-test/optimizer/tests/nested-pair2.rkt") (lib "typed-racket-test/unit-tests/type-equal-tests.rkt") (lib "typed-racket-test/succeed/kw.rkt") (lib "typed-racket-test/fail/self-outside-sp.rkt") (lib "typed-racket-test/succeed/pr10562.rkt") (lib "typed-racket-test/optimizer/tests/dead-then.rkt") (lib "typed-racket-test/succeed/pr226-variation-3.rkt") (lib "typed-racket-test/succeed/patch.rkt") (lib "typed-racket-test/succeed/match.rkt") (lib "typed-racket-test/unit-tests/typecheck-tests.rkt") (lib "typed-racket-test/succeed/gh-issue-829.rkt") (lib "typed-racket-test/xfail/pr241-variation-4.rkt") (lib "typed-racket-test/succeed/pr11897.rkt") (lib "typed-racket-test/optimizer/tests/case-lambda-dead-branch.rkt") (lib "typed-racket-test/succeed/test-struct-info.rkt") (lib "typed-racket-test/succeed/pr10729.rkt") (lib "typed-racket-test/optimizer/tests/define-float.rkt") (lib "typed-racket-test/succeed/keyword-function-order.rkt") (lib "typed-racket-test/succeed/pr390-variation-5.rkt") (lib "typed-racket-test/succeed/pr241-variation-3.rkt") (lib "typed-racket-test/fail/gh-issue-1007.rkt") (lib "typed-racket-test/fail/promise-delay-name.rkt") (lib "typed-racket-test/fail/cnt-struct-err.rkt") (lib "typed-racket-test/succeed/pr11709.rkt") (lib "typed-racket-test/succeed/pr11509.rkt") (lib "typed-racket-test/unit-tests/type-printer-tests.rkt") (lib "typed-racket-test/tr-random-testing.rkt") (lib "typed-racket-test/unit-tests/static-contract-optimizer-tests.rkt") (lib "typed-racket-test/optimizer/tests/float-complex-float-mul.rkt") (lib "typed-racket-test/succeed/gh-issue-343.rkt") (lib "typed-racket-test/succeed/issue-166.rkt") (lib "typed-racket-test/main.rkt") (lib "typed-racket-test/succeed/pr15330.rkt") (lib "typed-racket-test/succeed/struct-mutable-contract.rkt") (lib "typed-racket-test/unit-tests/subtype-tests.rkt") (lib "typed-racket-test/xfail/for-inference.rkt") (lib "typed-racket-test/succeed/pr13464.rkt") (lib "typed-racket-test/succeed/provide-poly-struct.rkt") (lib "typed-racket-test/succeed/typeann-letrec.rkt") (lib "typed-racket-test/succeed/with-type.rkt") (lib "typed-racket-test/succeed/gh-issue-542.rkt") (lib "typed-racket-test/gui/succeed/gui-contract.rkt") (lib "typed-racket-test/fail/sealing-contract-3.rkt") (lib "typed-racket-test/optimizer/tests/invalid-unboxed-let2.rkt") (lib "typed-racket-test/optimizer/tests/unboxed-let-functions7.rkt") (lib "typed-racket-test/fail/mutable-vectorof-bad-ann.rkt") (lib "typed-racket-test/succeed/unsafe-struct-parent.rkt") (lib "typed-racket-test/succeed/gh-issue-38.rkt") (lib "typed-racket-test/fail/make-predicate-mod1.rkt") (lib "typed-racket-test/succeed/tr-evt.rkt") (lib "typed-racket-test/optimizer/tests/pr13788.rkt") (lib "typed-racket-test/fail/unit-typed-untyped-1.rkt") (lib "typed-racket-test/succeed/pr11545+11776.rkt") (lib "typed-racket-test/optimizer/missed-optimizations/all-real.rkt") (lib "typed-racket-test/fail/gh-issue-342.rkt") (lib "typed-racket-test/succeed/pr13155.rkt") (lib "typed-racket-test/optimizer/tests/define-call-float.rkt") (lib "typed-racket-test/fail/polymorphic-recursion-2.rkt") (lib "typed-racket-test/succeed/function.rkt") (lib "typed-racket-test/optimizer/tests/float-complex-parts2.rkt") (lib "typed-racket-test/optimizer/tests/make-polar.rkt") (lib "typed-racket-test/succeed/pr11193.rkt") (lib "typed-racket-test/succeed/dot-intro.rkt") (lib "typed-racket-test/succeed/refinements-and-aliases.rkt") (lib "typed-racket-test/succeed/pr14829.rkt") (lib "typed-racket-test/xfail/opt-lambda.rkt") (lib "typed-racket-test/succeed/for-no-body-anns.rkt") (lib "typed-racket-test/xfail/expectations.rkt") (lib "typed-racket-test/fail/recursive-type-application.rkt") (lib "typed-racket-test/fail/rts-prov.rkt") (lib "typed-racket-test/fail/pr13815.rkt") (lib "typed-racket-test/optimizer/tests/invalid-fxquotient.rkt") (lib "typed-racket-test/optimizer/tests/magnitude.rkt") (lib "typed-racket-test/succeed/require-tests.rkt") (lib "typed-racket-test/fail/inexact-complex.rkt") (lib "typed-racket-test/succeed/namespace-anchor.rkt") (lib "typed-racket-test/succeed/with-handlers-star.rkt") (lib "typed-racket-test/succeed/pr11728.rkt") (lib "typed-racket-test/succeed/begin0-error.rkt") (lib "typed-racket-test/succeed/stx.rkt") (lib "typed-racket-test/optimizer/tests/known-length-lists.rkt") (lib "typed-racket-test/optimizer/missed-optimizations/nested-same-kind.rkt") (lib "typed-racket-test/succeed/pr10939.rkt") (lib "typed-racket-test/succeed/cl-bug.rkt") (lib "typed-racket-test/succeed/ephemerons.rkt") (lib "typed-racket-test/succeed/pr10552.rkt") (lib "typed-racket-test/succeed/pr11314.rkt") (lib "typed-racket-test/fail/contract-for-self.rkt") (lib "typed-racket-test/succeed/set.rkt") (lib "typed-racket-test/succeed/annotation-test.rkt") (lib "typed-racket-test/succeed/opt-arg-test.rkt") (lib "typed-racket-test/optimizer/tests/expt.rkt") (lib "typed-racket-test/optimizer/tests/float-complex-i-cs-skip.rkt") (lib "typed-racket-test/optimizer/tests/false-huh-dead-code.rkt") (lib "typed-racket-test/succeed/bad-map-infer.rkt") (lib "typed-racket-test/fail/poly-struct-mutable-parent.rkt") (lib "typed-racket-test/succeed/let-values-tests.rkt") (lib "typed-racket-test/succeed/paths.rkt") (lib "typed-racket-test/succeed/promise-provide-generate-contract.rkt") (lib "typed-racket-test/fail/gh-issue-271.rkt") (lib "typed-racket-test/succeed/structs-variance2.rkt") (lib "typed-racket-test/succeed/richard-bugs.rkt") (lib "typed-racket-test/succeed/standard-features-scheme.rkt") (lib "typed-racket-test/succeed/hash-map-try-order.rkt") (lib "typed-racket-test/succeed/for-vector.rkt") (lib "typed-racket-test/fail/for-multiple-annotations.rkt") (lib "typed-racket-test/optimizer/tests/derived-pair3.rkt") (lib "typed-racket-test/optimizer/tests/float-complex-unary.rkt") (lib "typed-racket-test/performance/module-loading-memory.rkt") (lib "typed-racket-test/succeed/simple-occurr.rkt") (lib "typed-racket-test/succeed/type-printer-single-level.rkt") (lib "typed-racket-test/succeed/toplevel-redefinition.rkt") (lib "typed-racket-test/succeed/struct-top-recursive.rkt") (lib "typed-racket-test/fail/div-0-complex.rkt") (lib "typed-racket-test/unit-tests/contract-tests.rkt") (lib "typed-racket-test/succeed/num-equal-filter.rkt") (lib "typed-racket-test/optimizer/tests/unboxed-let-functions3.rkt") (lib "typed-racket-test/succeed/internal-scoped-tvar.rkt") (lib "typed-racket-test/succeed/pr9048.rkt") (lib "typed-racket-test/succeed/pr13161.rkt") (lib "typed-racket-test/succeed/type-alias-rec-struct.rkt") (lib "typed-racket-test/succeed/poly-ret-ann.rkt") (lib "typed-racket-test/succeed/call-comp.rkt") (lib "typed-racket-test/fail/bad-hash-ref.rkt") (lib "typed-racket-test/fail/with-type-bug.rkt") (lib "typed-racket-test/succeed/pr12905.rkt") (lib "typed-racket-test/succeed/pr953-in-xvector.rkt") (lib "typed-racket-test/fail/error-pruning3.rkt") (lib "typed-racket-test/optimizer/tests/in-list.rkt") (lib "typed-racket-test/succeed/new-metrics.rkt") (lib "typed-racket-test/optimizer/tests/float-complex-div.rkt") (lib "typed-racket-test/succeed/define-new-subtype-infer.rkt") (lib "typed-racket-test/succeed/struct-options.rkt") (lib "typed-racket-test/succeed/mutable-poly-struct.rkt") (lib "typed-racket-test/optimizer/missed-optimizations/fixnum-no-bound.rkt") (lib "typed-racket-test/succeed/or-sym.rkt") (lib "typed-racket-test/succeed/require-typed-rename.rkt") (lib "typed-racket-test/succeed/make-top-predicate.rkt") (lib "typed-racket-test/succeed/icfp-examples.rkt") (lib "typed-racket-test/succeed/any-wrap-list.rkt") (lib "typed-racket-test/fail/poly-struct-parent3.rkt") (lib "typed-racket-test/fail/internal-ann.rkt") (lib "typed-racket-test/optimizer/tests/in-string.rkt") (lib "typed-racket-test/succeed/require-signature-all-typed.rkt") (lib "typed-racket-test/succeed/pr11859.rkt") (lib "typed-racket-test/succeed/struct-cert.rkt") (lib "typed-racket-test/unit-tests/json-tests.rkt") (lib "typed-racket-test/succeed/pr575-variation-0.rkt") (lib "typed-racket-test/fail/check-expect-fail.rkt") (lib "typed-racket-test/fail/control-test-6.rkt") (lib "typed-racket-test/fail/top-level-unit-and-class.rkt") (lib "typed-racket-test/succeed/pr390-variation-6.rkt") (lib "typed-racket-test/performance/infer-timing.rkt") (lib "typed-racket-test/succeed/rest-star-hash-examples.rkt") (lib "typed-racket-test/optimizer/tests/unary-float.rkt") (lib "typed-racket-test/succeed/intersect-no-intersections.rkt") (lib "typed-racket-test/fail/pr14246.rkt") (lib "typed-racket-test/succeed/top-level-begin.rkt") (lib "typed-racket-test/succeed/places.rkt") (lib "typed-racket-test/fail/cast-mod2.rkt") (lib "typed-racket-test/succeed/pr226-variation-2.rkt") (lib "typed-racket-test/optimizer/tests/vector-bounds-check.rkt") (lib "typed-racket-test/fail/pr14173.rkt") (lib "typed-racket-test/fail/pr13123.rkt") (lib "typed-racket-test/succeed/andmap.rkt") (lib "typed-racket-test/succeed/req-type-sub.rkt") (lib "typed-racket-test/fail/subtype-int-err.rkt") (lib "typed-racket-test/succeed/gh-issue-1020.rkt") (lib "typed-racket-test/optimizer/tests/vector-chaperone1.rkt") (lib "typed-racket-test/unit-tests/keyword-expansion-test.rkt") (lib "typed-racket-test/fail/type-environment-renamed-field.rkt") (lib "typed-racket-test/fail/non-productive-rec2.rkt") (lib "typed-racket-test/succeed/prop-procedure.rkt") (lib "typed-racket-test/fail/error-pruning2.rkt") (lib "typed-racket-test/succeed/issue-628.rkt") (lib "typed-racket-test/optimizer/tests/issue-577.rkt") (lib "typed-racket-test/optimizer/tests/let-float.rkt") (lib "typed-racket-test/succeed/simple-unit-scope.rkt") (lib "typed-racket-test/succeed/pr14463.rkt") (lib "typed-racket-test/fail/pr13218.rkt") (lib "typed-racket-test/fail/immutable-vector-bad-ann.rkt") (lib "typed-racket-test/succeed/hash-ref.rkt") (lib "typed-racket-test/succeed/path-order.rkt") (lib "typed-racket-test/fail/pr12985.rkt") (lib "typed-racket-test/racketcs-eval-server.rkt") (lib "typed-racket-test/succeed/custodian.rkt") (lib "typed-racket-test/optimizer/missed-optimizations/multi-file2.rkt") (lib "typed-racket-test/optimizer/tests/derived-pair-open-terms.rkt") (lib "typed-racket-test/optimizer/missed-optimizations/multiple-irritants.rkt") (lib "typed-racket-test/succeed/require-typed-struct-custom-type.rkt") (lib "typed-racket-test/optimizer/tests/dead-inf-comp.rkt") (lib "typed-racket-test/fail/undefined.rkt") (lib "typed-racket-test/fail/multiple-annotations-define.rkt") (lib "typed-racket-test/fail/pr11998.rkt") (lib "typed-racket-test/succeed/macro-in-unit.rkt") (lib "typed-racket-test/succeed/pr14521.rkt") (lib "typed-racket-test/optimizer/tests/float-complex-number-mul.rkt") (lib "typed-racket-test/succeed/pr13821.rkt") (lib "typed-racket-test/optimizer/tests/unary-fixnum-nested.rkt") (lib "typed-racket-test/optimizer/tests/gh60.rkt") (lib "typed-racket-test/optimizer/tests/drop-pure-pred.rkt") (lib "typed-racket-test/succeed/struct-no-colon.rkt") (lib "typed-racket-test/succeed/case-lambda1.rkt") (lib "typed-racket-test/optimizer/tests/both-if-branches-dead.rkt") (lib "typed-racket-test/succeed/infer-dots.rkt") (lib "typed-racket-test/succeed/vector-contract.rkt") (lib "typed-racket-test/optimizer/tests/unboxed-letrec-syntaxes+values.rkt") (lib "typed-racket-test/succeed/inexact-complex.rkt") (lib "typed-racket-test/optimizer/tests/invalid-vector-ref.rkt") (lib "typed-racket-test/succeed/unit-typed-untyped-values.rkt") (lib "typed-racket-test/fail/new-subtype-overlap.rkt") (lib "typed-racket-test/fail/formal-len-mismatches.rkt") (lib "typed-racket-test/succeed/pathstrings.rkt") (lib "typed-racket-test/succeed/scoped-type-vars.rkt") (lib "typed-racket-test/optimizer/tests/nested-float-complex.rkt") (lib "typed-racket-test/succeed/vec-tests.rkt") (lib "typed-racket-test/optimizer/known-bugs.rkt") (lib "typed-racket-test/succeed/simple-kw-app.rkt") (lib "typed-racket-test/fail/with-asserts2.rkt") (lib "typed-racket-test/historical-counterexamples.rkt") (lib "typed-racket-test/succeed/null-program.rkt") (lib "typed-racket-test/succeed/gh-issue-291.rkt") (lib "typed-racket-test/optimizer/tests/float-fun.rkt") (lib "typed-racket-test/fail/assert-typecheck-fail.rkt") (lib "typed-racket-test/succeed/pr11617.rkt") (lib "typed-racket-test/succeed/set-contract.rkt") (lib "typed-racket-test/fail/box-fail.rkt") (lib "typed-racket-test/optimizer/tests/opt-arg.rkt") (lib "typed-racket-test/fail/non-portable-fixnum-singleton.rkt") (lib "typed-racket-test/fail/apply-dots.rkt") (lib "typed-racket-test/succeed/pr13576.rkt") (lib "typed-racket-test/succeed/prefab.rkt") (lib "typed-racket-test/succeed/single-flonum.rkt") (lib "typed-racket-test/succeed/empty-or.rkt") (lib "typed-racket-test/succeed/map-nonempty.rkt") (lib "typed-racket-test/optimizer/tests/multi-flcomp.rkt") (lib "typed-racket-test/optimizer/reset-port.rkt") (lib "typed-racket-test/optimizer/tests/literal-int.rkt") (lib "typed-racket-test/fail/heterogeneous-vector-bad-ann.rkt") (lib "typed-racket-test/succeed/match-dots2.rkt") (lib "typed-racket-test/succeed/pr575-variation-3.rkt") (lib "typed-racket-test/succeed/unquoted-printing-string.rkt") (lib "typed-racket-test/succeed/unsafe-provide-struct.rkt") (lib "typed-racket-test/optimizer/tests/float-complex-sin.rkt") (lib "typed-racket-test/fail/values-dots.rkt") (lib "typed-racket-test/succeed/promise.rkt") (lib "typed-racket-test/fail/pr13233-4.rkt") (lib "typed-racket-test/succeed/pr14458.rkt") (lib "typed-racket-test/succeed/user-defined-sp.rkt") (lib "typed-racket-test/fail/for-result-bad-ann-3.rkt") (lib "typed-racket-test/succeed/leftist-heap.rkt") (lib "typed-racket-test/fail/sandboxed-unsafe-ops.rkt") (lib "typed-racket-test/optimizer/tests/vector-length-nested.rkt") (lib "typed-racket-test/succeed/index-of.rkt") (lib "typed-racket-test/xfail/unholy-terror.rkt") (lib "typed-racket-test/fail/opaque-object-contract.rkt") (lib "typed-racket-test/optimizer/tests/case-arrow.rkt") (lib "typed-racket-test/optimizer/tests/invalid-float-promotion.rkt") (lib "typed-racket-test/fail/unit-import-wrong-type.rkt") (lib "typed-racket-test/succeed/standard-features-no-check-base.rkt") (lib "typed-racket-test/succeed/unit-3x-2.rkt") (lib "typed-racket-test/succeed/contract-struct-equality.rkt") (lib "typed-racket-test/succeed/fold-left-inst.rkt") (lib "typed-racket-test/optimizer/tests/sqrt-segfault.rkt") (lib "typed-racket-test/succeed/pr11172.rkt") (lib "typed-racket-test/succeed/random-bits.rkt") (lib "typed-racket-test/succeed/pr10937.rkt") (lib "typed-racket-test/succeed/module-lang.rkt") (lib "typed-racket-test/fail/even-odd-recursive-contract.rkt") (lib "typed-racket-test/succeed/standard-features-scheme-base.rkt") (lib "typed-racket-test/succeed/send.rkt") (lib "typed-racket-test/fail/unit-typed-untyped-2.rkt") (lib "typed-racket-test/succeed/for.rkt") (lib "typed-racket-test/succeed/safe-vector.rkt") (lib "typed-racket-test/succeed/apply-dots-list.rkt") (lib "typed-racket-test/succeed/make-predicate-top-level.rkt") (lib "typed-racket-test/optimizer/tests/begin-float.rkt") (lib "typed-racket-test/succeed/require-typed-on-typed-module.rkt") (lib "typed-racket-test/succeed/for-set.rkt") (lib "typed-racket-test/fail/set-tests.rkt") (lib "typed-racket-test/fail/pr10350.rkt") (lib "typed-racket-test/succeed/both-recursive-types.rkt") (lib "typed-racket-test/optimizer/run.rkt") (lib "typed-racket-test/fail/struct-extra-constructor.rkt") (lib "typed-racket-test/fail/pr13446.rkt") (lib "typed-racket-test/unit-tests/generalize-tests.rkt") (lib "typed-racket-test/fail/extract-sp-apply-not-self.rkt") (lib "typed-racket-test/optimizer/tests/in-vector.rkt") (lib "typed-racket-test/succeed/cast-mod.rkt") (lib "typed-racket-test/fail/mutable-vector-bad-ann.rkt") (lib "typed-racket-test/optimizer/tests/nested-float2.rkt") (lib "typed-racket-test/fail/gh-issue-601.rkt") (lib "typed-racket-test/optimizer/tests/unary-minus-float-complex.rkt") (lib "typed-racket-test/succeed/multi-arr-parse.rkt") (lib "typed-racket-test/succeed/pr10765.rkt") (lib "typed-racket-test/succeed/pr14587.rkt") (lib "typed-racket-test/succeed/pr13094.rkt") (lib "typed-racket-test/succeed/struct-update.rkt") (lib "typed-racket-test/succeed/zero-arg-poly.rkt") (lib "typed-racket-test/optimizer/tests/binary-nonzero-fixnum.rkt") (lib "typed-racket-test/succeed/standard-features-ts.rkt") (lib "typed-racket-test/fail/reverse-special.rkt") (lib "typed-racket-test/fail/gh-issue-1041.rkt") (lib "typed-racket-test/fail/gh-issue-1011.rkt") (lib "typed-racket-test/succeed/prefab-field-provide.rkt") (lib "typed-racket-test/optimizer/tests/float-complex-integer.rkt") (lib "typed-racket-test/succeed/2d-typed.rkt") (lib "typed-racket-test/succeed/require-procedure.rkt") (lib "typed-racket-test/fail/class-contract-1.rkt") (lib "typed-racket-test/succeed/unit-syntax-rule-with-annotation.rkt") (lib "typed-racket-test/fail/unbound-type.rkt") (lib "typed-racket-test/succeed/unsafe-require-top-level.rkt") (lib "typed-racket-test/optimizer/tests/nested-let-loop.rkt") (lib "typed-racket-test/succeed/provide-syntax.rkt") (lib "typed-racket-test/optimizer/tests/one-arg-arith.rkt") (lib "typed-racket-test/optimizer/transform.rkt") (lib "typed-racket-test/succeed/unit-typed-untyped-compound-1.rkt") (lib "typed-racket-test/fail/back-and-forth.rkt") (lib "typed-racket-test/optimizer/tests/unboxed-let3.rkt") (lib "typed-racket-test/succeed/threads-and-async-channels.rkt") (lib "typed-racket-test/succeed/custom-printer.rkt") (lib "typed-racket-test/succeed/unit-3x.rkt") (lib "typed-racket-test/succeed/pr11532.rkt") (lib "typed-racket-test/succeed/hari-vector-bug.rkt") (lib "typed-racket-test/unit-tests/prop-tests.rkt") (lib "typed-racket-test/optimizer/tests/unboxed-let-functions5.rkt") (lib "typed-racket-test/fail/pr11686.rkt") (lib "typed-racket-test/succeed/typed-scheme-no-check-arrow.rkt") (lib "typed-racket-test/fail/exported-struct-id-not-type.rkt") (lib "typed-racket-test/fail/procedure-top.rkt") (lib "typed-racket-test/fail/poly-expect-error.rkt") (lib "typed-racket-test/fail/case-lambda3.rkt") (lib "typed-racket-test/succeed/values-dots2.rkt") (lib "typed-racket-test/xfail/exn-any.rkt") (lib "typed-racket-test/fail/dviu-infer-fact-no-link.rkt") (lib "typed-racket-test/succeed/pr13691.rkt") (lib "typed-racket-test/fail/make-predicate-mod2.rkt") (lib "typed-racket-test/succeed/pr12974.rkt") (lib "typed-racket-test/succeed/integer-contracts.rkt") (lib "typed-racket-test/succeed/discrete-dist.rkt") (lib "typed-racket-test/succeed/sequenceof-integer.rkt") (lib "typed-racket-test/succeed/with-linear-integer-arith.rkt") (lib "typed-racket-test/fail/gadt.rkt") (lib "typed-racket-test/succeed/sealing-contract-3.rkt") (lib "typed-racket-test/succeed/pair-test3.rkt") (lib "typed-racket-test/optimizer/tests/cross-module-struct.rkt") (lib "typed-racket-test/places.rkt") (lib "typed-racket-test/succeed/log.rkt") (lib "typed-racket-test/optimizer/tests/n-ary-float.rkt") (lib "typed-racket-test/succeed/struct-struct-out.rkt") (lib "typed-racket-test/succeed/int-def-colon.rkt") (lib "typed-racket-test/fail/bad-prop-procedure3.rkt") (lib "typed-racket-test/unit-tests/class-util-tests.rkt") (lib "typed-racket-test/optimizer/tests/in-range.rkt") (lib "typed-racket-test/succeed/pr14823.rkt") (lib "typed-racket-test/optimizer/tests/box.rkt") (lib "typed-racket-test/optimizer/tests/add1.rkt") (lib "typed-racket-test/succeed/gh-issue-764.rkt") (lib "typed-racket-test/succeed/pr575-variation-1.rkt") (lib "typed-racket-test/fail/bad-prop-procedure5.rkt") (lib "typed-racket-test/succeed/gh-issue-974.rkt") (lib "typed-racket-test/fail/bad-struct-prop3.rkt") (lib "typed-racket-test/fail/bad-prop-procedure2.rkt") (lib "typed-racket-test/succeed/define-new-subtype.rkt") (lib "typed-racket-test/succeed/nested-poly.rkt") (lib "typed-racket-test/succeed/pr11504.rkt") (lib "typed-racket-test/succeed/generalize-vectors.rkt") (lib "typed-racket-test/fail/contract-for-self2.rkt") (lib "typed-racket-test/succeed/pr13710.rkt") (lib "typed-racket-test/unit-tests/special-env-typecheck-tests.rkt") (lib "typed-racket-test/optimizer/tests/vector-sum.rkt") (lib "typed-racket-test/succeed/slow-parser.rkt") (lib "typed-racket-test/optimizer/tests/unboxed-let.rkt") (lib "typed-racket-test/xfail/xmodule-mutation.rkt") (lib "typed-racket-test/succeed/extract-sp-apply-self.rkt") (lib "typed-racket-test/optimizer/tests/float-complex-fixnum.rkt") (lib "typed-racket-test/succeed/pr241-variation-2.rkt") (lib "typed-racket-test/fail/require-typed-struct-extra-field.rkt") (lib "typed-racket-test/succeed/standard-features.rkt") (lib "typed-racket-test/succeed/with-linear-integer-arith2.rkt") (lib "typed-racket-test/fail/unit-contract-missing-init-depends.rkt") (lib "typed-racket-test/unit-tests/all-tests.rkt") (lib "typed-racket-test/succeed/mu-rec.rkt") (lib "typed-racket-test/succeed/manual-examples.rkt") (lib "typed-racket-test/succeed/even-odd-recursive-type.rkt") (lib "typed-racket-test/succeed/lifting-top-level.rkt") (lib "typed-racket-test/succeed/in-vector-range.rkt") (lib "typed-racket-test/xfail/cl-expected.rkt") (lib "typed-racket-test/succeed/for-last.rkt") (lib "typed-racket-test/succeed/values-dots-result.rkt") (lib "typed-racket-test/succeed/rackunit-suite.rkt") (lib "typed-racket-test/succeed/pr468-in-query.rkt") (lib "typed-racket-test/fail/tc-error-format.rkt") (lib "typed-racket-test/fail/gh-issue-1050.rkt") (lib "typed-racket-test/succeed/foldo.rkt") (lib "typed-racket-test/succeed/pr950-magnitude.rkt") (lib "typed-racket-test/xfail/apply-map-bug.rkt") (lib "typed-racket-test/optimizer/tests/fixnum-bounded-expr.rkt") (lib "typed-racket-test/succeed/list-dots.rkt") (lib "typed-racket-test/succeed/poly-apply.rkt") (lib "typed-racket-test/fail/type-variable-scope-2.rkt") (lib "typed-racket-test/gui/succeed/require-typed-gui-class.rkt") (lib "typed-racket-test/optimizer/tests/derived-pair.rkt") (lib "typed-racket-test/optimizer/tests/simple-pair.rkt") (lib "typed-racket-test/succeed/sort-infer.rkt") (lib "typed-racket-test/succeed/for-over-hash.rkt") (lib "typed-racket-test/succeed/prompt-tag-contract.rkt") (lib "typed-racket-test/succeed/any-hash.rkt") (lib "typed-racket-test/fail/control-test-5.rkt") (lib "typed-racket-test/succeed/with-asserts.rkt") (lib "typed-racket-test/fail/polydots-dup-name.rkt") (lib "typed-racket-test/fail/values-int-err.rkt") (lib "typed-racket-test/succeed/at-exp.rkt") (lib "typed-racket-test/fail/poly-dup-name.rkt") (lib "typed-racket-test/xfail/fact-unit.rkt") (lib "typed-racket-test/fail/type-variable-scope-1.rkt") (lib "typed-racket-test/succeed/continuation-mark.rkt") (lib "typed-racket-test/succeed/struct-out-with-exported-type-name.rkt") (lib "typed-racket-test/fail/vector-set-immutable.rkt") (lib "typed-racket-test/fail/case-lambda1.rkt") (lib "typed-racket-test/succeed/do.rkt") (lib "typed-racket-test/optimizer/tests/unboxed-let-functions4.rkt") (lib "typed-racket-test/succeed/nonnegative-float.rkt") (lib "typed-racket-test/succeed/het-vec.rkt") (lib "typed-racket-test/succeed/pr390-variation-7.rkt") (lib "typed-racket-test/succeed/standard-features-no-check-scheme.rkt") (lib "typed-racket-test/optimizer/tests/with-type.rkt") (lib "typed-racket-test/succeed/gh-issue-1045.rkt") (lib "typed-racket-test/optimizer/tests/vector-ref2.rkt") (lib "typed-racket-test/succeed/pr11425.rkt") (lib "typed-racket-test/succeed/pr15144.rkt") (lib "typed-racket-test/succeed/cast-no-check.rkt") (lib "typed-racket-test/succeed/issue-823.rkt") (lib "typed-racket-test/succeed/safe-vector-base.rkt") (lib "typed-racket-test/send-places.rkt") (lib "typed-racket-test/optimizer/tests/invalid-make-flrectangular.rkt") (lib "typed-racket-test/succeed/simple-or.rkt") (lib "typed-racket-test/optimizer/missed-optimizations/marketplace-struct.rkt") (lib "typed-racket-test/succeed/unit-typed-untyped-compound-2.rkt") (lib "typed-racket-test/succeed/sequences.rkt") (lib "typed-racket-test/optimizer/tests/invalid-vector-set.rkt") (lib "typed-racket-test/succeed/pr14702.rkt") (lib "typed-racket-test/succeed/opt-lambda.rkt") (lib "typed-racket-test/succeed/for-result.rkt") (lib "typed-racket-test/succeed/unsafe-provide.rkt") (lib "typed-racket-test/nightly-run.rkt") (lib "typed-racket-test/succeed/pr575-variation-5.rkt") (lib "typed-racket-test/succeed/pict.rkt") (lib "typed-racket-test/succeed/struct-props.rkt") (lib "typed-racket-test/succeed/case-lambda-rest.rkt") (lib "typed-racket-test/succeed/for-no-anns.rkt") (lib "typed-racket-test/succeed/empty-case-arrow.rkt") (lib "typed-racket-test/optimizer/tests/zero.rkt") (lib "typed-racket-test/fail/member-with-is-equal-argument.rkt") (lib "typed-racket-test/succeed/gh-issue-973.rkt") (lib "typed-racket-test/succeed/pr390-variation-2.rkt") (lib "typed-racket-test/succeed/test.rkt") (lib "typed-racket-test/fail/with-type-unregister.rkt") (lib "typed-racket-test/optimizer/tests/in-vector2.rkt") (lib "typed-racket-test/fail/other-module-mutation.rkt") (lib "typed-racket-test/unit-tests/interactive-tests.rkt") (lib "typed-racket-test/succeed/list-ref-vec.rkt") (lib "typed-racket-test/fail/pr13233-3.rkt") (lib "typed-racket-test/succeed/provide-case-rest.rkt") (lib "typed-racket-test/unit-tests/check-below-tests.rkt") (lib "typed-racket-test/succeed/rackunit.rkt") (lib "typed-racket-test/fail/immutable-vectorof-bad-ann.rkt") (lib "typed-racket-test/succeed/type-variable-scope.rkt") (lib "typed-racket-test/optimizer/tests/dead-substructs.rkt") (lib "typed-racket-test/fail/ht-infer.rkt") (lib "typed-racket-test/fail/unit-ctc-init-depends.rkt") (lib "typed-racket-test/succeed/pr10318.rkt") (lib "typed-racket-test/fail/predicate-box.rkt") (lib "typed-racket-test/optimizer/tests/unboxed-let-functions1.rkt") (lib "typed-racket-test/optimizer/missed-optimizations/sequence.rkt") (lib "typed-racket-test/succeed/def-pred.rkt") (lib "typed-racket-test/succeed/gh-issue-214.rkt") (lib "typed-racket-test/succeed/inst-dots.rkt") (lib "typed-racket-test/succeed/gh-issue-163-1.rkt") (lib "typed-racket-test/optimizer/tests/maybe-exact-complex.rkt") (lib "typed-racket-test/fail/many-arity-int-comp.rkt") (lib "typed-racket-test/optimizer/tests/pr13468.rkt") (lib "typed-racket-test/succeed/hashtabletop-flat-contract.rkt") (lib "typed-racket-test/with-tr-contracts.rkt") (lib "typed-racket-test/succeed/has-sp-cons.rkt") (lib "typed-racket-test/succeed/vector-chap.rkt") (lib "typed-racket-test/optimizer/missed-optimizations/unexpected-complex.rkt") (lib "typed-racket-test/succeed/pr14568.rkt") (lib "typed-racket-test/fail/case-lambda4.rkt") (lib "typed-racket-test/succeed/cl-tests.rkt") (lib "typed-racket-test/succeed/submod-vector.rkt") (lib "typed-racket-test/succeed/issue-33.rkt") (lib "typed-racket-test/fail/define-new-subtype.rkt") (lib "typed-racket-test/succeed/define-forward-reference.rkt") (lib "typed-racket-test/succeed/with-type-lift.rkt") (lib "typed-racket-test/succeed/literal-char-gh-issue-434.rkt") (lib "typed-racket-test/fail/poly-struct-parent.rkt") (lib "typed-racket-test/succeed/rec-types.rkt") (lib "typed-racket-test/fail/cast-top-level2.rkt") (lib "typed-racket-test/succeed/command-line-ps.rkt") (lib "typed-racket-test/succeed/pr575-variation-4.rkt") (lib "typed-racket-test/succeed/define-new-subtype-function.rkt") (lib "typed-racket-test/fail/pr13365-variation-3.rkt") (lib "typed-racket-test/succeed/pr907-non-relative.rkt") (lib "typed-racket-test/fail/bad-ann.rkt") (lib "typed-racket-test/optimizer/tests/float-complex-conjugate-top.rkt") (lib "typed-racket-test/succeed/pr13490.rkt") (lib "typed-racket-test/succeed/assoc-with-is-equal-argument.rkt") (lib "typed-racket-test/optimizer/tests/float-complex-mult.rkt") (lib "typed-racket-test/succeed/pr13326.rkt") (lib "typed-racket-test/succeed/curry.rkt") (lib "typed-racket-test/optimizer/tests/known-length-vector-op.rkt") (lib "typed-racket-test/succeed/struct-inheritance-through-exported-macro.rkt") (lib "typed-racket-test/optimizer/tests/dead-else.rkt") (lib "typed-racket-test/succeed/pr12224.rkt") (lib "typed-racket-test/succeed/pr13584.rkt") (lib "typed-racket-test/succeed/pr12970.rkt") (lib "typed-racket-test/succeed/map2.rkt") (lib "typed-racket-test/optimizer/tests/mpair.rkt") (lib "typed-racket-test/succeed/exceptions.rkt") (lib "typed-racket-test/succeed/optimize-simple.rkt") (lib "typed-racket-test/succeed/fold-left.rkt") (lib "typed-racket-test/optimizer/tests/fixnum-comparison.rkt") (lib "typed-racket-test/succeed/gh-issue-1088.rkt") (lib "typed-racket-test/succeed/sealing-contract-2.rkt") (lib "typed-racket-test/optimizer/tests/pr14284.rkt") (lib "typed-racket-test/succeed/pr15026-a.rkt") (lib "typed-racket-test/succeed/rec-type-alias-variance.rkt") (lib "typed-racket-test/fail/cast-top-level1.rkt") (lib "typed-racket-test/succeed/refinements-expected-type1.rkt") (lib "typed-racket-test/fail/for-result-bad-ann-2.rkt") (lib "typed-racket-test/optimizer/tests/float-complex-float-div.rkt") (lib "typed-racket-test/optimizer/tests/complex-exp.rkt") (lib "typed-racket-test/succeed/define-type-omit-define.rkt") (lib "typed-racket-test/fail/pr13664.rkt") (lib "typed-racket-test/succeed/cps.rkt") (lib "typed-racket-test/succeed/standard-features-no-check-ts.rkt") (lib "typed-racket-test/succeed/refinements-quicksort.rkt") (lib "typed-racket-test/optimizer/tests/invalid-log-complex.rkt") (lib "typed-racket-test/succeed/type-environment.rkt") (lib "typed-racket-test/succeed/basic-tests.rkt") (lib "typed-racket-test/optimizer/tests/vector-length-impersonator.rkt") (lib "typed-racket-test/fail/missing-rest-arguments.rkt") (lib "typed-racket-test/succeed/string-const.rkt") (lib "typed-racket-test/succeed/gh-issue-304.rkt") (lib "typed-racket-test/fail/pr13365-variation-2.rkt") (lib "typed-racket-test/optimizer/missed-optimizations/multi-file1.rkt") (lib "typed-racket-test/succeed/logic.rkt") (lib "typed-racket-test/succeed/arrow-star-contracts.rkt") (lib "typed-racket-test/succeed/recursive-type-alias-top-level.rkt") (lib "typed-racket-test/fail/pr14973.rkt") (lib "typed-racket-test/succeed/for-seq.rkt") (lib "typed-racket-test/fail/too-many-errors.rkt") (lib "typed-racket-test/succeed/racket-struct.rkt") (lib "typed-racket-test/optimizer/tests/pr14380.rkt") (lib "typed-racket-test/fail/pr14615.rkt") (lib "typed-racket-test/fail/pr13665.rkt") (lib "typed-racket-test/succeed/for-hash.rkt") (lib "typed-racket-test/fail/set-struct.rkt") (lib "typed-racket-test/succeed/events-with-async-channel.rkt") (lib "typed-racket-test/fail/unbound-non-reg.rkt") (lib "typed-racket-test/succeed/pr9046.rkt") (lib "typed-racket-test/optimizer/tests/pair-known-length-list.rkt") (lib "typed-racket-test/succeed/kw-def.rkt") (lib "typed-racket-test/succeed/refinement-even.rkt") (lib "typed-racket-test/succeed/match-or.rkt") (lib "typed-racket-test/succeed/threads-and-channels.rkt") (lib "typed-racket-test/succeed/pr10718+10755.rkt") (lib "typed-racket-test/succeed/pr14582.rkt") (lib "typed-racket-test/fail/with-type1.rkt") (lib "typed-racket-test/fail/with-type2.rkt") (lib "typed-racket-test/gui/succeed/pr390.rkt") (lib "typed-racket-test/succeed/pr14364.rkt") (lib "typed-racket-test/succeed/check-expect.rkt") (lib "typed-racket-test/fail/define-values-bottom.rkt") (lib "typed-racket-test/succeed/json-hash.rkt") (lib "typed-racket-test/optimizer/tests/invalid-float-comp.rkt") (lib "typed-racket-test/succeed/cast-top-level.rkt") (lib "typed-racket-test/succeed/fix.rkt") (lib "typed-racket-test/succeed/apply-append.rkt") (lib "typed-racket-test/fail/bad-struct-top.rkt") (lib "typed-racket-test/random-real.rkt") (lib "typed-racket-test/fail/pr13577.rkt") (lib "typed-racket-test/succeed/opaque-object-name.rkt") (lib "typed-racket-test/fail/pr13746.rkt") (lib "typed-racket-test/fail/pr12706.rkt") (lib "typed-racket-test/optimizer/tests/invalid-mpair.rkt") (lib "typed-racket-test/fail/def-val-inv-unit-sig-mismatch.rkt") (lib "typed-racket-test/succeed/gh-issue-181.rkt") (lib "typed-racket-test/optimizer/tests/list.rkt") (lib "typed-racket-test/fail/gh-issue-293.rkt") (lib "typed-racket-test/optimizer/tests/vector-chaperone2.rkt") (lib "typed-racket-test/succeed/opaque-object-contract.rkt") (lib "typed-racket-test/run.rkt") (lib "typed-racket-test/optimizer/tests/float-complex.rkt") (lib "typed-racket-test/succeed/top-level-make-predicate.rkt") (lib "typed-racket-test/optimizer/tests/annotations.rkt") (lib "typed-racket-test/succeed/pr11866.rkt") (lib "typed-racket-test/fail/with-asserts3.rkt") (lib "typed-racket-test/xfail/ann-map-funcs.rkt") (lib "typed-racket-test/fail/sealing-contract-4.rkt") (lib "typed-racket-test/unit-tests/type-alias-helper.rkt") (lib "typed-racket-test/succeed/pr10342.rkt") (lib "typed-racket-test/succeed/pr241-variation-0.rkt") (lib "typed-racket-test/fail/control-test-3.rkt") (lib "typed-racket-test/succeed/pr14896.rkt") (lib "typed-racket-test/succeed/parameter-proc.rkt") (lib "typed-racket-test/fail/pr13893.rkt") (lib "typed-racket-test/optimizer/tests/projections.rkt") (lib "typed-racket-test/fail/bad-struct-prop4.rkt") (lib "typed-racket-test/succeed/no-bound-fl.rkt") (lib "typed-racket-test/succeed/require-typed-struct-contract.rkt") (lib "typed-racket-test/succeed/immutable-string-safe.rkt") (lib "typed-racket-test/unit-tests/init-env-tests.rkt") (lib "typed-racket-test/fail/bad-struct-prop.rkt") (lib "typed-racket-test/optimizer/tests/flvector-length.rkt") (lib "typed-racket-test/fail/log-not-complex.rkt") (lib "typed-racket-test/succeed/pr9053-2.rkt") (lib "typed-racket-test/fail/case-lambda2.rkt") (lib "typed-racket-test/optimizer/tests/unboxed-make-rectangular.rkt") (lib "typed-racket-test/succeed/pair-test.rkt") (lib "typed-racket-test/optimizer/tests/dead-case-lambda.rkt") (lib "typed-racket-test/fail/nested-tvars.rkt") (lib "typed-racket-test/fail/control-test-2.rkt") (lib "typed-racket-test/succeed/pr11912.rkt") (lib "typed-racket-test/optimizer/tests/rational-literal.rkt") (lib "typed-racket-test/optimizer/tests/string-length.rkt") (lib "typed-racket-test/succeed/internal-contract-check1.rkt") (lib "typed-racket-test/succeed/vector-union.rkt") (lib "typed-racket-test/optimizer/tests/nested-unboxed-let.rkt") (lib "typed-racket-test/succeed/standard-features-base.rkt") (lib "typed-racket-test/fail/opaque-overlap.rkt") (lib "typed-racket-test/fail/bad-any.rkt") (lib "typed-racket-test/succeed/pr10319.rkt") (lib "typed-racket-test/unit-tests/tooltip-tests.rkt") (lib "typed-racket-test/fail/single-letrec.rkt") (lib "typed-racket-test/fail/sandbox.rkt") (lib "typed-racket-test/fail/support-test-submodule.rkt") (lib "typed-racket-test/fail/pr14121.rkt") (lib "typed-racket-test/fail/dviu-not-a-unit.rkt") (lib "typed-racket-test/fail/safe-letrec.rkt") (lib "typed-racket-test/fail/gh-issue-944.rkt") (lib "typed-racket-test/succeed/struct-exec.rkt") (lib "typed-racket-test/gui/succeed/racket-esquire.rkt") (lib "typed-racket-test/fail/poly-struct-parent2.rkt") (lib "typed-racket-test/succeed/literal-regexp-gh-issue-539.rkt") (lib "typed-racket-test/succeed/gh-issue-205.rkt") (lib "typed-racket-test/succeed/infer-funargs.rkt") (lib "typed-racket-test/fail/signature-escape.rkt") (lib "typed-racket-test/succeed/pr13339.rkt") (lib "typed-racket-test/succeed/struct-custom-type.rkt") (lib "typed-racket-test/fail/pr13663.rkt") (lib "typed-racket-test/fail/sealing-contract-1.rkt") (lib "typed-racket-test/performance/module-loading.rkt") (lib "typed-racket-test/succeed/define-new-subtype-mu-rec.rkt") (lib "typed-racket-test/succeed/structs-across-modules.rkt") (lib "typed-racket-test/optimizer/tests/extfl-bounds-check-cs-skip-all.rkt") (lib "typed-racket-test/fail/issue-215-2.rkt") (lib "typed-racket-test/optimizer/tests/quote.rkt") (lib "typed-racket-test/succeed/pr241-variation-5.rkt") (lib "typed-racket-test/succeed/callcc.rkt") (lib "typed-racket-test/xfail/inst+special-case.rkt") (lib "typed-racket-test/optimizer/tests/sqrt.rkt") (lib "typed-racket-test/succeed/opaque-non-opaque-contracts-together.rkt") (lib "typed-racket-test/optimizer/missed-optimizations/unary-float.rkt") (lib "typed-racket-test/optimizer/tests/vector-set2.rkt") (lib "typed-racket-test/fail/bad-ann-from-macro-in-unit.rkt") (lib "typed-racket-test/fail/plambda-dup-tvar.rkt") (lib "typed-racket-test/succeed/pr390-variation-4.rkt") (lib "typed-racket-test/optimizer/tests/float-real.rkt") (lib "typed-racket-test/succeed/fx-filter.rkt") (lib "typed-racket-test/succeed/intersection1.rkt") (lib "typed-racket-test/succeed/lots-o-bugs.rkt") (lib "typed-racket-test/succeed/require-typed-no-check.rkt") (lib "typed-racket-test/succeed/stream.rkt") (lib "typed-racket-test/fail/bad-immutable-hash-ref.rkt") (lib "typed-racket-test/succeed/let-partial-annotations.rkt") (lib "typed-racket-test/succeed/poly-tests.rkt") (lib "typed-racket-test/succeed/dotted-identity2.rkt") (lib "typed-racket-test/unit-tests/typed-units-tests.rkt") (lib "typed-racket-test/fail/flat-contract-name.rkt") (lib "typed-racket-test/succeed/static-contract-equality-tests.rkt") (lib "typed-racket-test/fail/pr13581.rkt") (lib "typed-racket-test/fail/pr13289.rkt") (lib "typed-racket-test/fail/pr13209.rkt") (lib "typed-racket-test/succeed/broken-let-syntax.rkt") (lib "typed-racket-test/fail/cnt-err1.rkt") (lib "typed-racket-test/succeed/with-type-typed-context-flag.rkt") (lib "typed-racket-test/fail/control-test-1.rkt") (lib "typed-racket-test/succeed/gh-issue-506.rkt") (lib "typed-racket-test/fail/unsafe-struct.rkt") (lib "typed-racket-test/succeed/pr11578.rkt") (lib "typed-racket-test/succeed/star-sizes.rkt") (lib "typed-racket-test/unit-tests/remove-intersect-tests.rkt") (lib "typed-racket-test/succeed/aliasing-tests.rkt") (lib "typed-racket-test/succeed/parse-path.rkt") (lib "typed-racket-test/succeed/pr10057.rkt") (lib "typed-racket-test/unit-tests/infer-tests.rkt") (lib "typed-racket-test/succeed/pr13412.rkt") (lib "typed-racket-test/succeed/member-pred.rkt") (lib "typed-racket-test/succeed/simple-implies.rkt") (lib "typed-racket-test/fail/dviu-not-subtype.rkt") (lib "typed-racket-test/optimizer/tests/make-flrectangular.rkt") (lib "typed-racket-test/succeed/variance-test.rkt") (lib "typed-racket-test/succeed/require-struct.rkt") (lib "typed-racket-test/succeed/pr13937.rkt") (lib "typed-racket-test/succeed/gh-issue-426.rkt") (lib "typed-racket-test/succeed/pr11901.rkt") (lib "typed-racket-test/succeed/parameter-c.rkt") (lib "typed-racket-test/optimizer/tests/define-pair.rkt") (lib "typed-racket-test/succeed/struct-path-update.rkt") (lib "typed-racket-test/optimizer/tests/float-complex-float-cs-skip.rkt") (lib "typed-racket-test/fail/gh112.rkt") (lib "typed-racket-test/succeed/unit-non-prefix-annotation.rkt") (lib "typed-racket-test/fail/wrong-arity.rkt") (lib "typed-racket-test/fail/pr13233.rkt") (lib "typed-racket-test/succeed/contract-opt+kw.rkt") (lib "typed-racket-test/fail/pr14568.rkt") (lib "typed-racket-test/fail/pr14508.rkt") (lib "typed-racket-test/fail/pr13588.rkt") (lib "typed-racket-test/succeed/pr14567.rkt") (lib "typed-racket-test/succeed/cmdline.rkt") (lib "typed-racket-test/fail/pr10936.rkt") (lib "typed-racket-test/succeed/inf-nested-bot.rkt") (lib "typed-racket-test/fail/same-type-variable-error-msg.rkt") (lib "typed-racket-test/fail/gh-issue-1014.rkt") (lib "typed-racket-test/succeed/dviu-infer-deps-ok.rkt") (lib "typed-racket-test/optimizer/tests/exact-inexact.rkt") (lib "typed-racket-test/fail/pr13365.rkt") (lib "typed-racket-test/optimizer/tests/vector-set-quote.rkt") (lib "typed-racket-test/succeed/simple-poly.rkt") (lib "typed-racket-test/succeed/metrics.rkt") (lib "typed-racket-test/optimizer/tests/pair-fun.rkt") (lib "typed-racket-test/succeed/type-alias-omit-define-syntaxes.rkt") (lib "typed-racket-test/succeed/gh-issue-26.rkt") (lib "typed-racket-test/succeed/pr14828.rkt") (lib "typed-racket-test/succeed/pr9053.rkt") (lib "typed-racket-test/succeed/pr9043.rkt") (lib "typed-racket-test/succeed/gh-issue-366.rkt") (lib "typed-racket-test/succeed/gh-issue-336.rkt") (lib "typed-racket-test/fail/for-result-bad-ann-1.rkt") (lib "typed-racket-test/fail/require-typed-struct-renamed-field.rkt") (lib "typed-racket-test/fail/cl-bug.rkt") (lib "typed-racket-test/succeed/poly-same-annotation.rkt") (lib "typed-racket-test/fail/regexp-match-pos-star.rkt") (lib "typed-racket-test/xfail/applicative.rkt") (lib "typed-racket-test/fail/mandatory-kw.rkt") (lib "typed-racket-test/fail/cast-mod3.rkt") (lib "typed-racket-test/fail/class-define-srcloc.rkt") (lib "typed-racket-test/fail/bad-struct-prop2.rkt") (lib "typed-racket-test/fail/dup-ann.rkt") (lib "typed-racket-test/fail/make-predicate-top-level2.rkt") (lib "typed-racket-test/succeed/cl.rkt") (lib "typed-racket-test/succeed/provide-struct-untyped.rkt") (lib "typed-racket-test/succeed/gh-issue-43.rkt") (lib "typed-racket-test/succeed/gh-issue-906.rkt") (lib "typed-racket-test/fail/require-typed-struct-missing-colon.rkt") (lib "typed-racket-test/optimizer/tests/float-complex-parts.rkt") (lib "typed-racket-test/succeed/pr11756.rkt") (lib "typed-racket-test/fail/pr14389.rkt") (lib "typed-racket-test/optimizer/tests/unboxed-let-functions2.rkt") (lib "typed-racket-test/unit-tests/subst-tests.rkt") (lib "typed-racket-test/fail/bad-type-app.rkt") (lib "typed-racket-test/succeed/annotation-syntax-override.rkt") (lib "typed-racket-test/succeed/pr13901.rkt") (lib "typed-racket-test/succeed/pr476-compile-time-images.rkt") (lib "typed-racket-test/succeed/datum-to-syntax.rkt") (lib "typed-racket-test/fail/duplicate-ann.rkt") (lib "typed-racket-test/optimizer/tests/apply-plus.rkt") (lib "typed-racket-test/succeed/provide-for-meta.rkt") (lib "typed-racket-test/succeed/pr14355.rkt") (lib "typed-racket-test/succeed/provide-alias-omit-define.rkt") (lib "typed-racket-test/succeed/flvector.rkt") (lib "typed-racket-test/succeed/pr403.rkt") (lib "typed-racket-test/optimizer/tests/let-rhs.rkt") (lib "typed-racket-test/optimizer/tests/invalid-unboxed-let.rkt") (lib "typed-racket-test/fail/polymorphic-recursion.rkt") (lib "typed-racket-test/succeed/pr13160.rkt") (lib "typed-racket-test/fail/for-vector-bad-ann.rkt") (lib "typed-racket-test/succeed/unsafe-reprovide.rkt") (lib "typed-racket-test/optimizer/missed-optimizations/regexp.rkt") (lib "typed-racket-test/fail/error-pruning1.rkt") (lib "typed-racket-test/succeed/struct-out.rkt") (lib "typed-racket-test/succeed/class-contract.rkt") (lib "typed-racket-test/optimizer/tests/in-bytes.rkt") (lib "typed-racket-test/succeed/barland.rkt") (lib "typed-racket-test/succeed/format.rkt") (lib "typed-racket-test/optimizer/tests/let-loop-effects.rkt") (lib "typed-racket-test/optimizer/tests/pr12475.rkt") (lib "typed-racket-test/fail/struct-type-name-not-constr.rkt") (lib "typed-racket-test/succeed/exn-any-mutation.rkt") (lib "typed-racket-test/succeed/for-list.rkt") (lib "typed-racket-test/succeed/vectortop-flat-contract.rkt") (lib "typed-racket-test/xfail/pr10618.rkt") (lib "typed-racket-test/succeed/match-overlap-unsafe-struct-ref.rkt") (lib "typed-racket-test/optimizer/tests/vector-set.rkt") (lib "typed-racket-test/succeed/param.rkt") (lib "typed-racket-test/succeed/float-internal-err.rkt") (lib "typed-racket-test/fail/pr14144.rkt") (lib "typed-racket-test/fail/sealing-contract-2.rkt") (lib "typed-racket-test/succeed/with-handlers-rest-arg.rkt") (lib "typed-racket-test/succeed/pr11392.rkt") (lib "typed-racket-test/succeed/standard-features-no-check-scheme-base.rkt") (lib "typed-racket-test/fail/pr13274.rkt") (lib "typed-racket-test/optimizer/tests/unboxed-let-constants.rkt") (lib "typed-racket-test/succeed/require-typed-struct-regexp.rkt") (lib "typed-racket-test/succeed/pr241-variation-1.rkt") (lib "typed-racket-test/succeed/standard-features-no-check-gui.rkt") (lib "typed-racket-test/succeed/hash-literal.rkt"))) (name . "typed-racket-test") (ring . 0) (search-terms . #hasheq((author:samth@racket-lang.org . #t) (author:stamourv@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "fec1bd3cabf5dc5a759b10e8b0916e073f605ec2") (source . "git://github.com/racket/typed-racket/?path=typed-racket-test") (source_url . "git://github.com/racket/typed-racket/?path=typed-racket-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("typed-rosette" . #hasheq((author . "stchang@racket-lang.org") (authors . ("stchang@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/typed-rosette.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "d72d4e7aad2c339fdd49c70682d56f83ab3eae3d") (checksum-error . #f) (collection . (multi)) (conflicts . ("syndicate")) (dependencies . (("racket" #:version "6.8.0.3") "base" "rosette" "turnstile" "rackunit-lib" "lens-common" "lens-unstable" "syntax-classes-lib" "rackunit-lib")) (description . "A typed variant of the Rosette language.") (implies . ()) (last-checked . 1632904755) (last-edit . 1515534266) (last-updated . 1533585629) (modules . ((lib "typed/rosette/set.rkt") (lib "test/synthcl-matrix-synth-tests.rkt") (lib "test/rosette-tests.rkt") (lib "typed/rosette/unsafe.rkt") (lib "test/rosette-guide-sec5-tests.rkt") (lib "test/typed-rosette/case-arrow.rkt") (lib "typed/rosette/list.rkt") (lib "test/rosette-guide-sec8-tests.rkt") (lib "typed/rosette/match-core.rkt") (lib "typed/bv/lang/reader.rkt") (lib "typed/rosette/struct-type-properties.rkt") (lib "test/matrix-verify-kernel.rkt") (lib "sdsl/typed-fsm/fsm.rkt") (lib "typed/rosette/base-forms.rkt") (lib "sdsl/typed-ifc/ifc.rkt") (lib "typed/query/debug.rkt") (lib "test/rosette-guide-sec43-tests.rkt") (lib "test/synthcl-matrix-verify-tests.rkt") (lib "test/typed-rosette/occurrence.rkt") (lib "typed/lib/angelic.rkt") (lib "sdsl/typed-synthcl/synthcl-model.rkt") (lib "test/walsh-synth-kernel.rkt") (lib "test/synthcl-walsh-verify-tests.rkt") (lib "test/synthcl-walsh-synth-tests.rkt") (lib "test/rosette-guide-sec45-tests.rkt") (lib "test/sobel-kernel.rkt") (lib "typed/lib/synthax.rkt") (lib "test/rosette-guide-sec4-tests.rkt") (lib "test/synthcl-tests.rkt") (lib "typed/lib/roseunit.rkt") (lib "sdsl/typed-bv/bv.rkt") (lib "typed/rosette/bool.rkt") (lib "test/rosette-guide-sec49-tests.rkt") (lib "typed/rosette/types.rkt") (lib "test/rosette-guide-sec46-tests.rkt") (lib "typed/rosette/vector.rkt") (lib "typed/ifc/lang/reader.rkt") (lib "test/rosette-guide-sec7-tests.rkt") (lib "test/synthcl-matrix-verify-buggy-tests.rkt") (lib "typed/rosette-util.rkt") (lib "typed/lib/check-asserts.rkt") (lib "test/bv-ref-tests.rkt") (lib "test/synthcl-sobel-tests.rkt") (lib "typed/rosette/lang/reader.rkt") (lib "sdsl/typed-synthcl/synthcl.rkt") (lib "typed/fsm/lang/reader.rkt") (lib "test/walsh-verify-kernel.rkt") (lib "typed/rosette/format.rkt") (lib "typed/rosette/hash.rkt") (lib "test/typed-rosette/occurrence2.rkt") (lib "test/typed-rosette/for-all-union.rkt") (lib "test/rosette-guide-sec3-tests.rkt") (lib "typed/rosette/function.rkt") (lib "typed/lib/render.rkt") (lib "test/rosette-guide-sec2-tests.rkt") (lib "typed/lib/lift.rkt") (lib "test/quote-tests.rkt") (lib "typed/main.rkt") (lib "typed/rosette/generic-interfaces.rkt") (lib "test/fsm-tests.rkt") (lib "test/matrix-synth-kernel.rkt") (lib "typed/rosette.rkt") (lib "typed/rosette/concrete-predicate.rkt") (lib "typed/rosette/for-forms.rkt") (lib "test/typed-rosette/rest-arg.rkt") (lib "test/rosette-guide-sec6-tests.rkt") (lib "test/rosette-guide-sec44-tests.rkt") (lib "test/typed-rosette/for-tests.rkt") (lib "typed/synthcl/lang/reader.rkt") (lib "typed/rosette/struct.rkt") (lib "typed/rosette/match-pat-forms.rkt") (lib "test/ifc-tests.rkt") (lib "test/typed-rosette/test-type-decl.rkt") (lib "typed/rosette/forms-pre-match.rkt") (lib "test/bv-test-utils.rkt") (lib "test/bv-tests.rkt"))) (name . "typed-rosette") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (author:stchang@racket-lang.org . #t) (ring:2 . #t) (rosette . #t) (symbolic-execution . #t) (typed . #t))) (source . "https://github.com/stchang/typed-rosette.git") (tags . ("rosette" "symbolic-execution" "typed")) (versions . #hash((default . #hasheq((checksum . "d72d4e7aad2c339fdd49c70682d56f83ab3eae3d") (source . "https://github.com/stchang/typed-rosette.git") (source_url . "https://github.com/stchang/typed-rosette.git"))))))) ("typed-stack" . #hasheq((author . "lehi@tosk.in") (authors . ("lehi@tosk.in")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "typed-stack" "doc/typed-stack@typed-stack/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-stack.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-stack.txt"))) (checksum . "5bcf55322b3a97ecfb0233ed77f282507eb2f6ad") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "typed-racket-more" "typed-racket-lib" "scribble-lib" "typed-racket-doc" "racket-doc")) (description . "A simple stack library written in TR.") (implies . ()) (last-checked . 1632904756) (last-edit . 1486890793) (last-updated . 1592461928) (modules . ((lib "typed-stack/test/stack-test.rkt") (lib "typed-stack/typed-stack.rkt") (lib "typed-stack/main.rkt") (lib "typed-stack/doc/typed-stack.scrbl"))) (name . "typed-stack") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lehi@tosk.in . #t) (ring:1 . #t) (stack . #t) (typed-racket . #t))) (source . "git://github.com/lehitoskin/typed-stack") (tags . ("stack" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "5bcf55322b3a97ecfb0233ed77f282507eb2f6ad") (source . "git://github.com/lehitoskin/typed-stack") (source_url . "http://github.com/lehitoskin/typed-stack/tree/master"))))))) ("typed-struct-props" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "typed-struct-props" "doc/typed-struct-props@typed-struct-props/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-struct-props.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-struct-props.txt"))) (checksum . "5512b7f4c9dff6b2be445435b86babfc9b189fc8") (checksum-error . #f) (collection . "typed-struct-props") (conflicts . ()) (date-added . 1614799572) (dependencies . ("base" "rackunit-lib" "typed-racket-lib" "typed-racket-more" "type-expander" "scribble-lib" "racket-doc" "typed-racket-doc")) (description . "Some struct type properties in Typed/Racket, in a more type-safe way.\r\n\r\nThe API should hopefully stay backward-compatible when Typed/Racket officially supports (or rejects) structure type properties.") (implies . ()) (last-checked . 1632904756) (last-edit . 1614889851) (last-updated . 1617546907) (modules . ((lib "typed-struct-props/test/test-equal+hash.rkt") (lib "typed-struct-props/test/test-write.rkt") (lib "typed-struct-props/scribblings/typed-struct-props.scrbl") (lib "typed-struct-props/test/test-write+equal+hash-poly.rkt") (lib "typed-struct-props/test/test-write-poly.rkt") (lib "typed-struct-props/test/test-poly.rkt") (lib "typed-struct-props/test/test-none.rkt") (lib "typed-struct-props/test/test-child.rkt") (lib "typed-struct-props/test/test-write+equal+hash.rkt") (lib "typed-struct-props/test/test-after.rkt") (lib "typed-struct-props/main.rkt") (lib "typed-struct-props/test/test-none-poly.rkt") (lib "typed-struct-props/test/test-parent.rkt") (lib "typed-struct-props/test/test-equal+hash-poly.rkt"))) (name . "typed-struct-props") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (ring:1 . #t) (structs . #t) (typed-racket . #t))) (source . "https://github.com/jsmaniac/typed-struct-props.git#main") (tags . ("structs" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "5512b7f4c9dff6b2be445435b86babfc9b189fc8") (source . "https://github.com/jsmaniac/typed-struct-props.git#main") (source_url . "https://github.com/jsmaniac/typed-struct-props.git#main"))))))) ("typed-worklist" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "typed-worklist" "doc/typed-worklist@typed-worklist/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typed-worklist.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typed-worklist.txt"))) (checksum . "31fb17fb7c8aaa96c49dcd1ca9094d0dffa775c8") (checksum-error . #f) (collection . "typed-worklist") (conflicts . ()) (date-added . 1614799576) (dependencies . (("base" "6.6.0.900") "rackunit-lib" "type-expander" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc")) (description . "A Typed Racket implementation of a general-purpose worklist, with multiple worklists of different types.") (implies . ()) (last-checked . 1632904757) (last-edit . 1614889856) (last-updated . 1617550165) (modules . ((lib "typed-worklist/main.rkt") (lib "typed-worklist/scribblings/typed-worklist.scrbl") (lib "typed-worklist/test/test-experiment.rkt"))) (name . "typed-worklist") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (ring:1 . #t) (typed-racket . #t) (utility . #t))) (source . "https://github.com/jsmaniac/typed-worklist.git#main") (tags . ("typed-racket" "utility")) (versions . #hash((default . #hasheq((checksum . "31fb17fb7c8aaa96c49dcd1ca9094d0dffa775c8") (source . "https://github.com/jsmaniac/typed-worklist.git#main") (source_url . "https://github.com/jsmaniac/typed-worklist.git#main"))))))) ("typeset-rewriter" . #hasheq((author . "sgtamk@gmail.com") (authors . ("sgtamk@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/typeset-rewriter.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/typeset-rewriter.txt"))) (checksum . "9737f385b57a74564221ebd719c01f4180fbf6f8") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "redex-pict-lib")) (description . "Simple, low-level rewriter tools for typesetting PLT Redex models") (implies . ()) (last-checked . 1632904757) (last-edit . 1476382398) (last-updated . 1502816508) (modules . ((lib "typeset-rewriter/main.rkt"))) (name . "typeset-rewriter") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:sgtamk@gmail.com . #t) (redex . #t) (ring:1 . #t))) (source . "git://github.com/pnwamk/typeset-rewriter#master") (tags . ("redex")) (versions . #hash((default . #hasheq((checksum . "9737f385b57a74564221ebd719c01f4180fbf6f8") (source . "git://github.com/pnwamk/typeset-rewriter#master") (source_url . "http://github.com/pnwamk/typeset-rewriter/tree/master#master"))))))) ("tzdata" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tzdata.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tzdata.txt"))) (checksum . "338c6730c1d0ff9fb0761324cd21de242a1d136a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1573413250) (dependencies . ("base")) (description . "zoneinfo data mainly for Windows systems using tzinfo") (implies . ()) (last-checked . 1632904757) (last-edit . 1573413250) (last-updated . 1573413250) (modules . ()) (name . "tzdata") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:zeppieri@gmail.com . #t) (ring:1 . #t) (timezone . #t))) (source . "https://github.com/97jaz/tzdata.git") (tags . ("timezone")) (versions . #hash((default . #hasheq((checksum . "338c6730c1d0ff9fb0761324cd21de242a1d136a") (source . "https://github.com/97jaz/tzdata.git") (source_url . "https://github.com/97jaz/tzdata.git"))))))) ("tzgeolookup" . #hasheq((author . "alexharsanyi@gmail.com") (authors . ("alexharsanyi@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tzgeolookup" "doc/tzgeolookup@tzgeolookup/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tzgeolookup.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tzgeolookup.txt"))) (checksum . "93abcae2b9ab1b77004cf65fbdc0a291680bc734") (checksum-error . #f) (collection . "tzgeolookup") (conflicts . ()) (date-added . 1565997219) (dependencies . ("base" "math-lib" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Find the time zone name for any geographic coordinate on earth.  This package works entirely off-line, without having to contact any web service for this information.\r\n") (implies . ()) (last-checked . 1632904758) (last-edit . 1566109260) (last-updated . 1573287152) (modules . ((lib "tzgeolookup/private/tzgeolookup.rkt") (lib "tzgeolookup/main.rkt") (lib "tzgeolookup/private/tzpack.rkt") (lib "tzgeolookup/scribblings/tzgeolookup.scrbl"))) (name . "tzgeolookup") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:alexharsanyi@gmail.com . #t) (ring:1 . #t) (timezone . #t))) (source . "https://github.com/alex-hhh/tzgeolookup.git") (tags . ("timezone")) (versions . #hash((default . #hasheq((checksum . "93abcae2b9ab1b77004cf65fbdc0a291680bc734") (source . "https://github.com/alex-hhh/tzgeolookup.git") (source_url . "https://github.com/alex-hhh/tzgeolookup.git"))))))) ("tzinfo" . #hasheq((author . "zeppieri@gmail.com") (authors . ("zeppieri@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "tzinfo" "doc/tzinfo@tzinfo/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/tzinfo.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/tzinfo.txt"))) (checksum . "16fa31aa9005de3476885f644cc5930b6a18503f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1573413479) (dependencies . ("base" "cldr-core" "rackunit-lib" ("tzdata" #:platform windows #:version "0.4") "racket-doc" "scribble-lib")) (description . "API for querying the IANA tz database") (implies . ()) (last-checked . 1632904758) (last-edit . 1573413479) (last-updated . 1629245529) (modules . ((lib "tzinfo/private/tabfile-parser.rkt") (lib "tzinfo/private/structs.rkt") (lib "tzinfo/private/os/unix.rkt") (lib "tzinfo/private/tzfile-parser.rkt") (lib "tzinfo/private/os/windows-registry.rkt") (lib "tzinfo/private/os/windows.rkt") (lib "tzinfo/zoneinfo.rkt") (lib "tzinfo/source.rkt") (lib "tzinfo/main.rkt") (lib "tzinfo/scribblings/tzinfo.scrbl") (lib "tzinfo/private/zoneinfo.rkt") (lib "tzinfo/private/generics.rkt") (lib "tzinfo/test/zoneinfo.rkt") (lib "tzinfo/private/zoneinfo-search.rkt") (lib "tzinfo/private/os/env.rkt"))) (name . "tzinfo") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:zeppieri@gmail.com . #t) (ring:1 . #t) (timezone . #t))) (source . "https://github.com/97jaz/tzinfo.git") (tags . ("timezone")) (versions . #hash((default . #hasheq((checksum . "16fa31aa9005de3476885f644cc5930b6a18503f") (source . "https://github.com/97jaz/tzinfo.git") (source_url . "https://github.com/97jaz/tzinfo.git"))))))) ("udelim" . #hasheq((author . "william@hatch.uno willghatch@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "udelim" "doc/udelim@udelim/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/udelim.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/udelim.txt"))) (checksum . "58420f53c37e0bee451daa3dc5e2d72f7fc4d967") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1608151895) (dependencies . ("base" "racket-doc" "scribble-lib" "sandbox-lib" "rackunit-lib")) (description . "Add more parens and string delimiters.") (implies . ()) (last-checked . 1632904758) (last-edit . 1608151895) (last-updated . 1615313013) (modules . ((lib "udelim/udelim.scrbl") (lib "udelim/main.rkt") (lib "udelim/lang/reader.rkt") (lib "udelim/defaults.rkt"))) (name . "udelim") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (reader . #t) (ring:1 . #t))) (source . "https://github.com/willghatch/racket-udelim.git") (tags . ("reader")) (versions . #hash((default . #hasheq((checksum . "58420f53c37e0bee451daa3dc5e2d72f7fc4d967") (source . "https://github.com/willghatch/racket-udelim.git") (source_url . "https://github.com/willghatch/racket-udelim.git"))))))) ("udev" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/udev.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/udev.txt"))) (checksum . "9ceb721d4d2af78a5ff99c0977e7970c46e79055") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1")) (description . "udev bindings for Racket") (implies . ()) (last-checked . 1632904758) (last-edit . 1437487719) (last-updated . 1622284040) (modules . ((lib "udev/private/ffi.rkt") (lib "udev/main.rkt"))) (name . "udev") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (linux . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-udev/master") (tags . ("ffi" "linux")) (versions . #hash((default . #hasheq((checksum . "9ceb721d4d2af78a5ff99c0977e7970c46e79055") (source . "github://github.com/mordae/racket-udev/master") (source_url . "http://github.com/mordae/racket-udev/tree/master"))))))) ("ugly-app-lib" . #hasheq((author . "alexander@knauth.org") (authors . ("alexander@knauth.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ugly-app-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ugly-app-lib.txt"))) (checksum . "86f2670f27cb7e09eb80e4494f80b54528701c7a") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1622059934) (dependencies . ("base" "fancy-app")) (description . "A Racket library that allows prefix, infix, postfix, and partially applied functions. Note: ugly in some ways so I'd recommend the simpler `fancy-app` instead") (implies . ()) (last-checked . 1632904759) (last-edit . 1622133195) (last-updated . 1622059934) (modules . ((lib "ugly-app/ugly-name.rkt") (lib "ugly-app/placeholder.rkt") (lib "ugly-app/ugly-app.rkt") (lib "ugly-app/main.rkt") (lib "ugly-app/ugly-function.rkt"))) (name . "ugly-app-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (app-syntax . #t) (author:alexander@knauth.org . #t) (ring:1 . #t) (sugar . #t))) (source . "https://github.com/AlexKnauth/ugly-app.git?path=ugly-app-lib") (tags . ("app-syntax" "sugar")) (versions . #hash((default . #hasheq((checksum . "86f2670f27cb7e09eb80e4494f80b54528701c7a") (source . "https://github.com/AlexKnauth/ugly-app.git?path=ugly-app-lib") (source_url . "https://github.com/AlexKnauth/ugly-app.git?path=ugly-app-lib"))))))) ("ulid" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "ulid" "doc/ulid@ulid/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/ulid.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/ulid.txt"))) (checksum . "2fb3dbaca00f276ac78bf93f1892140fdc60ee9a") (checksum-error . #f) (collection . "ulid") (conflicts . ()) (date-added . 1585903876) (dependencies . ("base" "racket-doc" "rackcheck" "rackunit-lib" "scribble-lib")) (description . "Universally unique lexicographically sortable identifiers.") (implies . ()) (last-checked . 1632904759) (last-edit . 1585903876) (last-updated . 1586103180) (modules . ((lib "ulid/private/base32.rkt") (lib "ulid/ulid.scrbl") (lib "ulid/private/random.rkt") (lib "ulid/main.rkt"))) (name . "ulid") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:bogdan@defn.io . #t) (ring:1 . #t) (ulid . #t) (uuid . #t))) (source . "https://github.com/Bogdanp/racket-ulid.git") (tags . ("ulid" "uuid")) (versions . #hash((default . #hasheq((checksum . "2fb3dbaca00f276ac78bf93f1892140fdc60ee9a") (source . "https://github.com/Bogdanp/racket-ulid.git") (source_url . "https://github.com/Bogdanp/racket-ulid.git"))))))) ("unb-cs2613" . #hasheq((author . "david@tethera.net") (authors . ("david@tethera.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unb-cs2613.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unb-cs2613.txt"))) (checksum . "67576e2029d4865143c458b26fbc9da78c066a66") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1595446837) (dependencies . ("base" "drracket" "drracket-plugin-lib" "frog" "explorer" "date")) (description . "Racket packages for UNB CS2613 ") (implies . ()) (last-checked . 1632904759) (last-edit . 1595446837) (last-updated . 1595447264) (modules . ()) (name . "unb-cs2613") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:david@tethera.net . #t) (ring:1 . #t))) (source . "https://pivot.cs.unb.ca/git/unb-cs2613.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "67576e2029d4865143c458b26fbc9da78c066a66") (source . "https://pivot.cs.unb.ca/git/unb-cs2613.git") (source_url . "https://pivot.cs.unb.ca/git/unb-cs2613.git"))))))) ("unb-cs4613" . #hasheq((author . "david@tethera.net") (authors . ("david@tethera.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unb-cs4613.txt") (test-failure-log . "server/built/test-fail/unb-cs4613.txt") (test-success-log . #f))) (checksum . "2822b8c4d4864c79181608ae0e73d9f04c24f43c") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1609779553) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "net-lib" "plait" "brag" "plai-dynamic")) (description . "Handin client + metapackage for UNB Fredericton CS4613") (implies . ()) (last-checked . 1632904761) (last-edit . 1609780717) (last-updated . 1610455416) (modules . ((lib "unb-cs4613/handin-multi.rkt") (lib "unb-cs4613/updater.rkt") (lib "unb-cs4613/client.rkt") (lib "unb-cs4613/client-gui.rkt") (lib "unb-cs4613/this-collection.rkt"))) (name . "unb-cs4613") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:david@tethera.net . #t) (ring:1 . #t))) (source . "https://pivot.cs.unb.ca/git/unb-cs4613.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2822b8c4d4864c79181608ae0e73d9f04c24f43c") (source . "https://pivot.cs.unb.ca/git/unb-cs4613.git") (source_url . "https://pivot.cs.unb.ca/git/unb-cs4613.git"))))))) ("unicode-properties" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "unicode" "doc/unicode@unicode-properties/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unicode-properties.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unicode-properties.txt"))) (checksum . "c72c6c7678e44257bde7a8a4973196b064a9237f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "This package provides definitions for several unicode properties, and also an auto-update mechanism that can extract additional ones.") (implies . ()) (last-checked . 1632904762) (last-edit . 1367965731) (last-updated . 1513624646) (modules . ((lib "unicode-props/derived-binary-properties.rkt") (lib "unicode-props/fn-and-ranges.rkt") (lib "unicode-props/unicode.scrbl") (lib "unicode-props/main.rkt") (lib "unicode-props/test.rkt") (lib "unicode-props/derived-core-properties.rkt") (lib "unicode-props/compute-prop.rkt"))) (name . "unicode-properties") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:clements@racket-lang.org . #t) (io . #t) (ring:1 . #t) (unicode . #t))) (source . "github://github.com/jbclements/unicode-props/master") (tags . ("io" "unicode")) (versions . #hash((default . #hasheq((checksum . "c72c6c7678e44257bde7a8a4973196b064a9237f") (source . "github://github.com/jbclements/unicode-props/master") (source_url . "http://github.com/jbclements/unicode-props/tree/master"))))))) ("unified-for" . #hasheq((author . "michaelmmacleod@gmail.com") (authors . ("michaelmmacleod@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "unified-for" "doc/unified-for@unified-for/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unified-for.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unified-for.txt"))) (checksum . "9b0e47c753dbd218b79519e101d48fe3c323497a") (checksum-error . #f) (collection . "unified-for") (conflicts . ()) (date-added . 1557471833) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "expect" "sandbox-lib")) (description . "Consolidates the various flavors of for iteration into a single unified for macro.") (implies . ()) (last-checked . 1632904762) (last-edit . 1557556851) (last-updated . 1558249727) (modules . ((lib "unified-for/private/iterator.rkt") (lib "unified-for/scribblings/unified-for.scrbl") (lib "unified-for/private/accumulator.rkt") (lib "unified-for/main.rkt") (lib "unified-for/private/for.rkt"))) (name . "unified-for") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:michaelmmacleod@gmail.com . #t) (for . #t) (loop . #t) (match . #t) (ring:1 . #t))) (source . "https://github.com/michaelmmacleod/unified-for.git") (tags . ("for" "loop" "match")) (versions . #hash((default . #hasheq((checksum . "9b0e47c753dbd218b79519e101d48fe3c323497a") (source . "https://github.com/michaelmmacleod/unified-for.git") (source_url . "https://github.com/michaelmmacleod/unified-for.git"))))))) ("unix-signals" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "unix-signals" "doc/unix-signals@unix-signals/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/unix-signals.txt") (success-log . "server/built/install/unix-signals.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unix-signals.txt"))) (checksum . "a0c50918dac6cf5df7d0789d13dac9759eab5606") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.12") "dynext-lib" "racket-doc" "scribble-lib")) (description . "Sending and handling Unix signals from Racket") (implies . ()) (last-checked . 1632904762) (last-edit . 1473801462) (last-updated . 1613689958) (modules . ((lib "unix-signals/main.rkt") (lib "unix-signals/test.rkt") (lib "unix-signals/unix-signals.scrbl") (lib "unix-signals/private/install.rkt"))) (name . "unix-signals") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t) (unix . #t))) (source . "git://github.com/tonyg/racket-unix-signals") (tags . ("unix")) (versions . #hash((default . #hasheq((checksum . "a0c50918dac6cf5df7d0789d13dac9759eab5606") (source . "git://github.com/tonyg/racket-unix-signals") (source_url . "http://github.com/tonyg/racket-unix-signals/tree/master"))))))) ("unix-socket" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "89007b9b5f2188a06ed656e0f2e4fa8d3472a085") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("unix-socket-lib" "unix-socket-doc")) (description . "Unix Domain Sockets") (implies . ("unix-socket-lib")) (last-checked . 1632904763) (last-edit . 1439924387) (last-updated . 1609729448) (modules . ()) (name . "unix-socket") (ring . 0) (search-terms . #hasheq((author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/unix-socket?path=unix-socket") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "89007b9b5f2188a06ed656e0f2e4fa8d3472a085") (source . "git://github.com/racket/unix-socket?path=unix-socket") (source_url . "http://github.com/racket/unix-socket/tree/master?path=unix-socket"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("6.2.1" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("unix-socket-doc" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "unix-socket" "doc/unix-socket@unix-socket-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "89007b9b5f2188a06ed656e0f2e4fa8d3472a085") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "net-lib" ("unix-socket-lib" #:version "1.3") "web-server-lib" "scribble-lib" "net-doc" "racket-doc" "web-server-doc")) (description . "Documentation for unix-socket") (implies . ()) (last-checked . 1632904763) (last-edit . 1439924387) (last-updated . 1609729448) (modules . ((lib "scribblings/socket/unix-socket.scrbl"))) (name . "unix-socket-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/unix-socket?path=unix-socket-doc") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "89007b9b5f2188a06ed656e0f2e4fa8d3472a085") (source . "git://github.com/racket/unix-socket?path=unix-socket-doc") (source_url . "http://github.com/racket/unix-socket/tree/master?path=unix-socket-doc"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("6.2.1" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("unix-socket-lib" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "89007b9b5f2188a06ed656e0f2e4fa8d3472a085") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "7.9.0.16") "net-lib")) (description . "Implementation (no documentation) for unix-socket") (implies . ()) (last-checked . 1632904763) (last-edit . 1439924387) (last-updated . 1609729449) (modules . ((lib "racket/private/unix-socket-ffi.rkt") (lib "racket/unix-socket-tcp-unit.rkt") (lib "racket/unix-socket.rkt"))) (name . "unix-socket-lib") (ring . 0) (search-terms . #hasheq((author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/unix-socket?path=unix-socket-lib") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "89007b9b5f2188a06ed656e0f2e4fa8d3472a085") (source . "git://github.com/racket/unix-socket?path=unix-socket-lib") (source_url . "http://github.com/racket/unix-socket/tree/master?path=unix-socket-lib"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("6.2.1" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("unix-socket-test" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "89007b9b5f2188a06ed656e0f2e4fa8d3472a085") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "net-lib" "rackunit-lib" ("unix-socket-lib" #:version "1.3"))) (description . "Tests for unix-socket") (implies . ()) (last-checked . 1632904763) (last-edit . 1439924387) (last-updated . 1609729450) (modules . ((lib "tests/unix-socket/common.rkt") (lib "tests/unix-socket/unix-socket.rkt") (lib "tests/unix-socket/unix-socket-tcp-unit.rkt"))) (name . "unix-socket-test") (ring . 0) (search-terms . #hasheq((author:ryanc@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/unix-socket?path=unix-socket-test") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "89007b9b5f2188a06ed656e0f2e4fa8d3472a085") (source . "git://github.com/racket/unix-socket?path=unix-socket-test") (source_url . "http://github.com/racket/unix-socket/tree/master?path=unix-socket-test"))) ("6.2" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("6.2.1" . #hasheq((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("unlike-assets-doc" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "unlike-assets" "doc/unlike-assets@unlike-assets-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unlike-assets-doc.txt") (test-failure-log . "server/built/test-fail/unlike-assets-doc.txt") (test-success-log . #f))) (checksum . "7fb08d6902d34399c96a325d68fd27f1ff84813b") (checksum-error . "git-checkout: no commit found matching id: 7fb08d6902d34399c96a325d6d27f1ff84813b\n  context...:\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:678:0: find-commit-as-reference\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:165:11\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/racket/collects/pkg/private/download.rkt:102:2: download!\n   /home/pkgserver/racket/collects/pkg/private/download.rkt:94:0: download-repo!\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:318:11\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:114:0: stage-package/info\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:720:0: pkg-stage\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:129:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . (multi)) (conflicts . ()) (date-added . 1581695246) (dependencies . ("base" "unlike-assets-lib" "kinda-ferpy" "graph-lib" "unlike-assets-lib" "scribble-lib" "racket-doc")) (description . "(OLD EDITION) Documentation for unlike-assets") (implies . ()) (last-checked . 1632904766) (last-edit . 1588720667) (last-updated . 1621810200) (modules . ((lib "unlike-assets/scribblings/unlike-assets-doc.scrbl") (lib "unlike-assets/scribblings/examples.scrbl") (lib "unlike-assets/scribblings/logging.scrbl") (lib "unlike-assets/scribblings/reactive.scrbl") (lib "unlike-assets/scribblings/cli.scrbl") (lib "unlike-assets/scribblings/policy.scrbl") (lib "unlike-assets/scribblings/imperative.scrbl") (lib "unlike-assets/scribblings/unlike-assets.scrbl") (lib "unlike-assets/scribblings/rebuilds.scrbl"))) (name . "unlike-assets-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:error: . #t) (:no-tag: . #t) (author:sage@sagegerard.com . #t) (ring:1 . #t))) (source . "https://github.com/zyrolasting/unlike-assets.git?path=unlike-assets-doc#7fb08d6902d34399c96a325d6d27f1ff84813b") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7fb08d6902d34399c96a325d68fd27f1ff84813b") (source . "https://github.com/zyrolasting/unlike-assets.git?path=unlike-assets-doc#7fb08d6902d34399c96a325d6d27f1ff84813b") (source_url . "https://github.com/zyrolasting/unlike-assets.git?path=unlike-assets-doc#7fb08d6902d34399c96a325d6d27f1ff84813b"))))))) ("unlike-assets-lib" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unlike-assets-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unlike-assets-lib.txt"))) (checksum . "7fb08d6902d34399c96a325d68fd27f1ff84813b") (checksum-error . "git-checkout: no commit found matching id: 7fb08d6902d34399c96a325d6d27f1ff84813b\n  context...:\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:678:0: find-commit-as-reference\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:165:11\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/racket/collects/pkg/private/download.rkt:102:2: download!\n   /home/pkgserver/racket/collects/pkg/private/download.rkt:94:0: download-repo!\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:318:11\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:114:0: stage-package/info\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:720:0: pkg-stage\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:129:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . (multi)) (conflicts . ()) (date-added . 1581695006) (dependencies . ("base" "file-watchers" "ansi-color" "graph-lib" "kinda-ferpy")) (description . "(OLD EDITION) Implementation of unlike-assets") (implies . ()) (last-checked . 1632904769) (last-edit . 1588720882) (last-updated . 1621810203) (modules . ((lib "unlike-assets/cli.rkt") (lib "unlike-assets/private/reactive/assets.rkt") (lib "unlike-assets/private/unlike-compiler.rkt") (lib "unlike-assets/reactive.rkt") (lib "unlike-assets/logging.rkt") (lib "unlike-assets/main.rkt") (lib "unlike-assets/private/assets.rkt") (lib "unlike-assets/private/reactive/system.rkt") (lib "unlike-assets/policy.rkt"))) (name . "unlike-assets-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:error: . #t) (:no-tag: . #t) (author:sage@sagegerard.com . #t) (ring:1 . #t))) (source . "https://github.com/zyrolasting/unlike-assets.git?path=unlike-assets-lib#7fb08d6902d34399c96a325d6d27f1ff84813b") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7fb08d6902d34399c96a325d68fd27f1ff84813b") (source . "https://github.com/zyrolasting/unlike-assets.git?path=unlike-assets-lib#7fb08d6902d34399c96a325d6d27f1ff84813b") (source_url . "https://github.com/zyrolasting/unlike-assets.git?path=unlike-assets-lib#7fb08d6902d34399c96a325d6d27f1ff84813b"))))))) ("unlike-assets-test" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unlike-assets-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unlike-assets-test.txt"))) (checksum . "7fb08d6902d34399c96a325d68fd27f1ff84813b") (checksum-error . "git-checkout: no commit found matching id: 7fb08d6902d34399c96a325d6d27f1ff84813b\n  context...:\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:678:0: find-commit-as-reference\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:165:11\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/racket/collects/pkg/private/download.rkt:102:2: download!\n   /home/pkgserver/racket/collects/pkg/private/download.rkt:94:0: download-repo!\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:318:11\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:114:0: stage-package/info\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:720:0: pkg-stage\n   /home/pkgserver/racket/collects/pkg/private/content.rkt:39:0: get-pkg-content\n   /home/pkgserver/racket/collects/racket/contract/private/arrow-val-first.rkt:555:3\n   /home/pkgserver/pkg-index/official/update.rkt:129:0: update-from-content\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . (multi)) (conflicts . ()) (date-added . 1581695314) (dependencies . ("base" "unlike-assets-lib" "rackunit-lib")) (description . "(OLD EDITION) Tests for unlike-assets") (implies . ()) (last-checked . 1632904772) (last-edit . 1588720632) (last-updated . 1621810205) (modules . ((lib "tests/unlike-assets/assets.rkt") (lib "tests/unlike-assets/policy.rkt") (lib "tests/unlike-assets/unlike-compiler.rkt") (lib "tests/unlike-assets/reactive.rkt"))) (name . "unlike-assets-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:error: . #t) (:no-tag: . #t) (author:sage@sagegerard.com . #t) (ring:1 . #t))) (source . "https://github.com/zyrolasting/unlike-assets.git?path=unlike-assets-test#7fb08d6902d34399c96a325d6d27f1ff84813b") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7fb08d6902d34399c96a325d68fd27f1ff84813b") (source . "https://github.com/zyrolasting/unlike-assets.git?path=unlike-assets-test#7fb08d6902d34399c96a325d6d27f1ff84813b") (source_url . "https://github.com/zyrolasting/unlike-assets.git?path=unlike-assets-test#7fb08d6902d34399c96a325d6d27f1ff84813b"))))))) ("unreachable" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/unreachable.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unreachable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unreachable.txt"))) (checksum . "a7d303d673ebb887ed49550ee27da307948cda37") (checksum-error . #f) (collection . "unreachable") (conflicts . ()) (dependencies . ("base")) (description . "Utilities for expressing supposedly unreachable code") (implies . ()) (last-checked . 1632904772) (last-edit . 1513906987) (last-updated . 1536947952) (modules . ((lib "unreachable/test.rkt") (lib "unreachable/main.rkt"))) (name . "unreachable") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (absurd . #t) (author:pcn@cs.umd.edu . #t) (case . #t) (cond . #t) (dead-code . #t) (ring:1 . #t) (unreachable . #t))) (source . "https://github.com/philnguyen/unreachable.git?path=unreachable") (tags . ("absurd" "case" "cond" "dead-code" "unreachable")) (versions . #hash((default . #hasheq((checksum . "a7d303d673ebb887ed49550ee27da307948cda37") (source . "https://github.com/philnguyen/unreachable.git?path=unreachable") (source_url . "https://github.com/philnguyen/unreachable.git?path=unreachable"))))))) ("unstable" . #hash((author . "jay@racket-lang.org samth@racket-lang.org cce@racket-lang.org ryanc@racket-lang.org") (authors . ("jay@racket-lang.org" "samth@racket-lang.org" "cce@racket-lang.org" "ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("unstable-lib" "unstable-doc")) (description . "Experimental libraries") (implies . ("unstable-lib" "unstable-doc")) (last-checked . 1632904772) (last-edit . 1445382797) (last-updated . 1571880428) (modules . ()) (name . "unstable") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:cce@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "99149bf1a6a82b2309cc04e363a87ed36972b64b") (source . "git://github.com/racket/unstable/?path=unstable") (source_url . "git://github.com/racket/unstable/?path=unstable"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("unstable-2d" . #hash((author . "robby@racket-lang.org") (authors . ("robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-2d.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-2d.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "2d-lib")) (description . "Experimental 2d syntax") (implies . ()) (last-checked . 1632904772) (last-edit . 1445382797) (last-updated . 1571880428) (modules . ((lib "unstable/2d/dir-chars.rkt") (lib "unstable/2d/cond.rkt") (lib "unstable/2d/tabular.rkt") (lib "unstable/2d/match.rkt") (lib "unstable/2d/lang/reader.rkt"))) (name . "unstable-2d") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:robby@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "b623df87d732171833103e05b3e76d3ce79f1047") (source . "git://github.com/racket/unstable-2d") (source_url . "http://github.com/racket/unstable-2d/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("unstable-contract-lib" . #hash((author . "robby@racket-lang.org ryanc@racket-lang.org") (authors . ("robby@racket-lang.org" "ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-contract-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-contract-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Experimental libraries for working with contracts") (implies . ()) (last-checked . 1632904773) (last-edit . 1445382797) (last-updated . 1587178450) (modules . ((lib "unstable/contract.rkt"))) (name . "unstable-contract-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:robby@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "198b743c39450f0340dc03a792c29794652d6e08") (source . "git://github.com/racket/unstable-contract-lib") (source_url . "http://github.com/racket/unstable-contract-lib/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("unstable-debug-lib" . #hash((author . "samth@racket-lang.org") (authors . ("samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-debug-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-debug-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.15"))) (description . "Experimental libraries for debugging") (implies . ()) (last-checked . 1632904773) (last-edit . 1445382797) (last-updated . 1571880429) (modules . ((lib "unstable/debug.rkt"))) (name . "unstable-debug-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "1511a2410d11a69b9116c5d6668869765ef58f56") (source . "git://github.com/racket/unstable-debug-lib") (source_url . "http://github.com/racket/unstable-debug-lib/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("unstable-doc" . #hash((author . "jay@racket-lang.org samth@racket-lang.org cce@racket-lang.org ryanc@racket-lang.org") (authors . ("jay@racket-lang.org" "samth@racket-lang.org" "cce@racket-lang.org" "ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "unstable" "doc/unstable@unstable-doc/index.html") ("main" "unstable-gui" "doc/unstable-gui@unstable-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-doc.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "unstable") (conflicts . ()) (dependencies . ("base" "rackunit-doc" "scheme-lib" "at-exp-lib" "compatibility-lib" "draw-lib" "gui-lib" "pict-lib" "racket-doc" "rackunit-lib" "scribble-lib" "slideshow-lib" "typed-racket-lib" "unstable-contract-lib" "unstable-debug-lib" "unstable-lib" "unstable-list-lib" "unstable-macro-testing-lib" "unstable-options-lib" "unstable-parameter-group-lib" "unstable-pretty-lib" "unstable-2d" "draw-doc" "gui-doc" "pict-doc" "scribble-doc" "slideshow-doc" "class-iop-doc" "automata-doc" "markparam-doc" "temp-c-doc" "unix-socket-doc" "2d-doc" "option-contract-doc")) (description . "documentation part of unstable") (implies . ()) (last-checked . 1632904773) (last-edit . 1445382797) (last-updated . 1571880430) (modules . ((lib "unstable/scribblings/find.scrbl") (lib "unstable/scribblings/class-iop.scrbl") (lib "unstable/scribblings/match.scrbl") (lib "unstable/scribblings/logging.scrbl") (lib "unstable/scribblings/gui/pict.scrbl") (lib "unstable/scribblings/sandbox.scrbl") (lib "unstable/scribblings/automata.scrbl") (lib "unstable/scribblings/contract.scrbl") (lib "unstable/scribblings/options.scrbl") (lib "unstable/scribblings/struct.scrbl") (lib "unstable/scribblings/custom-write.scrbl") (lib "unstable/scribblings/wrapc.scrbl") (lib "unstable/scribblings/macro-testing.scrbl") (lib "unstable/scribblings/unstable.scrbl") (lib "unstable/scribblings/string.scrbl") (lib "unstable/scribblings/gui/unstable-gui.scrbl") (lib "unstable/scribblings/gui/prefs.scrbl") (lib "unstable/scribblings/socket.scrbl") (lib "unstable/scribblings/syntax.scrbl") (lib "unstable/scribblings/pretty.scrbl") (lib "unstable/scribblings/temp-c.scrbl") (lib "unstable/scribblings/utils.rkt") (lib "unstable/scribblings/function.scrbl") (lib "unstable/scribblings/open-place.scrbl") (lib "unstable/scribblings/markparam.scrbl") (lib "unstable/scribblings/error.scrbl") (lib "unstable/scribblings/recontract.scrbl") (lib "unstable/scribblings/lazy-require.scrbl") (lib "unstable/scribblings/hash.scrbl") (lib "unstable/scribblings/parameter-group.scrbl") (lib "unstable/scribblings/debug.scrbl") (lib "unstable/scribblings/sequence.scrbl") (lib "unstable/scribblings/future.scrbl") (lib "unstable/scribblings/gui/scribble.scrbl") (lib "unstable/scribblings/2d.scrbl") (lib "unstable/scribblings/gui/notify.scrbl") (lib "unstable/scribblings/gui/snip.scrbl") (lib "unstable/scribblings/define.scrbl") (lib "unstable/scribblings/gui/slideshow.scrbl") (lib "unstable/scribblings/list.scrbl") (lib "unstable/scribblings/bytes.scrbl"))) (name . "unstable-doc") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:cce@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "99149bf1a6a82b2309cc04e363a87ed36972b64b") (source . "git://github.com/racket/unstable/?path=unstable-doc") (source_url . "git://github.com/racket/unstable/?path=unstable-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("unstable-flonum-doc" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "unstable-flonum" "doc/unstable-flonum@unstable-flonum-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-flonum-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-flonum-doc.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "unstable") (conflicts . ()) (dependencies . ("base" "scribble-lib" "unstable" "unstable-flonum-lib" "plot" "math-doc" "racket-doc")) (description . "Experimental libraries for flonum computations (documentation)") (implies . ()) (last-checked . 1632904773) (last-edit . 1445382797) (last-updated . 1571880430) (modules . ((lib "unstable/unstable-flonum.scrbl"))) (name . "unstable-flonum-doc") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ntoronto@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "e7e1ed3e9c2f3448e1eac2084e2f2f6c4d126000") (source . "git://github.com/racket/unstable-flonum/?path=unstable-flonum-doc") (source_url . "git://github.com/racket/unstable-flonum/?path=unstable-flonum-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("unstable-flonum-lib" . #hash((author . "ntoronto@racket-lang.org") (authors . ("ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-flonum-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-flonum-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Experimental libraries for flonum computations") (implies . ()) (last-checked . 1632904774) (last-edit . 1445382797) (last-updated . 1571880431) (modules . ((lib "unstable/flonum.rkt"))) (name . "unstable-flonum-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:ntoronto@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "e7e1ed3e9c2f3448e1eac2084e2f2f6c4d126000") (source . "git://github.com/racket/unstable-flonum/?path=unstable-flonum-lib") (source_url . "git://github.com/racket/unstable-flonum/?path=unstable-flonum-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("unstable-latent-contract-lib" . #hash((author . "mflatt@racket-lang.org ntoronto@racket-lang.org") (authors . ("mflatt@racket-lang.org" "ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-latent-contract-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-latent-contract-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" ("images-lib" #:version "1.2"))) (description . "Experimental libraries for contracts at definitions") (implies . ()) (last-checked . 1632904774) (last-edit . 1445382797) (last-updated . 1571880431) (modules . ((lib "unstable/latent-contract/defthing.rkt") (lib "unstable/latent-contract/serialize-syntax.rkt") (lib "unstable/latent-contract.rkt"))) (name . "unstable-latent-contract-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (author:ntoronto@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "9df3d23294e7ae9ac06fe613c383e1f04e56f3ae") (source . "git://github.com/racket/unstable-latent-contract-lib") (source_url . "http://github.com/racket/unstable-latent-contract-lib/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("unstable-lib" . #hash((author . "jay@racket-lang.org samth@racket-lang.org cce@racket-lang.org ryanc@racket-lang.org") (authors . ("jay@racket-lang.org" "samth@racket-lang.org" "cce@racket-lang.org" "ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "unstable") (conflicts . ()) (dependencies . ("automata-lib" ("base" #:version "6.2.900.6") ("draw-lib" #:version "1.7") ("gui-lib" #:version "1.18") "markparam-lib" ("pict-lib" #:version "1.4") "ppict" "scribble-lib" ("slideshow-lib" #:version "1.2") "temp-c-lib" "unstable-macro-testing-lib" "unix-socket-lib" "staged-slide" "rackunit-lib")) (description . "implementation (no documentation) part of unstable") (implies . ("unstable-macro-testing-lib")) (last-checked . 1632904774) (last-edit . 1445382797) (last-updated . 1627926336) (modules . ((lib "unstable/gui/notify.rkt") (lib "unstable/automata/re-ext.rkt") (lib "unstable/gui/slideshow.rkt") (lib "unstable/wrapc.rkt") (lib "unstable/gui/scribble.rkt") (lib "unstable/gui/snip.rkt") (lib "unstable/logging.rkt") (lib "unstable/find.rkt") (lib "unstable/string.rkt") (lib "unstable/gui/ppict.rkt") (lib "unstable/syntax.rkt") (lib "unstable/match.rkt") (lib "unstable/automata/nfa.rkt") (lib "unstable/lazy-require.rkt") (lib "unstable/gui/pslide.rkt") (lib "unstable/future.rkt") (lib "unstable/define.rkt") (lib "unstable/automata/re.rkt") (lib "unstable/temp-c/dsl.rkt") (lib "unstable/arrow.rkt") (lib "unstable/automata/machine.rkt") (lib "unstable/socket.rkt") (lib "unstable/automata/nfa-ep.rkt") (lib "unstable/gui/pict/plt-logo.rkt") (lib "unstable/gui/prefs.rkt") (lib "unstable/custom-write.rkt") (lib "unstable/sequence.rkt") (lib "unstable/time.rkt") (lib "unstable/gui/pict/align.rkt") (lib "unstable/error.rkt") (lib "unstable/struct.rkt") (lib "unstable/markparam.rkt") (lib "unstable/recontract.rkt") (lib "unstable/gui/pict.rkt") (lib "unstable/open-place.rkt") (lib "unstable/sandbox.rkt") (lib "unstable/automata/dfa.rkt") (lib "unstable/temp-c/monitor.rkt"))) (name . "unstable-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:cce@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "99149bf1a6a82b2309cc04e363a87ed36972b64b") (source . "git://github.com/racket/unstable/?path=unstable-lib") (source_url . "git://github.com/racket/unstable/?path=unstable-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("unstable-list-lib" . #hash((author . "ryanc@racket-lang.org samth@racket-lang.org") (authors . ("ryanc@racket-lang.org" "samth@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-list-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-list-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "class-iop-lib")) (description . "Experimental libraries for list operations") (implies . ()) (last-checked . 1632904774) (last-edit . 1445382797) (last-updated . 1571880433) (modules . ((lib "unstable/class-iop.rkt") (lib "unstable/function.rkt") (lib "unstable/bytes.rkt") (lib "unstable/hash.rkt") (lib "unstable/list.rkt"))) (name . "unstable-list-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "0b3e390a25d5347c3e3b6e08b605b2865f0fae10") (source . "git://github.com/racket/unstable-list-lib") (source_url . "http://github.com/racket/unstable-list-lib/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("unstable-macro-testing-lib" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-macro-testing-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-macro-testing-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" #:version "6.2.900.6"))) (description . "Experimental libraries for testing macros") (implies . ()) (last-checked . 1632904775) (last-edit . 1445382797) (last-updated . 1571880433) (modules . ((lib "unstable/macro-testing.rkt"))) (name . "unstable-macro-testing-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "65b4dcc6d6d4aa6a1a29cb3fc039fb4a06968a45") (source . "git://github.com/racket/unstable-macro-testing-lib") (source_url . "http://github.com/racket/unstable-macro-testing-lib/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("unstable-options-lib" . #hash((author . "chrdimo@racket-lang.org robby@racket-lang.org") (authors . ("chrdimo@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-options-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-options-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "option-contract-lib")) (description . "Experimental libraries for option contracts") (implies . ()) (last-checked . 1632904775) (last-edit . 1445382797) (last-updated . 1571880434) (modules . ((lib "unstable/options.rkt"))) (name . "unstable-options-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:chrdimo@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "5b9ff5e62319ddb929235c5ddcd4cee350ee9a9b") (source . "git://github.com/racket/unstable-options-lib") (source_url . "http://github.com/racket/unstable-options-lib/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("unstable-parameter-group-lib" . #hash((author . "mflatt@racket-lang.org ntoronto@racket-lang.org") (authors . ("mflatt@racket-lang.org" "ntoronto@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-parameter-group-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-parameter-group-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" ("images-lib" #:version "1.2"))) (description . "Experimental libraries for parameter groups") (implies . ()) (last-checked . 1632904775) (last-edit . 1445382797) (last-updated . 1571880434) (modules . ((lib "unstable/parameter-group.rkt"))) (name . "unstable-parameter-group-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@racket-lang.org . #t) (author:ntoronto@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "1906272f807c12a3d7e2a1c430c5b5745c2de6a4") (source . "git://github.com/racket/unstable-parameter-group-lib") (source_url . "http://github.com/racket/unstable-parameter-group-lib/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("unstable-pretty-lib" . #hash((author . "cce@racket-lang.org") (authors . ("cce@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-pretty-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-pretty-lib.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Experimental libraries for pretty printing") (implies . ()) (last-checked . 1632904775) (last-edit . 1445382797) (last-updated . 1571880435) (modules . ((lib "unstable/pretty.rkt"))) (name . "unstable-pretty-lib") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:cce@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "d420f822301174b1931c8b43d2131924fc75565f") (source . "git://github.com/racket/unstable-pretty-lib") (source_url . "http://github.com/racket/unstable-pretty-lib/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("unstable-redex" . #hash((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "unstable-redex" "doc/unstable-redex@unstable-redex/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-redex.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/unstable-redex.txt"))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . "unstable") (conflicts . ()) (dependencies . ("base" "pict-lib" "redex-lib" "redex-pict-lib" "scribble-lib" "pict-doc" "redex-doc" "racket-doc")) (description . "Experimental libraries for typesetting PLT Redex models") (implies . ()) (last-checked . 1632904776) (last-edit . 1445382797) (last-updated . 1571880435) (modules . ((lib "unstable/gui/redex.rkt") (lib "unstable/gui/unstable-redex.scrbl"))) (name . "unstable-redex") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "c8fd60d300039f1d1a5de82683746223945d651c") (source . "git://github.com/racket/unstable-redex") (source_url . "http://github.com/racket/unstable-redex/tree/master"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("unstable-test" . #hash((author . "jay@racket-lang.org samth@racket-lang.org cce@racket-lang.org ryanc@racket-lang.org robby@racket-lang.org") (authors . ("jay@racket-lang.org" "samth@racket-lang.org" "cce@racket-lang.org" "ryanc@racket-lang.org" "robby@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/unstable-test.txt") (test-failure-log . "server/built/test-fail/unstable-test.txt") (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-index" "scheme-lib" "at-exp-lib" "compatibility-lib" "eli-tester" "gui-lib" "planet-lib" "racket-test" "rackunit-lib" "srfi-lib" "syntax-color-lib" "typed-racket-lib" "unstable-contract-lib" "unstable-debug-lib" "unstable-lib" "unstable-list-lib" "unstable-options-lib" "unstable-parameter-group-lib" "unstable-2d")) (description . "tests for unstable") (implies . ()) (last-checked . 1632904776) (last-edit . 1445382797) (last-updated . 1627926337) (modules . ((lib "tests/test-docs-complete.rkt") (lib "tests/unstable/sequence.rkt") (lib "tests/unstable/debug.rkt") (lib "tests/unstable/planet-syntax.rkt") (lib "tests/unstable/logging.rkt") (lib "tests/unstable/match.rkt") (lib "tests/unstable/set.rkt") (lib "tests/unstable/helpers.rkt") (lib "tests/unstable/parameter-group.rkt") (lib "tests/unstable/syntax.rkt") (lib "tests/unstable/list.rkt") (lib "tests/unstable/contract.rkt"))) (name . "unstable-test") (ring . 0) (search-terms . #hasheq((:build-success: . #t) (author:cce@racket-lang.org . #t) (author:jay@racket-lang.org . #t) (author:robby@racket-lang.org . #t) (author:ryanc@racket-lang.org . #t) (author:samth@racket-lang.org . #t) (ring:0 . #t) (unstable . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("unstable")) (versions . #hash((default . #hasheq((checksum . "99149bf1a6a82b2309cc04e363a87ed36972b64b") (source . "git://github.com/racket/unstable/?path=unstable-test") (source_url . "git://github.com/racket/unstable/?path=unstable-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("uri" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "uri" "doc/uri@uri/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/uri.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/uri.txt"))) (checksum . "79934c1432baad34a3272c0429caa4b695c4b996") (checksum-error . #f) (collection . "uri") (conflicts . ()) (dependencies . ("string-util" "opt" "typed-racket-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "URI and URL api in Typed Racket.") (implies . ()) (last-checked . 1632904776) (last-edit . 1528474725) (last-updated . 1620470330) (modules . ((lib "uri/url/urlchar.rkt") (lib "uri/url/types.rkt") (lib "uri/url/qparams.rkt") (lib "uri/scribblings/uri.scrbl") (lib "uri/uri/parse-util.rkt") (lib "uri/uri/parse.rkt") (lib "uri/uri/types.rkt") (lib "uri/uri/urichar.rkt") (lib "uri/url.rkt") (lib "uri/uri/show.rkt") (lib "uri/url/util.rkt") (lib "uri/url/parse.rkt") (lib "uri/url/show.rkt") (lib "uri/uri.rkt"))) (name . "uri") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (ring:1 . #t) (uri . #t) (url . #t))) (source . "https://gitlab.com/RayRacine/uri.git") (tags . ("uri" "url")) (versions . #hash((default . #hasheq((checksum . "79934c1432baad34a3272c0429caa4b695c4b996") (source . "https://gitlab.com/RayRacine/uri.git") (source_url . "https://gitlab.com/RayRacine/uri.git"))))))) ("uri-old" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "uri-old" "doc/uri-old@uri-old/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/uri-old.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/uri-old.txt"))) (checksum . "27851ba27c8bf7770d2c308d403a85d179bc62b1") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "overeasy" "racket-doc" "scribble-lib")) (description . "Web URI and URL") (implies . ()) (last-checked . 1632904776) (last-edit . 1457323021) (last-updated . 1612483202) (modules . ((lib "uri-old/main.rkt") (lib "uri-old/uri-old.scrbl"))) (name . "uri-old") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (ring:1 . #t) (web . #t))) (source . "http://www.neilvandyke.org/racket/uri-old.zip") (tags . ("web")) (versions . #hash((default . #hasheq((checksum . "27851ba27c8bf7770d2c308d403a85d179bc62b1") (source . "http://www.neilvandyke.org/racket/uri-old.zip") (source_url . "http://www.neilvandyke.org/racket/uri-old.zip"))))))) ("uri-template" . #hasheq((author . "jesse@serverracket.com jesse@lisp.sh") (authors . ("jesse@serverracket.com" "jesse@lisp.sh")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "uri-template" "doc/uri-template@uri-template/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/uri-template.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/uri-template.txt"))) (checksum . "6fe4420e3a55da6ae02df453a142b96ef3b3b4ea") (checksum-error . #f) (collection . "uri-template") (conflicts . ()) (date-added . 1607664731) (dependencies . ("base" "brag" "beautiful-racket-lib" "br-parser-tools-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Implementation of RFC 6570 (URI Template).") (implies . ()) (last-checked . 1632904778) (last-edit . 1607664731) (last-updated . 1530654369) (modules . ((lib "uri-template/main.rkt") (lib "uri-template/scribblings/library.scrbl") (lib "uri-template/assignment.rkt") (lib "uri-template/match.rkt") (lib "uri-template/value.rkt") (lib "uri-template/template.rkt") (lib "uri-template/variable.rkt") (lib "uri-template/parse.rkt") (lib "uri-template/util.rkt") (lib "uri-template/template-lexer.rkt") (lib "uri-template/scribblings/uri-template.scrbl") (lib "uri-template/expand.rkt"))) (name . "uri-template") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jesse@lisp.sh . #t) (author:jesse@serverracket.com . #t) (ring:1 . #t) (template . #t))) (source . "https://github.com/jessealama/uri-template.git") (tags . ("template")) (versions . #hash((default . #hasheq((checksum . "6fe4420e3a55da6ae02df453a142b96ef3b3b4ea") (source . "https://github.com/jessealama/uri-template.git") (source_url . "https://github.com/jessealama/uri-template.git"))))))) ("urlang" . #hasheq((author . "jensaxel@soegaard.net") (authors . ("jensaxel@soegaard.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/urlang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/urlang.txt"))) (checksum . "086622e2306e72731016c7108aca3328e5082aee") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "html-parsing" "html-writing" "nanopass" "net-lib" "rackunit-lib" "scribble-html-lib" "scribble-text-lib" "srfi-lite-lib" "web-server-lib" "base" "nanopass" "at-exp-lib" "rackunit-lib" "scribble-lib" "racket-doc" "html-writing" "html-parsing")) (description . "Write JavaScript with Racket syntax. Bonus: Use Racket to define macros for JavaScript constructs.") (implies . ()) (last-checked . 1632904778) (last-edit . 1457827621) (last-updated . 1601394521) (modules . ((lib "urlang/html/all.rkt") (lib "compiler-rjs/runtime.rkt") (lib "urlang/html/to-at-exp.rkt") (lib "compiler-rjs/htdp/colors.rkt") (lib "urlang/tests/test-const-and-let.rkt") (lib "urlang-examples/parabola/parabola.rkt") (lib "urlang-examples/demo-fact.rkt") (lib "urlang-test/test-extra.rkt") (lib "urlang/tests/test-async-and-await.rkt") (lib "compiler-test/test-suite-compiler.rkt") (lib "urlang/react/urx.rkt") (lib "urlang/tests/test-extra.rkt") (lib "compiler-rjs/compiler.rkt") (lib "urlang/tests/test-new-expressions.rkt") (lib "urlang-examples/quiz/quiz.rkt") (lib "urlang/globals.rkt") (lib "compiler-rjs/htdp/ffi.rkt") (lib "urlang-examples/raphael/browser.rkt") (lib "urlang-examples/react/urx.rkt") (lib "urlang-examples/ractive/ractive-original.rkt") (lib "urlang/html.rkt") (lib "compiler-rjs/compiler2.rkt") (lib "compiler-rjs/compiler3.rkt") (lib "urlang/symbol-table.rkt") (lib "urlang/tests/test-for.rkt") (lib "urlang/extra.rkt") (lib "urlang/tests/test-operators.rkt") (lib "urlang-examples/ractive/ractive.rkt") (lib "urlang-examples/space-invaders/space-invaders.rkt") (lib "urlang-test/urlang-tests.rkt") (lib "urlang/html/tag-comparison.rkt") (lib "urlang/html/at-html.rkt") (lib "urlang/for.rkt") (lib "urlang-examples/ractive/ractive-bootstrap-example.rkt") (lib "urlang/main.rkt"))) (name . "urlang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jensaxel@soegaard.net . #t) (javascript . #t) (ring:1 . #t) (web . #t))) (source . "git://github.com/soegaard/urlang") (tags . ("javascript" "web")) (versions . #hash((default . #hasheq((checksum . "086622e2306e72731016c7108aca3328e5082aee") (source . "git://github.com/soegaard/urlang") (source_url . "http://github.com/soegaard/urlang/tree/master"))))))) ("uu-cs3520" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/uu-cs3520.txt") (test-failure-log . "server/built/test-fail/uu-cs3520.txt") (test-success-log . #f))) (checksum . "b0dfad48eab5d41706b6016bdfc6b9acafe46093") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "net-lib" "plait")) (description . "Utah CS 3520 homework submission plugin for DrRacket") (implies . ()) (last-checked . 1632904778) (last-edit . 1533332967) (last-updated . 1533411971) (modules . ((lib "uu-cs3520/client.rkt") (lib "uu-cs3520/updater.rkt") (lib "uu-cs3520/client-gui.rkt") (lib "uu-cs3520/this-collection.rkt") (lib "uu-cs3520/handin-multi.rkt"))) (name . "uu-cs3520") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:mflatt@cs.utah.edu . #t) (course . #t) (ring:1 . #t))) (source . "https://github.com/mflatt/uu-cs3520.git") (tags . ("course")) (versions . #hash((default . #hasheq((checksum . "b0dfad48eab5d41706b6016bdfc6b9acafe46093") (source . "https://github.com/mflatt/uu-cs3520.git") (source_url . "https://github.com/mflatt/uu-cs3520.git"))))))) ("uu-cs5510" . #hasheq((author . "mflatt@cs.utah.edu") (authors . ("mflatt@cs.utah.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/uu-cs5510.txt") (test-failure-log . "server/built/test-fail/uu-cs5510.txt") (test-success-log . #f))) (checksum . "d6736f807b31f637e141ae97d28d65e8e10465aa") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "drracket" "drracket-plugin-lib" "gui-lib" "net-lib" ("plai-typed" #:version "1.2") "plai-typed-s-exp-match" "plai-lazy")) (description . "Utah CS 5510 homework submission plugin for DrRacket") (implies . ()) (last-checked . 1632904779) (last-edit . 1438618864) (last-updated . 1502816517) (modules . ((lib "uu-cs5510/handin-multi.rkt") (lib "uu-cs5510/client-gui.rkt") (lib "uu-cs5510/this-collection.rkt") (lib "uu-cs5510/client.rkt") (lib "uu-cs5510/updater.rkt"))) (name . "uu-cs5510") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mflatt@cs.utah.edu . #t) (ring:1 . #t))) (source . "git://github.com/mflatt/uu-cs5510") (tags . ()) (versions . #hash((default . #hasheq((checksum . "d6736f807b31f637e141ae97d28d65e8e10465aa") (source . "git://github.com/mflatt/uu-cs5510") (source_url . "http://github.com/mflatt/uu-cs5510/tree/master"))))))) ("uuid" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "uuid" "doc/uuid@uuid/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/uuid.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/uuid.txt"))) (checksum . "0636572f74128c5819dd3e6a1dcccfdf20a1e471") (checksum-error . #f) (collection . "uuid") (conflicts . ()) (date-added . 1582083018) (dependencies . (("base" #:version "7.6") "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Generate cryptographically-random UUIDs in pure Racket") (implies . ()) (last-checked . 1632904779) (last-edit . 1582083269) (last-updated . 1622183443) (modules . ((lib "uuid/main.rkt") (lib "uuid/scribblings/uuid.scrbl"))) (name . "uuid") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:philip@philipmcgrath.com . #t) (ring:1 . #t) (util . #t) (utility . #t))) (source . "https://github.com/LiberalArtist/uuid.git") (tags . ("util" "utility")) (versions . #hash((default . #hasheq((checksum . "0636572f74128c5819dd3e6a1dcccfdf20a1e471") (source . "https://github.com/LiberalArtist/uuid.git") (source_url . "https://github.com/LiberalArtist/uuid.git"))) ("6.6" . #hasheq((checksum . "a1140f3ae0a34a136b553145235a18ef66b79076") (source . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6") (source_url . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6"))) ("6.7" . #hasheq((checksum . "a1140f3ae0a34a136b553145235a18ef66b79076") (source . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6") (source_url . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6"))) ("6.4" . #hasheq((checksum . "a1140f3ae0a34a136b553145235a18ef66b79076") (source . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6") (source_url . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6"))) ("6.5" . #hasheq((checksum . "a1140f3ae0a34a136b553145235a18ef66b79076") (source . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6") (source_url . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6"))) ("6.8" . #hasheq((checksum . "a1140f3ae0a34a136b553145235a18ef66b79076") (source . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6") (source_url . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6"))) ("6.9" . #hasheq((checksum . "a1140f3ae0a34a136b553145235a18ef66b79076") (source . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6") (source_url . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6"))) ("6.12" . #hasheq((checksum . "a1140f3ae0a34a136b553145235a18ef66b79076") (source . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6") (source_url . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6"))) ("6.11" . #hasheq((checksum . "a1140f3ae0a34a136b553145235a18ef66b79076") (source . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6") (source_url . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6"))) ("6.10" . #hasheq((checksum . "a1140f3ae0a34a136b553145235a18ef66b79076") (source . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6") (source_url . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6"))) ("7.1" . #hasheq((checksum . "a1140f3ae0a34a136b553145235a18ef66b79076") (source . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6") (source_url . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6"))) ("7.2" . #hasheq((checksum . "a1140f3ae0a34a136b553145235a18ef66b79076") (source . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6") (source_url . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6"))) ("7.0" . #hasheq((checksum . "a1140f3ae0a34a136b553145235a18ef66b79076") (source . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6") (source_url . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6"))) ("7.5" . #hasheq((checksum . "a1140f3ae0a34a136b553145235a18ef66b79076") (source . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6") (source_url . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6"))) ("7.3" . #hasheq((checksum . "a1140f3ae0a34a136b553145235a18ef66b79076") (source . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6") (source_url . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6"))) ("7.4" . #hasheq((checksum . "a1140f3ae0a34a136b553145235a18ef66b79076") (source . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6") (source_url . "https://github.com/LiberalArtist/uuid.git#before-racket-v7.6"))))))) ("uwaterloo-racket-tools" . #hasheq((author . "djholtby@uwaterloo.ca") (authors . ("djholtby@uwaterloo.ca")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/uwaterloo-racket-tools.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/uwaterloo-racket-tools.txt"))) (checksum . "affae0e2e5317ed2bde06ba83cb83e833f7b8106") (checksum-error . #f) (collection . "uwaterloo-racket-tools") (conflicts . ()) (date-added . 1605545635) (dependencies . ("base" ("htdp-trace" #:version "1.1") "graphic-block")) (description . "Metapackage to install libraries and plugins used for University of Waterloo first year CS courses") (implies . ()) (last-checked . 1632904783) (last-edit . 1631541065) (last-updated . 1631288311) (modules . ()) (name . "uwaterloo-racket-tools") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:djholtby@uwaterloo.ca . #t) (ring:1 . #t) (uwaterloo . #t))) (source . "https://git.uwaterloo.ca/djholtby/uwaterloo-racket.git?path=uwaterloo-racket-tools") (tags . ("uwaterloo")) (versions . #hash((default . #hasheq((checksum . "affae0e2e5317ed2bde06ba83cb83e833f7b8106") (source . "https://git.uwaterloo.ca/djholtby/uwaterloo-racket.git?path=uwaterloo-racket-tools") (source_url . "https://git.uwaterloo.ca/djholtby/uwaterloo-racket.git?path=uwaterloo-racket-tools"))))))) ("value-evt" . #hasheq((author . "david.storrs@gmail.com") (authors . ("david.storrs@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "value-evt" "doc/value-evt@value-evt/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/value-evt.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/value-evt.txt"))) (checksum . "10c3b0cc46f7fface88d2609c6de29ed5cea5767") (checksum-error . #f) (collection . "value-evt") (conflicts . ()) (date-added . 1617292862) (dependencies . ("base" "scribble-lib" "sandbox-lib" "racket-doc" "rackunit-lib")) (description . "Allows syncing on arbitrary values.  Events are unchanged, procedures sync to their return value unless told not to, lists sync recursively unless told not to, all other values sync to themselves.\r\n") (implies . ()) (last-checked . 1632904783) (last-edit . 1617292862) (last-updated . 1617307620) (modules . ((lib "value-evt/main.rkt") (lib "value-evt/scribblings/value-evt.scrbl"))) (name . "value-evt") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david.storrs@gmail.com . #t) (ring:1 . #t) (sync . #t))) (source . "https://github.com/dstorrs/value-evt.git") (tags . ("sync")) (versions . #hash((default . #hasheq((checksum . "10c3b0cc46f7fface88d2609c6de29ed5cea5767") (source . "https://github.com/dstorrs/value-evt.git") (source_url . "https://github.com/dstorrs/value-evt.git"))))))) ("values" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "values" "doc/values@values/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/values.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/values.txt"))) (checksum . "beec5757368e9bf64a42c7b0f5e5a0fa49f622c5") (checksum-error . #f) (collection . "values") (conflicts . ()) (date-added . 1599239917) (dependencies . ("base" "racket-doc" "rackunit-lib" "sandbox-lib" "scribble-lib")) (description . "functional multi-valued computation") (implies . ()) (last-checked . 1632904783) (last-edit . 1599440493) (last-updated . 1599245830) (modules . ((lib "values/scribblings/values-includes.rkt") (lib "values/scribblings/values.scrbl") (lib "values/main.rkt"))) (name . "values") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:dedbox@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-values.git#main") (tags . ()) (versions . #hash((default . #hasheq((checksum . "beec5757368e9bf64a42c7b0f5e5a0fa49f622c5") (source . "https://github.com/dedbox/racket-values.git#main") (source_url . "https://github.com/dedbox/racket-values.git#main"))))))) ("values-plus" . #hasheq((author . "mflatt@cs.utah.edu jay@racket-lang.org") (authors . ("mflatt@cs.utah.edu" "jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "values+" "doc/values+@values-plus/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/values-plus.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/values-plus.txt"))) (checksum . "75df2e111928317ff61e9b82c2aaac664ddd0d6b") (checksum-error . #f) (collection . "values+") (conflicts . ()) (dependencies . ("base" "eli-tester" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "") (implies . ()) (last-checked . 1632904784) (last-edit . 1461964065) (last-updated . 1502816517) (modules . ((lib "values+/main.rkt") (lib "values+/values+.scrbl"))) (name . "values-plus") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (:no-tag: . #t) (author:jay@racket-lang.org . #t) (author:mflatt@cs.utah.edu . #t) (ring:1 . #t))) (source . "git://github.com/mflatt/values-plus") (tags . ()) (versions . #hash((default . #hasheq((checksum . "75df2e111928317ff61e9b82c2aaac664ddd0d6b") (source . "git://github.com/mflatt/values-plus") (source_url . "http://github.com/mflatt/values-plus/tree/master"))))))) ("vector-struct" . #hasheq((author . "lexi.lambda@gmail.com") (authors . ("lexi.lambda@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "vector-struct" "doc/vector-struct@vector-struct/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/vector-struct.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/vector-struct.txt"))) (checksum . "f5137a445b567a213f20d9c35c60cea88f61c7b1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "racket-doc" "scribble-lib")) (description . "A simple abstraction to use vectors like structs for performance") (implies . ()) (last-checked . 1632904784) (last-edit . 1421217111) (last-updated . 1502816518) (modules . ((lib "typed/vector-struct.rkt") (lib "vector-struct/main.rkt") (lib "vector-struct/scribblings/vector-struct.scrbl") (lib "typed/scribblings/vector-struct.scrbl"))) (name . "vector-struct") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:lexi.lambda@gmail.com . #t) (deprecated . #t) (performance . #t) (ring:1 . #t))) (source . "git://github.com/lexi-lambda/racket-vector-struct") (tags . ("deprecated" "performance")) (versions . #hash((default . #hasheq((checksum . "f5137a445b567a213f20d9c35c60cea88f61c7b1") (source . "git://github.com/lexi-lambda/racket-vector-struct") (source_url . "http://github.com/lexi-lambda/racket-vector-struct/tree/master"))))))) ("vela" . #hasheq((author . "heizai3@gmail.com") (authors . ("heizai3@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/vela.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/vela.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/vela.txt"))) (checksum . "5998a2cf7101a9b98d91fce11c4c1d86f0f5a274") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556548516) (dependencies . ("base" "vela-lib" "vela-docs")) (description . "Simple web framework to build RESTful app in Racket. ") (implies . ("vela-lib" "vela-docs")) (last-checked . 1632904784) (last-edit . 1586849938) (last-updated . 1589782038) (modules . ()) (name . "vela") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:heizai3@gmail.com . #t) (framework . #t) (restful . #t) (ring:1 . #t) (web . #t))) (source . "https://github.com/nuty/vela.git?path=vela") (tags . ("framework" "restful" "web")) (versions . #hash((default . #hasheq((checksum . "5998a2cf7101a9b98d91fce11c4c1d86f0f5a274") (source . "https://github.com/nuty/vela.git?path=vela") (source_url . "https://github.com/nuty/vela.git?path=vela"))))))) ("vela-doc" . #hasheq((author . "") (authors . ()) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/vela-doc.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "pkg: Package vela-doc is missing a required field: 'source\n  context...:\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ()) (implies . ()) (last-checked . 1632904784) (last-edit . 1632906423) (last-updated . 1621810217) (modules . ()) (name . "vela-doc") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-desc: . #t) (:no-tag: . #t) (ring:1 . #t))) (source . "") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "") (source_url . ""))))))) ("vela-docs" . #hasheq((author . "heizai3@gmail.com") (authors . ("heizai3@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/vela-docs.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/vela-docs.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/vela-docs.txt"))) (checksum . "5998a2cf7101a9b98d91fce11c4c1d86f0f5a274") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1586590017) (dependencies . ("base" "base" "racket-doc" "data-doc" "data-lib" "vela-lib" "scribble-lib" "sandbox-lib")) (description . "vela docs") (implies . ()) (last-checked . 1632904784) (last-edit . 1586783332) (last-updated . 1589782038) (modules . ((lib "vela/handler.scrbl") (lib "vela/app.scrbl") (lib "vela/vela.scrbl") (lib "vela/response.scrbl") (lib "vela/url.scrbl") (lib "vela/middleware.scrbl"))) (name . "vela-docs") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:heizai3@gmail.com . #t) (ring:1 . #t) (vela . #t))) (source . "https://github.com/nuty/vela.git?path=vela-doc") (tags . ("vela")) (versions . #hash((default . #hasheq((checksum . "5998a2cf7101a9b98d91fce11c4c1d86f0f5a274") (source . "https://github.com/nuty/vela.git?path=vela-doc") (source_url . "https://github.com/nuty/vela.git?path=vela-doc"))))))) ("vela-lib" . #hasheq((author . "heizai3@gmail.com") (authors . ("heizai3@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/vela-lib.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/vela-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/vela-lib.txt"))) (checksum . "5998a2cf7101a9b98d91fce11c4c1d86f0f5a274") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1582389644) (dependencies . ("web-server")) (description . "vela-lib") (implies . ()) (last-checked . 1632904785) (last-edit . 1586852210) (last-updated . 1589782039) (modules . ((lib "vela/routes.rkt") (lib "vela/meta.rkt") (lib "vela/params.rkt") (lib "vela/context.rkt") (lib "vela/main.rkt") (lib "vela/dispatcher.rkt") (lib "vela/app.rkt"))) (name . "vela-lib") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:heizai3@gmail.com . #t) (lib . #t) (ring:1 . #t))) (source . "https://github.com/nuty/vela.git?path=vela-lib") (tags . ("lib")) (versions . #hash((default . #hasheq((checksum . "5998a2cf7101a9b98d91fce11c4c1d86f0f5a274") (source . "https://github.com/nuty/vela.git?path=vela-lib") (source_url . "https://github.com/nuty/vela.git?path=vela-lib"))))))) ("version-case" . #hasheq((author . "samth@racket-lang.org dyoo@hashcollision.org") (authors . ("samth@racket-lang.org" "dyoo@hashcollision.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "version-case" "doc/version-case@version-case/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/version-case.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/version-case.txt"))) (checksum . "7614b4a255de110632c12e9c1f3e4976d7e78d22") (checksum-error . #f) (collection . "version-case") (conflicts . ()) (dependencies . ("base" "compatibility-lib" "drracket-plugin-lib" "gui-lib" "scheme-lib" "srfi-lib" "srfi-lite-lib" "racket-doc" "scribble-lib")) (description . "Conditional behavior based on the version of Racket") (implies . ()) (last-checked . 1632904785) (last-edit . 1456936264) (last-updated . 1625604003) (modules . ((lib "version-case/private/new-version-case.rkt") (lib "version-case/version-case.scrbl") (lib "version-case/test-version-case.rkt") (lib "version-case/version-misc.rkt") (lib "version-case/version-case.rkt") (lib "version-case/main.rkt") (lib "version-case/private/old-version-case.rkt"))) (name . "version-case") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:dyoo@hashcollision.org . #t) (author:samth@racket-lang.org . #t) (ring:1 . #t))) (source . "git://github.com/samth/version-case") (tags . ()) (versions . #hash((default . #hasheq((checksum . "7614b4a255de110632c12e9c1f3e4976d7e78d22") (source . "git://github.com/samth/version-case") (source_url . "http://github.com/samth/version-case/tree/master"))))))) ("version-string-with-git-hash" . #hasheq((author . "william@hatch.uno willghatch@gmail.com eeide@cs.utah.edu pierce.darragh@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com" "eeide@cs.utah.edu" "pierce.darragh@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "version-string-with-git-hash" "doc/version-string-with-git-hash@version-string-with-git-hash/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/version-string-with-git-hash.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/version-string-with-git-hash.txt"))) (checksum . "64bc518ac25e5810fa155a8d8ebbfaa4d008e8bc") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1605842357) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "Do you want your package version string to contain a git commit hash?") (implies . ()) (last-checked . 1632904785) (last-edit . 1605842357) (last-updated . 1623285549) (modules . ((lib "version-string-with-git-hash/scribblings/version-string-with-git-hash.scrbl") (lib "version-string-with-git-hash/main.rkt"))) (name . "version-string-with-git-hash") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:eeide@cs.utah.edu . #t) (author:pierce.darragh@gmail.com . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (git . #t) (ring:1 . #t) (versioning . #t))) (source . "https://gitlab.flux.utah.edu/xsmith/version-string-with-git-hash.git") (tags . ("git" "versioning")) (versions . #hash((default . #hasheq((checksum . "64bc518ac25e5810fa155a8d8ebbfaa4d008e8bc") (source . "https://gitlab.flux.utah.edu/xsmith/version-string-with-git-hash.git") (source_url . "https://gitlab.flux.utah.edu/xsmith/version-string-with-git-hash.git"))))))) ("video" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . ("indirect" "conflicts.txt")) (dep-failure-log . #f) (docs . (("extract" "video" "doc/video@video/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/video.txt") (test-failure-log . "server/built/test-fail/video.txt") (test-success-log . #f))) (checksum . "aa958b5ab250c8a202b24444935255d773608ea6") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . (("base" "7.0") "rackunit-lib" "gui-lib" "draw-lib" "images-lib" "drracket-plugin-lib" "data-lib" "pict-lib" "wxme-lib" "sandbox-lib" "at-exp-lib" "scribble-lib" "bitsyntax" "opengl" "portaudio" "net-lib" "syntax-color-lib" "parser-tools-lib" ("graph" "0.3.1") ("libvid-x86_64-macosx" #:platform "x86_64-macosx") ("libvid-x86_64-win32" #:platform "win32\\x86_64") ("libvid-i386-win32" #:platform "win32\\i386") ("libvid-x86_64-linux" #:platform "x86_64-linux") ("libvid-i386-linux" #:platform "i386-linux") ("ffmpeg-x86_64-macosx-3-4" #:platform "x86_64-macosx") ("ffmpeg-x86_64-win32-3-4" #:platform "win32\\x86_64") ("ffmpeg-i386-win32-3-4" #:platform "win32\\i386") "scribble-lib" "racket-doc" "gui-doc" "draw-doc" "ppict" "reprovide-lang")) (description . "The latest version of #lang video") (implies . ()) (last-checked . 1632904786) (last-edit . 1503003269) (last-updated . 1556662472) (modules . ((lib "video/private/utils.rkt") (lib "video/private/ffmpeg-pipeline.rkt") (lib "video/render.rkt") (lib "video/scribblings/core.scrbl") (lib "video/scribblings/installing.scrbl") (lib "video/tests/video.rkt") (lib "video/player.rkt") (lib "video/scribblings/player.scrbl") (lib "video/scribblings/video.scrbl") (lib "video/examples/3-clips.rkt") (lib "video/private/devices.rkt") (lib "video/units.rkt") (lib "video/private/video.rkt") (lib "video/scribblings/api.scrbl") (lib "video/private/surface.rkt") (lib "video/private/ffmpeg/lib.rkt") (lib "video/scribblings/viddoclang.rkt") (lib "video/examples/2-colorfade.rkt") (lib "video/private/camera-icon.rkt") (lib "video/examples/7-watermark.rkt") (lib "video/private/ffmpeg/data.rkt") (lib "video/examples/11-include.rkt") (lib "video/raco.rkt") (lib "video/core.rkt") (lib "video/version.rkt") (lib "video/private/render-settings.rkt") (lib "video/tests/unit-tests.rkt") (lib "video/tests/ffmpeg.rkt") (lib "video/private/ffmpeg/main.rkt") (lib "video/examples/8-image.rkt") (lib "video/tests/devices.rkt") (lib "video/private/ffmpeg/ffmpeg.rkt") (lib "video/examples/5-project.rkt") (lib "video/private/silence.rkt") (lib "video/scribblings/graphical.scrbl") (lib "video/tests/test-utils.rkt") (lib "video/convert.rkt") (lib "video/private/init.rkt") (lib "video/surface.rkt") (lib "video/examples/9-doubletransition.rkt") (lib "video/private/opengl.rkt") (lib "video/private/installer.rkt") (lib "video/private/debug-mixin.rkt") (lib "video/private/lang.rkt") (lib "video/private/video-canvas.rkt") (lib "video/private/ffmpeg/constants.rkt") (lib "video/main.rkt") (lib "video/examples/10-properties.rkt") (lib "video/devices.rkt") (lib "video/tests/player.rkt") (lib "video/examples/6-multitrack.rkt") (lib "video/private/log.rkt") (lib "video/scribblings/utils.rkt") (lib "video/scribblings/render.scrbl") (lib "video/scribblings/extend.scrbl") (lib "video/private/tool.rkt") (lib "video/scribblings/templates.rkt") (lib "video/init.rkt") (lib "video/examples/1-hellocolor.rkt") (lib "video/private/units.rkt") (lib "video/private/ffmpeg/libvid.rkt") (lib "video/base.rkt") (lib "video/lib/lang/reader.rkt") (lib "video/lang/reader.rkt") (lib "video/scribblings/intro.scrbl") (lib "video/tests/editor.rkt") (lib "video/private/editor.rkt") (lib "video/tests/render.rkt") (lib "video/examples/12-cut.rkt") (lib "video/lib.rkt") (lib "video/examples/4-filters.rkt"))) (name . "video") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:docs-error: . #t) (:docs: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (video . #t) (vidlang . #t))) (source . "git://github.com/videolang/video#stable") (tags . ("video" "vidlang")) (versions . #hash((default . #hasheq((checksum . "aa958b5ab250c8a202b24444935255d773608ea6") (source . "git://github.com/videolang/video#stable") (source_url . "http://github.com/videolang/video/tree/master#stable"))))))) ("video-samples" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . ("indirect" "conflicts.txt")) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/video-samples.txt") (test-failure-log . "server/built/test-fail/video-samples.txt") (test-success-log . #f))) (checksum . "6ac1cfc77152350d1ce55738447350ae0d43cf5d") (checksum-error . #f) (collection . "video-samples") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "draw-lib" "gui-lib" "pict-lib" "video")) (description . "A package containing sample videos (with a license to use and redistribute), as well as video scripts to use them.") (implies . ()) (last-checked . 1632904786) (last-edit . 1507818372) (last-updated . 1533897807) (modules . ((lib "video-samples/bbb/mosaic.rkt") (lib "video-samples/bbb/chirping.rkt") (lib "video-samples/bbb/running.rkt") (lib "video-samples/bbb/jumpflytrans.rkt") (lib "video-samples/bbb/jumping.rkt") (lib "video-samples/bbb/mos2.rkt") (lib "video-samples/bbb/flying.rkt"))) (name . "video-samples") (ring . 1) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (author:leif@leifandersen.net . #t) (ring:1 . #t) (samples . #t) (video . #t))) (source . "git://github.com/videolang/test-samples") (tags . ("samples" "video")) (versions . #hash((default . #hasheq((checksum . "6ac1cfc77152350d1ce55738447350ae0d43cf5d") (source . "git://github.com/videolang/test-samples") (source_url . "http://github.com/videolang/test-samples/tree/master"))))))) ("video-testing" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "video" "doc/video@video-testing/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/video-testing.txt") (test-failure-log . "server/built/test-fail/video-testing.txt") (test-success-log . #f))) (checksum . "aa958b5ab250c8a202b24444935255d773608ea6") (checksum-error . #f) (collection . (multi)) (conflicts . ("video")) (dependencies . (("base" "7.0") "rackunit-lib" "gui-lib" "draw-lib" "images-lib" "drracket-plugin-lib" "data-lib" "pict-lib" "wxme-lib" "sandbox-lib" "at-exp-lib" "scribble-lib" "bitsyntax" "opengl" "portaudio" "net-lib" "syntax-color-lib" "parser-tools-lib" ("graph" "0.3.1") ("libvid-x86_64-macosx" #:platform "x86_64-macosx") ("libvid-x86_64-win32" #:platform "win32\\x86_64") ("libvid-i386-win32" #:platform "win32\\i386") ("libvid-x86_64-linux" #:platform "x86_64-linux") ("libvid-i386-linux" #:platform "i386-linux") ("ffmpeg-x86_64-macosx-3-4" #:platform "x86_64-macosx") ("ffmpeg-x86_64-win32-3-4" #:platform "win32\\x86_64") ("ffmpeg-i386-win32-3-4" #:platform "win32\\i386") "scribble-lib" "racket-doc" "gui-doc" "draw-doc" "ppict" "reprovide-lang")) (description . "More stable than video-unstable, but updated less frequently.\r\nLess stable than video(-stable), but updated more frequently") (implies . ()) (last-checked . 1632904786) (last-edit . 1503003170) (last-updated . 1556662473) (modules . ((lib "video/private/utils.rkt") (lib "video/private/ffmpeg-pipeline.rkt") (lib "video/render.rkt") (lib "video/scribblings/core.scrbl") (lib "video/scribblings/installing.scrbl") (lib "video/tests/video.rkt") (lib "video/player.rkt") (lib "video/scribblings/player.scrbl") (lib "video/scribblings/video.scrbl") (lib "video/examples/3-clips.rkt") (lib "video/private/devices.rkt") (lib "video/units.rkt") (lib "video/private/video.rkt") (lib "video/scribblings/api.scrbl") (lib "video/private/surface.rkt") (lib "video/private/ffmpeg/lib.rkt") (lib "video/scribblings/viddoclang.rkt") (lib "video/examples/2-colorfade.rkt") (lib "video/private/camera-icon.rkt") (lib "video/examples/7-watermark.rkt") (lib "video/private/ffmpeg/data.rkt") (lib "video/examples/11-include.rkt") (lib "video/raco.rkt") (lib "video/core.rkt") (lib "video/version.rkt") (lib "video/private/render-settings.rkt") (lib "video/tests/unit-tests.rkt") (lib "video/tests/ffmpeg.rkt") (lib "video/private/ffmpeg/main.rkt") (lib "video/examples/8-image.rkt") (lib "video/tests/devices.rkt") (lib "video/private/ffmpeg/ffmpeg.rkt") (lib "video/examples/5-project.rkt") (lib "video/private/silence.rkt") (lib "video/scribblings/graphical.scrbl") (lib "video/tests/test-utils.rkt") (lib "video/convert.rkt") (lib "video/private/init.rkt") (lib "video/surface.rkt") (lib "video/examples/9-doubletransition.rkt") (lib "video/private/opengl.rkt") (lib "video/private/installer.rkt") (lib "video/private/debug-mixin.rkt") (lib "video/private/lang.rkt") (lib "video/private/video-canvas.rkt") (lib "video/private/ffmpeg/constants.rkt") (lib "video/main.rkt") (lib "video/examples/10-properties.rkt") (lib "video/devices.rkt") (lib "video/tests/player.rkt") (lib "video/examples/6-multitrack.rkt") (lib "video/private/log.rkt") (lib "video/scribblings/utils.rkt") (lib "video/scribblings/render.scrbl") (lib "video/scribblings/extend.scrbl") (lib "video/private/tool.rkt") (lib "video/scribblings/templates.rkt") (lib "video/init.rkt") (lib "video/examples/1-hellocolor.rkt") (lib "video/private/units.rkt") (lib "video/private/ffmpeg/libvid.rkt") (lib "video/base.rkt") (lib "video/lib/lang/reader.rkt") (lib "video/lang/reader.rkt") (lib "video/scribblings/intro.scrbl") (lib "video/tests/editor.rkt") (lib "video/private/editor.rkt") (lib "video/tests/render.rkt") (lib "video/examples/12-cut.rkt") (lib "video/lib.rkt") (lib "video/examples/4-filters.rkt"))) (name . "video-testing") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (author:leif@leifandersen.net . #t) (ring:2 . #t) (testing . #t) (video . #t) (vidlang . #t))) (source . "git://github.com/videolang/video#testing") (tags . ("testing" "video" "vidlang")) (versions . #hash((default . #hasheq((checksum . "aa958b5ab250c8a202b24444935255d773608ea6") (source . "git://github.com/videolang/video#testing") (source_url . "http://github.com/videolang/video/tree/master#testing"))))))) ("video-unstable" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "video" "doc/video@video-unstable/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/video-unstable.txt") (test-failure-log . "server/built/test-fail/video-unstable.txt") (test-success-log . #f))) (checksum . "3c69669063c56ff8d269768589cb9506a33315e5") (checksum-error . #f) (collection . (multi)) (conflicts . ("video")) (dependencies . (("base" "7.0") "rackunit-lib" "gui-lib" "draw-lib" "images-lib" "drracket-plugin-lib" "data-lib" "pict-lib" "wxme-lib" "sandbox-lib" "at-exp-lib" "scribble-lib" "bitsyntax" "opengl" "portaudio" "net-lib" "syntax-color-lib" "parser-tools-lib" ("graph" "0.3.1") ("libvid-x86_64-macosx" #:platform "x86_64-macosx") ("libvid-x86_64-win32" #:platform "win32\\x86_64") ("libvid-i386-win32" #:platform "win32\\i386") ("libvid-x86_64-linux" #:platform "x86_64-linux") ("libvid-i386-linux" #:platform "i386-linux") ("ffmpeg-x86_64-macosx-3-4" #:platform "x86_64-macosx") ("ffmpeg-x86_64-win32-3-4" #:platform "win32\\x86_64") ("ffmpeg-i386-win32-3-4" #:platform "win32\\i386") "scribble-lib" "racket-doc" "gui-doc" "draw-doc" "ppict" "reprovide-lang")) (description . "The latest and greatest build of Video. This build will occasionally fail.") (implies . ()) (last-checked . 1632904787) (last-edit . 1503854656) (last-updated . 1573955055) (modules . ((lib "video/private/utils.rkt") (lib "video/private/ffmpeg-pipeline.rkt") (lib "video/render.rkt") (lib "video/scribblings/core.scrbl") (lib "video/scribblings/installing.scrbl") (lib "video/tests/video.rkt") (lib "video/player.rkt") (lib "video/scribblings/player.scrbl") (lib "video/scribblings/video.scrbl") (lib "video/examples/3-clips.rkt") (lib "video/private/devices.rkt") (lib "video/units.rkt") (lib "video/private/video.rkt") (lib "video/scribblings/api.scrbl") (lib "video/private/surface.rkt") (lib "video/private/ffmpeg/lib.rkt") (lib "video/scribblings/viddoclang.rkt") (lib "video/examples/2-colorfade.rkt") (lib "video/private/camera-icon.rkt") (lib "video/examples/7-watermark.rkt") (lib "video/private/ffmpeg/data.rkt") (lib "video/examples/11-include.rkt") (lib "video/raco.rkt") (lib "video/core.rkt") (lib "video/version.rkt") (lib "video/private/render-settings.rkt") (lib "video/tests/unit-tests.rkt") (lib "video/tests/ffmpeg.rkt") (lib "video/private/ffmpeg/main.rkt") (lib "video/examples/8-image.rkt") (lib "video/tests/devices.rkt") (lib "video/private/ffmpeg/ffmpeg.rkt") (lib "video/examples/5-project.rkt") (lib "video/private/silence.rkt") (lib "video/scribblings/graphical.scrbl") (lib "video/tests/test-utils.rkt") (lib "video/convert.rkt") (lib "video/private/init.rkt") (lib "video/surface.rkt") (lib "video/examples/9-doubletransition.rkt") (lib "video/private/opengl.rkt") (lib "video/private/installer.rkt") (lib "video/private/debug-mixin.rkt") (lib "video/private/lang.rkt") (lib "video/private/video-canvas.rkt") (lib "video/private/ffmpeg/constants.rkt") (lib "video/main.rkt") (lib "video/examples/10-properties.rkt") (lib "video/devices.rkt") (lib "video/tests/player.rkt") (lib "video/examples/6-multitrack.rkt") (lib "video/private/log.rkt") (lib "video/scribblings/utils.rkt") (lib "video/scribblings/render.scrbl") (lib "video/scribblings/extend.scrbl") (lib "video/private/tool.rkt") (lib "video/scribblings/templates.rkt") (lib "video/init.rkt") (lib "video/examples/1-hellocolor.rkt") (lib "video/private/units.rkt") (lib "video/private/ffmpeg/libvid.rkt") (lib "video/base.rkt") (lib "video/lib/lang/reader.rkt") (lib "video/lang/reader.rkt") (lib "video/scribblings/intro.scrbl") (lib "video/tests/editor.rkt") (lib "video/private/editor.rkt") (lib "video/tests/render.rkt") (lib "video/examples/12-cut.rkt") (lib "video/lib.rkt") (lib "video/examples/4-filters.rkt"))) (name . "video-unstable") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (author:leif@leifandersen.net . #t) (ring:2 . #t) (unstable . #t) (video . #t) (vidlang . #t))) (source . "git://github.com/videolang/video") (tags . ("unstable" "video" "vidlang")) (versions . #hash((default . #hasheq((checksum . "3c69669063c56ff8d269768589cb9506a33315e5") (source . "git://github.com/videolang/video") (source_url . "http://github.com/videolang/video/tree/master"))))))) ("video-v0-0" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "video" "doc/video@video-v0-0/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/video-v0-0.txt") (test-failure-log . "server/built/test-fail/video-v0-0.txt") (test-success-log . #f))) (checksum . "39112ec3b7fbc6b611a67cc5f9ac3c988c50f16d") (checksum-error . #f) (collection . "video") (conflicts . ("video")) (dependencies . ("base" "rackunit-lib" "gui-lib" "images-lib" "scribble-lib" "racket-doc")) (description . "v0.0 of #lang video") (implies . ()) (last-checked . 1632904787) (last-edit . 1503001736) (last-updated . 1502816519) (modules . ((lib "video/render.rkt") (lib "video/player.rkt") (lib "video/scribblings/video.scrbl") (lib "video/private/video.rkt") (lib "video/core.rkt") (lib "video/private/examples.rkt") (lib "video/private/mlt.rkt") (lib "video/private/once.rkt") (lib "video/private/init-mlt.rkt") (lib "video/tag.rkt") (lib "video/init.rkt") (lib "video/lib.rkt"))) (name . "video-v0-0") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (author:leif@leifandersen.net . #t) (ring:2 . #t) (video . #t) (vidlang . #t))) (source . "git://github.com/videolang/video#v0.0") (tags . ("video" "vidlang")) (versions . #hash((default . #hasheq((checksum . "39112ec3b7fbc6b611a67cc5f9ac3c988c50f16d") (source . "git://github.com/videolang/video#v0.0") (source_url . "http://github.com/videolang/video/tree/master#v0.0"))))))) ("video-v0-1" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "video"))) (failure-log . "server/built/fail/video-v0-1.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ca7db7f85ab7f19f91e1f63907c275fecdc39349") (checksum-error . #f) (collection . (multi)) (conflicts . ("video")) (dependencies . (("base" "6.9") "rackunit-lib" "gui-lib" "draw-lib" "images-lib" "drracket-plugin-lib" "data-lib" "pict-lib" "wxme-lib" "sandbox-lib" "at-exp-lib" "scribble-lib" "bitsyntax" "opengl" "portaudio" "ffi-definer-convention" "scribble-lib" "racket-doc" "gui-doc" "draw-doc" "ppict")) (description . "v0.1 of #lang video") (implies . ()) (last-checked . 1632904787) (last-edit . 1503001716) (last-updated . 1502816520) (modules . ((lib "video/private/utils.rkt") (lib "video/render.rkt") (lib "video/private/threading.rkt") (lib "video/tests/video.rkt") (lib "video/player.rkt") (lib "video/scribblings/video.scrbl") (lib "video/private/ffmpeg.rkt") (lib "video/examples/3-clips.rkt") (lib "video/units.rkt") (lib "video/render/xml.rkt") (lib "video/private/video.rkt") (lib "video/scribblings/api.scrbl") (lib "video/private/surface.rkt") (lib "video/examples/2-colorfade.rkt") (lib "video/private/camera-icon.rkt") (lib "video/examples/7-watermark.rkt") (lib "video/examples/11-include.rkt") (lib "video/raco.rkt") (lib "video/core.rkt") (lib "video/private/packetqueue.rkt") (lib "video/tests/unit-tests.rkt") (lib "video/private/ffmpeg-stream.rkt") (lib "video/examples/8-image.rkt") (lib "video/examples/5-project.rkt") (lib "video/render/mp4.rkt") (lib "video/tests/test-utils.rkt") (lib "video/surface.rkt") (lib "video/examples/9-doubletransition.rkt") (lib "video/render/list.rkt") (lib "video/private/mlt.rkt") (lib "video/render/jpg.rkt") (lib "video/tests/mlt.rkt") (lib "video/private/video-canvas.rkt") (lib "video/main.rkt") (lib "video/examples/10-properties.rkt") (lib "video/tests/player.rkt") (lib "video/examples/6-multitrack.rkt") (lib "video/scribblings/utils.rkt") (lib "video/scribblings/render.scrbl") (lib "video/private/tool.rkt") (lib "video/private/init-mlt.rkt") (lib "video/init.rkt") (lib "video/examples/1-hellocolor.rkt") (lib "video/base.rkt") (lib "video/lang/reader.rkt") (lib "video/render/png.rkt") (lib "video/scribblings/intro.scrbl") (lib "video/tests/editor.rkt") (lib "video/private/editor.rkt") (lib "video/tests/render.rkt") (lib "video/examples/12-cut.rkt") (lib "video/lib.rkt") (lib "video/examples/4-filters.rkt"))) (name . "video-v0-1") (ring . 2) (search-terms . #hasheq((:build-fail: . #t) (:conflicts: . #t) (:docs-error: . #t) (author:leif@leifandersen.net . #t) (ring:2 . #t) (video . #t) (vidlang . #t))) (source . "git://github.com/videolang/video#v0.1.1") (tags . ("video" "vidlang")) (versions . #hash((default . #hasheq((checksum . "ca7db7f85ab7f19f91e1f63907c275fecdc39349") (source . "git://github.com/videolang/video#v0.1.1") (source_url . "http://github.com/videolang/video/tree/master#v0.1.1"))))))) ("video-v0-2" . #hasheq((author . "leif@leifandersen.net") (authors . ("leif@leifandersen.net")) (build . #hash((conflicts-log . "conflicts.txt") (dep-failure-log . #f) (docs . (("extract" "video" "doc/video@video-v0-2/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/video-v0-2.txt") (test-failure-log . "server/built/test-fail/video-v0-2.txt") (test-success-log . #f))) (checksum . "8828d1c287030691cbc12f75fb803265fc3d97bb") (checksum-error . #f) (collection . (multi)) (conflicts . ("video")) (dependencies . (("base" "7.0") "rackunit-lib" "gui-lib" "draw-lib" "images-lib" "drracket-plugin-lib" "data-lib" "pict-lib" "wxme-lib" "sandbox-lib" "at-exp-lib" "scribble-lib" "bitsyntax" "opengl" "portaudio" "net-lib" "syntax-color-lib" "parser-tools-lib" ("graph" "0.3.1") ("libvid-x86_64-macosx-0-2" #:platform "x86_64-macosx") ("libvid-x86_64-win32-0-2" #:platform "win32\\x86_64") ("libvid-i386-win32-0-2" #:platform "win32\\i386") ("libvid-x86_64-linux-0-2" #:platform "x86_64-linux") ("libvid-i386-linux-0-2" #:platform "i386-linux") ("ffmpeg-x86_64-macosx-3-4" #:platform "x86_64-macosx") ("ffmpeg-x86_64-win32-3-4" #:platform "win32\\x86_64") ("ffmpeg-i386-win32-3-4" #:platform "win32\\i386") "scribble-lib" "racket-doc" "gui-doc" "draw-doc" "ppict" "reprovide-lang")) (description . "v0.2 of #lang video") (implies . ()) (last-checked . 1632904787) (last-edit . 1535930322) (last-updated . 1535925551) (modules . ((lib "video/private/utils.rkt") (lib "video/private/ffmpeg-pipeline.rkt") (lib "video/render.rkt") (lib "video/scribblings/core.scrbl") (lib "video/scribblings/installing.scrbl") (lib "video/tests/video.rkt") (lib "video/player.rkt") (lib "video/scribblings/player.scrbl") (lib "video/scribblings/video.scrbl") (lib "video/examples/3-clips.rkt") (lib "video/private/devices.rkt") (lib "video/units.rkt") (lib "video/private/video.rkt") (lib "video/scribblings/api.scrbl") (lib "video/private/surface.rkt") (lib "video/private/ffmpeg/lib.rkt") (lib "video/scribblings/viddoclang.rkt") (lib "video/examples/2-colorfade.rkt") (lib "video/private/camera-icon.rkt") (lib "video/examples/7-watermark.rkt") (lib "video/private/ffmpeg/data.rkt") (lib "video/examples/11-include.rkt") (lib "video/raco.rkt") (lib "video/core.rkt") (lib "video/version.rkt") (lib "video/private/render-settings.rkt") (lib "video/tests/unit-tests.rkt") (lib "video/tests/ffmpeg.rkt") (lib "video/private/ffmpeg/main.rkt") (lib "video/examples/8-image.rkt") (lib "video/tests/devices.rkt") (lib "video/private/ffmpeg/ffmpeg.rkt") (lib "video/examples/5-project.rkt") (lib "video/private/silence.rkt") (lib "video/scribblings/graphical.scrbl") (lib "video/tests/test-utils.rkt") (lib "video/convert.rkt") (lib "video/private/init.rkt") (lib "video/surface.rkt") (lib "video/examples/9-doubletransition.rkt") (lib "video/private/opengl.rkt") (lib "video/private/installer.rkt") (lib "video/private/debug-mixin.rkt") (lib "video/private/lang.rkt") (lib "video/private/video-canvas.rkt") (lib "video/private/ffmpeg/constants.rkt") (lib "video/main.rkt") (lib "video/examples/10-properties.rkt") (lib "video/devices.rkt") (lib "video/tests/player.rkt") (lib "video/examples/6-multitrack.rkt") (lib "video/private/log.rkt") (lib "video/scribblings/utils.rkt") (lib "video/scribblings/render.scrbl") (lib "video/scribblings/extend.scrbl") (lib "video/private/tool.rkt") (lib "video/scribblings/templates.rkt") (lib "video/init.rkt") (lib "video/examples/1-hellocolor.rkt") (lib "video/private/units.rkt") (lib "video/private/ffmpeg/libvid.rkt") (lib "video/base.rkt") (lib "video/lib/lang/reader.rkt") (lib "video/lang/reader.rkt") (lib "video/scribblings/intro.scrbl") (lib "video/tests/editor.rkt") (lib "video/private/editor.rkt") (lib "video/tests/render.rkt") (lib "video/examples/12-cut.rkt") (lib "video/lib.rkt") (lib "video/examples/4-filters.rkt"))) (name . "video-v0-2") (ring . 2) (search-terms . #hasheq((:build-conflicts: . #t) (:build-success: . #t) (:conflicts: . #t) (:docs-error: . #t) (:docs: . #t) (author:leif@leifandersen.net . #t) (ffmpeg . #t) (ring:2 . #t) (video . #t))) (source . "https://github.com/videolang/video.git#v0.2") (tags . ("ffmpeg" "video")) (versions . #hash((default . #hasheq((checksum . "8828d1c287030691cbc12f75fb803265fc3d97bb") (source . "https://github.com/videolang/video.git#v0.2") (source_url . "https://github.com/videolang/video.git#v0.2"))))))) ("virtual-mpu" . #hasheq((author . "jerome.martin.dev@gmail.com") (authors . ("jerome.martin.dev@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/virtual-mpu.txt") (test-failure-log . "server/built/test-fail/virtual-mpu.txt") (test-success-log . #f))) (checksum . "d8056f928a646bb9ac96fdb78cde794efc82d144") (checksum-error . #f) (collection . "virtual-mpu") (conflicts . ()) (dependencies . ("base" "brag" "br-parser-tools-lib" "anaphoric" "reprovide-lang" "command-tree" "rackunit-lib" "charterm")) (description . "Universal Emulator & Assembler for Old Microprocessors") (implies . ()) (last-checked . 1632904788) (last-edit . 1529697209) (last-updated . 1536595166) (modules . ((lib "virtual-mpu/emulate.rkt") (lib "virtual-mpu/private/emulator/gui/screen.rkt") (lib "virtual-mpu/private/asm-lang/expander.rkt") (lib "virtual-mpu/private/emulator/gui/display.rkt") (lib "virtual-mpu/private/emulator/gui/element.rkt") (lib "virtual-mpu/private/emulator/gui/base.rkt") (lib "virtual-mpu/private/emulator/gui/box.rkt") (lib "virtual-mpu/private/emulator/gui/input.rkt") (lib "virtual-mpu/private/mpu-lang/lang.rkt") (lib "virtual-mpu/private/mpu-lang/test-lang.rkt") (lib "virtual-mpu/asm.rkt") (lib "virtual-mpu/op-table.rkt") (lib "virtual-mpu/private/emulator/gui/area.rkt") (lib "virtual-mpu/private/mpu-lang/structs.rkt") (lib "virtual-mpu/test.rkt") (lib "virtual-mpu/private/emulator/gui/grid.rkt") (lib "virtual-mpu/s-record.rkt") (lib "virtual-mpu/private/emulator/terminal.rkt") (lib "virtual-mpu/assemble.rkt") (lib "virtual-mpu/private/asm-lang/s-record.rkt") (lib "virtual-mpu/main.rkt") (lib "virtual-mpu/private/asm-lang/parser.rkt") (lib "virtual-mpu/utils.rkt") (lib "virtual-mpu/private/emulator/emulator.rkt") (lib "virtual-mpu/machines/ril011w.rkt") (lib "virtual-mpu/private/asm-lang/reader.rkt") (lib "virtual-mpu/private/emulator/gui/label.rkt") (lib "virtual-mpu/private/mpu-lang/op-table.rkt") (lib "virtual-mpu/private/asm-lang/assembler.rkt") (lib "virtual-mpu/cli.rkt") (lib "virtual-mpu/mpu.rkt") (lib "virtual-mpu/private/emulator/gui/buffer.rkt"))) (name . "virtual-mpu") (ring . 1) (search-terms . #hasheq((|6800| . #t) (:build-success: . #t) (assembler . #t) (author:jerome.martin.dev@gmail.com . #t) (emulator . #t) (motorola . #t) (ring:1 . #t))) (source . "https://github.com/euhmeuh/virtual-mpu.git") (tags . ("6800" "assembler" "emulator" "motorola")) (versions . #hash((default . #hasheq((checksum . "d8056f928a646bb9ac96fdb78cde794efc82d144") (source . "https://github.com/euhmeuh/virtual-mpu.git") (source_url . "https://github.com/euhmeuh/virtual-mpu.git"))))))) ("viz" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/viz.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "") (checksum-error . "git-checkout: no initial pkts from the server\n  context...:\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (date-added . 1561670559) (dependencies . ()) (description . "A real-time data visualization surface") (implies . ()) (last-checked . 1632904788) (last-edit . 1561670559) (last-updated . 1621810220) (modules . ()) (name . "viz") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (:no-tag: . #t) (author:dedbox@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/dedbox/racket-viz.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "") (source . "https://github.com/dedbox/racket-viz.git") (source_url . "https://github.com/dedbox/racket-viz.git"))))))) ("vlc" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "vlc" "doc/vlc@vlc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/vlc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/vlc.txt"))) (checksum . "e485bb6cef1936e0587f2115dd7d2c1cffd4c832") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "overeasy" "racket-doc" "scribble-lib")) (description . "VideoLAN VLC Media Player Control") (implies . ()) (last-checked . 1632904788) (last-edit . 1456645661) (last-updated . 1608062402) (modules . ((lib "vlc/vlc.scrbl") (lib "vlc/main.rkt"))) (name . "vlc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (media . #t) (ring:1 . #t) (video . #t))) (source . "http://www.neilvandyke.org/racket/vlc.zip") (tags . ("media" "video")) (versions . #hash((default . #hasheq((checksum . "e485bb6cef1936e0587f2115dd7d2c1cffd4c832") (source . "http://www.neilvandyke.org/racket/vlc.zip") (source_url . "http://www.neilvandyke.org/racket/vlc.zip"))))))) ("voxel" . #hasheq((author . "dedbox@gmail.com") (authors . ("dedbox@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("salvage" "voxel-engine" "doc/voxel-engine@voxel/index.html"))) (failure-log . "server/built/fail/voxel.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9c23d1e8e71a80bac6e4251a517f70aef002ab9f") (checksum-error . #f) (collection . "voxel-engine") (conflicts . ()) (date-added . 1568848296) (dependencies . ("base" "opengl" "glm" "gui-lib" "at-exp-lib" "racket-doc" "scribble-lib")) (description . "voxel space programming") (implies . ()) (last-checked . 1632904789) (last-edit . 1573173847) (last-updated . 1573179145) (modules . ((lib "voxel-engine/scribblings/voxel-engine.scrbl") (lib "voxel-engine/gl-drawable.rkt") (lib "voxel-engine/camera.rkt") (lib "voxel-engine/gl-shader.rkt") (lib "voxel-engine/main.rkt") (lib "voxel-engine/gl-cube.rkt") (lib "voxel-engine/block.rkt") (lib "voxel-engine/gl-canvas.rkt") (lib "voxel-engine/chunk.rkt"))) (name . "voxel") (ring . 1) (search-terms . #hasheq((3D . #t) (:build-fail: . #t) (:docs-error: . #t) (:docs: . #t) (author:dedbox@gmail.com . #t) (graphics . #t) (ring:1 . #t) (voxel . #t))) (source . "https://github.com/dedbox/racket-voxel.git") (tags . ("3D" "graphics" "voxel")) (versions . #hash((default . #hasheq((checksum . "9c23d1e8e71a80bac6e4251a517f70aef002ab9f") (source . "https://github.com/dedbox/racket-voxel.git") (source_url . "https://github.com/dedbox/racket-voxel.git"))))))) ("vr-assets" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/vr-assets.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "c2748df870b0b5ada94105148dbf6ddb9703f529") (checksum-error . #f) (collection . "vr-assets") (conflicts . ()) (date-added . 1569009980) (dependencies . ("base" "vr-engine" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Assets suitable for use with vr-engine") (implies . ()) (last-checked . 1632904789) (last-edit . 1569009980) (last-updated . 1591735099) (modules . ((lib "vr-assets/util/main.rkt") (lib "vr-assets/scribblings/vr-assets.rkt") (lib "vr-assets/scribblings/manual.scrbl") (lib "vr-assets/assets.rkt") (lib "vr-assets/main.rkt") (lib "vr-assets/assets/generate-screenshots.rkt") (lib "vr-assets/asset-images.rkt") (lib "vr-assets/assets/grab-model.rkt"))) (name . "vr-assets") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (aframe . #t) (author:stephen@thoughtstem.com . #t) (ring:1 . #t) (virtual-reality . #t) (vr . #t))) (source . "https://github.com/thoughtstem/vr-assets.git") (tags . ("aframe" "virtual-reality" "vr")) (versions . #hash((default . #hasheq((checksum . "c2748df870b0b5ada94105148dbf6ddb9703f529") (source . "https://github.com/thoughtstem/vr-assets.git") (source_url . "https://github.com/thoughtstem/vr-assets.git"))))))) ("vr-engine" . #hasheq((author . "stephen@thoughtstem.com") (authors . ("stephen@thoughtstem.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/vr-engine.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "18e290f7d61ddd2b32a2f12a8abb0c4a30ed3a08") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1568232701) (dependencies . ("hostname" "simple-qr" "urlang" "https://github.com/thoughtstem/define-assets-from.git" "https://github.com/thoughtstem/image-coloring.git" "https://github.com/thoughtstem/TS-GE-Katas.git?path=ts-kata-util")) (description . "Racket for Virtual Reality.  Compiles to A-frame.io.\r\n\r\nWe made this for educational purposes at ThoughtSTEM.  However, you could probably use this in production in some scenarios. ") (implies . ()) (last-checked . 1632904790) (last-edit . 1568232701) (last-updated . 1609156802) (modules . ((lib "vr-engine/main.rkt") (lib "vr-engine/vr.rkt") (lib "vr-engine/component-definer.rkt") (lib "vr-engine/vr-helpers.rkt") (lib "vr-engine/my-ip-qr.rkt") (lib "vr-engine/scribblings/manual.scrbl") (lib "vr-engine/vr-engine.rkt") (lib "vr-engine/attribute-definer.rkt"))) (name . "vr-engine") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:stephen@thoughtstem.com . #t) (education . #t) (games . #t) (ring:1 . #t) (vr . #t))) (source . "https://github.com/thoughtstem/vr-engine.git") (tags . ("education" "games" "vr")) (versions . #hash((default . #hasheq((checksum . "18e290f7d61ddd2b32a2f12a8abb0c4a30ed3a08") (source . "https://github.com/thoughtstem/vr-engine.git") (source_url . "https://github.com/thoughtstem/vr-engine.git"))))))) ("vulkan" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "vulkan" "doc/vulkan@vulkan/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/vulkan.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/vulkan.txt"))) (checksum . "632e0d0ea2b7415dc290221331df1bf996612729") (checksum-error . #f) (collection . "vulkan") (conflicts . ()) (date-added . 1570829713) (dependencies . ("base" "compatibility-lib" "txexpr" "graph-lib" "draw-lib" "natural-cli" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Vulkan API integration.") (implies . ()) (last-checked . 1632904791) (last-edit . 1573763981) (last-updated . 1618154357) (modules . ((lib "vulkan/private/generate/ctypes.rkt") (lib "vulkan/scribblings/ravk.scrbl") (lib "vulkan/examples/minimal.rkt") (lib "vulkan/scribblings/vulkan.scrbl") (lib "vulkan/main.rkt") (lib "vulkan/private/generate/interdependent.test.rkt") (lib "vulkan/scribblings/unsafe.scrbl") (lib "vulkan/spec.rkt") (lib "vulkan/cli/ravk_show.rkt") (lib "vulkan/examples/mandelbrot/mandelbrot-raw.rkt") (lib "vulkan/private/generate/ctypes.test.rkt") (lib "vulkan/cli/ravk_show_spec.rkt") (lib "vulkan/private/generate/preamble.rkt") (lib "vulkan/unsafe.rkt") (lib "vulkan/examples/mandelbrot/bindings.rkt") (lib "vulkan/private/generate/typedefs.test.rkt") (lib "vulkan/private/generate/typedefs.rkt") (lib "vulkan/private/c.rkt") (lib "vulkan/private/generate/defines.rkt") (lib "vulkan/private/unsafe-preamble.rkt") (lib "vulkan/private/generate/api-constants.test.rkt") (lib "vulkan/scribblings/maintainers.scrbl") (lib "vulkan/examples/mandelbrot/mandelbrot.rkt") (lib "vulkan/cli/ravk.rkt") (lib "vulkan/private/writer.rkt") (lib "vulkan/private/generate/handles.rkt") (lib "vulkan/scribblings/setup.scrbl") (lib "vulkan/private/memos.rkt") (lib "vulkan/private/generate/defines.test.rkt") (lib "vulkan/private/generate/api-constants.rkt") (lib "vulkan/private/generate/shared.rkt") (lib "vulkan/private/generate/interdependent.rkt") (lib "vulkan/cli/ravk_generate.rkt") (lib "vulkan/private/generate/handles.test.rkt") (lib "vulkan/cli/shared.rkt") (lib "vulkan/scribblings/spec.scrbl") (lib "vulkan/private/paths.rkt") (lib "vulkan/private/generate/vkresult-checker.rkt") (lib "vulkan/private/txexpr.rkt") (lib "vulkan/examples/mandelbrot/bindings-raw.rkt") (lib "vulkan/private/generate/make-unsafe.rkt") (lib "vulkan/examples/physical-device-report.rkt"))) (name . "vulkan") (ring . 1) (search-terms . #hasheq((2D . #t) (2d . #t) (3D . #t) (3d . #t) (:build-success: . #t) (:docs: . #t) (author:sage@sagegerard.com . #t) (graphics . #t) (images . #t) (khronos . #t) (opengl . #t) (ring:1 . #t) (vulkan . #t))) (source . "https://github.com/zyrolasting/racket-vulkan.git") (tags . ("2d" "2D" "3d" "3D" "graphics" "images" "khronos" "opengl" "vulkan")) (versions . #hash((default . #hasheq((checksum . "632e0d0ea2b7415dc290221331df1bf996612729") (source . "https://github.com/zyrolasting/racket-vulkan.git") (source_url . "https://github.com/zyrolasting/racket-vulkan.git"))))))) ("w3s" . #hasheq((author . "juzhenliang@gmail.com") (authors . ("juzhenliang@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "css") ("none" "sgml") ("none" "svg"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/w3s.txt") (test-failure-log . "server/built/test-fail/w3s.txt") (test-success-log . #f))) (checksum . "e5248cbd6e7b559045423820faa8fb705c670e46") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "digimon" "graphics" "typed-racket-lib" "typed-racket-more" "scribble-lib" "racket-doc" "typed-racket-doc" "digimon" "graphics")) (description . "W3 Standards Implemented in Typed Racket") (implies . ()) (last-checked . 1632904791) (last-edit . 1537885223) (last-updated . 1629733300) (modules . ((lib "css/village/hashlang/lexer.rkt") (lib "svg/village/hashlang/reader.rkt") (lib "sgml/village/sgmlang/indentation.rkt") (lib "css/tamer/specificity.rkt") (lib "css/main.rkt") (lib "sgml/tamer/sax.rkt") (lib "css/base.rkt") (lib "css/image.rkt") (lib "sgml/tamer/document.scrbl") (lib "sgml/digitama/tokenizer/errno.rkt") (lib "sgml/tamer/sgml.scrbl") (lib "sgml/digitama/plain/whitespace.rkt") (lib "svg/digitama/document.rkt") (lib "css/tamer/syntax.rkt") (lib "css/tamer/media.rkt") (lib "sgml/digitama/plain/sax.rkt") (lib "sgml/tamer/whitespace.rkt") (lib "css/bonus.rkt") (lib "css/racket.rkt") (lib "sgml/digitama/plain/normalize.rkt") (lib "css/font.rkt") (lib "css/digitama/text-decor.rkt") (lib "sgml/dtd.rkt") (lib "sgml/sax.rkt") (lib "css/village/hashlang/reader.rkt") (lib "css/digitama/syntax/w3s.rkt") (lib "css/tamer/recognizer.rkt") (lib "sgml/digitama/normalize.rkt") (lib "sgml/digitama/tokenizer/port.rkt") (lib "sgml/digitama/space.rkt") (lib "sgml/digitama/relaxng/recognizer.rkt") (lib "sgml/digitama/relaxng.rkt") (lib "sgml/tamer/namespace.rkt") (lib "css/village/hashlang/w3s.rkt") (lib "css/digitama/syntax/tokenizer.rkt") (lib "css/digitama/syntax/unsafe/cascade.rkt") (lib "css/syntax.rkt") (lib "css/text-decor.rkt") (lib "css/digitama/syntax/digicore.rkt") (lib "css/village/hashlang/indentation.rkt") (lib "css/digitama/device-adapt.rkt") (lib "sgml/digitama/namespace.rkt") (lib "sgml/digitama/plain/xexpr.rkt") (lib "sgml/digitama/relaxng/simplification.rkt") (lib "sgml/tamer/xml.rkt") (lib "svg/main.rkt") (lib "sgml/digitama/plain/grammar.rkt") (lib "sgml/digitama/document.rkt") (lib "css/sugar.rkt") (lib "sgml/tamer/validity.rkt") (lib "sgml/digitama/whitespace.rkt") (lib "css/digitama/syntax/misc.rkt") (lib "css/color.rkt") (lib "sgml/xexpr.rkt") (lib "sgml/digitama/tokenizer/characters.rkt") (lib "sgml/digitama/doctype.rkt") (lib "sgml/digitama/plain/prompt.rkt") (lib "css/digitama/image.rkt") (lib "sgml/digitama/schema.rkt") (lib "css/digitama/color.rkt") (lib "sgml/digitama/tokenizer.rkt") (lib "css/village/cascade.rkt") (lib "sgml/digitama/misc.rkt") (lib "sgml/digitama/tokenizer/delimiter.rkt") (lib "css/values.rkt") (lib "sgml/digitama/relaxng/rnc.rkt") (lib "css/digitama/syntax/stdin.rkt") (lib "css/digitama/syntax/cascade.rkt") (lib "sgml/village/sgmlang/reader.rkt") (lib "css/digitama/syntax/condition.rkt") (lib "css/background.rkt") (lib "css/digitama/background.rkt") (lib "sgml/digitama/dtd.rkt") (lib "sgml/village/sgmlang/lexer.rkt") (lib "sgml/rnc.rkt") (lib "sgml/digitama/relaxng/compact.rkt") (lib "css/tamer/configure.rkt") (lib "sgml/digitama/digicore.rkt") (lib "css/recognizer.rkt") (lib "css/digitama/syntax/grammar.rkt") (lib "sgml/digitama/prentity.rkt") (lib "css/digitama/syntax/dimension.rkt") (lib "css/digitama/font.rkt") (lib "sgml/digitama/stdin.rkt") (lib "sgml/digitama/validity.rkt") (lib "css/digitama/syntax/variables.rkt") (lib "css/tamer/bitmap.rkt") (lib "sgml/xml.rkt") (lib "css/digitama/syntax/parser.rkt") (lib "css/digitama/syntax/selector.rkt") (lib "css/tamer/css.scrbl") (lib "svg/tamer/svg.scrbl") (lib "sgml/tamer/rnc/rnc.rkt") (lib "sgml/digitama/grammar.rkt") (lib "sgml/tamer/performace/normalize.rkt"))) (name . "w3s") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs-error: . #t) (author:juzhenliang@gmail.com . #t) (css . #t) (parser . #t) (ring:1 . #t) (svg . #t) (typed-racket . #t) (unstable . #t) (w3 . #t) (xml . #t))) (source . "https://github.com/wargrey/w3s.git") (tags . ("css" "parser" "svg" "typed-racket" "unstable" "w3" "xml")) (versions . #hash((default . #hasheq((checksum . "e5248cbd6e7b559045423820faa8fb705c670e46") (source . "https://github.com/wargrey/w3s.git") (source_url . "https://github.com/wargrey/w3s.git"))))))) ("warp" . #hasheq((author . "david.vanderson@gmail.com") (authors . ("david.vanderson@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/warp.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "cdc1d0bd942780fb5360dc6a34a2a06cf9518408") (checksum-error . #f) (collection . "warp") (conflicts . ()) (dependencies . ("base" "draw-lib" "gui-lib" "pict-lib" "mode-lambda")) (description . "Light multiplayer space themed game for LAN parties.") (implies . ()) (last-checked . 1632904791) (last-edit . 1533929642) (last-updated . 1538279947) (modules . ((lib "warp/utils.rkt") (lib "warp/dmg.rkt") (lib "warp/explosion.rkt") (lib "warp/effect.rkt") (lib "warp/draw-utils.rkt") (lib "warp/warp.rkt") (lib "warp/change.rkt") (lib "warp/ml.rkt") (lib "warp/ships.rkt") (lib "warp/probe.rkt") (lib "warp/scenarios/base-defense.rkt") (lib "warp/main.rkt") (lib "warp/scenarios/pilot-training.rkt") (lib "warp/draw.rkt") (lib "warp/scenarios/all-ships.rkt") (lib "warp/shield.rkt") (lib "warp/scenario.rkt") (lib "warp/plasma.rkt") (lib "warp/timing-test.rkt") (lib "warp/sandbox.rkt") (lib "warp/server.rkt") (lib "warp/cannon.rkt") (lib "warp/scenarios/asteroid-search.rkt") (lib "warp/defs.rkt") (lib "warp/scenarios/racketcon2018.rkt") (lib "warp/missile.rkt") (lib "warp/mine.rkt") (lib "warp/quadtree.rkt") (lib "warp/scenarios/testing.rkt") (lib "warp/client.rkt") (lib "warp/order.rkt") (lib "warp/physics.rkt") (lib "warp/upgrade.rkt") (lib "warp/pilot.rkt") (lib "warp/pbolt.rkt") (lib "warp/combined.rkt"))) (name . "warp") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:david.vanderson@gmail.com . #t) (games . #t) (ring:1 . #t))) (source . "https://github.com/david-vanderson/warp.git") (tags . ("games")) (versions . #hash((default . #hasheq((checksum . "cdc1d0bd942780fb5360dc6a34a2a06cf9518408") (source . "https://github.com/david-vanderson/warp.git") (source_url . "https://github.com/david-vanderson/warp.git"))))))) ("wasm-lib" . #hasheq((author . "bogdan@defn.io") (authors . ("bogdan@defn.io")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . "server/built/min-fail/wasm-lib.txt") (success-log . "server/built/install/wasm-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/wasm-lib.txt"))) (checksum . "c284f350a8618156c143342b2c9f5769f7349a8b") (checksum-error . #f) (collection . "wasm") (conflicts . ()) (date-added . 1604835921) (dependencies . ("base" "data-lib" "threading-lib")) (description . "WIP Wasm tooling for Racket.") (implies . ()) (last-checked . 1632904792) (last-edit . 1604835921) (last-updated . 1619339542) (modules . ((lib "wasm/private/binary-read.rkt") (lib "wasm/private/switch.rkt") (lib "wasm/private/validation.rkt") (lib "wasm/private/memory.rkt") (lib "wasm/private/binary.rkt") (lib "wasm/private/opcase.rkt") (lib "wasm/private/location.rkt") (lib "wasm/private/error.rkt") (lib "wasm/private/custom-name-section.rkt") (lib "wasm/private/runtime.rkt") (lib "wasm/private/core.rkt") (lib "wasm/private/vm.rkt") (lib "wasm/private/lib/install.rkt") (lib "wasm/private/compiler.rkt") (lib "wasm/private/store.rkt"))) (name . "wasm-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:bogdan@defn.io . #t) (ring:1 . #t) (wasm . #t) (web-assembly . #t))) (source . "https://github.com/Bogdanp/racket-wasm.git?path=wasm-lib") (tags . ("wasm" "web-assembly")) (versions . #hash((default . #hasheq((checksum . "c284f350a8618156c143342b2c9f5769f7349a8b") (source . "https://github.com/Bogdanp/racket-wasm.git?path=wasm-lib") (source_url . "https://github.com/Bogdanp/racket-wasm.git?path=wasm-lib"))))))) ("wavelet-transform-haar-1d" . #hasheq((author . "clements@racket-lang.org") (authors . ("clements@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "wavelet" "doc/wavelet@wavelet-transform-haar-1d/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wavelet-transform-haar-1d.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/wavelet-transform-haar-1d.txt"))) (checksum . "a24d96252701f80dbd382fb4a0dccaf2d19160b1") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "math-lib" "plot-gui-lib" "typed-racket-lib" "typed-racket-more" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "A library to perform forward and reverse 1-d Haar Wavelet transforms") (implies . ()) (last-checked . 1632904792) (last-edit . 1450500903) (last-updated . 1502816521) (modules . ((lib "wavelet/tests.rkt") (lib "wavelet/main.rkt") (lib "wavelet/wavelet.scrbl") (lib "wavelet/haar-1d.rkt"))) (name . "wavelet-transform-haar-1d") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (audio . #t) (author:clements@racket-lang.org . #t) (math . #t) (ring:1 . #t))) (source . "git://github.com/jbclements/wavelet-transform-haar-1d") (tags . ("audio" "math")) (versions . #hash((default . #hasheq((checksum . "a24d96252701f80dbd382fb4a0dccaf2d19160b1") (source . "git://github.com/jbclements/wavelet-transform-haar-1d") (source_url . "http://github.com/jbclements/wavelet-transform-haar-1d/tree/master"))))))) ("wavenet" . #hasheq((author . "joel@jdueck.net") (authors . ("joel@jdueck.net")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "wavenet" "doc/wavenet@wavenet/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wavenet.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/wavenet.txt"))) (checksum . "71c9fd2f66078a808f1dc837146a34ee4a2dfd6c") (checksum-error . #f) (collection . "wavenet") (conflicts . ()) (date-added . 1614539877) (dependencies . ("base" "hash-view-lib" "http-easy" "gui-doc" "gui-lib" "hash-view" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "An interface for the Google Cloud text-to-speech API") (implies . ()) (last-checked . 1632904792) (last-edit . 1614539877) (last-updated . 1614628739) (modules . ((lib "wavenet/scribblings/wavenet.scrbl") (lib "wavenet/main.rkt"))) (name . "wavenet") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:joel@jdueck.net . #t) (ring:1 . #t))) (source . "https://github.com/otherjoel/wavenet-api.git#main") (tags . ()) (versions . #hash((default . #hasheq((checksum . "71c9fd2f66078a808f1dc837146a34ee4a2dfd6c") (source . "https://github.com/otherjoel/wavenet-api.git#main") (source_url . "https://github.com/otherjoel/wavenet-api.git#main"))))))) ("web-galaxy" . #hasheq((author . "jerome.martin.dev@gmail.com") (authors . ("jerome.martin.dev@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/web-galaxy.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/web-galaxy.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/web-galaxy.txt"))) (checksum . "2d9d5710aec25d961dcfc37a2e88c3c0f435021f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("web-galaxy-lib" "web-galaxy-doc")) (description . "A minimalist web framework for the Racket web-server") (implies . ("web-galaxy-lib" "web-galaxy-doc")) (last-checked . 1632904792) (last-edit . 1529915260) (last-updated . 1581784716) (modules . ()) (name . "web-galaxy") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:jerome.martin.dev@gmail.com . #t) (framework . #t) (html . #t) (minimalist . #t) (ring:1 . #t) (server . #t) (web . #t))) (source . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy") (tags . ("framework" "html" "minimalist" "server" "web")) (versions . #hash((default . #hasheq((checksum . "2d9d5710aec25d961dcfc37a2e88c3c0f435021f") (source . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy") (source_url . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy"))))))) ("web-galaxy-doc" . #hasheq((author . "jerome.martin.dev@gmail.com") (authors . ("jerome.martin.dev@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/web-galaxy-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/web-galaxy-doc.txt"))) (checksum . "2d9d5710aec25d961dcfc37a2e88c3c0f435021f") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Documentation for web-galaxy.") (implies . ()) (last-checked . 1632904792) (last-edit . 1529916686) (last-updated . 1581784717) (modules . ()) (name . "web-galaxy-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jerome.martin.dev@gmail.com . #t) (documentation . #t) (framework . #t) (html . #t) (minimalist . #t) (ring:1 . #t) (server . #t) (web . #t))) (source . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-doc") (tags . ("documentation" "framework" "html" "minimalist" "server" "web")) (versions . #hash((default . #hasheq((checksum . "2d9d5710aec25d961dcfc37a2e88c3c0f435021f") (source . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-doc") (source_url . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-doc"))))))) ("web-galaxy-lib" . #hasheq((author . "jerome.martin.dev@gmail.com") (authors . ("jerome.martin.dev@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/web-galaxy-lib.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/web-galaxy-lib.txt") (test-failure-log . "server/built/test-fail/web-galaxy-lib.txt") (test-success-log . #f))) (checksum . "2d9d5710aec25d961dcfc37a2e88c3c0f435021f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "anaphoric" "web-server-lib")) (description . "Implementation of web-galaxy.") (implies . ()) (last-checked . 1632904793) (last-edit . 1529916532) (last-updated . 1581784717) (modules . ((lib "web-galaxy/response.rkt") (lib "web-galaxy/site-mode.rkt") (lib "web-galaxy/utils.rkt") (lib "web-galaxy/serve.rkt") (lib "web-galaxy/renderer.rkt") (lib "web-galaxy/translate.rkt") (lib "web-galaxy/db.rkt") (lib "web-galaxy/entities.rkt"))) (name . "web-galaxy-lib") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:jerome.martin.dev@gmail.com . #t) (framework . #t) (html . #t) (minimalist . #t) (ring:1 . #t) (server . #t) (web . #t))) (source . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-lib") (tags . ("framework" "html" "minimalist" "server" "web")) (versions . #hash((default . #hasheq((checksum . "2d9d5710aec25d961dcfc37a2e88c3c0f435021f") (source . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-lib") (source_url . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-lib"))))))) ("web-galaxy-test" . #hasheq((author . "jerome.martin.dev@gmail.com") (authors . ("jerome.martin.dev@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/web-galaxy-test.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/web-galaxy-test.txt"))) (checksum . "2d9d5710aec25d961dcfc37a2e88c3c0f435021f") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "web-galaxy-lib")) (description . "Tests for web-galaxy.") (implies . ()) (last-checked . 1632904793) (last-edit . 1529916706) (last-updated . 1581784718) (modules . ((lib "tests/web-galaxy/pony-blog/pages/article.rkt") (lib "tests/web-galaxy/pony-blog/pages/index.rkt") (lib "tests/web-galaxy/pony-blog/run.rkt") (lib "tests/web-galaxy/pony-blog/pages/_base.rkt") (lib "tests/web-galaxy/test-db.rkt") (lib "tests/web-galaxy/pony-blog/models/article.rkt"))) (name . "web-galaxy-test") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:jerome.martin.dev@gmail.com . #t) (framework . #t) (html . #t) (minimalist . #t) (ring:1 . #t) (server . #t) (tests . #t) (web . #t))) (source . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-test") (tags . ("framework" "html" "minimalist" "server" "tests" "web")) (versions . #hash((default . #hasheq((checksum . "2d9d5710aec25d961dcfc37a2e88c3c0f435021f") (source . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-test") (source_url . "https://github.com/euhmeuh/web-galaxy.git?path=web-galaxy-test"))))))) ("web-io" . #hasheq((author . "matthias@ccs.neu.edu") (authors . ("matthias@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/web-io.txt") (docs . (("main" "web-io" "doc/web-io@web-io/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/web-io.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/web-io.txt"))) (checksum . "2225941f8ff49e1aa113c8dcacacfcf2b4a49b8a") (checksum-error . #f) (collection . "web-io") (conflicts . ()) (dependencies . ("racket" "net-lib" "htdp-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "a replacement teach pack for F I at NEU (2016)") (implies . ()) (last-checked . 1632904793) (last-edit . 1476806439) (last-updated . 1502816521) (modules . ((lib "web-io/main.rkt") (lib "web-io/scribblings/web-io.scrbl"))) (name . "web-io") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:matthias@ccs.neu.edu . #t) (ring:1 . #t))) (source . "git://github.com/mfelleisen/web-io.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "2225941f8ff49e1aa113c8dcacacfcf2b4a49b8a") (source . "git://github.com/mfelleisen/web-io.git") (source_url . "http://github.com/mfelleisen/web-io.git/tree/master"))))))) ("web-server" . #hash((author . "jay@racket-lang.org") (authors . ("jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("web-server-lib" "web-server-doc")) (description . "An HTTP server") (implies . ("web-server-lib" "web-server-doc")) (last-checked . 1632904794) (last-edit . 1417659583) (last-updated . 1626298764) (modules . ()) (name . "web-server") (ring . 0) (search-terms . #hasheq((author:jay@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "e7b715820552a10e83864a8eb18eeca4dcb87aa8") (source . "git://github.com/racket/web-server/?path=web-server") (source_url . "git://github.com/racket/web-server/?path=web-server"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("web-server-doc" . #hash((author . "jay@racket-lang.org") (authors . ("jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "web-server" "doc/web-server@web-server-doc/index.html") ("main" "web-server-internal" "doc/web-server-internal@web-server-doc/index.html") ("main" "continue" "doc/continue@web-server-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "net-doc" "net-cookies-doc" "rackunit-doc" "compatibility-doc" "db-doc" "scribble-doc" "compatibility-lib" "db-lib" "net-lib" "net-cookies-lib" "rackunit-lib" "sandbox-lib" "scribble-lib" "web-server-lib" "racket-doc")) (description . "documentation part of web-server") (implies . ()) (last-checked . 1632904794) (last-edit . 1417659583) (last-updated . 1626298765) (modules . ((lib "web-server/scribblings/tutorial/examples/use-redirect.rkt") (lib "web-server/scribblings/lang.scrbl") (lib "web-server/scribblings/dispatch-server.scrbl") (lib "web-server/scribblings/dispatchers.scrbl") (lib "web-server/scribblings/native.scrbl") (lib "web-server/scribblings/web-server.rkt") (lib "web-server/scribblings/running.scrbl") (lib "web-server/scribblings/stateless-usage.scrbl") (lib "web-server/scribblings/serial.scrbl") (lib "web-server/scribblings/server-faq.scrbl") (lib "web-server/scribblings/formlets.scrbl") (lib "web-server/scribblings/servlet-env-int.scrbl") (lib "web-server/scribblings/servlet-setup.scrbl") (lib "web-server/scribblings/ctable.scrbl") (lib "web-server/scribblings/tutorial/examples/iteration-9.rkt") (lib "web-server/scribblings/web-cells.scrbl") (lib "web-server/scribblings/timer.scrbl") (lib "web-server/scribblings/tutorial/tutorial-util.rkt") (lib "web-server/scribblings/tutorial/examples/iteration-5.rkt") (lib "web-server/scribblings/lang-web-cells.scrbl") (lib "web-server/scribblings/tutorial/examples/iteration-6.rkt") (lib "web-server/scribblings/web-server-unit.scrbl") (lib "web-server/scribblings/web-config.scrbl") (lib "web-server/scribblings/lang-api.scrbl") (lib "web-server/scribblings/stuffers.scrbl") (lib "web-server/scribblings/gzip.scrbl") (lib "web-server/scribblings/tutorial/continue.scrbl") (lib "web-server/scribblings/tutorial/examples/dummy-10.rkt") (lib "web-server/scribblings/tutorial/examples/iteration-8.rkt") (lib "web-server/scribblings/managers.scrbl") (lib "web-server/scribblings/safety-limits.scrbl") (lib "web-server/scribblings/tutorial/examples/iteration-7.rkt") (lib "web-server/scribblings/tutorial/examples/iteration-11.rkt") (lib "web-server/scribblings/tutorial/examples/dummy-3.rkt") (lib "web-server/scribblings/soft.scrbl") (lib "web-server/scribblings/tutorial/examples/model.rkt") (lib "web-server/scribblings/ctable-structs.scrbl") (lib "web-server/scribblings/dummy-stateless-servlet.rkt") (lib "web-server/scribblings/tutorial/examples/iteration-9s.rkt") (lib "web-server/scribblings/mime-types.scrbl") (lib "web-server/scribblings/tutorial/examples/iteration-2.rkt") (lib "web-server/scribblings/servlet.scrbl") (lib "web-server/scribblings/dispatch.scrbl") (lib "web-server/scribblings/page.scrbl") (lib "web-server/scribblings/contracts.scrbl") (lib "web-server/scribblings/private.scrbl") (lib "web-server/scribblings/namespace.scrbl") (lib "web-server/scribblings/misc-util.scrbl") (lib "web-server/scribblings/servlet-env.scrbl") (lib "web-server/scribblings/tutorial/examples/no-use-redirect.rkt") (lib "web-server/scribblings/mod-map.scrbl") (lib "web-server/scribblings/web.scrbl") (lib "web-server/scribblings/closure.scrbl") (lib "web-server/scribblings/tutorial/examples/model-3.rkt") (lib "web-server/scribblings/web-server.scrbl") (lib "web-server/scribblings/tutorial/examples/send-suspend-1.rkt") (lib "web-server/scribblings/tutorial/examples/iteration-10.rkt") (lib "web-server/scribblings/file-box.scrbl") (lib "web-server/scribblings/web-config-unit.scrbl") (lib "web-server/scribblings/tutorial/examples/model-2.rkt") (lib "web-server/scribblings/tutorial/examples/iteration-3.rkt") (lib "web-server/scribblings/faq.scrbl") (lib "web-server/scribblings/tutorial/dummy-sqlite.rkt") (lib "web-server/scribblings/http.scrbl") (lib "web-server/scribblings/test.scrbl") (lib "web-server/scribblings/dummy-v2-servlet.rkt") (lib "web-server/scribblings/dummy-v1-servlet.rkt") (lib "web-server/scribblings/responders.scrbl") (lib "web-server/scribblings/tutorial/examples/iteration-4.rkt") (lib "web-server/scribblings/web-param.scrbl") (lib "web-server/scribblings/templates.scrbl") (lib "web-server/scribblings/launch.scrbl") (lib "web-server/scribblings/connection-manager.scrbl") (lib "web-server/scribblings/tutorial/examples/iteration-1.rkt") (lib "web-server/scribblings/tutorial/examples/send-suspend-2.rkt") (lib "web-server/scribblings/dispatch-servlets.scrbl") (lib "web-server/scribblings/web-server-internal.scrbl") (lib "web-server/scribblings/cache-table.scrbl") (lib "web-server/scribblings/tutorial/examples/test-static.rkt") (lib "web-server/scribblings/url-param.scrbl"))) (name . "web-server-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:jay@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "e7b715820552a10e83864a8eb18eeca4dcb87aa8") (source . "git://github.com/racket/web-server/?path=web-server-doc") (source_url . "git://github.com/racket/web-server/?path=web-server-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("web-server-lib" . #hash((author . "jay@racket-lang.org") (authors . ("jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("srfi-lite-lib" ("base" #:version "7.4.0.5") "net-lib" "net-cookies-lib" "compatibility-lib" "scribble-text-lib" "parser-tools-lib" "rackunit-lib")) (description . "implementation (no documentation) part of web-server") (implies . ()) (last-checked . 1632904794) (last-edit . 1417659583) (last-updated . 1626298767) (modules . ((lib "web-server/page.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/add02.rkt") (lib "web-server/private/util.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/add02-base.rkt") (lib "web-server/private/dispatch-server-sig.rkt") (lib "web-server/private/define-closure.rkt") (lib "web-server/stuffers/base64.rkt") (lib "web-server/private/url-param.rkt") (lib "web-server/lang/serial-lambda.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/add-compat0.rkt") (lib "web-server/http/cookie.rkt") (lib "web-server/formlets/unsafe.rkt") (lib "web-server/dispatchers/dispatch.rkt") (lib "web-server/insta/insta.rkt") (lib "web-server/dispatchers/dispatch-timeout.rkt") (lib "web-server/lang/elim-callcc.rkt") (lib "web-server/dispatch/extend.rkt") (lib "web-server/configuration/configuration-table-structs.rkt") (lib "web-server/http/id-cookie.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/template-simple.rkt") (lib "web-server/dispatch/url-patterns.rkt") (lib "web-server/http/status-code.rkt") (lib "web-server/lang/web-cell-component.rkt") (lib "web-server/compat/0/http/response-structs.rkt") (lib "web-server/test.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/quiz02.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/add04-stuffer.rkt") (lib "web-server/servlet/setup.rkt") (lib "web-server/private/web-server-structs.rkt") (lib "web-server/http.rkt") (lib "web-server/dispatch.rkt") (lib "web-server/stuffers/stuffer.rkt") (lib "web-server/formlets/unsafe/embed.rkt") (lib "web-server/lang/lang-api.rkt") (lib "web-server/private/dispatch-server-unit.rkt") (lib "web-server/servlet-dispatch.rkt") (lib "web-server/http/response-structs.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/add-page.rkt") (lib "web-server/dispatch/http-expanders.rkt") (lib "web-server/stuffers/hmac-sha1.rkt") (lib "web-server/web-config-unit.rkt") (lib "web-server/formlets/embed.rkt") (lib "web-server/lang/soft.rkt") (lib "web-server/web-server-sig.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/add04.rkt") (lib "web-server/private/mime-types.rkt") (lib "web-server/lang/elim-letrec.rkt") (lib "web-server/private/dispatch-server-with-connect-unit.rkt") (lib "web-server/lang/base.rkt") (lib "web-server/formlets/lib.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/add06.rkt") (lib "web-server/lang/defun.rkt") (lib "web-server/http/json.rkt") (lib "web-server/dispatch/container.rkt") (lib "web-server/dispatchers/dispatch-lift.rkt") (lib "web-server/http/request.rkt") (lib "web-server/dispatchers/limit.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/cookie2.rkt") (lib "web-server/stuffers.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/wc-fake.rkt") (lib "web-server/lang/stuff-url.rkt") (lib "web-server/dispatch/serve.rkt") (lib "web-server/dispatchers/dispatch-method.rkt") (lib "web-server/main.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/bad-xexpr.rkt") (lib "web-server/formlets/stateless.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/mm01.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/add-ssd.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/add01.rkt") (lib "web-server/http/xexpr.rkt") (lib "web-server/lang.rkt") (lib "web-server/web-server.rkt") (lib "web-server/dispatchers/dispatch-servlets.rkt") (lib "web-server/configuration/responders.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/mm00.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/wc-comp.rkt") (lib "web-server/dispatchers/dispatch-stat.rkt") (lib "web-server/configuration/configuration-table.rkt") (lib "web-server/page/page.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/add-dispatch.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/basic.rkt") (lib "web-server/compat/0/http/cookie.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/add-simple.rkt") (lib "web-server/formlets/input.rkt") (lib "web-server/private/servlet.rkt") (lib "web-server/insta/lang/reader.rkt") (lib "web-server/managers/timeouts.rkt") (lib "web-server/http/digest-auth.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/add-param.rkt") (lib "web-server/lang/labels.rkt") (lib "web-server/lang/web.rkt") (lib "web-server/lang/web-param.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/hello.rkt") (lib "web-server/http/empty.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/quiz-lib.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/adjust.rkt") (lib "web-server/templates.rkt") (lib "web-server/servlet/web.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/wc.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/add-formlets1.rkt") (lib "web-server/private/cache-table.rkt") (lib "web-server/formlets/unsafe/input.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/dir.rkt") (lib "web-server/http/basic-auth.rkt") (lib "web-server/base/lang/reader.rkt") (lib "web-server/dispatchers/dispatch-sequencer.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/clear.rkt") (lib "web-server/lang/util.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/wc.rkt") (lib "web-server/lang/closure.rkt") (lib "web-server/lang/abort-resume.rkt") (lib "web-server/servlet-env.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/wc-fake.rkt") (lib "web-server/formlets/unsafe/dyn-syntax.rkt") (lib "web-server/private/launch.rkt") (lib "web-server/default-web-root/htdocs/servlets/configure.rkt") (lib "web-server/dispatchers/dispatch-files.rkt") (lib "web-server/compat/0/servlet/servlet-structs.rkt") (lib "web-server/servlet/servlet-structs.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/fupload.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/count.rkt") (lib "web-server/http/response.rkt") (lib "web-server/configuration/namespace.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/add-v2.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/add-formlets2.rkt") (lib "web-server/dispatchers/dispatch-log.rkt") (lib "web-server/private/timer.rkt") (lib "web-server/dispatch/bidi-match.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/soft.rkt") (lib "web-server/servlet.rkt") (lib "web-server/formlets.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/map.rkt") (lib "web-server/compat/0/coerce.rkt") (lib "web-server/lang/reader.rkt") (lib "web-server/stuffers/serialize.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/digest.rkt") (lib "web-server/dispatch/syntax.rkt") (lib "web-server/managers/lru.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/redirectget.rkt") (lib "web-server/stuffers/gzip.rkt") (lib "web-server/dispatch/coercion.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/add.rkt") (lib "web-server/lang/anormal.rkt") (lib "web-server/private/xexpr.rkt") (lib "web-server/private/raw-dispatch-server-connect-unit.rkt") (lib "web-server/dispatchers/dispatch-filter.rkt") (lib "web-server/dispatchers/dispatch-host.rkt") (lib "web-server/dispatchers/filesystem-map.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/add-native.rkt") (lib "web-server/lang/native.rkt") (lib "web-server/web-config-sig.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/template-compat0.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/port.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/error.rkt") (lib "web-server/http/request-structs.rkt") (lib "web-server/http/redirect.rkt") (lib "web-server/formlets/dyn-syntax.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/cookie.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/check-dir.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/add03.rkt") (lib "web-server/dispatchers/dispatch-pathprocedure.rkt") (lib "web-server/stuffers/store.rkt") (lib "web-server/safety-limits.rkt") (lib "web-server/web-server-unit.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/quiz01.rkt") (lib "web-server/servlet/web-cells.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/template-xexpr.rkt") (lib "web-server/dispatchers/dispatch-passwords.rkt") (lib "web-server/http/cookie-parse.rkt") (lib "web-server/formlets/servlet.rkt") (lib "web-server/formlets/unsafe/syntax.rkt") (lib "web-server/managers/manager.rkt") (lib "web-server/private/mod-map.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/add-formlets0.rkt") (lib "web-server/http/bindings.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/quiz.rkt") (lib "web-server/private/gzip.rkt") (lib "web-server/private/configure.rkt") (lib "web-server/formlets/unsafe/stateless-send.rkt") (lib "web-server/lang/file-box.rkt") (lib "web-server/default-web-root/configuration-table.rkt") (lib "web-server/private/connection-manager.rkt") (lib "web-server/dispatch/pattern.rkt") (lib "web-server/stuffers/hash.rkt") (lib "web-server/default-web-root/htdocs/lang-servlets/add-soft.rkt") (lib "web-server/lang/web-cells.rkt") (lib "web-server/formlets/syntax.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/template-full.rkt") (lib "web-server/managers/none.rkt") (lib "web-server/formlets/unsafe/lib.rkt") (lib "web-server/default-web-root/htdocs/servlets/examples/add.rkt"))) (name . "web-server-lib") (ring . 0) (search-terms . #hasheq((author:jay@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "e7b715820552a10e83864a8eb18eeca4dcb87aa8") (source . "git://github.com/racket/web-server/?path=web-server-lib") (source_url . "git://github.com/racket/web-server/?path=web-server-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("web-server-test" . #hash((author . "jay@racket-lang.org") (authors . ("jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "compatibility-lib" "eli-tester" "htdp-lib" "rackunit-lib" "web-server-lib" "net-cookies")) (description . "tests for web-server") (implies . ()) (last-checked . 1632904794) (last-edit . 1417659583) (last-updated . 1626298768) (modules . ((lib "tests/web-server/http/response-test.rkt") (lib "tests/web-server/dispatchers/all-dispatchers-tests.rkt") (lib "tests/web-server/e2e/echo/tests.rkt") (lib "tests/web-server/servlet/basic-auth-test.rkt") (lib "tests/web-server/stuffers-test.rkt") (lib "tests/web-server/configuration/all-configuration-tests.rkt") (lib "tests/web-server/http/all-http-tests.rkt") (lib "tests/web-server/e2e/read-write/server.rkt") (lib "tests/web-server/e2e/all-e2e-tests.rkt") (lib "tests/web-server/e2e/file-upload/tests.rkt") (lib "tests/web-server/formlets-test.rkt") (lib "tests/web-server/servlet-env/insta.rkt") (lib "tests/web-server/e2e/json/tests.rkt") (lib "tests/web-server/servlet/all-servlet-tests.rkt") (lib "tests/web-server/lang/labels-test.rkt") (lib "tests/web-server/http/cookies-test.rkt") (lib "tests/web-server/e2e/head/tests.rkt") (lib "tests/web-server/private/url-param-test.rkt") (lib "tests/web-server/pr/11125.rkt") (lib "tests/web-server/pr/galler2.rkt") (lib "tests/web-server/pr/27.rkt") (lib "tests/web-server/lang/file-box-test.rkt") (lib "tests/web-server/pr/cl-long.rkt") (lib "tests/web-server/e2e/echo/server.rkt") (lib "tests/web-server/private/all-private-tests.rkt") (lib "tests/web-server/pr/12658.rkt") (lib "tests/web-server/pr/12271.rkt") (lib "tests/web-server/lang/web-param-test.rkt") (lib "tests/web-server/run-all-tests.rkt") (lib "tests/web-server/private/define-closure-test.rkt") (lib "tests/web-server/e2e/tls/server.rkt") (lib "tests/web-server/e2e/read-write/tests.rkt") (lib "tests/web-server/stress/vs-hop/dynamic.rkt") (lib "tests/web-server/pr/42.rkt") (lib "tests/web-server/lang/abort-resume-test.rkt") (lib "tests/web-server/pr/length.rkt") (lib "tests/web-server/e2e/head/server.rkt") (lib "tests/web-server/private/gzip-test.rkt") (lib "tests/web-server/pr/lang-set.rkt") (lib "tests/web-server/pr/post-binding.rkt") (lib "tests/web-server/managers/all-managers-tests.rkt") (lib "tests/web-server/e2e/tls/tests.rkt") (lib "tests/web-server/lang-test.rkt") (lib "tests/web-server/test-tests.rkt") (lib "tests/web-server/http/xexpr.rkt") (lib "tests/web-server/template/examples/blog.rkt") (lib "tests/web-server/servlet-env/env.rkt") (lib "tests/web-server/dispatchers/dispatch-passwords-test.rkt") (lib "tests/web-server/pr/lang-modstar.rkt") (lib "tests/web-server/pr/10546.rkt") (lib "tests/web-server/pr/gh3/main.rkt") (lib "tests/web-server/pr/12658-mod.rkt") (lib "tests/web-server/dispatchers/dispatch-lang-test.rkt") (lib "tests/web-server/dispatchers/dispatch-servlets-test.rkt") (lib "tests/web-server/signatures-test.rkt") (lib "tests/web-server/private/request-test.rkt") (lib "tests/web-server/template/examples/blog-xexpr.rkt") (lib "tests/web-server/stress/vs-hop/static.rkt") (lib "tests/web-server/lang/defun-test.rkt") (lib "tests/web-server/dispatchers/filesystem-map-test.rkt") (lib "tests/web-server/dispatchers/dispatch-method.rkt") (lib "tests/web-server/pr/12638.rkt") (lib "tests/web-server/private/connection-manager-test.rkt") (lib "tests/web-server/lang/all-lang-tests.rkt") (lib "tests/web-server/http/json.rkt") (lib "tests/web-server/dispatchers/dispatch-host-test.rkt") (lib "tests/web-server/dispatchers/servlet-test-util.rkt") (lib "tests/web-server/private/cache-table-test.rkt") (lib "tests/web-server/stress/vs-snap/dynamic.rkt") (lib "tests/web-server/dispatch-test.rkt") (lib "tests/web-server/all-web-server-tests.rkt") (lib "tests/web-server/template/examples/run.rkt") (lib "tests/web-server/e2e/json/server.rkt") (lib "tests/web-server/pr/galler.rkt") (lib "tests/web-server/pr/bsl.rkt") (lib "tests/web-server/configuration/configuration-table-test.rkt") (lib "tests/web-server/e2e/file-upload/server.rkt") (lib "tests/web-server/http/digest-auth-test.rkt") (lib "tests/web-server/formlets/stateless.rkt") (lib "tests/web-server/util.rkt") (lib "tests/web-server/pr/12183.rkt") (lib "tests/web-server/lang/anormal-test.rkt") (lib "tests/web-server/pr/lang-submod.rkt") (lib "tests/web-server/private/response-test.rkt") (lib "tests/web-server/private/mime-types-test.rkt") (lib "tests/web-server/dispatchers/dispatch-log-test.rkt") (lib "tests/web-server/stress/vs-snap/static.rkt") (lib "tests/web-server/private/mod-map-test.rkt") (lib "tests/web-server/pr/methods.rkt") (lib "tests/web-server/formlets/formlet-star.rkt") (lib "tests/web-server/servlet/bindings-test.rkt") (lib "tests/web-server/servlet-env-test.rkt") (lib "tests/web-server/dispatchers/dispatch-files-test.rkt") (lib "tests/web-server/lang/stuff-url-test.rkt") (lib "tests/web-server/servlet/web-test.rkt") (lib "tests/web-server/servlet/helpers-test.rkt") (lib "tests/web-server/private/util-test.rkt") (lib "tests/web-server/pr/compat0.rkt") (lib "tests/web-server/http/util.rkt"))) (name . "web-server-test") (ring . 0) (search-terms . #hasheq((author:jay@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "e7b715820552a10e83864a8eb18eeca4dcb87aa8") (source . "git://github.com/racket/web-server/?path=web-server-test") (source_url . "git://github.com/racket/web-server/?path=web-server-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("web-sessions" . #hasheq((author . "nadeem@acm.org") (authors . ("nadeem@acm.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/web-sessions.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/web-sessions.txt") (test-failure-log . "server/built/test-fail/web-sessions.txt") (test-success-log . #f))) (checksum . "ba973ee46a41a81536ddf5d6a8ea8f928385b217") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Simple web sessions") (implies . ()) (last-checked . 1632904795) (last-edit . 1545797809) (last-updated . 1621110750) (modules . ((lib "web-sessions/example.rkt") (lib "web-sessions/main.rkt"))) (name . "web-sessions") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:nadeem@acm.org . #t) (ring:1 . #t) (web . #t))) (source . "https://bitbucket.org/nadeemabdulhamid/web-sessions.git") (tags . ("web")) (versions . #hash((default . #hasheq((checksum . "ba973ee46a41a81536ddf5d6a8ea8f928385b217") (source . "https://bitbucket.org/nadeemabdulhamid/web-sessions.git") (source_url . "https://bitbucket.org/nadeemabdulhamid/web-sessions.git"))))))) ("webapi" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "webapi" "doc/webapi@webapi/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/webapi.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/webapi.txt"))) (checksum . "c1a172e360db667be49dcd81eba85f4a35b73a94") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "sxml" "html-writing" "compatibility-lib" "web-server-lib" "racket-doc" "scribble-lib")) (description . "Implementations of a few web APIs, including OAuth2, PicasaWeb, and Blogger.") (implies . ()) (last-checked . 1632904796) (last-edit . 1382383606) (last-updated . 1502816524) (modules . ((lib "webapi/oauth2.rkt") (lib "webapi/blogger.rkt") (lib "webapi/private/unstable-lazy-require.rkt") (lib "webapi/scribblings/atom.scrbl") (lib "webapi/scribblings/picasa.scrbl") (lib "webapi/scribblings/blogger.scrbl") (lib "webapi/scribblings/oauth2.scrbl") (lib "webapi/atom-resource.rkt") (lib "webapi/atom.rkt") (lib "webapi/private/has-atom.rkt") (lib "webapi/private/oauth2-web.rkt") (lib "webapi/picasa.rkt") (lib "webapi/scribblings/config.rkt") (lib "webapi/scribblings/webapi.scrbl") (lib "webapi/main.rkt") (lib "webapi/private/net.rkt") (lib "webapi/private/sxml.rkt") (lib "webapi/private/oauth2.rkt"))) (name . "webapi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (net . #t) (oauth . #t) (ring:1 . #t))) (source . "git://github.com/rmculpepper/webapi#pkg") (tags . ("net" "oauth")) (versions . #hash((default . #hasheq((checksum . "c1a172e360db667be49dcd81eba85f4a35b73a94") (source . "git://github.com/rmculpepper/webapi#pkg") (source_url . "http://github.com/rmculpepper/webapi/tree/master#pkg"))))))) ("webscraperhelper" . #hasheq((author . "neil@neilvandyke.org") (authors . ("neil@neilvandyke.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "webscraperhelper" "doc/webscraperhelper@webscraperhelper/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/webscraperhelper.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/webscraperhelper.txt"))) (checksum . "0cc7cf1c6ea962ad03fcf18f9b3230090725f175") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "mcfly" "racket-doc" "scribble-lib")) (description . "Generating SXPath Queries from SXML Examples") (implies . ()) (last-checked . 1632904796) (last-edit . 1456658158) (last-updated . 1611633601) (modules . ((lib "webscraperhelper/webscraperhelper.scrbl") (lib "webscraperhelper/main.rkt"))) (name . "webscraperhelper") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:neil@neilvandyke.org . #t) (html . #t) (ring:1 . #t) (sxml . #t))) (source . "http://www.neilvandyke.org/racket/webscraperhelper.zip") (tags . ("html" "sxml")) (versions . #hash((default . #hasheq((checksum . "0cc7cf1c6ea962ad03fcf18f9b3230090725f175") (source . "http://www.neilvandyke.org/racket/webscraperhelper.zip") (source_url . "http://www.neilvandyke.org/racket/webscraperhelper.zip"))))))) ("wffi" . #hasheq((author . "racket@greghendershott.com") (authors . ("racket@greghendershott.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wffi.txt") (test-failure-log . "server/built/test-fail/wffi.txt") (test-success-log . #f))) (checksum . "03bd59bea2aa6e0a855de28fb5bb18769ed04b3b") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "http" "parser-tools-lib" "rackunit-lib")) (description . "Wrap web APIs using a literate programming style where documentation-is-specification.") (implies . ()) (last-checked . 1632904797) (last-edit . 1396443586) (last-updated . 1502816526) (modules . ((lib "wffi/api.rkt") (lib "wffi/server.rkt") (lib "wffi/parse-request.rkt") (lib "wffi/markdown.rkt") (lib "wffi/key-value.rkt") (lib "wffi/examples/server-example.rkt") (lib "wffi/parse-markdown.rkt") (lib "wffi/examples/google-plus.rkt") (lib "wffi/parse-response.rkt") (lib "wffi/json.rkt") (lib "wffi/main.rkt") (lib "wffi/examples/app.net.rkt") (lib "wffi/examples/horseebooks.rkt") (lib "wffi/examples/last.fm.rkt") (lib "wffi/examples/imgur.rkt") (lib "wffi/split.rkt") (lib "wffi/client.rkt") (lib "wffi/dict-merge.rkt"))) (name . "wffi") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:racket@greghendershott.com . #t) (ring:1 . #t) (web . #t))) (source . "github://github.com/greghendershott/wffi/master") (tags . ("web")) (versions . #hash((default . #hasheq((checksum . "03bd59bea2aa6e0a855de28fb5bb18769ed04b3b") (source . "github://github.com/greghendershott/wffi/master") (source_url . "http://github.com/greghendershott/wffi/tree/master"))))))) ("whalesong-tools" . #hasheq((author . "stchang@racket-lang.org vyadav@ccs.neu.edu") (authors . ("stchang@racket-lang.org" "vyadav@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/fail/whalesong-tools.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "980bd29cdb77749627f21edeeb6aa76a3f80750a") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ("base" "gui-lib" "drracket-plugin-lib" "whalesong")) (description . "DrRacket tool for compiling with Whalesong") (implies . ()) (last-checked . 1632904797) (last-edit . 1441723478) (last-updated . 1502816528) (modules . ((lib "whalesong-tools/tool.rkt"))) (name . "whalesong-tools") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (author:stchang@racket-lang.org . #t) (author:vyadav@ccs.neu.edu . #t) (javascript . #t) (ring:1 . #t) (whalesong . #t))) (source . "git://github.com/vishesh/drracket-whalesong") (tags . ("javascript" "whalesong")) (versions . #hash((default . #hasheq((checksum . "980bd29cdb77749627f21edeeb6aa76a3f80750a") (source . "git://github.com/vishesh/drracket-whalesong") (source_url . "http://github.com/vishesh/drracket-whalesong/tree/master"))))))) ("whereis" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "whereis" "doc/whereis@whereis/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/whereis.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/whereis.txt"))) (checksum . "4e987ee3bc57b2fb64c44c419edca4a91b8de305") (checksum-error . #f) (collection . "whereis") (conflicts . ()) (date-added . 1582327538) (dependencies . ("base" "racket-doc" "scribble-lib")) (description . "Finds local filesystem paths corresponding to Racket modules, collections, packages, etc.") (implies . ()) (last-checked . 1632904798) (last-edit . 1582327538) (last-updated . 1582559179) (modules . ((lib "whereis/private/whereis.rkt") (lib "whereis/whereis.scrbl") (lib "whereis/main.rkt") (lib "whereis/private/raco.rkt") (lib "whereis/private/collection-paths.rkt"))) (name . "whereis") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (filesystem . #t) (path . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-whereis.git") (tags . ("filesystem" "path")) (versions . #hash((default . #hasheq((checksum . "4e987ee3bc57b2fb64c44c419edca4a91b8de305") (source . "https://github.com/rmculpepper/racket-whereis.git") (source_url . "https://github.com/rmculpepper/racket-whereis.git"))))))) ("while-loop" . #hasheq((author . "clements@racket-lang.org dyoo@hashcollision.org") (authors . ("clements@racket-lang.org" "dyoo@hashcollision.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "dyoo-while-loop" "doc/dyoo-while-loop@while-loop/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/while-loop.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/while-loop.txt"))) (checksum . "69e33eef851c8db79536dcdb86bbfe113f7dcdda") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "parser-tools-doc" "racket-doc" "scribble-lib")) (description . "Danny Yoo's while-loop package") (implies . ()) (last-checked . 1632904798) (last-edit . 1399596155) (last-updated . 1502816528) (modules . ((lib "dyoo-while-loop/dyoo-while-loop.scrbl") (lib "dyoo-while-loop/main.rkt"))) (name . "while-loop") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-tag: . #t) (author:clements@racket-lang.org . #t) (author:dyoo@hashcollision.org . #t) (ring:1 . #t))) (source . "github://github.com/jbclements/while-loop/master/") (tags . ()) (versions . #hash((default . #hasheq((checksum . "69e33eef851c8db79536dcdb86bbfe113f7dcdda") (source . "github://github.com/jbclements/while-loop/master/") (source_url . "http://github.com/jbclements/while-loop/tree/master/"))))))) ("with-cache" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "with-cache" "doc/with-cache@with-cache/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/with-cache.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/with-cache.txt"))) (checksum . "4e1a5ced97bdbdca7affb4be4963f9f6c6cc8414") (checksum-error . #f) (collection . "with-cache") (conflicts . ()) (dependencies . ("base" "typed-racket-lib" "basedir" "scribble-lib" "racket-doc" "rackunit-lib" "pict-lib")) (description . "Filesystem-based caching") (implies . ()) (last-checked . 1632904798) (last-edit . 1470291210) (last-updated . 1580699457) (modules . ((lib "with-cache/scribblings/with-cache.scrbl") (lib "with-cache/test/main.rkt") (lib "with-cache/main.rkt") (lib "with-cache/private/with-cache.rkt"))) (name . "with-cache") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (cache . #t) (ring:1 . #t))) (source . "git://github.com/bennn/with-cache") (tags . ("cache")) (versions . #hash((default . #hasheq((checksum . "4e1a5ced97bdbdca7affb4be4963f9f6c6cc8414") (source . "git://github.com/bennn/with-cache") (source_url . "http://github.com/bennn/with-cache/tree/master"))))))) ("wn" . #hasheq((author . "anurag@mendhekar.com") (authors . ("anurag@mendhekar.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/wn.txt") (docs . (("main" "wn" "doc/wn@wn/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wn.txt") (test-failure-log . "server/built/test-fail/wn.txt") (test-success-log . #f))) (checksum . "3b134199c0a6c496323afd0f9573b33d5cc9e7e5") (checksum-error . #f) (collection . "wn") (conflicts . ()) (dependencies . ()) (description . "An FFI interface to WordNet 3.0 -- A Lexical Database for English") (implies . ()) (last-checked . 1632904799) (last-edit . 1442875832) (last-updated . 1559239684) (modules . ((lib "wn/wn.scrbl") (lib "wn/wn.rkt"))) (name . "wn") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:anurag@mendhekar.com . #t) (ffi . #t) (nlp . #t) (ring:1 . #t))) (source . "git://github.com/themetaschemer/wn") (tags . ("ffi" "nlp")) (versions . #hash((default . #hasheq((checksum . "3b134199c0a6c496323afd0f9573b33d5cc9e7e5") (source . "git://github.com/themetaschemer/wn") (source_url . "http://github.com/themetaschemer/wn/tree/master"))))))) ("word" . #hasheq((author . "ray.racine@gmail.com") (authors . ("ray.racine@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "word" "doc/word@word/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/word.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/word.txt"))) (checksum . "280659a27d2e3581fe64e8d406435cbcbadf3182") (checksum-error . #f) (collection . "word") (conflicts . ()) (dependencies . ("typed-racket-more" "typed-racket-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib" "typed-racket-doc")) (description . "Signed and Unsigned Word datatype for Racket using refinement types.\r\n") (implies . ()) (last-checked . 1632904799) (last-edit . 1528377052) (last-updated . 1627400494) (modules . ((lib "word/main.rkt") (lib "word/scribblings/word.scrbl"))) (name . "word") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ray.racine@gmail.com . #t) (binary . #t) (refinement . #t) (ring:1 . #t))) (source . "https://gitlab.com/RayRacine/word.git") (tags . ("binary" "refinement")) (versions . #hash((default . #hasheq((checksum . "280659a27d2e3581fe64e8d406435cbcbadf3182") (source . "https://gitlab.com/RayRacine/word.git") (source_url . "https://gitlab.com/RayRacine/word.git"))))))) ("words" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/words.txt") (test-failure-log . "server/built/test-fail/words.txt") (test-success-log . #f))) (checksum . "c8b9640ec5ec372306ead314d180c38510e32076") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1586117956) (dependencies . ("gui-lib" "base" "debug" "rackunit-lib")) (description . "generate lists of words") (implies . ()) (last-checked . 1632904799) (last-edit . 1586117956) (last-updated . 1621363015) (modules . ((lib "words/make-icons.rkt") (lib "words/app.rkt") (lib "words/main.rkt") (lib "words/kernscore.rkt") (lib "words/index.rkt") (lib "words/command.rkt"))) (name . "words") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:mb@mbtype.com . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/words.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c8b9640ec5ec372306ead314d180c38510e32076") (source . "https://github.com/mbutterick/words.git") (source_url . "https://github.com/mbutterick/words.git"))))))) ("wort" . #hasheq((author . "gamecodeshark@gmail.com") (authors . ("gamecodeshark@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "wort" "doc/wort@wort/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wort.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/wort.txt"))) (checksum . "433130f0f6f1fa90d7ed21b857d03bce856656b0") (checksum-error . #f) (collection . "wort") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "brag" "beautiful-racket" "beautiful-racket-lib" "br-parser-tools-lib" "scribble-lib" "racket-doc")) (description . "A tiny concatenative language with polymorphic type inference") (implies . ()) (last-checked . 1632904799) (last-edit . 1492475159) (last-updated . 1628016494) (modules . ((lib "wort/eval.rkt") (lib "wort/infer.rkt") (lib "wort/parser.rkt") (lib "wort/main.rkt") (lib "wort/ast.rkt") (lib "wort/tokenizer.rkt") (lib "wort/examples/sum.rkt") (lib "wort/lexer.rkt") (lib "wort/scribblings/wort.scrbl") (lib "wort/examples/higher-order.rkt") (lib "wort/examples/simple.rkt") (lib "wort/examples/scope.rkt") (lib "wort/examples/shuffles.rkt") (lib "wort/expander.rkt"))) (name . "wort") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:gamecodeshark@gmail.com . #t) (inference . #t) (lang . #t) (ring:1 . #t) (types . #t) (unification . #t))) (source . "git://github.com/robertkleffner/wort") (tags . ("inference" "lang" "types" "unification")) (versions . #hash((default . #hasheq((checksum . "433130f0f6f1fa90d7ed21b857d03bce856656b0") (source . "git://github.com/robertkleffner/wort") (source_url . "http://github.com/robertkleffner/wort/tree/master"))))))) ("wxme" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("wxme-lib" "gui-doc")) (description . "Decoding the WXME graphical file format in a text-only environment") (implies . ("wxme-lib")) (last-checked . 1632904800) (last-edit . 1417659583) (last-updated . 1620852056) (modules . ()) (name . "wxme") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "ae9f05300768c1b81e0cf1c7357eeff69cb2d4bf") (source . "git://github.com/racket/wxme/?path=wxme") (source_url . "git://github.com/racket/wxme/?path=wxme"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("wxme-lib" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("scheme-lib" "base" "compatibility-lib" "snip-lib")) (description . "implementation (no documentation) part of wxme") (implies . ()) (last-checked . 1632904800) (last-edit . 1417659583) (last-updated . 1620852056) (modules . ((lib "wxme/number.rkt") (lib "wxme/private/compat.rkt") (lib "wxme/private/class-help.rkt") (lib "wxme/comment.rkt") (lib "wxme/editor.rkt") (lib "wxme/wxme.rkt") (lib "wxme/xml.rkt") (lib "wxme/scheme.rkt") (lib "wxme/cache-image.rkt") (lib "wxme/private/readable-editor.rkt") (lib "wxme/test-case.rkt") (lib "wxme/text.rkt") (lib "wxme/read.rkt") (lib "wxme/image.rkt") (lib "wxme/main.rkt"))) (name . "wxme-lib") (ring . 0) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "ae9f05300768c1b81e0cf1c7357eeff69cb2d4bf") (source . "git://github.com/racket/wxme/?path=wxme-lib") (source_url . "git://github.com/racket/wxme/?path=wxme-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("wxme-test" . #hash((author . "mflatt@racket-lang.org") (authors . ("mflatt@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ae9f05300768c1b81e0cf1c7357eeff69cb2d4bf") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("rackunit" "wxme-lib" "base" ("gui-lib" #:version "1.41") "snip-lib")) (description . "tests for wxme") (implies . ()) (last-checked . 1632904800) (last-edit . 1485612096) (last-updated . 1620852057) (modules . ((lib "wxme/test/wxme.rkt") (lib "wxme/test/compare-with-text.rkt") (lib "wxme/test/image.rkt"))) (name . "wxme-test") (ring . 1) (search-terms . #hasheq((author:mflatt@racket-lang.org . #t) (main-tests . #t) (ring:1 . #t))) (source . "git://github.com/racket/wxme?path=wxme-test") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "ae9f05300768c1b81e0cf1c7357eeff69cb2d4bf") (source . "git://github.com/racket/wxme?path=wxme-test") (source_url . "http://github.com/racket/wxme/tree/master?path=wxme-test"))))))) ("wy-posn-util" . #hasheq((author . "maueroats@gmail.com racket@maueroats.fastmail.fm") (authors . ("maueroats@gmail.com" "racket@maueroats.fastmail.fm")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/wy-posn-util.txt") (docs . (("main" "wy-posn-util" "doc/wy-posn-util@wy-posn-util/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/wy-posn-util.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/wy-posn-util.txt"))) (checksum . "2665d883bba8f1f720e469b8f971e385be05eb05") (checksum-error . #f) (collection . "wy-posn-util") (conflicts . ()) (date-added . 1613085110) (dependencies . ("htdp-lib" "rackunit-lib" "base" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "Functions to work with 2d vectors (posn) in 2htdp.") (implies . ()) (last-checked . 1632904800) (last-edit . 1613699704) (last-updated . 1613699704) (modules . ((lib "wy-posn-util/scribblings/wy-posn-util.scrbl") (lib "wy-posn-util/main.rkt"))) (name . "wy-posn-util") (ring . 1) (search-terms . #hasheq((2htdp . #t) (:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:maueroats@gmail.com . #t) (author:racket@maueroats.fastmail.fm . #t) (ring:1 . #t))) (source . "https://github.com/maueroats/wy-posn-util.git") (tags . ("2htdp")) (versions . #hash((default . #hasheq((checksum . "2665d883bba8f1f720e469b8f971e385be05eb05") (source . "https://github.com/maueroats/wy-posn-util.git") (source_url . "https://github.com/maueroats/wy-posn-util.git"))))))) ("x11" . #hasheq((author . "laurent.orseau@gmail.com") (authors . ("laurent.orseau@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/x11.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/x11.txt"))) (checksum . "97c4a75872cfd2882c8895bba88b87a4ad12be0e") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "rackunit-lib" "compatibility-lib" "scheme-lib")) (description . "X11 bindings for Racket. Initially Jon Rafkind's work.") (implies . ()) (last-checked . 1632904801) (last-edit . 1385373872) (last-updated . 1615391760) (modules . ((lib "x11/keysym-util.rkt") (lib "x11/keysymdef.rkt") (lib "x11/x11.rkt") (lib "x11/test/test-x11.rkt") (lib "xlambda/rect.rkt") (lib "xlambda/xlambda.rkt") (lib "x11/xinerama.rkt") (lib "xlambda/screenstack.rkt") (lib "x11/fd.rkt") (lib "x11/x11-xpm.rkt") (lib "x11/utils.rkt") (lib "x11/xinput.rkt") (lib "x11/test/wormhole.rkt") (lib "x11/test/device.rkt") (lib "x11/test/xsnow.rkt"))) (name . "x11") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:laurent.orseau@gmail.com . #t) (ffi . #t) (linux . #t) (ring:1 . #t))) (source . "github://github.com/kazzmir/x11-racket/master/") (tags . ("ffi" "linux")) (versions . #hash((default . #hasheq((checksum . "97c4a75872cfd2882c8895bba88b87a4ad12be0e") (source . "github://github.com/kazzmir/x11-racket/master/") (source_url . "http://github.com/kazzmir/x11-racket/tree/master/"))))))) ("x64asm" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/x64asm.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/x64asm.txt"))) (checksum . "b8a4e9998428f4f0b1d083d74d9730e8369f0110") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1569204771) (dependencies . ("x64asm-lib" "x64asm-doc")) (description . "a simple x64 assembler written in Typed Racket ") (implies . ("x64asm-lib" "x64asm-doc")) (last-checked . 1632904802) (last-edit . 1569240331) (last-updated . 1617689977) (modules . ()) (name . "x64asm") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (assembler . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/yjqww6/racket-x64asm.git?path=x64asm") (tags . ("assembler" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "b8a4e9998428f4f0b1d083d74d9730e8369f0110") (source . "https://github.com/yjqww6/racket-x64asm.git?path=x64asm") (source_url . "https://github.com/yjqww6/racket-x64asm.git?path=x64asm"))))))) ("x64asm-doc" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "x64asm" "doc/x64asm@x64asm-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/x64asm-doc.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/x64asm-doc.txt"))) (checksum . "b8a4e9998428f4f0b1d083d74d9730e8369f0110") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1569204715) (dependencies . ("base" "x64asm-lib" "scribble-lib" "racket-doc" "typed-racket-doc" "typed-racket-lib")) (description . "") (implies . ()) (last-checked . 1632904803) (last-edit . 1569231766) (last-updated . 1617689978) (modules . ((lib "x64asm/scribblings/advanced.scrbl") (lib "x64asm/scribblings/registers.scrbl") (lib "x64asm/scribblings/sample.rkt") (lib "x64asm/scribblings/x64asm.scrbl") (lib "x64asm/scribblings/expe.scrbl") (lib "x64asm/scribblings/inst.scrbl"))) (name . "x64asm-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (:no-desc: . #t) (author:yj_qww6@126.com . #t) (docs . #t) (ring:1 . #t))) (source . "https://github.com/yjqww6/racket-x64asm.git?path=x64asm-doc") (tags . ("docs")) (versions . #hash((default . #hasheq((checksum . "b8a4e9998428f4f0b1d083d74d9730e8369f0110") (source . "https://github.com/yjqww6/racket-x64asm.git?path=x64asm-doc") (source_url . "https://github.com/yjqww6/racket-x64asm.git?path=x64asm-doc"))))))) ("x64asm-lib" . #hasheq((author . "yj_qww6@126.com") (authors . ("yj_qww6@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/x64asm-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/x64asm-lib.txt"))) (checksum . "b8a4e9998428f4f0b1d083d74d9730e8369f0110") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1569204667) (dependencies . ("base" "typed-racket-lib")) (description . "a simple x64 assembler written in Typed Racket") (implies . ()) (last-checked . 1632904803) (last-edit . 1569231777) (last-updated . 1617689978) (modules . ((lib "x64asm/base.rkt") (lib "x64asm/private/encode-common.rkt") (lib "x64asm/unsafe.rkt") (lib "x64asm/private/trace.rkt") (lib "x64asm/main.rkt") (lib "x64asm/private/operand.rkt") (lib "x64asm/private/instruction.rkt") (lib "x64asm/private/macros.rkt") (lib "x64asm/untyped.rkt") (lib "x64asm/private/unsafe.rkt") (lib "x64asm/private/cases3.rkt") (lib "x64asm/private/lift.rkt") (lib "x64asm/private/prefix.rkt") (lib "x64asm/private/sizes.rkt") (lib "x64asm/private/operand-helper.rkt") (lib "x64asm/private/encode.rkt") (lib "x64asm/private/registers.rkt") (lib "x64asm/private/dispatch2.rkt") (lib "x64asm/private/inst.rkt") (lib "x64asm/private/assembler.rkt") (lib "x64asm/private/sse.rkt") (lib "x64asm/private/helper.rkt") (lib "x64asm/well-typed.rkt") (lib "x64asm/private/patterns.rkt") (lib "x64asm/private/emit.rkt") (lib "x64asm/plain.rkt"))) (name . "x64asm-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (assembler . #t) (author:yj_qww6@126.com . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/yjqww6/racket-x64asm.git?path=x64asm-lib") (tags . ("assembler" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "b8a4e9998428f4f0b1d083d74d9730e8369f0110") (source . "https://github.com/yjqww6/racket-x64asm.git?path=x64asm-lib") (source_url . "https://github.com/yjqww6/racket-x64asm.git?path=x64asm-lib"))))))) ("xdgbasedir0" . #hasheq((author . "lwoodman@vlifesystems.com") (authors . ("lwoodman@vlifesystems.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "xdgbasedir"))) (failure-log . "server/built/fail/xdgbasedir0.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "ab6df3c5307b776547a9904625b2081a760e3045") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "Functions to simplify access to the XDG Base Directory Specification.") (implies . ()) (last-checked . 1632904804) (last-edit . 1380522697) (last-updated . 1502816532) (modules . ((lib "xdgbasedir0/xdgbasedir/main.rkt") (lib "xdgbasedir0/xdgbasedir/scribblings/changelog.scrbl") (lib "xdgbasedir0/xdgbasedir/scribblings/xdgbasedir.scrbl") (lib "xdgbasedir0/xdgbasedir/xdgbasedir.rkt") (lib "xdgbasedir0/xdgbasedir/scribblings/licence.scrbl") (lib "xdgbasedir0/xdgbasedir/tests/test-helpers.rkt") (lib "xdgbasedir0/xdgbasedir/tests/xdgbasedir-test.rkt") (lib "xdgbasedir0/xdgbasedir/scribblings/exported-functions.scrbl") (lib "xdgbasedir0/xdgbasedir/scribblings/development.scrbl"))) (name . "xdgbasedir0") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:lwoodman@vlifesystems.com . #t) (ring:1 . #t) (unix . #t))) (source . "github://github.com/lawrencewoodman/xdgbasedir_rkt/v0.3") (tags . ("unix")) (versions . #hash((default . #hasheq((checksum . "ab6df3c5307b776547a9904625b2081a760e3045") (source . "github://github.com/lawrencewoodman/xdgbasedir_rkt/v0.3") (source_url . "http://github.com/lawrencewoodman/xdgbasedir_rkt/tree/v0.3"))))))) ("xe" . #hasheq((author . "tonygarnockjones@gmail.com") (authors . ("tonygarnockjones@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xe.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xe.txt"))) (checksum . "84e5cf72c34e6b3778c9353c22a3ebb0bb943d20") (checksum-error . #f) (collection . "xe") (conflicts . ()) (date-added . 1591344082) (dependencies . ("base" "base" "rackunit-lib")) (description . "xexpr XML utilities, plus traversal and filtering") (implies . ()) (last-checked . 1632904805) (last-edit . 1591344123) (last-updated . 1570396943) (modules . ((lib "xe/main.rkt"))) (name . "xe") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:tonygarnockjones@gmail.com . #t) (ring:1 . #t) (xexpr . #t) (xml . #t))) (source . "https://github.com/tonyg/racket-xe.git") (tags . ("xexpr" "xml")) (versions . #hash((default . #hasheq((checksum . "84e5cf72c34e6b3778c9353c22a3ebb0bb943d20") (source . "https://github.com/tonyg/racket-xe.git") (source_url . "https://github.com/tonyg/racket-xe.git"))))))) ("xenomorph" . #hasheq((author . "mb@mbtype.com") (authors . ("mb@mbtype.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "xenomorph" "doc/xenomorph@xenomorph/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xenomorph.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xenomorph.txt"))) (checksum . "0ea62de7d688effc1179589215529537e3eeb858") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1556661158) (dependencies . ("base" "beautiful-racket-lib" "rackunit-lib" "sugar" "debug" "racket-doc" "scribble-lib")) (description . "binary encoder [in development]") (implies . ()) (last-checked . 1632904805) (last-edit . 1556661158) (last-updated . 1621355967) (modules . ((lib "xenomorph/pointer.rkt") (lib "xenomorph/main.rkt") (lib "xenomorph/vector.rkt") (lib "xenomorph/bytes.rkt") (lib "xenomorph/list.rkt") (lib "xenomorph/test/versioned-dict-test.rkt") (lib "xenomorph/test/number-test.rkt") (lib "xenomorph/test/api-test.rkt") (lib "xenomorph/test/stream-test.rkt") (lib "xenomorph/test/vector-test.rkt") (lib "xenomorph/test/list-test.rkt") (lib "xenomorph/dict.rkt") (lib "xenomorph/test/optional-test.rkt") (lib "xenomorph/number.rkt") (lib "xenomorph/int.rkt") (lib "xenomorph/test/pointer-test.rkt") (lib "xenomorph/string.rkt") (lib "xenomorph/optional.rkt") (lib "xenomorph/reserved.rkt") (lib "xenomorph/symbol.rkt") (lib "xenomorph/test/bitfield-test.rkt") (lib "xenomorph/bitfield.rkt") (lib "xenomorph/base.rkt") (lib "xenomorph/test/bytes-test.rkt") (lib "xenomorph/scribblings/xenomorph.scrbl") (lib "xenomorph/stream.rkt") (lib "xenomorph/test/main.rkt") (lib "xenomorph/test/dict-test.rkt") (lib "xenomorph/test/reserved-test.rkt") (lib "xenomorph/test/symbol-test.rkt") (lib "xenomorph/versioned-dict.rkt") (lib "xenomorph/test/string-test.rkt") (lib "xenomorph/enum.rkt") (lib "xenomorph/util.rkt") (lib "xenomorph/test/enum-test.rkt"))) (name . "xenomorph") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mb@mbtype.com . #t) (binary . #t) (ring:1 . #t))) (source . "https://github.com/mbutterick/xenomorph.git") (tags . ("binary")) (versions . #hash((default . #hasheq((checksum . "0ea62de7d688effc1179589215529537e3eeb858") (source . "https://github.com/mbutterick/xenomorph.git") (source_url . "https://github.com/mbutterick/xenomorph.git"))))))) ("xexpr-path" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "xexpr-path" "doc/xexpr-path@xexpr-path/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xexpr-path.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xexpr-path.txt"))) (checksum . "59f07164a5735441953c411a78d7dbe2f8ebcdc0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "XML Expression Path Lookup") (implies . ()) (last-checked . 1632904805) (last-edit . 1385537382) (last-updated . 1502816532) (modules . ((lib "xexpr-path/main.rkt") (lib "xexpr-path/xexpr-path.scrbl"))) (name . "xexpr-path") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (ring:1 . #t) (xml . #t))) (source . "github://github.com/mordae/racket-xexpr-path/master") (tags . ("xml")) (versions . #hash((default . #hasheq((checksum . "59f07164a5735441953c411a78d7dbe2f8ebcdc0") (source . "github://github.com/mordae/racket-xexpr-path/master") (source_url . "http://github.com/mordae/racket-xexpr-path/tree/master"))))))) ("xfunctions" . #hasheq((author . "wesley.bitomski@gmail.com") (authors . ("wesley.bitomski@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/xfunctions.txt") (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xfunctions.txt") (test-failure-log . "server/built/test-fail/xfunctions.txt") (test-success-log . #f))) (checksum . "a8c545d55ee1d9df715ccc44fb22eec463e0f206") (checksum-error . #f) (collection . use-pkg-name) (conflicts . ()) (dependencies . (("base") ("racket") ("xfunctions-lib") ("xfunctions-doc"))) (description . "Extended Functional Combinators") (implies . ()) (last-checked . 1632904806) (last-edit . 1515413167) (last-updated . 1515417539) (modules . ((lib "xfunctions/xfunctions-lib/xfunctions.rkt") (lib "xfunctions/main.rkt") (lib "xfunctions/xfunctions-doc/xfunctions.scrbl"))) (name . "xfunctions") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (author:wesley.bitomski@gmail.com . #t) (other . #t) (ring:1 . #t))) (source . "https://github.com/wesleybits/xfunctions.git") (tags . ("other")) (versions . #hash((default . #hasheq((checksum . "a8c545d55ee1d9df715ccc44fb22eec463e0f206") (source . "https://github.com/wesleybits/xfunctions.git") (source_url . "https://github.com/wesleybits/xfunctions.git"))))))) ("xfunctions-doc" . #hasheq((author . "wesley.bitomski@gmail.com") (authors . ("wesley.bitomski@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xfunctions-doc.txt") (test-failure-log . "server/built/test-fail/xfunctions-doc.txt") (test-success-log . #f))) (checksum . "a8c545d55ee1d9df715ccc44fb22eec463e0f206") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . (("base") ("racket") ("sandbox-lib") ("scribble-lib") ("racket-doc") ("xfunctions-lib"))) (description . "Documentation for xfunctions") (implies . ()) (last-checked . 1632904807) (last-edit . 1515107616) (last-updated . 1515417539) (modules . ((lib "xfunctions-doc/xfunctions.scrbl"))) (name . "xfunctions-doc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:wesley.bitomski@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/wesleybits/xfunctions.git?path=xfunctions-doc") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a8c545d55ee1d9df715ccc44fb22eec463e0f206") (source . "https://github.com/wesleybits/xfunctions.git?path=xfunctions-doc") (source_url . "https://github.com/wesleybits/xfunctions.git?path=xfunctions-doc"))))))) ("xfunctions-lib" . #hasheq((author . "wesley.bitomski@gmail.com") (authors . ("wesley.bitomski@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xfunctions-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xfunctions-lib.txt"))) (checksum . "a8c545d55ee1d9df715ccc44fb22eec463e0f206") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . (("base") ("racket") ("rackunit-lib"))) (description . "Functional bits of XFunctions") (implies . ()) (last-checked . 1632904807) (last-edit . 1515107554) (last-updated . 1515417539) (modules . ((lib "xfunctions-lib/xfunctions.rkt"))) (name . "xfunctions-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:wesley.bitomski@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/wesleybits/xfunctions.git?path=xfunctions-lib") (tags . ()) (versions . #hash((default . #hasheq((checksum . "a8c545d55ee1d9df715ccc44fb22eec463e0f206") (source . "https://github.com/wesleybits/xfunctions.git?path=xfunctions-lib") (source_url . "https://github.com/wesleybits/xfunctions.git?path=xfunctions-lib"))))))) ("xiden" . #hasheq((author . "sage@sagegerard.com") (authors . ("sage@sagegerard.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "xiden-white-paper" "doc/xiden-white-paper@xiden/index.html") ("main" "xiden-guide" "doc/xiden-guide@xiden/index.html") ("main" "xiden-index" "doc/xiden-index@xiden/index.html") ("main" "xiden-reference" "doc/xiden-reference@xiden/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xiden.txt") (test-failure-log . "server/built/test-fail/xiden.txt") (test-success-log . #f))) (checksum . "fc38a9f436e8c074008fb296d268d4f6c154e4c7") (checksum-error . #f) (collection . "xiden") (conflicts . ()) (date-added . 1607553038) (dependencies . ("base" "compatibility-lib" "db-lib" "rackunit-lib" "sandbox-lib" "scribble-lib" "net-doc" "racket-doc")) (description . "Flexibly distributes software. Does not have the same limits as raco pkg.") (implies . ()) (last-checked . 1632904808) (last-edit . 1625183249) (last-updated . 1630438795) (modules . ((lib "xiden/docs/reference/modules/file.scrbl") (lib "xiden/cmdline.rkt") (lib "xiden/docs/reference/modules/signature/snake-oil.scrbl") (lib "xiden/docs/reference/modules/archive.scrbl") (lib "xiden/docs/reference/modules/signature/base.scrbl") (lib "xiden/docs/reference/modules/codec.scrbl") (lib "xiden/examples/determinism/lock.rkt") (lib "xiden/launcher.rkt") (lib "xiden/docs/reference/background.scrbl") (lib "xiden/examples/signature-checking/sign.rkt") (lib "xiden/examples/generated-racket-bindings/program.rkt") (lib "xiden/docs/reference/modules/dig/memory.scrbl") (lib "xiden/examples/integrity-checking/launcher.rkt") (lib "xiden/integrity/base.rkt") (lib "xiden/docs/reference/modules/integrity.scrbl") (lib "xiden/docs/reference/maintenance.scrbl") (lib "xiden/docs/reference/modules/subprogram.scrbl") (lib "xiden/docs/reference/modules/message.scrbl") (lib "xiden/examples/from-guide/definition.rkt") (lib "xiden/examples/locks/defn.rkt") (lib "xiden/examples/cryptography-backends/openssl-subprocess-backend.rkt") (lib "xiden/examples/versioning/loud1.rkt") (lib "xiden/examples/determinism/server.rkt") (lib "xiden/docs/reference/modules/security.scrbl") (lib "xiden/rfc4648.rkt") (lib "xiden/docs/reference/modules/system.scrbl") (lib "xiden/examples/signature-checking/defn.rkt") (lib "xiden/docs/reference/modules/integrity/base.scrbl") (lib "xiden/signature/base.rkt") (lib "xiden/examples/self-hosting/launch.rkt") (lib "xiden/state.rkt") (lib "xiden/examples/abstract-outputs/install-first.rkt") (lib "xiden/docs/reference/maintenance/basics.scrbl") (lib "xiden/integrity.rkt") (lib "xiden/cli.rkt") (lib "xiden/codec.rkt") (lib "xiden/examples/generated-racket-bindings/sources/v1.rkt") (lib "xiden/query.rkt") (lib "xiden/examples/generated-racket-bindings/sources/symlinked.rkt") (lib "xiden/examples/generated-racket-bindings/launch.rkt") (lib "xiden/input.rkt") (lib "xiden/examples/input-checking/launch.rkt") (lib "xiden/examples/input-overriding/launcher.rkt") (lib "xiden/dig.rkt") (lib "xiden/racket-version.rkt") (lib "xiden/examples/versioning/loud0.rkt") (lib "xiden/docs/shared.rkt") (lib "xiden/examples/racket-modules/launch.rkt") (lib "xiden/pkgdef.rkt") (lib "xiden/url.rkt") (lib "xiden/file.rkt") (lib "xiden/transaction.rkt") (lib "xiden/examples/signature-checking/launcher.rkt") (lib "xiden/examples/package-dependencies/program.rkt") (lib "xiden/examples/input-output-selection/launch.rkt") (lib "xiden/docs/reference/modules/state.scrbl") (lib "xiden/docs/reference/modules/dig/http.scrbl") (lib "xiden/docs/reference/modules/signature/ffi.scrbl") (lib "xiden/docs/reference/modules/format.scrbl") (lib "xiden/monad.rkt") (lib "xiden/subprogram.rkt") (lib "xiden/main.rkt") (lib "xiden/docs/guide/introduction.scrbl") (lib "xiden/pkgdef/static.rkt") (lib "xiden/integrity/ffi.rkt") (lib "xiden/docs/reference/modules/version.scrbl") (lib "xiden/crypto.rkt") (lib "xiden/l10n/shared.rkt") (lib "xiden/docs/reference/modules/integrity/ffi.scrbl") (lib "xiden/signature.rkt") (lib "xiden/docs/reference/modules/dig/filesystem.scrbl") (lib "xiden/examples/generated-racket-bindings/sources/v2.rkt") (lib "xiden/docs/guide/launchers.scrbl") (lib "xiden/docs/reference/modules/source.scrbl") (lib "xiden/examples/integrity-checking/defn.rkt") (lib "xiden/docs/reference/modules/cmdline.scrbl") (lib "xiden/docs/reference/modules/output.scrbl") (lib "xiden/examples/determinism/defn.rkt") (lib "xiden/docs/reference/modules/input.scrbl") (lib "xiden/docs/guide/xiden-guide.scrbl") (lib "xiden/examples/versioning/launcher.rkt") (lib "xiden/version.rkt") (lib "xiden/examples/input-overriding/defn.rkt") (lib "xiden/docs/reference/modules/main.scrbl") (lib "xiden/examples/output-conflicts/launcher.rkt") (lib "xiden/examples/workspaces/launcher.rkt") (lib "xiden/dig/http.rkt") (lib "xiden/examples/abstract-outputs/install-second.rkt") (lib "xiden/docs/reference/modules/racket-module.scrbl") (lib "xiden/examples/package-dependencies/defn.rkt") (lib "xiden/string.rkt") (lib "xiden/examples/racket-modules/program.rkt") (lib "xiden/racket-module.rkt") (lib "xiden/examples/versioning/quiet0.rkt") (lib "xiden/docs/index/xiden-index.scrbl") (lib "xiden/docs/reference/modules/dig.scrbl") (lib "xiden/dig/filesystem.rkt") (lib "xiden/l10n.rkt") (lib "xiden/examples/locks/launch.rkt") (lib "xiden/port.rkt") (lib "xiden/examples/input-proliferation/launcher.rkt") (lib "xiden/docs/reference/modules/cli-flag.scrbl") (lib "xiden/examples/self-hosting/defn.rkt") (lib "xiden/notary.rkt") (lib "xiden/docs/reference/modules/setting.scrbl") (lib "xiden/examples/determinism/launcher.rkt") (lib "xiden/examples/input-proliferation/defn.rkt") (lib "xiden/examples/input-output-selection/defn.rkt") (lib "xiden/docs/reference/maintenance/affirmations.scrbl") (lib "xiden/docs/reference/modules/query.scrbl") (lib "xiden/examples/from-guide/my-xiden.rkt") (lib "xiden/examples/package-dependencies/launch.rkt") (lib "xiden/docs/guide/setup.scrbl") (lib "xiden/examples/package-dependencies/other.rkt") (lib "xiden/examples/input-checking/defn.rkt") (lib "xiden/archive.rkt") (lib "xiden/docs/reference/xiden-reference.scrbl") (lib "xiden/package.rkt") (lib "xiden/docs/white-paper/xiden-white-paper.scrbl") (lib "xiden/signature/snake-oil.rkt") (lib "xiden/examples/abstract-inputs/launcher.rkt") (lib "xiden/artifact.rkt") (lib "xiden/docs/reference/modules/artifact.scrbl") (lib "xiden/path.rkt") (lib "xiden/signature/ffi.rkt") (lib "xiden/docs/reference/modules/crypto.scrbl") (lib "xiden/examples/output-conflicts/lub.rkt") (lib "xiden/examples/output-conflicts/dub.rkt") (lib "xiden/examples/generated-racket-bindings/defn.rkt") (lib "xiden/docs/guide/outroduction.scrbl") (lib "xiden/examples/racket-modules/defn.rkt") (lib "xiden/examples/allow-racket-versions/launcher.rkt") (lib "xiden/message.rkt") (lib "xiden/docs/reference/modules/launcher.scrbl") (lib "xiden/l10n/en-us.rkt") (lib "xiden/docs/reference/modules/string.scrbl") (lib "xiden/examples/abstract-inputs/defn.rkt") (lib "xiden/docs/reference/modules/printer.scrbl") (lib "xiden/format.rkt") (lib "xiden/docs/guide/creating-packages.scrbl") (lib "xiden/docs/reference/modules/l10n.scrbl") (lib "xiden/cli-flag.rkt") (lib "xiden/docs/reference/modules/signature.scrbl") (lib "xiden/docs/reference/modules/port.scrbl") (lib "xiden/output.rkt") (lib "xiden/security.rkt") (lib "xiden/docs/reference/modules/notary.scrbl") (lib "xiden/printer.rkt") (lib "xiden/examples/workspaces/launcher2.rkt") (lib "xiden/docs/reference/modules/pkgdef.scrbl") (lib "xiden/source.rkt") (lib "xiden/docs/reference/modules/pkgdef/static.scrbl") (lib "xiden/examples/workspaces/definition.rkt") (lib "xiden/docs/guide/project.scrbl") (lib "xiden/docs/reference/modules/url.scrbl") (lib "xiden/examples/allow-racket-versions/defn.rkt") (lib "xiden/docs/reference/modules/cli.scrbl") (lib "xiden/docs/reference/modules/monad.scrbl") (lib "xiden/dig/memory.rkt") (lib "xiden/setting.rkt") (lib "xiden/examples/abstract-outputs/launcher.rkt") (lib "xiden/examples/maximum-trust/dangerous.rkt") (lib "xiden/docs/reference/modules/package.scrbl") (lib "xiden/system.rkt"))) (name . "xiden") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:sage@sagegerard.com . #t) (dependency-management . #t) (guix . #t) (package . #t) (ring:1 . #t))) (source . "https://github.com/zyrolasting/xiden.git") (tags . ("dependency-management" "guix" "package")) (versions . #hash((default . #hasheq((checksum . "fc38a9f436e8c074008fb296d268d4f6c154e4c7") (source . "https://github.com/zyrolasting/xiden.git") (source_url . "https://github.com/zyrolasting/xiden.git"))))))) ("xlang" . #hasheq((author . "samth@ccs.neu.edu") (authors . ("samth@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xlang.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xlang.txt"))) (checksum . "6672450a99cdf9aed7dcbcde2ab8e76063966973") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "A minimal combinator language, created for PLT Game #1") (implies . ()) (last-checked . 1632904808) (last-edit . 1354727298) (last-updated . 1502816532) (modules . ((lib "xlang/example.rkt") (lib "xlang/main.rkt"))) (name . "xlang") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:samth@ccs.neu.edu . #t) (language . #t) (ring:1 . #t))) (source . "github://github.com/samth/xlang/master") (tags . ("language")) (versions . #hash((default . #hasheq((checksum . "6672450a99cdf9aed7dcbcde2ab8e76063966973") (source . "github://github.com/samth/xlang/master") (source_url . "http://github.com/samth/xlang/tree/master"))))))) ("xlist" . #hasheq((author . "racket@suzanne.soy") (authors . ("racket@suzanne.soy")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "xlist" "doc/xlist@xlist/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xlist.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xlist.txt"))) (checksum . "e82c02f99186b062df86a92dc63a954861e36064") (checksum-error . #f) (collection . "xlist") (conflicts . ()) (date-added . 1614799579) (dependencies . ("base" "rackunit-lib" "mutable-match-lambda" "scribble-enhanced" "multi-id" "type-expander" "typed-racket-lib" "typed-racket-more" "phc-toolkit" "reprovide-lang" "match-string" "scribble-lib" "racket-doc" "typed-racket-doc" "scribble-math")) (description . "Fancy lists, with bounded or unbounded repetition of elements. Can be used as a type or match pattern.") (implies . ()) (last-checked . 1632904809) (last-edit . 1614889861) (last-updated . 1617550568) (modules . ((lib "xlist/split-xlist.rkt") (lib "xlist/scribblings/xlist-untyped.scrbl") (lib "xlist/test/test-match-typed.rkt") (lib "xlist/once-identifier.rkt") (lib "xlist/test/test-type-superscripts.rkt") (lib "xlist/between.rkt") (lib "xlist/test/test-match.rkt") (lib "xlist/test/test-split-xlist.rkt") (lib "xlist/implementation.rkt") (lib "xlist/test/test-split-xlist-ann.rkt") (lib "xlist/scribblings/xlist.scrbl") (lib "xlist/scribblings/identifiers.scrbl") (lib "xlist/test/test-type.rkt") (lib "xlist/scribblings/split-xlist.scrbl") (lib "xlist/scribble-enhanced.rkt") (lib "xlist/caret-identifier.rkt") (lib "xlist/untyped.rkt") (lib "xlist/infinity-identifier.rkt") (lib "xlist/main.rkt"))) (name . "xlist") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:racket@suzanne.soy . #t) (match . #t) (ring:1 . #t) (typed-racket . #t))) (source . "https://github.com/jsmaniac/xlist.git#main") (tags . ("match" "typed-racket")) (versions . #hash((default . #hasheq((checksum . "e82c02f99186b062df86a92dc63a954861e36064") (source . "https://github.com/jsmaniac/xlist.git#main") (source_url . "https://github.com/jsmaniac/xlist.git#main"))))))) ("xml-html" . #hasheq((author . "zaomir@outlook.com") (authors . ("zaomir@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xml-html.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xml-html.txt"))) (checksum . "b4d38ef693d5dc1397c0a7dd822153617c41ea16") (checksum-error . #f) (collection . #f) (conflicts . ()) (dependencies . ()) (description . "none") (implies . ()) (last-checked . 1632904810) (last-edit . 1529233013) (last-updated . 1529233013) (modules . ()) (name . "xml-html") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:zaomir@outlook.com . #t) (ring:1 . #t))) (source . "https://github.com/zaoqi/xml-html.git") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b4d38ef693d5dc1397c0a7dd822153617c41ea16") (source . "https://github.com/zaoqi/xml-html.git") (source_url . "https://github.com/zaoqi/xml-html.git"))))))) ("xml-rpc" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "xml-rpc" "doc/xml-rpc@xml-rpc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xml-rpc.txt") (test-failure-log . "server/built/test-fail/xml-rpc.txt") (test-success-log . #f))) (checksum . "ff4bb8aed216fcde3ef34c78908747dbfe026049") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "web-server-lib" "racket-doc" "rackunit-lib" "scribble-lib" "web-server-doc" "net-doc")) (description . "A native Racket XML-RPC client and server library") (implies . ()) (last-checked . 1632904810) (last-edit . 1372734358) (last-updated . 1584555201) (modules . ((lib "tests/net/xml-rpc/serialise-test.rkt") (lib "net/xml-rpc/protocol.rkt") (lib "tests/net/xml-rpc/run-tests.rkt") (lib "net/xml-rpc/serialise.rkt") (lib "net/xml-rpc/client.rkt") (lib "net/xml-rpc/core.rkt") (lib "tests/net/xml-rpc/core-test.rkt") (lib "net/xml-rpc/xml-rpc.rkt") (lib "net/xml-rpc/xml-rpc.scrbl") (lib "net/xml-rpc/base.rkt") (lib "net/xml-rpc.rkt") (lib "tests/net/xml-rpc/all-xml-rpc-tests.rkt") (lib "tests/net/xml-rpc/util.rkt") (lib "tests/net/xml-rpc/protocol-test.rkt") (lib "net/xml-rpc/server-core.rkt") (lib "tests/net/xml-rpc/server-test.rkt") (lib "net/xml-rpc/server.rkt"))) (name . "xml-rpc") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (net . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/xml-rpc/master") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "ff4bb8aed216fcde3ef34c78908747dbfe026049") (source . "github://github.com/jeapostrophe/xml-rpc/master") (source_url . "http://github.com/jeapostrophe/xml-rpc/tree/master"))))))) ("xmllint-win32-x86_64" . #hasheq((author . "philip@philipmcgrath.com") (authors . ("philip@philipmcgrath.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xmllint-win32-x86_64.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xmllint-win32-x86_64.txt"))) (checksum . "8b3ff2681a47bf0fb0036c8b900526e7a7a63086") (checksum-error . #f) (collection . "xmllint-win32-x86_64") (conflicts . ()) (dependencies . ("base")) (description . "A platform-specific Racket package providing xmllint.exe for Windows") (implies . ()) (last-checked . 1632904811) (last-edit . 1535930965) (last-updated . 1561230935) (modules . ((lib "xmllint-win32-x86_64/main.rkt"))) (name . "xmllint-win32-x86_64") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:philip@philipmcgrath.com . #t) (ffi . #t) (ring:1 . #t) (xml . #t))) (source . "https://github.com/LiberalArtist/xmllint-win32-x86_64.git") (tags . ("ffi" "xml")) (versions . #hash((default . #hasheq((checksum . "8b3ff2681a47bf0fb0036c8b900526e7a7a63086") (source . "https://github.com/LiberalArtist/xmllint-win32-x86_64.git") (source_url . "https://github.com/LiberalArtist/xmllint-win32-x86_64.git"))))))) ("xmlns" . #hasheq((author . "leo@lwh.jp") (authors . ("leo@lwh.jp")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "xml-ns" "doc/xml-ns@xmlns/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xmlns.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xmlns.txt"))) (checksum . "b11d0010ceac1dac55b22d5eab51e24025593638") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "racket-doc" "rackunit-lib" "scribble-lib")) (description . "XML namespace support") (implies . ()) (last-checked . 1632904811) (last-edit . 1508578700) (last-updated . 1508584231) (modules . ((lib "xml/xml-ns.scrbl") (lib "xml/ns.rkt"))) (name . "xmlns") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:leo@lwh.jp . #t) (ring:1 . #t) (xml . #t))) (source . "git://github.com/lwhjp/racket-xmlns") (tags . ("xml")) (versions . #hash((default . #hasheq((checksum . "b11d0010ceac1dac55b22d5eab51e24025593638") (source . "git://github.com/lwhjp/racket-xmlns") (source_url . "http://github.com/lwhjp/racket-xmlns/tree/master"))))))) ("xrepl" . #hash((author . "eli@racket-lang.org") (authors . ("eli@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("xrepl-lib" "xrepl-doc")) (description . "Console-oriented extended REPL for Racket") (implies . ("xrepl-lib" "xrepl-doc")) (last-checked . 1632904811) (last-edit . 1417659583) (last-updated . 1595778796) (modules . ()) (name . "xrepl") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "334f40aa3c3cf8616eaf05349c4d3ec99501ced3") (source . "git://github.com/racket/xrepl/?path=xrepl") (source_url . "git://github.com/racket/xrepl/?path=xrepl"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("xrepl-doc" . #hash((author . "eli@racket-lang.org") (authors . ("eli@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "xrepl" "doc/xrepl@xrepl-doc/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "sandbox-lib" "scribble-lib" "errortrace-doc" "macro-debugger" "profile-doc" "readline-doc" "macro-debugger-text-lib" "profile-lib" "readline-lib" "xrepl-lib" "racket-doc")) (description . "documentation part of xrepl") (implies . ()) (last-checked . 1632904811) (last-edit . 1417659583) (last-updated . 1595778796) (modules . ((lib "xrepl/xrepl.scrbl") (lib "xrepl/doc-utils.rkt"))) (name . "xrepl-doc") (ring . 0) (search-terms . #hasheq((:docs: . #t) (author:eli@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "334f40aa3c3cf8616eaf05349c4d3ec99501ced3") (source . "git://github.com/racket/xrepl/?path=xrepl-doc") (source_url . "git://github.com/racket/xrepl/?path=xrepl-doc"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("xrepl-lib" . #hash((author . "eli@racket-lang.org") (authors . ("eli@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "readline-lib" "scribble-text-lib")) (description . "implementation (no documentation) part of xrepl") (implies . ()) (last-checked . 1632904812) (last-edit . 1417659583) (last-updated . 1595778797) (modules . ((lib "xrepl/saved-values.rkt") (lib "xrepl/main.rkt") (lib "xrepl/xrepl.rkt"))) (name . "xrepl-lib") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "334f40aa3c3cf8616eaf05349c4d3ec99501ced3") (source . "git://github.com/racket/xrepl/?path=xrepl-lib") (source_url . "git://github.com/racket/xrepl/?path=xrepl-lib"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("xrepl-test" . #hash((author . "eli@racket-lang.org") (authors . ("eli@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "9f098dddde7f217879070816090c1e8e74d49432") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("at-exp-lib" "base" "eli-tester" "xrepl-lib")) (description . "tests for xrepl") (implies . ()) (last-checked . 1632904812) (last-edit . 1417659583) (last-updated . 1595778798) (modules . ((lib "tests/xrepl/wrapped-output.rkt") (lib "tests/xrepl/main.rkt") (lib "tests/xrepl/known-module.rkt") (lib "tests/xrepl/xrepl.rkt"))) (name . "xrepl-test") (ring . 0) (search-terms . #hasheq((author:eli@racket-lang.org . #t) (main-tests . #t) (ring:0 . #t))) (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (tags . ("main-tests")) (versions . #hash((default . #hasheq((checksum . "334f40aa3c3cf8616eaf05349c4d3ec99501ced3") (source . "git://github.com/racket/xrepl/?path=xrepl-test") (source_url . "git://github.com/racket/xrepl/?path=xrepl-test"))) ("5.3.4" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.6" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))) ("5.3.5" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("xsmith" . #hasheq((author . "william@hatch.uno willghatch@gmail.com eeide@cs.utah.edu pierce.darragh@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com" "eeide@cs.utah.edu" "pierce.darragh@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "xsmith" "doc/xsmith@xsmith/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/xsmith.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/xsmith.txt"))) (checksum . "b5401707e5e225ac8f57e15843ffb8459a382235") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1559665478) (dependencies . ("base" "rackunit-lib" "at-exp-lib" "pprint" "racr" "clotho" "math-lib" "unix-socket-lib" "memoize" "scribble-lib" "racket-doc")) (description . "Generator of highly effective fuzz testers.") (implies . ()) (last-checked . 1632904812) (last-edit . 1609365039) (last-updated . 1622024927) (modules . ((lib "xsmith/scribblings/xsmith.scrbl") (lib "xsmith/private/define-grammar-property.rkt") (lib "xsmith/scribblings/introduction.scrbl") (lib "xsmith/private/xsmith-parameters.rkt") (lib "xsmith/private/core-properties.rkt") (lib "xsmith/private/test-fuzzers/product-type.rkt") (lib "xsmith/private/xsmith-command-line.rkt") (lib "xsmith/private/grammar-refiner.rkt") (lib "xsmith/racr-convenience.rkt") (lib "xsmith/private/choice.rkt") (lib "xsmith/private/spec-component-struct.rkt") (lib "xsmith/private/test-fuzzers/multiple-base-types.rkt") (lib "xsmith/scribblings/install.scrbl") (lib "xsmith/scribblings/code-and-license.scrbl") (lib "xsmith/scribblings/guide.scrbl") (lib "xsmith/scribblings/minimal-example.rkt") (lib "xsmith/private/grammar-macros.rkt") (lib "xsmith/private/types.rkt") (lib "xsmith/private/debug-util.rkt") (lib "xsmith/scribblings/reference.scrbl") (lib "xsmith/private/test-fuzzers/subtyping-base-types.rkt") (lib "xsmith/private/test-fuzzers/structural-records.rkt") (lib "xsmith/private/effects.rkt") (lib "xsmith/private/xsmith-version.rkt") (lib "xsmith/canned-components.rkt") (lib "xsmith/private/test-fuzzers/no-types.rkt") (lib "xsmith/private/scope-graph.rkt") (lib "xsmith/scribblings/acknowledgments.scrbl") (lib "xsmith/main.rkt") (lib "xsmith/private/test-fuzzers/function-type.rkt") (lib "xsmith/private/grammar-properties.rkt") (lib "xsmith/private/xsmith-utils.rkt") (lib "xsmith/scribblings/minimal-example-with-canned-components.rkt") (lib "xsmith/scribblings/util.rkt") (lib "xsmith/app.rkt") (lib "xsmith/scribblings/minimal-example-with-variables.rkt") (lib "xsmith/private/core-macros-and-properties.rkt"))) (name . "xsmith") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:eeide@cs.utah.edu . #t) (author:pierce.darragh@gmail.com . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (fuzzing . #t) (ring:1 . #t))) (source . "https://gitlab.flux.utah.edu/xsmith/xsmith.git?path=xsmith#current-release") (tags . ("fuzzing")) (versions . #hash((default . #hasheq((checksum . "b5401707e5e225ac8f57e15843ffb8459a382235") (source . "https://gitlab.flux.utah.edu/xsmith/xsmith.git?path=xsmith#current-release") (source_url . "https://gitlab.flux.utah.edu/xsmith/xsmith.git?path=xsmith#current-release"))))))) ("xsmith-examples" . #hasheq((author . "william@hatch.uno willghatch@gmail.com eeide@cs.utah.edu pierce.darragh@gmail.com") (authors . ("william@hatch.uno" "willghatch@gmail.com" "eeide@cs.utah.edu" "pierce.darragh@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("none" "xsmith-examples"))) (failure-log . "server/built/fail/xsmith-examples.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "b5401707e5e225ac8f57e15843ffb8459a382235") (checksum-error . #f) (collection . #f) (conflicts . ()) (date-added . 1598980419) (dependencies . ("base" "rackunit-lib" "at-exp-lib" "pprint" "racr" "xsmith" "rosette" "clotho" "math-lib" "scribble-lib")) (description . "Example fuzzers built with xsmith.") (implies . ()) (last-checked . 1632904813) (last-edit . 1609365078) (last-updated . 1622024931) (modules . ((lib "xsmith-examples/future/pretty-printing.rkt") (lib "xsmith-examples/verilog/verilog.rkt") (lib "xsmith-examples/future/refiners-test.rkt") (lib "xsmith-examples/simple/racket.rkt") (lib "xsmith-examples/cish/cish-main.rkt") (lib "xsmith-examples/scribblings/xsmith-examples.scrbl") (lib "xsmith-examples/racket-kernel-fuzzer/racket-kernel-fuzzer.rkt") (lib "xsmith-examples/future/simplesafemath.rkt") (lib "xsmith-examples/pythonesque/pythonesque.rkt") (lib "xsmith-examples/cish/cish-grammar.rkt") (lib "xsmith-examples/cish/cish.rkt") (lib "xsmith-examples/future/btree.rkt") (lib "xsmith-examples/cish/cish-rules.rkt") (lib "xsmith-examples/simple/python.rkt") (lib "xsmith-examples/simple/javascript.rkt") (lib "xsmith-examples/cish/cish-utils.rkt") (lib "xsmith-examples/simple/lua.rkt") (lib "xsmith-examples/schemely/schemely.rkt") (lib "xsmith-examples/future/polyphasic.rkt") (lib "xsmith-examples/future/fastmath.rkt"))) (name . "xsmith-examples") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:docs-error: . #t) (author:eeide@cs.utah.edu . #t) (author:pierce.darragh@gmail.com . #t) (author:willghatch@gmail.com . #t) (author:william@hatch.uno . #t) (fuzzing . #t) (ring:1 . #t))) (source . "https://gitlab.flux.utah.edu/xsmith/xsmith.git?path=xsmith-examples#current-release") (tags . ("fuzzing")) (versions . #hash((default . #hasheq((checksum . "b5401707e5e225ac8f57e15843ffb8459a382235") (source . "https://gitlab.flux.utah.edu/xsmith/xsmith.git?path=xsmith-examples#current-release") (source_url . "https://gitlab.flux.utah.edu/xsmith/xsmith.git?path=xsmith-examples#current-release"))))))) ("yaml" . #hasheq((author . "ejs@ccs.neu.edu") (authors . ("ejs@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "yaml" "doc/yaml@yaml/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/yaml.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/yaml.txt"))) (checksum . "b60a1e4a01979ed447799b07e7f8dd5ff17019f0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "srfi-lite-lib" "typed-racket-lib" "rackunit-lib" "scribble-lib" "racket-doc" "sandbox-lib")) (description . "A library for parsing and emitting YAML.") (implies . ()) (last-checked . 1632904814) (last-edit . 1393674229) (last-updated . 1613898580) (modules . ((lib "yaml/tokens.rkt") (lib "yaml/resolver.rkt") (lib "yaml/struct.rkt") (lib "yaml/nodes.rkt") (lib "yaml/scribblings/yaml.scrbl") (lib "yaml/tests/utils.rkt") (lib "yaml/emitter.rkt") (lib "yaml/yaml-expr.rkt") (lib "yaml/constructor.rkt") (lib "yaml/serializer.rkt") (lib "yaml/composer.rkt") (lib "yaml/errors.rkt") (lib "yaml/scanner.rkt") (lib "yaml/utils.rkt") (lib "yaml/parser.rkt") (lib "yaml/tests/test-nodes.rkt") (lib "yaml/main.rkt") (lib "yaml/events.rkt") (lib "yaml/representer.rkt"))) (name . "yaml") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ejs@ccs.neu.edu . #t) (parsing . #t) (ring:1 . #t) (yaml . #t))) (source . "github://github.com/esilkensen/yaml/master") (tags . ("parsing" "yaml")) (versions . #hash((default . #hasheq((checksum . "b60a1e4a01979ed447799b07e7f8dd5ff17019f0") (source . "github://github.com/esilkensen/yaml/master") (source_url . "http://github.com/esilkensen/yaml/tree/master"))))))) ("yotsubAPI" . #hasheq((author . "gg@tfwno.gf") (authors . ("gg@tfwno.gf")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "yotsubAPI" "doc/yotsubAPI@yotsubAPI/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/yotsubAPI.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/yotsubAPI.txt"))) (checksum . "cbf312862fc4e94deb74790a2756d5745e5463fc") (checksum-error . #f) (collection . "yotsubAPI") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc")) (description . "A Racket Client for the 4chan API") (implies . ()) (last-checked . 1632904815) (last-edit . 1415302292) (last-updated . 1502816535) (modules . ((lib "yotsubAPI/main.rkt") (lib "yotsubAPI/yotsubAPI.scrbl"))) (name . "yotsubAPI") (ring . 1) (search-terms . #hasheq((4chan . #t) (:build-success: . #t) (:docs: . #t) (api . #t) (author:gg@tfwno.gf . #t) (client . #t) (http . #t) (ring:1 . #t))) (source . "git://github.com/g-gundam/yotsubAPI") (tags . ("4chan" "api" "client" "http")) (versions . #hash((default . #hasheq((checksum . "cbf312862fc4e94deb74790a2756d5745e5463fc") (source . "git://github.com/g-gundam/yotsubAPI") (source_url . "http://github.com/g-gundam/yotsubAPI/tree/master"))))))) ("z3" . #hasheq((author . "pcn@cs.umd.edu") (authors . ("pcn@cs.umd.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/z3.txt") (test-failure-log . "server/built/test-fail/z3.txt") (test-success-log . #f))) (checksum . "78deda2c7a377b93caefd40fd16e5df9c6d53c40") (checksum-error . #f) (collection . "z3") (conflicts . ()) (dependencies . ("base" "html-lib" "typed-racket-lib" "typed-racket-more")) (description . "Z3 bindings for Racket") (implies . ()) (last-checked . 1632904815) (last-edit . 1472838610) (last-updated . 1557606599) (modules . ((lib "z3/ffi/main.rkt") (lib "z3/ffi/ffi.rkt") (lib "z3/smt.rkt") (lib "z3/smt/commands.rkt") (lib "z3/ffi/define-ffi.rkt") (lib "z3/smt/main.rkt") (lib "z3/ffi.rkt") (lib "z3/ffi/ffi-typed.rkt") (lib "z3/smt/primitives.rkt") (lib "z3/smt/private.rkt") (lib "z3/main.rkt") (lib "z3/tests/guide.rkt"))) (name . "z3") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:pcn@cs.umd.edu . #t) (ring:1 . #t) (smt . #t) (solver . #t) (z3 . #t))) (source . "https://github.com/philnguyen/z3-rkt.git?path=z3/") (tags . ("smt" "solver" "z3")) (versions . #hash((default . #hasheq((checksum . "78deda2c7a377b93caefd40fd16e5df9c6d53c40") (source . "https://github.com/philnguyen/z3-rkt.git?path=z3/") (source_url . "https://github.com/philnguyen/z3-rkt.git?path=z3/"))))))) ("zKanren" . #hasheq((author . "zaomir@outlook.com") (authors . ("zaomir@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . "server/built/deps/zKanren.txt") (docs . (("main" "zKanren" "doc/zKanren@zKanren/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zKanren.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zKanren.txt"))) (checksum . "82c936ed11fa703b3b26895b3a2d7b7f379a8c35") (checksum-error . #f) (collection . "zKanren") (conflicts . ()) (dependencies . ("base" "scribble-lib" "racket-doc" "rackunit-lib" "typed-racket")) (description . "-") (implies . ()) (last-checked . 1632904817) (last-edit . 1521200061) (last-updated . 1521803934) (modules . ((lib "zKanren/scribblings/zKanren.scrbl") (lib "zKanren/main.rkt") (lib "zKanren/zk.rkt"))) (name . "zKanren") (ring . 1) (search-terms . #hasheq((:build-dep-fail: . #t) (:build-success: . #t) (:docs: . #t) (author:zaomir@outlook.com . #t) (logic . #t) (miniKanren . #t) (ring:1 . #t))) (source . "https://github.com/the-language/zKanren2.git") (tags . ("logic" "miniKanren")) (versions . #hash((default . #hasheq((checksum . "82c936ed11fa703b3b26895b3a2d7b7f379a8c35") (source . "https://github.com/the-language/zKanren2.git") (source_url . "https://github.com/the-language/zKanren2.git"))))))) ("zaoqil" . #hasheq((author . "zaomir@outlook.com") (authors . ("zaomir@outlook.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . "server/built/archive-fail/zaoqil.txt") (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "804a7f5c96d173928205693f244578a19e3cebc5") (checksum-error . "pkg: Git checkout initial protocol failed;\n the given URL might not refer to a Git repository\n  given URL: https://github.com/zaoqil/zaoqil.git?path=racket\n  context...:\n   /home/pkgserver/racket/collects/pkg/private/stage.rkt:781:25\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:380:0: parse-initial-refs\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:73:8\n   /home/pkgserver/racket/collects/net/git-checkout.rkt:54:2: retry-loop\n   /home/pkgserver/pkg-index/official/update.rkt:23:2\n   /home/pkgserver/racket/collects/racket/private/list.rkt:255:2: filter\n   /home/pkgserver/pkg-index/official/update.rkt:155:0: do-update!\n   /home/pkgserver/pkg-index/official/common.rkt:147:0: run!\n   /home/pkgserver/pkg-index/official/update.rkt:166:0: run-update!\n") (collection . #f) (conflicts . ()) (dependencies . ("racket" "scribble-lib" "racket-doc" "rackunit-lib")) (description . "語") (implies . ()) (last-checked . 1632904815) (last-edit . 1517568635) (last-updated . 1621810242) (modules . ((lib "zaoqil/lang/reader.rkt") (lib "zaoqil/main.rkt") (lib "zaoqil/zaoqil.scrbl"))) (name . "zaoqil") (ring . 1) (search-terms . #hasheq((:build-fail: . #t) (:error: . #t) (author:zaomir@outlook.com . #t) (compiler . #t) (kernel . #t) (lisp . #t) (os . #t) (ring:1 . #t))) (source . "https://github.com/zaoqil/zaoqil.git?path=racket") (tags . ("compiler" "kernel" "lisp" "os")) (versions . #hash((default . #hasheq((checksum . "804a7f5c96d173928205693f244578a19e3cebc5") (source . "https://github.com/zaoqil/zaoqil.git?path=racket") (source_url . "https://github.com/zaoqil/zaoqil.git?path=racket"))))))) ("zeromq" . #hasheq((author . "jay.mccarthy@gmail.com") (authors . ("jay.mccarthy@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "zeromq" "doc/zeromq@zeromq/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zeromq.txt") (test-failure-log . "server/built/test-fail/zeromq.txt") (test-success-log . #f))) (checksum . "cff2ce12fd39e5830628a48f479b917b290c5036") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "at-exp-lib" "racket-doc" "math-lib" "rackunit-lib")) (description . "A Racket interface to zeromq based on an FFI") (implies . ()) (last-checked . 1632904815) (last-edit . 1353603845) (last-updated . 1502816536) (modules . ((lib "net/zmq/zeromq.scrbl") (lib "net/zmq.rkt"))) (name . "zeromq") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:jay.mccarthy@gmail.com . #t) (concurrency . #t) (ffi . #t) (net . #t) (parallel . #t) (ring:1 . #t))) (source . "github://github.com/jeapostrophe/zeromq/master") (tags . ("concurrency" "ffi" "net" "parallel")) (versions . #hash((default . #hasheq((checksum . "cff2ce12fd39e5830628a48f479b917b290c5036") (source . "github://github.com/jeapostrophe/zeromq/master") (source_url . "http://github.com/jeapostrophe/zeromq/tree/master"))))))) ("zeromq-guide-examples" . #hasheq((author . "aymano.osman@gmail.com") (authors . ("aymano.osman@gmail.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zeromq-guide-examples.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zeromq-guide-examples.txt"))) (checksum . "b938f6e33d04cfd62f9a328543d3943a0f3f53a0") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (date-added . 1601516680) (dependencies . ("base" "zeromq-r-lib")) (description . "See https://zguide.zeromq.org/") (implies . ()) (last-checked . 1632904816) (last-edit . 1601516800) (last-updated . 1603043577) (modules . ((lib "zeromq-guide-examples/rrworker.rkt") (lib "zeromq-guide-examples/msgqueue.rkt") (lib "zeromq-guide-examples/wuclient.rkt") (lib "zeromq-guide-examples/wuserver.rkt") (lib "zeromq-guide-examples/hwclient.rkt") (lib "zeromq-guide-examples/taskwork.rkt") (lib "zeromq-guide-examples/taskwork2.rkt") (lib "zeromq-guide-examples/syncpub.rkt") (lib "zeromq-guide-examples/rrclient.rkt") (lib "zeromq-guide-examples/syncsub.rkt") (lib "zeromq-guide-examples/tasksink.rkt") (lib "zeromq-guide-examples/mtserver.rkt") (lib "zeromq-guide-examples/tasksink2.rkt") (lib "zeromq-guide-examples/hwserver.rkt") (lib "zeromq-guide-examples/rrbroker.rkt") (lib "zeromq-guide-examples/mtrelay.rkt") (lib "zeromq-guide-examples/taskvent.rkt"))) (name . "zeromq-guide-examples") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:aymano.osman@gmail.com . #t) (ring:1 . #t))) (source . "https://github.com/aymanosman/racket-packages.git?path=zeromq-guide-examples") (tags . ()) (versions . #hash((default . #hasheq((checksum . "b938f6e33d04cfd62f9a328543d3943a0f3f53a0") (source . "https://github.com/aymanosman/racket-packages.git?path=zeromq-guide-examples") (source_url . "https://github.com/aymanosman/racket-packages.git?path=zeromq-guide-examples"))))))) ("zeromq-r" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "zeromq-r" "doc/zeromq-r@zeromq-r/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zeromq-r.txt") (test-failure-log . "server/built/test-fail/zeromq-r.txt") (test-success-log . #f))) (checksum . "d45ee2bbc64582b22055eee20d0ef777d519a3b4") (checksum-error . #f) (collection . "zeromq") (conflicts . ()) (dependencies . (("base" #:version "6.10") "zeromq-r-lib" "rackunit-lib" "racket-doc" "scribble-lib")) (description . "Bindings for ZeroMQ") (implies . ("zeromq-r-lib")) (last-checked . 1632904816) (last-edit . 1501792411) (last-updated . 1614970557) (modules . ((lib "zeromq/tests/mutex.rkt") (lib "zeromq/tests/errors.rkt") (lib "zeromq/tests/two-threads.rkt") (lib "zeromq/tests/sync-wakeup.rkt") (lib "zeromq/tests/scatter-gather.rkt") (lib "zeromq/tests/radio-dish.rkt") (lib "zeromq/tests/pub-sub.rkt") (lib "zeromq/tests/hello.rkt") (lib "zeromq/tests/poller.rkt") (lib "zeromq/tests/proxy.rkt") (lib "zeromq/tests/rep-req.rkt") (lib "zeromq/zeromq-r.scrbl") (lib "zeromq/tests/client-server.rkt") (lib "zeromq/tests/sync-interleave.rkt"))) (name . "zeromq-r") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:ryanc@racket-lang.org . #t) (net . #t) (ring:1 . #t))) (source . "git://github.com/rmculpepper/racket-zeromq?path=zeromq-r") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "d45ee2bbc64582b22055eee20d0ef777d519a3b4") (source . "git://github.com/rmculpepper/racket-zeromq?path=zeromq-r") (source_url . "http://github.com/rmculpepper/racket-zeromq/tree/master?path=zeromq-r"))))))) ("zeromq-r-lib" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zeromq-r-lib.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zeromq-r-lib.txt"))) (checksum . "d45ee2bbc64582b22055eee20d0ef777d519a3b4") (checksum-error . #f) (collection . "zeromq") (conflicts . ()) (date-added . 1553104502) (dependencies . (("base" #:version "7.0") ("zeromq-win32-i386" #:platform "win32\\i386") ("zeromq-win32-x86_64" #:platform "win32\\x86_64") ("zeromq-x86_64-linux-natipkg" #:platform "x86_64-linux-natipkg"))) (description . "Bindings for ZeroMQ") (implies . ()) (last-checked . 1632904816) (last-edit . 1565622231) (last-updated . 1614970558) (modules . ((lib "zeromq/private/mutex.rkt") (lib "zeromq/main.rkt") (lib "zeromq/private/ffi.rkt") (lib "zeromq/private/addr.rkt") (lib "zeromq/private/install.rkt") (lib "zeromq/unsafe.rkt"))) (name . "zeromq-r-lib") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (net . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-zeromq.git?path=zeromq-r-lib") (tags . ("net")) (versions . #hash((default . #hasheq((checksum . "d45ee2bbc64582b22055eee20d0ef777d519a3b4") (source . "https://github.com/rmculpepper/racket-zeromq.git?path=zeromq-r-lib") (source_url . "https://github.com/rmculpepper/racket-zeromq.git?path=zeromq-r-lib"))))))) ("zeromq-win32-i386" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zeromq-win32-i386.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zeromq-win32-i386.txt"))) (checksum . "c9c89e3542508d753384c62ab368b3585796be8b") (checksum-error . #f) (collection . "zeromq") (conflicts . ()) (date-added . 1565378190) (dependencies . ("base")) (description . "native library for zeromq") (implies . ()) (last-checked . 1632904816) (last-edit . 1565378190) (last-updated . 1565378190) (modules . ()) (name . "zeromq-win32-i386") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-natipkg-zeromq.git?path=zeromq-win32-i386") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c9c89e3542508d753384c62ab368b3585796be8b") (source . "https://github.com/rmculpepper/racket-natipkg-zeromq.git?path=zeromq-win32-i386") (source_url . "https://github.com/rmculpepper/racket-natipkg-zeromq.git?path=zeromq-win32-i386"))))))) ("zeromq-win32-x86_64" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zeromq-win32-x86_64.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zeromq-win32-x86_64.txt"))) (checksum . "c9c89e3542508d753384c62ab368b3585796be8b") (checksum-error . #f) (collection . "zeromq") (conflicts . ()) (date-added . 1565378295) (dependencies . ("base")) (description . "native library for zeromq") (implies . ()) (last-checked . 1632904816) (last-edit . 1565378295) (last-updated . 1565378295) (modules . ()) (name . "zeromq-win32-x86_64") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:no-tag: . #t) (author:ryanc@racket-lang.org . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-natipkg-zeromq.git?path=zeromq-win32-x86_64") (tags . ()) (versions . #hash((default . #hasheq((checksum . "c9c89e3542508d753384c62ab368b3585796be8b") (source . "https://github.com/rmculpepper/racket-natipkg-zeromq.git?path=zeromq-win32-x86_64") (source_url . "https://github.com/rmculpepper/racket-natipkg-zeromq.git?path=zeromq-win32-x86_64"))))))) ("zeromq-x86_64-linux-natipkg" . #hasheq((author . "ryanc@racket-lang.org") (authors . ("ryanc@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zeromq-x86_64-linux-natipkg.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zeromq-x86_64-linux-natipkg.txt"))) (checksum . "c9c89e3542508d753384c62ab368b3585796be8b") (checksum-error . #f) (collection . "zeromq") (conflicts . ()) (dependencies . ("base")) (description . "native libraries for zeromq-r-lib package") (implies . ()) (last-checked . 1632904817) (last-edit . 1536165084) (last-updated . 1565384120) (modules . ()) (name . "zeromq-x86_64-linux-natipkg") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (author:ryanc@racket-lang.org . #t) (ffi . #t) (natipkg . #t) (ring:1 . #t))) (source . "https://github.com/rmculpepper/racket-natipkg-zeromq.git?path=zeromq-x86_64-linux-natipkg") (tags . ("ffi" "natipkg")) (versions . #hash((default . #hasheq((checksum . "c9c89e3542508d753384c62ab368b3585796be8b") (source . "https://github.com/rmculpepper/racket-natipkg-zeromq.git?path=zeromq-x86_64-linux-natipkg") (source_url . "https://github.com/rmculpepper/racket-natipkg-zeromq.git?path=zeromq-x86_64-linux-natipkg"))))))) ("zippers" . #hasheq((author . "david@davidchristiansen.dk") (authors . ("david@davidchristiansen.dk")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "zippers" "doc/zippers@zippers/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zippers.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zippers.txt"))) (checksum . "ab11342e1359b0844f8f19f801cdd02d697f7ec3") (checksum-error . #f) (collection . "zippers") (conflicts . ()) (dependencies . ("base" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Utilities for working with and deriving Huet-style zippers") (implies . ()) (last-checked . 1632904817) (last-edit . 1461432559) (last-updated . 1502816536) (modules . ((lib "zippers/main.rkt") (lib "zippers/scribblings/zippers.scrbl"))) (name . "zippers") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:david@davidchristiansen.dk . #t) (ring:1 . #t) (utility . #t))) (source . "git://github.com/david-christiansen/racket-zippers") (tags . ("utility")) (versions . #hash((default . #hasheq((checksum . "ab11342e1359b0844f8f19f801cdd02d697f7ec3") (source . "git://github.com/david-christiansen/racket-zippers") (source_url . "http://github.com/david-christiansen/racket-zippers/tree/master"))))))) ("zmq" . #hasheq((author . "mordae@anilinux.org") (authors . ("mordae@anilinux.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "zmq" "doc/zmq@zmq/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zmq.txt") (test-failure-log . "server/built/test-fail/zmq.txt") (test-success-log . #f))) (checksum . "5d936df13adce486ac23c5e921099de10ad9bf61") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base" "scribble-lib" "misc1" "mordae" "typed-racket-lib" "racket-doc" "typed-racket-lib" "typed-racket-doc")) (description . "Minimal Racket ZeroMQ Bindings") (implies . ()) (last-checked . 1632904817) (last-edit . 1397821983) (last-updated . 1502816537) (modules . ((lib "zmq/private/ffi.rkt") (lib "zmq/main.rkt") (lib "zmq/zmq.scrbl"))) (name . "zmq") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:mordae@anilinux.org . #t) (ffi . #t) (ipc . #t) (linux . #t) (ring:1 . #t))) (source . "github://github.com/mordae/racket-zmq/master") (tags . ("ffi" "ipc" "linux")) (versions . #hash((default . #hasheq((checksum . "5d936df13adce486ac23c5e921099de10ad9bf61") (source . "github://github.com/mordae/racket-zmq/master") (source_url . "http://github.com/mordae/racket-zmq/tree/master"))))))) ("zo-lib" . #hash((author . "mflatt@racket-lang.org jay@racket-lang.org") (authors . ("mflatt@racket-lang.org" "jay@racket-lang.org")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . ()) (failure-log . #f) (min-failure-log . #f) (success-log . #f) (test-failure-log . #f) (test-success-log . #f))) (checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (checksum-error . #f) (collection . (multi)) (conflicts . ()) (dependencies . ("base")) (description . "Library for handling zo files") (implies . ()) (last-checked . 1632904818) (last-edit . 1464388807) (last-updated . 1632667599) (modules . ((lib "compiler/private/opaque.rkt") (lib "compiler/zo-structs.rkt") (lib "compiler/zo-marshal.rkt") (lib "compiler/zo-parse.rkt") (lib "compiler/faslable-correlated.rkt"))) (name . "zo-lib") (ring . 0) (search-terms . #hasheq((author:jay@racket-lang.org . #t) (author:mflatt@racket-lang.org . #t) (main-distribution . #t) (ring:0 . #t))) (source . "git://github.com/racket/racket?path=pkgs/zo-lib") (tags . ("main-distribution")) (versions . #hash((default . #hasheq((checksum . "d40ee436e0670a9dedc4dc5075c15e6bb1fea269") (source . "git://github.com/racket/racket?path=pkgs/zo-lib") (source_url . "http://github.com/racket/racket/tree/master?path=pkgs%2Fzo-lib"))) ("6.1.1" . #hash((checksum . "9f098dddde7f217879070816090c1e8e74d49432") (source . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip") (source_url . "http://racket-packages.s3-us-west-2.amazonaws.com/pkgs/empty.zip"))))))) ("zordoz" . #hasheq((author . "types@ccs.neu.edu") (authors . ("types@ccs.neu.edu")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "zordoz" "doc/zordoz@zordoz/index.html"))) (failure-log . #f) (min-failure-log . "server/built/min-fail/zordoz.txt") (success-log . "server/built/install/zordoz.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zordoz.txt"))) (checksum . "00f68d7e00fbf271a95c3f120a2d9fe5b598b7e9") (checksum-error . #f) (collection . "zordoz") (conflicts . ()) (dependencies . ("base" "compiler-lib" "zo-lib" "typed-racket-lib" "typed-racket-more" "readline-lib" "dynext-lib" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "Explorer for .zo bytecode files") (implies . ()) (last-checked . 1632904818) (last-edit . 1521422098) (last-updated . 1585516391) (modules . ((lib "zordoz/main.rkt") (lib "zordoz/scribblings/typed-api.scrbl") (lib "zordoz/scribblings/overview.scrbl") (lib "zordoz/typed/zo-structs.rkt") (lib "zordoz/zordoz.rkt") (lib "zordoz/private/zo-compile.rkt") (lib "zordoz/private/dispatch-table.rkt") (lib "zordoz/scribblings/api.scrbl") (lib "zordoz/private/zo-string.rkt") (lib "zordoz/private/zo-syntax.rkt") (lib "zordoz/private/zo-find.rkt") (lib "zordoz/private/zo-shell.rkt") (lib "zordoz/private/zo-transition.rkt") (lib "zordoz/test.rkt") (lib "zordoz/scribblings/repl.scrbl") (lib "zordoz/private/if-windows.rkt") (lib "zordoz/private/windows-readline.rkt") (lib "zordoz/typed.rkt") (lib "zordoz/scribblings/zordoz.scrbl"))) (name . "zordoz") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:types@ccs.neu.edu . #t) (compiler . #t) (repl . #t) (ring:1 . #t) (zo . #t))) (source . "https://github.com/bennn/zordoz.git") (tags . ("compiler" "repl" "zo")) (versions . #hash(("6.10.1" . #hasheq((checksum . "65a01ee5f99b08d71b3ff4c0fb9de8b53ba08bf1") (source . "https://github.com/bennn/zordoz.git#v6.5") (source_url . "https://github.com/bennn/zordoz.git#v6.5"))) (default . #hasheq((checksum . "00f68d7e00fbf271a95c3f120a2d9fe5b598b7e9") (source . "https://github.com/bennn/zordoz.git") (source_url . "https://github.com/bennn/zordoz.git"))) ("6.2.1" . #hasheq((checksum . "2c7d2a7716754fb653379771830b2bd22dc4f5af") (source . "https://github.com/bennn/zordoz.git#v6.2") (source_url . "https://github.com/bennn/zordoz.git#v6.2"))) ("6.2" . #hasheq((checksum . "2c7d2a7716754fb653379771830b2bd22dc4f5af") (source . "https://github.com/bennn/zordoz.git#v6.2") (source_url . "https://github.com/bennn/zordoz.git#v6.2"))) ("6.3" . #hasheq((checksum . "86819d0d66d537657cbc2d83ee3d4a41465a0eea") (source . "https://github.com/bennn/zordoz.git#v6.3") (source_url . "https://github.com/bennn/zordoz.git#v6.3"))) ("6.6" . #hasheq((checksum . "65a01ee5f99b08d71b3ff4c0fb9de8b53ba08bf1") (source . "https://github.com/bennn/zordoz.git#v6.5") (source_url . "https://github.com/bennn/zordoz.git#v6.5"))) ("6.7" . #hasheq((checksum . "65a01ee5f99b08d71b3ff4c0fb9de8b53ba08bf1") (source . "https://github.com/bennn/zordoz.git#v6.5") (source_url . "https://github.com/bennn/zordoz.git#v6.5"))) ("6.4" . #hasheq((checksum . "86819d0d66d537657cbc2d83ee3d4a41465a0eea") (source . "https://github.com/bennn/zordoz.git#v6.3") (source_url . "https://github.com/bennn/zordoz.git#v6.3"))) ("6.5" . #hasheq((checksum . "65a01ee5f99b08d71b3ff4c0fb9de8b53ba08bf1") (source . "https://github.com/bennn/zordoz.git#v6.5") (source_url . "https://github.com/bennn/zordoz.git#v6.5"))) ("6.8" . #hasheq((checksum . "65a01ee5f99b08d71b3ff4c0fb9de8b53ba08bf1") (source . "https://github.com/bennn/zordoz.git#v6.5") (source_url . "https://github.com/bennn/zordoz.git#v6.5"))) ("6.9" . #hasheq((checksum . "65a01ee5f99b08d71b3ff4c0fb9de8b53ba08bf1") (source . "https://github.com/bennn/zordoz.git#v6.5") (source_url . "https://github.com/bennn/zordoz.git#v6.5"))) ("6.1" . #hasheq((checksum . "2f098c8b8877075d87b1f7c7c29ff2f69649990f") (source . "https://github.com/bennn/zordoz.git#v6.1") (source_url . "https://github.com/bennn/zordoz.git#v6.1"))) ("6.1.1" . #hasheq((checksum . "2f098c8b8877075d87b1f7c7c29ff2f69649990f") (source . "https://github.com/bennn/zordoz.git#v6.1") (source_url . "https://github.com/bennn/zordoz.git#v6.1"))) ("6.12" . #hasheq((checksum . "65a01ee5f99b08d71b3ff4c0fb9de8b53ba08bf1") (source . "https://github.com/bennn/zordoz.git#v6.5") (source_url . "https://github.com/bennn/zordoz.git#v6.5"))) ("6.11" . #hasheq((checksum . "65a01ee5f99b08d71b3ff4c0fb9de8b53ba08bf1") (source . "https://github.com/bennn/zordoz.git#v6.5") (source_url . "https://github.com/bennn/zordoz.git#v6.5"))) ("6.10" . #hasheq((checksum . "65a01ee5f99b08d71b3ff4c0fb9de8b53ba08bf1") (source . "https://github.com/bennn/zordoz.git#v6.5") (source_url . "https://github.com/bennn/zordoz.git#v6.5"))))))) ("zubat" . #hasheq((author . "kalxd@126.com") (authors . ("kalxd@126.com")) (build . #hash((conflicts-log . #f) (dep-failure-log . #f) (docs . (("main" "zubat" "doc/zubat@zubat/index.html"))) (failure-log . #f) (min-failure-log . #f) (success-log . "server/built/install/zubat.txt") (test-failure-log . #f) (test-success-log . "server/built/test-success/zubat.txt"))) (checksum . "97e3365d8b4343d7ec23df3fa9640fd865d66841") (checksum-error . #f) (collection . "zubat") (conflicts . ()) (date-added . 1565010293) (dependencies . ("base" "html-parsing" "sxml" "rackunit-lib" "scribble-lib" "racket-doc")) (description . "html5简易解析器") (implies . ()) (last-checked . 1632904821) (last-edit . 1609330101) (last-updated . 1609330101) (modules . ((lib "zubat/zubat/nodeset.rkt") (lib "zubat/main.rkt") (lib "zubat/zubat/node.rkt") (lib "zubat/zubat/util.rkt") (lib "zubat/scribblings/nodeset.scrbl") (lib "zubat/scribblings/node.scrbl") (lib "zubat/scribblings/desc.scrbl") (lib "zubat/scribblings/parse.scrbl") (lib "zubat/zubat/test-kit.rkt") (lib "zubat/scribblings/zubat.scrbl"))) (name . "zubat") (ring . 1) (search-terms . #hasheq((:build-success: . #t) (:docs: . #t) (author:kalxd@126.com . #t) (html . #t) (ring:1 . #t))) (source . "https://github.com/kalxd/zubat.git#v0.3.1") (tags . ("html")) (versions . #hash((default . #hasheq((checksum . "97e3365d8b4343d7ec23df3fa9640fd865d66841") (source . "https://github.com/kalxd/zubat.git#v0.3.1") (source_url . "https://github.com/kalxd/zubat.git#v0.3.1"))))))))